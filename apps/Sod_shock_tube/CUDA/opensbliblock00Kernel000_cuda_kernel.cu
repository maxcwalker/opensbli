//
// auto-generated by ops.py
//
__constant__ int dims_opensbliblock00Kernel000 [9][1];
static int dims_opensbliblock00Kernel000_h [9][1] = {0};

//user function
__device__

 void opensbliblock00Kernel000_gpu(const ACC<double> &rhou0_B0,
  const ACC<double> &p_B0,
  const ACC<double> &a_B0,
  const ACC<double> &rho_B0,
  const ACC<double> &u0_B0,
  const ACC<double> &rhoE_B0,
  ACC<double> &wk2_B0,
  ACC<double> &wk0_B0,
  ACC<double> &wk1_B0)
{
   double AVG_0_0_LEV_02 = 0.0;
   double CS_04 = 0.0;
   double Recon_1 = 0.0;
   double beta_2 = 0.0;
   double CS_24 = 0.0;
   double CF_11 = 0.0;
   double AVG_0_0_LEV_12 = 0.0;
   double CS_20 = 0.0;
   double AVG_0_0_LEV_20 = 0.0;
   double CF_15 = 0.0;
   double CS_01 = 0.0;
   double CF_25 = 0.0;
   double CS_05 = 0.0;
   double inv_omega_sum = 0.0;
   double CF_00 = 0.0;
   double beta_1 = 0.0;
   double CS_03 = 0.0;
   double max_lambda_0_00 = 0.0;
   double CF_12 = 0.0;
   double AVG_0_a = 0.0;
   double CS_14 = 0.0;
   double CF_21 = 0.0;
   double AVG_0_0_LEV_01 = 0.0;
   double AVG_0_rho = 0.0;
   double AVG_0_0_LEV_21 = 0.0;
   double AVG_0_0_LEV_11 = 0.0;
   double AVG_0_inv_rho = 0.0;
   double CS_10 = 0.0;
   double alpha_0 = 0.0;
   double CF_05 = 0.0;
   double CF_24 = 0.0;
   double CS_15 = 0.0;
   double CF_14 = 0.0;
   double CF_10 = 0.0;
   double alpha_1 = 0.0;
   double CS_12 = 0.0;
   double delta_2 = 0.0;
   double Recon_0 = 0.0;
   double CF_13 = 0.0;
   double CS_21 = 0.0;
   double CF_23 = 0.0;
   double CS_23 = 0.0;
   double inv_AVG_rho = 0.0;
   double AVG_0_0_LEV_00 = 0.0;
   double inv_alpha_sum = 0.0;
   double AVG_0_u0 = 0.0;
   double CS_11 = 0.0;
   double beta_0 = 0.0;
   double CS_02 = 0.0;
   double CF_01 = 0.0;
   double CS_00 = 0.0;
   double AVG_0_0_LEV_22 = 0.0;
   double max_lambda_0_22 = 0.0;
   double CF_02 = 0.0;
   double CS_22 = 0.0;
   double AVG_0_0_LEV_10 = 0.0;
   double CF_20 = 0.0;
   double CS_13 = 0.0;
   double inv_AVG_a = 0.0;
   double Recon_2 = 0.0;
   double CS_25 = 0.0;
   double delta_0 = 0.0;
   double CF_04 = 0.0;
   double delta_1 = 0.0;
   double CF_22 = 0.0;
   double CF_03 = 0.0;
   double max_lambda_0_11 = 0.0;
   double alpha_2 = 0.0;
   AVG_0_rho = sqrt(rho_B0(0)*rho_B0(1));

   AVG_0_inv_rho = 1.0/(sqrt(rho_B0(1)) + sqrt(rho_B0(0)));

    AVG_0_u0 = AVG_0_inv_rho*(sqrt(rho_B0(1))*u0_B0(1) +
      sqrt(rho_B0(0))*u0_B0(0));

    AVG_0_a = sqrt(gamma_m1*(AVG_0_inv_rho*((p_B0(0) + rhoE_B0(0))/sqrt(rho_B0(0)) +
      (p_B0(1) + rhoE_B0(1))/sqrt(rho_B0(1))) - rc0*pow(AVG_0_u0, 2)));

   inv_AVG_a = 1.0/AVG_0_a;

   inv_AVG_rho = 1.0/AVG_0_rho;

    AVG_0_0_LEV_00 = (rc1)*AVG_0_u0*inv_AVG_a*(gama*AVG_0_a*AVG_0_u0*pow(inv_AVG_a, 2) - AVG_0_a*AVG_0_u0*pow(inv_AVG_a,
      2) + 2);

   AVG_0_0_LEV_01 = -rc0*inv_AVG_a*(gama*AVG_0_a*AVG_0_u0*pow(inv_AVG_a, 2) - AVG_0_a*AVG_0_u0*pow(inv_AVG_a, 2) + 1);

   AVG_0_0_LEV_02 = (rc0)*gamma_m1*pow(inv_AVG_a, 2);

   AVG_0_0_LEV_10 = -rc0*(gama*pow(AVG_0_u0, 2)*pow(inv_AVG_a, 2) - pow(AVG_0_u0, 2)*pow(inv_AVG_a, 2) - 2);

   AVG_0_0_LEV_11 = gamma_m1*AVG_0_u0*pow(inv_AVG_a, 2);

   AVG_0_0_LEV_12 = -gamma_m1*pow(inv_AVG_a, 2);

    AVG_0_0_LEV_20 = (rc1)*AVG_0_u0*inv_AVG_a*(gama*AVG_0_a*AVG_0_u0*pow(inv_AVG_a, 2) - AVG_0_a*AVG_0_u0*pow(inv_AVG_a,
      2) - 2);

   AVG_0_0_LEV_21 = -rc0*inv_AVG_a*(gama*AVG_0_a*AVG_0_u0*pow(inv_AVG_a, 2) - AVG_0_a*AVG_0_u0*pow(inv_AVG_a, 2) - 1);

   AVG_0_0_LEV_22 = (rc0)*gamma_m1*pow(inv_AVG_a, 2);

    CF_00 = AVG_0_0_LEV_00*rhou0_B0(-2) + AVG_0_0_LEV_01*p_B0(-2) +
      AVG_0_0_LEV_01*rhou0_B0(-2)*u0_B0(-2) + AVG_0_0_LEV_02*p_B0(-2)*u0_B0(-2)
      + AVG_0_0_LEV_02*rhoE_B0(-2)*u0_B0(-2);

    CF_10 = AVG_0_0_LEV_10*rhou0_B0(-2) + AVG_0_0_LEV_11*p_B0(-2) +
      AVG_0_0_LEV_11*rhou0_B0(-2)*u0_B0(-2) + AVG_0_0_LEV_12*p_B0(-2)*u0_B0(-2)
      + AVG_0_0_LEV_12*rhoE_B0(-2)*u0_B0(-2);

    CF_20 = AVG_0_0_LEV_20*rhou0_B0(-2) + AVG_0_0_LEV_21*p_B0(-2) +
      AVG_0_0_LEV_21*rhou0_B0(-2)*u0_B0(-2) + AVG_0_0_LEV_22*p_B0(-2)*u0_B0(-2)
      + AVG_0_0_LEV_22*rhoE_B0(-2)*u0_B0(-2);

    CF_01 = AVG_0_0_LEV_00*rhou0_B0(-1) + AVG_0_0_LEV_01*p_B0(-1) +
      AVG_0_0_LEV_01*rhou0_B0(-1)*u0_B0(-1) + AVG_0_0_LEV_02*p_B0(-1)*u0_B0(-1)
      + AVG_0_0_LEV_02*rhoE_B0(-1)*u0_B0(-1);

    CF_11 = AVG_0_0_LEV_10*rhou0_B0(-1) + AVG_0_0_LEV_11*p_B0(-1) +
      AVG_0_0_LEV_11*rhou0_B0(-1)*u0_B0(-1) + AVG_0_0_LEV_12*p_B0(-1)*u0_B0(-1)
      + AVG_0_0_LEV_12*rhoE_B0(-1)*u0_B0(-1);

    CF_21 = AVG_0_0_LEV_20*rhou0_B0(-1) + AVG_0_0_LEV_21*p_B0(-1) +
      AVG_0_0_LEV_21*rhou0_B0(-1)*u0_B0(-1) + AVG_0_0_LEV_22*p_B0(-1)*u0_B0(-1)
      + AVG_0_0_LEV_22*rhoE_B0(-1)*u0_B0(-1);

    CF_02 = AVG_0_0_LEV_00*rhou0_B0(0) + AVG_0_0_LEV_01*p_B0(0) +
      AVG_0_0_LEV_01*rhou0_B0(0)*u0_B0(0) + AVG_0_0_LEV_02*p_B0(0)*u0_B0(0) +
      AVG_0_0_LEV_02*rhoE_B0(0)*u0_B0(0);

    CF_12 = AVG_0_0_LEV_10*rhou0_B0(0) + AVG_0_0_LEV_11*p_B0(0) +
      AVG_0_0_LEV_11*rhou0_B0(0)*u0_B0(0) + AVG_0_0_LEV_12*p_B0(0)*u0_B0(0) +
      AVG_0_0_LEV_12*rhoE_B0(0)*u0_B0(0);

    CF_22 = AVG_0_0_LEV_20*rhou0_B0(0) + AVG_0_0_LEV_21*p_B0(0) +
      AVG_0_0_LEV_21*rhou0_B0(0)*u0_B0(0) + AVG_0_0_LEV_22*p_B0(0)*u0_B0(0) +
      AVG_0_0_LEV_22*rhoE_B0(0)*u0_B0(0);

    CF_03 = AVG_0_0_LEV_00*rhou0_B0(1) + AVG_0_0_LEV_01*p_B0(1) +
      AVG_0_0_LEV_01*rhou0_B0(1)*u0_B0(1) + AVG_0_0_LEV_02*p_B0(1)*u0_B0(1) +
      AVG_0_0_LEV_02*rhoE_B0(1)*u0_B0(1);

    CF_13 = AVG_0_0_LEV_10*rhou0_B0(1) + AVG_0_0_LEV_11*p_B0(1) +
      AVG_0_0_LEV_11*rhou0_B0(1)*u0_B0(1) + AVG_0_0_LEV_12*p_B0(1)*u0_B0(1) +
      AVG_0_0_LEV_12*rhoE_B0(1)*u0_B0(1);

    CF_23 = AVG_0_0_LEV_20*rhou0_B0(1) + AVG_0_0_LEV_21*p_B0(1) +
      AVG_0_0_LEV_21*rhou0_B0(1)*u0_B0(1) + AVG_0_0_LEV_22*p_B0(1)*u0_B0(1) +
      AVG_0_0_LEV_22*rhoE_B0(1)*u0_B0(1);

    CF_04 = AVG_0_0_LEV_00*rhou0_B0(2) + AVG_0_0_LEV_01*p_B0(2) +
      AVG_0_0_LEV_01*rhou0_B0(2)*u0_B0(2) + AVG_0_0_LEV_02*p_B0(2)*u0_B0(2) +
      AVG_0_0_LEV_02*rhoE_B0(2)*u0_B0(2);

    CF_14 = AVG_0_0_LEV_10*rhou0_B0(2) + AVG_0_0_LEV_11*p_B0(2) +
      AVG_0_0_LEV_11*rhou0_B0(2)*u0_B0(2) + AVG_0_0_LEV_12*p_B0(2)*u0_B0(2) +
      AVG_0_0_LEV_12*rhoE_B0(2)*u0_B0(2);

    CF_24 = AVG_0_0_LEV_20*rhou0_B0(2) + AVG_0_0_LEV_21*p_B0(2) +
      AVG_0_0_LEV_21*rhou0_B0(2)*u0_B0(2) + AVG_0_0_LEV_22*p_B0(2)*u0_B0(2) +
      AVG_0_0_LEV_22*rhoE_B0(2)*u0_B0(2);

    CF_05 = AVG_0_0_LEV_00*rhou0_B0(3) + AVG_0_0_LEV_01*p_B0(3) +
      AVG_0_0_LEV_01*rhou0_B0(3)*u0_B0(3) + AVG_0_0_LEV_02*p_B0(3)*u0_B0(3) +
      AVG_0_0_LEV_02*rhoE_B0(3)*u0_B0(3);

    CF_15 = AVG_0_0_LEV_10*rhou0_B0(3) + AVG_0_0_LEV_11*p_B0(3) +
      AVG_0_0_LEV_11*rhou0_B0(3)*u0_B0(3) + AVG_0_0_LEV_12*p_B0(3)*u0_B0(3) +
      AVG_0_0_LEV_12*rhoE_B0(3)*u0_B0(3);

    CF_25 = AVG_0_0_LEV_20*rhou0_B0(3) + AVG_0_0_LEV_21*p_B0(3) +
      AVG_0_0_LEV_21*rhou0_B0(3)*u0_B0(3) + AVG_0_0_LEV_22*p_B0(3)*u0_B0(3) +
      AVG_0_0_LEV_22*rhoE_B0(3)*u0_B0(3);

    CS_00 = AVG_0_0_LEV_00*rho_B0(-2) + AVG_0_0_LEV_01*rhou0_B0(-2) +
      AVG_0_0_LEV_02*rhoE_B0(-2);

    CS_01 = AVG_0_0_LEV_00*rho_B0(-1) + AVG_0_0_LEV_01*rhou0_B0(-1) +
      AVG_0_0_LEV_02*rhoE_B0(-1);

    CS_02 = AVG_0_0_LEV_00*rho_B0(0) + AVG_0_0_LEV_01*rhou0_B0(0) +
      AVG_0_0_LEV_02*rhoE_B0(0);

    CS_03 = AVG_0_0_LEV_00*rho_B0(1) + AVG_0_0_LEV_01*rhou0_B0(1) +
      AVG_0_0_LEV_02*rhoE_B0(1);

    CS_04 = AVG_0_0_LEV_00*rho_B0(2) + AVG_0_0_LEV_01*rhou0_B0(2) +
      AVG_0_0_LEV_02*rhoE_B0(2);

    CS_05 = AVG_0_0_LEV_00*rho_B0(3) + AVG_0_0_LEV_01*rhou0_B0(3) +
      AVG_0_0_LEV_02*rhoE_B0(3);

    CS_10 = AVG_0_0_LEV_10*rho_B0(-2) + AVG_0_0_LEV_11*rhou0_B0(-2) +
      AVG_0_0_LEV_12*rhoE_B0(-2);

    CS_11 = AVG_0_0_LEV_10*rho_B0(-1) + AVG_0_0_LEV_11*rhou0_B0(-1) +
      AVG_0_0_LEV_12*rhoE_B0(-1);

    CS_12 = AVG_0_0_LEV_10*rho_B0(0) + AVG_0_0_LEV_11*rhou0_B0(0) +
      AVG_0_0_LEV_12*rhoE_B0(0);

    CS_13 = AVG_0_0_LEV_10*rho_B0(1) + AVG_0_0_LEV_11*rhou0_B0(1) +
      AVG_0_0_LEV_12*rhoE_B0(1);

    CS_14 = AVG_0_0_LEV_10*rho_B0(2) + AVG_0_0_LEV_11*rhou0_B0(2) +
      AVG_0_0_LEV_12*rhoE_B0(2);

    CS_15 = AVG_0_0_LEV_10*rho_B0(3) + AVG_0_0_LEV_11*rhou0_B0(3) +
      AVG_0_0_LEV_12*rhoE_B0(3);

    CS_20 = AVG_0_0_LEV_20*rho_B0(-2) + AVG_0_0_LEV_21*rhou0_B0(-2) +
      AVG_0_0_LEV_22*rhoE_B0(-2);

    CS_21 = AVG_0_0_LEV_20*rho_B0(-1) + AVG_0_0_LEV_21*rhou0_B0(-1) +
      AVG_0_0_LEV_22*rhoE_B0(-1);

    CS_22 = AVG_0_0_LEV_20*rho_B0(0) + AVG_0_0_LEV_21*rhou0_B0(0) +
      AVG_0_0_LEV_22*rhoE_B0(0);

    CS_23 = AVG_0_0_LEV_20*rho_B0(1) + AVG_0_0_LEV_21*rhou0_B0(1) +
      AVG_0_0_LEV_22*rhoE_B0(1);

    CS_24 = AVG_0_0_LEV_20*rho_B0(2) + AVG_0_0_LEV_21*rhou0_B0(2) +
      AVG_0_0_LEV_22*rhoE_B0(2);

    CS_25 = AVG_0_0_LEV_20*rho_B0(3) + AVG_0_0_LEV_21*rhou0_B0(3) +
      AVG_0_0_LEV_22*rhoE_B0(3);

    max_lambda_0_00 = fmax(fabs(a_B0(3) - u0_B0(3)), fmax(fabs(a_B0(-2) -
      u0_B0(-2)), fmax(fabs(a_B0(-1) - u0_B0(-1)), fmax(fabs(a_B0(0) -
      u0_B0(0)), fmax(fabs(a_B0(1) - u0_B0(1)), fabs(a_B0(2) -
      u0_B0(2)))))));

    max_lambda_0_11 = fmax(fabs(u0_B0(2)), fmax(fabs(u0_B0(3)), fmax(fabs(u0_B0(0)),
      fmax(fabs(u0_B0(-2)), fmax(fabs(u0_B0(-1)), fabs(u0_B0(1)))))));

    max_lambda_0_22 = fmax(fabs(a_B0(-2) + u0_B0(-2)), fmax(fabs(a_B0(-1) +
      u0_B0(-1)), fmax(fabs(a_B0(1) + u0_B0(1)), fmax(fabs(a_B0(3) +
      u0_B0(3)), fmax(fabs(a_B0(0) + u0_B0(0)), fabs(a_B0(2) +
      u0_B0(2)))))));

    beta_0 = (rc1)*pow((rc0)*(CF_01 + CS_01*max_lambda_0_00) - rc0*(CF_03 + CS_03*max_lambda_0_00), 2) +
      (rc2)*pow((rc0)*(CF_01 + CS_01*max_lambda_0_00) - (CF_02 + CS_02*max_lambda_0_00) + (rc0)*(CF_03 +
      CS_03*max_lambda_0_00), 2);

    beta_1 = (rc2)*pow((rc0)*(CF_02 + CS_02*max_lambda_0_00) - (CF_03 + CS_03*max_lambda_0_00) + (rc0)*(CF_04 +
      CS_04*max_lambda_0_00), 2) + (rc1)*pow((rc3)*(CF_02 + CS_02*max_lambda_0_00) - 2*(CF_03 + CS_03*max_lambda_0_00) +
      (rc0)*(CF_04 + CS_04*max_lambda_0_00), 2);

    beta_2 = (rc1)*pow((rc0)*(CF_00 + CS_00*max_lambda_0_00) - 2*(CF_01 + CS_01*max_lambda_0_00) + (rc3)*(CF_02 +
      CS_02*max_lambda_0_00), 2) + (rc2)*pow((rc0)*(CF_00 + CS_00*max_lambda_0_00) - (CF_01 + CS_01*max_lambda_0_00) +
      (rc0)*(CF_02 + CS_02*max_lambda_0_00), 2);

   alpha_0 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_0), 6);

   alpha_1 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_1), 6);

   alpha_2 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_2), 6);

   inv_alpha_sum = 1.0/(alpha_0 + alpha_1 + alpha_2);

   delta_0 = ((alpha_0*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_1 = ((alpha_1*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_2 = ((alpha_2*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   inv_omega_sum = 1.0/((rc4)*delta_0 + (rc5)*delta_1 + (rc6)*delta_2);

    Recon_0 = Recon_0 + (rc4)*delta_0*inv_omega_sum*(-rc7*(CF_01 + CS_01*max_lambda_0_00) + (rc8)*(CF_02 +
      CS_02*max_lambda_0_00) + (rc9)*(CF_03 + CS_03*max_lambda_0_00)) + (rc5)*delta_1*inv_omega_sum*((rc9)*(CF_02 +
      CS_02*max_lambda_0_00) + (rc8)*(CF_03 + CS_03*max_lambda_0_00) - rc7*(CF_04 + CS_04*max_lambda_0_00)) +
      (rc6)*delta_2*inv_omega_sum*((rc9)*(CF_00 + CS_00*max_lambda_0_00) - rc10*(CF_01 + CS_01*max_lambda_0_00) +
      (rc11)*(CF_02 + CS_02*max_lambda_0_00));

    beta_0 = (rc1)*pow((rc0)*(CF_02 - CS_02*max_lambda_0_00) - rc0*(CF_04 - CS_04*max_lambda_0_00), 2) +
      (rc2)*pow((rc0)*(CF_02 - CS_02*max_lambda_0_00) - (CF_03 - CS_03*max_lambda_0_00) + (rc0)*(CF_04 -
      CS_04*max_lambda_0_00), 2);

    beta_1 = (rc1)*pow((rc0)*(CF_01 - CS_01*max_lambda_0_00) - 2*(CF_02 - CS_02*max_lambda_0_00) + (rc3)*(CF_03 -
      CS_03*max_lambda_0_00), 2) + (rc2)*pow((rc0)*(CF_01 - CS_01*max_lambda_0_00) - (CF_02 - CS_02*max_lambda_0_00) +
      (rc0)*(CF_03 - CS_03*max_lambda_0_00), 2);

    beta_2 = (rc2)*pow((rc0)*(CF_03 - CS_03*max_lambda_0_00) - (CF_04 - CS_04*max_lambda_0_00) + (rc0)*(CF_05 -
      CS_05*max_lambda_0_00), 2) + (rc1)*pow((rc3)*(CF_03 - CS_03*max_lambda_0_00) - 2*(CF_04 - CS_04*max_lambda_0_00) +
      (rc0)*(CF_05 - CS_05*max_lambda_0_00), 2);

   alpha_0 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_0), 6);

   alpha_1 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_1), 6);

   alpha_2 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_2), 6);

   inv_alpha_sum = 1.0/(alpha_0 + alpha_1 + alpha_2);

   delta_0 = ((alpha_0*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_1 = ((alpha_1*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_2 = ((alpha_2*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   inv_omega_sum = 1.0/((rc4)*delta_0 + (rc5)*delta_1 + (rc6)*delta_2);

    Recon_0 = Recon_0 + (rc4)*delta_0*inv_omega_sum*((rc9)*(CF_02 - CS_02*max_lambda_0_00) + (rc8)*(CF_03 -
      CS_03*max_lambda_0_00) - rc7*(CF_04 - CS_04*max_lambda_0_00)) + (rc5)*delta_1*inv_omega_sum*(-rc7*(CF_01 -
      CS_01*max_lambda_0_00) + (rc8)*(CF_02 - CS_02*max_lambda_0_00) + (rc9)*(CF_03 - CS_03*max_lambda_0_00)) +
      (rc6)*delta_2*inv_omega_sum*((rc11)*(CF_03 - CS_03*max_lambda_0_00) - rc10*(CF_04 - CS_04*max_lambda_0_00) +
      (rc9)*(CF_05 - CS_05*max_lambda_0_00));

    beta_0 = (rc1)*pow((rc0)*(CF_11 + CS_11*max_lambda_0_11) - rc0*(CF_13 + CS_13*max_lambda_0_11), 2) +
      (rc2)*pow((rc0)*(CF_11 + CS_11*max_lambda_0_11) - (CF_12 + CS_12*max_lambda_0_11) + (rc0)*(CF_13 +
      CS_13*max_lambda_0_11), 2);

    beta_1 = (rc2)*pow((rc0)*(CF_12 + CS_12*max_lambda_0_11) - (CF_13 + CS_13*max_lambda_0_11) + (rc0)*(CF_14 +
      CS_14*max_lambda_0_11), 2) + (rc1)*pow((rc3)*(CF_12 + CS_12*max_lambda_0_11) - 2*(CF_13 + CS_13*max_lambda_0_11) +
      (rc0)*(CF_14 + CS_14*max_lambda_0_11), 2);

    beta_2 = (rc1)*pow((rc0)*(CF_10 + CS_10*max_lambda_0_11) - 2*(CF_11 + CS_11*max_lambda_0_11) + (rc3)*(CF_12 +
      CS_12*max_lambda_0_11), 2) + (rc2)*pow((rc0)*(CF_10 + CS_10*max_lambda_0_11) - (CF_11 + CS_11*max_lambda_0_11) +
      (rc0)*(CF_12 + CS_12*max_lambda_0_11), 2);

   alpha_0 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_0), 6);

   alpha_1 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_1), 6);

   alpha_2 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_2), 6);

   inv_alpha_sum = 1.0/(alpha_0 + alpha_1 + alpha_2);

   delta_0 = ((alpha_0*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_1 = ((alpha_1*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_2 = ((alpha_2*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   inv_omega_sum = 1.0/((rc4)*delta_0 + (rc5)*delta_1 + (rc6)*delta_2);

    Recon_1 = Recon_1 + (rc4)*delta_0*inv_omega_sum*(-rc7*(CF_11 + CS_11*max_lambda_0_11) + (rc8)*(CF_12 +
      CS_12*max_lambda_0_11) + (rc9)*(CF_13 + CS_13*max_lambda_0_11)) + (rc5)*delta_1*inv_omega_sum*((rc9)*(CF_12 +
      CS_12*max_lambda_0_11) + (rc8)*(CF_13 + CS_13*max_lambda_0_11) - rc7*(CF_14 + CS_14*max_lambda_0_11)) +
      (rc6)*delta_2*inv_omega_sum*((rc9)*(CF_10 + CS_10*max_lambda_0_11) - rc10*(CF_11 + CS_11*max_lambda_0_11) +
      (rc11)*(CF_12 + CS_12*max_lambda_0_11));

    beta_0 = (rc1)*pow((rc0)*(CF_12 - CS_12*max_lambda_0_11) - rc0*(CF_14 - CS_14*max_lambda_0_11), 2) +
      (rc2)*pow((rc0)*(CF_12 - CS_12*max_lambda_0_11) - (CF_13 - CS_13*max_lambda_0_11) + (rc0)*(CF_14 -
      CS_14*max_lambda_0_11), 2);

    beta_1 = (rc1)*pow((rc0)*(CF_11 - CS_11*max_lambda_0_11) - 2*(CF_12 - CS_12*max_lambda_0_11) + (rc3)*(CF_13 -
      CS_13*max_lambda_0_11), 2) + (rc2)*pow((rc0)*(CF_11 - CS_11*max_lambda_0_11) - (CF_12 - CS_12*max_lambda_0_11) +
      (rc0)*(CF_13 - CS_13*max_lambda_0_11), 2);

    beta_2 = (rc2)*pow((rc0)*(CF_13 - CS_13*max_lambda_0_11) - (CF_14 - CS_14*max_lambda_0_11) + (rc0)*(CF_15 -
      CS_15*max_lambda_0_11), 2) + (rc1)*pow((rc3)*(CF_13 - CS_13*max_lambda_0_11) - 2*(CF_14 - CS_14*max_lambda_0_11) +
      (rc0)*(CF_15 - CS_15*max_lambda_0_11), 2);

   alpha_0 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_0), 6);

   alpha_1 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_1), 6);

   alpha_2 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_2), 6);

   inv_alpha_sum = 1.0/(alpha_0 + alpha_1 + alpha_2);

   delta_0 = ((alpha_0*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_1 = ((alpha_1*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_2 = ((alpha_2*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   inv_omega_sum = 1.0/((rc4)*delta_0 + (rc5)*delta_1 + (rc6)*delta_2);

    Recon_1 = Recon_1 + (rc4)*delta_0*inv_omega_sum*((rc9)*(CF_12 - CS_12*max_lambda_0_11) + (rc8)*(CF_13 -
      CS_13*max_lambda_0_11) - rc7*(CF_14 - CS_14*max_lambda_0_11)) + (rc5)*delta_1*inv_omega_sum*(-rc7*(CF_11 -
      CS_11*max_lambda_0_11) + (rc8)*(CF_12 - CS_12*max_lambda_0_11) + (rc9)*(CF_13 - CS_13*max_lambda_0_11)) +
      (rc6)*delta_2*inv_omega_sum*((rc11)*(CF_13 - CS_13*max_lambda_0_11) - rc10*(CF_14 - CS_14*max_lambda_0_11) +
      (rc9)*(CF_15 - CS_15*max_lambda_0_11));

    beta_0 = (rc1)*pow((rc0)*(CF_21 + CS_21*max_lambda_0_22) - rc0*(CF_23 + CS_23*max_lambda_0_22), 2) +
      (rc2)*pow((rc0)*(CF_21 + CS_21*max_lambda_0_22) - (CF_22 + CS_22*max_lambda_0_22) + (rc0)*(CF_23 +
      CS_23*max_lambda_0_22), 2);

    beta_1 = (rc2)*pow((rc0)*(CF_22 + CS_22*max_lambda_0_22) - (CF_23 + CS_23*max_lambda_0_22) + (rc0)*(CF_24 +
      CS_24*max_lambda_0_22), 2) + (rc1)*pow((rc3)*(CF_22 + CS_22*max_lambda_0_22) - 2*(CF_23 + CS_23*max_lambda_0_22) +
      (rc0)*(CF_24 + CS_24*max_lambda_0_22), 2);

    beta_2 = (rc1)*pow((rc0)*(CF_20 + CS_20*max_lambda_0_22) - 2*(CF_21 + CS_21*max_lambda_0_22) + (rc3)*(CF_22 +
      CS_22*max_lambda_0_22), 2) + (rc2)*pow((rc0)*(CF_20 + CS_20*max_lambda_0_22) - (CF_21 + CS_21*max_lambda_0_22) +
      (rc0)*(CF_22 + CS_22*max_lambda_0_22), 2);

   alpha_0 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_0), 6);

   alpha_1 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_1), 6);

   alpha_2 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_2), 6);

   inv_alpha_sum = 1.0/(alpha_0 + alpha_1 + alpha_2);

   delta_0 = ((alpha_0*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_1 = ((alpha_1*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_2 = ((alpha_2*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   inv_omega_sum = 1.0/((rc4)*delta_0 + (rc5)*delta_1 + (rc6)*delta_2);

    Recon_2 = Recon_2 + (rc4)*delta_0*inv_omega_sum*(-rc7*(CF_21 + CS_21*max_lambda_0_22) + (rc8)*(CF_22 +
      CS_22*max_lambda_0_22) + (rc9)*(CF_23 + CS_23*max_lambda_0_22)) + (rc5)*delta_1*inv_omega_sum*((rc9)*(CF_22 +
      CS_22*max_lambda_0_22) + (rc8)*(CF_23 + CS_23*max_lambda_0_22) - rc7*(CF_24 + CS_24*max_lambda_0_22)) +
      (rc6)*delta_2*inv_omega_sum*((rc9)*(CF_20 + CS_20*max_lambda_0_22) - rc10*(CF_21 + CS_21*max_lambda_0_22) +
      (rc11)*(CF_22 + CS_22*max_lambda_0_22));

    beta_0 = (rc1)*pow((rc0)*(CF_22 - CS_22*max_lambda_0_22) - rc0*(CF_24 - CS_24*max_lambda_0_22), 2) +
      (rc2)*pow((rc0)*(CF_22 - CS_22*max_lambda_0_22) - (CF_23 - CS_23*max_lambda_0_22) + (rc0)*(CF_24 -
      CS_24*max_lambda_0_22), 2);

    beta_1 = (rc1)*pow((rc0)*(CF_21 - CS_21*max_lambda_0_22) - 2*(CF_22 - CS_22*max_lambda_0_22) + (rc3)*(CF_23 -
      CS_23*max_lambda_0_22), 2) + (rc2)*pow((rc0)*(CF_21 - CS_21*max_lambda_0_22) - (CF_22 - CS_22*max_lambda_0_22) +
      (rc0)*(CF_23 - CS_23*max_lambda_0_22), 2);

    beta_2 = (rc2)*pow((rc0)*(CF_23 - CS_23*max_lambda_0_22) - (CF_24 - CS_24*max_lambda_0_22) + (rc0)*(CF_25 -
      CS_25*max_lambda_0_22), 2) + (rc1)*pow((rc3)*(CF_23 - CS_23*max_lambda_0_22) - 2*(CF_24 - CS_24*max_lambda_0_22) +
      (rc0)*(CF_25 - CS_25*max_lambda_0_22), 2);

   alpha_0 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_0), 6);

   alpha_1 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_1), 6);

   alpha_2 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_2), 6);

   inv_alpha_sum = 1.0/(alpha_0 + alpha_1 + alpha_2);

   delta_0 = ((alpha_0*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_1 = ((alpha_1*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_2 = ((alpha_2*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   inv_omega_sum = 1.0/((rc4)*delta_0 + (rc5)*delta_1 + (rc6)*delta_2);

    Recon_2 = Recon_2 + (rc4)*delta_0*inv_omega_sum*((rc9)*(CF_22 - CS_22*max_lambda_0_22) + (rc8)*(CF_23 -
      CS_23*max_lambda_0_22) - rc7*(CF_24 - CS_24*max_lambda_0_22)) + (rc5)*delta_1*inv_omega_sum*(-rc7*(CF_21 -
      CS_21*max_lambda_0_22) + (rc8)*(CF_22 - CS_22*max_lambda_0_22) + (rc9)*(CF_23 - CS_23*max_lambda_0_22)) +
      (rc6)*delta_2*inv_omega_sum*((rc11)*(CF_23 - CS_23*max_lambda_0_22) - rc10*(CF_24 - CS_24*max_lambda_0_22) +
      (rc9)*(CF_25 - CS_25*max_lambda_0_22));

   wk0_B0(0) = Recon_0 + Recon_1 + Recon_2;

   wk1_B0(0) = AVG_0_u0*Recon_1 + Recon_0*(-AVG_0_a + AVG_0_u0) + Recon_2*(AVG_0_a + AVG_0_u0);

    wk2_B0(0) = (rc0)*pow(AVG_0_u0, 2)*Recon_1 + Recon_0*(rcinv12*pow(AVG_0_a, 2) - AVG_0_a*AVG_0_u0 +
      (rc0)*pow(AVG_0_u0, 2)) + Recon_2*(rcinv12*pow(AVG_0_a, 2) + AVG_0_a*AVG_0_u0 + (rc0)*pow(AVG_0_u0, 2));

}



__global__ void ops_opensbliblock00Kernel000(
double* __restrict arg0,
double* __restrict arg1,
double* __restrict arg2,
double* __restrict arg3,
double* __restrict arg4,
double* __restrict arg5,
double* __restrict arg6,
double* __restrict arg7,
double* __restrict arg8,
int size0 ){


  int idx_x = blockDim.x * blockIdx.x + threadIdx.x;

  arg0 += idx_x * 1*1;
  arg1 += idx_x * 1*1;
  arg2 += idx_x * 1*1;
  arg3 += idx_x * 1*1;
  arg4 += idx_x * 1*1;
  arg5 += idx_x * 1*1;
  arg6 += idx_x * 1*1;
  arg7 += idx_x * 1*1;
  arg8 += idx_x * 1*1;

  if (idx_x < size0) {
    const ACC<double> argp0(arg0);
    const ACC<double> argp1(arg1);
    const ACC<double> argp2(arg2);
    const ACC<double> argp3(arg3);
    const ACC<double> argp4(arg4);
    const ACC<double> argp5(arg5);
    ACC<double> argp6(arg6);
    ACC<double> argp7(arg7);
    ACC<double> argp8(arg8);
    opensbliblock00Kernel000_gpu(argp0, argp1, argp2, argp3,
                   argp4, argp5, argp6, argp7, argp8);
  }

}

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel000(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7, ops_arg arg8) {
#else
void ops_par_loop_opensbliblock00Kernel000_execute(ops_kernel_descriptor *desc) {
  int dim = desc->dim;
  #if OPS_MPI
  ops_block block = desc->block;
  #endif
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  #endif

  //Timing
  double t1,t2,c1,c2;

  ops_arg args[9] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8};


  #if CHECKPOINTING && !OPS_LAZY
  if (!ops_checkpointing_before(args,9,range,6)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,6,"opensbliblock00Kernel000");
    block->instance->OPS_kernels[6].count++;
    ops_timers_core(&c1,&t1);
  }

  //compute locally allocated range for the sub-block
  int start[1];
  int end[1];
  #if OPS_MPI && !OPS_LAZY
  sub_block_list sb = OPS_sub_block_list[block->index];
  #endif //OPS_MPI

  #ifdef OPS_MPI
  int arg_idx[1];
  #endif
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<1; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 9,block, range, start, end, arg_idx) < 0) return;
  #endif

  int xdim0 = args[0].dat->size[0];
  int xdim1 = args[1].dat->size[0];
  int xdim2 = args[2].dat->size[0];
  int xdim3 = args[3].dat->size[0];
  int xdim4 = args[4].dat->size[0];
  int xdim5 = args[5].dat->size[0];
  int xdim6 = args[6].dat->size[0];
  int xdim7 = args[7].dat->size[0];
  int xdim8 = args[8].dat->size[0];

  if (xdim0 != dims_opensbliblock00Kernel000_h[0][0] || xdim1 != dims_opensbliblock00Kernel000_h[1][0] || xdim2 != dims_opensbliblock00Kernel000_h[2][0] || xdim3 != dims_opensbliblock00Kernel000_h[3][0] || xdim4 != dims_opensbliblock00Kernel000_h[4][0] || xdim5 != dims_opensbliblock00Kernel000_h[5][0] || xdim6 != dims_opensbliblock00Kernel000_h[6][0] || xdim7 != dims_opensbliblock00Kernel000_h[7][0] || xdim8 != dims_opensbliblock00Kernel000_h[8][0]) {
    dims_opensbliblock00Kernel000_h[0][0] = xdim0;
    dims_opensbliblock00Kernel000_h[1][0] = xdim1;
    dims_opensbliblock00Kernel000_h[2][0] = xdim2;
    dims_opensbliblock00Kernel000_h[3][0] = xdim3;
    dims_opensbliblock00Kernel000_h[4][0] = xdim4;
    dims_opensbliblock00Kernel000_h[5][0] = xdim5;
    dims_opensbliblock00Kernel000_h[6][0] = xdim6;
    dims_opensbliblock00Kernel000_h[7][0] = xdim7;
    dims_opensbliblock00Kernel000_h[8][0] = xdim8;
    cutilSafeCall(block->instance->ostream(), cudaMemcpyToSymbol( dims_opensbliblock00Kernel000, dims_opensbliblock00Kernel000_h, sizeof(dims_opensbliblock00Kernel000)));
  }



  int x_size = MAX(0,end[0]-start[0]);

  dim3 grid( (x_size-1)/block->instance->OPS_block_size_x+ 1, 1, 1);
  dim3 tblock(block->instance->OPS_block_size_x,1,1);



  long long int dat0 = (block->instance->OPS_soa ? args[0].dat->type_size : args[0].dat->elem_size);
  long long int dat1 = (block->instance->OPS_soa ? args[1].dat->type_size : args[1].dat->elem_size);
  long long int dat2 = (block->instance->OPS_soa ? args[2].dat->type_size : args[2].dat->elem_size);
  long long int dat3 = (block->instance->OPS_soa ? args[3].dat->type_size : args[3].dat->elem_size);
  long long int dat4 = (block->instance->OPS_soa ? args[4].dat->type_size : args[4].dat->elem_size);
  long long int dat5 = (block->instance->OPS_soa ? args[5].dat->type_size : args[5].dat->elem_size);
  long long int dat6 = (block->instance->OPS_soa ? args[6].dat->type_size : args[6].dat->elem_size);
  long long int dat7 = (block->instance->OPS_soa ? args[7].dat->type_size : args[7].dat->elem_size);
  long long int dat8 = (block->instance->OPS_soa ? args[8].dat->type_size : args[8].dat->elem_size);

  char *p_a[9];

  //set up initial pointers
  long long int base0 = args[0].dat->base_offset + 
           dat0 * 1 * (start[0] * args[0].stencil->stride[0]);
  p_a[0] = (char *)args[0].data_d + base0;

  long long int base1 = args[1].dat->base_offset + 
           dat1 * 1 * (start[0] * args[1].stencil->stride[0]);
  p_a[1] = (char *)args[1].data_d + base1;

  long long int base2 = args[2].dat->base_offset + 
           dat2 * 1 * (start[0] * args[2].stencil->stride[0]);
  p_a[2] = (char *)args[2].data_d + base2;

  long long int base3 = args[3].dat->base_offset + 
           dat3 * 1 * (start[0] * args[3].stencil->stride[0]);
  p_a[3] = (char *)args[3].data_d + base3;

  long long int base4 = args[4].dat->base_offset + 
           dat4 * 1 * (start[0] * args[4].stencil->stride[0]);
  p_a[4] = (char *)args[4].data_d + base4;

  long long int base5 = args[5].dat->base_offset + 
           dat5 * 1 * (start[0] * args[5].stencil->stride[0]);
  p_a[5] = (char *)args[5].data_d + base5;

  long long int base6 = args[6].dat->base_offset + 
           dat6 * 1 * (start[0] * args[6].stencil->stride[0]);
  p_a[6] = (char *)args[6].data_d + base6;

  long long int base7 = args[7].dat->base_offset + 
           dat7 * 1 * (start[0] * args[7].stencil->stride[0]);
  p_a[7] = (char *)args[7].data_d + base7;

  long long int base8 = args[8].dat->base_offset + 
           dat8 * 1 * (start[0] * args[8].stencil->stride[0]);
  p_a[8] = (char *)args[8].data_d + base8;


  #ifndef OPS_LAZY
  ops_H_D_exchanges_device(args, 9);
  ops_halo_exchanges(args,9,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[6].mpi_time += t2-t1;
  }


  //call kernel wrapper function, passing in pointers to data
  if (x_size > 0)
    ops_opensbliblock00Kernel000<<<grid, tblock >>> (  (double *)p_a[0], (double *)p_a[1],
         (double *)p_a[2], (double *)p_a[3],
         (double *)p_a[4], (double *)p_a[5],
         (double *)p_a[6], (double *)p_a[7],
         (double *)p_a[8],x_size);

  cutilSafeCall(block->instance->ostream(), cudaGetLastError());

  if (block->instance->OPS_diags>1) {
    cutilSafeCall(block->instance->ostream(), cudaDeviceSynchronize());
    ops_timers_core(&c1,&t1);
    block->instance->OPS_kernels[6].time += t1-t2;
  }

  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 9);
  ops_set_halo_dirtybit3(&args[6],range);
  ops_set_halo_dirtybit3(&args[7],range);
  ops_set_halo_dirtybit3(&args[8],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[6].mpi_time += t2-t1;
    block->instance->OPS_kernels[6].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[6].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[6].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[6].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[6].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[6].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[6].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[6].transfer += ops_compute_transfer(dim, start, end, &arg7);
    block->instance->OPS_kernels[6].transfer += ops_compute_transfer(dim, start, end, &arg8);
  }
}

#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel000(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3, ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7, ops_arg arg8) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)calloc(1,sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 1;
  desc->index = 6;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 6;
  for ( int i=0; i<2; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 9;
  desc->args = (ops_arg*)ops_malloc(9*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg2.dat->index;
  desc->args[3] = arg3;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg3.dat->index;
  desc->args[4] = arg4;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg4.dat->index;
  desc->args[5] = arg5;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg5.dat->index;
  desc->args[6] = arg6;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg6.dat->index;
  desc->args[7] = arg7;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg7.dat->index;
  desc->args[8] = arg8;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg8.dat->index;
  desc->function = ops_par_loop_opensbliblock00Kernel000_execute;
  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,6,"opensbliblock00Kernel000");
  }
  ops_enqueue_kernel(desc);
}
#endif
