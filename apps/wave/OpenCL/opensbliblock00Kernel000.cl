//
// auto-generated by ops.py
//

#ifdef OCL_FMA
#pragma OPENCL FP_CONTRACT ON
#else
#pragma OPENCL FP_CONTRACT OFF
#endif
#pragma OPENCL EXTENSION cl_khr_fp64:enable

#define OPS_1D
#define OPS_API 2
#define OPS_NO_GLOBALS
#include "ops_macros.h"
#include "ops_opencl_reduction.h"

#ifndef MIN
#define MIN(a,b) ((a<b) ? (a) : (b))
#endif
#ifndef MAX
#define MAX(a,b) ((a>b) ? (a) : (b))
#endif
#ifndef SIGN
#define SIGN(a,b) ((b<0.0) ? (a*(-1)) : (a))
#endif
#define OPS_READ 0
#define OPS_WRITE 1
#define OPS_RW 2
#define OPS_INC 3
#define OPS_MIN 4
#define OPS_MAX 5

//user function

void opensbliblock00Kernel000(ptr_double phi_B0,
  ptr_double x0_B0,
  const int *idx, const double Delta0block0)
{
   OPS_ACCS(x0_B0, 0) = Delta0block0*idx[0];

   OPS_ACCS(phi_B0, 0) = sin(2.0*M_PI*OPS_ACCS(x0_B0, 0));

}


__kernel void ops_opensbliblock00Kernel000(
__global double* restrict arg0,
__global double* restrict arg1,
const double Delta0block0,
const int base0,
const int base1,
int arg_idx0,
const int size0 ){


  int idx_x = get_global_id(0);

  int arg_idx[1];
  arg_idx[0] = arg_idx0+idx_x;
  if (idx_x < size0) {
    ptr_double ptr0 = { &arg0[base0 + idx_x * 1*1] };
    ptr_double ptr1 = { &arg1[base1 + idx_x * 1*1] };
    opensbliblock00Kernel000(ptr0,
                                  ptr1,
                                  arg_idx,
                                  Delta0block0);
  }

}
