//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel008(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2) {
#else
void ops_par_loop_opensbliblock00Kernel008_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[3] = { arg0, arg1, arg2};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,3,range,5)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,5,"opensbliblock00Kernel008");
    block->instance->OPS_kernels[5].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "opensbliblock00Kernel008");
  #endif


  //compute locally allocated range for the sub-block
  int start[1];
  int end[1];
  #if defined(OPS_MPI) && !defined(OPS_LAZY)
  int arg_idx[1];
  #endif
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<1; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 3,block, range, start, end, arg_idx) < 0) return;
  #endif

  int start0 = start[0];
  int end0 = end[0];


  //initialize global variable with the dimension of dats

  //set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset;
  double * __restrict__ Residual0_B0_p = (double *)(args[0].data_d + base0);

  int base1 = args[1].dat->base_offset;
  double * __restrict__ phi_RKold_B0_p = (double *)(args[1].data_d + base1);




  double *arg2h = (double *)args[2].data;

  int consts_bytes = 0;
  consts_bytes += ROUND_UP(args[2].dim*sizeof(double));

  reallocConstArrays(block->instance,consts_bytes);
  consts_bytes = 0;

  args[2].data = block->instance->OPS_consts_h + consts_bytes;
  args[2].data_d = block->instance->OPS_consts_d + consts_bytes;
  for ( int d=0; d<args[2].dim; d++ ){
    ((double *)args[2].data)[d] = arg2h[d];
  }
  consts_bytes += ROUND_UP(args[2].dim*sizeof(double));

  mvConstArraysToDevice(block->instance,consts_bytes);

  double * __restrict__ rkold = (double *)args[2].data_d;

  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_device(args, 3);
  ops_halo_exchanges(args,3,range);
  ops_H_D_exchanges_device(args, 3);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[5].mpi_time += __t1-__t2;
  }

  #pragma omp target teams distribute parallel for collapse(1)
  for ( int n_x=start0; n_x<end0; n_x++ ){
    const ACC<double> Residual0_B0(Residual0_B0_p + n_x*1);
    ACC<double> phi_RKold_B0(phi_RKold_B0_p + n_x*1);
    
   phi_RKold_B0(0) = rkold[0]*dt*Residual0_B0(0) + phi_RKold_B0(0);


  }
  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[5].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 3);
  ops_set_halo_dirtybit3(&args[1],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[5].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[5].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[5].transfer += ops_compute_transfer(dim, start, end, &arg1);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel008(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2) {
  ops_arg args[3] = { arg0, arg1, arg2 };

  //create kernel descriptor and pass it to ops_enqueue_kernel
  create_kerneldesc_and_enque(name, args, 3, 5, dim, 0, range, block, ops_par_loop_opensbliblock00Kernel008_execute);
}
#endif
