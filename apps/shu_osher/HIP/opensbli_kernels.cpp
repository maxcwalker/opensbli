//
// auto-generated by ops.py//

//header
#include <hip/hip_runtime.h>
#define OPS_API 2
#define OPS_1D
#include "ops_lib_core.h"

#include "ops_hip_rt_support.h"
#include "ops_hip_reduction.h"


#ifdef OPS_MPI
#include "ops_mpi_core.h"
#endif
// global constants
#define block0np0 block0np0_OPSCONSTANT
__constant__ int block0np0;
#define Delta0block0 Delta0block0_OPSCONSTANT
__constant__ double Delta0block0;
#define niter niter_OPSCONSTANT
__constant__ int niter;
#define dt dt_OPSCONSTANT
__constant__ double dt;
#define gama gama_OPSCONSTANT
__constant__ double gama;
#define gamma_m1 gamma_m1_OPSCONSTANT
__constant__ double gamma_m1;
#define rc0 rc0_OPSCONSTANT
__constant__ double rc0;
#define rc1 rc1_OPSCONSTANT
__constant__ double rc1;
#define rc2 rc2_OPSCONSTANT
__constant__ double rc2;
#define rc3 rc3_OPSCONSTANT
__constant__ double rc3;
#define rc4 rc4_OPSCONSTANT
__constant__ double rc4;
#define rc5 rc5_OPSCONSTANT
__constant__ double rc5;
#define rc6 rc6_OPSCONSTANT
__constant__ double rc6;
#define rc7 rc7_OPSCONSTANT
__constant__ double rc7;
#define rc8 rc8_OPSCONSTANT
__constant__ double rc8;
#define rc9 rc9_OPSCONSTANT
__constant__ double rc9;
#define rc10 rc10_OPSCONSTANT
__constant__ double rc10;
#define rc11 rc11_OPSCONSTANT
__constant__ double rc11;
#define rc12 rc12_OPSCONSTANT
__constant__ double rc12;
#define rc13 rc13_OPSCONSTANT
__constant__ double rc13;
#define rc14 rc14_OPSCONSTANT
__constant__ double rc14;
#define rc15 rc15_OPSCONSTANT
__constant__ double rc15;
#define rc16 rc16_OPSCONSTANT
__constant__ double rc16;
#define rc17 rc17_OPSCONSTANT
__constant__ double rc17;
#define rc18 rc18_OPSCONSTANT
__constant__ double rc18;
#define rcinv19 rcinv19_OPSCONSTANT
__constant__ double rcinv19;
#define rcinv20 rcinv20_OPSCONSTANT
__constant__ double rcinv20;

void ops_init_backend() {}

//Dummy kernel to make sure constants are not optimized out
__global__ void ops_internal_this_is_stupid() {
((int*)&block0np0)[0]=0;
((int*)&Delta0block0)[0]=0;
((int*)&niter)[0]=0;
((int*)&dt)[0]=0;
((int*)&gama)[0]=0;
((int*)&gamma_m1)[0]=0;
((int*)&rc0)[0]=0;
((int*)&rc1)[0]=0;
((int*)&rc2)[0]=0;
((int*)&rc3)[0]=0;
((int*)&rc4)[0]=0;
((int*)&rc5)[0]=0;
((int*)&rc6)[0]=0;
((int*)&rc7)[0]=0;
((int*)&rc8)[0]=0;
((int*)&rc9)[0]=0;
((int*)&rc10)[0]=0;
((int*)&rc11)[0]=0;
((int*)&rc12)[0]=0;
((int*)&rc13)[0]=0;
((int*)&rc14)[0]=0;
((int*)&rc15)[0]=0;
((int*)&rc16)[0]=0;
((int*)&rc17)[0]=0;
((int*)&rc18)[0]=0;
((int*)&rcinv19)[0]=0;
((int*)&rcinv20)[0]=0;
}

void ops_decl_const_char(int dim, char const *type,
int size, char *dat, char const *name){
  ops_execute(OPS_instance::getOPSInstance());
  if (!strcmp(name,"block0np0")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(block0np0_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"Delta0block0")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(Delta0block0_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"niter")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(niter_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"dt")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(dt_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"gama")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(gama_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"gamma_m1")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(gamma_m1_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc0")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc0_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc1")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc1_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc2")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc2_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc3")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc3_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc4")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc4_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc5")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc5_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc6")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc6_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc7")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc7_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc8")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc8_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc9")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc9_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc10")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc10_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc11")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc11_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc12")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc12_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc13")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc13_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc14")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc14_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc15")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc15_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc16")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc16_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc17")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc17_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc18")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc18_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rcinv19")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rcinv19_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rcinv20")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rcinv20_OPSCONSTANT), dat, dim*size));
  }
  else
  {
    throw OPSException(OPS_RUNTIME_ERROR, "error: unknown const name");
  }
}


//user kernel files
#include "opensbliblock00Kernel010_hip_kernel.cpp"
#include "opensbliblock00Kernel008_hip_kernel.cpp"
#include "opensbliblock00Kernel009_hip_kernel.cpp"
#include "opensbliblock00Kernel002_hip_kernel.cpp"
#include "opensbliblock00Kernel003_hip_kernel.cpp"
#include "opensbliblock00Kernel004_hip_kernel.cpp"
#include "opensbliblock00Kernel000_hip_kernel.cpp"
#include "opensbliblock00Kernel006_hip_kernel.cpp"
#include "opensbliblock00Kernel011_hip_kernel.cpp"
