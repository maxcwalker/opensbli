//
// auto-generated by ops.py//

//header
#include <cuda.h>
#define OPS_API 2
#define OPS_1D
#include "ops_lib_core.h"

#include "ops_cuda_rt_support.h"
#include "ops_cuda_reduction.h"

#include <cuComplex.h>

#ifdef OPS_MPI
#include "ops_mpi_core.h"
#endif
// global constants
__constant__ int block0np0;
__constant__ double Delta0block0;
__constant__ int niter;
__constant__ double dt;
__constant__ double gama;
__constant__ double gamma_m1;
__constant__ double rc0;
__constant__ double rc1;
__constant__ double rc2;
__constant__ double rc3;
__constant__ double rc4;
__constant__ double rc5;
__constant__ double rc6;
__constant__ double rc7;
__constant__ double rc8;
__constant__ double rc9;
__constant__ double rc10;
__constant__ double rc11;
__constant__ double rc12;
__constant__ double rc13;
__constant__ double rc14;
__constant__ double rc15;
__constant__ double rc16;
__constant__ double rc17;
__constant__ double rc18;
__constant__ double rcinv19;
__constant__ double rcinv20;

void ops_init_backend() {}

void ops_decl_const_char(int dim, char const *type,
int size, char *dat, char const *name){
  ops_execute(OPS_instance::getOPSInstance());
  if (!strcmp(name,"block0np0")) {
    cutilSafeCall(OPS_instance::getOPSInstance()->ostream(),cudaMemcpyToSymbol(block0np0, dat, dim*size));
  }
  else
  if (!strcmp(name,"Delta0block0")) {
    cutilSafeCall(OPS_instance::getOPSInstance()->ostream(),cudaMemcpyToSymbol(Delta0block0, dat, dim*size));
  }
  else
  if (!strcmp(name,"niter")) {
    cutilSafeCall(OPS_instance::getOPSInstance()->ostream(),cudaMemcpyToSymbol(niter, dat, dim*size));
  }
  else
  if (!strcmp(name,"dt")) {
    cutilSafeCall(OPS_instance::getOPSInstance()->ostream(),cudaMemcpyToSymbol(dt, dat, dim*size));
  }
  else
  if (!strcmp(name,"gama")) {
    cutilSafeCall(OPS_instance::getOPSInstance()->ostream(),cudaMemcpyToSymbol(gama, dat, dim*size));
  }
  else
  if (!strcmp(name,"gamma_m1")) {
    cutilSafeCall(OPS_instance::getOPSInstance()->ostream(),cudaMemcpyToSymbol(gamma_m1, dat, dim*size));
  }
  else
  if (!strcmp(name,"rc0")) {
    cutilSafeCall(OPS_instance::getOPSInstance()->ostream(),cudaMemcpyToSymbol(rc0, dat, dim*size));
  }
  else
  if (!strcmp(name,"rc1")) {
    cutilSafeCall(OPS_instance::getOPSInstance()->ostream(),cudaMemcpyToSymbol(rc1, dat, dim*size));
  }
  else
  if (!strcmp(name,"rc2")) {
    cutilSafeCall(OPS_instance::getOPSInstance()->ostream(),cudaMemcpyToSymbol(rc2, dat, dim*size));
  }
  else
  if (!strcmp(name,"rc3")) {
    cutilSafeCall(OPS_instance::getOPSInstance()->ostream(),cudaMemcpyToSymbol(rc3, dat, dim*size));
  }
  else
  if (!strcmp(name,"rc4")) {
    cutilSafeCall(OPS_instance::getOPSInstance()->ostream(),cudaMemcpyToSymbol(rc4, dat, dim*size));
  }
  else
  if (!strcmp(name,"rc5")) {
    cutilSafeCall(OPS_instance::getOPSInstance()->ostream(),cudaMemcpyToSymbol(rc5, dat, dim*size));
  }
  else
  if (!strcmp(name,"rc6")) {
    cutilSafeCall(OPS_instance::getOPSInstance()->ostream(),cudaMemcpyToSymbol(rc6, dat, dim*size));
  }
  else
  if (!strcmp(name,"rc7")) {
    cutilSafeCall(OPS_instance::getOPSInstance()->ostream(),cudaMemcpyToSymbol(rc7, dat, dim*size));
  }
  else
  if (!strcmp(name,"rc8")) {
    cutilSafeCall(OPS_instance::getOPSInstance()->ostream(),cudaMemcpyToSymbol(rc8, dat, dim*size));
  }
  else
  if (!strcmp(name,"rc9")) {
    cutilSafeCall(OPS_instance::getOPSInstance()->ostream(),cudaMemcpyToSymbol(rc9, dat, dim*size));
  }
  else
  if (!strcmp(name,"rc10")) {
    cutilSafeCall(OPS_instance::getOPSInstance()->ostream(),cudaMemcpyToSymbol(rc10, dat, dim*size));
  }
  else
  if (!strcmp(name,"rc11")) {
    cutilSafeCall(OPS_instance::getOPSInstance()->ostream(),cudaMemcpyToSymbol(rc11, dat, dim*size));
  }
  else
  if (!strcmp(name,"rc12")) {
    cutilSafeCall(OPS_instance::getOPSInstance()->ostream(),cudaMemcpyToSymbol(rc12, dat, dim*size));
  }
  else
  if (!strcmp(name,"rc13")) {
    cutilSafeCall(OPS_instance::getOPSInstance()->ostream(),cudaMemcpyToSymbol(rc13, dat, dim*size));
  }
  else
  if (!strcmp(name,"rc14")) {
    cutilSafeCall(OPS_instance::getOPSInstance()->ostream(),cudaMemcpyToSymbol(rc14, dat, dim*size));
  }
  else
  if (!strcmp(name,"rc15")) {
    cutilSafeCall(OPS_instance::getOPSInstance()->ostream(),cudaMemcpyToSymbol(rc15, dat, dim*size));
  }
  else
  if (!strcmp(name,"rc16")) {
    cutilSafeCall(OPS_instance::getOPSInstance()->ostream(),cudaMemcpyToSymbol(rc16, dat, dim*size));
  }
  else
  if (!strcmp(name,"rc17")) {
    cutilSafeCall(OPS_instance::getOPSInstance()->ostream(),cudaMemcpyToSymbol(rc17, dat, dim*size));
  }
  else
  if (!strcmp(name,"rc18")) {
    cutilSafeCall(OPS_instance::getOPSInstance()->ostream(),cudaMemcpyToSymbol(rc18, dat, dim*size));
  }
  else
  if (!strcmp(name,"rcinv19")) {
    cutilSafeCall(OPS_instance::getOPSInstance()->ostream(),cudaMemcpyToSymbol(rcinv19, dat, dim*size));
  }
  else
  if (!strcmp(name,"rcinv20")) {
    cutilSafeCall(OPS_instance::getOPSInstance()->ostream(),cudaMemcpyToSymbol(rcinv20, dat, dim*size));
  }
  else
  {
    throw OPSException(OPS_RUNTIME_ERROR, "error: unknown const name");
  }
}


//user kernel files
#include "opensbliblock00Kernel010_cuda_kernel.cu"
#include "opensbliblock00Kernel008_cuda_kernel.cu"
#include "opensbliblock00Kernel009_cuda_kernel.cu"
#include "opensbliblock00Kernel002_cuda_kernel.cu"
#include "opensbliblock00Kernel003_cuda_kernel.cu"
#include "opensbliblock00Kernel004_cuda_kernel.cu"
#include "opensbliblock00Kernel000_cuda_kernel.cu"
#include "opensbliblock00Kernel006_cuda_kernel.cu"
#include "opensbliblock00Kernel011_cuda_kernel.cu"
