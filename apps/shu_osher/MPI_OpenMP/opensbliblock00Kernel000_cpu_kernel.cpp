//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel000(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8) {
#else
void ops_par_loop_opensbliblock00Kernel000_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[9] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,9,range,6)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,6,"opensbliblock00Kernel000");
    block->instance->OPS_kernels[6].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "opensbliblock00Kernel000");
  #endif


  //compute locally allocated range for the sub-block
  int start[1];
  int end[1];
  #if defined(OPS_MPI) && !defined(OPS_LAZY)
  int arg_idx[1];
  #endif
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<1; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 9,block, range, start, end, arg_idx) < 0) return;
  #endif


  //initialize global variable with the dimension of dats

  //set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset;
  double * __restrict__ rhou0_B0_p = (double *)(args[0].data + base0);

  int base1 = args[1].dat->base_offset;
  double * __restrict__ a_B0_p = (double *)(args[1].data + base1);

  int base2 = args[2].dat->base_offset;
  double * __restrict__ u0_B0_p = (double *)(args[2].data + base2);

  int base3 = args[3].dat->base_offset;
  double * __restrict__ rho_B0_p = (double *)(args[3].data + base3);

  int base4 = args[4].dat->base_offset;
  double * __restrict__ p_B0_p = (double *)(args[4].data + base4);

  int base5 = args[5].dat->base_offset;
  double * __restrict__ rhoE_B0_p = (double *)(args[5].data + base5);

  int base6 = args[6].dat->base_offset;
  double * __restrict__ wk2_B0_p = (double *)(args[6].data + base6);

  int base7 = args[7].dat->base_offset;
  double * __restrict__ wk0_B0_p = (double *)(args[7].data + base7);

  int base8 = args[8].dat->base_offset;
  double * __restrict__ wk1_B0_p = (double *)(args[8].data + base8);



  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_host(args, 9);
  ops_halo_exchanges(args,9,range);
  ops_H_D_exchanges_host(args, 9);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[6].mpi_time += __t1-__t2;
  }

  #pragma omp parallel for
  for ( int n_x=start[0]; n_x<end[0]; n_x++ ){
    const ACC<double> rhou0_B0(rhou0_B0_p + n_x*1);
    const ACC<double> a_B0(a_B0_p + n_x*1);
    const ACC<double> u0_B0(u0_B0_p + n_x*1);
    const ACC<double> rho_B0(rho_B0_p + n_x*1);
    const ACC<double> p_B0(p_B0_p + n_x*1);
    const ACC<double> rhoE_B0(rhoE_B0_p + n_x*1);
    ACC<double> wk2_B0(wk2_B0_p + n_x*1);
    ACC<double> wk0_B0(wk0_B0_p + n_x*1);
    ACC<double> wk1_B0(wk1_B0_p + n_x*1);
    
   double beta_0 = 0.0;
   double CF_02 = 0.0;
   double CF_10 = 0.0;
   double CS_03 = 0.0;
   double CS_22 = 0.0;
   double CS_24 = 0.0;
   double AVG_0_0_LEV_21 = 0.0;
   double CS_14 = 0.0;
   double CF_03 = 0.0;
   double AVG_0_inv_rho = 0.0;
   double beta_2 = 0.0;
   double CS_02 = 0.0;
   double omega_2 = 0.0;
   double CS_21 = 0.0;
   double CF_13 = 0.0;
   double CF_05 = 0.0;
   double AVG_0_0_LEV_10 = 0.0;
   double AVG_0_0_LEV_02 = 0.0;
   double CS_04 = 0.0;
   double max_lambda_0_22 = 0.0;
   double beta_1 = 0.0;
   double CF_12 = 0.0;
   double CF_01 = 0.0;
   double alpha_2 = 0.0;
   double CF_24 = 0.0;
   double max_lambda_0_00 = 0.0;
   double Recon_0 = 0.0;
   double CS_01 = 0.0;
   double AVG_0_u0 = 0.0;
   double CF_20 = 0.0;
   double CF_25 = 0.0;
   double max_lambda_0_11 = 0.0;
   double CS_11 = 0.0;
   double CS_12 = 0.0;
   double Recon_2 = 0.0;
   double CS_05 = 0.0;
   double alpha_1 = 0.0;
   double AVG_0_0_LEV_12 = 0.0;
   double AVG_0_0_LEV_11 = 0.0;
   double CF_00 = 0.0;
   double CF_23 = 0.0;
   double CS_15 = 0.0;
   double inv_alpha_sum = 0.0;
   double AVG_0_0_LEV_22 = 0.0;
   double CS_23 = 0.0;
   double inv_AVG_rho = 0.0;
   double CF_21 = 0.0;
   double omega_1 = 0.0;
   double CF_22 = 0.0;
   double Recon_1 = 0.0;
   double AVG_0_0_LEV_20 = 0.0;
   double CF_11 = 0.0;
   double AVG_0_0_LEV_00 = 0.0;
   double inv_AVG_a = 0.0;
   double CF_04 = 0.0;
   double AVG_0_a = 0.0;
   double CF_15 = 0.0;
   double alpha_0 = 0.0;
   double CF_14 = 0.0;
   double CS_10 = 0.0;
   double CS_20 = 0.0;
   double AVG_0_rho = 0.0;
   double CS_00 = 0.0;
   double omega_0 = 0.0;
   double CS_13 = 0.0;
   double CS_25 = 0.0;
   double AVG_0_0_LEV_01 = 0.0;
   AVG_0_rho = sqrt(rho_B0(0)*rho_B0(1));

   AVG_0_inv_rho = 1.0/(sqrt(rho_B0(0)) + sqrt(rho_B0(1)));

    AVG_0_u0 = AVG_0_inv_rho*(sqrt(rho_B0(0))*u0_B0(0) +
      sqrt(rho_B0(1))*u0_B0(1));

    AVG_0_a = sqrt(gamma_m1*(AVG_0_inv_rho*((p_B0(0) + rhoE_B0(0))/sqrt(rho_B0(0)) +
      (p_B0(1) + rhoE_B0(1))/sqrt(rho_B0(1))) - rc0*pow(AVG_0_u0, 2)));

   inv_AVG_a = 1.0/AVG_0_a;

   inv_AVG_rho = 1.0/AVG_0_rho;

    AVG_0_0_LEV_00 = (rc1)*AVG_0_u0*inv_AVG_a*(gama*AVG_0_a*AVG_0_u0*pow(inv_AVG_a, 2) - AVG_0_a*AVG_0_u0*pow(inv_AVG_a,
      2) + 2);

   AVG_0_0_LEV_01 = -rc0*inv_AVG_a*(gama*AVG_0_a*AVG_0_u0*pow(inv_AVG_a, 2) - AVG_0_a*AVG_0_u0*pow(inv_AVG_a, 2) + 1);

   AVG_0_0_LEV_02 = (rc0)*gamma_m1*pow(inv_AVG_a, 2);

   AVG_0_0_LEV_10 = -rc0*(gama*pow(AVG_0_u0, 2)*pow(inv_AVG_a, 2) - pow(AVG_0_u0, 2)*pow(inv_AVG_a, 2) - 2);

   AVG_0_0_LEV_11 = gamma_m1*AVG_0_u0*pow(inv_AVG_a, 2);

   AVG_0_0_LEV_12 = -gamma_m1*pow(inv_AVG_a, 2);

    AVG_0_0_LEV_20 = (rc1)*AVG_0_u0*inv_AVG_a*(gama*AVG_0_a*AVG_0_u0*pow(inv_AVG_a, 2) - AVG_0_a*AVG_0_u0*pow(inv_AVG_a,
      2) - 2);

   AVG_0_0_LEV_21 = -rc0*inv_AVG_a*(gama*AVG_0_a*AVG_0_u0*pow(inv_AVG_a, 2) - AVG_0_a*AVG_0_u0*pow(inv_AVG_a, 2) - 1);

   AVG_0_0_LEV_22 = (rc0)*gamma_m1*pow(inv_AVG_a, 2);

    CF_00 = AVG_0_0_LEV_00*rhou0_B0(-2) + AVG_0_0_LEV_01*p_B0(-2) +
      AVG_0_0_LEV_01*rhou0_B0(-2)*u0_B0(-2) + AVG_0_0_LEV_02*p_B0(-2)*u0_B0(-2)
      + AVG_0_0_LEV_02*rhoE_B0(-2)*u0_B0(-2);

    CF_10 = AVG_0_0_LEV_10*rhou0_B0(-2) + AVG_0_0_LEV_11*p_B0(-2) +
      AVG_0_0_LEV_11*rhou0_B0(-2)*u0_B0(-2) + AVG_0_0_LEV_12*p_B0(-2)*u0_B0(-2)
      + AVG_0_0_LEV_12*rhoE_B0(-2)*u0_B0(-2);

    CF_20 = AVG_0_0_LEV_20*rhou0_B0(-2) + AVG_0_0_LEV_21*p_B0(-2) +
      AVG_0_0_LEV_21*rhou0_B0(-2)*u0_B0(-2) + AVG_0_0_LEV_22*p_B0(-2)*u0_B0(-2)
      + AVG_0_0_LEV_22*rhoE_B0(-2)*u0_B0(-2);

    CF_01 = AVG_0_0_LEV_00*rhou0_B0(-1) + AVG_0_0_LEV_01*p_B0(-1) +
      AVG_0_0_LEV_01*rhou0_B0(-1)*u0_B0(-1) + AVG_0_0_LEV_02*p_B0(-1)*u0_B0(-1)
      + AVG_0_0_LEV_02*rhoE_B0(-1)*u0_B0(-1);

    CF_11 = AVG_0_0_LEV_10*rhou0_B0(-1) + AVG_0_0_LEV_11*p_B0(-1) +
      AVG_0_0_LEV_11*rhou0_B0(-1)*u0_B0(-1) + AVG_0_0_LEV_12*p_B0(-1)*u0_B0(-1)
      + AVG_0_0_LEV_12*rhoE_B0(-1)*u0_B0(-1);

    CF_21 = AVG_0_0_LEV_20*rhou0_B0(-1) + AVG_0_0_LEV_21*p_B0(-1) +
      AVG_0_0_LEV_21*rhou0_B0(-1)*u0_B0(-1) + AVG_0_0_LEV_22*p_B0(-1)*u0_B0(-1)
      + AVG_0_0_LEV_22*rhoE_B0(-1)*u0_B0(-1);

    CF_02 = AVG_0_0_LEV_00*rhou0_B0(0) + AVG_0_0_LEV_01*p_B0(0) +
      AVG_0_0_LEV_01*rhou0_B0(0)*u0_B0(0) + AVG_0_0_LEV_02*p_B0(0)*u0_B0(0) +
      AVG_0_0_LEV_02*rhoE_B0(0)*u0_B0(0);

    CF_12 = AVG_0_0_LEV_10*rhou0_B0(0) + AVG_0_0_LEV_11*p_B0(0) +
      AVG_0_0_LEV_11*rhou0_B0(0)*u0_B0(0) + AVG_0_0_LEV_12*p_B0(0)*u0_B0(0) +
      AVG_0_0_LEV_12*rhoE_B0(0)*u0_B0(0);

    CF_22 = AVG_0_0_LEV_20*rhou0_B0(0) + AVG_0_0_LEV_21*p_B0(0) +
      AVG_0_0_LEV_21*rhou0_B0(0)*u0_B0(0) + AVG_0_0_LEV_22*p_B0(0)*u0_B0(0) +
      AVG_0_0_LEV_22*rhoE_B0(0)*u0_B0(0);

    CF_03 = AVG_0_0_LEV_00*rhou0_B0(1) + AVG_0_0_LEV_01*p_B0(1) +
      AVG_0_0_LEV_01*rhou0_B0(1)*u0_B0(1) + AVG_0_0_LEV_02*p_B0(1)*u0_B0(1) +
      AVG_0_0_LEV_02*rhoE_B0(1)*u0_B0(1);

    CF_13 = AVG_0_0_LEV_10*rhou0_B0(1) + AVG_0_0_LEV_11*p_B0(1) +
      AVG_0_0_LEV_11*rhou0_B0(1)*u0_B0(1) + AVG_0_0_LEV_12*p_B0(1)*u0_B0(1) +
      AVG_0_0_LEV_12*rhoE_B0(1)*u0_B0(1);

    CF_23 = AVG_0_0_LEV_20*rhou0_B0(1) + AVG_0_0_LEV_21*p_B0(1) +
      AVG_0_0_LEV_21*rhou0_B0(1)*u0_B0(1) + AVG_0_0_LEV_22*p_B0(1)*u0_B0(1) +
      AVG_0_0_LEV_22*rhoE_B0(1)*u0_B0(1);

    CF_04 = AVG_0_0_LEV_00*rhou0_B0(2) + AVG_0_0_LEV_01*p_B0(2) +
      AVG_0_0_LEV_01*rhou0_B0(2)*u0_B0(2) + AVG_0_0_LEV_02*p_B0(2)*u0_B0(2) +
      AVG_0_0_LEV_02*rhoE_B0(2)*u0_B0(2);

    CF_14 = AVG_0_0_LEV_10*rhou0_B0(2) + AVG_0_0_LEV_11*p_B0(2) +
      AVG_0_0_LEV_11*rhou0_B0(2)*u0_B0(2) + AVG_0_0_LEV_12*p_B0(2)*u0_B0(2) +
      AVG_0_0_LEV_12*rhoE_B0(2)*u0_B0(2);

    CF_24 = AVG_0_0_LEV_20*rhou0_B0(2) + AVG_0_0_LEV_21*p_B0(2) +
      AVG_0_0_LEV_21*rhou0_B0(2)*u0_B0(2) + AVG_0_0_LEV_22*p_B0(2)*u0_B0(2) +
      AVG_0_0_LEV_22*rhoE_B0(2)*u0_B0(2);

    CF_05 = AVG_0_0_LEV_00*rhou0_B0(3) + AVG_0_0_LEV_01*p_B0(3) +
      AVG_0_0_LEV_01*rhou0_B0(3)*u0_B0(3) + AVG_0_0_LEV_02*p_B0(3)*u0_B0(3) +
      AVG_0_0_LEV_02*rhoE_B0(3)*u0_B0(3);

    CF_15 = AVG_0_0_LEV_10*rhou0_B0(3) + AVG_0_0_LEV_11*p_B0(3) +
      AVG_0_0_LEV_11*rhou0_B0(3)*u0_B0(3) + AVG_0_0_LEV_12*p_B0(3)*u0_B0(3) +
      AVG_0_0_LEV_12*rhoE_B0(3)*u0_B0(3);

    CF_25 = AVG_0_0_LEV_20*rhou0_B0(3) + AVG_0_0_LEV_21*p_B0(3) +
      AVG_0_0_LEV_21*rhou0_B0(3)*u0_B0(3) + AVG_0_0_LEV_22*p_B0(3)*u0_B0(3) +
      AVG_0_0_LEV_22*rhoE_B0(3)*u0_B0(3);

    CS_00 = AVG_0_0_LEV_00*rho_B0(-2) + AVG_0_0_LEV_01*rhou0_B0(-2) +
      AVG_0_0_LEV_02*rhoE_B0(-2);

    CS_01 = AVG_0_0_LEV_00*rho_B0(-1) + AVG_0_0_LEV_01*rhou0_B0(-1) +
      AVG_0_0_LEV_02*rhoE_B0(-1);

    CS_02 = AVG_0_0_LEV_00*rho_B0(0) + AVG_0_0_LEV_01*rhou0_B0(0) +
      AVG_0_0_LEV_02*rhoE_B0(0);

    CS_03 = AVG_0_0_LEV_00*rho_B0(1) + AVG_0_0_LEV_01*rhou0_B0(1) +
      AVG_0_0_LEV_02*rhoE_B0(1);

    CS_04 = AVG_0_0_LEV_00*rho_B0(2) + AVG_0_0_LEV_01*rhou0_B0(2) +
      AVG_0_0_LEV_02*rhoE_B0(2);

    CS_05 = AVG_0_0_LEV_00*rho_B0(3) + AVG_0_0_LEV_01*rhou0_B0(3) +
      AVG_0_0_LEV_02*rhoE_B0(3);

    CS_10 = AVG_0_0_LEV_10*rho_B0(-2) + AVG_0_0_LEV_11*rhou0_B0(-2) +
      AVG_0_0_LEV_12*rhoE_B0(-2);

    CS_11 = AVG_0_0_LEV_10*rho_B0(-1) + AVG_0_0_LEV_11*rhou0_B0(-1) +
      AVG_0_0_LEV_12*rhoE_B0(-1);

    CS_12 = AVG_0_0_LEV_10*rho_B0(0) + AVG_0_0_LEV_11*rhou0_B0(0) +
      AVG_0_0_LEV_12*rhoE_B0(0);

    CS_13 = AVG_0_0_LEV_10*rho_B0(1) + AVG_0_0_LEV_11*rhou0_B0(1) +
      AVG_0_0_LEV_12*rhoE_B0(1);

    CS_14 = AVG_0_0_LEV_10*rho_B0(2) + AVG_0_0_LEV_11*rhou0_B0(2) +
      AVG_0_0_LEV_12*rhoE_B0(2);

    CS_15 = AVG_0_0_LEV_10*rho_B0(3) + AVG_0_0_LEV_11*rhou0_B0(3) +
      AVG_0_0_LEV_12*rhoE_B0(3);

    CS_20 = AVG_0_0_LEV_20*rho_B0(-2) + AVG_0_0_LEV_21*rhou0_B0(-2) +
      AVG_0_0_LEV_22*rhoE_B0(-2);

    CS_21 = AVG_0_0_LEV_20*rho_B0(-1) + AVG_0_0_LEV_21*rhou0_B0(-1) +
      AVG_0_0_LEV_22*rhoE_B0(-1);

    CS_22 = AVG_0_0_LEV_20*rho_B0(0) + AVG_0_0_LEV_21*rhou0_B0(0) +
      AVG_0_0_LEV_22*rhoE_B0(0);

    CS_23 = AVG_0_0_LEV_20*rho_B0(1) + AVG_0_0_LEV_21*rhou0_B0(1) +
      AVG_0_0_LEV_22*rhoE_B0(1);

    CS_24 = AVG_0_0_LEV_20*rho_B0(2) + AVG_0_0_LEV_21*rhou0_B0(2) +
      AVG_0_0_LEV_22*rhoE_B0(2);

    CS_25 = AVG_0_0_LEV_20*rho_B0(3) + AVG_0_0_LEV_21*rhou0_B0(3) +
      AVG_0_0_LEV_22*rhoE_B0(3);

    max_lambda_0_00 = fmax(fabs(a_B0(3) - u0_B0(3)), fmax(fabs(a_B0(-1) -
      u0_B0(-1)), fmax(fabs(a_B0(2) - u0_B0(2)), fmax(fabs(a_B0(0) -
      u0_B0(0)), fmax(fabs(a_B0(-2) - u0_B0(-2)), fabs(a_B0(1) -
      u0_B0(1)))))));

    max_lambda_0_11 = fmax(fabs(u0_B0(3)), fmax(fabs(u0_B0(2)), fmax(fabs(u0_B0(1)),
      fmax(fabs(u0_B0(0)), fmax(fabs(u0_B0(-1)), fabs(u0_B0(-2)))))));

    max_lambda_0_22 = fmax(fabs(a_B0(0) + u0_B0(0)), fmax(fabs(a_B0(3) +
      u0_B0(3)), fmax(fabs(a_B0(1) + u0_B0(1)), fmax(fabs(a_B0(-2) +
      u0_B0(-2)), fmax(fabs(a_B0(-1) + u0_B0(-1)), fabs(a_B0(2) +
      u0_B0(2)))))));

    beta_0 = (rc0)*(CF_02 + CS_02*max_lambda_0_00)*((rc2)*(CF_02 + CS_02*max_lambda_0_00) - rc3*(CF_03 +
      CS_03*max_lambda_0_00) + (rc4)*(CF_04 + CS_04*max_lambda_0_00)) + (rc0)*(CF_03 +
      CS_03*max_lambda_0_00)*((rc5)*(CF_03 + CS_03*max_lambda_0_00) - rc6*(CF_04 + CS_04*max_lambda_0_00)) +
      (rc7)*pow(CF_04 + CS_04*max_lambda_0_00, 2);

    beta_1 = (rc0)*(CF_01 + CS_01*max_lambda_0_00)*((rc8)*(CF_01 + CS_01*max_lambda_0_00) - rc9*(CF_02 +
      CS_02*max_lambda_0_00) + (rc10)*(CF_03 + CS_03*max_lambda_0_00)) + (rc0)*(CF_02 +
      CS_02*max_lambda_0_00)*((rc9)*(CF_02 + CS_02*max_lambda_0_00) - rc9*(CF_03 + CS_03*max_lambda_0_00)) +
      (rc7)*pow(CF_03 + CS_03*max_lambda_0_00, 2);

    beta_2 = (rc0)*(CF_00 + CS_00*max_lambda_0_00)*((rc8)*(CF_00 + CS_00*max_lambda_0_00) + (rc4)*(CF_02 +
      CS_02*max_lambda_0_00)) + (rc0)*(CF_01 + CS_01*max_lambda_0_00)*(-rc6*(CF_00 + CS_00*max_lambda_0_00) +
      (rc5)*(CF_01 + CS_01*max_lambda_0_00) - rc3*(CF_02 + CS_02*max_lambda_0_00)) + (rc10)*pow(CF_02 +
      CS_02*max_lambda_0_00, 2);

   alpha_0 = 0.3 + (rc11)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_0 + 1.0e-14, 2);

   alpha_1 = 0.6 + (rc12)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_1 + 1.0e-14, 2);

   alpha_2 = 0.1 + (rc13)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_2 + 1.0e-14, 2);

   inv_alpha_sum = 1.0/(alpha_0 + alpha_1 + alpha_2);

   omega_0 = alpha_0*inv_alpha_sum;

   omega_1 = alpha_1*inv_alpha_sum;

   omega_2 = alpha_2*inv_alpha_sum;

    Recon_0 = Recon_0 + omega_0*((rc14)*(CF_02 + CS_02*max_lambda_0_00) + (rc15)*(CF_03 + CS_03*max_lambda_0_00) -
      rc16*(CF_04 + CS_04*max_lambda_0_00)) + omega_1*(-rc16*(CF_01 + CS_01*max_lambda_0_00) + (rc15)*(CF_02 +
      CS_02*max_lambda_0_00) + (rc14)*(CF_03 + CS_03*max_lambda_0_00)) + omega_2*((rc14)*(CF_00 + CS_00*max_lambda_0_00)
      - rc17*(CF_01 + CS_01*max_lambda_0_00) + (rc18)*(CF_02 + CS_02*max_lambda_0_00));

    beta_0 = (rc0)*(CF_03 - CS_03*max_lambda_0_00)*((rc2)*(CF_03 - CS_03*max_lambda_0_00) - rc3*(CF_04 -
      CS_04*max_lambda_0_00) + (rc4)*(CF_05 - CS_05*max_lambda_0_00)) + (rc0)*(CF_04 -
      CS_04*max_lambda_0_00)*((rc5)*(CF_04 - CS_04*max_lambda_0_00) - rc6*(CF_05 - CS_05*max_lambda_0_00)) +
      (rc7)*pow(CF_05 - CS_05*max_lambda_0_00, 2);

    beta_1 = (rc0)*(CF_02 - CS_02*max_lambda_0_00)*((rc8)*(CF_02 - CS_02*max_lambda_0_00) - rc9*(CF_03 -
      CS_03*max_lambda_0_00) + (rc10)*(CF_04 - CS_04*max_lambda_0_00)) + (rc0)*(CF_03 -
      CS_03*max_lambda_0_00)*((rc9)*(CF_03 - CS_03*max_lambda_0_00) - rc9*(CF_04 - CS_04*max_lambda_0_00)) +
      (rc7)*pow(CF_04 - CS_04*max_lambda_0_00, 2);

    beta_2 = (rc0)*(CF_01 - CS_01*max_lambda_0_00)*((rc8)*(CF_01 - CS_01*max_lambda_0_00) - rc6*(CF_02 -
      CS_02*max_lambda_0_00) + (rc4)*(CF_03 - CS_03*max_lambda_0_00)) + (rc0)*(CF_02 -
      CS_02*max_lambda_0_00)*((rc5)*(CF_02 - CS_02*max_lambda_0_00) - rc3*(CF_03 - CS_03*max_lambda_0_00)) +
      (rc10)*pow(CF_03 - CS_03*max_lambda_0_00, 2);

   alpha_0 = 0.1 + (rc13)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_0 + 1.0e-14, 2);

   alpha_1 = 0.6 + (rc12)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_1 + 1.0e-14, 2);

   alpha_2 = 0.3 + (rc11)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_2 + 1.0e-14, 2);

   inv_alpha_sum = 1.0/(alpha_0 + alpha_1 + alpha_2);

   omega_0 = alpha_0*inv_alpha_sum;

   omega_1 = alpha_1*inv_alpha_sum;

   omega_2 = alpha_2*inv_alpha_sum;

    Recon_0 = Recon_0 + omega_0*((rc18)*(CF_03 - CS_03*max_lambda_0_00) - rc17*(CF_04 - CS_04*max_lambda_0_00) +
      (rc14)*(CF_05 - CS_05*max_lambda_0_00)) + omega_1*((rc14)*(CF_02 - CS_02*max_lambda_0_00) + (rc15)*(CF_03 -
      CS_03*max_lambda_0_00) - rc16*(CF_04 - CS_04*max_lambda_0_00)) + omega_2*(-rc16*(CF_01 - CS_01*max_lambda_0_00) +
      (rc15)*(CF_02 - CS_02*max_lambda_0_00) + (rc14)*(CF_03 - CS_03*max_lambda_0_00));

    beta_0 = (rc0)*(CF_12 + CS_12*max_lambda_0_11)*((rc2)*(CF_12 + CS_12*max_lambda_0_11) - rc3*(CF_13 +
      CS_13*max_lambda_0_11) + (rc4)*(CF_14 + CS_14*max_lambda_0_11)) + (rc0)*(CF_13 +
      CS_13*max_lambda_0_11)*((rc5)*(CF_13 + CS_13*max_lambda_0_11) - rc6*(CF_14 + CS_14*max_lambda_0_11)) +
      (rc7)*pow(CF_14 + CS_14*max_lambda_0_11, 2);

    beta_1 = (rc0)*(CF_11 + CS_11*max_lambda_0_11)*((rc8)*(CF_11 + CS_11*max_lambda_0_11) - rc9*(CF_12 +
      CS_12*max_lambda_0_11) + (rc10)*(CF_13 + CS_13*max_lambda_0_11)) + (rc0)*(CF_12 +
      CS_12*max_lambda_0_11)*((rc9)*(CF_12 + CS_12*max_lambda_0_11) - rc9*(CF_13 + CS_13*max_lambda_0_11)) +
      (rc7)*pow(CF_13 + CS_13*max_lambda_0_11, 2);

    beta_2 = (rc0)*(CF_10 + CS_10*max_lambda_0_11)*((rc8)*(CF_10 + CS_10*max_lambda_0_11) + (rc4)*(CF_12 +
      CS_12*max_lambda_0_11)) + (rc0)*(CF_11 + CS_11*max_lambda_0_11)*(-rc6*(CF_10 + CS_10*max_lambda_0_11) +
      (rc5)*(CF_11 + CS_11*max_lambda_0_11) - rc3*(CF_12 + CS_12*max_lambda_0_11)) + (rc10)*pow(CF_12 +
      CS_12*max_lambda_0_11, 2);

   alpha_0 = 0.3 + (rc11)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_0 + 1.0e-14, 2);

   alpha_1 = 0.6 + (rc12)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_1 + 1.0e-14, 2);

   alpha_2 = 0.1 + (rc13)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_2 + 1.0e-14, 2);

   inv_alpha_sum = 1.0/(alpha_0 + alpha_1 + alpha_2);

   omega_0 = alpha_0*inv_alpha_sum;

   omega_1 = alpha_1*inv_alpha_sum;

   omega_2 = alpha_2*inv_alpha_sum;

    Recon_1 = Recon_1 + omega_0*((rc14)*(CF_12 + CS_12*max_lambda_0_11) + (rc15)*(CF_13 + CS_13*max_lambda_0_11) -
      rc16*(CF_14 + CS_14*max_lambda_0_11)) + omega_1*(-rc16*(CF_11 + CS_11*max_lambda_0_11) + (rc15)*(CF_12 +
      CS_12*max_lambda_0_11) + (rc14)*(CF_13 + CS_13*max_lambda_0_11)) + omega_2*((rc14)*(CF_10 + CS_10*max_lambda_0_11)
      - rc17*(CF_11 + CS_11*max_lambda_0_11) + (rc18)*(CF_12 + CS_12*max_lambda_0_11));

    beta_0 = (rc0)*(CF_13 - CS_13*max_lambda_0_11)*((rc2)*(CF_13 - CS_13*max_lambda_0_11) - rc3*(CF_14 -
      CS_14*max_lambda_0_11) + (rc4)*(CF_15 - CS_15*max_lambda_0_11)) + (rc0)*(CF_14 -
      CS_14*max_lambda_0_11)*((rc5)*(CF_14 - CS_14*max_lambda_0_11) - rc6*(CF_15 - CS_15*max_lambda_0_11)) +
      (rc7)*pow(CF_15 - CS_15*max_lambda_0_11, 2);

    beta_1 = (rc0)*(CF_12 - CS_12*max_lambda_0_11)*((rc8)*(CF_12 - CS_12*max_lambda_0_11) - rc9*(CF_13 -
      CS_13*max_lambda_0_11) + (rc10)*(CF_14 - CS_14*max_lambda_0_11)) + (rc0)*(CF_13 -
      CS_13*max_lambda_0_11)*((rc9)*(CF_13 - CS_13*max_lambda_0_11) - rc9*(CF_14 - CS_14*max_lambda_0_11)) +
      (rc7)*pow(CF_14 - CS_14*max_lambda_0_11, 2);

    beta_2 = (rc0)*(CF_11 - CS_11*max_lambda_0_11)*((rc8)*(CF_11 - CS_11*max_lambda_0_11) - rc6*(CF_12 -
      CS_12*max_lambda_0_11) + (rc4)*(CF_13 - CS_13*max_lambda_0_11)) + (rc0)*(CF_12 -
      CS_12*max_lambda_0_11)*((rc5)*(CF_12 - CS_12*max_lambda_0_11) - rc3*(CF_13 - CS_13*max_lambda_0_11)) +
      (rc10)*pow(CF_13 - CS_13*max_lambda_0_11, 2);

   alpha_0 = 0.1 + (rc13)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_0 + 1.0e-14, 2);

   alpha_1 = 0.6 + (rc12)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_1 + 1.0e-14, 2);

   alpha_2 = 0.3 + (rc11)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_2 + 1.0e-14, 2);

   inv_alpha_sum = 1.0/(alpha_0 + alpha_1 + alpha_2);

   omega_0 = alpha_0*inv_alpha_sum;

   omega_1 = alpha_1*inv_alpha_sum;

   omega_2 = alpha_2*inv_alpha_sum;

    Recon_1 = Recon_1 + omega_0*((rc18)*(CF_13 - CS_13*max_lambda_0_11) - rc17*(CF_14 - CS_14*max_lambda_0_11) +
      (rc14)*(CF_15 - CS_15*max_lambda_0_11)) + omega_1*((rc14)*(CF_12 - CS_12*max_lambda_0_11) + (rc15)*(CF_13 -
      CS_13*max_lambda_0_11) - rc16*(CF_14 - CS_14*max_lambda_0_11)) + omega_2*(-rc16*(CF_11 - CS_11*max_lambda_0_11) +
      (rc15)*(CF_12 - CS_12*max_lambda_0_11) + (rc14)*(CF_13 - CS_13*max_lambda_0_11));

    beta_0 = (rc0)*(CF_22 + CS_22*max_lambda_0_22)*((rc2)*(CF_22 + CS_22*max_lambda_0_22) - rc3*(CF_23 +
      CS_23*max_lambda_0_22) + (rc4)*(CF_24 + CS_24*max_lambda_0_22)) + (rc0)*(CF_23 +
      CS_23*max_lambda_0_22)*((rc5)*(CF_23 + CS_23*max_lambda_0_22) - rc6*(CF_24 + CS_24*max_lambda_0_22)) +
      (rc7)*pow(CF_24 + CS_24*max_lambda_0_22, 2);

    beta_1 = (rc0)*(CF_21 + CS_21*max_lambda_0_22)*((rc8)*(CF_21 + CS_21*max_lambda_0_22) - rc9*(CF_22 +
      CS_22*max_lambda_0_22) + (rc10)*(CF_23 + CS_23*max_lambda_0_22)) + (rc0)*(CF_22 +
      CS_22*max_lambda_0_22)*((rc9)*(CF_22 + CS_22*max_lambda_0_22) - rc9*(CF_23 + CS_23*max_lambda_0_22)) +
      (rc7)*pow(CF_23 + CS_23*max_lambda_0_22, 2);

    beta_2 = (rc0)*(CF_20 + CS_20*max_lambda_0_22)*((rc8)*(CF_20 + CS_20*max_lambda_0_22) + (rc4)*(CF_22 +
      CS_22*max_lambda_0_22)) + (rc0)*(CF_21 + CS_21*max_lambda_0_22)*(-rc6*(CF_20 + CS_20*max_lambda_0_22) +
      (rc5)*(CF_21 + CS_21*max_lambda_0_22) - rc3*(CF_22 + CS_22*max_lambda_0_22)) + (rc10)*pow(CF_22 +
      CS_22*max_lambda_0_22, 2);

   alpha_0 = 0.3 + (rc11)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_0 + 1.0e-14, 2);

   alpha_1 = 0.6 + (rc12)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_1 + 1.0e-14, 2);

   alpha_2 = 0.1 + (rc13)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_2 + 1.0e-14, 2);

   inv_alpha_sum = 1.0/(alpha_0 + alpha_1 + alpha_2);

   omega_0 = alpha_0*inv_alpha_sum;

   omega_1 = alpha_1*inv_alpha_sum;

   omega_2 = alpha_2*inv_alpha_sum;

    Recon_2 = Recon_2 + omega_0*((rc14)*(CF_22 + CS_22*max_lambda_0_22) + (rc15)*(CF_23 + CS_23*max_lambda_0_22) -
      rc16*(CF_24 + CS_24*max_lambda_0_22)) + omega_1*(-rc16*(CF_21 + CS_21*max_lambda_0_22) + (rc15)*(CF_22 +
      CS_22*max_lambda_0_22) + (rc14)*(CF_23 + CS_23*max_lambda_0_22)) + omega_2*((rc14)*(CF_20 + CS_20*max_lambda_0_22)
      - rc17*(CF_21 + CS_21*max_lambda_0_22) + (rc18)*(CF_22 + CS_22*max_lambda_0_22));

    beta_0 = (rc0)*(CF_23 - CS_23*max_lambda_0_22)*((rc2)*(CF_23 - CS_23*max_lambda_0_22) - rc3*(CF_24 -
      CS_24*max_lambda_0_22) + (rc4)*(CF_25 - CS_25*max_lambda_0_22)) + (rc0)*(CF_24 -
      CS_24*max_lambda_0_22)*((rc5)*(CF_24 - CS_24*max_lambda_0_22) - rc6*(CF_25 - CS_25*max_lambda_0_22)) +
      (rc7)*pow(CF_25 - CS_25*max_lambda_0_22, 2);

    beta_1 = (rc0)*(CF_22 - CS_22*max_lambda_0_22)*((rc8)*(CF_22 - CS_22*max_lambda_0_22) - rc9*(CF_23 -
      CS_23*max_lambda_0_22) + (rc10)*(CF_24 - CS_24*max_lambda_0_22)) + (rc0)*(CF_23 -
      CS_23*max_lambda_0_22)*((rc9)*(CF_23 - CS_23*max_lambda_0_22) - rc9*(CF_24 - CS_24*max_lambda_0_22)) +
      (rc7)*pow(CF_24 - CS_24*max_lambda_0_22, 2);

    beta_2 = (rc0)*(CF_21 - CS_21*max_lambda_0_22)*((rc8)*(CF_21 - CS_21*max_lambda_0_22) - rc6*(CF_22 -
      CS_22*max_lambda_0_22) + (rc4)*(CF_23 - CS_23*max_lambda_0_22)) + (rc0)*(CF_22 -
      CS_22*max_lambda_0_22)*((rc5)*(CF_22 - CS_22*max_lambda_0_22) - rc3*(CF_23 - CS_23*max_lambda_0_22)) +
      (rc10)*pow(CF_23 - CS_23*max_lambda_0_22, 2);

   alpha_0 = 0.1 + (rc13)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_0 + 1.0e-14, 2);

   alpha_1 = 0.6 + (rc12)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_1 + 1.0e-14, 2);

   alpha_2 = 0.3 + (rc11)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_2 + 1.0e-14, 2);

   inv_alpha_sum = 1.0/(alpha_0 + alpha_1 + alpha_2);

   omega_0 = alpha_0*inv_alpha_sum;

   omega_1 = alpha_1*inv_alpha_sum;

   omega_2 = alpha_2*inv_alpha_sum;

    Recon_2 = Recon_2 + omega_0*((rc18)*(CF_23 - CS_23*max_lambda_0_22) - rc17*(CF_24 - CS_24*max_lambda_0_22) +
      (rc14)*(CF_25 - CS_25*max_lambda_0_22)) + omega_1*((rc14)*(CF_22 - CS_22*max_lambda_0_22) + (rc15)*(CF_23 -
      CS_23*max_lambda_0_22) - rc16*(CF_24 - CS_24*max_lambda_0_22)) + omega_2*(-rc16*(CF_21 - CS_21*max_lambda_0_22) +
      (rc15)*(CF_22 - CS_22*max_lambda_0_22) + (rc14)*(CF_23 - CS_23*max_lambda_0_22));

   wk0_B0(0) = Recon_0 + Recon_1 + Recon_2;

   wk1_B0(0) = AVG_0_u0*Recon_1 + Recon_0*(-AVG_0_a + AVG_0_u0) + Recon_2*(AVG_0_a + AVG_0_u0);

    wk2_B0(0) = (rc0)*pow(AVG_0_u0, 2)*Recon_1 + Recon_0*(rcinv19*pow(AVG_0_a, 2) - AVG_0_a*AVG_0_u0 +
      (rc0)*pow(AVG_0_u0, 2)) + Recon_2*(rcinv19*pow(AVG_0_a, 2) + AVG_0_a*AVG_0_u0 + (rc0)*pow(AVG_0_u0, 2));


  }
  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[6].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_host(args, 9);
  ops_set_halo_dirtybit3(&args[6],range);
  ops_set_halo_dirtybit3(&args[7],range);
  ops_set_halo_dirtybit3(&args[8],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[6].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[6].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[6].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[6].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[6].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[6].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[6].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[6].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[6].transfer += ops_compute_transfer(dim, start, end, &arg7);
    block->instance->OPS_kernels[6].transfer += ops_compute_transfer(dim, start, end, &arg8);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel000(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)calloc(1,sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 0;
  desc->index = 6;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 6;
  for ( int i=0; i<2; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 9;
  desc->args = (ops_arg*)ops_malloc(9*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg2.dat->index;
  desc->args[3] = arg3;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg3.dat->index;
  desc->args[4] = arg4;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg4.dat->index;
  desc->args[5] = arg5;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg5.dat->index;
  desc->args[6] = arg6;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg6.dat->index;
  desc->args[7] = arg7;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg7.dat->index;
  desc->args[8] = arg8;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg8.dat->index;
  desc->function = ops_par_loop_opensbliblock00Kernel000_execute;
  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,6,"opensbliblock00Kernel000");
  }
  ops_enqueue_kernel(desc);
}
#endif
