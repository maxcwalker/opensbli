//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel067(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8) {
#else
void ops_par_loop_opensbliblock00Kernel067_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[9] = { arg0, arg1, arg2, arg3, arg4,
 arg5, arg6, arg7, arg8};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,9,range,0)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,0,"opensbliblock00Kernel067");
    block->instance->OPS_kernels[0].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "opensbliblock00Kernel067");
  #endif


  //compute locally allocated range for the sub-block
  int start[3];
  int end[3];
  int arg_idx[3];
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<3; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 9,block, range, start, end, arg_idx) < 0) return;
  #endif

  #if defined(OPS_MPI)
  #if defined(OPS_LAZY)
  sub_block_list sb = OPS_sub_block_list[block->index];
  arg_idx[0] = sb->decomp_disp[0];
  arg_idx[1] = sb->decomp_disp[1];
  arg_idx[2] = sb->decomp_disp[2];
  #else
  arg_idx[0] -= start[0];
  arg_idx[1] -= start[1];
  arg_idx[2] -= start[2];
  #endif
  #else //OPS_MPI
  arg_idx[0] = 0;
  arg_idx[1] = 0;
  arg_idx[2] = 0;
  #endif //OPS_MPI

  //initialize global variable with the dimension of dats
  int xdim0_opensbliblock00Kernel067 = args[0].dat->size[0];
  int ydim0_opensbliblock00Kernel067 = args[0].dat->size[1];
  int xdim1_opensbliblock00Kernel067 = args[1].dat->size[0];
  int ydim1_opensbliblock00Kernel067 = args[1].dat->size[1];
  int xdim2_opensbliblock00Kernel067 = args[2].dat->size[0];
  int ydim2_opensbliblock00Kernel067 = args[2].dat->size[1];
  int xdim3_opensbliblock00Kernel067 = args[3].dat->size[0];
  int ydim3_opensbliblock00Kernel067 = args[3].dat->size[1];
  int xdim4_opensbliblock00Kernel067 = args[4].dat->size[0];
  int ydim4_opensbliblock00Kernel067 = args[4].dat->size[1];
  int xdim5_opensbliblock00Kernel067 = args[5].dat->size[0];
  int ydim5_opensbliblock00Kernel067 = args[5].dat->size[1];
  int xdim6_opensbliblock00Kernel067 = args[6].dat->size[0];
  int ydim6_opensbliblock00Kernel067 = args[6].dat->size[1];
  int xdim7_opensbliblock00Kernel067 = args[7].dat->size[0];
  int ydim7_opensbliblock00Kernel067 = args[7].dat->size[1];

  //set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset/sizeof(double);
  double* rhoE_B0_p = (double*)args[0].data_d;

  int base1 = args[1].dat->base_offset/sizeof(double);
  double* rho_B0_p = (double*)args[1].data_d;

  int base2 = args[2].dat->base_offset/sizeof(double);
  double* rhou0_B0_p = (double*)args[2].data_d;

  int base3 = args[3].dat->base_offset/sizeof(double);
  double* rhou1_B0_p = (double*)args[3].data_d;

  int base4 = args[4].dat->base_offset/sizeof(double);
  double* rhou2_B0_p = (double*)args[4].data_d;

  int base5 = args[5].dat->base_offset/sizeof(double);
  double* x0_B0_p = (double*)args[5].data_d;

  int base6 = args[6].dat->base_offset/sizeof(double);
  double* x2_B0_p = (double*)args[6].data_d;

  int base7 = args[7].dat->base_offset/sizeof(double);
  double* x1_B0_p = (double*)args[7].data_d;




  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_device(args, 9);
  ops_halo_exchanges(args,9,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[0].mpi_time += __t1-__t2;
  }

  int start_0 = start[0];
  int end_0 = end[0];
  int arg_idx_0 = arg_idx[0];
  int start_1 = start[1];
  int end_1 = end[1];
  int arg_idx_1 = arg_idx[1];
  int start_2 = start[2];
  int end_2 = end[2];
  int arg_idx_2 = arg_idx[2];
  if ((end[0]-start[0])>0 && (end[1]-start[1])>0 && (end[2]-start[2])>0) {
    block->instance->sycl_instance->queue->submit([&](cl::sycl::handler &cgh) {

      auto Delta0block0_sycl = (*Delta0block0_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto Delta1block0_sycl = (*Delta1block0_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto Delta2block0_sycl = (*Delta2block0_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto H_sycl = (*H_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto L_sycl = (*L_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto b_sycl = (*b_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto inv2Minf_sycl = (*inv2Minf_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto inv2a_sycl = (*inv2a_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto invH_sycl = (*invH_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto inv_gamma_m1_sycl = (*inv_gamma_m1_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto invgama_sycl = (*invgama_p).template get_access<cl::sycl::access::mode::read>(cgh);

      cgh.parallel_for<class opensbliblock00Kernel067_kernel>(cl::sycl::nd_range<3>(cl::sycl::range<3>(
           ((end[2]-start[2]-1)/block->instance->OPS_block_size_z+1)*block->instance->OPS_block_size_z,
           ((end[1]-start[1]-1)/block->instance->OPS_block_size_y+1)*block->instance->OPS_block_size_y,
            ((end[0]-start[0]-1)/block->instance->OPS_block_size_x+1)*block->instance->OPS_block_size_x
             ),cl::sycl::range<3>(
             block->instance->OPS_block_size_z,
             block->instance->OPS_block_size_y,
      block->instance->OPS_block_size_x
             ))
      , [=](cl::sycl::nd_item<3> item
      ) [[intel::kernel_args_restrict]] {
        int n_z = item.get_global_id(0)+start_2;
        int n_y = item.get_global_id(1)+start_1;
        int n_x = item.get_global_id(2)+start_0;
        int idx[] = {arg_idx_0+n_x, arg_idx_1+n_y, arg_idx_2+n_z};
        ACC<double> rhoE_B0(xdim0_opensbliblock00Kernel067, ydim0_opensbliblock00Kernel067, &rhoE_B0_p[0] + base0 + n_x*1 + n_y * xdim0_opensbliblock00Kernel067*1 + n_z * xdim0_opensbliblock00Kernel067 * ydim0_opensbliblock00Kernel067*1);
        ACC<double> rho_B0(xdim1_opensbliblock00Kernel067, ydim1_opensbliblock00Kernel067, &rho_B0_p[0] + base1 + n_x*1 + n_y * xdim1_opensbliblock00Kernel067*1 + n_z * xdim1_opensbliblock00Kernel067 * ydim1_opensbliblock00Kernel067*1);
        ACC<double> rhou0_B0(xdim2_opensbliblock00Kernel067, ydim2_opensbliblock00Kernel067, &rhou0_B0_p[0] + base2 + n_x*1 + n_y * xdim2_opensbliblock00Kernel067*1 + n_z * xdim2_opensbliblock00Kernel067 * ydim2_opensbliblock00Kernel067*1);
        ACC<double> rhou1_B0(xdim3_opensbliblock00Kernel067, ydim3_opensbliblock00Kernel067, &rhou1_B0_p[0] + base3 + n_x*1 + n_y * xdim3_opensbliblock00Kernel067*1 + n_z * xdim3_opensbliblock00Kernel067 * ydim3_opensbliblock00Kernel067*1);
        ACC<double> rhou2_B0(xdim4_opensbliblock00Kernel067, ydim4_opensbliblock00Kernel067, &rhou2_B0_p[0] + base4 + n_x*1 + n_y * xdim4_opensbliblock00Kernel067*1 + n_z * xdim4_opensbliblock00Kernel067 * ydim4_opensbliblock00Kernel067*1);
        ACC<double> x0_B0(xdim5_opensbliblock00Kernel067, ydim5_opensbliblock00Kernel067, &x0_B0_p[0] + base5 + n_x*1 + n_y * xdim5_opensbliblock00Kernel067*1 + n_z * xdim5_opensbliblock00Kernel067 * ydim5_opensbliblock00Kernel067*1);
        ACC<double> x2_B0(xdim6_opensbliblock00Kernel067, ydim6_opensbliblock00Kernel067, &x2_B0_p[0] + base6 + n_x*1 + n_y * xdim6_opensbliblock00Kernel067*1 + n_z * xdim6_opensbliblock00Kernel067 * ydim6_opensbliblock00Kernel067*1);
        ACC<double> x1_B0(xdim7_opensbliblock00Kernel067, ydim7_opensbliblock00Kernel067, &x1_B0_p[0] + base7 + n_x*1 + n_y * xdim7_opensbliblock00Kernel067*1 + n_z * xdim7_opensbliblock00Kernel067 * ydim7_opensbliblock00Kernel067*1);
        //USER CODE
        if (n_x < end_0 && n_y < end_1 && n_z < end_2) {
          
   double T = 0.0;
   double rho = 0.0;
   double rhou0 = 0.0;
   double rhou1 = 0.0;
   double x1b0 = 0.0;
   x0_B0(0,0,0) = Delta0block0_sycl[0]*idx[0];

    x1_B0(0,0,0) = ((1.0/20.0))*H_sycl[0]*cl::sycl::exp(-((-(2.0/3.0)*L_sycl[0] + Delta0block0_sycl[0]*idx[0])*(-(2.0/3.0)*L_sycl[0] +
      Delta0block0_sycl[0]*idx[0]))*inv2a_sycl[0]) + ((1.0/20.0))*H_sycl[0]*cl::sycl::exp(-((-(1.0/3.0)*L_sycl[0] + Delta0block0_sycl[0]*idx[0])*(-(1.0/3.0)*L_sycl[0] +
      Delta0block0_sycl[0]*idx[0]))*inv2a_sycl[0]) + (-(1.0/20.0)*H_sycl[0]*cl::sycl::exp(-((-(2.0/3.0)*L_sycl[0] + Delta0block0_sycl[0]*idx[0])*(-(2.0/3.0)*L_sycl[0] +
      Delta0block0_sycl[0]*idx[0]))*inv2a_sycl[0]) - (1.0/20.0)*H_sycl[0]*cl::sycl::exp(-((-(1.0/3.0)*L_sycl[0] + Delta0block0_sycl[0]*idx[0])*(-(1.0/3.0)*L_sycl[0] +
      Delta0block0_sycl[0]*idx[0]))*inv2a_sycl[0]) + H_sycl[0])*sinh(b_sycl[0]*invH_sycl[0]*Delta1block0_sycl[0]*idx[1])/sinh(b_sycl[0]);

   x2_B0(0,0,0) = Delta2block0_sycl[0]*idx[2];

    x1b0 = ((1.0/20.0))*H_sycl[0]*cl::sycl::exp(-((-(2.0/3.0)*L_sycl[0] + Delta0block0_sycl[0]*idx[0])*(-(2.0/3.0)*L_sycl[0] + Delta0block0_sycl[0]*idx[0]))*inv2a_sycl[0]) +
      ((1.0/20.0))*H_sycl[0]*cl::sycl::exp(-((-(1.0/3.0)*L_sycl[0] + Delta0block0_sycl[0]*idx[0])*(-(1.0/3.0)*L_sycl[0] + Delta0block0_sycl[0]*idx[0]))*inv2a_sycl[0]);

    rhou0 = ((-x1b0 + x1_B0(0,0,0) < 3.03630363036304) ? (
   4.84470215883658e-6 + 3.02526645130037e-7*pow(-x1b0 +
      x1_B0(0,0,0), 25) + 0.0681016455119912*pow(-x1b0 + x1_B0(0,0,0), 14) + 7.30106300042479e-5*pow(-x1b0 +
      x1_B0(0,0,0), 20) + 1.39289122106652e-15*pow(-x1b0 + x1_B0(0,0,0), 43) + 18.2056443304119*((-x1b0 +
      x1_B0(0,0,0))*(-x1b0 + x1_B0(0,0,0))*(-x1b0 + x1_B0(0,0,0))*(-x1b0 + x1_B0(0,0,0))*(-x1b0 + x1_B0(0,0,0))) +
      0.149430472752954*pow(-x1b0 + x1_B0(0,0,0), 13) + 2.33453761154745e-15*pow(-x1b0 + x1_B0(0,0,0), 42) +
      2.94119096562712e-18*pow(-x1b0 + x1_B0(0,0,0), 49) + 19.1312305931597*pow(-x1b0 + x1_B0(0,0,0), 7) +
      0.712531314123642*x1_B0(0,0,0) + 2.28285282446188e-11*pow(-x1b0 + x1_B0(0,0,0), 34) +
      6.72008912767984e-18*pow(-x1b0 + x1_B0(0,0,0), 45) + 1.85237319159623e-12*pow(-x1b0 + x1_B0(0,0,0), 36) +
      4.11331353383539*((-x1b0 + x1_B0(0,0,0))*(-x1b0 + x1_B0(0,0,0))*(-x1b0 + x1_B0(0,0,0))) +
      0.000554620224101118*pow(-x1b0 + x1_B0(0,0,0), 18) + 8.68008051379462e-12*pow(-x1b0 + x1_B0(0,0,0), 35) +
      4.79482831154793*pow(-x1b0 + x1_B0(0,0,0), 10) + 1.74234588054336e-7*pow(-x1b0 + x1_B0(0,0,0), 26) +
      0.000372853506379258*pow(-x1b0 + x1_B0(0,0,0), 19) + 4.7998816899123e-8*pow(-x1b0 + x1_B0(0,0,0), 27) +
      3.83548430638095e-16*pow(-x1b0 + x1_B0(0,0,0), 44) + 2.55432051378907e-11*pow(-x1b0 + x1_B0(0,0,0), 33) +
      3.69916230950404e-9*pow(-x1b0 + x1_B0(0,0,0), 28) - 1.11611376584945*pow(-x1b0 + x1_B0(0,0,0), 11) -
      1.0925706937579e-13*pow(-x1b0 + x1_B0(0,0,0), 39) - 1.90294560250545e-17*pow(-x1b0 + x1_B0(0,0,0), 47) -
      1.4094477284491*((-x1b0 + x1_B0(0,0,0))*(-x1b0 + x1_B0(0,0,0))) - 0.464021059371288*pow(-x1b0 + x1_B0(0,0,0), 12)
      - 3.07853251197011e-14*pow(-x1b0 + x1_B0(0,0,0), 37) - 2.20009986795929e-15*pow(-x1b0 + x1_B0(0,0,0), 41) -
      6.44851029951211e-10*pow(-x1b0 + x1_B0(0,0,0), 31) - 2.23323696762087e-13*pow(-x1b0 + x1_B0(0,0,0), 38) -
      4.26727464825078*pow(-x1b0 + x1_B0(0,0,0), 9) - 2.08492280136658e-9*pow(-x1b0 + x1_B0(0,0,0), 30) -
      0.00940432395201688*pow(-x1b0 + x1_B0(0,0,0), 16) - 9.75801233551015*((-x1b0 + x1_B0(0,0,0))*(-x1b0 +
      x1_B0(0,0,0))*(-x1b0 + x1_B0(0,0,0))*(-x1b0 + x1_B0(0,0,0))) - 0.712531314123642*x1b0 - 5.90490832929809*pow(-x1b0
      + x1_B0(0,0,0), 8) - 0.00702382181497724*pow(-x1b0 + x1_B0(0,0,0), 15) - 2.06884876173757e-19*pow(-x1b0 +
      x1_B0(0,0,0), 48) - 2.95191578291675e-14*pow(-x1b0 + x1_B0(0,0,0), 40) - 4.13618894820168e-6*pow(-x1b0 +
      x1_B0(0,0,0), 23) - 3.34275770270943e-7*pow(-x1b0 + x1_B0(0,0,0), 24) - 23.7751892445564*((-x1b0 +
      x1_B0(0,0,0))*(-x1b0 + x1_B0(0,0,0))*(-x1b0 + x1_B0(0,0,0))*(-x1b0 + x1_B0(0,0,0))*(-x1b0 + x1_B0(0,0,0))*(-x1b0 +
      x1_B0(0,0,0))) - 9.08370729837509e-11*pow(-x1b0 + x1_B0(0,0,0), 32) - 4.51470100774088e-17*pow(-x1b0 +
      x1_B0(0,0,0), 46) - 0.00167612004430292*pow(-x1b0 + x1_B0(0,0,0), 17) - 1.31671477973394e-5*pow(-x1b0 +
      x1_B0(0,0,0), 21) - 1.33226733723832e-5*pow(-x1b0 + x1_B0(0,0,0), 22) - 3.46091933575078e-9*pow(-x1b0 +
      x1_B0(0,0,0), 29) - 4.10735237961744e-19*pow(-x1b0 + x1_B0(0,0,0), 50)
)
: (
   0.999998989484505
));

    rhou1 = ((-x1b0 + x1_B0(0,0,0) < 3.03630363036304) ? (
   9.78648628483518e-9 + 6.21191710171717e-16*pow(-x1b0 +
      x1_B0(0,0,0), 37) + 6.07498639819576e-9*pow(-x1b0 + x1_B0(0,0,0), 21) + 0.0101486053641383*((-x1b0 +
      x1_B0(0,0,0))*(-x1b0 + x1_B0(0,0,0))*(-x1b0 + x1_B0(0,0,0))*(-x1b0 + x1_B0(0,0,0))) +
      4.05827166218556e-11*pow(-x1b0 + x1_B0(0,0,0), 28) + 1.3332274043384e-6*x1b0 + 7.47277175020936e-7*pow(-x1b0 +
      x1_B0(0,0,0), 18) + 9.36135375574866e-14*pow(-x1b0 + x1_B0(0,0,0), 34) + 8.16270371484826e-10*pow(-x1b0 +
      x1_B0(0,0,0), 25) + 6.27548683946488e-18*pow(-x1b0 + x1_B0(0,0,0), 43) + 0.000259315449003791*pow(-x1b0 +
      x1_B0(0,0,0), 13) + 1.90106216906554e-18*pow(-x1b0 + x1_B0(0,0,0), 44) + 5.34909766511128e-7*pow(-x1b0 +
      x1_B0(0,0,0), 20) + 2.68060615471494e-10*pow(-x1b0 + x1_B0(0,0,0), 27) + 0.0377970689071841*pow(-x1b0 +
      x1_B0(0,0,0), 10) + 8.79590669396741e-18*pow(-x1b0 + x1_B0(0,0,0), 42) + 0.000753254228151826*((-x1b0 +
      x1_B0(0,0,0))*(-x1b0 + x1_B0(0,0,0))) + 7.79657722359996e-10*pow(-x1b0 + x1_B0(0,0,0), 26) +
      1.77817933223893e-6*pow(-x1b0 + x1_B0(0,0,0), 19) + 1.34555424778923e-20*pow(-x1b0 + x1_B0(0,0,0), 49) +
      3.20829887020377e-5*pow(-x1b0 + x1_B0(0,0,0), 15) + 0.144335735249206*pow(-x1b0 + x1_B0(0,0,0), 8) +
      0.0780830343434549*((-x1b0 + x1_B0(0,0,0))*(-x1b0 + x1_B0(0,0,0))*(-x1b0 + x1_B0(0,0,0))*(-x1b0 +
      x1_B0(0,0,0))*(-x1b0 + x1_B0(0,0,0))*(-x1b0 + x1_B0(0,0,0))) + 4.15582474626267e-14*pow(-x1b0 + x1_B0(0,0,0), 35)
      + 1.04467028415993e-14*pow(-x1b0 + x1_B0(0,0,0), 36) + 4.64453635468355e-14*pow(-x1b0 + x1_B0(0,0,0), 33) +
      1.0080622832265e-19*pow(-x1b0 + x1_B0(0,0,0), 45) + 0.000458371514990273*pow(-x1b0 + x1_B0(0,0,0), 14) -
      9.080556169295e-12*pow(-x1b0 + x1_B0(0,0,0), 30) - 9.78570251258082e-12*pow(-x1b0 + x1_B0(0,0,0), 29) -
      1.3332274043384e-6*x1_B0(0,0,0) - 3.33735866891267e-12*pow(-x1b0 + x1_B0(0,0,0), 31) - 0.129390059397751*pow(-x1b0
      + x1_B0(0,0,0), 7) - 4.96768268612849e-16*pow(-x1b0 + x1_B0(0,0,0), 39) - 8.9657922559536e-20*pow(-x1b0 +
      x1_B0(0,0,0), 47) - 0.00402685883056915*pow(-x1b0 + x1_B0(0,0,0), 12) - 3.85405246721558e-9*pow(-x1b0 +
      x1_B0(0,0,0), 24) - 0.0327798926375127*((-x1b0 + x1_B0(0,0,0))*(-x1b0 + x1_B0(0,0,0))*(-x1b0 +
      x1_B0(0,0,0))*(-x1b0 + x1_B0(0,0,0))*(-x1b0 + x1_B0(0,0,0))) - 1.82021151200548e-21*pow(-x1b0 + x1_B0(0,0,0), 50)
      - 0.0024345553844223*((-x1b0 + x1_B0(0,0,0))*(-x1b0 + x1_B0(0,0,0))*(-x1b0 + x1_B0(0,0,0))) -
      1.75238271969722e-17*pow(-x1b0 + x1_B0(0,0,0), 41) - 1.50368538153428e-16*pow(-x1b0 + x1_B0(0,0,0), 40) -
      6.4450540588936e-13*pow(-x1b0 + x1_B0(0,0,0), 32) - 4.39996262324172e-5*pow(-x1b0 + x1_B0(0,0,0), 16) -
      2.31875384721229e-8*pow(-x1b0 + x1_B0(0,0,0), 23) - 0.101833705343037*pow(-x1b0 + x1_B0(0,0,0), 9) -
      2.78915261629754e-21*pow(-x1b0 + x1_B0(0,0,0), 48) - 1.94134330203987e-19*pow(-x1b0 + x1_B0(0,0,0), 46) -
      0.000882505795438128*pow(-x1b0 + x1_B0(0,0,0), 11) - 5.52685294299254e-8*pow(-x1b0 + x1_B0(0,0,0), 22) -
      1.4209218223703e-5*pow(-x1b0 + x1_B0(0,0,0), 17) - 8.54638855825191e-16*pow(-x1b0 + x1_B0(0,0,0), 38)
)
: (

      0.00199680566128524
));

    T = ((-x1b0 + x1_B0(0,0,0) < 3.03630363036304) ? (
   1.3697052553704 + 0.00420688453744246*pow(-x1b0 +
      x1_B0(0,0,0), 17) + 1.1707188543105e-6*pow(-x1b0 + x1_B0(0,0,0), 24) + 4.41756713643773e-19*pow(-x1b0 +
      x1_B0(0,0,0), 50) + 6.52236019273815*((-x1b0 + x1_B0(0,0,0))*(-x1b0 + x1_B0(0,0,0))*(-x1b0 + x1_B0(0,0,0))) +
      4.59809891976409e-17*pow(-x1b0 + x1_B0(0,0,0), 46) + 106.798206976883*pow(-x1b0 + x1_B0(0,0,0), 7) +
      1.13945215715473e-13*pow(-x1b0 + x1_B0(0,0,0), 39) + 1.88440944846914e-9*pow(-x1b0 + x1_B0(0,0,0), 30) +
      3.56784251922739e-14*pow(-x1b0 + x1_B0(0,0,0), 40) + 4.48267919188329e-15*pow(-x1b0 + x1_B0(0,0,0), 41) +
      1.29269067217077*pow(-x1b0 + x1_B0(0,0,0), 12) + 5.32009883926374e-6*pow(-x1b0 + x1_B0(0,0,0), 23) +
      1.6473496712188e-10*pow(-x1b0 + x1_B0(0,0,0), 32) + 46.9378790872307*((-x1b0 + x1_B0(0,0,0))*(-x1b0 +
      x1_B0(0,0,0))*(-x1b0 + x1_B0(0,0,0))*(-x1b0 + x1_B0(0,0,0))*(-x1b0 + x1_B0(0,0,0))) +
      2.15964598199211e-17*pow(-x1b0 + x1_B0(0,0,0), 47) + 0.102651374984683*pow(-x1b0 + x1_B0(0,0,0), 13) +
      7.17725114790715e-19*pow(-x1b0 + x1_B0(0,0,0), 48) + 2.05024935812524*x1_B0(0,0,0) + 9.49612671418929e-6*pow(-x1b0
      + x1_B0(0,0,0), 22) + 0.000317059482148274*pow(-x1b0 + x1_B0(0,0,0), 18) + 1.28936933269874e-9*pow(-x1b0 +
      x1_B0(0,0,0), 29) + 47.8727521899196*pow(-x1b0 + x1_B0(0,0,0), 9) + 1.83428307256478e-13*pow(-x1b0 + x1_B0(0,0,0),
      38) + 7.64013784306924e-10*pow(-x1b0 + x1_B0(0,0,0), 31) + 0.00771039683062334*pow(-x1b0 + x1_B0(0,0,0), 16) -
      1.17265973151944e-8*pow(-x1b0 + x1_B0(0,0,0), 28) - 0.000143684368129509*pow(-x1b0 + x1_B0(0,0,0), 20) -
      2.51082669028969e-12*pow(-x1b0 + x1_B0(0,0,0), 36) - 0.0246146045867451*pow(-x1b0 + x1_B0(0,0,0), 15) -
      4.55622612463197e-16*pow(-x1b0 + x1_B0(0,0,0), 44) - 1.96430537028968e-15*pow(-x1b0 + x1_B0(0,0,0), 42) -
      9.44281664519408e-12*pow(-x1b0 + x1_B0(0,0,0), 35) - 84.5681303070986*((-x1b0 + x1_B0(0,0,0))*(-x1b0 +
      x1_B0(0,0,0))*(-x1b0 + x1_B0(0,0,0))*(-x1b0 + x1_B0(0,0,0))*(-x1b0 + x1_B0(0,0,0))*(-x1b0 + x1_B0(0,0,0))) -
      1.44001928819117*pow(-x1b0 + x1_B0(0,0,0), 11) - 1.98173210640844e-13*pow(-x1b0 + x1_B0(0,0,0), 37) -
      2.65217092754297e-17*pow(-x1b0 + x1_B0(0,0,0), 45) - 0.120385321073237*pow(-x1b0 + x1_B0(0,0,0), 14) -
      2.05024935812524*x1b0 - 6.24393412081567e-8*pow(-x1b0 + x1_B0(0,0,0), 27) - 7.08593619960348e-8*pow(-x1b0 +
      x1_B0(0,0,0), 25) - 19.1007567533831*((-x1b0 + x1_B0(0,0,0))*(-x1b0 + x1_B0(0,0,0))*(-x1b0 + x1_B0(0,0,0))*(-x1b0
      + x1_B0(0,0,0))) - 1.56334527334028e-7*pow(-x1b0 + x1_B0(0,0,0), 26) - 1.97339352432104e-11*pow(-x1b0 +
      x1_B0(0,0,0), 34) - 0.000339492035668327*pow(-x1b0 + x1_B0(0,0,0), 19) - 90.7863941840339*pow(-x1b0 +
      x1_B0(0,0,0), 8) - 11.7554324649808*pow(-x1b0 + x1_B0(0,0,0), 10) - 1.47209354527087e-15*pow(-x1b0 + x1_B0(0,0,0),
      43) - 3.18670975682644e-12*pow(-x1b0 + x1_B0(0,0,0), 33) - 3.5336751116391*((-x1b0 + x1_B0(0,0,0))*(-x1b0 +
      x1_B0(0,0,0))) - 3.25915893392336e-18*pow(-x1b0 + x1_B0(0,0,0), 49) - 1.50299675417126e-5*pow(-x1b0 +
      x1_B0(0,0,0), 21)
)
: (
   1.00000100762179
));

   rho = 1.0/T;

   rho_B0(0,0,0) = rho;

   rhou0_B0(0,0,0) = rhou0;

   rhou1_B0(0,0,0) = rhou1;

   rhoE_B0(0,0,0) = (0.5*(rhou0*rhou0) + 0.5*(rhou1*rhou1))/rho + invgama_sycl[0]*inv2Minf_sycl[0]*inv_gamma_m1_sycl[0]*T*rho;

   rhou2_B0(0,0,0) = 0.0;


        }
      });
    });
  }
  if (block->instance->OPS_diags > 1) {
    block->instance->sycl_instance->queue->wait();
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[0].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 9);
  ops_set_halo_dirtybit3(&args[0],range);
  ops_set_halo_dirtybit3(&args[1],range);
  ops_set_halo_dirtybit3(&args[2],range);
  ops_set_halo_dirtybit3(&args[3],range);
  ops_set_halo_dirtybit3(&args[4],range);
  ops_set_halo_dirtybit3(&args[5],range);
  ops_set_halo_dirtybit3(&args[6],range);
  ops_set_halo_dirtybit3(&args[7],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[0].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg7);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel067(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)calloc(1,sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 1;
  desc->index = 0;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 0;
  for ( int i=0; i<6; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 9;
  desc->args = (ops_arg*)ops_malloc(9*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg2.dat->index;
  desc->args[3] = arg3;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg3.dat->index;
  desc->args[4] = arg4;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg4.dat->index;
  desc->args[5] = arg5;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg5.dat->index;
  desc->args[6] = arg6;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg6.dat->index;
  desc->args[7] = arg7;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg7.dat->index;
  desc->args[8] = arg8;
  desc->function = ops_par_loop_opensbliblock00Kernel067_execute;
  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,0,"opensbliblock00Kernel067");
  }
  ops_enqueue_kernel(desc);
}
#endif
