//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel067(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5) {
#else
void ops_par_loop_opensbliblock00Kernel067_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[6] = { arg0, arg1, arg2, arg3, arg4,
 arg5};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,6,range,0)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,0,"opensbliblock00Kernel067");
    block->instance->OPS_kernels[0].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "opensbliblock00Kernel067");
  #endif


  //compute locally allocated range for the sub-block
  int start[3];
  int end[3];
  #if defined(OPS_MPI) && !defined(OPS_LAZY)
  int arg_idx[3];
  #endif
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<3; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 6,block, range, start, end, arg_idx) < 0) return;
  #endif


  //initialize global variable with the dimension of dats
  int xdim0_opensbliblock00Kernel067 = args[0].dat->size[0];
  int ydim0_opensbliblock00Kernel067 = args[0].dat->size[1];
  int xdim1_opensbliblock00Kernel067 = args[1].dat->size[0];
  int ydim1_opensbliblock00Kernel067 = args[1].dat->size[1];
  int xdim2_opensbliblock00Kernel067 = args[2].dat->size[0];
  int ydim2_opensbliblock00Kernel067 = args[2].dat->size[1];
  int xdim3_opensbliblock00Kernel067 = args[3].dat->size[0];
  int ydim3_opensbliblock00Kernel067 = args[3].dat->size[1];
  int xdim4_opensbliblock00Kernel067 = args[4].dat->size[0];
  int ydim4_opensbliblock00Kernel067 = args[4].dat->size[1];
  int xdim5_opensbliblock00Kernel067 = args[5].dat->size[0];
  int ydim5_opensbliblock00Kernel067 = args[5].dat->size[1];

  //set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset/sizeof(double);
  double* x1_B0_p = (double*)args[0].data_d;

  int base1 = args[1].dat->base_offset/sizeof(double);
  double* rhoE_B0_p = (double*)args[1].data_d;

  int base2 = args[2].dat->base_offset/sizeof(double);
  double* rho_B0_p = (double*)args[2].data_d;

  int base3 = args[3].dat->base_offset/sizeof(double);
  double* rhou0_B0_p = (double*)args[3].data_d;

  int base4 = args[4].dat->base_offset/sizeof(double);
  double* rhou1_B0_p = (double*)args[4].data_d;

  int base5 = args[5].dat->base_offset/sizeof(double);
  double* rhou2_B0_p = (double*)args[5].data_d;



  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_device(args, 6);
  ops_halo_exchanges(args,6,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[0].mpi_time += __t1-__t2;
  }

  int start_0 = start[0];
  int end_0 = end[0];
  int start_1 = start[1];
  int end_1 = end[1];
  int start_2 = start[2];
  int end_2 = end[2];
  if ((end[0]-start[0])>0 && (end[1]-start[1])>0 && (end[2]-start[2])>0) {
    block->instance->sycl_instance->queue->submit([&](cl::sycl::handler &cgh) {

      auto inv2Minf_sycl = (*inv2Minf_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto inv_gamma_m1_sycl = (*inv_gamma_m1_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto invgama_sycl = (*invgama_p).template get_access<cl::sycl::access::mode::read>(cgh);

      cgh.parallel_for<class opensbliblock00Kernel067_kernel>(cl::sycl::nd_range<3>(cl::sycl::range<3>(
           ((end[2]-start[2]-1)/block->instance->OPS_block_size_z+1)*block->instance->OPS_block_size_z,
           ((end[1]-start[1]-1)/block->instance->OPS_block_size_y+1)*block->instance->OPS_block_size_y,
            ((end[0]-start[0]-1)/block->instance->OPS_block_size_x+1)*block->instance->OPS_block_size_x
             ),cl::sycl::range<3>(
             block->instance->OPS_block_size_z,
             block->instance->OPS_block_size_y,
      block->instance->OPS_block_size_x
             ))
      , [=](cl::sycl::nd_item<3> item
      ) [[intel::kernel_args_restrict]] {
        int n_z = item.get_global_id(0)+start_2;
        int n_y = item.get_global_id(1)+start_1;
        int n_x = item.get_global_id(2)+start_0;
        const ACC<double> x1_B0(xdim0_opensbliblock00Kernel067, ydim0_opensbliblock00Kernel067, &x1_B0_p[0] + base0 + n_x*1 + n_y * xdim0_opensbliblock00Kernel067*1 + n_z * xdim0_opensbliblock00Kernel067 * ydim0_opensbliblock00Kernel067*1);
        ACC<double> rhoE_B0(xdim1_opensbliblock00Kernel067, ydim1_opensbliblock00Kernel067, &rhoE_B0_p[0] + base1 + n_x*1 + n_y * xdim1_opensbliblock00Kernel067*1 + n_z * xdim1_opensbliblock00Kernel067 * ydim1_opensbliblock00Kernel067*1);
        ACC<double> rho_B0(xdim2_opensbliblock00Kernel067, ydim2_opensbliblock00Kernel067, &rho_B0_p[0] + base2 + n_x*1 + n_y * xdim2_opensbliblock00Kernel067*1 + n_z * xdim2_opensbliblock00Kernel067 * ydim2_opensbliblock00Kernel067*1);
        ACC<double> rhou0_B0(xdim3_opensbliblock00Kernel067, ydim3_opensbliblock00Kernel067, &rhou0_B0_p[0] + base3 + n_x*1 + n_y * xdim3_opensbliblock00Kernel067*1 + n_z * xdim3_opensbliblock00Kernel067 * ydim3_opensbliblock00Kernel067*1);
        ACC<double> rhou1_B0(xdim4_opensbliblock00Kernel067, ydim4_opensbliblock00Kernel067, &rhou1_B0_p[0] + base4 + n_x*1 + n_y * xdim4_opensbliblock00Kernel067*1 + n_z * xdim4_opensbliblock00Kernel067 * ydim4_opensbliblock00Kernel067*1);
        ACC<double> rhou2_B0(xdim5_opensbliblock00Kernel067, ydim5_opensbliblock00Kernel067, &rhou2_B0_p[0] + base5 + n_x*1 + n_y * xdim5_opensbliblock00Kernel067*1 + n_z * xdim5_opensbliblock00Kernel067 * ydim5_opensbliblock00Kernel067*1);
        //USER CODE
        if (n_x < end_0 && n_y < end_1 && n_z < end_2) {
          
   double T = 0.0;
   double rho = 0.0;
   double rhou0 = 0.0;
   double rhou1 = 0.0;
    rhou0 = ((x1_B0(0,0,0) < 2.17021702170217) ? (
   2.81010389851971e-5 + 0.000258737743233456*pow(x1_B0(0,0,0), 31) +
      4.98375780882643*pow(x1_B0(0,0,0), 17) + 46.3380290130478*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) +
      1.0333895093554e-10*pow(x1_B0(0,0,0), 50) + 4.28282939329779e-10*pow(x1_B0(0,0,0), 48) +
      5.22850584399414e-6*pow(x1_B0(0,0,0), 34) + 1.43718854519352e-8*pow(x1_B0(0,0,0), 42) +
      1.8547541840313e-9*pow(x1_B0(0,0,0), 46) + 6.72781567790938e-5*pow(x1_B0(0,0,0), 33) +
      2.22187110468707*pow(x1_B0(0,0,0), 19) +
      1147.15478094315*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) +
      2.35279475370142e-9*pow(x1_B0(0,0,0), 47) + 0.0803921016386592*pow(x1_B0(0,0,0), 24) +
      5524.3956002145*pow(x1_B0(0,0,0), 8) + 98.9277623702726*pow(x1_B0(0,0,0), 14) +
      4.00990549903238e-7*pow(x1_B0(0,0,0), 40) + 8.56758643526497*pow(x1_B0(0,0,0), 18) +
      4629.96901561542*pow(x1_B0(0,0,0), 10) + 0.0353770349616803*pow(x1_B0(0,0,0), 25) +
      1.60771345014203e-7*pow(x1_B0(0,0,0), 41) + 356.696450999847*pow(x1_B0(0,0,0), 13) +
      0.000184993148117286*pow(x1_B0(0,0,0), 32) + 0.0500445119961943*pow(x1_B0(0,0,0), 23) +
      0.227035822363302*x1_B0(0,0,0) + 0.23937525034725*(x1_B0(0,0,0)*x1_B0(0,0,0)) +
      4.67444287468597e-7*pow(x1_B0(0,0,0), 39) + 0.00388864591355403*pow(x1_B0(0,0,0), 26) -
      65.3071504106091*pow(x1_B0(0,0,0), 15) - 0.00143234489925906*pow(x1_B0(0,0,0), 29) -
      3067.46391238486*pow(x1_B0(0,0,0), 7) - 5.62506124019229e-9*pow(x1_B0(0,0,0), 45) -
      1316.18756210104*pow(x1_B0(0,0,0), 11) - 2.04355852847764e-8*pow(x1_B0(0,0,0), 44) -
      0.853133446916905*pow(x1_B0(0,0,0), 20) - 6.37366094013795e-10*pow(x1_B0(0,0,0), 49) -
      0.86439807544192*pow(x1_B0(0,0,0), 21) - 3.35744184755943e-6*pow(x1_B0(0,0,0), 37) -
      2.7539573405103e-8*pow(x1_B0(0,0,0), 43) - 0.2508740192631*pow(x1_B0(0,0,0), 22) -
      0.00399141128301512*pow(x1_B0(0,0,0), 28) - 32.9933942229683*pow(x1_B0(0,0,0), 16) -
      4.41300189027872*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) - 8.51708676941751e-6*pow(x1_B0(0,0,0), 36) -
      286.735004996588*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) -
      7.06700139641158e-5*pow(x1_B0(0,0,0), 30) - 0.00512050445489821*pow(x1_B0(0,0,0), 27) -
      1.09743822762142e-5*pow(x1_B0(0,0,0), 35) - 6536.11090250494*pow(x1_B0(0,0,0), 9) -
      4.02401023959351e-7*pow(x1_B0(0,0,0), 38) - 508.28708953557*pow(x1_B0(0,0,0), 12)
)
: (
   0.999998734882134
));

    rhou1 = ((x1_B0(0,0,0) < 2.17021702170217) ? (
   2.82817613340751e-7 + 3.00069748306785*pow(x1_B0(0,0,0), 13) +
      3.29634329514111e-9*pow(x1_B0(0,0,0), 39) + 6.43176358402055e-8*pow(x1_B0(0,0,0), 34) +
      0.0719328435513006*pow(x1_B0(0,0,0), 18) + 0.00306829933173168*(x1_B0(0,0,0)*x1_B0(0,0,0)) +
      1.79752669949226e-11*pow(x1_B0(0,0,0), 47) + 0.000303180500902988*pow(x1_B0(0,0,0), 25) +
      0.000303628685654251*pow(x1_B0(0,0,0), 23) + 0.000643835477160246*pow(x1_B0(0,0,0), 24) +
      1.29123738896072e-11*pow(x1_B0(0,0,0), 46) + 0.926207026116516*pow(x1_B0(0,0,0), 14) +
      0.0325816261906945*pow(x1_B0(0,0,0), 17) + 5.69161722001747e-7*pow(x1_B0(0,0,0), 33) +
      40.727215065294*pow(x1_B0(0,0,0), 10) + 1.49970339265156e-10*pow(x1_B0(0,0,0), 42) +
      0.0206848008504698*pow(x1_B0(0,0,0), 19) +
      10.7696039164977*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) +
      1.30028868737458e-9*pow(x1_B0(0,0,0), 41) + 4.32839523218191e-5*pow(x1_B0(0,0,0), 26) +
      1.47355545429578e-6*pow(x1_B0(0,0,0), 32) + 50.4891891670758*pow(x1_B0(0,0,0), 8) +
      3.09019485950549e-9*pow(x1_B0(0,0,0), 40) + 7.69023869513787e-13*pow(x1_B0(0,0,0), 50) +
      0.446266646253751*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) + 3.50287327188351e-12*pow(x1_B0(0,0,0),
      48) + 1.89880112548896e-6*pow(x1_B0(0,0,0), 31) - 4.82762092572984e-12*pow(x1_B0(0,0,0), 49) -
      6.65596417385672e-8*pow(x1_B0(0,0,0), 36) - 4.10394544994085e-9*pow(x1_B0(0,0,0), 38) -
      10.9786556789182*pow(x1_B0(0,0,0), 11) - 0.00718762652346875*pow(x1_B0(0,0,0), 21) -
      1.57870966013949e-10*pow(x1_B0(0,0,0), 44) - 0.0441395324600665*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) -
      2.76592411395917e-8*pow(x1_B0(0,0,0), 37) - 3.21928824633068e-5*pow(x1_B0(0,0,0), 28) -
      0.532007784737155*pow(x1_B0(0,0,0), 15) - 1.09456857742777e-6*pow(x1_B0(0,0,0), 30) -
      0.00228277091663732*pow(x1_B0(0,0,0), 22) - 4.69635261820028*pow(x1_B0(0,0,0), 12) -
      0.293735370266727*pow(x1_B0(0,0,0), 16) - 3.74710670988207e-5*pow(x1_B0(0,0,0), 27) -
      7.87375429375163e-8*pow(x1_B0(0,0,0), 35) -
      2.72535329318167*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) -
      4.60192702489543e-11*pow(x1_B0(0,0,0), 45) - 0.00617680178429212*pow(x1_B0(0,0,0), 20) -
      1.23437927185694e-5*pow(x1_B0(0,0,0), 29) - 1.99958852532155e-10*pow(x1_B0(0,0,0), 43) -
      5.35924833912234e-5*x1_B0(0,0,0) - 28.4299942223701*pow(x1_B0(0,0,0), 7) - 58.7711331658444*pow(x1_B0(0,0,0),
      9)
)
: (
   0.00614799599116637
));

    T = ((x1_B0(0,0,0) < 2.17021702170217) ? (
   3.68605089828999 + 1.80715648140096e-6*pow(x1_B0(0,0,0), 34) +
      1.92138319484046*pow(x1_B0(0,0,0), 16) + 4.63665272701483e-7*pow(x1_B0(0,0,0), 37) +
      331.618666143632*pow(x1_B0(0,0,0), 9) + 2.90091822544828e-6*pow(x1_B0(0,0,0), 35) +
      0.217301617917934*pow(x1_B0(0,0,0), 20) + 8.16251202121809e-10*pow(x1_B0(0,0,0), 45) +
      0.109977216596455*pow(x1_B0(0,0,0), 21) + 1.71710324090264e-9*pow(x1_B0(0,0,0), 42) +
      0.000131752731338234*pow(x1_B0(0,0,0), 29) + 0.0084769063463692*pow(x1_B0(0,0,0), 22) +
      4.05432815306889e-9*pow(x1_B0(0,0,0), 44) + 1.37372286203052e-10*pow(x1_B0(0,0,0), 49) +
      9.56151850489785*pow(x1_B0(0,0,0), 15) + 163.034174400889*pow(x1_B0(0,0,0), 11) +
      0.000630724424367844*pow(x1_B0(0,0,0), 28) + 0.00126741777326377*pow(x1_B0(0,0,0), 27) +
      10.7281471761936*pow(x1_B0(0,0,0), 12) + 0.000815009923807171*pow(x1_B0(0,0,0), 26) +
      1.60339491429422e-6*pow(x1_B0(0,0,0), 36) +
      0.425677490281615*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) + 6.96438006151769e-9*pow(x1_B0(0,0,0),
      43) + 63.8937461954963*pow(x1_B0(0,0,0), 7) - 5.32742143961743e-10*pow(x1_B0(0,0,0), 46) -
      41.2376244814332*pow(x1_B0(0,0,0), 13) - 2.38482023407732e-11*pow(x1_B0(0,0,0), 50) -
      0.0132079585933898*pow(x1_B0(0,0,0), 24) - 3.76567001817271e-8*pow(x1_B0(0,0,0), 38) -
      7.49525550443683e-6*pow(x1_B0(0,0,0), 33) - 6.34260724971002e-5*pow(x1_B0(0,0,0), 31) -
      4.89622112477326e-10*pow(x1_B0(0,0,0), 47) - 0.000267085153722792*x1_B0(0,0,0) -
      0.0198284052280911*pow(x1_B0(0,0,0), 23) - 8.05564185940929e-8*pow(x1_B0(0,0,0), 40) -
      191.389275870438*pow(x1_B0(0,0,0), 8) -
      0.818003904068274*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) -
      1.6711188007954*pow(x1_B0(0,0,0), 17) - 2.50774292485242e-8*pow(x1_B0(0,0,0), 41) -
      0.00343904081280767*pow(x1_B0(0,0,0), 25) - 1.00600185518784*pow(x1_B0(0,0,0), 18) -
      3.15023994116191e-5*pow(x1_B0(0,0,0), 32) - 6.22796253473077e-11*pow(x1_B0(0,0,0), 48) -
      1.30039810614719e-7*pow(x1_B0(0,0,0), 39) - 0.573240081868493*pow(x1_B0(0,0,0), 14) -
      9.40092306564485*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) -
      335.239281059585*pow(x1_B0(0,0,0), 10) - 0.0208953606212575*pow(x1_B0(0,0,0), 19) -
      1.68196681552788*(x1_B0(0,0,0)*x1_B0(0,0,0)) - 5.15742912986645e-5*pow(x1_B0(0,0,0), 30) -
      0.121834013608489*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0))
)
: (
   1.00000126346731
));

   rho = 1.0/T;

   rho_B0(0,0,0) = rho;

   rhou0_B0(0,0,0) = rhou0;

   rhou1_B0(0,0,0) = rhou1;

   rhoE_B0(0,0,0) = (0.5*(rhou0*rhou0) + 0.5*(rhou1*rhou1))/rho + invgama_sycl[0]*inv2Minf_sycl[0]*inv_gamma_m1_sycl[0]*T*rho;

   rhou2_B0(0,0,0) = 0.0;


        }
      });
    });
  }
  if (block->instance->OPS_diags > 1) {
    block->instance->sycl_instance->queue->wait();
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[0].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 6);
  ops_set_halo_dirtybit3(&args[1],range);
  ops_set_halo_dirtybit3(&args[2],range);
  ops_set_halo_dirtybit3(&args[3],range);
  ops_set_halo_dirtybit3(&args[4],range);
  ops_set_halo_dirtybit3(&args[5],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[0].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg5);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel067(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)calloc(1,sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 1;
  desc->index = 0;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 0;
  for ( int i=0; i<6; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 6;
  desc->args = (ops_arg*)ops_malloc(6*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg2.dat->index;
  desc->args[3] = arg3;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg3.dat->index;
  desc->args[4] = arg4;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg4.dat->index;
  desc->args[5] = arg5;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg5.dat->index;
  desc->function = ops_par_loop_opensbliblock00Kernel067_execute;
  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,0,"opensbliblock00Kernel067");
  }
  ops_enqueue_kernel(desc);
}
#endif
