//
// auto-generated by ops.py
//
__constant__ int dims_opensbliblock00Kernel066 [7][1];
static int dims_opensbliblock00Kernel066_h [7][1] = {{0}};

//user function
__device__

 void opensbliblock00Kernel066_gpu(ACC<double> &rhoE_B0,
  ACC<double> &rho_B0,
  ACC<double> &rhou0_B0,
  ACC<double> &rhou1_B0,
  ACC<double> &x0_B0,
  ACC<double> &x1_B0,
  const int *idx)
{
   double T = 0.0;
   double rho = 0.0;
   double rhou0 = 0.0;
   double rhou1 = 0.0;
   x0_B0(0,0) = Delta0block0*idx[0];

    x1_B0(0,0) = ((1.0/20.0))*H*exp(-((-(1.0/2.0)*L + Delta0block0*idx[0])*(-(1.0/2.0)*L + Delta0block0*idx[0]))*inv2a)
      + (-(1.0/20.0)*H*exp(-((-(1.0/2.0)*L + Delta0block0*idx[0])*(-(1.0/2.0)*L + Delta0block0*idx[0]))*inv2a) +
      H)*sinh(b*invH*Delta1block0*idx[1])/sinh(b);

    rhou0 = ((x1_B0(0,0) < 4.97849784978498) ? (
   -7.41941930010003e-7 +
      0.0702998718847976*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) + 7.18167765690484e-18*pow(x1_B0(0,0),
      30) + 6.52081582647558e-29*pow(x1_B0(0,0), 46) + 9.38028223360571e-27*pow(x1_B0(0,0), 42) +
      0.000194792573175358*pow(x1_B0(0,0), 12) + 1.12043698196112e-31*pow(x1_B0(0,0), 50) +
      7.68686957191781e-24*pow(x1_B0(0,0), 39) + 5.32451447484593e-13*pow(x1_B0(0,0), 24) +
      1.29633439125235e-19*pow(x1_B0(0,0), 33) + 4.74254918141768e-18*pow(x1_B0(0,0), 31) +
      2.6287187207503e-30*pow(x1_B0(0,0), 48) + 3.83534437634266e-13*pow(x1_B0(0,0), 22) +
      3.82234258854463e-25*pow(x1_B0(0,0), 41) + 0.0302099908066949*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) +
      1.54982672776573e-5*pow(x1_B0(0,0), 13) + 0.540592214726103*x1_B0(0,0) + 2.21684737623679e-12*pow(x1_B0(0,0), 23)
      + 1.07878131234318e-18*pow(x1_B0(0,0), 32) + 7.53766051751155e-8*pow(x1_B0(0,0), 16) +
      3.39940142735353e-29*pow(x1_B0(0,0), 47) + 2.42157434344217e-24*pow(x1_B0(0,0), 40) +
      0.0264087629763092*pow(x1_B0(0,0), 9) + 0.10715974820739*pow(x1_B0(0,0), 7) + 6.69960518963089e-9*pow(x1_B0(0,0),
      18) + 5.41899161304538e-8*pow(x1_B0(0,0), 17) + 5.39531970041199e-14*pow(x1_B0(0,0), 25) -
      5.84855380280961e-11*pow(x1_B0(0,0), 21) - 1.64621110441516e-30*pow(x1_B0(0,0), 49) -
      3.69222876245266e-21*pow(x1_B0(0,0), 34) - 0.0683341460031057*pow(x1_B0(0,0), 8) -
      1.1809687959798e-6*pow(x1_B0(0,0), 15) - 6.73297537496869e-10*pow(x1_B0(0,0), 19) -
      0.000362812486830577*pow(x1_B0(0,0), 11) - 5.53370487266404e-15*pow(x1_B0(0,0), 26) -
      6.03589416513345e-21*pow(x1_B0(0,0), 35) - 0.000950998267615592*(x1_B0(0,0)*x1_B0(0,0)) -
      3.46122952259431e-15*pow(x1_B0(0,0), 27) - 1.30849735600479e-26*pow(x1_B0(0,0), 43) -
      4.38641486699734e-28*pow(x1_B0(0,0), 45) - 2.34822390858796e-22*pow(x1_B0(0,0), 37) -
      0.00454250288677354*pow(x1_B0(0,0), 10) - 3.88827993364993e-27*pow(x1_B0(0,0), 44) -
      7.23772441009599e-17*pow(x1_B0(0,0), 29) - 5.3237745663231e-24*pow(x1_B0(0,0), 38) -
      3.79937207806794e-10*pow(x1_B0(0,0), 20) - 0.0512693405586304*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) -
      6.26881111654665e-6*pow(x1_B0(0,0), 14) - 7.31743676994503e-16*pow(x1_B0(0,0), 28) -
      0.109003949350348*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) -
      1.61178324671602e-21*pow(x1_B0(0,0), 36)
)
: (
   0.999999842649273
));

    rhou1 = ((x1_B0(0,0) < 4.97849784978498) ? (
   -3.94658323897361e-9 + 5.79993249696948e-22*pow(x1_B0(0,0), 33) +
      2.44055988685779e-33*pow(x1_B0(0,0), 48) + 0.000573202174246203*(x1_B0(0,0)*x1_B0(0,0)) +
      7.79946640271148e-17*pow(x1_B0(0,0), 26) + 3.27563339969449e-5*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) +
      7.61209051437519e-30*pow(x1_B0(0,0), 41) + 0.00035693337650302*pow(x1_B0(0,0), 7) +
      1.22962435183981e-32*pow(x1_B0(0,0), 49) + 6.1414093137816e-5*pow(x1_B0(0,0), 9) +
      3.49814319225234e-24*pow(x1_B0(0,0), 36) + 6.23335129292759e-14*pow(x1_B0(0,0), 20) +
      8.70881890213734e-18*pow(x1_B0(0,0), 27) + 5.48056979026477e-12*pow(x1_B0(0,0), 19) +
      1.0172618086783e-7*pow(x1_B0(0,0), 13) + 2.06327508183138e-7*pow(x1_B0(0,0), 12) +
      2.97281470391138e-11*pow(x1_B0(0,0), 17) + 4.65221363803475e-16*pow(x1_B0(0,0), 24) +
      3.09277299287709e-11*pow(x1_B0(0,0), 18) + 2.75186147372725e-7*x1_B0(0,0) + 1.18177573978108e-28*pow(x1_B0(0,0),
      43) + 1.71253750482416e-29*pow(x1_B0(0,0), 44) + 3.71166058814094e-23*pow(x1_B0(0,0), 35) +
      1.38514045567658e-9*pow(x1_B0(0,0), 14) + 3.44944221330867e-16*pow(x1_B0(0,0), 25) +
      1.96555809013582e-22*pow(x1_B0(0,0), 34) + 3.97089169302056e-28*pow(x1_B0(0,0), 42) +
      0.000242959875455792*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) -
      8.7519120641995e-5*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) -
      0.00039793643924863*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) -
      9.10594958621823e-31*pow(x1_B0(0,0), 46) - 4.43445911548498e-31*pow(x1_B0(0,0), 45) -
      4.97371458460559e-19*pow(x1_B0(0,0), 29) - 6.52066335608322e-10*pow(x1_B0(0,0), 16) -
      4.73305244459534e-22*pow(x1_B0(0,0), 32) - 2.25277482016107e-6*pow(x1_B0(0,0), 11) -
      2.76516592761355e-25*pow(x1_B0(0,0), 38) - 1.09002475409158e-33*pow(x1_B0(0,0), 50) -
      1.95075399259013e-13*pow(x1_B0(0,0), 21) - 1.26323734030157e-19*pow(x1_B0(0,0), 30) -
      6.76099331722506e-26*pow(x1_B0(0,0), 39) - 9.27905572763142e-27*pow(x1_B0(0,0), 40) -
      5.6461702353762e-15*pow(x1_B0(0,0), 23) - 0.000200823312226594*pow(x1_B0(0,0), 8) -
      3.80954768741463e-9*pow(x1_B0(0,0), 15) - 4.30246755563792e-25*pow(x1_B0(0,0), 37) -
      2.06347337828471e-31*pow(x1_B0(0,0), 47) - 4.28649333122532e-6*pow(x1_B0(0,0), 10) -
      5.33437215459437e-19*pow(x1_B0(0,0), 28) - 1.81626753556445e-20*pow(x1_B0(0,0), 31) -
      5.09795433916973e-14*pow(x1_B0(0,0), 22)
)
: (
   0.00213785003134369
));

    T = ((x1_B0(0,0) < 4.97849784978498) ? (
   1.12242490053894 + 1.29225326274941e-6*pow(x1_B0(0,0), 14) +
      2.17236497430641e-10*pow(x1_B0(0,0), 19) + 4.50574577850846e-27*pow(x1_B0(0,0), 43) +
      0.00282180425964036*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) + 3.76222555066597e-22*pow(x1_B0(0,0), 36) +
      6.65955133301817e-18*pow(x1_B0(0,0), 29) + 2.30617021068535e-15*pow(x1_B0(0,0), 26) +
      7.70280267944956e-11*pow(x1_B0(0,0), 20) + 1.81259903145525e-7*pow(x1_B0(0,0), 15) +
      8.00223672728653e-29*pow(x1_B0(0,0), 45) + 1.78962073305769e-21*pow(x1_B0(0,0), 35) +
      3.84549142547866e-21*pow(x1_B0(0,0), 34) + 8.75350019822885e-12*pow(x1_B0(0,0), 21) +
      3.67249635900726e-5*pow(x1_B0(0,0), 11) + 1.37496671799892e-16*pow(x1_B0(0,0), 28) +
      0.0100831916259726*pow(x1_B0(0,0), 8) + 1.04933317018195e-27*pow(x1_B0(0,0), 44) +
      5.26950183241014e-31*pow(x1_B0(0,0), 49) + 4.52450181023001e-27*pow(x1_B0(0,0), 42) +
      3.98437538886845e-23*pow(x1_B0(0,0), 37) + 0.000861772081218678*pow(x1_B0(0,0), 10) +
      0.0141132088196808*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) +
      8.24657623407878e-16*pow(x1_B0(0,0), 27) - 5.46428805163207e-15*pow(x1_B0(0,0), 25) -
      9.91575579450583e-14*pow(x1_B0(0,0), 24) - 3.65124043284557e-5*pow(x1_B0(0,0), 12) -
      3.99968686240556e-32*pow(x1_B0(0,0), 50) - 8.82398202472746e-10*pow(x1_B0(0,0), 18) -
      2.77000372137195e-29*pow(x1_B0(0,0), 46) - 0.00429820278269872*pow(x1_B0(0,0), 9) -
      6.30264766496525e-25*pow(x1_B0(0,0), 40) -
      0.00610131439972079*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) -
      1.01009022778586e-29*pow(x1_B0(0,0), 47) - 0.0147954603501481*pow(x1_B0(0,0), 7) -
      3.35808971801242e-24*pow(x1_B0(0,0), 38) - 2.22154338536034e-19*pow(x1_B0(0,0), 32) -
      5.28761809585516e-13*pow(x1_B0(0,0), 23) - 0.0381899592598816*(x1_B0(0,0)*x1_B0(0,0)) -
      4.82860723859879e-31*pow(x1_B0(0,0), 48) - 1.66401488627162e-20*pow(x1_B0(0,0), 33) -
      1.04572024952381e-8*pow(x1_B0(0,0), 17) - 1.22913435598771e-18*pow(x1_B0(0,0), 31) -
      7.58714724276801e-26*pow(x1_B0(0,0), 41) - 5.9274338700261e-6*x1_B0(0,0) - 2.61056060757001e-24*pow(x1_B0(0,0),
      39) - 1.57177066782746e-6*pow(x1_B0(0,0), 13) - 2.49747678457236e-8*pow(x1_B0(0,0), 16) -
      0.000832123825797214*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) - 8.4993374244129e-13*pow(x1_B0(0,0), 22) -
      3.4063316158351e-18*pow(x1_B0(0,0), 30)
)
: (
   1.00000015154315
));

   rho = 1.0/T;

   rho_B0(0,0) = rho;

   rhou0_B0(0,0) = rhou0;

   rhou1_B0(0,0) = rhou1;

   rhoE_B0(0,0) = (0.5*(rhou0*rhou0) + 0.5*(rhou1*rhou1))/rho + invgama*inv2Minf*inv_gamma_m1*T*rho;

}



__global__ void ops_opensbliblock00Kernel066(
double* __restrict arg0,
double* __restrict arg1,
double* __restrict arg2,
double* __restrict arg3,
double* __restrict arg4,
double* __restrict arg5,
int arg_idx0, int arg_idx1,
int size0,
int size1 ){


  int idx_y = blockDim.y * blockIdx.y + threadIdx.y;
  int idx_x = blockDim.x * blockIdx.x + threadIdx.x;

  int arg_idx[2];
  arg_idx[0] = arg_idx0+idx_x;
  arg_idx[1] = arg_idx1+idx_y;
  arg0 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel066[0][0];
  arg1 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel066[1][0];
  arg2 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel066[2][0];
  arg3 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel066[3][0];
  arg4 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel066[4][0];
  arg5 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel066[5][0];

  if (idx_x < size0 && idx_y < size1) {
    ACC<double> argp0(dims_opensbliblock00Kernel066[0][0], arg0);
    ACC<double> argp1(dims_opensbliblock00Kernel066[1][0], arg1);
    ACC<double> argp2(dims_opensbliblock00Kernel066[2][0], arg2);
    ACC<double> argp3(dims_opensbliblock00Kernel066[3][0], arg3);
    ACC<double> argp4(dims_opensbliblock00Kernel066[4][0], arg4);
    ACC<double> argp5(dims_opensbliblock00Kernel066[5][0], arg5);
    opensbliblock00Kernel066_gpu(
     argp0, argp1, argp2, argp3, argp4,
     argp5, arg_idx);
  }

}

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel066(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6) {
#else
void ops_par_loop_opensbliblock00Kernel066_execute(ops_kernel_descriptor *desc) {
  int dim = desc->dim;
  #if OPS_MPI
  ops_block block = desc->block;
  #endif
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  #endif

  //Timing
  double t1,t2,c1,c2;

  ops_arg args[7] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6};


  #if CHECKPOINTING && !OPS_LAZY
  if (!ops_checkpointing_before(args,7,range,0)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,0,"opensbliblock00Kernel066");
    block->instance->OPS_kernels[0].count++;
    ops_timers_core(&c1,&t1);
  }

  //compute locally allocated range for the sub-block
  int start[2];
  int end[2];

  int arg_idx[2];
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<2; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 7,block, range, start, end, arg_idx) < 0) return;
  #endif

  #if defined(OPS_MPI)
  #if defined(OPS_LAZY)
  sub_block_list sb = OPS_sub_block_list[block->index];
  arg_idx[0] = sb->decomp_disp[0]+start[0];
  arg_idx[1] = sb->decomp_disp[1]+start[1];
  #endif
  #else //OPS_MPI
  arg_idx[0] = start[0];
  arg_idx[1] = start[1];
  #endif //OPS_MPI
  int xdim0 = args[0].dat->size[0];
  int xdim1 = args[1].dat->size[0];
  int xdim2 = args[2].dat->size[0];
  int xdim3 = args[3].dat->size[0];
  int xdim4 = args[4].dat->size[0];
  int xdim5 = args[5].dat->size[0];

  if (xdim0 != dims_opensbliblock00Kernel066_h[0][0] || xdim1 != dims_opensbliblock00Kernel066_h[1][0] || xdim2 != dims_opensbliblock00Kernel066_h[2][0] || xdim3 != dims_opensbliblock00Kernel066_h[3][0] || xdim4 != dims_opensbliblock00Kernel066_h[4][0] || xdim5 != dims_opensbliblock00Kernel066_h[5][0]) {
    dims_opensbliblock00Kernel066_h[0][0] = xdim0;
    dims_opensbliblock00Kernel066_h[1][0] = xdim1;
    dims_opensbliblock00Kernel066_h[2][0] = xdim2;
    dims_opensbliblock00Kernel066_h[3][0] = xdim3;
    dims_opensbliblock00Kernel066_h[4][0] = xdim4;
    dims_opensbliblock00Kernel066_h[5][0] = xdim5;
    hipSafeCall(block->instance->ostream(), hipMemcpyToSymbol( dims_opensbliblock00Kernel066, dims_opensbliblock00Kernel066_h, sizeof(dims_opensbliblock00Kernel066)));
  }



  int x_size = MAX(0,end[0]-start[0]);
  int y_size = MAX(0,end[1]-start[1]);

  dim3 grid( (x_size-1)/block->instance->OPS_block_size_x+ 1, (y_size-1)/block->instance->OPS_block_size_y + 1, 1);
  dim3 tblock(block->instance->OPS_block_size_x,block->instance->OPS_block_size_y,block->instance->OPS_block_size_z);



  long long int dat0 = (block->instance->OPS_soa ? args[0].dat->type_size : args[0].dat->elem_size);
  long long int dat1 = (block->instance->OPS_soa ? args[1].dat->type_size : args[1].dat->elem_size);
  long long int dat2 = (block->instance->OPS_soa ? args[2].dat->type_size : args[2].dat->elem_size);
  long long int dat3 = (block->instance->OPS_soa ? args[3].dat->type_size : args[3].dat->elem_size);
  long long int dat4 = (block->instance->OPS_soa ? args[4].dat->type_size : args[4].dat->elem_size);
  long long int dat5 = (block->instance->OPS_soa ? args[5].dat->type_size : args[5].dat->elem_size);

  char *p_a[7];

  //set up initial pointers
  long long int base0 = args[0].dat->base_offset + 
           dat0 * 1 * (start[0] * args[0].stencil->stride[0]);
  base0 = base0+ dat0 *
    args[0].dat->size[0] *
    (start[1] * args[0].stencil->stride[1]);
  p_a[0] = (char *)args[0].data_d + base0;

  long long int base1 = args[1].dat->base_offset + 
           dat1 * 1 * (start[0] * args[1].stencil->stride[0]);
  base1 = base1+ dat1 *
    args[1].dat->size[0] *
    (start[1] * args[1].stencil->stride[1]);
  p_a[1] = (char *)args[1].data_d + base1;

  long long int base2 = args[2].dat->base_offset + 
           dat2 * 1 * (start[0] * args[2].stencil->stride[0]);
  base2 = base2+ dat2 *
    args[2].dat->size[0] *
    (start[1] * args[2].stencil->stride[1]);
  p_a[2] = (char *)args[2].data_d + base2;

  long long int base3 = args[3].dat->base_offset + 
           dat3 * 1 * (start[0] * args[3].stencil->stride[0]);
  base3 = base3+ dat3 *
    args[3].dat->size[0] *
    (start[1] * args[3].stencil->stride[1]);
  p_a[3] = (char *)args[3].data_d + base3;

  long long int base4 = args[4].dat->base_offset + 
           dat4 * 1 * (start[0] * args[4].stencil->stride[0]);
  base4 = base4+ dat4 *
    args[4].dat->size[0] *
    (start[1] * args[4].stencil->stride[1]);
  p_a[4] = (char *)args[4].data_d + base4;

  long long int base5 = args[5].dat->base_offset + 
           dat5 * 1 * (start[0] * args[5].stencil->stride[0]);
  base5 = base5+ dat5 *
    args[5].dat->size[0] *
    (start[1] * args[5].stencil->stride[1]);
  p_a[5] = (char *)args[5].data_d + base5;


  #ifndef OPS_LAZY
  ops_H_D_exchanges_device(args, 7);
  ops_halo_exchanges(args,7,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[0].mpi_time += t2-t1;
  }


  //call kernel wrapper function, passing in pointers to data
  if (x_size > 0 && y_size > 0)
    ops_opensbliblock00Kernel066<<<grid, tblock >>> ( 
     (double *)p_a[0], (double *)p_a[1],
     (double *)p_a[2], (double *)p_a[3],
     (double *)p_a[4], (double *)p_a[5],
     arg_idx[0], arg_idx[1],
    x_size, y_size);

  hipSafeCall(block->instance->ostream(), hipGetLastError());

  if (block->instance->OPS_diags>1) {
    hipSafeCall(block->instance->ostream(), hipDeviceSynchronize());
    ops_timers_core(&c1,&t1);
    block->instance->OPS_kernels[0].time += t1-t2;
  }

  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 7);
  ops_set_halo_dirtybit3(&args[0],range);
  ops_set_halo_dirtybit3(&args[1],range);
  ops_set_halo_dirtybit3(&args[2],range);
  ops_set_halo_dirtybit3(&args[3],range);
  ops_set_halo_dirtybit3(&args[4],range);
  ops_set_halo_dirtybit3(&args[5],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[0].mpi_time += t2-t1;
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg5);
  }
}

#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel066(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6) {
  ops_arg args[7] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6 };

  //create kernel descriptor and pass it to ops_enqueue_kernel
  create_kerneldesc_and_enque(name, args, 7, 0, dim, 1, range, block, ops_par_loop_opensbliblock00Kernel066_execute);
}
#endif
