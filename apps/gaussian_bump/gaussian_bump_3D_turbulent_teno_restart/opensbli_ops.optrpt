Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1] opensbli_ops.cpp(437,1)
  -> defdec_data_set.h:(8,8) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(17,10) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(26,10) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(35,10) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(44,10) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(53,11) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(62,9) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(71,8) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(80,16) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(89,16) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(98,16) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(107,16) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(116,16) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(125,10) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(134,11) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(143,12) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(152,12) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(161,12) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(170,12) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(179,12) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(188,12) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(197,12) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(206,12) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(215,12) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(224,12) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(233,12) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(242,8) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(251,17) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(260,18) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(269,19) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(278,19) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(287,19) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(296,9) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(305,9) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(314,9) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(323,9) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(332,9) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(341,9) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(350,10) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(359,11) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(368,11) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(377,11) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(386,11) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(395,11) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(404,10) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(413,10) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(422,10) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(431,10) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(440,10) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(449,10) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(458,10) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(467,10) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(476,10) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(485,9) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(494,9) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(503,9) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> INLINE: (461,9) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (462,9) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (463,9) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (474,10) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (478,11) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (516,22) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,63) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,112) ops_decl_const2<int>(const char *, int, const char *, int *)
  -> (516,154) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,193) ops_decl_const2<int>(const char *, int, const char *, int *)
  -> (516,243) ops_decl_const2<int>(const char *, int, const char *, int *)
  -> (516,293) ops_decl_const2<int>(const char *, int, const char *, int *)
  -> (516,343) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,402) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,461) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,520) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,565) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,608) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,653) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,696) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,739) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,778) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,817) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,868) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,913) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,958) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,1003) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,1048) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,1093) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,1138) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,1185) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,1226) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,1267) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,1316) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,1361) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,1398) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,1435) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,1472) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,1509) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,1556) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,1603) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,1644) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,1685) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,1734) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,1783) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,1832) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,1875) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,1918) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,1961) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,2004) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,2053) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,2102) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,2145) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,2188) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,2231) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,2274) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,2317) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,2360) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,2403) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,2446) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,2489) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,2532) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,2575) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,2618) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,2661) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,2704) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,2747) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,2790) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,2833) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,2876) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,2919) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,2962) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,3005) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,3048) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,3091) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,3140) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,3189) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,3232) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (516,3275) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> INLINE: (645,4) std::fmod<int, int>(int, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (671,43) ops_arg_gbl<int>(int *, int, const char *, ops_access)
  -> (931,52) ops_arg_gbl<double>(double *, int, const char *, ops_access)
  -> (932,52) ops_arg_gbl<double>(double *, int, const char *, ops_access)
  -> (956,43) ops_arg_gbl<int>(int *, int, const char *, ops_access)
  -> INLINE: (968,5) std::fmod<int, int>(int, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at opensbli_ops.cpp(643,1)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at opensbli_ops.cpp(682,1)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between call:?1memcpy (684:32) and call:ops_halo_transfer(ops_halo_group) (966:1)
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

defdec_data_set.h(6,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(15,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(24,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(33,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(42,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(51,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(60,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(69,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(75,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(76,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(78,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(84,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(85,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(87,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(93,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(94,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(96,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(102,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(103,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(105,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(111,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(112,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(114,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(123,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(132,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(141,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(150,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(159,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(168,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(177,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(186,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(195,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(204,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(213,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(222,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(231,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(240,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(246,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(247,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(249,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(255,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(256,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(258,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(264,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(265,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(267,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(273,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(274,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(276,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(282,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(283,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(285,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(294,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(303,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(312,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(321,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(330,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(339,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(348,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(357,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(366,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(375,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(384,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(393,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(402,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(411,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(420,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(429,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(438,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(447,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(456,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(465,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(474,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(483,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(492,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(501,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(521,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
opensbli_ops.cpp(523,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
opensbli_ops.cpp(525,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
opensbli_ops.cpp(527,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
opensbli_ops.cpp(529,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
opensbli_ops.cpp(531,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(533,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
opensbli_ops.cpp(535,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(537,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
opensbli_ops.cpp(539,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
opensbli_ops.cpp(541,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
opensbli_ops.cpp(543,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
opensbli_ops.cpp(545,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(547,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
opensbli_ops.cpp(549,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(551,24):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(553,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
opensbli_ops.cpp(555,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
opensbli_ops.cpp(557,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
opensbli_ops.cpp(559,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
opensbli_ops.cpp(561,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
opensbli_ops.cpp(563,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
opensbli_ops.cpp(565,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(567,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(569,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
opensbli_ops.cpp(575,33):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(575,94):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(575,94):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(575,94):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(575,94):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(575,94):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(575,94):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(575,94):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(575,94):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(575,94):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(586,33):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(586,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(586,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(586,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(586,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(586,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(586,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(586,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(586,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(596,33):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(596,81):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(596,81):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(596,81):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(596,81):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(596,81):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(603,33):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(603,101):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(603,101):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(603,101):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(603,101):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(603,101):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(610,33):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(610,81):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(610,81):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(610,81):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(610,81):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(610,81):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(617,33):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(617,101):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(617,101):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(617,101):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(617,101):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(617,101):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(626,33):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(626,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(626,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(626,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(626,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(626,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(626,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(626,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(626,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(626,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(626,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(626,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(626,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(626,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(649,33):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(649,81):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(649,81):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(649,81):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(649,81):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(649,81):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(656,33):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(656,101):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(656,101):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(656,101):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(656,101):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(656,101):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(663,33):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(663,81):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(663,81):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(663,81):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(663,81):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(663,81):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(663,81):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(663,81):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(663,81):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(673,33):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(673,101):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(673,101):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(673,101):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(673,101):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(673,101):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(684,32):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(684,93):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(684,93):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(684,93):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(689,33):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(689,94):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(689,94):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(689,94):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(694,32):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(694,93):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(694,93):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(694,93):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(699,33):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(699,84):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(699,84):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(699,84):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(699,84):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(699,84):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(706,33):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(706,94):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(706,94):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(706,94):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(706,94):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(706,94):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(706,94):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(714,33):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(714,84):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(714,84):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(714,84):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(714,84):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(714,84):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(721,32):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(721,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(721,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(725,33):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(725,94):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(725,94):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(725,94):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(730,33):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(730,94):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(730,94):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(730,94):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(735,33):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(735,94):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(735,94):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(739,32):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(739,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(739,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(739,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(739,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(739,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(739,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(739,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(739,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(739,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(739,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(739,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(739,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(739,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(739,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(739,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(739,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(739,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(739,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(739,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(760,32):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(760,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(760,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(760,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(760,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(760,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(760,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(760,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(760,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(760,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(760,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(760,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(760,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(760,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(760,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(760,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(760,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(760,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(760,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(760,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(781,32):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(781,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(781,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(781,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(781,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(781,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(781,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(781,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(781,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(781,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(781,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(781,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(781,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(781,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(781,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(781,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(781,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(781,83):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(800,33):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(800,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(800,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(800,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(800,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(800,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(800,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(800,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(800,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(800,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(800,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(800,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(800,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(800,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(800,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(800,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(800,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(800,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(800,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(800,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(800,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(800,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(823,33):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(823,84):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(823,84):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(823,84):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(828,33):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(828,89):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(828,89):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(828,89):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(833,33):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(833,89):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(833,89):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(833,89):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(838,33):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(838,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(838,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(842,33):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(842,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(842,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(846,33):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(846,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(846,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(846,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(851,33):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(851,89):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(851,89):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(851,89):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(856,33):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(856,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(856,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(860,33):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(860,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(860,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(864,33):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(864,84):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(864,84):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(864,84):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(869,33):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(869,84):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(869,84):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(869,84):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(874,33):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(874,84):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(874,84):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(874,84):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(879,33):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(879,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(879,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(879,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(879,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(879,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(879,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(879,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(879,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(879,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(879,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(879,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(879,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(879,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(879,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(879,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(879,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(879,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(879,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(879,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(879,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(879,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(879,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(879,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(879,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(879,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(879,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(879,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(879,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(879,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(879,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(879,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(879,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(879,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(879,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(915,33):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(915,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(915,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(915,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(915,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(915,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(915,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(915,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(915,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(915,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(915,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(915,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(915,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(915,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(915,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(915,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(915,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(915,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(934,33):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(934,81):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(934,81):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(934,81):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(934,81):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(934,81):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(941,33):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(941,101):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(941,101):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(941,101):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(941,101):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(941,101):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(948,33):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(948,81):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(948,81):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(948,81):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(948,81):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(948,81):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(948,81):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(948,81):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(948,81):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(958,33):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(958,101):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(958,101):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(958,101):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(958,101):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(958,101):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(437,1):remark #34051: REGISTER ALLOCATION : [main] opensbli_ops.cpp:437

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   46[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm31]
        
    Routine temporaries
        Total         :    5646
            Global    :     572
            Local     :    5074
        Regenerable   :    3072
        Spilled       :     101
        
    Routine stack
        Variables     :   22480 bytes*
            Reads     :     876 [1.71e+01 ~ 17.1%]
            Writes    :     987 [5.50e+00 ~ 5.5%]
        Spills        :     768 bytes*
            Reads     :     433 [7.25e+00 ~ 7.2%]
            Writes    :      97 [1.91e-01 ~ 0.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: ops_arg_gbl<double>(double *, int, const char *, ops_access)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ops_arg_gbl<double>(double *, int, const char *, ops_access)) [2] /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_lib_core.h(761,73)


    Report from: Code generation optimizations [cg]

/research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_lib_core.h(763,57):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
/research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_lib_core.h(761,73):remark #34051: REGISTER ALLOCATION : [_Z11ops_arg_gblIdE7ops_argPT_iPKci] /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_lib_core.h:761

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rsi rdi r8 r12 zmm0-zmm1]
        
    Routine temporaries
        Total         :      25
            Global    :       7
            Local     :      18
        Regenerable   :       3
        Spilled       :       1
        
    Routine stack
        Variables     :      56 bytes*
            Reads     :       3 [1.03e+01 ~ 10.3%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: ops_arg_gbl<int>(int *, int, const char *, ops_access)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ops_arg_gbl<int>(int *, int, const char *, ops_access)) [3] /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_lib_core.h(761,73)


    Report from: Code generation optimizations [cg]

/research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_lib_core.h(763,57):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
/research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_lib_core.h(761,73):remark #34051: REGISTER ALLOCATION : [_Z11ops_arg_gblIiE7ops_argPT_iPKci] /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_lib_core.h:761

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rsi rdi r8 r12 zmm0-zmm1]
        
    Routine temporaries
        Total         :      25
            Global    :       7
            Local     :      18
        Regenerable   :       3
        Spilled       :       1
        
    Routine stack
        Variables     :      56 bytes*
            Reads     :       3 [1.03e+01 ~ 10.3%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)) [4] /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_lib_core.h(657,40)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_lib_core.h(660,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_lib_core.h(660,3)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

    Report from: Code generation optimizations [cg]

/research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_lib_core.h(657,40):remark #34051: REGISTER ALLOCATION : [_Z12ops_decl_datIdEP12ops_dat_coreP14ops_block_coreiPiS4_S4_S4_PT_PKcS8_] /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_lib_core.h:657

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rsi rdi r8-r11 zmm0]
        
    Routine temporaries
        Total         :      32
            Global    :       8
            Local     :      24
        Regenerable   :       5
        Spilled       :       0
        
    Routine stack
        Variables     :      20 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [6.06e+00 ~ 6.1%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: ops_decl_const2<double>(const char *, int, const char *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ops_decl_const2<double>(const char *, int, const char *, double *)) [5] /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_internal2.h(394,76)
  -> INLINE: (395,7) type_error(const double *, const char *)
  -> (396,21) OPSException::~OPSException(OPSException *)
  -> INLINE: (396,21) OPSException::OPSException(OPSException *, int)
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(76,5) std::exception::exception(std::exception *const)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(76,5) std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>>::basic_stringstream(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>> *const)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(76,5) std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (397,8) OPSException::operator<<<char [46]>(OPSException *, const char (&)[46])
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(88,8) OPSException::insert(OPSException *, const char *)
      -> (96,12) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> INLINE: (397,59) OPSException::operator<<<const char *>(OPSException *, const char *const &)
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(88,8) OPSException::insert(OPSException *, const char *)
      -> (96,12) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> INLINE: (398,11) OPSException::OPSException(OPSException *, const OPSException &)
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(77,5) std::exception::exception(std::exception *const)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(77,5) std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>>::basic_stringstream(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>> *const)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(77,5) std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(77,5) std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_stringstream(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>> *const)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(77,5) std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(82,22) std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>>::rdbuf(const std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>> *) const


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/bits/basic_ios.h(460,7) inlined into /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_internal2.h(399,11)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at /mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/bits/basic_ios.h(460,7) inlined into /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_internal2.h(399,11)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at /mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/bits/basic_ios.h(460,7) inlined into /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_internal2.h(399,11)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at /mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/bits/basic_ios.h(460,7) inlined into /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_internal2.h(399,11)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at /mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/streambuf(470,7) inlined into /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_internal2.h(399,11)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at /mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/streambuf(470,7) inlined into /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_internal2.h(399,11)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 2  
LOOP END

    Report from: Code generation optimizations [cg]

/research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h(79,7):remark #34026: call to memcpy implemented as a call to optimized library version
/research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_internal2.h(394,76):remark #34051: REGISTER ALLOCATION : [_Z15ops_decl_const2IdEvPKciS1_PT_] /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_internal2.h:394

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :     252
            Global    :      31
            Local     :     221
        Regenerable   :      57
        Spilled       :       6
        
    Routine stack
        Variables     :    2536 bytes*
            Reads     :      15 [3.30e+00 ~ 3.3%]
            Writes    :      57 [1.58e+01 ~ 15.8%]
        Spills        :       8 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char>>::~basic_stringbuf(std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char>> *)

    Report from: Code generation optimizations [cg]

/mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/iosfwd(96,11):remark #34051: REGISTER ALLOCATION : [_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEED1Ev] /mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/iosfwd:96

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdi r12]
        
    Routine temporaries
        Total         :      13
            Global    :       8
            Local     :       5
        Regenerable   :       0
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: OPSException::~OPSException(OPSException *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (OPSException::~OPSException(OPSException *)) [9] /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h(75,37)
  -> INLINE: (75,38) std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_stringstream(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (75,38) std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

/research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h(75,37):remark #34051: REGISTER ALLOCATION : [_ZN12OPSExceptionD1Ev] /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:75

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rsi rdi r8 r13-r14]
        
    Routine temporaries
        Total         :      57
            Global    :      12
            Local     :      45
        Regenerable   :       4
        Spilled       :       2
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       3 [0.00e+00 ~ 0.0%]
            Writes    :       3 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::char_traits<char>::length(const std::char_traits<char>::char_type *)

    Report from: Code generation optimizations [cg]

/mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/bits/char_traits.h(366,7):remark #34051: REGISTER ALLOCATION : [_ZNSt11char_traitsIcE6lengthEPKc] /mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/bits/char_traits.h:366

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      12
            Global    :       7
            Local     :       5
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::pointer_traits<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::const_pointer>::pointer_to(std::__make_not_void<std::pointer_traits<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::const_pointer>::element_type> &)

    Report from: Code generation optimizations [cg]

/mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/bits/ptr_traits.h(147,7):remark #34051: REGISTER ALLOCATION : [_ZNSt14pointer_traitsIPKcE10pointer_toERS0_] /mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/bits/ptr_traits.h:147

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rax rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: ops_decl_const2<int>(const char *, int, const char *, int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ops_decl_const2<int>(const char *, int, const char *, int *)) [14] /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_internal2.h(394,76)
  -> INLINE: (395,7) type_error(const int *, const char *)
  -> (396,21) OPSException::~OPSException(OPSException *)
  -> INLINE: (396,21) OPSException::OPSException(OPSException *, int)
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(76,5) std::exception::exception(std::exception *const)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(76,5) std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>>::basic_stringstream(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>> *const)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(76,5) std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (397,8) OPSException::operator<<<char [46]>(OPSException *, const char (&)[46])
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(88,8) OPSException::insert(OPSException *, const char *)
      -> (96,12) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> INLINE: (397,59) OPSException::operator<<<const char *>(OPSException *, const char *const &)
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(88,8) OPSException::insert(OPSException *, const char *)
      -> (96,12) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> INLINE: (398,11) OPSException::OPSException(OPSException *, const OPSException &)
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(77,5) std::exception::exception(std::exception *const)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(77,5) std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>>::basic_stringstream(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>> *const)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(77,5) std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(77,5) std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_stringstream(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>> *const)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(77,5) std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(82,22) std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>>::rdbuf(const std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>> *) const


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/bits/basic_ios.h(460,7) inlined into /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_internal2.h(399,11)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at /mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/bits/basic_ios.h(460,7) inlined into /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_internal2.h(399,11)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at /mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/bits/basic_ios.h(460,7) inlined into /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_internal2.h(399,11)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at /mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/bits/basic_ios.h(460,7) inlined into /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_internal2.h(399,11)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at /mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/streambuf(470,7) inlined into /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_internal2.h(399,11)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at /mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/streambuf(470,7) inlined into /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_internal2.h(399,11)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 2  
LOOP END

    Report from: Code generation optimizations [cg]

/research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h(79,7):remark #34026: call to memcpy implemented as a call to optimized library version
/research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_internal2.h(394,76):remark #34051: REGISTER ALLOCATION : [_Z15ops_decl_const2IiEvPKciS1_PT_] /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_internal2.h:394

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :     252
            Global    :      31
            Local     :     221
        Regenerable   :      57
        Spilled       :       6
        
    Routine stack
        Variables     :    2536 bytes*
            Reads     :      15 [3.30e+00 ~ 3.3%]
            Writes    :      57 [1.58e+01 ~ 15.8%]
        Spills        :       8 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel067(double *, double *, double *, double *, double *, double *, double *, double *, const int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel067(double *, double *, double *, double *, double *, double *, double *, double *, const int *)) [15] opensbliblock00_kernels.h(5,1)
  -> INLINE: (12,50) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (13,25) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (18,25) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (19,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (19,82) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (20,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (20,83) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (21,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (21,82) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (22,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (22,83) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (23,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (23,83) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (24,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (24,83) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (25,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (25,83) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (26,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (26,83) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (27,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (27,83) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (28,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (28,83) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (29,26) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (29,80) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (30,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (30,82) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (31,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (31,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (32,24) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (32,78) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (33,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (33,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (34,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (34,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (35,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (35,82) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (36,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (36,82) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (37,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (37,80) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (38,26) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (38,77) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (39,24) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (39,74) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (40,23) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (40,73) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (41,24) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (41,75) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (42,25) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (42,78) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (50,25) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (51,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (51,83) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (52,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (52,83) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (53,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (53,83) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (54,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (54,83) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (55,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (55,82) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (56,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (56,83) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (57,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (57,82) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (58,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (58,83) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (59,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (59,83) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (60,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (60,82) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (61,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (61,83) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (62,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (62,83) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (63,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (63,82) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (64,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (64,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (65,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (65,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (66,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (66,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (67,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (67,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (68,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (68,82) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (69,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (69,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (70,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (70,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (71,26) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (71,78) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (72,26) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (72,78) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (73,25) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (73,78) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (74,26) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (74,79) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (82,26) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (83,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (83,83) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (84,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (84,83) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (85,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (85,83) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (86,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (86,83) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (87,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (87,83) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (88,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (88,82) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (89,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (89,83) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (90,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (90,82) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (91,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (91,83) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (92,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (92,83) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (93,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (93,83) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (94,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (94,82) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (95,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (95,82) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (96,26) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (96,80) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (97,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (97,80) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (98,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (98,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (99,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (99,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (100,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (100,83) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (101,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (101,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (102,26) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (102,79) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (103,26) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (103,77) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (104,25) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (104,76) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (105,24) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (105,75) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (106,26) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (106,77) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (121,68) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (121,88) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(5,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel067PdS_S_S_S_S_S_S_PKi] opensbliblock00_kernels.h:5

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   44[ rax rdx rcx rbx rsi rdi r8-r9 r12-r15 zmm0-zmm31]
        
    Routine temporaries
        Total         :     344
            Global    :      27
            Local     :     317
        Regenerable   :      18
        Spilled       :      12
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      56 bytes*
            Reads     :       7 [4.17e+00 ~ 4.2%]
            Writes    :       7 [4.17e+00 ~ 4.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel070(const double *, const double *, double *, double *, double *, double *, double *, const int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel070(const double *, const double *, double *, double *, double *, double *, double *, const int *)) [16] opensbliblock00_kernels.h(129,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(129,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel070PKdS0_PdS1_S1_S1_S1_PKi] opensbliblock00_kernels.h:129

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   23[ rax rdx rcx rbp rsi rdi r8-r11 zmm0-zmm12]
        
    Routine temporaries
        Total         :     233
            Global    :      29
            Local     :     204
        Regenerable   :      17
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel071(double *, double *, double *, double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel071(double *, double *, double *, double *, double *)) [17] opensbliblock00_kernels.h(223,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(223,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel071PdS_S_S_S_] opensbliblock00_kernels.h:223

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rsi rdi r8-r11]
        
    Routine temporaries
        Total         :      31
            Global    :       0
            Local     :      31
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel072(double *, double *, double *, double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel072(double *, double *, double *, double *, double *)) [18] opensbliblock00_kernels.h(257,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(257,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel072PdS_S_S_S_] opensbliblock00_kernels.h:257

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rsi rdi r8-r11]
        
    Routine temporaries
        Total         :      36
            Global    :       0
            Local     :      36
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel073(double *, double *, double *, double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel073(double *, double *, double *, double *, double *)) [19] opensbliblock00_kernels.h(301,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(301,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel073PdS_S_S_S_] opensbliblock00_kernels.h:301

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rsi rdi r8-r11 r13-r15]
        
    Routine temporaries
        Total         :      91
            Global    :       0
            Local     :      91
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel074(double *, double *, double *, double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel074(double *, double *, double *, double *, double *)) [20] opensbliblock00_kernels.h(335,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(335,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel074PdS_S_S_S_] opensbliblock00_kernels.h:335

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rsi rdi r8-r11 r13-r15]
        
    Routine temporaries
        Total         :     116
            Global    :       0
            Local     :     116
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel081(const double *, const double *, const double *, const double *, double *, double *, double *, double *, double *, double *, double *, double *, const int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel081(const double *, const double *, const double *, const double *, double *, double *, double *, double *, double *, double *, double *, double *, const int *)) [21] opensbliblock00_kernels.h(381,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(381,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel081PKdS0_S0_S0_PdS1_S1_S1_S1_S1_S1_S1_PKi] opensbliblock00_kernels.h:381

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   47[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm31]
        
    Routine temporaries
        Total         :     432
            Global    :      45
            Local     :     387
        Regenerable   :      38
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       1 [2.18e-01 ~ 0.2%]
            Writes    :       1 [2.59e-01 ~ 0.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel061(double *, double *, double *, double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel061(double *, double *, double *, double *, double *)) [22] opensbliblock00_kernels.h(561,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(561,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel061PdS_S_S_S_] opensbliblock00_kernels.h:561

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rsi rdi r8-r11]
        
    Routine temporaries
        Total         :      21
            Global    :       0
            Local     :      21
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel062(double *, double *, double *, double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel062(double *, double *, double *, double *, double *)) [23] opensbliblock00_kernels.h(575,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(575,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel062PdS_S_S_S_] opensbliblock00_kernels.h:575

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rsi rdi r8-r11]
        
    Routine temporaries
        Total         :      41
            Global    :       0
            Local     :      41
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel063(const double *, const double *, double *, double *, double *, double *, double *, const int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel063(const double *, const double *, double *, double *, double *, double *, double *, const int *)) [24] opensbliblock00_kernels.h(630,1)
  -> INLINE: (648,48) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (657,33) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (657,75) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (658,13) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (678,15) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (678,53) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (679,13) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (679,55) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (688,17) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (692,17) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (696,17) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (718,66) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (718,80) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (718,94) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (720,66) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (720,80) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (720,94) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (722,66) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (722,80) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (722,94) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(630,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel063PKdS0_PdS1_S1_S1_S1_PKi] opensbliblock00_kernels.h:630

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   47[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm31]
        
    Routine temporaries
        Total         :     212
            Global    :      18
            Local     :     194
        Regenerable   :       5
        Spilled       :      11
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      40 bytes*
            Reads     :       5 [1.97e+00 ~ 2.0%]
            Writes    :       5 [1.97e+00 ~ 2.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel064(double *, double *, double *, double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel064(double *, double *, double *, double *, double *)) [25] opensbliblock00_kernels.h(727,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(727,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel064PdS_S_S_S_] opensbliblock00_kernels.h:727

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     121
            Global    :       0
            Local     :     121
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel003(const double *, const double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel003(const double *, const double *, double *)) [26] opensbliblock00_kernels.h(781,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(781,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel003PKdS0_Pd] opensbliblock00_kernels.h:781

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    5[ rdx rsi rdi zmm0-zmm1]
        
    Routine temporaries
        Total         :      14
            Global    :       0
            Local     :      14
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel010(const double *, const double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel010(const double *, const double *, double *)) [27] opensbliblock00_kernels.h(787,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(787,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel010PKdS0_Pd] opensbliblock00_kernels.h:787

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    5[ rdx rsi rdi zmm0-zmm1]
        
    Routine temporaries
        Total         :      14
            Global    :       0
            Local     :      14
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel005(const double *, const double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel005(const double *, const double *, double *)) [28] opensbliblock00_kernels.h(793,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(793,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel005PKdS0_Pd] opensbliblock00_kernels.h:793

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    5[ rdx rsi rdi zmm0-zmm1]
        
    Routine temporaries
        Total         :      14
            Global    :       0
            Local     :      14
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel012(const double *, const double *, const double *, const double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel012(const double *, const double *, const double *, const double *, double *)) [29] opensbliblock00_kernels.h(800,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(800,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel012PKdS0_S0_S0_Pd] opensbliblock00_kernels.h:800

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rdx rcx rsi rdi r8 zmm0-zmm2]
        
    Routine temporaries
        Total         :      20
            Global    :       0
            Local     :      20
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel017(const double *, const double *, const double *, const double *, const double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel017(const double *, const double *, const double *, const double *, const double *, double *)) [30] opensbliblock00_kernels.h(808,1)
  -> INLINE: (810,35) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (811,35) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (812,35) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(808,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel017PKdS0_S0_S0_S0_Pd] opensbliblock00_kernels.h:808

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rdx rcx rsi rdi r8-r9 zmm0-zmm6]
        
    Routine temporaries
        Total         :      29
            Global    :       0
            Local     :      29
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel014(const double *, const double *, const double *, const double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel014(const double *, const double *, const double *, const double *, double *)) [31] opensbliblock00_kernels.h(818,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(818,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel014PKdS0_S0_S0_Pd] opensbliblock00_kernels.h:818

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rdx rcx rsi rdi r8 zmm0-zmm2]
        
    Routine temporaries
        Total         :      20
            Global    :       0
            Local     :      20
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel004(const double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel004(const double *, double *)) [32] opensbliblock00_kernels.h(825,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(825,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel004PKdPd] opensbliblock00_kernels.h:825

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rsi rdi]
        
    Routine temporaries
        Total         :      11
            Global    :       0
            Local     :      11
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel031(const double *, const double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel031(const double *, const double *, double *)) [33] opensbliblock00_kernels.h(831,1)
  -> INLINE: (832,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(831,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel031PKdS0_Pd] opensbliblock00_kernels.h:831

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rdx rsi rdi zmm0-zmm4]
        
    Routine temporaries
        Total         :      17
            Global    :       0
            Local     :      17
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel020(const double *, const double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel020(const double *, const double *, double *)) [34] opensbliblock00_kernels.h(837,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(837,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel020PKdS0_Pd] opensbliblock00_kernels.h:837

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rdx rsi rdi zmm0-zmm2]
        
    Routine temporaries
        Total         :      16
            Global    :       0
            Local     :      16
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel030(const double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel030(const double *, double *)) [35] opensbliblock00_kernels.h(843,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(843,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel030PKdPd] opensbliblock00_kernels.h:843

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rsi rdi zmm0-zmm6]
        
    Routine temporaries
        Total         :      19
            Global    :       0
            Local     :      19
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel000(const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, double *, double *, double *, double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel000(const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, double *, double *, double *, double *, double *)) [36] opensbliblock00_kernels.h(853,1)
  -> INLINE: (987,71) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (987,90) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (988,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (998,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (998,47) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1000,60) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1000,77) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1001,22) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1001,39) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1001,74) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1001,91) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1002,17) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1002,34) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1002,64) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1002,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1003,17) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1003,34) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1005,49) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1007,49) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1009,64) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1009,103) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1012,41) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1014,60) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1014,77) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1015,22) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1015,39) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1015,74) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1015,91) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1016,52) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1016,69) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1016,99) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1017,10) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1017,40) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1017,57) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1019,49) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1021,49) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1023,64) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1024,26) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1026,41) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1034,70) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1034,94) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1035,12) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1036,55) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1036,74) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1036,93) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1048,68) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1048,92) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1049,12) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1050,55) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1050,74) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1050,93) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1440,38) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1440,72) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1442,72) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1443,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1444,74) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1445,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1446,72) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1447,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1448,74) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1449,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1450,67) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1451,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1454,39) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1454,74) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1456,75) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1457,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1458,75) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1459,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1460,73) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1461,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1462,73) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1463,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1464,68) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1465,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1468,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1469,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1472,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1473,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1476,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1477,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1481,80) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1483,16) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1486,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1488,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1490,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1492,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1534,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1535,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1538,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1539,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1542,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1543,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1546,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1547,84) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1549,58) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1552,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1554,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1556,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1558,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1600,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1601,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1604,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1605,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1608,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1609,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1613,80) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1615,16) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1618,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1620,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1622,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1624,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1666,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1667,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1670,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1671,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1674,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1675,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1678,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1679,84) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1681,58) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1684,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1686,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1688,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1690,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1732,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1733,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1736,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1737,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1740,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1741,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1745,80) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1747,16) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1750,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1752,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1754,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1756,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1798,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1799,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1802,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1803,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1806,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1807,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1810,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1811,84) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1813,58) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1816,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1818,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1820,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1822,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1864,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1865,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1868,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1869,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1872,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1873,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1877,80) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1879,16) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1882,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1884,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1886,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1888,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1930,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1931,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1934,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1935,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1938,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1939,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1942,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1943,84) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1945,58) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1948,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1950,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1952,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1954,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1996,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1997,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2000,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2001,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2004,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2005,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2009,80) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2011,16) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2014,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2016,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2018,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2020,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2062,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2063,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2066,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2067,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2070,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2071,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2074,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2075,84) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2077,58) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2080,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2082,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2084,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2086,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2148,79) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2148,98) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2149,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2149,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2151,79) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2151,98) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2152,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2152,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2153,90) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2154,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2154,26) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2155,98) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2156,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2156,26) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(853,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel000PKdS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_PdS1_S1_S1_S1_] opensbliblock00_kernels.h:853

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   45[ rax rdx rcx rbx rsi rdi r8-r10 r12-r15 zmm0-zmm31]
        
    Routine temporaries
        Total         :    2138
            Global    :     324
            Local     :    1814
        Regenerable   :      19
        Spilled       :     250
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :    1960 bytes*
            Reads     :     460 [1.57e+01 ~ 15.7%]
            Writes    :     278 [9.47e+00 ~ 9.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel001(const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, double *, double *, double *, double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel001(const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, double *, double *, double *, double *, double *)) [37] opensbliblock00_kernels.h(2164,1)
  -> INLINE: (2298,71) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2298,90) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2299,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2309,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2309,47) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2311,60) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2311,77) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2312,22) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2312,39) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2312,74) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2312,91) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2313,17) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2313,34) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2313,64) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2313,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2314,17) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2314,34) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2316,49) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2318,49) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2320,64) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2320,103) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2323,41) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2325,60) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2325,77) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2326,22) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2326,39) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2326,74) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2326,91) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2327,52) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2327,69) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2327,99) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2328,10) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2328,40) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2328,57) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2330,49) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2332,49) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2334,64) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2335,26) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2337,41) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2345,70) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2345,94) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2346,12) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2347,55) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2347,74) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2347,93) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2359,68) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2359,92) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2360,12) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2361,55) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2361,74) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2361,93) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2751,38) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2751,72) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2753,71) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2754,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2755,71) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2756,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2757,71) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2758,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2759,73) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2760,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2761,66) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2762,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2765,39) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2765,74) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2767,74) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2768,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2769,74) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2770,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2771,72) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2772,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2773,72) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2774,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2775,67) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2776,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2779,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2780,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2783,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2784,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2787,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2788,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2792,80) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2794,16) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2797,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2799,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2801,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2803,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2845,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2846,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2849,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2850,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2853,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2854,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2857,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2858,84) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2860,58) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2863,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2865,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2867,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2869,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2911,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2912,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2915,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2916,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2919,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2920,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2924,80) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2926,16) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2929,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2931,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2933,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2935,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2977,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2978,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2981,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2982,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2985,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2986,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2989,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2990,84) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2992,58) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2995,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2997,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2999,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3001,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3043,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3044,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3047,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3048,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3051,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3052,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3056,80) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3058,16) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3061,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3063,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3065,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3067,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3109,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3110,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3113,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3114,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3117,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3118,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3121,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3122,84) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3124,58) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3127,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3129,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3131,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3133,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3175,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3176,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3179,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3180,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3183,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3184,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3188,80) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3190,16) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3193,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3195,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3197,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3199,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3241,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3242,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3245,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3246,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3249,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3250,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3253,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3254,84) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3256,58) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3259,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3261,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3263,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3265,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3307,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3308,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3311,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3312,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3315,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3316,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3320,80) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3322,16) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3325,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3327,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3329,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3331,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3373,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3374,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3377,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3378,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3381,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3382,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3385,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3386,84) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3388,58) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3391,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3393,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3395,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3397,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3459,79) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3459,98) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3460,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3460,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3462,79) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3462,98) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3463,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3463,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3464,90) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3465,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3465,26) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3466,98) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3467,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3467,26) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(2164,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel001PKdS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_PdS1_S1_S1_S1_] opensbliblock00_kernels.h:2164

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   46[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm31]
        
    Routine temporaries
        Total         :    2294
            Global    :     339
            Local     :    1955
        Regenerable   :      19
        Spilled       :     297
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :    2336 bytes*
            Reads     :     497 [1.57e+01 ~ 15.7%]
            Writes    :     314 [9.91e+00 ~ 9.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel002(const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, double *, double *, double *, double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel002(const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, double *, double *, double *, double *, double *)) [38] opensbliblock00_kernels.h(3475,1)
  -> INLINE: (3602,71) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3602,90) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3603,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3617,33) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3617,50) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3617,75) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3617,92) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3618,12) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3618,29) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3618,49) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3618,66) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3618,86) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3618,103) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3619,9) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3619,26) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3621,39) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3623,39) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3625,39) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3627,31) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3629,70) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3629,94) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3630,12) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3630,52) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3630,71) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3630,90) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3640,68) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3640,92) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3641,12) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3641,52) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3641,71) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3641,90) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3927,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3928,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3931,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3932,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3935,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3936,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3940,80) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3942,16) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3945,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3947,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3949,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3951,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3993,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3994,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3997,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (3998,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4001,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4002,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4005,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4006,84) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4008,58) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4011,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4013,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4015,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4017,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4059,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4060,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4063,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4064,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4067,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4068,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4072,80) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4074,16) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4077,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4079,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4081,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4083,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4125,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4126,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4129,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4130,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4133,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4134,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4137,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4138,84) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4140,58) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4143,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4145,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4147,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4149,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4191,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4192,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4195,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4196,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4199,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4200,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4204,80) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4206,16) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4209,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4211,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4213,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4215,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4257,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4258,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4261,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4262,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4265,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4266,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4269,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4270,84) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4272,58) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4275,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4277,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4279,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4281,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4323,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4324,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4327,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4328,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4331,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4332,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4336,80) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4338,16) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4341,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4343,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4345,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4347,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4389,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4390,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4393,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4394,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4397,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4398,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4401,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4402,84) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4404,58) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4407,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4409,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4411,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4413,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4455,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4456,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4459,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4460,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4463,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4464,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4468,80) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4470,16) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4473,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4475,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4477,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4479,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4521,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4522,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4525,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4526,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4529,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4530,43) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4533,21) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4534,84) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4536,58) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4539,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4541,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4543,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4545,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4600,79) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4600,98) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4601,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4601,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4602,79) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4602,98) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4603,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4603,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4603,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4603,106) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (4604,18) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(3475,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel002PKdS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_PdS1_S1_S1_S1_] opensbliblock00_kernels.h:3475

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   46[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm31]
        
    Routine temporaries
        Total         :    2001
            Global    :     286
            Local     :    1715
        Regenerable   :      17
        Spilled       :     228
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :    1768 bytes*
            Reads     :     401 [1.42e+01 ~ 14.2%]
            Writes    :     254 [8.99e+00 ~ 9.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel021(const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, double *, double *, double *, double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel021(const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, double *, double *, double *, double *, double *)) [39] opensbliblock00_kernels.h(4613,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(4613,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel021PKdS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_PdS1_S1_S1_S1_] opensbliblock00_kernels.h:4613

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   41[ rax rdx rcx rsi rdi r8-r11 zmm0-zmm31]
        
    Routine temporaries
        Total         :     123
            Global    :       0
            Local     :     123
        Regenerable   :      15
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel040(const double *, double *, const int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel040(const double *, double *, const int *)) [40] opensbliblock00_kernels.h(4637,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(4637,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel040PKdPdPKi] opensbliblock00_kernels.h:4637

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rsi rdi zmm0-zmm7]
        
    Routine temporaries
        Total         :      56
            Global    :      15
            Local     :      41
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel035(const double *, double *, const int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel035(const double *, double *, const int *)) [41] opensbliblock00_kernels.h(4655,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(4655,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel035PKdPdPKi] opensbliblock00_kernels.h:4655

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rsi rdi zmm0-zmm8]
        
    Routine temporaries
        Total         :      70
            Global    :      12
            Local     :      58
        Regenerable   :       6
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel043(const double *, double *, const int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel043(const double *, double *, const int *)) [42] opensbliblock00_kernels.h(4683,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(4683,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel043PKdPdPKi] opensbliblock00_kernels.h:4683

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rsi rdi zmm0-zmm8]
        
    Routine temporaries
        Total         :      69
            Global    :      12
            Local     :      57
        Regenerable   :       4
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel042(const double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel042(const double *, double *)) [43] opensbliblock00_kernels.h(4711,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(4711,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel042PKdPd] opensbliblock00_kernels.h:4711

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rsi rdi r8 zmm0-zmm5]
        
    Routine temporaries
        Total         :      31
            Global    :       0
            Local     :      31
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel034(const double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel034(const double *, double *)) [44] opensbliblock00_kernels.h(4718,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(4718,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel034PKdPd] opensbliblock00_kernels.h:4718

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rsi rdi r8-r9 zmm0-zmm6]
        
    Routine temporaries
        Total         :      30
            Global    :       0
            Local     :      30
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel044(const double *, double *, const int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel044(const double *, double *, const int *)) [45] opensbliblock00_kernels.h(4725,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(4725,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel044PKdPdPKi] opensbliblock00_kernels.h:4725

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rsi rdi zmm0-zmm6]
        
    Routine temporaries
        Total         :      57
            Global    :      15
            Local     :      42
        Regenerable   :       3
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel039(const double *, double *, const int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel039(const double *, double *, const int *)) [46] opensbliblock00_kernels.h(4743,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(4743,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel039PKdPdPKi] opensbliblock00_kernels.h:4743

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rsi rdi zmm0-zmm8]
        
    Routine temporaries
        Total         :      70
            Global    :      12
            Local     :      58
        Regenerable   :       7
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel038(const double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel038(const double *, double *)) [47] opensbliblock00_kernels.h(4771,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(4771,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel038PKdPd] opensbliblock00_kernels.h:4771

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rsi rdi r8 zmm0-zmm6]
        
    Routine temporaries
        Total         :      31
            Global    :       0
            Local     :      31
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel046(const double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel046(const double *, double *)) [48] opensbliblock00_kernels.h(4778,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(4778,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel046PKdPd] opensbliblock00_kernels.h:4778

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rsi rdi r8 zmm0-zmm6]
        
    Routine temporaries
        Total         :      31
            Global    :       0
            Local     :      31
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel047(const double *, double *, const int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel047(const double *, double *, const int *)) [49] opensbliblock00_kernels.h(4785,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(4785,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel047PKdPdPKi] opensbliblock00_kernels.h:4785

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rsi rdi zmm0-zmm8]
        
    Routine temporaries
        Total         :      70
            Global    :      12
            Local     :      58
        Regenerable   :       6
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel036(const double *, double *, const int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel036(const double *, double *, const int *)) [50] opensbliblock00_kernels.h(4813,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(4813,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel036PKdPdPKi] opensbliblock00_kernels.h:4813

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rsi rdi zmm0-zmm6]
        
    Routine temporaries
        Total         :      57
            Global    :      15
            Local     :      42
        Regenerable   :       3
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel032(const double *, double *, const int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel032(const double *, double *, const int *)) [51] opensbliblock00_kernels.h(4831,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(4831,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel032PKdPdPKi] opensbliblock00_kernels.h:4831

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rsi rdi zmm0-zmm6]
        
    Routine temporaries
        Total         :      57
            Global    :      15
            Local     :      42
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel056(const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, double *, double *, double *, double *, const int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel056(const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, double *, double *, double *, double *, const int *)) [52] opensbliblock00_kernels.h(4855,1)
  -> INLINE: (5180,26) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5180,73) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5181,26) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5181,73) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5210,29) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5210,84) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5217,90) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5218,31) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5246,29) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5246,77) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5247,42) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5247,90) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5269,19) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5269,66) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5271,85) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5272,19) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5340,29) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5340,77) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5341,42) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5341,90) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5354,31) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5354,86) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5361,90) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5362,31) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5385,26) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5385,73) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5386,26) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (5386,73) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(4855,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel056PKdS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_PdS1_S1_S1_PKi] opensbliblock00_kernels.h:4855

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   47[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm31]
        
    Routine temporaries
        Total         :    1374
            Global    :     168
            Local     :    1206
        Regenerable   :      78
        Spilled       :      75
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     552 bytes*
            Reads     :      85 [7.15e+00 ~ 7.1%]
            Writes    :      93 [5.80e+00 ~ 5.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel082(const double *, const double *, const double *, const double *, const double *, double *, double *, double *, double *, double *, double *, double *, double *, double *, double *, const double *, const double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel082(const double *, const double *, const double *, const double *, const double *, double *, double *, double *, double *, double *, double *, double *, double *, double *, double *, const double *, const double *)) [53] opensbliblock00_kernels.h(5412,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(5412,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel082PKdS0_S0_S0_S0_PdS1_S1_S1_S1_S1_S1_S1_S1_S1_S0_S0_] opensbliblock00_kernels.h:5412

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   29[ rax rdx rcx rsi rdi r8-r11 zmm0-zmm19]
        
    Routine temporaries
        Total         :      59
            Global    :       0
            Local     :      59
        Regenerable   :      11
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: OPSException::~OPSException(OPSException *const)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (OPSException::~OPSException(OPSException *const)) [54] /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h(75,13)
  -> INLINE: (75,13) OPSException::~OPSException(OPSException *)
    -> INLINE: (75,38) std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: (75,38) std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_stringstream(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>> *const)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

/research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h(75,13):remark #34051: REGISTER ALLOCATION : [_ZN12OPSExceptionD0Ev] /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:75

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rsi rdi r8 r13-r14]
        
    Routine temporaries
        Total         :      58
            Global    :      12
            Local     :      46
        Regenerable   :       4
        Spilled       :       2
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       3 [0.00e+00 ~ 0.0%]
            Writes    :       3 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: OPSException::OPSException(OPSException *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (OPSException::OPSException(OPSException *, int)) /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h(76,62)

===========================================================================

Begin optimization report for: OPSException::OPSException(OPSException *, const OPSException &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (OPSException::OPSException(OPSException *, const OPSException &)) /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h(77,43)

===========================================================================

Begin optimization report for: OPSException::insert(OPSException *, const char *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (OPSException::insert(OPSException *, const char *)) /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h(95,5)

===========================================================================

Begin optimization report for: OPSException::what(const OPSException *) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (OPSException::what(const OPSException *) const) [58] /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h(114,46)
  -> INLINE: (115,22) std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (115,22) std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> *, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (115,28) std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (116,29) std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::c_str(const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

/mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/bits/char_traits.h(409,33):remark #34026: call to memcpy implemented as a call to optimized library version
/research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h(114,46):remark #34051: REGISTER ALLOCATION : [_ZNK12OPSException4whatEv] /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:114

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8 r14]
        
    Routine temporaries
        Total         :      66
            Global    :      21
            Local     :      45
        Regenerable   :      13
        Spilled       :       1
        
    Routine stack
        Variables     :      40 bytes*
            Reads     :      14 [9.01e+00 ~ 9.0%]
            Writes    :       7 [7.91e+00 ~ 7.9%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: OPSException::operator<<<const char *>(OPSException *, const char *const &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (OPSException::operator<<<const char *>(OPSException *, const char *const &)) /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h(87,5)

===========================================================================

Begin optimization report for: OPSException::operator<<<char [46]>(OPSException *, const char (&)[46])

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (OPSException::operator<<<char [46]>(OPSException *, const char (&)[46])) /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h(87,5)

===========================================================================

Begin optimization report for: std::pow<double, int>(double, int)

    Report from: Code generation optimizations [cg]

/mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/cmath(416,5):remark #34051: REGISTER ALLOCATION : [_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_Xsr3std12__is_integerIS2_EE7__valueEE6__typeENS4_IS3_Xsr3std12__is_integerIS3_EE7__valueEE6__typeEE6__typeES2_S3_] /mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/cmath:416

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rdi zmm0-zmm1]
        
    Routine temporaries
        Total         :      16
            Global    :       7
            Local     :       9
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::fmod<int, int>(int, int)

    Report from: Code generation optimizations [cg]

/mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/cmath(291,5):remark #34051: REGISTER ALLOCATION : [_ZSt4fmodIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_Xsr3std12__is_integerIS2_EE7__valueEE6__typeENS4_IS3_Xsr3std12__is_integerIS3_EE7__valueEE6__typeEE6__typeES2_S3_] /mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/cmath:291

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rsi rdi zmm0-zmm1]
        
    Routine temporaries
        Total         :      14
            Global    :       0
            Local     :      14
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: __sti__$E()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (__sti__$E()) [154] <compiler generated>


    Report from: Code generation optimizations [cg]

<compiler generated>:remark #34051: REGISTER ALLOCATION : [__sti__$E] (null):0

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rdx rsi rdi]
        
    Routine temporaries
        Total         :      13
            Global    :       7
            Local     :       6
        Regenerable   :       7
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: type_error(const int *, const char *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (type_error(const int *, const char *)) /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_internal1.h(112,55)

===========================================================================

Begin optimization report for: type_error(const double *, const char *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (type_error(const double *, const char *)) /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_internal1.h(104,58)

===========================================================================
