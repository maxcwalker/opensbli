//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel000(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11,
 ops_arg arg12, ops_arg arg13, ops_arg arg14, ops_arg arg15,
 ops_arg arg16, ops_arg arg17, ops_arg arg18) {
#else
void ops_par_loop_opensbliblock00Kernel000_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  ops_arg arg9 = desc->args[9];
  ops_arg arg10 = desc->args[10];
  ops_arg arg11 = desc->args[11];
  ops_arg arg12 = desc->args[12];
  ops_arg arg13 = desc->args[13];
  ops_arg arg14 = desc->args[14];
  ops_arg arg15 = desc->args[15];
  ops_arg arg16 = desc->args[16];
  ops_arg arg17 = desc->args[17];
  ops_arg arg18 = desc->args[18];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[19] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,19,range,21)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,21,"opensbliblock00Kernel000");
    block->instance->OPS_kernels[21].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "opensbliblock00Kernel000");
  #endif


  //compute locally allocated range for the sub-block
  int start[3];
  int end[3];
  #if defined(OPS_MPI) && !defined(OPS_LAZY)
  int arg_idx[3];
  #endif
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<3; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 19,block, range, start, end, arg_idx) < 0) return;
  #endif


  //initialize global variable with the dimension of dats
  int xdim0_opensbliblock00Kernel000 = args[0].dat->size[0];
  int ydim0_opensbliblock00Kernel000 = args[0].dat->size[1];
  int xdim1_opensbliblock00Kernel000 = args[1].dat->size[0];
  int ydim1_opensbliblock00Kernel000 = args[1].dat->size[1];
  int xdim2_opensbliblock00Kernel000 = args[2].dat->size[0];
  int ydim2_opensbliblock00Kernel000 = args[2].dat->size[1];
  int xdim3_opensbliblock00Kernel000 = args[3].dat->size[0];
  int ydim3_opensbliblock00Kernel000 = args[3].dat->size[1];
  int xdim4_opensbliblock00Kernel000 = args[4].dat->size[0];
  int ydim4_opensbliblock00Kernel000 = args[4].dat->size[1];
  int xdim5_opensbliblock00Kernel000 = args[5].dat->size[0];
  int ydim5_opensbliblock00Kernel000 = args[5].dat->size[1];
  int xdim6_opensbliblock00Kernel000 = args[6].dat->size[0];
  int ydim6_opensbliblock00Kernel000 = args[6].dat->size[1];
  int xdim7_opensbliblock00Kernel000 = args[7].dat->size[0];
  int ydim7_opensbliblock00Kernel000 = args[7].dat->size[1];
  int xdim8_opensbliblock00Kernel000 = args[8].dat->size[0];
  int ydim8_opensbliblock00Kernel000 = args[8].dat->size[1];
  int xdim9_opensbliblock00Kernel000 = args[9].dat->size[0];
  int ydim9_opensbliblock00Kernel000 = args[9].dat->size[1];
  int xdim10_opensbliblock00Kernel000 = args[10].dat->size[0];
  int ydim10_opensbliblock00Kernel000 = args[10].dat->size[1];
  int xdim11_opensbliblock00Kernel000 = args[11].dat->size[0];
  int ydim11_opensbliblock00Kernel000 = args[11].dat->size[1];
  int xdim12_opensbliblock00Kernel000 = args[12].dat->size[0];
  int ydim12_opensbliblock00Kernel000 = args[12].dat->size[1];
  int xdim13_opensbliblock00Kernel000 = args[13].dat->size[0];
  int ydim13_opensbliblock00Kernel000 = args[13].dat->size[1];
  int xdim14_opensbliblock00Kernel000 = args[14].dat->size[0];
  int ydim14_opensbliblock00Kernel000 = args[14].dat->size[1];
  int xdim15_opensbliblock00Kernel000 = args[15].dat->size[0];
  int ydim15_opensbliblock00Kernel000 = args[15].dat->size[1];
  int xdim16_opensbliblock00Kernel000 = args[16].dat->size[0];
  int ydim16_opensbliblock00Kernel000 = args[16].dat->size[1];
  int xdim17_opensbliblock00Kernel000 = args[17].dat->size[0];
  int ydim17_opensbliblock00Kernel000 = args[17].dat->size[1];
  int xdim18_opensbliblock00Kernel000 = args[18].dat->size[0];
  int ydim18_opensbliblock00Kernel000 = args[18].dat->size[1];

  //set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset;
  double * __restrict__ D00_B0_p = (double *)(args[0].data + base0);

  int base1 = args[1].dat->base_offset;
  double * __restrict__ D01_B0_p = (double *)(args[1].data + base1);

  int base2 = args[2].dat->base_offset;
  double * __restrict__ U0_B0_p = (double *)(args[2].data + base2);

  int base3 = args[3].dat->base_offset;
  double * __restrict__ a_B0_p = (double *)(args[3].data + base3);

  int base4 = args[4].dat->base_offset;
  double * __restrict__ detJ_B0_p = (double *)(args[4].data + base4);

  int base5 = args[5].dat->base_offset;
  double * __restrict__ p_B0_p = (double *)(args[5].data + base5);

  int base6 = args[6].dat->base_offset;
  double * __restrict__ rhoE_B0_p = (double *)(args[6].data + base6);

  int base7 = args[7].dat->base_offset;
  double * __restrict__ rho_B0_p = (double *)(args[7].data + base7);

  int base8 = args[8].dat->base_offset;
  double * __restrict__ rhou0_B0_p = (double *)(args[8].data + base8);

  int base9 = args[9].dat->base_offset;
  double * __restrict__ rhou1_B0_p = (double *)(args[9].data + base9);

  int base10 = args[10].dat->base_offset;
  double * __restrict__ rhou2_B0_p = (double *)(args[10].data + base10);

  int base11 = args[11].dat->base_offset;
  double * __restrict__ u0_B0_p = (double *)(args[11].data + base11);

  int base12 = args[12].dat->base_offset;
  double * __restrict__ u1_B0_p = (double *)(args[12].data + base12);

  int base13 = args[13].dat->base_offset;
  double * __restrict__ u2_B0_p = (double *)(args[13].data + base13);

  int base14 = args[14].dat->base_offset;
  double * __restrict__ wk0_B0_p = (double *)(args[14].data + base14);

  int base15 = args[15].dat->base_offset;
  double * __restrict__ wk1_B0_p = (double *)(args[15].data + base15);

  int base16 = args[16].dat->base_offset;
  double * __restrict__ wk2_B0_p = (double *)(args[16].data + base16);

  int base17 = args[17].dat->base_offset;
  double * __restrict__ wk3_B0_p = (double *)(args[17].data + base17);

  int base18 = args[18].dat->base_offset;
  double * __restrict__ wk4_B0_p = (double *)(args[18].data + base18);



  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_host(args, 19);
  ops_halo_exchanges(args,19,range);
  ops_H_D_exchanges_host(args, 19);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[21].mpi_time += __t1-__t2;
  }

  #pragma omp parallel for collapse(2)
  for ( int n_z=start[2]; n_z<end[2]; n_z++ ){
    for ( int n_y=start[1]; n_y<end[1]; n_y++ ){
      #ifdef __INTEL_COMPILER
      #pragma loop_count(10000)
      #pragma omp simd
      #elif defined(__clang__)
      #pragma clang loop vectorize(assume_safety)
      #elif defined(__GNUC__)
      #pragma GCC ivdep
      #else
      #pragma simd
      #endif
      for ( int n_x=start[0]; n_x<end[0]; n_x++ ){
        const ACC<double> D00_B0(xdim0_opensbliblock00Kernel000, ydim0_opensbliblock00Kernel000, D00_B0_p + n_x*1 + n_y * xdim0_opensbliblock00Kernel000*1 + n_z * xdim0_opensbliblock00Kernel000 * ydim0_opensbliblock00Kernel000*1);
        const ACC<double> D01_B0(xdim1_opensbliblock00Kernel000, ydim1_opensbliblock00Kernel000, D01_B0_p + n_x*1 + n_y * xdim1_opensbliblock00Kernel000*1 + n_z * xdim1_opensbliblock00Kernel000 * ydim1_opensbliblock00Kernel000*1);
        const ACC<double> U0_B0(xdim2_opensbliblock00Kernel000, ydim2_opensbliblock00Kernel000, U0_B0_p + n_x*1 + n_y * xdim2_opensbliblock00Kernel000*1 + n_z * xdim2_opensbliblock00Kernel000 * ydim2_opensbliblock00Kernel000*1);
        const ACC<double> a_B0(xdim3_opensbliblock00Kernel000, ydim3_opensbliblock00Kernel000, a_B0_p + n_x*1 + n_y * xdim3_opensbliblock00Kernel000*1 + n_z * xdim3_opensbliblock00Kernel000 * ydim3_opensbliblock00Kernel000*1);
        const ACC<double> detJ_B0(xdim4_opensbliblock00Kernel000, ydim4_opensbliblock00Kernel000, detJ_B0_p + n_x*1 + n_y * xdim4_opensbliblock00Kernel000*1 + n_z * xdim4_opensbliblock00Kernel000 * ydim4_opensbliblock00Kernel000*1);
        const ACC<double> p_B0(xdim5_opensbliblock00Kernel000, ydim5_opensbliblock00Kernel000, p_B0_p + n_x*1 + n_y * xdim5_opensbliblock00Kernel000*1 + n_z * xdim5_opensbliblock00Kernel000 * ydim5_opensbliblock00Kernel000*1);
        const ACC<double> rhoE_B0(xdim6_opensbliblock00Kernel000, ydim6_opensbliblock00Kernel000, rhoE_B0_p + n_x*1 + n_y * xdim6_opensbliblock00Kernel000*1 + n_z * xdim6_opensbliblock00Kernel000 * ydim6_opensbliblock00Kernel000*1);
        const ACC<double> rho_B0(xdim7_opensbliblock00Kernel000, ydim7_opensbliblock00Kernel000, rho_B0_p + n_x*1 + n_y * xdim7_opensbliblock00Kernel000*1 + n_z * xdim7_opensbliblock00Kernel000 * ydim7_opensbliblock00Kernel000*1);
        const ACC<double> rhou0_B0(xdim8_opensbliblock00Kernel000, ydim8_opensbliblock00Kernel000, rhou0_B0_p + n_x*1 + n_y * xdim8_opensbliblock00Kernel000*1 + n_z * xdim8_opensbliblock00Kernel000 * ydim8_opensbliblock00Kernel000*1);
        const ACC<double> rhou1_B0(xdim9_opensbliblock00Kernel000, ydim9_opensbliblock00Kernel000, rhou1_B0_p + n_x*1 + n_y * xdim9_opensbliblock00Kernel000*1 + n_z * xdim9_opensbliblock00Kernel000 * ydim9_opensbliblock00Kernel000*1);
        const ACC<double> rhou2_B0(xdim10_opensbliblock00Kernel000, ydim10_opensbliblock00Kernel000, rhou2_B0_p + n_x*1 + n_y * xdim10_opensbliblock00Kernel000*1 + n_z * xdim10_opensbliblock00Kernel000 * ydim10_opensbliblock00Kernel000*1);
        const ACC<double> u0_B0(xdim11_opensbliblock00Kernel000, ydim11_opensbliblock00Kernel000, u0_B0_p + n_x*1 + n_y * xdim11_opensbliblock00Kernel000*1 + n_z * xdim11_opensbliblock00Kernel000 * ydim11_opensbliblock00Kernel000*1);
        const ACC<double> u1_B0(xdim12_opensbliblock00Kernel000, ydim12_opensbliblock00Kernel000, u1_B0_p + n_x*1 + n_y * xdim12_opensbliblock00Kernel000*1 + n_z * xdim12_opensbliblock00Kernel000 * ydim12_opensbliblock00Kernel000*1);
        const ACC<double> u2_B0(xdim13_opensbliblock00Kernel000, ydim13_opensbliblock00Kernel000, u2_B0_p + n_x*1 + n_y * xdim13_opensbliblock00Kernel000*1 + n_z * xdim13_opensbliblock00Kernel000 * ydim13_opensbliblock00Kernel000*1);
        ACC<double> wk0_B0(xdim14_opensbliblock00Kernel000, ydim14_opensbliblock00Kernel000, wk0_B0_p + n_x*1 + n_y * xdim14_opensbliblock00Kernel000*1 + n_z * xdim14_opensbliblock00Kernel000 * ydim14_opensbliblock00Kernel000*1);
        ACC<double> wk1_B0(xdim15_opensbliblock00Kernel000, ydim15_opensbliblock00Kernel000, wk1_B0_p + n_x*1 + n_y * xdim15_opensbliblock00Kernel000*1 + n_z * xdim15_opensbliblock00Kernel000 * ydim15_opensbliblock00Kernel000*1);
        ACC<double> wk2_B0(xdim16_opensbliblock00Kernel000, ydim16_opensbliblock00Kernel000, wk2_B0_p + n_x*1 + n_y * xdim16_opensbliblock00Kernel000*1 + n_z * xdim16_opensbliblock00Kernel000 * ydim16_opensbliblock00Kernel000*1);
        ACC<double> wk3_B0(xdim17_opensbliblock00Kernel000, ydim17_opensbliblock00Kernel000, wk3_B0_p + n_x*1 + n_y * xdim17_opensbliblock00Kernel000*1 + n_z * xdim17_opensbliblock00Kernel000 * ydim17_opensbliblock00Kernel000*1);
        ACC<double> wk4_B0(xdim18_opensbliblock00Kernel000, ydim18_opensbliblock00Kernel000, wk4_B0_p + n_x*1 + n_y * xdim18_opensbliblock00Kernel000*1 + n_z * xdim18_opensbliblock00Kernel000 * ydim18_opensbliblock00Kernel000*1);
        
   double AVG_0_0_LEV_00 = 0.0;
   double AVG_0_0_LEV_01 = 0.0;
   double AVG_0_0_LEV_02 = 0.0;
   double AVG_0_0_LEV_03 = 0.0;
   double AVG_0_0_LEV_04 = 0.0;
   double AVG_0_0_LEV_10 = 0.0;
   double AVG_0_0_LEV_11 = 0.0;
   double AVG_0_0_LEV_12 = 0.0;
   double AVG_0_0_LEV_13 = 0.0;
   double AVG_0_0_LEV_14 = 0.0;
   double AVG_0_0_LEV_20 = 0.0;
   double AVG_0_0_LEV_21 = 0.0;
   double AVG_0_0_LEV_22 = 0.0;
   double AVG_0_0_LEV_30 = 0.0;
   double AVG_0_0_LEV_31 = 0.0;
   double AVG_0_0_LEV_32 = 0.0;
   double AVG_0_0_LEV_33 = 0.0;
   double AVG_0_0_LEV_34 = 0.0;
   double AVG_0_0_LEV_40 = 0.0;
   double AVG_0_0_LEV_41 = 0.0;
   double AVG_0_0_LEV_42 = 0.0;
   double AVG_0_0_LEV_43 = 0.0;
   double AVG_0_0_LEV_44 = 0.0;
   double AVG_0_D00 = 0.0;
   double AVG_0_D01 = 0.0;
   double AVG_0_a = 0.0;
   double AVG_0_detJ = 0.0;
   double AVG_0_inv_rho = 0.0;
   double AVG_0_rho = 0.0;
   double AVG_0_u0 = 0.0;
   double AVG_0_u1 = 0.0;
   double AVG_0_u2 = 0.0;
   double CF_00 = 0.0;
   double CF_01 = 0.0;
   double CF_02 = 0.0;
   double CF_03 = 0.0;
   double CF_04 = 0.0;
   double CF_05 = 0.0;
   double CF_10 = 0.0;
   double CF_11 = 0.0;
   double CF_12 = 0.0;
   double CF_13 = 0.0;
   double CF_14 = 0.0;
   double CF_15 = 0.0;
   double CF_20 = 0.0;
   double CF_21 = 0.0;
   double CF_22 = 0.0;
   double CF_23 = 0.0;
   double CF_24 = 0.0;
   double CF_25 = 0.0;
   double CF_30 = 0.0;
   double CF_31 = 0.0;
   double CF_32 = 0.0;
   double CF_33 = 0.0;
   double CF_34 = 0.0;
   double CF_35 = 0.0;
   double CF_40 = 0.0;
   double CF_41 = 0.0;
   double CF_42 = 0.0;
   double CF_43 = 0.0;
   double CF_44 = 0.0;
   double CF_45 = 0.0;
   double CS_00 = 0.0;
   double CS_01 = 0.0;
   double CS_02 = 0.0;
   double CS_03 = 0.0;
   double CS_04 = 0.0;
   double CS_05 = 0.0;
   double CS_10 = 0.0;
   double CS_11 = 0.0;
   double CS_12 = 0.0;
   double CS_13 = 0.0;
   double CS_14 = 0.0;
   double CS_15 = 0.0;
   double CS_20 = 0.0;
   double CS_21 = 0.0;
   double CS_22 = 0.0;
   double CS_23 = 0.0;
   double CS_24 = 0.0;
   double CS_25 = 0.0;
   double CS_30 = 0.0;
   double CS_31 = 0.0;
   double CS_32 = 0.0;
   double CS_33 = 0.0;
   double CS_34 = 0.0;
   double CS_35 = 0.0;
   double CS_40 = 0.0;
   double CS_41 = 0.0;
   double CS_42 = 0.0;
   double CS_43 = 0.0;
   double CS_44 = 0.0;
   double CS_45 = 0.0;
   double Recon_0 = 0.0;
   double Recon_1 = 0.0;
   double Recon_2 = 0.0;
   double Recon_3 = 0.0;
   double Recon_4 = 0.0;
   double alpha_0 = 0.0;
   double alpha_1 = 0.0;
   double alpha_2 = 0.0;
   double alpha_3 = 0.0;
   double beta_0 = 0.0;
   double beta_1 = 0.0;
   double beta_2 = 0.0;
   double beta_3 = 0.0;
   double delta_0 = 0.0;
   double delta_1 = 0.0;
   double delta_2 = 0.0;
   double delta_3 = 0.0;
   double inv_AVG_a = 0.0;
   double inv_AVG_met_fact = 0.0;
   double inv_AVG_rho = 0.0;
   double inv_alpha_sum = 0.0;
   double inv_beta_0 = 0.0;
   double inv_beta_1 = 0.0;
   double inv_beta_2 = 0.0;
   double inv_beta_3 = 0.0;
   double inv_omega_sum = 0.0;
   double max_lambda_00 = 0.0;
   double max_lambda_11 = 0.0;
   double max_lambda_22 = 0.0;
   double max_lambda_33 = 0.0;
   double max_lambda_44 = 0.0;
   AVG_0_rho = sqrt(rho_B0(0,0,0)*rho_B0(1,0,0));

   AVG_0_inv_rho = 1.0/((sqrt(rho_B0(0,0,0)) + sqrt(rho_B0(1,0,0))));

   AVG_0_u0 = (sqrt(rho_B0(0,0,0))*u0_B0(0,0,0) + sqrt(rho_B0(1,0,0))*u0_B0(1,0,0))*AVG_0_inv_rho;

   AVG_0_u1 = (sqrt(rho_B0(0,0,0))*u1_B0(0,0,0) + sqrt(rho_B0(1,0,0))*u1_B0(1,0,0))*AVG_0_inv_rho;

   AVG_0_u2 = (sqrt(rho_B0(0,0,0))*u2_B0(0,0,0) + sqrt(rho_B0(1,0,0))*u2_B0(1,0,0))*AVG_0_inv_rho;

    AVG_0_a = sqrt((-(1.0/2.0)*((AVG_0_u0*AVG_0_u0) + (AVG_0_u1*AVG_0_u1) + (AVG_0_u2*AVG_0_u2)) + ((p_B0(0,0,0) +
      rhoE_B0(0,0,0))/sqrt(rho_B0(0,0,0)) + (p_B0(1,0,0) +
      rhoE_B0(1,0,0))/sqrt(rho_B0(1,0,0)))*AVG_0_inv_rho)*gamma_m1);

   AVG_0_D00 = ((1.0/2.0))*(D00_B0(0,0,0) + D00_B0(1,0,0));

   AVG_0_detJ = ((1.0/2.0))*(detJ_B0(0,0,0) + detJ_B0(1,0,0));

   AVG_0_D01 = ((1.0/2.0))*(D01_B0(0,0,0) + D01_B0(1,0,0));

   inv_AVG_a = 1.0/(AVG_0_a);

   inv_AVG_rho = 1.0/(AVG_0_rho);

   inv_AVG_met_fact = pow((AVG_0_D00*AVG_0_D00) + (AVG_0_D01*AVG_0_D01), (-1.0/2.0));

    AVG_0_0_LEV_00 = -(1.0/2.0)*(-2*AVG_0_D00 - (AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*AVG_0_D00 -
      (AVG_0_u1*AVG_0_u1)*(inv_AVG_a*inv_AVG_a)*AVG_0_D00 - (AVG_0_u2*AVG_0_u2)*(inv_AVG_a*inv_AVG_a)*AVG_0_D00 -
      2*AVG_0_D01*AVG_0_u2*inv_AVG_rho + (AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*gama*AVG_0_D00 +
      (AVG_0_u1*AVG_0_u1)*(inv_AVG_a*inv_AVG_a)*gama*AVG_0_D00 +
      (AVG_0_u2*AVG_0_u2)*(inv_AVG_a*inv_AVG_a)*gama*AVG_0_D00)*inv_AVG_met_fact;

   AVG_0_0_LEV_01 = (inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_0_D00*AVG_0_u0*inv_AVG_met_fact;

   AVG_0_0_LEV_02 = (inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_0_D00*AVG_0_u1*inv_AVG_met_fact;

    AVG_0_0_LEV_03 = (-AVG_0_D01*inv_AVG_rho - (inv_AVG_a*inv_AVG_a)*AVG_0_D00*AVG_0_u2 +
      (inv_AVG_a*inv_AVG_a)*gama*AVG_0_D00*AVG_0_u2)*inv_AVG_met_fact;

   AVG_0_0_LEV_04 = -(inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_0_D00*inv_AVG_met_fact;

    AVG_0_0_LEV_10 = -(1.0/2.0)*(-2*AVG_0_D01 - (AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*AVG_0_D01 -
      (AVG_0_u1*AVG_0_u1)*(inv_AVG_a*inv_AVG_a)*AVG_0_D01 - (AVG_0_u2*AVG_0_u2)*(inv_AVG_a*inv_AVG_a)*AVG_0_D01 +
      2*AVG_0_D00*AVG_0_u2*inv_AVG_rho + (AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*gama*AVG_0_D01 +
      (AVG_0_u1*AVG_0_u1)*(inv_AVG_a*inv_AVG_a)*gama*AVG_0_D01 +
      (AVG_0_u2*AVG_0_u2)*(inv_AVG_a*inv_AVG_a)*gama*AVG_0_D01)*inv_AVG_met_fact;

   AVG_0_0_LEV_11 = (inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_0_D01*AVG_0_u0*inv_AVG_met_fact;

   AVG_0_0_LEV_12 = (inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_0_D01*AVG_0_u1*inv_AVG_met_fact;

    AVG_0_0_LEV_13 = (AVG_0_D00*inv_AVG_rho - (inv_AVG_a*inv_AVG_a)*AVG_0_D01*AVG_0_u2 +
      (inv_AVG_a*inv_AVG_a)*gama*AVG_0_D01*AVG_0_u2)*inv_AVG_met_fact;

   AVG_0_0_LEV_14 = -(inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_0_D01*inv_AVG_met_fact;

   AVG_0_0_LEV_20 = (AVG_0_D00*AVG_0_u1 - AVG_0_D01*AVG_0_u0)*inv_AVG_met_fact*inv_AVG_rho;

   AVG_0_0_LEV_21 = AVG_0_D01*inv_AVG_met_fact*inv_AVG_rho;

   AVG_0_0_LEV_22 = -AVG_0_D00*inv_AVG_met_fact*inv_AVG_rho;

    AVG_0_0_LEV_30 = -0.353553390593274*((AVG_0_u0*AVG_0_u0) + (AVG_0_u1*AVG_0_u1) + (AVG_0_u2*AVG_0_u2) -
      (AVG_0_u0*AVG_0_u0)*gama - (AVG_0_u1*AVG_0_u1)*gama - (AVG_0_u2*AVG_0_u2)*gama +
      2*AVG_0_D00*AVG_0_a*AVG_0_u0*inv_AVG_met_fact +
      2*AVG_0_D01*AVG_0_a*AVG_0_u1*inv_AVG_met_fact)*inv_AVG_a*inv_AVG_rho;

    AVG_0_0_LEV_31 = 0.707106781186547*(-gama*AVG_0_u0 + AVG_0_D00*AVG_0_a*inv_AVG_met_fact +
      AVG_0_u0)*inv_AVG_a*inv_AVG_rho;

    AVG_0_0_LEV_32 = 0.707106781186547*(-gama*AVG_0_u1 + AVG_0_D01*AVG_0_a*inv_AVG_met_fact +
      AVG_0_u1)*inv_AVG_a*inv_AVG_rho;

   AVG_0_0_LEV_33 = -0.707106781186547*gamma_m1*AVG_0_u2*inv_AVG_a*inv_AVG_rho;

   AVG_0_0_LEV_34 = 0.707106781186547*gamma_m1*inv_AVG_a*inv_AVG_rho;

    AVG_0_0_LEV_40 = 0.353553390593274*(-(AVG_0_u0*AVG_0_u0) - (AVG_0_u1*AVG_0_u1) - (AVG_0_u2*AVG_0_u2) +
      (AVG_0_u0*AVG_0_u0)*gama + (AVG_0_u1*AVG_0_u1)*gama + (AVG_0_u2*AVG_0_u2)*gama +
      2*AVG_0_D00*AVG_0_a*AVG_0_u0*inv_AVG_met_fact +
      2*AVG_0_D01*AVG_0_a*AVG_0_u1*inv_AVG_met_fact)*inv_AVG_a*inv_AVG_rho;

    AVG_0_0_LEV_41 = -0.707106781186547*(-AVG_0_u0 + gama*AVG_0_u0 +
      AVG_0_D00*AVG_0_a*inv_AVG_met_fact)*inv_AVG_a*inv_AVG_rho;

    AVG_0_0_LEV_42 = -0.707106781186547*(-AVG_0_u1 + gama*AVG_0_u1 +
      AVG_0_D01*AVG_0_a*inv_AVG_met_fact)*inv_AVG_a*inv_AVG_rho;

   AVG_0_0_LEV_43 = -0.707106781186547*gamma_m1*AVG_0_u2*inv_AVG_a*inv_AVG_rho;

   AVG_0_0_LEV_44 = 0.707106781186547*gamma_m1*inv_AVG_a*inv_AVG_rho;

    CF_00 = (p_B0(-2,0,0)*U0_B0(-2,0,0)*AVG_0_0_LEV_04 + p_B0(-2,0,0)*D00_B0(-2,0,0)*AVG_0_0_LEV_01 +
      p_B0(-2,0,0)*D01_B0(-2,0,0)*AVG_0_0_LEV_02 + U0_B0(-2,0,0)*rho_B0(-2,0,0)*AVG_0_0_LEV_00 +
      U0_B0(-2,0,0)*rhoE_B0(-2,0,0)*AVG_0_0_LEV_04 + U0_B0(-2,0,0)*rhou0_B0(-2,0,0)*AVG_0_0_LEV_01 +
      U0_B0(-2,0,0)*rhou1_B0(-2,0,0)*AVG_0_0_LEV_02 + U0_B0(-2,0,0)*rhou2_B0(-2,0,0)*AVG_0_0_LEV_03)*detJ_B0(-2,0,0);

    CF_10 = (p_B0(-2,0,0)*U0_B0(-2,0,0)*AVG_0_0_LEV_14 + p_B0(-2,0,0)*D00_B0(-2,0,0)*AVG_0_0_LEV_11 +
      p_B0(-2,0,0)*D01_B0(-2,0,0)*AVG_0_0_LEV_12 + U0_B0(-2,0,0)*rho_B0(-2,0,0)*AVG_0_0_LEV_10 +
      U0_B0(-2,0,0)*rhoE_B0(-2,0,0)*AVG_0_0_LEV_14 + U0_B0(-2,0,0)*rhou0_B0(-2,0,0)*AVG_0_0_LEV_11 +
      U0_B0(-2,0,0)*rhou1_B0(-2,0,0)*AVG_0_0_LEV_12 + U0_B0(-2,0,0)*rhou2_B0(-2,0,0)*AVG_0_0_LEV_13)*detJ_B0(-2,0,0);

    CF_20 = (p_B0(-2,0,0)*D00_B0(-2,0,0)*AVG_0_0_LEV_21 + p_B0(-2,0,0)*D01_B0(-2,0,0)*AVG_0_0_LEV_22 +
      U0_B0(-2,0,0)*rho_B0(-2,0,0)*AVG_0_0_LEV_20 + U0_B0(-2,0,0)*rhou0_B0(-2,0,0)*AVG_0_0_LEV_21 +
      U0_B0(-2,0,0)*rhou1_B0(-2,0,0)*AVG_0_0_LEV_22)*detJ_B0(-2,0,0);

    CF_30 = (p_B0(-2,0,0)*U0_B0(-2,0,0)*AVG_0_0_LEV_34 + p_B0(-2,0,0)*D00_B0(-2,0,0)*AVG_0_0_LEV_31 +
      p_B0(-2,0,0)*D01_B0(-2,0,0)*AVG_0_0_LEV_32 + U0_B0(-2,0,0)*rho_B0(-2,0,0)*AVG_0_0_LEV_30 +
      U0_B0(-2,0,0)*rhoE_B0(-2,0,0)*AVG_0_0_LEV_34 + U0_B0(-2,0,0)*rhou0_B0(-2,0,0)*AVG_0_0_LEV_31 +
      U0_B0(-2,0,0)*rhou1_B0(-2,0,0)*AVG_0_0_LEV_32 + U0_B0(-2,0,0)*rhou2_B0(-2,0,0)*AVG_0_0_LEV_33)*detJ_B0(-2,0,0);

    CF_40 = (p_B0(-2,0,0)*U0_B0(-2,0,0)*AVG_0_0_LEV_44 + p_B0(-2,0,0)*D00_B0(-2,0,0)*AVG_0_0_LEV_41 +
      p_B0(-2,0,0)*D01_B0(-2,0,0)*AVG_0_0_LEV_42 + U0_B0(-2,0,0)*rho_B0(-2,0,0)*AVG_0_0_LEV_40 +
      U0_B0(-2,0,0)*rhoE_B0(-2,0,0)*AVG_0_0_LEV_44 + U0_B0(-2,0,0)*rhou0_B0(-2,0,0)*AVG_0_0_LEV_41 +
      U0_B0(-2,0,0)*rhou1_B0(-2,0,0)*AVG_0_0_LEV_42 + U0_B0(-2,0,0)*rhou2_B0(-2,0,0)*AVG_0_0_LEV_43)*detJ_B0(-2,0,0);

    CS_00 = rho_B0(-2,0,0)*AVG_0_0_LEV_00 + rhoE_B0(-2,0,0)*AVG_0_0_LEV_04 + rhou0_B0(-2,0,0)*AVG_0_0_LEV_01 +
      rhou1_B0(-2,0,0)*AVG_0_0_LEV_02 + rhou2_B0(-2,0,0)*AVG_0_0_LEV_03;

    CS_10 = rho_B0(-2,0,0)*AVG_0_0_LEV_10 + rhoE_B0(-2,0,0)*AVG_0_0_LEV_14 + rhou0_B0(-2,0,0)*AVG_0_0_LEV_11 +
      rhou1_B0(-2,0,0)*AVG_0_0_LEV_12 + rhou2_B0(-2,0,0)*AVG_0_0_LEV_13;

   CS_20 = rho_B0(-2,0,0)*AVG_0_0_LEV_20 + rhou0_B0(-2,0,0)*AVG_0_0_LEV_21 + rhou1_B0(-2,0,0)*AVG_0_0_LEV_22;

    CS_30 = rho_B0(-2,0,0)*AVG_0_0_LEV_30 + rhoE_B0(-2,0,0)*AVG_0_0_LEV_34 + rhou0_B0(-2,0,0)*AVG_0_0_LEV_31 +
      rhou1_B0(-2,0,0)*AVG_0_0_LEV_32 + rhou2_B0(-2,0,0)*AVG_0_0_LEV_33;

    CS_40 = rho_B0(-2,0,0)*AVG_0_0_LEV_40 + rhoE_B0(-2,0,0)*AVG_0_0_LEV_44 + rhou0_B0(-2,0,0)*AVG_0_0_LEV_41 +
      rhou1_B0(-2,0,0)*AVG_0_0_LEV_42 + rhou2_B0(-2,0,0)*AVG_0_0_LEV_43;

    CF_01 = (p_B0(-1,0,0)*U0_B0(-1,0,0)*AVG_0_0_LEV_04 + p_B0(-1,0,0)*D00_B0(-1,0,0)*AVG_0_0_LEV_01 +
      p_B0(-1,0,0)*D01_B0(-1,0,0)*AVG_0_0_LEV_02 + U0_B0(-1,0,0)*rho_B0(-1,0,0)*AVG_0_0_LEV_00 +
      U0_B0(-1,0,0)*rhoE_B0(-1,0,0)*AVG_0_0_LEV_04 + U0_B0(-1,0,0)*rhou0_B0(-1,0,0)*AVG_0_0_LEV_01 +
      U0_B0(-1,0,0)*rhou1_B0(-1,0,0)*AVG_0_0_LEV_02 + U0_B0(-1,0,0)*rhou2_B0(-1,0,0)*AVG_0_0_LEV_03)*detJ_B0(-1,0,0);

    CF_11 = (p_B0(-1,0,0)*U0_B0(-1,0,0)*AVG_0_0_LEV_14 + p_B0(-1,0,0)*D00_B0(-1,0,0)*AVG_0_0_LEV_11 +
      p_B0(-1,0,0)*D01_B0(-1,0,0)*AVG_0_0_LEV_12 + U0_B0(-1,0,0)*rho_B0(-1,0,0)*AVG_0_0_LEV_10 +
      U0_B0(-1,0,0)*rhoE_B0(-1,0,0)*AVG_0_0_LEV_14 + U0_B0(-1,0,0)*rhou0_B0(-1,0,0)*AVG_0_0_LEV_11 +
      U0_B0(-1,0,0)*rhou1_B0(-1,0,0)*AVG_0_0_LEV_12 + U0_B0(-1,0,0)*rhou2_B0(-1,0,0)*AVG_0_0_LEV_13)*detJ_B0(-1,0,0);

    CF_21 = (p_B0(-1,0,0)*D00_B0(-1,0,0)*AVG_0_0_LEV_21 + p_B0(-1,0,0)*D01_B0(-1,0,0)*AVG_0_0_LEV_22 +
      U0_B0(-1,0,0)*rho_B0(-1,0,0)*AVG_0_0_LEV_20 + U0_B0(-1,0,0)*rhou0_B0(-1,0,0)*AVG_0_0_LEV_21 +
      U0_B0(-1,0,0)*rhou1_B0(-1,0,0)*AVG_0_0_LEV_22)*detJ_B0(-1,0,0);

    CF_31 = (p_B0(-1,0,0)*U0_B0(-1,0,0)*AVG_0_0_LEV_34 + p_B0(-1,0,0)*D00_B0(-1,0,0)*AVG_0_0_LEV_31 +
      p_B0(-1,0,0)*D01_B0(-1,0,0)*AVG_0_0_LEV_32 + U0_B0(-1,0,0)*rho_B0(-1,0,0)*AVG_0_0_LEV_30 +
      U0_B0(-1,0,0)*rhoE_B0(-1,0,0)*AVG_0_0_LEV_34 + U0_B0(-1,0,0)*rhou0_B0(-1,0,0)*AVG_0_0_LEV_31 +
      U0_B0(-1,0,0)*rhou1_B0(-1,0,0)*AVG_0_0_LEV_32 + U0_B0(-1,0,0)*rhou2_B0(-1,0,0)*AVG_0_0_LEV_33)*detJ_B0(-1,0,0);

    CF_41 = (p_B0(-1,0,0)*U0_B0(-1,0,0)*AVG_0_0_LEV_44 + p_B0(-1,0,0)*D00_B0(-1,0,0)*AVG_0_0_LEV_41 +
      p_B0(-1,0,0)*D01_B0(-1,0,0)*AVG_0_0_LEV_42 + U0_B0(-1,0,0)*rho_B0(-1,0,0)*AVG_0_0_LEV_40 +
      U0_B0(-1,0,0)*rhoE_B0(-1,0,0)*AVG_0_0_LEV_44 + U0_B0(-1,0,0)*rhou0_B0(-1,0,0)*AVG_0_0_LEV_41 +
      U0_B0(-1,0,0)*rhou1_B0(-1,0,0)*AVG_0_0_LEV_42 + U0_B0(-1,0,0)*rhou2_B0(-1,0,0)*AVG_0_0_LEV_43)*detJ_B0(-1,0,0);

    CS_01 = rho_B0(-1,0,0)*AVG_0_0_LEV_00 + rhoE_B0(-1,0,0)*AVG_0_0_LEV_04 + rhou0_B0(-1,0,0)*AVG_0_0_LEV_01 +
      rhou1_B0(-1,0,0)*AVG_0_0_LEV_02 + rhou2_B0(-1,0,0)*AVG_0_0_LEV_03;

    CS_11 = rho_B0(-1,0,0)*AVG_0_0_LEV_10 + rhoE_B0(-1,0,0)*AVG_0_0_LEV_14 + rhou0_B0(-1,0,0)*AVG_0_0_LEV_11 +
      rhou1_B0(-1,0,0)*AVG_0_0_LEV_12 + rhou2_B0(-1,0,0)*AVG_0_0_LEV_13;

   CS_21 = rho_B0(-1,0,0)*AVG_0_0_LEV_20 + rhou0_B0(-1,0,0)*AVG_0_0_LEV_21 + rhou1_B0(-1,0,0)*AVG_0_0_LEV_22;

    CS_31 = rho_B0(-1,0,0)*AVG_0_0_LEV_30 + rhoE_B0(-1,0,0)*AVG_0_0_LEV_34 + rhou0_B0(-1,0,0)*AVG_0_0_LEV_31 +
      rhou1_B0(-1,0,0)*AVG_0_0_LEV_32 + rhou2_B0(-1,0,0)*AVG_0_0_LEV_33;

    CS_41 = rho_B0(-1,0,0)*AVG_0_0_LEV_40 + rhoE_B0(-1,0,0)*AVG_0_0_LEV_44 + rhou0_B0(-1,0,0)*AVG_0_0_LEV_41 +
      rhou1_B0(-1,0,0)*AVG_0_0_LEV_42 + rhou2_B0(-1,0,0)*AVG_0_0_LEV_43;

    CF_02 = (p_B0(0,0,0)*U0_B0(0,0,0)*AVG_0_0_LEV_04 + p_B0(0,0,0)*D00_B0(0,0,0)*AVG_0_0_LEV_01 +
      p_B0(0,0,0)*D01_B0(0,0,0)*AVG_0_0_LEV_02 + U0_B0(0,0,0)*rho_B0(0,0,0)*AVG_0_0_LEV_00 +
      U0_B0(0,0,0)*rhoE_B0(0,0,0)*AVG_0_0_LEV_04 + U0_B0(0,0,0)*rhou0_B0(0,0,0)*AVG_0_0_LEV_01 +
      U0_B0(0,0,0)*rhou1_B0(0,0,0)*AVG_0_0_LEV_02 + U0_B0(0,0,0)*rhou2_B0(0,0,0)*AVG_0_0_LEV_03)*detJ_B0(0,0,0);

    CF_12 = (p_B0(0,0,0)*U0_B0(0,0,0)*AVG_0_0_LEV_14 + p_B0(0,0,0)*D00_B0(0,0,0)*AVG_0_0_LEV_11 +
      p_B0(0,0,0)*D01_B0(0,0,0)*AVG_0_0_LEV_12 + U0_B0(0,0,0)*rho_B0(0,0,0)*AVG_0_0_LEV_10 +
      U0_B0(0,0,0)*rhoE_B0(0,0,0)*AVG_0_0_LEV_14 + U0_B0(0,0,0)*rhou0_B0(0,0,0)*AVG_0_0_LEV_11 +
      U0_B0(0,0,0)*rhou1_B0(0,0,0)*AVG_0_0_LEV_12 + U0_B0(0,0,0)*rhou2_B0(0,0,0)*AVG_0_0_LEV_13)*detJ_B0(0,0,0);

    CF_22 = (p_B0(0,0,0)*D00_B0(0,0,0)*AVG_0_0_LEV_21 + p_B0(0,0,0)*D01_B0(0,0,0)*AVG_0_0_LEV_22 +
      U0_B0(0,0,0)*rho_B0(0,0,0)*AVG_0_0_LEV_20 + U0_B0(0,0,0)*rhou0_B0(0,0,0)*AVG_0_0_LEV_21 +
      U0_B0(0,0,0)*rhou1_B0(0,0,0)*AVG_0_0_LEV_22)*detJ_B0(0,0,0);

    CF_32 = (p_B0(0,0,0)*U0_B0(0,0,0)*AVG_0_0_LEV_34 + p_B0(0,0,0)*D00_B0(0,0,0)*AVG_0_0_LEV_31 +
      p_B0(0,0,0)*D01_B0(0,0,0)*AVG_0_0_LEV_32 + U0_B0(0,0,0)*rho_B0(0,0,0)*AVG_0_0_LEV_30 +
      U0_B0(0,0,0)*rhoE_B0(0,0,0)*AVG_0_0_LEV_34 + U0_B0(0,0,0)*rhou0_B0(0,0,0)*AVG_0_0_LEV_31 +
      U0_B0(0,0,0)*rhou1_B0(0,0,0)*AVG_0_0_LEV_32 + U0_B0(0,0,0)*rhou2_B0(0,0,0)*AVG_0_0_LEV_33)*detJ_B0(0,0,0);

    CF_42 = (p_B0(0,0,0)*U0_B0(0,0,0)*AVG_0_0_LEV_44 + p_B0(0,0,0)*D00_B0(0,0,0)*AVG_0_0_LEV_41 +
      p_B0(0,0,0)*D01_B0(0,0,0)*AVG_0_0_LEV_42 + U0_B0(0,0,0)*rho_B0(0,0,0)*AVG_0_0_LEV_40 +
      U0_B0(0,0,0)*rhoE_B0(0,0,0)*AVG_0_0_LEV_44 + U0_B0(0,0,0)*rhou0_B0(0,0,0)*AVG_0_0_LEV_41 +
      U0_B0(0,0,0)*rhou1_B0(0,0,0)*AVG_0_0_LEV_42 + U0_B0(0,0,0)*rhou2_B0(0,0,0)*AVG_0_0_LEV_43)*detJ_B0(0,0,0);

    CS_02 = rho_B0(0,0,0)*AVG_0_0_LEV_00 + rhoE_B0(0,0,0)*AVG_0_0_LEV_04 + rhou0_B0(0,0,0)*AVG_0_0_LEV_01 +
      rhou1_B0(0,0,0)*AVG_0_0_LEV_02 + rhou2_B0(0,0,0)*AVG_0_0_LEV_03;

    CS_12 = rho_B0(0,0,0)*AVG_0_0_LEV_10 + rhoE_B0(0,0,0)*AVG_0_0_LEV_14 + rhou0_B0(0,0,0)*AVG_0_0_LEV_11 +
      rhou1_B0(0,0,0)*AVG_0_0_LEV_12 + rhou2_B0(0,0,0)*AVG_0_0_LEV_13;

   CS_22 = rho_B0(0,0,0)*AVG_0_0_LEV_20 + rhou0_B0(0,0,0)*AVG_0_0_LEV_21 + rhou1_B0(0,0,0)*AVG_0_0_LEV_22;

    CS_32 = rho_B0(0,0,0)*AVG_0_0_LEV_30 + rhoE_B0(0,0,0)*AVG_0_0_LEV_34 + rhou0_B0(0,0,0)*AVG_0_0_LEV_31 +
      rhou1_B0(0,0,0)*AVG_0_0_LEV_32 + rhou2_B0(0,0,0)*AVG_0_0_LEV_33;

    CS_42 = rho_B0(0,0,0)*AVG_0_0_LEV_40 + rhoE_B0(0,0,0)*AVG_0_0_LEV_44 + rhou0_B0(0,0,0)*AVG_0_0_LEV_41 +
      rhou1_B0(0,0,0)*AVG_0_0_LEV_42 + rhou2_B0(0,0,0)*AVG_0_0_LEV_43;

    CF_03 = (p_B0(1,0,0)*U0_B0(1,0,0)*AVG_0_0_LEV_04 + p_B0(1,0,0)*D00_B0(1,0,0)*AVG_0_0_LEV_01 +
      p_B0(1,0,0)*D01_B0(1,0,0)*AVG_0_0_LEV_02 + U0_B0(1,0,0)*rho_B0(1,0,0)*AVG_0_0_LEV_00 +
      U0_B0(1,0,0)*rhoE_B0(1,0,0)*AVG_0_0_LEV_04 + U0_B0(1,0,0)*rhou0_B0(1,0,0)*AVG_0_0_LEV_01 +
      U0_B0(1,0,0)*rhou1_B0(1,0,0)*AVG_0_0_LEV_02 + U0_B0(1,0,0)*rhou2_B0(1,0,0)*AVG_0_0_LEV_03)*detJ_B0(1,0,0);

    CF_13 = (p_B0(1,0,0)*U0_B0(1,0,0)*AVG_0_0_LEV_14 + p_B0(1,0,0)*D00_B0(1,0,0)*AVG_0_0_LEV_11 +
      p_B0(1,0,0)*D01_B0(1,0,0)*AVG_0_0_LEV_12 + U0_B0(1,0,0)*rho_B0(1,0,0)*AVG_0_0_LEV_10 +
      U0_B0(1,0,0)*rhoE_B0(1,0,0)*AVG_0_0_LEV_14 + U0_B0(1,0,0)*rhou0_B0(1,0,0)*AVG_0_0_LEV_11 +
      U0_B0(1,0,0)*rhou1_B0(1,0,0)*AVG_0_0_LEV_12 + U0_B0(1,0,0)*rhou2_B0(1,0,0)*AVG_0_0_LEV_13)*detJ_B0(1,0,0);

    CF_23 = (p_B0(1,0,0)*D00_B0(1,0,0)*AVG_0_0_LEV_21 + p_B0(1,0,0)*D01_B0(1,0,0)*AVG_0_0_LEV_22 +
      U0_B0(1,0,0)*rho_B0(1,0,0)*AVG_0_0_LEV_20 + U0_B0(1,0,0)*rhou0_B0(1,0,0)*AVG_0_0_LEV_21 +
      U0_B0(1,0,0)*rhou1_B0(1,0,0)*AVG_0_0_LEV_22)*detJ_B0(1,0,0);

    CF_33 = (p_B0(1,0,0)*U0_B0(1,0,0)*AVG_0_0_LEV_34 + p_B0(1,0,0)*D00_B0(1,0,0)*AVG_0_0_LEV_31 +
      p_B0(1,0,0)*D01_B0(1,0,0)*AVG_0_0_LEV_32 + U0_B0(1,0,0)*rho_B0(1,0,0)*AVG_0_0_LEV_30 +
      U0_B0(1,0,0)*rhoE_B0(1,0,0)*AVG_0_0_LEV_34 + U0_B0(1,0,0)*rhou0_B0(1,0,0)*AVG_0_0_LEV_31 +
      U0_B0(1,0,0)*rhou1_B0(1,0,0)*AVG_0_0_LEV_32 + U0_B0(1,0,0)*rhou2_B0(1,0,0)*AVG_0_0_LEV_33)*detJ_B0(1,0,0);

    CF_43 = (p_B0(1,0,0)*U0_B0(1,0,0)*AVG_0_0_LEV_44 + p_B0(1,0,0)*D00_B0(1,0,0)*AVG_0_0_LEV_41 +
      p_B0(1,0,0)*D01_B0(1,0,0)*AVG_0_0_LEV_42 + U0_B0(1,0,0)*rho_B0(1,0,0)*AVG_0_0_LEV_40 +
      U0_B0(1,0,0)*rhoE_B0(1,0,0)*AVG_0_0_LEV_44 + U0_B0(1,0,0)*rhou0_B0(1,0,0)*AVG_0_0_LEV_41 +
      U0_B0(1,0,0)*rhou1_B0(1,0,0)*AVG_0_0_LEV_42 + U0_B0(1,0,0)*rhou2_B0(1,0,0)*AVG_0_0_LEV_43)*detJ_B0(1,0,0);

    CS_03 = rho_B0(1,0,0)*AVG_0_0_LEV_00 + rhoE_B0(1,0,0)*AVG_0_0_LEV_04 + rhou0_B0(1,0,0)*AVG_0_0_LEV_01 +
      rhou1_B0(1,0,0)*AVG_0_0_LEV_02 + rhou2_B0(1,0,0)*AVG_0_0_LEV_03;

    CS_13 = rho_B0(1,0,0)*AVG_0_0_LEV_10 + rhoE_B0(1,0,0)*AVG_0_0_LEV_14 + rhou0_B0(1,0,0)*AVG_0_0_LEV_11 +
      rhou1_B0(1,0,0)*AVG_0_0_LEV_12 + rhou2_B0(1,0,0)*AVG_0_0_LEV_13;

   CS_23 = rho_B0(1,0,0)*AVG_0_0_LEV_20 + rhou0_B0(1,0,0)*AVG_0_0_LEV_21 + rhou1_B0(1,0,0)*AVG_0_0_LEV_22;

    CS_33 = rho_B0(1,0,0)*AVG_0_0_LEV_30 + rhoE_B0(1,0,0)*AVG_0_0_LEV_34 + rhou0_B0(1,0,0)*AVG_0_0_LEV_31 +
      rhou1_B0(1,0,0)*AVG_0_0_LEV_32 + rhou2_B0(1,0,0)*AVG_0_0_LEV_33;

    CS_43 = rho_B0(1,0,0)*AVG_0_0_LEV_40 + rhoE_B0(1,0,0)*AVG_0_0_LEV_44 + rhou0_B0(1,0,0)*AVG_0_0_LEV_41 +
      rhou1_B0(1,0,0)*AVG_0_0_LEV_42 + rhou2_B0(1,0,0)*AVG_0_0_LEV_43;

    CF_04 = (p_B0(2,0,0)*U0_B0(2,0,0)*AVG_0_0_LEV_04 + p_B0(2,0,0)*D00_B0(2,0,0)*AVG_0_0_LEV_01 +
      p_B0(2,0,0)*D01_B0(2,0,0)*AVG_0_0_LEV_02 + U0_B0(2,0,0)*rho_B0(2,0,0)*AVG_0_0_LEV_00 +
      U0_B0(2,0,0)*rhoE_B0(2,0,0)*AVG_0_0_LEV_04 + U0_B0(2,0,0)*rhou0_B0(2,0,0)*AVG_0_0_LEV_01 +
      U0_B0(2,0,0)*rhou1_B0(2,0,0)*AVG_0_0_LEV_02 + U0_B0(2,0,0)*rhou2_B0(2,0,0)*AVG_0_0_LEV_03)*detJ_B0(2,0,0);

    CF_14 = (p_B0(2,0,0)*U0_B0(2,0,0)*AVG_0_0_LEV_14 + p_B0(2,0,0)*D00_B0(2,0,0)*AVG_0_0_LEV_11 +
      p_B0(2,0,0)*D01_B0(2,0,0)*AVG_0_0_LEV_12 + U0_B0(2,0,0)*rho_B0(2,0,0)*AVG_0_0_LEV_10 +
      U0_B0(2,0,0)*rhoE_B0(2,0,0)*AVG_0_0_LEV_14 + U0_B0(2,0,0)*rhou0_B0(2,0,0)*AVG_0_0_LEV_11 +
      U0_B0(2,0,0)*rhou1_B0(2,0,0)*AVG_0_0_LEV_12 + U0_B0(2,0,0)*rhou2_B0(2,0,0)*AVG_0_0_LEV_13)*detJ_B0(2,0,0);

    CF_24 = (p_B0(2,0,0)*D00_B0(2,0,0)*AVG_0_0_LEV_21 + p_B0(2,0,0)*D01_B0(2,0,0)*AVG_0_0_LEV_22 +
      U0_B0(2,0,0)*rho_B0(2,0,0)*AVG_0_0_LEV_20 + U0_B0(2,0,0)*rhou0_B0(2,0,0)*AVG_0_0_LEV_21 +
      U0_B0(2,0,0)*rhou1_B0(2,0,0)*AVG_0_0_LEV_22)*detJ_B0(2,0,0);

    CF_34 = (p_B0(2,0,0)*U0_B0(2,0,0)*AVG_0_0_LEV_34 + p_B0(2,0,0)*D00_B0(2,0,0)*AVG_0_0_LEV_31 +
      p_B0(2,0,0)*D01_B0(2,0,0)*AVG_0_0_LEV_32 + U0_B0(2,0,0)*rho_B0(2,0,0)*AVG_0_0_LEV_30 +
      U0_B0(2,0,0)*rhoE_B0(2,0,0)*AVG_0_0_LEV_34 + U0_B0(2,0,0)*rhou0_B0(2,0,0)*AVG_0_0_LEV_31 +
      U0_B0(2,0,0)*rhou1_B0(2,0,0)*AVG_0_0_LEV_32 + U0_B0(2,0,0)*rhou2_B0(2,0,0)*AVG_0_0_LEV_33)*detJ_B0(2,0,0);

    CF_44 = (p_B0(2,0,0)*U0_B0(2,0,0)*AVG_0_0_LEV_44 + p_B0(2,0,0)*D00_B0(2,0,0)*AVG_0_0_LEV_41 +
      p_B0(2,0,0)*D01_B0(2,0,0)*AVG_0_0_LEV_42 + U0_B0(2,0,0)*rho_B0(2,0,0)*AVG_0_0_LEV_40 +
      U0_B0(2,0,0)*rhoE_B0(2,0,0)*AVG_0_0_LEV_44 + U0_B0(2,0,0)*rhou0_B0(2,0,0)*AVG_0_0_LEV_41 +
      U0_B0(2,0,0)*rhou1_B0(2,0,0)*AVG_0_0_LEV_42 + U0_B0(2,0,0)*rhou2_B0(2,0,0)*AVG_0_0_LEV_43)*detJ_B0(2,0,0);

    CS_04 = rho_B0(2,0,0)*AVG_0_0_LEV_00 + rhoE_B0(2,0,0)*AVG_0_0_LEV_04 + rhou0_B0(2,0,0)*AVG_0_0_LEV_01 +
      rhou1_B0(2,0,0)*AVG_0_0_LEV_02 + rhou2_B0(2,0,0)*AVG_0_0_LEV_03;

    CS_14 = rho_B0(2,0,0)*AVG_0_0_LEV_10 + rhoE_B0(2,0,0)*AVG_0_0_LEV_14 + rhou0_B0(2,0,0)*AVG_0_0_LEV_11 +
      rhou1_B0(2,0,0)*AVG_0_0_LEV_12 + rhou2_B0(2,0,0)*AVG_0_0_LEV_13;

   CS_24 = rho_B0(2,0,0)*AVG_0_0_LEV_20 + rhou0_B0(2,0,0)*AVG_0_0_LEV_21 + rhou1_B0(2,0,0)*AVG_0_0_LEV_22;

    CS_34 = rho_B0(2,0,0)*AVG_0_0_LEV_30 + rhoE_B0(2,0,0)*AVG_0_0_LEV_34 + rhou0_B0(2,0,0)*AVG_0_0_LEV_31 +
      rhou1_B0(2,0,0)*AVG_0_0_LEV_32 + rhou2_B0(2,0,0)*AVG_0_0_LEV_33;

    CS_44 = rho_B0(2,0,0)*AVG_0_0_LEV_40 + rhoE_B0(2,0,0)*AVG_0_0_LEV_44 + rhou0_B0(2,0,0)*AVG_0_0_LEV_41 +
      rhou1_B0(2,0,0)*AVG_0_0_LEV_42 + rhou2_B0(2,0,0)*AVG_0_0_LEV_43;

    CF_05 = (p_B0(3,0,0)*U0_B0(3,0,0)*AVG_0_0_LEV_04 + p_B0(3,0,0)*D00_B0(3,0,0)*AVG_0_0_LEV_01 +
      p_B0(3,0,0)*D01_B0(3,0,0)*AVG_0_0_LEV_02 + U0_B0(3,0,0)*rho_B0(3,0,0)*AVG_0_0_LEV_00 +
      U0_B0(3,0,0)*rhoE_B0(3,0,0)*AVG_0_0_LEV_04 + U0_B0(3,0,0)*rhou0_B0(3,0,0)*AVG_0_0_LEV_01 +
      U0_B0(3,0,0)*rhou1_B0(3,0,0)*AVG_0_0_LEV_02 + U0_B0(3,0,0)*rhou2_B0(3,0,0)*AVG_0_0_LEV_03)*detJ_B0(3,0,0);

    CF_15 = (p_B0(3,0,0)*U0_B0(3,0,0)*AVG_0_0_LEV_14 + p_B0(3,0,0)*D00_B0(3,0,0)*AVG_0_0_LEV_11 +
      p_B0(3,0,0)*D01_B0(3,0,0)*AVG_0_0_LEV_12 + U0_B0(3,0,0)*rho_B0(3,0,0)*AVG_0_0_LEV_10 +
      U0_B0(3,0,0)*rhoE_B0(3,0,0)*AVG_0_0_LEV_14 + U0_B0(3,0,0)*rhou0_B0(3,0,0)*AVG_0_0_LEV_11 +
      U0_B0(3,0,0)*rhou1_B0(3,0,0)*AVG_0_0_LEV_12 + U0_B0(3,0,0)*rhou2_B0(3,0,0)*AVG_0_0_LEV_13)*detJ_B0(3,0,0);

    CF_25 = (p_B0(3,0,0)*D00_B0(3,0,0)*AVG_0_0_LEV_21 + p_B0(3,0,0)*D01_B0(3,0,0)*AVG_0_0_LEV_22 +
      U0_B0(3,0,0)*rho_B0(3,0,0)*AVG_0_0_LEV_20 + U0_B0(3,0,0)*rhou0_B0(3,0,0)*AVG_0_0_LEV_21 +
      U0_B0(3,0,0)*rhou1_B0(3,0,0)*AVG_0_0_LEV_22)*detJ_B0(3,0,0);

    CF_35 = (p_B0(3,0,0)*U0_B0(3,0,0)*AVG_0_0_LEV_34 + p_B0(3,0,0)*D00_B0(3,0,0)*AVG_0_0_LEV_31 +
      p_B0(3,0,0)*D01_B0(3,0,0)*AVG_0_0_LEV_32 + U0_B0(3,0,0)*rho_B0(3,0,0)*AVG_0_0_LEV_30 +
      U0_B0(3,0,0)*rhoE_B0(3,0,0)*AVG_0_0_LEV_34 + U0_B0(3,0,0)*rhou0_B0(3,0,0)*AVG_0_0_LEV_31 +
      U0_B0(3,0,0)*rhou1_B0(3,0,0)*AVG_0_0_LEV_32 + U0_B0(3,0,0)*rhou2_B0(3,0,0)*AVG_0_0_LEV_33)*detJ_B0(3,0,0);

    CF_45 = (p_B0(3,0,0)*U0_B0(3,0,0)*AVG_0_0_LEV_44 + p_B0(3,0,0)*D00_B0(3,0,0)*AVG_0_0_LEV_41 +
      p_B0(3,0,0)*D01_B0(3,0,0)*AVG_0_0_LEV_42 + U0_B0(3,0,0)*rho_B0(3,0,0)*AVG_0_0_LEV_40 +
      U0_B0(3,0,0)*rhoE_B0(3,0,0)*AVG_0_0_LEV_44 + U0_B0(3,0,0)*rhou0_B0(3,0,0)*AVG_0_0_LEV_41 +
      U0_B0(3,0,0)*rhou1_B0(3,0,0)*AVG_0_0_LEV_42 + U0_B0(3,0,0)*rhou2_B0(3,0,0)*AVG_0_0_LEV_43)*detJ_B0(3,0,0);

    CS_05 = rho_B0(3,0,0)*AVG_0_0_LEV_00 + rhoE_B0(3,0,0)*AVG_0_0_LEV_04 + rhou0_B0(3,0,0)*AVG_0_0_LEV_01 +
      rhou1_B0(3,0,0)*AVG_0_0_LEV_02 + rhou2_B0(3,0,0)*AVG_0_0_LEV_03;

    CS_15 = rho_B0(3,0,0)*AVG_0_0_LEV_10 + rhoE_B0(3,0,0)*AVG_0_0_LEV_14 + rhou0_B0(3,0,0)*AVG_0_0_LEV_11 +
      rhou1_B0(3,0,0)*AVG_0_0_LEV_12 + rhou2_B0(3,0,0)*AVG_0_0_LEV_13;

   CS_25 = rho_B0(3,0,0)*AVG_0_0_LEV_20 + rhou0_B0(3,0,0)*AVG_0_0_LEV_21 + rhou1_B0(3,0,0)*AVG_0_0_LEV_22;

    CS_35 = rho_B0(3,0,0)*AVG_0_0_LEV_30 + rhoE_B0(3,0,0)*AVG_0_0_LEV_34 + rhou0_B0(3,0,0)*AVG_0_0_LEV_31 +
      rhou1_B0(3,0,0)*AVG_0_0_LEV_32 + rhou2_B0(3,0,0)*AVG_0_0_LEV_33;

    CS_45 = rho_B0(3,0,0)*AVG_0_0_LEV_40 + rhoE_B0(3,0,0)*AVG_0_0_LEV_44 + rhou0_B0(3,0,0)*AVG_0_0_LEV_41 +
      rhou1_B0(3,0,0)*AVG_0_0_LEV_42 + rhou2_B0(3,0,0)*AVG_0_0_LEV_43;

    max_lambda_00 = shock_filter_control*fmax(fabs(u0_B0(0,0,0)*D00_B0(0,0,0)*detJ_B0(0,0,0) +
      u1_B0(0,0,0)*D01_B0(0,0,0)*detJ_B0(0,0,0)), fabs(u0_B0(1,0,0)*D00_B0(1,0,0)*detJ_B0(1,0,0) +
      u1_B0(1,0,0)*D01_B0(1,0,0)*detJ_B0(1,0,0)));

   max_lambda_11 = max_lambda_00;

   max_lambda_22 = max_lambda_00;

    max_lambda_33 = shock_filter_control*fmax(fabs(sqrt((D00_B0(0,0,0)*D00_B0(0,0,0))*(detJ_B0(0,0,0)*detJ_B0(0,0,0)) +
      (D01_B0(0,0,0)*D01_B0(0,0,0))*(detJ_B0(0,0,0)*detJ_B0(0,0,0)))*a_B0(0,0,0) +
      u0_B0(0,0,0)*D00_B0(0,0,0)*detJ_B0(0,0,0) + u1_B0(0,0,0)*D01_B0(0,0,0)*detJ_B0(0,0,0)),
      fabs(sqrt((D00_B0(1,0,0)*D00_B0(1,0,0))*(detJ_B0(1,0,0)*detJ_B0(1,0,0)) +
      (D01_B0(1,0,0)*D01_B0(1,0,0))*(detJ_B0(1,0,0)*detJ_B0(1,0,0)))*a_B0(1,0,0) +
      u0_B0(1,0,0)*D00_B0(1,0,0)*detJ_B0(1,0,0) + u1_B0(1,0,0)*D01_B0(1,0,0)*detJ_B0(1,0,0)));

    max_lambda_44 = shock_filter_control*fmax(fabs(-sqrt((D00_B0(0,0,0)*D00_B0(0,0,0))*(detJ_B0(0,0,0)*detJ_B0(0,0,0)) +
      (D01_B0(0,0,0)*D01_B0(0,0,0))*(detJ_B0(0,0,0)*detJ_B0(0,0,0)))*a_B0(0,0,0) +
      u0_B0(0,0,0)*D00_B0(0,0,0)*detJ_B0(0,0,0) + u1_B0(0,0,0)*D01_B0(0,0,0)*detJ_B0(0,0,0)),
      fabs(-sqrt((D00_B0(1,0,0)*D00_B0(1,0,0))*(detJ_B0(1,0,0)*detJ_B0(1,0,0)) +
      (D01_B0(1,0,0)*D01_B0(1,0,0))*(detJ_B0(1,0,0)*detJ_B0(1,0,0)))*a_B0(1,0,0) +
      u0_B0(1,0,0)*D00_B0(1,0,0)*detJ_B0(1,0,0) + u1_B0(1,0,0)*D01_B0(1,0,0)*detJ_B0(1,0,0)));

    beta_0 = ((1.0/4.0))*((((1.0/2.0))*(CS_01*max_lambda_00 + CF_01) - (1.0/2.0)*(CS_03*max_lambda_00 +
      CF_03))*(((1.0/2.0))*(CS_01*max_lambda_00 + CF_01) - (1.0/2.0)*(CS_03*max_lambda_00 + CF_03))) +
      ((13.0/12.0))*((((1.0/2.0))*(CS_01*max_lambda_00 + CF_01) + ((1.0/2.0))*(CS_03*max_lambda_00 + CF_03) -
      (CS_02*max_lambda_00 + CF_02))*(((1.0/2.0))*(CS_01*max_lambda_00 + CF_01) + ((1.0/2.0))*(CS_03*max_lambda_00 +
      CF_03) - (CS_02*max_lambda_00 + CF_02)));

    beta_1 = ((1.0/4.0))*((((1.0/2.0))*(CS_04*max_lambda_00 + CF_04) - 2*(CS_03*max_lambda_00 + CF_03) +
      ((3.0/2.0))*(CS_02*max_lambda_00 + CF_02))*(((1.0/2.0))*(CS_04*max_lambda_00 + CF_04) - 2*(CS_03*max_lambda_00 +
      CF_03) + ((3.0/2.0))*(CS_02*max_lambda_00 + CF_02))) + ((13.0/12.0))*((((1.0/2.0))*(CS_02*max_lambda_00 + CF_02) +
      ((1.0/2.0))*(CS_04*max_lambda_00 + CF_04) - (CS_03*max_lambda_00 + CF_03))*(((1.0/2.0))*(CS_02*max_lambda_00 +
      CF_02) + ((1.0/2.0))*(CS_04*max_lambda_00 + CF_04) - (CS_03*max_lambda_00 + CF_03)));

    beta_2 = ((1.0/4.0))*((((1.0/2.0))*(CS_00*max_lambda_00 + CF_00) - 2*(CS_01*max_lambda_00 + CF_01) +
      ((3.0/2.0))*(CS_02*max_lambda_00 + CF_02))*(((1.0/2.0))*(CS_00*max_lambda_00 + CF_00) - 2*(CS_01*max_lambda_00 +
      CF_01) + ((3.0/2.0))*(CS_02*max_lambda_00 + CF_02))) + ((13.0/12.0))*((((1.0/2.0))*(CS_00*max_lambda_00 + CF_00) +
      ((1.0/2.0))*(CS_02*max_lambda_00 + CF_02) - (CS_01*max_lambda_00 + CF_01))*(((1.0/2.0))*(CS_00*max_lambda_00 +
      CF_00) + ((1.0/2.0))*(CS_02*max_lambda_00 + CF_02) - (CS_01*max_lambda_00 + CF_01)));

    beta_3 = -(781.0/480.0)*(CS_04*max_lambda_00 + CF_04) - (781.0/1440.0)*(CS_02*max_lambda_00 + CF_02) +
      ((1.0/36.0))*((9*(CS_03*max_lambda_00 + CF_03) - (11.0/2.0)*(CS_02*max_lambda_00 + CF_02) -
      (9.0/2.0)*(CS_04*max_lambda_00 + CF_04) + CS_05*max_lambda_00 + CF_05)*(9*(CS_03*max_lambda_00 + CF_03) -
      (11.0/2.0)*(CS_02*max_lambda_00 + CF_02) - (9.0/2.0)*(CS_04*max_lambda_00 + CF_04) + CS_05*max_lambda_00 + CF_05))
      + ((13.0/12.0))*((2*(CS_04*max_lambda_00 + CF_04) - (5.0/2.0)*(CS_03*max_lambda_00 + CF_03) -
      (1.0/2.0)*(CS_05*max_lambda_00 + CF_05) + CS_02*max_lambda_00 + CF_02)*(2*(CS_04*max_lambda_00 + CF_04) -
      (5.0/2.0)*(CS_03*max_lambda_00 + CF_03) - (1.0/2.0)*(CS_05*max_lambda_00 + CF_05) + CS_02*max_lambda_00 + CF_02))
      + ((781.0/480.0))*(CS_03*max_lambda_00 + CF_03) + ((781.0/1440.0))*(CS_05*max_lambda_00 + CF_05);

   inv_beta_0 = 1.0/(eps + beta_0);

   inv_beta_1 = 1.0/(eps + beta_1);

   inv_beta_2 = 1.0/(eps + beta_2);

   inv_beta_3 = 1.0/(eps + beta_3);

    alpha_0 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0));

    alpha_1 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1));

    alpha_2 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2));

    alpha_3 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3));

   inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2 + alpha_3));

   delta_0 = ((alpha_0*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_1 = ((alpha_1*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_2 = ((alpha_2*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_3 = ((alpha_3*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

    inv_omega_sum = 1.0/((((3.0/10.0))*delta_1 + ((23.0/125.0))*delta_3 + ((27.0/500.0))*delta_2 +
      ((231.0/500.0))*delta_0));

    Recon_0 = ((3.0/10.0))*(-(1.0/12.0)*(CS_04*max_lambda_00 + CF_04) + ((1.0/6.0))*(CS_02*max_lambda_00 + CF_02) +
      ((5.0/12.0))*(CS_03*max_lambda_00 + CF_03))*delta_1*inv_omega_sum +
      ((23.0/125.0))*(-(5.0/24.0)*(CS_04*max_lambda_00 + CF_04) + ((1.0/8.0))*(CS_02*max_lambda_00 + CF_02) +
      ((1.0/24.0))*(CS_05*max_lambda_00 + CF_05) + ((13.0/24.0))*(CS_03*max_lambda_00 + CF_03))*delta_3*inv_omega_sum +
      ((27.0/500.0))*(-(7.0/12.0)*(CS_01*max_lambda_00 + CF_01) + ((1.0/6.0))*(CS_00*max_lambda_00 + CF_00) +
      ((11.0/12.0))*(CS_02*max_lambda_00 + CF_02))*delta_2*inv_omega_sum +
      ((231.0/500.0))*(-(1.0/12.0)*(CS_01*max_lambda_00 + CF_01) + ((1.0/6.0))*(CS_03*max_lambda_00 + CF_03) +
      ((5.0/12.0))*(CS_02*max_lambda_00 + CF_02))*delta_0*inv_omega_sum + Recon_0;

    beta_0 = ((1.0/4.0))*((((1.0/2.0))*(-CS_02*max_lambda_00 + CF_02) - (1.0/2.0)*(-CS_04*max_lambda_00 +
      CF_04))*(((1.0/2.0))*(-CS_02*max_lambda_00 + CF_02) - (1.0/2.0)*(-CS_04*max_lambda_00 + CF_04))) +
      ((13.0/12.0))*((((1.0/2.0))*(-CS_02*max_lambda_00 + CF_02) + ((1.0/2.0))*(-CS_04*max_lambda_00 + CF_04) -
      (-CS_03*max_lambda_00 + CF_03))*(((1.0/2.0))*(-CS_02*max_lambda_00 + CF_02) + ((1.0/2.0))*(-CS_04*max_lambda_00 +
      CF_04) - (-CS_03*max_lambda_00 + CF_03)));

    beta_1 = ((1.0/4.0))*((((1.0/2.0))*(-CS_01*max_lambda_00 + CF_01) - 2*(-CS_02*max_lambda_00 + CF_02) +
      ((3.0/2.0))*(-CS_03*max_lambda_00 + CF_03))*(((1.0/2.0))*(-CS_01*max_lambda_00 + CF_01) - 2*(-CS_02*max_lambda_00
      + CF_02) + ((3.0/2.0))*(-CS_03*max_lambda_00 + CF_03))) + ((13.0/12.0))*((((1.0/2.0))*(-CS_01*max_lambda_00 +
      CF_01) + ((1.0/2.0))*(-CS_03*max_lambda_00 + CF_03) - (-CS_02*max_lambda_00 +
      CF_02))*(((1.0/2.0))*(-CS_01*max_lambda_00 + CF_01) + ((1.0/2.0))*(-CS_03*max_lambda_00 + CF_03) -
      (-CS_02*max_lambda_00 + CF_02)));

    beta_2 = ((1.0/4.0))*((((1.0/2.0))*(-CS_05*max_lambda_00 + CF_05) - 2*(-CS_04*max_lambda_00 + CF_04) +
      ((3.0/2.0))*(-CS_03*max_lambda_00 + CF_03))*(((1.0/2.0))*(-CS_05*max_lambda_00 + CF_05) - 2*(-CS_04*max_lambda_00
      + CF_04) + ((3.0/2.0))*(-CS_03*max_lambda_00 + CF_03))) + ((13.0/12.0))*((((1.0/2.0))*(-CS_03*max_lambda_00 +
      CF_03) + ((1.0/2.0))*(-CS_05*max_lambda_00 + CF_05) - (-CS_04*max_lambda_00 +
      CF_04))*(((1.0/2.0))*(-CS_03*max_lambda_00 + CF_03) + ((1.0/2.0))*(-CS_05*max_lambda_00 + CF_05) -
      (-CS_04*max_lambda_00 + CF_04)));

    beta_3 = ((1.0/36.0))*((-(-CS_00*max_lambda_00 + CF_00) - 9*(-CS_02*max_lambda_00 + CF_02) +
      ((9.0/2.0))*(-CS_01*max_lambda_00 + CF_01) + ((11.0/2.0))*(-CS_03*max_lambda_00 + CF_03))*(-(-CS_00*max_lambda_00
      + CF_00) - 9*(-CS_02*max_lambda_00 + CF_02) + ((9.0/2.0))*(-CS_01*max_lambda_00 + CF_01) +
      ((11.0/2.0))*(-CS_03*max_lambda_00 + CF_03))) + ((13.0/12.0))*((2*(-CS_01*max_lambda_00 + CF_01) -
      (5.0/2.0)*(-CS_02*max_lambda_00 + CF_02) - (1.0/2.0)*(-CS_00*max_lambda_00 + CF_00) - CS_03*max_lambda_00 +
      CF_03)*(2*(-CS_01*max_lambda_00 + CF_01) - (5.0/2.0)*(-CS_02*max_lambda_00 + CF_02) -
      (1.0/2.0)*(-CS_00*max_lambda_00 + CF_00) - CS_03*max_lambda_00 + CF_03)) +
      ((781.0/720.0))*((((1.0/2.0))*(-CS_03*max_lambda_00 + CF_03) - (3.0/2.0)*(-CS_02*max_lambda_00 + CF_02) -
      (1.0/2.0)*(-CS_00*max_lambda_00 + CF_00) + ((3.0/2.0))*(-CS_01*max_lambda_00 +
      CF_01))*(((1.0/2.0))*(-CS_03*max_lambda_00 + CF_03) - (3.0/2.0)*(-CS_02*max_lambda_00 + CF_02) -
      (1.0/2.0)*(-CS_00*max_lambda_00 + CF_00) + ((3.0/2.0))*(-CS_01*max_lambda_00 + CF_01)));

   inv_beta_0 = 1.0/(eps + beta_0);

   inv_beta_1 = 1.0/(eps + beta_1);

   inv_beta_2 = 1.0/(eps + beta_2);

   inv_beta_3 = 1.0/(eps + beta_3);

    alpha_0 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0));

    alpha_1 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1));

    alpha_2 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2));

    alpha_3 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3));

   inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2 + alpha_3));

   delta_0 = ((alpha_0*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_1 = ((alpha_1*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_2 = ((alpha_2*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_3 = ((alpha_3*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

    inv_omega_sum = 1.0/((((3.0/10.0))*delta_1 + ((23.0/125.0))*delta_3 + ((27.0/500.0))*delta_2 +
      ((231.0/500.0))*delta_0));

    Recon_0 = ((3.0/10.0))*(-(1.0/12.0)*(-CS_01*max_lambda_00 + CF_01) + ((1.0/6.0))*(-CS_03*max_lambda_00 + CF_03) +
      ((5.0/12.0))*(-CS_02*max_lambda_00 + CF_02))*delta_1*inv_omega_sum +
      ((23.0/125.0))*(-(5.0/24.0)*(-CS_01*max_lambda_00 + CF_01) + ((1.0/8.0))*(-CS_03*max_lambda_00 + CF_03) +
      ((1.0/24.0))*(-CS_00*max_lambda_00 + CF_00) + ((13.0/24.0))*(-CS_02*max_lambda_00 + CF_02))*delta_3*inv_omega_sum
      + ((27.0/500.0))*(-(7.0/12.0)*(-CS_04*max_lambda_00 + CF_04) + ((1.0/6.0))*(-CS_05*max_lambda_00 + CF_05) +
      ((11.0/12.0))*(-CS_03*max_lambda_00 + CF_03))*delta_2*inv_omega_sum +
      ((231.0/500.0))*(-(1.0/12.0)*(-CS_04*max_lambda_00 + CF_04) + ((1.0/6.0))*(-CS_02*max_lambda_00 + CF_02) +
      ((5.0/12.0))*(-CS_03*max_lambda_00 + CF_03))*delta_0*inv_omega_sum + Recon_0;

    beta_0 = ((1.0/4.0))*((((1.0/2.0))*(CS_11*max_lambda_11 + CF_11) - (1.0/2.0)*(CS_13*max_lambda_11 +
      CF_13))*(((1.0/2.0))*(CS_11*max_lambda_11 + CF_11) - (1.0/2.0)*(CS_13*max_lambda_11 + CF_13))) +
      ((13.0/12.0))*((((1.0/2.0))*(CS_11*max_lambda_11 + CF_11) + ((1.0/2.0))*(CS_13*max_lambda_11 + CF_13) -
      (CS_12*max_lambda_11 + CF_12))*(((1.0/2.0))*(CS_11*max_lambda_11 + CF_11) + ((1.0/2.0))*(CS_13*max_lambda_11 +
      CF_13) - (CS_12*max_lambda_11 + CF_12)));

    beta_1 = ((1.0/4.0))*((((1.0/2.0))*(CS_14*max_lambda_11 + CF_14) - 2*(CS_13*max_lambda_11 + CF_13) +
      ((3.0/2.0))*(CS_12*max_lambda_11 + CF_12))*(((1.0/2.0))*(CS_14*max_lambda_11 + CF_14) - 2*(CS_13*max_lambda_11 +
      CF_13) + ((3.0/2.0))*(CS_12*max_lambda_11 + CF_12))) + ((13.0/12.0))*((((1.0/2.0))*(CS_12*max_lambda_11 + CF_12) +
      ((1.0/2.0))*(CS_14*max_lambda_11 + CF_14) - (CS_13*max_lambda_11 + CF_13))*(((1.0/2.0))*(CS_12*max_lambda_11 +
      CF_12) + ((1.0/2.0))*(CS_14*max_lambda_11 + CF_14) - (CS_13*max_lambda_11 + CF_13)));

    beta_2 = ((1.0/4.0))*((((1.0/2.0))*(CS_10*max_lambda_11 + CF_10) - 2*(CS_11*max_lambda_11 + CF_11) +
      ((3.0/2.0))*(CS_12*max_lambda_11 + CF_12))*(((1.0/2.0))*(CS_10*max_lambda_11 + CF_10) - 2*(CS_11*max_lambda_11 +
      CF_11) + ((3.0/2.0))*(CS_12*max_lambda_11 + CF_12))) + ((13.0/12.0))*((((1.0/2.0))*(CS_10*max_lambda_11 + CF_10) +
      ((1.0/2.0))*(CS_12*max_lambda_11 + CF_12) - (CS_11*max_lambda_11 + CF_11))*(((1.0/2.0))*(CS_10*max_lambda_11 +
      CF_10) + ((1.0/2.0))*(CS_12*max_lambda_11 + CF_12) - (CS_11*max_lambda_11 + CF_11)));

    beta_3 = -(781.0/480.0)*(CS_14*max_lambda_11 + CF_14) - (781.0/1440.0)*(CS_12*max_lambda_11 + CF_12) +
      ((1.0/36.0))*((9*(CS_13*max_lambda_11 + CF_13) - (11.0/2.0)*(CS_12*max_lambda_11 + CF_12) -
      (9.0/2.0)*(CS_14*max_lambda_11 + CF_14) + CS_15*max_lambda_11 + CF_15)*(9*(CS_13*max_lambda_11 + CF_13) -
      (11.0/2.0)*(CS_12*max_lambda_11 + CF_12) - (9.0/2.0)*(CS_14*max_lambda_11 + CF_14) + CS_15*max_lambda_11 + CF_15))
      + ((13.0/12.0))*((2*(CS_14*max_lambda_11 + CF_14) - (5.0/2.0)*(CS_13*max_lambda_11 + CF_13) -
      (1.0/2.0)*(CS_15*max_lambda_11 + CF_15) + CS_12*max_lambda_11 + CF_12)*(2*(CS_14*max_lambda_11 + CF_14) -
      (5.0/2.0)*(CS_13*max_lambda_11 + CF_13) - (1.0/2.0)*(CS_15*max_lambda_11 + CF_15) + CS_12*max_lambda_11 + CF_12))
      + ((781.0/480.0))*(CS_13*max_lambda_11 + CF_13) + ((781.0/1440.0))*(CS_15*max_lambda_11 + CF_15);

   inv_beta_0 = 1.0/(eps + beta_0);

   inv_beta_1 = 1.0/(eps + beta_1);

   inv_beta_2 = 1.0/(eps + beta_2);

   inv_beta_3 = 1.0/(eps + beta_3);

    alpha_0 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0));

    alpha_1 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1));

    alpha_2 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2));

    alpha_3 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3));

   inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2 + alpha_3));

   delta_0 = ((alpha_0*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_1 = ((alpha_1*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_2 = ((alpha_2*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_3 = ((alpha_3*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

    inv_omega_sum = 1.0/((((3.0/10.0))*delta_1 + ((23.0/125.0))*delta_3 + ((27.0/500.0))*delta_2 +
      ((231.0/500.0))*delta_0));

    Recon_1 = ((3.0/10.0))*(-(1.0/12.0)*(CS_14*max_lambda_11 + CF_14) + ((1.0/6.0))*(CS_12*max_lambda_11 + CF_12) +
      ((5.0/12.0))*(CS_13*max_lambda_11 + CF_13))*delta_1*inv_omega_sum +
      ((23.0/125.0))*(-(5.0/24.0)*(CS_14*max_lambda_11 + CF_14) + ((1.0/8.0))*(CS_12*max_lambda_11 + CF_12) +
      ((1.0/24.0))*(CS_15*max_lambda_11 + CF_15) + ((13.0/24.0))*(CS_13*max_lambda_11 + CF_13))*delta_3*inv_omega_sum +
      ((27.0/500.0))*(-(7.0/12.0)*(CS_11*max_lambda_11 + CF_11) + ((1.0/6.0))*(CS_10*max_lambda_11 + CF_10) +
      ((11.0/12.0))*(CS_12*max_lambda_11 + CF_12))*delta_2*inv_omega_sum +
      ((231.0/500.0))*(-(1.0/12.0)*(CS_11*max_lambda_11 + CF_11) + ((1.0/6.0))*(CS_13*max_lambda_11 + CF_13) +
      ((5.0/12.0))*(CS_12*max_lambda_11 + CF_12))*delta_0*inv_omega_sum + Recon_1;

    beta_0 = ((1.0/4.0))*((((1.0/2.0))*(-CS_12*max_lambda_11 + CF_12) - (1.0/2.0)*(-CS_14*max_lambda_11 +
      CF_14))*(((1.0/2.0))*(-CS_12*max_lambda_11 + CF_12) - (1.0/2.0)*(-CS_14*max_lambda_11 + CF_14))) +
      ((13.0/12.0))*((((1.0/2.0))*(-CS_12*max_lambda_11 + CF_12) + ((1.0/2.0))*(-CS_14*max_lambda_11 + CF_14) -
      (-CS_13*max_lambda_11 + CF_13))*(((1.0/2.0))*(-CS_12*max_lambda_11 + CF_12) + ((1.0/2.0))*(-CS_14*max_lambda_11 +
      CF_14) - (-CS_13*max_lambda_11 + CF_13)));

    beta_1 = ((1.0/4.0))*((((1.0/2.0))*(-CS_11*max_lambda_11 + CF_11) - 2*(-CS_12*max_lambda_11 + CF_12) +
      ((3.0/2.0))*(-CS_13*max_lambda_11 + CF_13))*(((1.0/2.0))*(-CS_11*max_lambda_11 + CF_11) - 2*(-CS_12*max_lambda_11
      + CF_12) + ((3.0/2.0))*(-CS_13*max_lambda_11 + CF_13))) + ((13.0/12.0))*((((1.0/2.0))*(-CS_11*max_lambda_11 +
      CF_11) + ((1.0/2.0))*(-CS_13*max_lambda_11 + CF_13) - (-CS_12*max_lambda_11 +
      CF_12))*(((1.0/2.0))*(-CS_11*max_lambda_11 + CF_11) + ((1.0/2.0))*(-CS_13*max_lambda_11 + CF_13) -
      (-CS_12*max_lambda_11 + CF_12)));

    beta_2 = ((1.0/4.0))*((((1.0/2.0))*(-CS_15*max_lambda_11 + CF_15) - 2*(-CS_14*max_lambda_11 + CF_14) +
      ((3.0/2.0))*(-CS_13*max_lambda_11 + CF_13))*(((1.0/2.0))*(-CS_15*max_lambda_11 + CF_15) - 2*(-CS_14*max_lambda_11
      + CF_14) + ((3.0/2.0))*(-CS_13*max_lambda_11 + CF_13))) + ((13.0/12.0))*((((1.0/2.0))*(-CS_13*max_lambda_11 +
      CF_13) + ((1.0/2.0))*(-CS_15*max_lambda_11 + CF_15) - (-CS_14*max_lambda_11 +
      CF_14))*(((1.0/2.0))*(-CS_13*max_lambda_11 + CF_13) + ((1.0/2.0))*(-CS_15*max_lambda_11 + CF_15) -
      (-CS_14*max_lambda_11 + CF_14)));

    beta_3 = ((1.0/36.0))*((-(-CS_10*max_lambda_11 + CF_10) - 9*(-CS_12*max_lambda_11 + CF_12) +
      ((9.0/2.0))*(-CS_11*max_lambda_11 + CF_11) + ((11.0/2.0))*(-CS_13*max_lambda_11 + CF_13))*(-(-CS_10*max_lambda_11
      + CF_10) - 9*(-CS_12*max_lambda_11 + CF_12) + ((9.0/2.0))*(-CS_11*max_lambda_11 + CF_11) +
      ((11.0/2.0))*(-CS_13*max_lambda_11 + CF_13))) + ((13.0/12.0))*((2*(-CS_11*max_lambda_11 + CF_11) -
      (5.0/2.0)*(-CS_12*max_lambda_11 + CF_12) - (1.0/2.0)*(-CS_10*max_lambda_11 + CF_10) - CS_13*max_lambda_11 +
      CF_13)*(2*(-CS_11*max_lambda_11 + CF_11) - (5.0/2.0)*(-CS_12*max_lambda_11 + CF_12) -
      (1.0/2.0)*(-CS_10*max_lambda_11 + CF_10) - CS_13*max_lambda_11 + CF_13)) +
      ((781.0/720.0))*((((1.0/2.0))*(-CS_13*max_lambda_11 + CF_13) - (3.0/2.0)*(-CS_12*max_lambda_11 + CF_12) -
      (1.0/2.0)*(-CS_10*max_lambda_11 + CF_10) + ((3.0/2.0))*(-CS_11*max_lambda_11 +
      CF_11))*(((1.0/2.0))*(-CS_13*max_lambda_11 + CF_13) - (3.0/2.0)*(-CS_12*max_lambda_11 + CF_12) -
      (1.0/2.0)*(-CS_10*max_lambda_11 + CF_10) + ((3.0/2.0))*(-CS_11*max_lambda_11 + CF_11)));

   inv_beta_0 = 1.0/(eps + beta_0);

   inv_beta_1 = 1.0/(eps + beta_1);

   inv_beta_2 = 1.0/(eps + beta_2);

   inv_beta_3 = 1.0/(eps + beta_3);

    alpha_0 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0));

    alpha_1 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1));

    alpha_2 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2));

    alpha_3 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3));

   inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2 + alpha_3));

   delta_0 = ((alpha_0*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_1 = ((alpha_1*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_2 = ((alpha_2*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_3 = ((alpha_3*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

    inv_omega_sum = 1.0/((((3.0/10.0))*delta_1 + ((23.0/125.0))*delta_3 + ((27.0/500.0))*delta_2 +
      ((231.0/500.0))*delta_0));

    Recon_1 = ((3.0/10.0))*(-(1.0/12.0)*(-CS_11*max_lambda_11 + CF_11) + ((1.0/6.0))*(-CS_13*max_lambda_11 + CF_13) +
      ((5.0/12.0))*(-CS_12*max_lambda_11 + CF_12))*delta_1*inv_omega_sum +
      ((23.0/125.0))*(-(5.0/24.0)*(-CS_11*max_lambda_11 + CF_11) + ((1.0/8.0))*(-CS_13*max_lambda_11 + CF_13) +
      ((1.0/24.0))*(-CS_10*max_lambda_11 + CF_10) + ((13.0/24.0))*(-CS_12*max_lambda_11 + CF_12))*delta_3*inv_omega_sum
      + ((27.0/500.0))*(-(7.0/12.0)*(-CS_14*max_lambda_11 + CF_14) + ((1.0/6.0))*(-CS_15*max_lambda_11 + CF_15) +
      ((11.0/12.0))*(-CS_13*max_lambda_11 + CF_13))*delta_2*inv_omega_sum +
      ((231.0/500.0))*(-(1.0/12.0)*(-CS_14*max_lambda_11 + CF_14) + ((1.0/6.0))*(-CS_12*max_lambda_11 + CF_12) +
      ((5.0/12.0))*(-CS_13*max_lambda_11 + CF_13))*delta_0*inv_omega_sum + Recon_1;

    beta_0 = ((1.0/4.0))*((((1.0/2.0))*(CS_21*max_lambda_22 + CF_21) - (1.0/2.0)*(CS_23*max_lambda_22 +
      CF_23))*(((1.0/2.0))*(CS_21*max_lambda_22 + CF_21) - (1.0/2.0)*(CS_23*max_lambda_22 + CF_23))) +
      ((13.0/12.0))*((((1.0/2.0))*(CS_21*max_lambda_22 + CF_21) + ((1.0/2.0))*(CS_23*max_lambda_22 + CF_23) -
      (CS_22*max_lambda_22 + CF_22))*(((1.0/2.0))*(CS_21*max_lambda_22 + CF_21) + ((1.0/2.0))*(CS_23*max_lambda_22 +
      CF_23) - (CS_22*max_lambda_22 + CF_22)));

    beta_1 = ((1.0/4.0))*((((1.0/2.0))*(CS_24*max_lambda_22 + CF_24) - 2*(CS_23*max_lambda_22 + CF_23) +
      ((3.0/2.0))*(CS_22*max_lambda_22 + CF_22))*(((1.0/2.0))*(CS_24*max_lambda_22 + CF_24) - 2*(CS_23*max_lambda_22 +
      CF_23) + ((3.0/2.0))*(CS_22*max_lambda_22 + CF_22))) + ((13.0/12.0))*((((1.0/2.0))*(CS_22*max_lambda_22 + CF_22) +
      ((1.0/2.0))*(CS_24*max_lambda_22 + CF_24) - (CS_23*max_lambda_22 + CF_23))*(((1.0/2.0))*(CS_22*max_lambda_22 +
      CF_22) + ((1.0/2.0))*(CS_24*max_lambda_22 + CF_24) - (CS_23*max_lambda_22 + CF_23)));

    beta_2 = ((1.0/4.0))*((((1.0/2.0))*(CS_20*max_lambda_22 + CF_20) - 2*(CS_21*max_lambda_22 + CF_21) +
      ((3.0/2.0))*(CS_22*max_lambda_22 + CF_22))*(((1.0/2.0))*(CS_20*max_lambda_22 + CF_20) - 2*(CS_21*max_lambda_22 +
      CF_21) + ((3.0/2.0))*(CS_22*max_lambda_22 + CF_22))) + ((13.0/12.0))*((((1.0/2.0))*(CS_20*max_lambda_22 + CF_20) +
      ((1.0/2.0))*(CS_22*max_lambda_22 + CF_22) - (CS_21*max_lambda_22 + CF_21))*(((1.0/2.0))*(CS_20*max_lambda_22 +
      CF_20) + ((1.0/2.0))*(CS_22*max_lambda_22 + CF_22) - (CS_21*max_lambda_22 + CF_21)));

    beta_3 = -(781.0/480.0)*(CS_24*max_lambda_22 + CF_24) - (781.0/1440.0)*(CS_22*max_lambda_22 + CF_22) +
      ((1.0/36.0))*((9*(CS_23*max_lambda_22 + CF_23) - (11.0/2.0)*(CS_22*max_lambda_22 + CF_22) -
      (9.0/2.0)*(CS_24*max_lambda_22 + CF_24) + CS_25*max_lambda_22 + CF_25)*(9*(CS_23*max_lambda_22 + CF_23) -
      (11.0/2.0)*(CS_22*max_lambda_22 + CF_22) - (9.0/2.0)*(CS_24*max_lambda_22 + CF_24) + CS_25*max_lambda_22 + CF_25))
      + ((13.0/12.0))*((2*(CS_24*max_lambda_22 + CF_24) - (5.0/2.0)*(CS_23*max_lambda_22 + CF_23) -
      (1.0/2.0)*(CS_25*max_lambda_22 + CF_25) + CS_22*max_lambda_22 + CF_22)*(2*(CS_24*max_lambda_22 + CF_24) -
      (5.0/2.0)*(CS_23*max_lambda_22 + CF_23) - (1.0/2.0)*(CS_25*max_lambda_22 + CF_25) + CS_22*max_lambda_22 + CF_22))
      + ((781.0/480.0))*(CS_23*max_lambda_22 + CF_23) + ((781.0/1440.0))*(CS_25*max_lambda_22 + CF_25);

   inv_beta_0 = 1.0/(eps + beta_0);

   inv_beta_1 = 1.0/(eps + beta_1);

   inv_beta_2 = 1.0/(eps + beta_2);

   inv_beta_3 = 1.0/(eps + beta_3);

    alpha_0 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0));

    alpha_1 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1));

    alpha_2 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2));

    alpha_3 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3));

   inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2 + alpha_3));

   delta_0 = ((alpha_0*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_1 = ((alpha_1*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_2 = ((alpha_2*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_3 = ((alpha_3*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

    inv_omega_sum = 1.0/((((3.0/10.0))*delta_1 + ((23.0/125.0))*delta_3 + ((27.0/500.0))*delta_2 +
      ((231.0/500.0))*delta_0));

    Recon_2 = ((3.0/10.0))*(-(1.0/12.0)*(CS_24*max_lambda_22 + CF_24) + ((1.0/6.0))*(CS_22*max_lambda_22 + CF_22) +
      ((5.0/12.0))*(CS_23*max_lambda_22 + CF_23))*delta_1*inv_omega_sum +
      ((23.0/125.0))*(-(5.0/24.0)*(CS_24*max_lambda_22 + CF_24) + ((1.0/8.0))*(CS_22*max_lambda_22 + CF_22) +
      ((1.0/24.0))*(CS_25*max_lambda_22 + CF_25) + ((13.0/24.0))*(CS_23*max_lambda_22 + CF_23))*delta_3*inv_omega_sum +
      ((27.0/500.0))*(-(7.0/12.0)*(CS_21*max_lambda_22 + CF_21) + ((1.0/6.0))*(CS_20*max_lambda_22 + CF_20) +
      ((11.0/12.0))*(CS_22*max_lambda_22 + CF_22))*delta_2*inv_omega_sum +
      ((231.0/500.0))*(-(1.0/12.0)*(CS_21*max_lambda_22 + CF_21) + ((1.0/6.0))*(CS_23*max_lambda_22 + CF_23) +
      ((5.0/12.0))*(CS_22*max_lambda_22 + CF_22))*delta_0*inv_omega_sum + Recon_2;

    beta_0 = ((1.0/4.0))*((((1.0/2.0))*(-CS_22*max_lambda_22 + CF_22) - (1.0/2.0)*(-CS_24*max_lambda_22 +
      CF_24))*(((1.0/2.0))*(-CS_22*max_lambda_22 + CF_22) - (1.0/2.0)*(-CS_24*max_lambda_22 + CF_24))) +
      ((13.0/12.0))*((((1.0/2.0))*(-CS_22*max_lambda_22 + CF_22) + ((1.0/2.0))*(-CS_24*max_lambda_22 + CF_24) -
      (-CS_23*max_lambda_22 + CF_23))*(((1.0/2.0))*(-CS_22*max_lambda_22 + CF_22) + ((1.0/2.0))*(-CS_24*max_lambda_22 +
      CF_24) - (-CS_23*max_lambda_22 + CF_23)));

    beta_1 = ((1.0/4.0))*((((1.0/2.0))*(-CS_21*max_lambda_22 + CF_21) - 2*(-CS_22*max_lambda_22 + CF_22) +
      ((3.0/2.0))*(-CS_23*max_lambda_22 + CF_23))*(((1.0/2.0))*(-CS_21*max_lambda_22 + CF_21) - 2*(-CS_22*max_lambda_22
      + CF_22) + ((3.0/2.0))*(-CS_23*max_lambda_22 + CF_23))) + ((13.0/12.0))*((((1.0/2.0))*(-CS_21*max_lambda_22 +
      CF_21) + ((1.0/2.0))*(-CS_23*max_lambda_22 + CF_23) - (-CS_22*max_lambda_22 +
      CF_22))*(((1.0/2.0))*(-CS_21*max_lambda_22 + CF_21) + ((1.0/2.0))*(-CS_23*max_lambda_22 + CF_23) -
      (-CS_22*max_lambda_22 + CF_22)));

    beta_2 = ((1.0/4.0))*((((1.0/2.0))*(-CS_25*max_lambda_22 + CF_25) - 2*(-CS_24*max_lambda_22 + CF_24) +
      ((3.0/2.0))*(-CS_23*max_lambda_22 + CF_23))*(((1.0/2.0))*(-CS_25*max_lambda_22 + CF_25) - 2*(-CS_24*max_lambda_22
      + CF_24) + ((3.0/2.0))*(-CS_23*max_lambda_22 + CF_23))) + ((13.0/12.0))*((((1.0/2.0))*(-CS_23*max_lambda_22 +
      CF_23) + ((1.0/2.0))*(-CS_25*max_lambda_22 + CF_25) - (-CS_24*max_lambda_22 +
      CF_24))*(((1.0/2.0))*(-CS_23*max_lambda_22 + CF_23) + ((1.0/2.0))*(-CS_25*max_lambda_22 + CF_25) -
      (-CS_24*max_lambda_22 + CF_24)));

    beta_3 = ((1.0/36.0))*((-(-CS_20*max_lambda_22 + CF_20) - 9*(-CS_22*max_lambda_22 + CF_22) +
      ((9.0/2.0))*(-CS_21*max_lambda_22 + CF_21) + ((11.0/2.0))*(-CS_23*max_lambda_22 + CF_23))*(-(-CS_20*max_lambda_22
      + CF_20) - 9*(-CS_22*max_lambda_22 + CF_22) + ((9.0/2.0))*(-CS_21*max_lambda_22 + CF_21) +
      ((11.0/2.0))*(-CS_23*max_lambda_22 + CF_23))) + ((13.0/12.0))*((2*(-CS_21*max_lambda_22 + CF_21) -
      (5.0/2.0)*(-CS_22*max_lambda_22 + CF_22) - (1.0/2.0)*(-CS_20*max_lambda_22 + CF_20) - CS_23*max_lambda_22 +
      CF_23)*(2*(-CS_21*max_lambda_22 + CF_21) - (5.0/2.0)*(-CS_22*max_lambda_22 + CF_22) -
      (1.0/2.0)*(-CS_20*max_lambda_22 + CF_20) - CS_23*max_lambda_22 + CF_23)) +
      ((781.0/720.0))*((((1.0/2.0))*(-CS_23*max_lambda_22 + CF_23) - (3.0/2.0)*(-CS_22*max_lambda_22 + CF_22) -
      (1.0/2.0)*(-CS_20*max_lambda_22 + CF_20) + ((3.0/2.0))*(-CS_21*max_lambda_22 +
      CF_21))*(((1.0/2.0))*(-CS_23*max_lambda_22 + CF_23) - (3.0/2.0)*(-CS_22*max_lambda_22 + CF_22) -
      (1.0/2.0)*(-CS_20*max_lambda_22 + CF_20) + ((3.0/2.0))*(-CS_21*max_lambda_22 + CF_21)));

   inv_beta_0 = 1.0/(eps + beta_0);

   inv_beta_1 = 1.0/(eps + beta_1);

   inv_beta_2 = 1.0/(eps + beta_2);

   inv_beta_3 = 1.0/(eps + beta_3);

    alpha_0 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0));

    alpha_1 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1));

    alpha_2 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2));

    alpha_3 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3));

   inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2 + alpha_3));

   delta_0 = ((alpha_0*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_1 = ((alpha_1*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_2 = ((alpha_2*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_3 = ((alpha_3*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

    inv_omega_sum = 1.0/((((3.0/10.0))*delta_1 + ((23.0/125.0))*delta_3 + ((27.0/500.0))*delta_2 +
      ((231.0/500.0))*delta_0));

    Recon_2 = ((3.0/10.0))*(-(1.0/12.0)*(-CS_21*max_lambda_22 + CF_21) + ((1.0/6.0))*(-CS_23*max_lambda_22 + CF_23) +
      ((5.0/12.0))*(-CS_22*max_lambda_22 + CF_22))*delta_1*inv_omega_sum +
      ((23.0/125.0))*(-(5.0/24.0)*(-CS_21*max_lambda_22 + CF_21) + ((1.0/8.0))*(-CS_23*max_lambda_22 + CF_23) +
      ((1.0/24.0))*(-CS_20*max_lambda_22 + CF_20) + ((13.0/24.0))*(-CS_22*max_lambda_22 + CF_22))*delta_3*inv_omega_sum
      + ((27.0/500.0))*(-(7.0/12.0)*(-CS_24*max_lambda_22 + CF_24) + ((1.0/6.0))*(-CS_25*max_lambda_22 + CF_25) +
      ((11.0/12.0))*(-CS_23*max_lambda_22 + CF_23))*delta_2*inv_omega_sum +
      ((231.0/500.0))*(-(1.0/12.0)*(-CS_24*max_lambda_22 + CF_24) + ((1.0/6.0))*(-CS_22*max_lambda_22 + CF_22) +
      ((5.0/12.0))*(-CS_23*max_lambda_22 + CF_23))*delta_0*inv_omega_sum + Recon_2;

    beta_0 = ((1.0/4.0))*((((1.0/2.0))*(CS_31*max_lambda_33 + CF_31) - (1.0/2.0)*(CS_33*max_lambda_33 +
      CF_33))*(((1.0/2.0))*(CS_31*max_lambda_33 + CF_31) - (1.0/2.0)*(CS_33*max_lambda_33 + CF_33))) +
      ((13.0/12.0))*((((1.0/2.0))*(CS_31*max_lambda_33 + CF_31) + ((1.0/2.0))*(CS_33*max_lambda_33 + CF_33) -
      (CS_32*max_lambda_33 + CF_32))*(((1.0/2.0))*(CS_31*max_lambda_33 + CF_31) + ((1.0/2.0))*(CS_33*max_lambda_33 +
      CF_33) - (CS_32*max_lambda_33 + CF_32)));

    beta_1 = ((1.0/4.0))*((((1.0/2.0))*(CS_34*max_lambda_33 + CF_34) - 2*(CS_33*max_lambda_33 + CF_33) +
      ((3.0/2.0))*(CS_32*max_lambda_33 + CF_32))*(((1.0/2.0))*(CS_34*max_lambda_33 + CF_34) - 2*(CS_33*max_lambda_33 +
      CF_33) + ((3.0/2.0))*(CS_32*max_lambda_33 + CF_32))) + ((13.0/12.0))*((((1.0/2.0))*(CS_32*max_lambda_33 + CF_32) +
      ((1.0/2.0))*(CS_34*max_lambda_33 + CF_34) - (CS_33*max_lambda_33 + CF_33))*(((1.0/2.0))*(CS_32*max_lambda_33 +
      CF_32) + ((1.0/2.0))*(CS_34*max_lambda_33 + CF_34) - (CS_33*max_lambda_33 + CF_33)));

    beta_2 = ((1.0/4.0))*((((1.0/2.0))*(CS_30*max_lambda_33 + CF_30) - 2*(CS_31*max_lambda_33 + CF_31) +
      ((3.0/2.0))*(CS_32*max_lambda_33 + CF_32))*(((1.0/2.0))*(CS_30*max_lambda_33 + CF_30) - 2*(CS_31*max_lambda_33 +
      CF_31) + ((3.0/2.0))*(CS_32*max_lambda_33 + CF_32))) + ((13.0/12.0))*((((1.0/2.0))*(CS_30*max_lambda_33 + CF_30) +
      ((1.0/2.0))*(CS_32*max_lambda_33 + CF_32) - (CS_31*max_lambda_33 + CF_31))*(((1.0/2.0))*(CS_30*max_lambda_33 +
      CF_30) + ((1.0/2.0))*(CS_32*max_lambda_33 + CF_32) - (CS_31*max_lambda_33 + CF_31)));

    beta_3 = -(781.0/480.0)*(CS_34*max_lambda_33 + CF_34) - (781.0/1440.0)*(CS_32*max_lambda_33 + CF_32) +
      ((1.0/36.0))*((9*(CS_33*max_lambda_33 + CF_33) - (11.0/2.0)*(CS_32*max_lambda_33 + CF_32) -
      (9.0/2.0)*(CS_34*max_lambda_33 + CF_34) + CS_35*max_lambda_33 + CF_35)*(9*(CS_33*max_lambda_33 + CF_33) -
      (11.0/2.0)*(CS_32*max_lambda_33 + CF_32) - (9.0/2.0)*(CS_34*max_lambda_33 + CF_34) + CS_35*max_lambda_33 + CF_35))
      + ((13.0/12.0))*((2*(CS_34*max_lambda_33 + CF_34) - (5.0/2.0)*(CS_33*max_lambda_33 + CF_33) -
      (1.0/2.0)*(CS_35*max_lambda_33 + CF_35) + CS_32*max_lambda_33 + CF_32)*(2*(CS_34*max_lambda_33 + CF_34) -
      (5.0/2.0)*(CS_33*max_lambda_33 + CF_33) - (1.0/2.0)*(CS_35*max_lambda_33 + CF_35) + CS_32*max_lambda_33 + CF_32))
      + ((781.0/480.0))*(CS_33*max_lambda_33 + CF_33) + ((781.0/1440.0))*(CS_35*max_lambda_33 + CF_35);

   inv_beta_0 = 1.0/(eps + beta_0);

   inv_beta_1 = 1.0/(eps + beta_1);

   inv_beta_2 = 1.0/(eps + beta_2);

   inv_beta_3 = 1.0/(eps + beta_3);

    alpha_0 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0));

    alpha_1 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1));

    alpha_2 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2));

    alpha_3 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3));

   inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2 + alpha_3));

   delta_0 = ((alpha_0*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_1 = ((alpha_1*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_2 = ((alpha_2*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_3 = ((alpha_3*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

    inv_omega_sum = 1.0/((((3.0/10.0))*delta_1 + ((23.0/125.0))*delta_3 + ((27.0/500.0))*delta_2 +
      ((231.0/500.0))*delta_0));

    Recon_3 = ((3.0/10.0))*(-(1.0/12.0)*(CS_34*max_lambda_33 + CF_34) + ((1.0/6.0))*(CS_32*max_lambda_33 + CF_32) +
      ((5.0/12.0))*(CS_33*max_lambda_33 + CF_33))*delta_1*inv_omega_sum +
      ((23.0/125.0))*(-(5.0/24.0)*(CS_34*max_lambda_33 + CF_34) + ((1.0/8.0))*(CS_32*max_lambda_33 + CF_32) +
      ((1.0/24.0))*(CS_35*max_lambda_33 + CF_35) + ((13.0/24.0))*(CS_33*max_lambda_33 + CF_33))*delta_3*inv_omega_sum +
      ((27.0/500.0))*(-(7.0/12.0)*(CS_31*max_lambda_33 + CF_31) + ((1.0/6.0))*(CS_30*max_lambda_33 + CF_30) +
      ((11.0/12.0))*(CS_32*max_lambda_33 + CF_32))*delta_2*inv_omega_sum +
      ((231.0/500.0))*(-(1.0/12.0)*(CS_31*max_lambda_33 + CF_31) + ((1.0/6.0))*(CS_33*max_lambda_33 + CF_33) +
      ((5.0/12.0))*(CS_32*max_lambda_33 + CF_32))*delta_0*inv_omega_sum + Recon_3;

    beta_0 = ((1.0/4.0))*((((1.0/2.0))*(-CS_32*max_lambda_33 + CF_32) - (1.0/2.0)*(-CS_34*max_lambda_33 +
      CF_34))*(((1.0/2.0))*(-CS_32*max_lambda_33 + CF_32) - (1.0/2.0)*(-CS_34*max_lambda_33 + CF_34))) +
      ((13.0/12.0))*((((1.0/2.0))*(-CS_32*max_lambda_33 + CF_32) + ((1.0/2.0))*(-CS_34*max_lambda_33 + CF_34) -
      (-CS_33*max_lambda_33 + CF_33))*(((1.0/2.0))*(-CS_32*max_lambda_33 + CF_32) + ((1.0/2.0))*(-CS_34*max_lambda_33 +
      CF_34) - (-CS_33*max_lambda_33 + CF_33)));

    beta_1 = ((1.0/4.0))*((((1.0/2.0))*(-CS_31*max_lambda_33 + CF_31) - 2*(-CS_32*max_lambda_33 + CF_32) +
      ((3.0/2.0))*(-CS_33*max_lambda_33 + CF_33))*(((1.0/2.0))*(-CS_31*max_lambda_33 + CF_31) - 2*(-CS_32*max_lambda_33
      + CF_32) + ((3.0/2.0))*(-CS_33*max_lambda_33 + CF_33))) + ((13.0/12.0))*((((1.0/2.0))*(-CS_31*max_lambda_33 +
      CF_31) + ((1.0/2.0))*(-CS_33*max_lambda_33 + CF_33) - (-CS_32*max_lambda_33 +
      CF_32))*(((1.0/2.0))*(-CS_31*max_lambda_33 + CF_31) + ((1.0/2.0))*(-CS_33*max_lambda_33 + CF_33) -
      (-CS_32*max_lambda_33 + CF_32)));

    beta_2 = ((1.0/4.0))*((((1.0/2.0))*(-CS_35*max_lambda_33 + CF_35) - 2*(-CS_34*max_lambda_33 + CF_34) +
      ((3.0/2.0))*(-CS_33*max_lambda_33 + CF_33))*(((1.0/2.0))*(-CS_35*max_lambda_33 + CF_35) - 2*(-CS_34*max_lambda_33
      + CF_34) + ((3.0/2.0))*(-CS_33*max_lambda_33 + CF_33))) + ((13.0/12.0))*((((1.0/2.0))*(-CS_33*max_lambda_33 +
      CF_33) + ((1.0/2.0))*(-CS_35*max_lambda_33 + CF_35) - (-CS_34*max_lambda_33 +
      CF_34))*(((1.0/2.0))*(-CS_33*max_lambda_33 + CF_33) + ((1.0/2.0))*(-CS_35*max_lambda_33 + CF_35) -
      (-CS_34*max_lambda_33 + CF_34)));

    beta_3 = ((1.0/36.0))*((-(-CS_30*max_lambda_33 + CF_30) - 9*(-CS_32*max_lambda_33 + CF_32) +
      ((9.0/2.0))*(-CS_31*max_lambda_33 + CF_31) + ((11.0/2.0))*(-CS_33*max_lambda_33 + CF_33))*(-(-CS_30*max_lambda_33
      + CF_30) - 9*(-CS_32*max_lambda_33 + CF_32) + ((9.0/2.0))*(-CS_31*max_lambda_33 + CF_31) +
      ((11.0/2.0))*(-CS_33*max_lambda_33 + CF_33))) + ((13.0/12.0))*((2*(-CS_31*max_lambda_33 + CF_31) -
      (5.0/2.0)*(-CS_32*max_lambda_33 + CF_32) - (1.0/2.0)*(-CS_30*max_lambda_33 + CF_30) - CS_33*max_lambda_33 +
      CF_33)*(2*(-CS_31*max_lambda_33 + CF_31) - (5.0/2.0)*(-CS_32*max_lambda_33 + CF_32) -
      (1.0/2.0)*(-CS_30*max_lambda_33 + CF_30) - CS_33*max_lambda_33 + CF_33)) +
      ((781.0/720.0))*((((1.0/2.0))*(-CS_33*max_lambda_33 + CF_33) - (3.0/2.0)*(-CS_32*max_lambda_33 + CF_32) -
      (1.0/2.0)*(-CS_30*max_lambda_33 + CF_30) + ((3.0/2.0))*(-CS_31*max_lambda_33 +
      CF_31))*(((1.0/2.0))*(-CS_33*max_lambda_33 + CF_33) - (3.0/2.0)*(-CS_32*max_lambda_33 + CF_32) -
      (1.0/2.0)*(-CS_30*max_lambda_33 + CF_30) + ((3.0/2.0))*(-CS_31*max_lambda_33 + CF_31)));

   inv_beta_0 = 1.0/(eps + beta_0);

   inv_beta_1 = 1.0/(eps + beta_1);

   inv_beta_2 = 1.0/(eps + beta_2);

   inv_beta_3 = 1.0/(eps + beta_3);

    alpha_0 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0));

    alpha_1 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1));

    alpha_2 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2));

    alpha_3 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3));

   inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2 + alpha_3));

   delta_0 = ((alpha_0*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_1 = ((alpha_1*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_2 = ((alpha_2*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_3 = ((alpha_3*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

    inv_omega_sum = 1.0/((((3.0/10.0))*delta_1 + ((23.0/125.0))*delta_3 + ((27.0/500.0))*delta_2 +
      ((231.0/500.0))*delta_0));

    Recon_3 = ((3.0/10.0))*(-(1.0/12.0)*(-CS_31*max_lambda_33 + CF_31) + ((1.0/6.0))*(-CS_33*max_lambda_33 + CF_33) +
      ((5.0/12.0))*(-CS_32*max_lambda_33 + CF_32))*delta_1*inv_omega_sum +
      ((23.0/125.0))*(-(5.0/24.0)*(-CS_31*max_lambda_33 + CF_31) + ((1.0/8.0))*(-CS_33*max_lambda_33 + CF_33) +
      ((1.0/24.0))*(-CS_30*max_lambda_33 + CF_30) + ((13.0/24.0))*(-CS_32*max_lambda_33 + CF_32))*delta_3*inv_omega_sum
      + ((27.0/500.0))*(-(7.0/12.0)*(-CS_34*max_lambda_33 + CF_34) + ((1.0/6.0))*(-CS_35*max_lambda_33 + CF_35) +
      ((11.0/12.0))*(-CS_33*max_lambda_33 + CF_33))*delta_2*inv_omega_sum +
      ((231.0/500.0))*(-(1.0/12.0)*(-CS_34*max_lambda_33 + CF_34) + ((1.0/6.0))*(-CS_32*max_lambda_33 + CF_32) +
      ((5.0/12.0))*(-CS_33*max_lambda_33 + CF_33))*delta_0*inv_omega_sum + Recon_3;

    beta_0 = ((1.0/4.0))*((((1.0/2.0))*(CS_41*max_lambda_44 + CF_41) - (1.0/2.0)*(CS_43*max_lambda_44 +
      CF_43))*(((1.0/2.0))*(CS_41*max_lambda_44 + CF_41) - (1.0/2.0)*(CS_43*max_lambda_44 + CF_43))) +
      ((13.0/12.0))*((((1.0/2.0))*(CS_41*max_lambda_44 + CF_41) + ((1.0/2.0))*(CS_43*max_lambda_44 + CF_43) -
      (CS_42*max_lambda_44 + CF_42))*(((1.0/2.0))*(CS_41*max_lambda_44 + CF_41) + ((1.0/2.0))*(CS_43*max_lambda_44 +
      CF_43) - (CS_42*max_lambda_44 + CF_42)));

    beta_1 = ((1.0/4.0))*((((1.0/2.0))*(CS_44*max_lambda_44 + CF_44) - 2*(CS_43*max_lambda_44 + CF_43) +
      ((3.0/2.0))*(CS_42*max_lambda_44 + CF_42))*(((1.0/2.0))*(CS_44*max_lambda_44 + CF_44) - 2*(CS_43*max_lambda_44 +
      CF_43) + ((3.0/2.0))*(CS_42*max_lambda_44 + CF_42))) + ((13.0/12.0))*((((1.0/2.0))*(CS_42*max_lambda_44 + CF_42) +
      ((1.0/2.0))*(CS_44*max_lambda_44 + CF_44) - (CS_43*max_lambda_44 + CF_43))*(((1.0/2.0))*(CS_42*max_lambda_44 +
      CF_42) + ((1.0/2.0))*(CS_44*max_lambda_44 + CF_44) - (CS_43*max_lambda_44 + CF_43)));

    beta_2 = ((1.0/4.0))*((((1.0/2.0))*(CS_40*max_lambda_44 + CF_40) - 2*(CS_41*max_lambda_44 + CF_41) +
      ((3.0/2.0))*(CS_42*max_lambda_44 + CF_42))*(((1.0/2.0))*(CS_40*max_lambda_44 + CF_40) - 2*(CS_41*max_lambda_44 +
      CF_41) + ((3.0/2.0))*(CS_42*max_lambda_44 + CF_42))) + ((13.0/12.0))*((((1.0/2.0))*(CS_40*max_lambda_44 + CF_40) +
      ((1.0/2.0))*(CS_42*max_lambda_44 + CF_42) - (CS_41*max_lambda_44 + CF_41))*(((1.0/2.0))*(CS_40*max_lambda_44 +
      CF_40) + ((1.0/2.0))*(CS_42*max_lambda_44 + CF_42) - (CS_41*max_lambda_44 + CF_41)));

    beta_3 = -(781.0/480.0)*(CS_44*max_lambda_44 + CF_44) - (781.0/1440.0)*(CS_42*max_lambda_44 + CF_42) +
      ((1.0/36.0))*((9*(CS_43*max_lambda_44 + CF_43) - (11.0/2.0)*(CS_42*max_lambda_44 + CF_42) -
      (9.0/2.0)*(CS_44*max_lambda_44 + CF_44) + CS_45*max_lambda_44 + CF_45)*(9*(CS_43*max_lambda_44 + CF_43) -
      (11.0/2.0)*(CS_42*max_lambda_44 + CF_42) - (9.0/2.0)*(CS_44*max_lambda_44 + CF_44) + CS_45*max_lambda_44 + CF_45))
      + ((13.0/12.0))*((2*(CS_44*max_lambda_44 + CF_44) - (5.0/2.0)*(CS_43*max_lambda_44 + CF_43) -
      (1.0/2.0)*(CS_45*max_lambda_44 + CF_45) + CS_42*max_lambda_44 + CF_42)*(2*(CS_44*max_lambda_44 + CF_44) -
      (5.0/2.0)*(CS_43*max_lambda_44 + CF_43) - (1.0/2.0)*(CS_45*max_lambda_44 + CF_45) + CS_42*max_lambda_44 + CF_42))
      + ((781.0/480.0))*(CS_43*max_lambda_44 + CF_43) + ((781.0/1440.0))*(CS_45*max_lambda_44 + CF_45);

   inv_beta_0 = 1.0/(eps + beta_0);

   inv_beta_1 = 1.0/(eps + beta_1);

   inv_beta_2 = 1.0/(eps + beta_2);

   inv_beta_3 = 1.0/(eps + beta_3);

    alpha_0 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0));

    alpha_1 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1));

    alpha_2 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2));

    alpha_3 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3));

   inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2 + alpha_3));

   delta_0 = ((alpha_0*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_1 = ((alpha_1*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_2 = ((alpha_2*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_3 = ((alpha_3*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

    inv_omega_sum = 1.0/((((3.0/10.0))*delta_1 + ((23.0/125.0))*delta_3 + ((27.0/500.0))*delta_2 +
      ((231.0/500.0))*delta_0));

    Recon_4 = ((3.0/10.0))*(-(1.0/12.0)*(CS_44*max_lambda_44 + CF_44) + ((1.0/6.0))*(CS_42*max_lambda_44 + CF_42) +
      ((5.0/12.0))*(CS_43*max_lambda_44 + CF_43))*delta_1*inv_omega_sum +
      ((23.0/125.0))*(-(5.0/24.0)*(CS_44*max_lambda_44 + CF_44) + ((1.0/8.0))*(CS_42*max_lambda_44 + CF_42) +
      ((1.0/24.0))*(CS_45*max_lambda_44 + CF_45) + ((13.0/24.0))*(CS_43*max_lambda_44 + CF_43))*delta_3*inv_omega_sum +
      ((27.0/500.0))*(-(7.0/12.0)*(CS_41*max_lambda_44 + CF_41) + ((1.0/6.0))*(CS_40*max_lambda_44 + CF_40) +
      ((11.0/12.0))*(CS_42*max_lambda_44 + CF_42))*delta_2*inv_omega_sum +
      ((231.0/500.0))*(-(1.0/12.0)*(CS_41*max_lambda_44 + CF_41) + ((1.0/6.0))*(CS_43*max_lambda_44 + CF_43) +
      ((5.0/12.0))*(CS_42*max_lambda_44 + CF_42))*delta_0*inv_omega_sum + Recon_4;

    beta_0 = ((1.0/4.0))*((((1.0/2.0))*(-CS_42*max_lambda_44 + CF_42) - (1.0/2.0)*(-CS_44*max_lambda_44 +
      CF_44))*(((1.0/2.0))*(-CS_42*max_lambda_44 + CF_42) - (1.0/2.0)*(-CS_44*max_lambda_44 + CF_44))) +
      ((13.0/12.0))*((((1.0/2.0))*(-CS_42*max_lambda_44 + CF_42) + ((1.0/2.0))*(-CS_44*max_lambda_44 + CF_44) -
      (-CS_43*max_lambda_44 + CF_43))*(((1.0/2.0))*(-CS_42*max_lambda_44 + CF_42) + ((1.0/2.0))*(-CS_44*max_lambda_44 +
      CF_44) - (-CS_43*max_lambda_44 + CF_43)));

    beta_1 = ((1.0/4.0))*((((1.0/2.0))*(-CS_41*max_lambda_44 + CF_41) - 2*(-CS_42*max_lambda_44 + CF_42) +
      ((3.0/2.0))*(-CS_43*max_lambda_44 + CF_43))*(((1.0/2.0))*(-CS_41*max_lambda_44 + CF_41) - 2*(-CS_42*max_lambda_44
      + CF_42) + ((3.0/2.0))*(-CS_43*max_lambda_44 + CF_43))) + ((13.0/12.0))*((((1.0/2.0))*(-CS_41*max_lambda_44 +
      CF_41) + ((1.0/2.0))*(-CS_43*max_lambda_44 + CF_43) - (-CS_42*max_lambda_44 +
      CF_42))*(((1.0/2.0))*(-CS_41*max_lambda_44 + CF_41) + ((1.0/2.0))*(-CS_43*max_lambda_44 + CF_43) -
      (-CS_42*max_lambda_44 + CF_42)));

    beta_2 = ((1.0/4.0))*((((1.0/2.0))*(-CS_45*max_lambda_44 + CF_45) - 2*(-CS_44*max_lambda_44 + CF_44) +
      ((3.0/2.0))*(-CS_43*max_lambda_44 + CF_43))*(((1.0/2.0))*(-CS_45*max_lambda_44 + CF_45) - 2*(-CS_44*max_lambda_44
      + CF_44) + ((3.0/2.0))*(-CS_43*max_lambda_44 + CF_43))) + ((13.0/12.0))*((((1.0/2.0))*(-CS_43*max_lambda_44 +
      CF_43) + ((1.0/2.0))*(-CS_45*max_lambda_44 + CF_45) - (-CS_44*max_lambda_44 +
      CF_44))*(((1.0/2.0))*(-CS_43*max_lambda_44 + CF_43) + ((1.0/2.0))*(-CS_45*max_lambda_44 + CF_45) -
      (-CS_44*max_lambda_44 + CF_44)));

    beta_3 = ((1.0/36.0))*((-(-CS_40*max_lambda_44 + CF_40) - 9*(-CS_42*max_lambda_44 + CF_42) +
      ((9.0/2.0))*(-CS_41*max_lambda_44 + CF_41) + ((11.0/2.0))*(-CS_43*max_lambda_44 + CF_43))*(-(-CS_40*max_lambda_44
      + CF_40) - 9*(-CS_42*max_lambda_44 + CF_42) + ((9.0/2.0))*(-CS_41*max_lambda_44 + CF_41) +
      ((11.0/2.0))*(-CS_43*max_lambda_44 + CF_43))) + ((13.0/12.0))*((2*(-CS_41*max_lambda_44 + CF_41) -
      (5.0/2.0)*(-CS_42*max_lambda_44 + CF_42) - (1.0/2.0)*(-CS_40*max_lambda_44 + CF_40) - CS_43*max_lambda_44 +
      CF_43)*(2*(-CS_41*max_lambda_44 + CF_41) - (5.0/2.0)*(-CS_42*max_lambda_44 + CF_42) -
      (1.0/2.0)*(-CS_40*max_lambda_44 + CF_40) - CS_43*max_lambda_44 + CF_43)) +
      ((781.0/720.0))*((((1.0/2.0))*(-CS_43*max_lambda_44 + CF_43) - (3.0/2.0)*(-CS_42*max_lambda_44 + CF_42) -
      (1.0/2.0)*(-CS_40*max_lambda_44 + CF_40) + ((3.0/2.0))*(-CS_41*max_lambda_44 +
      CF_41))*(((1.0/2.0))*(-CS_43*max_lambda_44 + CF_43) - (3.0/2.0)*(-CS_42*max_lambda_44 + CF_42) -
      (1.0/2.0)*(-CS_40*max_lambda_44 + CF_40) + ((3.0/2.0))*(-CS_41*max_lambda_44 + CF_41)));

   inv_beta_0 = 1.0/(eps + beta_0);

   inv_beta_1 = 1.0/(eps + beta_1);

   inv_beta_2 = 1.0/(eps + beta_2);

   inv_beta_3 = 1.0/(eps + beta_3);

    alpha_0 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0));

    alpha_1 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1));

    alpha_2 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2));

    alpha_3 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3));

   inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2 + alpha_3));

   delta_0 = ((alpha_0*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_1 = ((alpha_1*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_2 = ((alpha_2*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_3 = ((alpha_3*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

    inv_omega_sum = 1.0/((((3.0/10.0))*delta_1 + ((23.0/125.0))*delta_3 + ((27.0/500.0))*delta_2 +
      ((231.0/500.0))*delta_0));

    Recon_4 = ((3.0/10.0))*(-(1.0/12.0)*(-CS_41*max_lambda_44 + CF_41) + ((1.0/6.0))*(-CS_43*max_lambda_44 + CF_43) +
      ((5.0/12.0))*(-CS_42*max_lambda_44 + CF_42))*delta_1*inv_omega_sum +
      ((23.0/125.0))*(-(5.0/24.0)*(-CS_41*max_lambda_44 + CF_41) + ((1.0/8.0))*(-CS_43*max_lambda_44 + CF_43) +
      ((1.0/24.0))*(-CS_40*max_lambda_44 + CF_40) + ((13.0/24.0))*(-CS_42*max_lambda_44 + CF_42))*delta_3*inv_omega_sum
      + ((27.0/500.0))*(-(7.0/12.0)*(-CS_44*max_lambda_44 + CF_44) + ((1.0/6.0))*(-CS_45*max_lambda_44 + CF_45) +
      ((11.0/12.0))*(-CS_43*max_lambda_44 + CF_43))*delta_2*inv_omega_sum +
      ((231.0/500.0))*(-(1.0/12.0)*(-CS_44*max_lambda_44 + CF_44) + ((1.0/6.0))*(-CS_42*max_lambda_44 + CF_42) +
      ((5.0/12.0))*(-CS_43*max_lambda_44 + CF_43))*delta_0*inv_omega_sum + Recon_4;

    wk0_B0(0,0,0) = AVG_0_D00*Recon_0*inv_AVG_met_fact + AVG_0_D01*Recon_1*inv_AVG_met_fact +
      0.707106781186547*AVG_0_rho*Recon_3*inv_AVG_a + 0.707106781186547*AVG_0_rho*Recon_4*inv_AVG_a;

    wk1_B0(0,0,0) = AVG_0_D00*AVG_0_u0*Recon_0*inv_AVG_met_fact + AVG_0_D01*AVG_0_rho*Recon_2*inv_AVG_met_fact +
      AVG_0_D01*AVG_0_u0*Recon_1*inv_AVG_met_fact + 0.707106781186547*(AVG_0_D00*AVG_0_a*inv_AVG_met_fact +
      AVG_0_u0)*AVG_0_rho*Recon_3*inv_AVG_a + 0.707106781186547*(-AVG_0_D00*AVG_0_a*inv_AVG_met_fact +
      AVG_0_u0)*AVG_0_rho*Recon_4*inv_AVG_a;

    wk2_B0(0,0,0) = AVG_0_D00*AVG_0_u1*Recon_0*inv_AVG_met_fact + AVG_0_D01*AVG_0_u1*Recon_1*inv_AVG_met_fact -
      AVG_0_D00*AVG_0_rho*Recon_2*inv_AVG_met_fact + 0.707106781186547*(AVG_0_D01*AVG_0_a*inv_AVG_met_fact +
      AVG_0_u1)*AVG_0_rho*Recon_3*inv_AVG_a + 0.707106781186547*(-AVG_0_D01*AVG_0_a*inv_AVG_met_fact +
      AVG_0_u1)*AVG_0_rho*Recon_4*inv_AVG_a;

    wk3_B0(0,0,0) = (AVG_0_D00*AVG_0_rho*inv_AVG_met_fact + AVG_0_D01*AVG_0_u2*inv_AVG_met_fact)*Recon_1 +
      (AVG_0_D00*AVG_0_u2*inv_AVG_met_fact - AVG_0_D01*AVG_0_rho*inv_AVG_met_fact)*Recon_0 +
      0.707106781186547*AVG_0_rho*AVG_0_u2*Recon_3*inv_AVG_a + 0.707106781186547*AVG_0_rho*AVG_0_u2*Recon_4*inv_AVG_a;

    wk4_B0(0,0,0) = (((1.0/2.0))*((AVG_0_u0*AVG_0_u0) + (AVG_0_u1*AVG_0_u1) +
      (AVG_0_u2*AVG_0_u2))*AVG_0_D00*inv_AVG_met_fact - AVG_0_D01*AVG_0_rho*AVG_0_u2*inv_AVG_met_fact)*Recon_0 +
      (((1.0/2.0))*((AVG_0_u0*AVG_0_u0) + (AVG_0_u1*AVG_0_u1) + (AVG_0_u2*AVG_0_u2))*AVG_0_D01*inv_AVG_met_fact +
      AVG_0_D00*AVG_0_rho*AVG_0_u2*inv_AVG_met_fact)*Recon_1 + (AVG_0_D01*AVG_0_u0*inv_AVG_met_fact -
      AVG_0_D00*AVG_0_u1*inv_AVG_met_fact)*AVG_0_rho*Recon_2 + 0.707106781186547*(((AVG_0_a*AVG_0_a) +
      ((1.0/2.0))*((AVG_0_u0*AVG_0_u0) + (AVG_0_u1*AVG_0_u1) + (AVG_0_u2*AVG_0_u2))*gamma_m1)*invgamma_m1 +
      (AVG_0_D00*AVG_0_u0*inv_AVG_met_fact + AVG_0_D01*AVG_0_u1*inv_AVG_met_fact)*AVG_0_a)*AVG_0_rho*Recon_3*inv_AVG_a +
      0.707106781186547*(((AVG_0_a*AVG_0_a) + ((1.0/2.0))*((AVG_0_u0*AVG_0_u0) + (AVG_0_u1*AVG_0_u1) +
      (AVG_0_u2*AVG_0_u2))*gamma_m1)*invgamma_m1 - (AVG_0_D00*AVG_0_u0*inv_AVG_met_fact +
      AVG_0_D01*AVG_0_u1*inv_AVG_met_fact)*AVG_0_a)*AVG_0_rho*Recon_4*inv_AVG_a;


      }
    }
  }
  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[21].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_host(args, 19);
  ops_set_halo_dirtybit3(&args[14],range);
  ops_set_halo_dirtybit3(&args[15],range);
  ops_set_halo_dirtybit3(&args[16],range);
  ops_set_halo_dirtybit3(&args[17],range);
  ops_set_halo_dirtybit3(&args[18],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[21].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[21].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[21].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[21].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[21].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[21].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[21].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[21].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[21].transfer += ops_compute_transfer(dim, start, end, &arg7);
    block->instance->OPS_kernels[21].transfer += ops_compute_transfer(dim, start, end, &arg8);
    block->instance->OPS_kernels[21].transfer += ops_compute_transfer(dim, start, end, &arg9);
    block->instance->OPS_kernels[21].transfer += ops_compute_transfer(dim, start, end, &arg10);
    block->instance->OPS_kernels[21].transfer += ops_compute_transfer(dim, start, end, &arg11);
    block->instance->OPS_kernels[21].transfer += ops_compute_transfer(dim, start, end, &arg12);
    block->instance->OPS_kernels[21].transfer += ops_compute_transfer(dim, start, end, &arg13);
    block->instance->OPS_kernels[21].transfer += ops_compute_transfer(dim, start, end, &arg14);
    block->instance->OPS_kernels[21].transfer += ops_compute_transfer(dim, start, end, &arg15);
    block->instance->OPS_kernels[21].transfer += ops_compute_transfer(dim, start, end, &arg16);
    block->instance->OPS_kernels[21].transfer += ops_compute_transfer(dim, start, end, &arg17);
    block->instance->OPS_kernels[21].transfer += ops_compute_transfer(dim, start, end, &arg18);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel000(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11,
 ops_arg arg12, ops_arg arg13, ops_arg arg14, ops_arg arg15,
 ops_arg arg16, ops_arg arg17, ops_arg arg18) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)calloc(1,sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 0;
  desc->index = 21;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 21;
  for ( int i=0; i<6; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 19;
  desc->args = (ops_arg*)ops_malloc(19*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg2.dat->index;
  desc->args[3] = arg3;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg3.dat->index;
  desc->args[4] = arg4;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg4.dat->index;
  desc->args[5] = arg5;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg5.dat->index;
  desc->args[6] = arg6;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg6.dat->index;
  desc->args[7] = arg7;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg7.dat->index;
  desc->args[8] = arg8;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg8.dat->index;
  desc->args[9] = arg9;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg9.dat->index;
  desc->args[10] = arg10;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg10.dat->index;
  desc->args[11] = arg11;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg11.dat->index;
  desc->args[12] = arg12;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg12.dat->index;
  desc->args[13] = arg13;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg13.dat->index;
  desc->args[14] = arg14;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg14.dat->index;
  desc->args[15] = arg15;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg15.dat->index;
  desc->args[16] = arg16;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg16.dat->index;
  desc->args[17] = arg17;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg17.dat->index;
  desc->args[18] = arg18;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg18.dat->index;
  desc->function = ops_par_loop_opensbliblock00Kernel000_execute;
  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,21,"opensbliblock00Kernel000");
  }
  ops_enqueue_kernel(desc);
}
#endif
