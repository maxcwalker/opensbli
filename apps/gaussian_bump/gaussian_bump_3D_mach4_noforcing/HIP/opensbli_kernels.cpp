//
// auto-generated by ops.py//

//header
#include <hip/hip_runtime.h>
#define OPS_API 2
#define OPS_3D
#include "ops_lib_core.h"

#include "ops_hip_rt_support.h"
#include "ops_hip_reduction.h"


#ifdef OPS_MPI
#include "ops_mpi_core.h"
#endif
// global constants
#define Delta0block0 Delta0block0_OPSCONSTANT
__constant__ double Delta0block0;
#define Delta1block0 Delta1block0_OPSCONSTANT
__constant__ double Delta1block0;
#define Delta2block0 Delta2block0_OPSCONSTANT
__constant__ double Delta2block0;
#define H H_OPSCONSTANT
__constant__ double H;
#define HDF5_timing HDF5_timing_OPSCONSTANT
__constant__ int HDF5_timing;
#define L L_OPSCONSTANT
__constant__ double L;
#define Minf Minf_OPSCONSTANT
__constant__ double Minf;
#define Pr Pr_OPSCONSTANT
__constant__ double Pr;
#define Re Re_OPSCONSTANT
__constant__ double Re;
#define RefT RefT_OPSCONSTANT
__constant__ double RefT;
#define SuthT SuthT_OPSCONSTANT
__constant__ double SuthT;
#define TENO_CT TENO_CT_OPSCONSTANT
__constant__ double TENO_CT;
#define Twall Twall_OPSCONSTANT
__constant__ double Twall;
#define a a_OPSCONSTANT
__constant__ double a;
#define b b_OPSCONSTANT
__constant__ double b;
#define b_f b_f_OPSCONSTANT
__constant__ double b_f;
#define beta_0 beta_0_OPSCONSTANT
__constant__ double beta_0;
#define block0np0 block0np0_OPSCONSTANT
__constant__ int block0np0;
#define block0np1 block0np1_OPSCONSTANT
__constant__ int block0np1;
#define block0np2 block0np2_OPSCONSTANT
__constant__ int block0np2;
#define dt dt_OPSCONSTANT
__constant__ double dt;
#define eps eps_OPSCONSTANT
__constant__ double eps;
#define gama gama_OPSCONSTANT
__constant__ double gama;
#define gamma_m1 gamma_m1_OPSCONSTANT
__constant__ double gamma_m1;
#define inv2Delta0block0 inv2Delta0block0_OPSCONSTANT
__constant__ double inv2Delta0block0;
#define inv2Delta1block0 inv2Delta1block0_OPSCONSTANT
__constant__ double inv2Delta1block0;
#define inv2Delta2block0 inv2Delta2block0_OPSCONSTANT
__constant__ double inv2Delta2block0;
#define inv2Minf inv2Minf_OPSCONSTANT
__constant__ double inv2Minf;
#define inv2a inv2a_OPSCONSTANT
__constant__ double inv2a;
#define invDelta0block0 invDelta0block0_OPSCONSTANT
__constant__ double invDelta0block0;
#define invDelta1block0 invDelta1block0_OPSCONSTANT
__constant__ double invDelta1block0;
#define invDelta2block0 invDelta2block0_OPSCONSTANT
__constant__ double invDelta2block0;
#define invH invH_OPSCONSTANT
__constant__ double invH;
#define invPr invPr_OPSCONSTANT
__constant__ double invPr;
#define invRe invRe_OPSCONSTANT
__constant__ double invRe;
#define invRefT invRefT_OPSCONSTANT
__constant__ double invRefT;
#define inv_gamma_m1 inv_gamma_m1_OPSCONSTANT
__constant__ double inv_gamma_m1;
#define invgama invgama_OPSCONSTANT
__constant__ double invgama;
#define invgamma_m1 invgamma_m1_OPSCONSTANT
__constant__ double invgamma_m1;
#define niter niter_OPSCONSTANT
__constant__ int niter;
#define omega_0 omega_0_OPSCONSTANT
__constant__ double omega_0;
#define omega_1 omega_1_OPSCONSTANT
__constant__ double omega_1;
#define omega_2 omega_2_OPSCONSTANT
__constant__ double omega_2;
#define omega_3 omega_3_OPSCONSTANT
__constant__ double omega_3;
#define phi_0 phi_0_OPSCONSTANT
__constant__ double phi_0;
#define phi_1 phi_1_OPSCONSTANT
__constant__ double phi_1;
#define phi_2 phi_2_OPSCONSTANT
__constant__ double phi_2;
#define shock_filter_control shock_filter_control_OPSCONSTANT
__constant__ double shock_filter_control;
#define simulation_time simulation_time_OPSCONSTANT
__constant__ double simulation_time;
#define start_iter start_iter_OPSCONSTANT
__constant__ int start_iter;
#define tripA tripA_OPSCONSTANT
__constant__ double tripA;
#define write_output_file write_output_file_OPSCONSTANT
__constant__ int write_output_file;
#define xts xts_OPSCONSTANT
__constant__ double xts;

void ops_init_backend() {}

//Dummy kernel to make sure constants are not optimized out
__global__ void ops_internal_this_is_stupid() {
((int*)&Delta0block0)[0]=0;
((int*)&Delta1block0)[0]=0;
((int*)&Delta2block0)[0]=0;
((int*)&H)[0]=0;
((int*)&HDF5_timing)[0]=0;
((int*)&L)[0]=0;
((int*)&Minf)[0]=0;
((int*)&Pr)[0]=0;
((int*)&Re)[0]=0;
((int*)&RefT)[0]=0;
((int*)&SuthT)[0]=0;
((int*)&TENO_CT)[0]=0;
((int*)&Twall)[0]=0;
((int*)&a)[0]=0;
((int*)&b)[0]=0;
((int*)&b_f)[0]=0;
((int*)&beta_0)[0]=0;
((int*)&block0np0)[0]=0;
((int*)&block0np1)[0]=0;
((int*)&block0np2)[0]=0;
((int*)&dt)[0]=0;
((int*)&eps)[0]=0;
((int*)&gama)[0]=0;
((int*)&gamma_m1)[0]=0;
((int*)&inv2Delta0block0)[0]=0;
((int*)&inv2Delta1block0)[0]=0;
((int*)&inv2Delta2block0)[0]=0;
((int*)&inv2Minf)[0]=0;
((int*)&inv2a)[0]=0;
((int*)&invDelta0block0)[0]=0;
((int*)&invDelta1block0)[0]=0;
((int*)&invDelta2block0)[0]=0;
((int*)&invH)[0]=0;
((int*)&invPr)[0]=0;
((int*)&invRe)[0]=0;
((int*)&invRefT)[0]=0;
((int*)&inv_gamma_m1)[0]=0;
((int*)&invgama)[0]=0;
((int*)&invgamma_m1)[0]=0;
((int*)&niter)[0]=0;
((int*)&omega_0)[0]=0;
((int*)&omega_1)[0]=0;
((int*)&omega_2)[0]=0;
((int*)&omega_3)[0]=0;
((int*)&phi_0)[0]=0;
((int*)&phi_1)[0]=0;
((int*)&phi_2)[0]=0;
((int*)&shock_filter_control)[0]=0;
((int*)&simulation_time)[0]=0;
((int*)&start_iter)[0]=0;
((int*)&tripA)[0]=0;
((int*)&write_output_file)[0]=0;
((int*)&xts)[0]=0;
}

void ops_decl_const_char(int dim, char const *type,
int size, char *dat, char const *name){
  ops_execute(OPS_instance::getOPSInstance());
  if (!strcmp(name,"Delta0block0")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(Delta0block0_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"Delta1block0")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(Delta1block0_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"Delta2block0")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(Delta2block0_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"H")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(H_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"HDF5_timing")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(HDF5_timing_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"L")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(L_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"Minf")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(Minf_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"Pr")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(Pr_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"Re")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(Re_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"RefT")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(RefT_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"SuthT")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(SuthT_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"TENO_CT")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(TENO_CT_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"Twall")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(Twall_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"a")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(a_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"b")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(b_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"b_f")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(b_f_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"beta_0")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(beta_0_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"block0np0")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(block0np0_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"block0np1")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(block0np1_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"block0np2")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(block0np2_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"dt")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(dt_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"eps")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(eps_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"gama")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(gama_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"gamma_m1")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(gamma_m1_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"inv2Delta0block0")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(inv2Delta0block0_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"inv2Delta1block0")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(inv2Delta1block0_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"inv2Delta2block0")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(inv2Delta2block0_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"inv2Minf")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(inv2Minf_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"inv2a")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(inv2a_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"invDelta0block0")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(invDelta0block0_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"invDelta1block0")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(invDelta1block0_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"invDelta2block0")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(invDelta2block0_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"invH")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(invH_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"invPr")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(invPr_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"invRe")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(invRe_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"invRefT")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(invRefT_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"inv_gamma_m1")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(inv_gamma_m1_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"invgama")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(invgama_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"invgamma_m1")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(invgamma_m1_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"niter")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(niter_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"omega_0")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(omega_0_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"omega_1")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(omega_1_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"omega_2")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(omega_2_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"omega_3")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(omega_3_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"phi_0")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(phi_0_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"phi_1")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(phi_1_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"phi_2")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(phi_2_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"shock_filter_control")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(shock_filter_control_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"simulation_time")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(simulation_time_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"start_iter")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(start_iter_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"tripA")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(tripA_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"write_output_file")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(write_output_file_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"xts")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(xts_OPSCONSTANT), dat, dim*size));
  }
  else
  {
    throw OPSException(OPS_RUNTIME_ERROR, "error: unknown const name");
  }
}


//user kernel files
#include "opensbliblock00Kernel067_hip_kernel.cpp"
#include "opensbliblock00Kernel070_hip_kernel.cpp"
#include "opensbliblock00Kernel071_hip_kernel.cpp"
#include "opensbliblock00Kernel072_hip_kernel.cpp"
#include "opensbliblock00Kernel073_hip_kernel.cpp"
#include "opensbliblock00Kernel074_hip_kernel.cpp"
#include "opensbliblock00Kernel081_hip_kernel.cpp"
#include "opensbliblock00Kernel061_hip_kernel.cpp"
#include "opensbliblock00Kernel062_hip_kernel.cpp"
#include "opensbliblock00Kernel063_hip_kernel.cpp"
#include "opensbliblock00Kernel064_hip_kernel.cpp"
#include "opensbliblock00Kernel004_hip_kernel.cpp"
#include "opensbliblock00Kernel005_hip_kernel.cpp"
#include "opensbliblock00Kernel010_hip_kernel.cpp"
#include "opensbliblock00Kernel009_hip_kernel.cpp"
#include "opensbliblock00Kernel013_hip_kernel.cpp"
#include "opensbliblock00Kernel017_hip_kernel.cpp"
#include "opensbliblock00Kernel020_hip_kernel.cpp"
#include "opensbliblock00Kernel011_hip_kernel.cpp"
#include "opensbliblock00Kernel025_hip_kernel.cpp"
#include "opensbliblock00Kernel026_hip_kernel.cpp"
#include "opensbliblock00Kernel000_hip_kernel.cpp"
#include "opensbliblock00Kernel001_hip_kernel.cpp"
#include "opensbliblock00Kernel002_hip_kernel.cpp"
#include "opensbliblock00Kernel021_hip_kernel.cpp"
#include "opensbliblock00Kernel032_hip_kernel.cpp"
#include "opensbliblock00Kernel034_hip_kernel.cpp"
#include "opensbliblock00Kernel036_hip_kernel.cpp"
#include "opensbliblock00Kernel038_hip_kernel.cpp"
#include "opensbliblock00Kernel040_hip_kernel.cpp"
#include "opensbliblock00Kernel041_hip_kernel.cpp"
#include "opensbliblock00Kernel042_hip_kernel.cpp"
#include "opensbliblock00Kernel043_hip_kernel.cpp"
#include "opensbliblock00Kernel044_hip_kernel.cpp"
#include "opensbliblock00Kernel045_hip_kernel.cpp"
#include "opensbliblock00Kernel046_hip_kernel.cpp"
#include "opensbliblock00Kernel047_hip_kernel.cpp"
#include "opensbliblock00Kernel056_hip_kernel.cpp"
#include "opensbliblock00Kernel082_hip_kernel.cpp"
