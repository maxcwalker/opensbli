//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel001(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11,
 ops_arg arg12, ops_arg arg13, ops_arg arg14, ops_arg arg15,
 ops_arg arg16, ops_arg arg17, ops_arg arg18) {
#else
void ops_par_loop_opensbliblock00Kernel001_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  ops_arg arg9 = desc->args[9];
  ops_arg arg10 = desc->args[10];
  ops_arg arg11 = desc->args[11];
  ops_arg arg12 = desc->args[12];
  ops_arg arg13 = desc->args[13];
  ops_arg arg14 = desc->args[14];
  ops_arg arg15 = desc->args[15];
  ops_arg arg16 = desc->args[16];
  ops_arg arg17 = desc->args[17];
  ops_arg arg18 = desc->args[18];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[19] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,19,range,22)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,22,"opensbliblock00Kernel001");
    block->instance->OPS_kernels[22].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "opensbliblock00Kernel001");
  #endif


  //compute locally allocated range for the sub-block
  int start[3];
  int end[3];
  #if defined(OPS_MPI) && !defined(OPS_LAZY)
  int arg_idx[3];
  #endif
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<3; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 19,block, range, start, end, arg_idx) < 0) return;
  #endif


  //initialize global variable with the dimension of dats
  int xdim0_opensbliblock00Kernel001 = args[0].dat->size[0];
  int ydim0_opensbliblock00Kernel001 = args[0].dat->size[1];
  int xdim1_opensbliblock00Kernel001 = args[1].dat->size[0];
  int ydim1_opensbliblock00Kernel001 = args[1].dat->size[1];
  int xdim2_opensbliblock00Kernel001 = args[2].dat->size[0];
  int ydim2_opensbliblock00Kernel001 = args[2].dat->size[1];
  int xdim3_opensbliblock00Kernel001 = args[3].dat->size[0];
  int ydim3_opensbliblock00Kernel001 = args[3].dat->size[1];
  int xdim4_opensbliblock00Kernel001 = args[4].dat->size[0];
  int ydim4_opensbliblock00Kernel001 = args[4].dat->size[1];
  int xdim5_opensbliblock00Kernel001 = args[5].dat->size[0];
  int ydim5_opensbliblock00Kernel001 = args[5].dat->size[1];
  int xdim6_opensbliblock00Kernel001 = args[6].dat->size[0];
  int ydim6_opensbliblock00Kernel001 = args[6].dat->size[1];
  int xdim7_opensbliblock00Kernel001 = args[7].dat->size[0];
  int ydim7_opensbliblock00Kernel001 = args[7].dat->size[1];
  int xdim8_opensbliblock00Kernel001 = args[8].dat->size[0];
  int ydim8_opensbliblock00Kernel001 = args[8].dat->size[1];
  int xdim9_opensbliblock00Kernel001 = args[9].dat->size[0];
  int ydim9_opensbliblock00Kernel001 = args[9].dat->size[1];
  int xdim10_opensbliblock00Kernel001 = args[10].dat->size[0];
  int ydim10_opensbliblock00Kernel001 = args[10].dat->size[1];
  int xdim11_opensbliblock00Kernel001 = args[11].dat->size[0];
  int ydim11_opensbliblock00Kernel001 = args[11].dat->size[1];
  int xdim12_opensbliblock00Kernel001 = args[12].dat->size[0];
  int ydim12_opensbliblock00Kernel001 = args[12].dat->size[1];
  int xdim13_opensbliblock00Kernel001 = args[13].dat->size[0];
  int ydim13_opensbliblock00Kernel001 = args[13].dat->size[1];
  int xdim14_opensbliblock00Kernel001 = args[14].dat->size[0];
  int ydim14_opensbliblock00Kernel001 = args[14].dat->size[1];
  int xdim15_opensbliblock00Kernel001 = args[15].dat->size[0];
  int ydim15_opensbliblock00Kernel001 = args[15].dat->size[1];
  int xdim16_opensbliblock00Kernel001 = args[16].dat->size[0];
  int ydim16_opensbliblock00Kernel001 = args[16].dat->size[1];
  int xdim17_opensbliblock00Kernel001 = args[17].dat->size[0];
  int ydim17_opensbliblock00Kernel001 = args[17].dat->size[1];
  int xdim18_opensbliblock00Kernel001 = args[18].dat->size[0];
  int ydim18_opensbliblock00Kernel001 = args[18].dat->size[1];

  //set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset;
  double * __restrict__ U1_B0_p = (double *)(args[0].data + base0);

  int base1 = args[1].dat->base_offset;
  double * __restrict__ u0_B0_p = (double *)(args[1].data + base1);

  int base2 = args[2].dat->base_offset;
  double * __restrict__ u2_B0_p = (double *)(args[2].data + base2);

  int base3 = args[3].dat->base_offset;
  double * __restrict__ detJ_B0_p = (double *)(args[3].data + base3);

  int base4 = args[4].dat->base_offset;
  double * __restrict__ u1_B0_p = (double *)(args[4].data + base4);

  int base5 = args[5].dat->base_offset;
  double * __restrict__ rho_B0_p = (double *)(args[5].data + base5);

  int base6 = args[6].dat->base_offset;
  double * __restrict__ rhou1_B0_p = (double *)(args[6].data + base6);

  int base7 = args[7].dat->base_offset;
  double * __restrict__ D11_B0_p = (double *)(args[7].data + base7);

  int base8 = args[8].dat->base_offset;
  double * __restrict__ a_B0_p = (double *)(args[8].data + base8);

  int base9 = args[9].dat->base_offset;
  double * __restrict__ rhoE_B0_p = (double *)(args[9].data + base9);

  int base10 = args[10].dat->base_offset;
  double * __restrict__ rhou2_B0_p = (double *)(args[10].data + base10);

  int base11 = args[11].dat->base_offset;
  double * __restrict__ p_B0_p = (double *)(args[11].data + base11);

  int base12 = args[12].dat->base_offset;
  double * __restrict__ D10_B0_p = (double *)(args[12].data + base12);

  int base13 = args[13].dat->base_offset;
  double * __restrict__ rhou0_B0_p = (double *)(args[13].data + base13);

  int base14 = args[14].dat->base_offset;
  double * __restrict__ wk5_B0_p = (double *)(args[14].data + base14);

  int base15 = args[15].dat->base_offset;
  double * __restrict__ wk9_B0_p = (double *)(args[15].data + base15);

  int base16 = args[16].dat->base_offset;
  double * __restrict__ wk8_B0_p = (double *)(args[16].data + base16);

  int base17 = args[17].dat->base_offset;
  double * __restrict__ wk7_B0_p = (double *)(args[17].data + base17);

  int base18 = args[18].dat->base_offset;
  double * __restrict__ wk6_B0_p = (double *)(args[18].data + base18);



  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_host(args, 19);
  ops_halo_exchanges(args,19,range);
  ops_H_D_exchanges_host(args, 19);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[22].mpi_time += __t1-__t2;
  }

  #pragma omp parallel for collapse(2)
  for ( int n_z=start[2]; n_z<end[2]; n_z++ ){
    for ( int n_y=start[1]; n_y<end[1]; n_y++ ){
      #ifdef __INTEL_COMPILER
      #pragma loop_count(10000)
      #pragma omp simd
      #elif defined(__clang__)
      #pragma clang loop vectorize(assume_safety)
      #elif defined(__GNUC__)
      #pragma GCC ivdep
      #else
      #pragma simd
      #endif
      for ( int n_x=start[0]; n_x<end[0]; n_x++ ){
        const ACC<double> U1_B0(xdim0_opensbliblock00Kernel001, ydim0_opensbliblock00Kernel001, U1_B0_p + n_x*1 + n_y * xdim0_opensbliblock00Kernel001*1 + n_z * xdim0_opensbliblock00Kernel001 * ydim0_opensbliblock00Kernel001*1);
        const ACC<double> u0_B0(xdim1_opensbliblock00Kernel001, ydim1_opensbliblock00Kernel001, u0_B0_p + n_x*1 + n_y * xdim1_opensbliblock00Kernel001*1 + n_z * xdim1_opensbliblock00Kernel001 * ydim1_opensbliblock00Kernel001*1);
        const ACC<double> u2_B0(xdim2_opensbliblock00Kernel001, ydim2_opensbliblock00Kernel001, u2_B0_p + n_x*1 + n_y * xdim2_opensbliblock00Kernel001*1 + n_z * xdim2_opensbliblock00Kernel001 * ydim2_opensbliblock00Kernel001*1);
        const ACC<double> detJ_B0(xdim3_opensbliblock00Kernel001, ydim3_opensbliblock00Kernel001, detJ_B0_p + n_x*1 + n_y * xdim3_opensbliblock00Kernel001*1 + n_z * xdim3_opensbliblock00Kernel001 * ydim3_opensbliblock00Kernel001*1);
        const ACC<double> u1_B0(xdim4_opensbliblock00Kernel001, ydim4_opensbliblock00Kernel001, u1_B0_p + n_x*1 + n_y * xdim4_opensbliblock00Kernel001*1 + n_z * xdim4_opensbliblock00Kernel001 * ydim4_opensbliblock00Kernel001*1);
        const ACC<double> rho_B0(xdim5_opensbliblock00Kernel001, ydim5_opensbliblock00Kernel001, rho_B0_p + n_x*1 + n_y * xdim5_opensbliblock00Kernel001*1 + n_z * xdim5_opensbliblock00Kernel001 * ydim5_opensbliblock00Kernel001*1);
        const ACC<double> rhou1_B0(xdim6_opensbliblock00Kernel001, ydim6_opensbliblock00Kernel001, rhou1_B0_p + n_x*1 + n_y * xdim6_opensbliblock00Kernel001*1 + n_z * xdim6_opensbliblock00Kernel001 * ydim6_opensbliblock00Kernel001*1);
        const ACC<double> D11_B0(xdim7_opensbliblock00Kernel001, ydim7_opensbliblock00Kernel001, D11_B0_p + n_x*1 + n_y * xdim7_opensbliblock00Kernel001*1 + n_z * xdim7_opensbliblock00Kernel001 * ydim7_opensbliblock00Kernel001*1);
        const ACC<double> a_B0(xdim8_opensbliblock00Kernel001, ydim8_opensbliblock00Kernel001, a_B0_p + n_x*1 + n_y * xdim8_opensbliblock00Kernel001*1 + n_z * xdim8_opensbliblock00Kernel001 * ydim8_opensbliblock00Kernel001*1);
        const ACC<double> rhoE_B0(xdim9_opensbliblock00Kernel001, ydim9_opensbliblock00Kernel001, rhoE_B0_p + n_x*1 + n_y * xdim9_opensbliblock00Kernel001*1 + n_z * xdim9_opensbliblock00Kernel001 * ydim9_opensbliblock00Kernel001*1);
        const ACC<double> rhou2_B0(xdim10_opensbliblock00Kernel001, ydim10_opensbliblock00Kernel001, rhou2_B0_p + n_x*1 + n_y * xdim10_opensbliblock00Kernel001*1 + n_z * xdim10_opensbliblock00Kernel001 * ydim10_opensbliblock00Kernel001*1);
        const ACC<double> p_B0(xdim11_opensbliblock00Kernel001, ydim11_opensbliblock00Kernel001, p_B0_p + n_x*1 + n_y * xdim11_opensbliblock00Kernel001*1 + n_z * xdim11_opensbliblock00Kernel001 * ydim11_opensbliblock00Kernel001*1);
        const ACC<double> D10_B0(xdim12_opensbliblock00Kernel001, ydim12_opensbliblock00Kernel001, D10_B0_p + n_x*1 + n_y * xdim12_opensbliblock00Kernel001*1 + n_z * xdim12_opensbliblock00Kernel001 * ydim12_opensbliblock00Kernel001*1);
        const ACC<double> rhou0_B0(xdim13_opensbliblock00Kernel001, ydim13_opensbliblock00Kernel001, rhou0_B0_p + n_x*1 + n_y * xdim13_opensbliblock00Kernel001*1 + n_z * xdim13_opensbliblock00Kernel001 * ydim13_opensbliblock00Kernel001*1);
        ACC<double> wk5_B0(xdim14_opensbliblock00Kernel001, ydim14_opensbliblock00Kernel001, wk5_B0_p + n_x*1 + n_y * xdim14_opensbliblock00Kernel001*1 + n_z * xdim14_opensbliblock00Kernel001 * ydim14_opensbliblock00Kernel001*1);
        ACC<double> wk9_B0(xdim15_opensbliblock00Kernel001, ydim15_opensbliblock00Kernel001, wk9_B0_p + n_x*1 + n_y * xdim15_opensbliblock00Kernel001*1 + n_z * xdim15_opensbliblock00Kernel001 * ydim15_opensbliblock00Kernel001*1);
        ACC<double> wk8_B0(xdim16_opensbliblock00Kernel001, ydim16_opensbliblock00Kernel001, wk8_B0_p + n_x*1 + n_y * xdim16_opensbliblock00Kernel001*1 + n_z * xdim16_opensbliblock00Kernel001 * ydim16_opensbliblock00Kernel001*1);
        ACC<double> wk7_B0(xdim17_opensbliblock00Kernel001, ydim17_opensbliblock00Kernel001, wk7_B0_p + n_x*1 + n_y * xdim17_opensbliblock00Kernel001*1 + n_z * xdim17_opensbliblock00Kernel001 * ydim17_opensbliblock00Kernel001*1);
        ACC<double> wk6_B0(xdim18_opensbliblock00Kernel001, ydim18_opensbliblock00Kernel001, wk6_B0_p + n_x*1 + n_y * xdim18_opensbliblock00Kernel001*1 + n_z * xdim18_opensbliblock00Kernel001 * ydim18_opensbliblock00Kernel001*1);
        
   double AVG_1_1_LEV_44 = 0.0;
   double CF_24 = 0.0;
   double CF_03 = 0.0;
   double AVG_1_u2 = 0.0;
   double CF_23 = 0.0;
   double AVG_1_1_LEV_02 = 0.0;
   double CF_10 = 0.0;
   double AVG_1_1_LEV_14 = 0.0;
   double AVG_1_1_LEV_20 = 0.0;
   double AVG_1_rho = 0.0;
   double CF_11 = 0.0;
   double CF_21 = 0.0;
   double CF_05 = 0.0;
   double CS_05 = 0.0;
   double CS_31 = 0.0;
   double alpha_1 = 0.0;
   double Recon_0 = 0.0;
   double AVG_1_1_LEV_43 = 0.0;
   double AVG_1_D10 = 0.0;
   double CS_30 = 0.0;
   double AVG_1_1_LEV_34 = 0.0;
   double max_lambda_1_44 = 0.0;
   double AVG_1_1_LEV_42 = 0.0;
   double AVG_1_1_LEV_00 = 0.0;
   double inv_AVG_met_fact = 0.0;
   double beta_2 = 0.0;
   double omega_0 = 0.0;
   double AVG_1_1_LEV_12 = 0.0;
   double CF_42 = 0.0;
   double CS_11 = 0.0;
   double AVG_1_1_LEV_11 = 0.0;
   double CS_02 = 0.0;
   double CS_32 = 0.0;
   double AVG_1_u0 = 0.0;
   double CF_22 = 0.0;
   double CS_33 = 0.0;
   double AVG_1_1_LEV_10 = 0.0;
   double CS_45 = 0.0;
   double CS_40 = 0.0;
   double CS_15 = 0.0;
   double AVG_1_D11 = 0.0;
   double CS_35 = 0.0;
   double CS_43 = 0.0;
   double CF_35 = 0.0;
   double alpha_0 = 0.0;
   double AVG_1_u1 = 0.0;
   double AVG_1_1_LEV_03 = 0.0;
   double CS_13 = 0.0;
   double CF_32 = 0.0;
   double CF_34 = 0.0;
   double CF_44 = 0.0;
   double CF_40 = 0.0;
   double CS_20 = 0.0;
   double CS_34 = 0.0;
   double AVG_1_1_LEV_04 = 0.0;
   double max_lambda_1_33 = 0.0;
   double inv_alpha_sum = 0.0;
   double CF_00 = 0.0;
   double CF_30 = 0.0;
   double CS_00 = 0.0;
   double CS_12 = 0.0;
   double CS_21 = 0.0;
   double CS_23 = 0.0;
   double AVG_1_1_LEV_13 = 0.0;
   double CS_01 = 0.0;
   double AVG_1_a = 0.0;
   double CF_04 = 0.0;
   double AVG_1_1_LEV_40 = 0.0;
   double CS_14 = 0.0;
   double CS_04 = 0.0;
   double CF_02 = 0.0;
   double AVG_1_1_LEV_22 = 0.0;
   double CF_13 = 0.0;
   double alpha_2 = 0.0;
   double omega_2 = 0.0;
   double AVG_1_1_LEV_32 = 0.0;
   double CF_01 = 0.0;
   double CF_41 = 0.0;
   double omega_1 = 0.0;
   double max_lambda_1_00 = 0.0;
   double CF_15 = 0.0;
   double CS_22 = 0.0;
   double beta_0 = 0.0;
   double CS_24 = 0.0;
   double AVG_1_1_LEV_41 = 0.0;
   double CF_33 = 0.0;
   double Recon_3 = 0.0;
   double Recon_2 = 0.0;
   double CF_12 = 0.0;
   double AVG_1_1_LEV_33 = 0.0;
   double CF_25 = 0.0;
   double beta_1 = 0.0;
   double AVG_1_1_LEV_31 = 0.0;
   double CF_20 = 0.0;
   double CF_31 = 0.0;
   double CS_41 = 0.0;
   double CF_14 = 0.0;
   double Recon_1 = 0.0;
   double max_lambda_1_22 = 0.0;
   double inv_AVG_rho = 0.0;
   double CF_45 = 0.0;
   double AVG_1_1_LEV_21 = 0.0;
   double AVG_1_1_LEV_30 = 0.0;
   double CS_10 = 0.0;
   double CF_43 = 0.0;
   double CS_03 = 0.0;
   double CS_25 = 0.0;
   double CS_42 = 0.0;
   double inv_AVG_a = 0.0;
   double AVG_1_1_LEV_01 = 0.0;
   double CS_44 = 0.0;
   double max_lambda_1_11 = 0.0;
   double Recon_4 = 0.0;
   AVG_1_rho = (rc9)*(rho_B0(0,1,0) + rho_B0(0,0,0));

   AVG_1_a = (rc9)*(a_B0(0,0,0) + a_B0(0,1,0));

   AVG_1_u1 = (rc9)*(u1_B0(0,0,0) + u1_B0(0,1,0));

   AVG_1_u0 = (rc9)*(u0_B0(0,0,0) + u0_B0(0,1,0));

   AVG_1_u2 = (rc9)*(u2_B0(0,1,0) + u2_B0(0,0,0));

   AVG_1_D11 = (rc9)*(D11_B0(0,0,0) + D11_B0(0,1,0));

   AVG_1_D10 = (rc9)*(D10_B0(0,1,0) + D10_B0(0,0,0));

   inv_AVG_a = 1.0/AVG_1_a;

   inv_AVG_rho = 1.0/AVG_1_rho;

   inv_AVG_met_fact = pow(pow(AVG_1_D10, 2) + pow(AVG_1_D11, 2), rc19);

    AVG_1_1_LEV_00 = -rc9*inv_AVG_met_fact*(gama*AVG_1_D10*pow(AVG_1_u0, 2)*pow(inv_AVG_a, 2) +
      gama*AVG_1_D10*pow(AVG_1_u1, 2)*pow(inv_AVG_a, 2) + gama*AVG_1_D10*pow(AVG_1_u2, 2)*pow(inv_AVG_a, 2) -
      AVG_1_D10*pow(AVG_1_u0, 2)*pow(inv_AVG_a, 2) - AVG_1_D10*pow(AVG_1_u1, 2)*pow(inv_AVG_a, 2) -
      AVG_1_D10*pow(AVG_1_u2, 2)*pow(inv_AVG_a, 2) - 2*AVG_1_D10 - 2*AVG_1_D11*AVG_1_u2*inv_AVG_rho);

   AVG_1_1_LEV_01 = gamma_m1*AVG_1_D10*AVG_1_u0*pow(inv_AVG_a, 2)*inv_AVG_met_fact;

   AVG_1_1_LEV_02 = gamma_m1*AVG_1_D10*AVG_1_u1*pow(inv_AVG_a, 2)*inv_AVG_met_fact;

    AVG_1_1_LEV_03 = inv_AVG_met_fact*(gama*AVG_1_D10*AVG_1_u2*pow(inv_AVG_a, 2) - AVG_1_D10*AVG_1_u2*pow(inv_AVG_a, 2)
      - AVG_1_D11*inv_AVG_rho);

   AVG_1_1_LEV_04 = -gamma_m1*AVG_1_D10*pow(inv_AVG_a, 2)*inv_AVG_met_fact;

    AVG_1_1_LEV_10 = -rc9*inv_AVG_met_fact*(gama*AVG_1_D11*pow(AVG_1_u0, 2)*pow(inv_AVG_a, 2) +
      gama*AVG_1_D11*pow(AVG_1_u1, 2)*pow(inv_AVG_a, 2) + gama*AVG_1_D11*pow(AVG_1_u2, 2)*pow(inv_AVG_a, 2) +
      2*AVG_1_D10*AVG_1_u2*inv_AVG_rho - AVG_1_D11*pow(AVG_1_u0, 2)*pow(inv_AVG_a, 2) - AVG_1_D11*pow(AVG_1_u1,
      2)*pow(inv_AVG_a, 2) - AVG_1_D11*pow(AVG_1_u2, 2)*pow(inv_AVG_a, 2) - 2*AVG_1_D11);

   AVG_1_1_LEV_11 = gamma_m1*AVG_1_D11*AVG_1_u0*pow(inv_AVG_a, 2)*inv_AVG_met_fact;

   AVG_1_1_LEV_12 = gamma_m1*AVG_1_D11*AVG_1_u1*pow(inv_AVG_a, 2)*inv_AVG_met_fact;

    AVG_1_1_LEV_13 = inv_AVG_met_fact*(gama*AVG_1_D11*AVG_1_u2*pow(inv_AVG_a, 2) + AVG_1_D10*inv_AVG_rho -
      AVG_1_D11*AVG_1_u2*pow(inv_AVG_a, 2));

   AVG_1_1_LEV_14 = -gamma_m1*AVG_1_D11*pow(inv_AVG_a, 2)*inv_AVG_met_fact;

   AVG_1_1_LEV_20 = inv_AVG_met_fact*inv_AVG_rho*(AVG_1_D10*AVG_1_u1 - AVG_1_D11*AVG_1_u0);

   AVG_1_1_LEV_21 = AVG_1_D11*inv_AVG_met_fact*inv_AVG_rho;

   AVG_1_1_LEV_22 = -AVG_1_D10*inv_AVG_met_fact*inv_AVG_rho;

    AVG_1_1_LEV_30 = -0.353553390593274*inv_AVG_a*inv_AVG_rho*(-gama*pow(AVG_1_u0, 2) - gama*pow(AVG_1_u1, 2) -
      gama*pow(AVG_1_u2, 2) + 2*AVG_1_D10*AVG_1_a*AVG_1_u0*inv_AVG_met_fact +
      2*AVG_1_D11*AVG_1_a*AVG_1_u1*inv_AVG_met_fact + pow(AVG_1_u0, 2) + pow(AVG_1_u1, 2) + pow(AVG_1_u2, 2));

    AVG_1_1_LEV_31 = 0.707106781186547*inv_AVG_a*inv_AVG_rho*(-gama*AVG_1_u0 + AVG_1_D10*AVG_1_a*inv_AVG_met_fact +
      AVG_1_u0);

    AVG_1_1_LEV_32 = 0.707106781186547*inv_AVG_a*inv_AVG_rho*(-gama*AVG_1_u1 + AVG_1_D11*AVG_1_a*inv_AVG_met_fact +
      AVG_1_u1);

   AVG_1_1_LEV_33 = -0.707106781186547*gamma_m1*AVG_1_u2*inv_AVG_a*inv_AVG_rho;

   AVG_1_1_LEV_34 = 0.707106781186547*gamma_m1*inv_AVG_a*inv_AVG_rho;

    AVG_1_1_LEV_40 = 0.353553390593274*inv_AVG_a*inv_AVG_rho*(gama*pow(AVG_1_u0, 2) + gama*pow(AVG_1_u1, 2) +
      gama*pow(AVG_1_u2, 2) + 2*AVG_1_D10*AVG_1_a*AVG_1_u0*inv_AVG_met_fact +
      2*AVG_1_D11*AVG_1_a*AVG_1_u1*inv_AVG_met_fact - pow(AVG_1_u0, 2) - pow(AVG_1_u1, 2) - pow(AVG_1_u2, 2));

    AVG_1_1_LEV_41 = -0.707106781186547*inv_AVG_a*inv_AVG_rho*(gama*AVG_1_u0 + AVG_1_D10*AVG_1_a*inv_AVG_met_fact -
      AVG_1_u0);

    AVG_1_1_LEV_42 = -0.707106781186547*inv_AVG_a*inv_AVG_rho*(gama*AVG_1_u1 + AVG_1_D11*AVG_1_a*inv_AVG_met_fact -
      AVG_1_u1);

   AVG_1_1_LEV_43 = -0.707106781186547*gamma_m1*AVG_1_u2*inv_AVG_a*inv_AVG_rho;

   AVG_1_1_LEV_44 = 0.707106781186547*gamma_m1*inv_AVG_a*inv_AVG_rho;

    CF_00 = (AVG_1_1_LEV_00*U1_B0(0,-2,0)*rho_B0(0,-2,0) +
      AVG_1_1_LEV_01*D10_B0(0,-2,0)*p_B0(0,-2,0) +
      AVG_1_1_LEV_01*U1_B0(0,-2,0)*rhou0_B0(0,-2,0) +
      AVG_1_1_LEV_02*D11_B0(0,-2,0)*p_B0(0,-2,0) +
      AVG_1_1_LEV_02*U1_B0(0,-2,0)*rhou1_B0(0,-2,0) +
      AVG_1_1_LEV_03*U1_B0(0,-2,0)*rhou2_B0(0,-2,0) +
      AVG_1_1_LEV_04*U1_B0(0,-2,0)*p_B0(0,-2,0) +
      AVG_1_1_LEV_04*U1_B0(0,-2,0)*rhoE_B0(0,-2,0))*detJ_B0(0,-2,0);

    CF_10 = (AVG_1_1_LEV_10*U1_B0(0,-2,0)*rho_B0(0,-2,0) +
      AVG_1_1_LEV_11*D10_B0(0,-2,0)*p_B0(0,-2,0) +
      AVG_1_1_LEV_11*U1_B0(0,-2,0)*rhou0_B0(0,-2,0) +
      AVG_1_1_LEV_12*D11_B0(0,-2,0)*p_B0(0,-2,0) +
      AVG_1_1_LEV_12*U1_B0(0,-2,0)*rhou1_B0(0,-2,0) +
      AVG_1_1_LEV_13*U1_B0(0,-2,0)*rhou2_B0(0,-2,0) +
      AVG_1_1_LEV_14*U1_B0(0,-2,0)*p_B0(0,-2,0) +
      AVG_1_1_LEV_14*U1_B0(0,-2,0)*rhoE_B0(0,-2,0))*detJ_B0(0,-2,0);

    CF_20 = (AVG_1_1_LEV_20*U1_B0(0,-2,0)*rho_B0(0,-2,0) +
      AVG_1_1_LEV_21*D10_B0(0,-2,0)*p_B0(0,-2,0) +
      AVG_1_1_LEV_21*U1_B0(0,-2,0)*rhou0_B0(0,-2,0) +
      AVG_1_1_LEV_22*D11_B0(0,-2,0)*p_B0(0,-2,0) +
      AVG_1_1_LEV_22*U1_B0(0,-2,0)*rhou1_B0(0,-2,0))*detJ_B0(0,-2,0);

    CF_30 = (AVG_1_1_LEV_30*U1_B0(0,-2,0)*rho_B0(0,-2,0) +
      AVG_1_1_LEV_31*D10_B0(0,-2,0)*p_B0(0,-2,0) +
      AVG_1_1_LEV_31*U1_B0(0,-2,0)*rhou0_B0(0,-2,0) +
      AVG_1_1_LEV_32*D11_B0(0,-2,0)*p_B0(0,-2,0) +
      AVG_1_1_LEV_32*U1_B0(0,-2,0)*rhou1_B0(0,-2,0) +
      AVG_1_1_LEV_33*U1_B0(0,-2,0)*rhou2_B0(0,-2,0) +
      AVG_1_1_LEV_34*U1_B0(0,-2,0)*p_B0(0,-2,0) +
      AVG_1_1_LEV_34*U1_B0(0,-2,0)*rhoE_B0(0,-2,0))*detJ_B0(0,-2,0);

    CF_40 = (AVG_1_1_LEV_40*U1_B0(0,-2,0)*rho_B0(0,-2,0) +
      AVG_1_1_LEV_41*D10_B0(0,-2,0)*p_B0(0,-2,0) +
      AVG_1_1_LEV_41*U1_B0(0,-2,0)*rhou0_B0(0,-2,0) +
      AVG_1_1_LEV_42*D11_B0(0,-2,0)*p_B0(0,-2,0) +
      AVG_1_1_LEV_42*U1_B0(0,-2,0)*rhou1_B0(0,-2,0) +
      AVG_1_1_LEV_43*U1_B0(0,-2,0)*rhou2_B0(0,-2,0) +
      AVG_1_1_LEV_44*U1_B0(0,-2,0)*p_B0(0,-2,0) +
      AVG_1_1_LEV_44*U1_B0(0,-2,0)*rhoE_B0(0,-2,0))*detJ_B0(0,-2,0);

    CF_01 = (AVG_1_1_LEV_00*U1_B0(0,-1,0)*rho_B0(0,-1,0) +
      AVG_1_1_LEV_01*D10_B0(0,-1,0)*p_B0(0,-1,0) +
      AVG_1_1_LEV_01*U1_B0(0,-1,0)*rhou0_B0(0,-1,0) +
      AVG_1_1_LEV_02*D11_B0(0,-1,0)*p_B0(0,-1,0) +
      AVG_1_1_LEV_02*U1_B0(0,-1,0)*rhou1_B0(0,-1,0) +
      AVG_1_1_LEV_03*U1_B0(0,-1,0)*rhou2_B0(0,-1,0) +
      AVG_1_1_LEV_04*U1_B0(0,-1,0)*p_B0(0,-1,0) +
      AVG_1_1_LEV_04*U1_B0(0,-1,0)*rhoE_B0(0,-1,0))*detJ_B0(0,-1,0);

    CF_11 = (AVG_1_1_LEV_10*U1_B0(0,-1,0)*rho_B0(0,-1,0) +
      AVG_1_1_LEV_11*D10_B0(0,-1,0)*p_B0(0,-1,0) +
      AVG_1_1_LEV_11*U1_B0(0,-1,0)*rhou0_B0(0,-1,0) +
      AVG_1_1_LEV_12*D11_B0(0,-1,0)*p_B0(0,-1,0) +
      AVG_1_1_LEV_12*U1_B0(0,-1,0)*rhou1_B0(0,-1,0) +
      AVG_1_1_LEV_13*U1_B0(0,-1,0)*rhou2_B0(0,-1,0) +
      AVG_1_1_LEV_14*U1_B0(0,-1,0)*p_B0(0,-1,0) +
      AVG_1_1_LEV_14*U1_B0(0,-1,0)*rhoE_B0(0,-1,0))*detJ_B0(0,-1,0);

    CF_21 = (AVG_1_1_LEV_20*U1_B0(0,-1,0)*rho_B0(0,-1,0) +
      AVG_1_1_LEV_21*D10_B0(0,-1,0)*p_B0(0,-1,0) +
      AVG_1_1_LEV_21*U1_B0(0,-1,0)*rhou0_B0(0,-1,0) +
      AVG_1_1_LEV_22*D11_B0(0,-1,0)*p_B0(0,-1,0) +
      AVG_1_1_LEV_22*U1_B0(0,-1,0)*rhou1_B0(0,-1,0))*detJ_B0(0,-1,0);

    CF_31 = (AVG_1_1_LEV_30*U1_B0(0,-1,0)*rho_B0(0,-1,0) +
      AVG_1_1_LEV_31*D10_B0(0,-1,0)*p_B0(0,-1,0) +
      AVG_1_1_LEV_31*U1_B0(0,-1,0)*rhou0_B0(0,-1,0) +
      AVG_1_1_LEV_32*D11_B0(0,-1,0)*p_B0(0,-1,0) +
      AVG_1_1_LEV_32*U1_B0(0,-1,0)*rhou1_B0(0,-1,0) +
      AVG_1_1_LEV_33*U1_B0(0,-1,0)*rhou2_B0(0,-1,0) +
      AVG_1_1_LEV_34*U1_B0(0,-1,0)*p_B0(0,-1,0) +
      AVG_1_1_LEV_34*U1_B0(0,-1,0)*rhoE_B0(0,-1,0))*detJ_B0(0,-1,0);

    CF_41 = (AVG_1_1_LEV_40*U1_B0(0,-1,0)*rho_B0(0,-1,0) +
      AVG_1_1_LEV_41*D10_B0(0,-1,0)*p_B0(0,-1,0) +
      AVG_1_1_LEV_41*U1_B0(0,-1,0)*rhou0_B0(0,-1,0) +
      AVG_1_1_LEV_42*D11_B0(0,-1,0)*p_B0(0,-1,0) +
      AVG_1_1_LEV_42*U1_B0(0,-1,0)*rhou1_B0(0,-1,0) +
      AVG_1_1_LEV_43*U1_B0(0,-1,0)*rhou2_B0(0,-1,0) +
      AVG_1_1_LEV_44*U1_B0(0,-1,0)*p_B0(0,-1,0) +
      AVG_1_1_LEV_44*U1_B0(0,-1,0)*rhoE_B0(0,-1,0))*detJ_B0(0,-1,0);

    CF_02 = (AVG_1_1_LEV_00*U1_B0(0,0,0)*rho_B0(0,0,0) +
      AVG_1_1_LEV_01*D10_B0(0,0,0)*p_B0(0,0,0) +
      AVG_1_1_LEV_01*U1_B0(0,0,0)*rhou0_B0(0,0,0) +
      AVG_1_1_LEV_02*D11_B0(0,0,0)*p_B0(0,0,0) +
      AVG_1_1_LEV_02*U1_B0(0,0,0)*rhou1_B0(0,0,0) +
      AVG_1_1_LEV_03*U1_B0(0,0,0)*rhou2_B0(0,0,0) +
      AVG_1_1_LEV_04*U1_B0(0,0,0)*p_B0(0,0,0) +
      AVG_1_1_LEV_04*U1_B0(0,0,0)*rhoE_B0(0,0,0))*detJ_B0(0,0,0);

    CF_12 = (AVG_1_1_LEV_10*U1_B0(0,0,0)*rho_B0(0,0,0) +
      AVG_1_1_LEV_11*D10_B0(0,0,0)*p_B0(0,0,0) +
      AVG_1_1_LEV_11*U1_B0(0,0,0)*rhou0_B0(0,0,0) +
      AVG_1_1_LEV_12*D11_B0(0,0,0)*p_B0(0,0,0) +
      AVG_1_1_LEV_12*U1_B0(0,0,0)*rhou1_B0(0,0,0) +
      AVG_1_1_LEV_13*U1_B0(0,0,0)*rhou2_B0(0,0,0) +
      AVG_1_1_LEV_14*U1_B0(0,0,0)*p_B0(0,0,0) +
      AVG_1_1_LEV_14*U1_B0(0,0,0)*rhoE_B0(0,0,0))*detJ_B0(0,0,0);

    CF_22 = (AVG_1_1_LEV_20*U1_B0(0,0,0)*rho_B0(0,0,0) +
      AVG_1_1_LEV_21*D10_B0(0,0,0)*p_B0(0,0,0) +
      AVG_1_1_LEV_21*U1_B0(0,0,0)*rhou0_B0(0,0,0) +
      AVG_1_1_LEV_22*D11_B0(0,0,0)*p_B0(0,0,0) +
      AVG_1_1_LEV_22*U1_B0(0,0,0)*rhou1_B0(0,0,0))*detJ_B0(0,0,0);

    CF_32 = (AVG_1_1_LEV_30*U1_B0(0,0,0)*rho_B0(0,0,0) +
      AVG_1_1_LEV_31*D10_B0(0,0,0)*p_B0(0,0,0) +
      AVG_1_1_LEV_31*U1_B0(0,0,0)*rhou0_B0(0,0,0) +
      AVG_1_1_LEV_32*D11_B0(0,0,0)*p_B0(0,0,0) +
      AVG_1_1_LEV_32*U1_B0(0,0,0)*rhou1_B0(0,0,0) +
      AVG_1_1_LEV_33*U1_B0(0,0,0)*rhou2_B0(0,0,0) +
      AVG_1_1_LEV_34*U1_B0(0,0,0)*p_B0(0,0,0) +
      AVG_1_1_LEV_34*U1_B0(0,0,0)*rhoE_B0(0,0,0))*detJ_B0(0,0,0);

    CF_42 = (AVG_1_1_LEV_40*U1_B0(0,0,0)*rho_B0(0,0,0) +
      AVG_1_1_LEV_41*D10_B0(0,0,0)*p_B0(0,0,0) +
      AVG_1_1_LEV_41*U1_B0(0,0,0)*rhou0_B0(0,0,0) +
      AVG_1_1_LEV_42*D11_B0(0,0,0)*p_B0(0,0,0) +
      AVG_1_1_LEV_42*U1_B0(0,0,0)*rhou1_B0(0,0,0) +
      AVG_1_1_LEV_43*U1_B0(0,0,0)*rhou2_B0(0,0,0) +
      AVG_1_1_LEV_44*U1_B0(0,0,0)*p_B0(0,0,0) +
      AVG_1_1_LEV_44*U1_B0(0,0,0)*rhoE_B0(0,0,0))*detJ_B0(0,0,0);

    CF_03 = (AVG_1_1_LEV_00*U1_B0(0,1,0)*rho_B0(0,1,0) +
      AVG_1_1_LEV_01*D10_B0(0,1,0)*p_B0(0,1,0) +
      AVG_1_1_LEV_01*U1_B0(0,1,0)*rhou0_B0(0,1,0) +
      AVG_1_1_LEV_02*D11_B0(0,1,0)*p_B0(0,1,0) +
      AVG_1_1_LEV_02*U1_B0(0,1,0)*rhou1_B0(0,1,0) +
      AVG_1_1_LEV_03*U1_B0(0,1,0)*rhou2_B0(0,1,0) +
      AVG_1_1_LEV_04*U1_B0(0,1,0)*p_B0(0,1,0) +
      AVG_1_1_LEV_04*U1_B0(0,1,0)*rhoE_B0(0,1,0))*detJ_B0(0,1,0);

    CF_13 = (AVG_1_1_LEV_10*U1_B0(0,1,0)*rho_B0(0,1,0) +
      AVG_1_1_LEV_11*D10_B0(0,1,0)*p_B0(0,1,0) +
      AVG_1_1_LEV_11*U1_B0(0,1,0)*rhou0_B0(0,1,0) +
      AVG_1_1_LEV_12*D11_B0(0,1,0)*p_B0(0,1,0) +
      AVG_1_1_LEV_12*U1_B0(0,1,0)*rhou1_B0(0,1,0) +
      AVG_1_1_LEV_13*U1_B0(0,1,0)*rhou2_B0(0,1,0) +
      AVG_1_1_LEV_14*U1_B0(0,1,0)*p_B0(0,1,0) +
      AVG_1_1_LEV_14*U1_B0(0,1,0)*rhoE_B0(0,1,0))*detJ_B0(0,1,0);

    CF_23 = (AVG_1_1_LEV_20*U1_B0(0,1,0)*rho_B0(0,1,0) +
      AVG_1_1_LEV_21*D10_B0(0,1,0)*p_B0(0,1,0) +
      AVG_1_1_LEV_21*U1_B0(0,1,0)*rhou0_B0(0,1,0) +
      AVG_1_1_LEV_22*D11_B0(0,1,0)*p_B0(0,1,0) +
      AVG_1_1_LEV_22*U1_B0(0,1,0)*rhou1_B0(0,1,0))*detJ_B0(0,1,0);

    CF_33 = (AVG_1_1_LEV_30*U1_B0(0,1,0)*rho_B0(0,1,0) +
      AVG_1_1_LEV_31*D10_B0(0,1,0)*p_B0(0,1,0) +
      AVG_1_1_LEV_31*U1_B0(0,1,0)*rhou0_B0(0,1,0) +
      AVG_1_1_LEV_32*D11_B0(0,1,0)*p_B0(0,1,0) +
      AVG_1_1_LEV_32*U1_B0(0,1,0)*rhou1_B0(0,1,0) +
      AVG_1_1_LEV_33*U1_B0(0,1,0)*rhou2_B0(0,1,0) +
      AVG_1_1_LEV_34*U1_B0(0,1,0)*p_B0(0,1,0) +
      AVG_1_1_LEV_34*U1_B0(0,1,0)*rhoE_B0(0,1,0))*detJ_B0(0,1,0);

    CF_43 = (AVG_1_1_LEV_40*U1_B0(0,1,0)*rho_B0(0,1,0) +
      AVG_1_1_LEV_41*D10_B0(0,1,0)*p_B0(0,1,0) +
      AVG_1_1_LEV_41*U1_B0(0,1,0)*rhou0_B0(0,1,0) +
      AVG_1_1_LEV_42*D11_B0(0,1,0)*p_B0(0,1,0) +
      AVG_1_1_LEV_42*U1_B0(0,1,0)*rhou1_B0(0,1,0) +
      AVG_1_1_LEV_43*U1_B0(0,1,0)*rhou2_B0(0,1,0) +
      AVG_1_1_LEV_44*U1_B0(0,1,0)*p_B0(0,1,0) +
      AVG_1_1_LEV_44*U1_B0(0,1,0)*rhoE_B0(0,1,0))*detJ_B0(0,1,0);

    CF_04 = (AVG_1_1_LEV_00*U1_B0(0,2,0)*rho_B0(0,2,0) +
      AVG_1_1_LEV_01*D10_B0(0,2,0)*p_B0(0,2,0) +
      AVG_1_1_LEV_01*U1_B0(0,2,0)*rhou0_B0(0,2,0) +
      AVG_1_1_LEV_02*D11_B0(0,2,0)*p_B0(0,2,0) +
      AVG_1_1_LEV_02*U1_B0(0,2,0)*rhou1_B0(0,2,0) +
      AVG_1_1_LEV_03*U1_B0(0,2,0)*rhou2_B0(0,2,0) +
      AVG_1_1_LEV_04*U1_B0(0,2,0)*p_B0(0,2,0) +
      AVG_1_1_LEV_04*U1_B0(0,2,0)*rhoE_B0(0,2,0))*detJ_B0(0,2,0);

    CF_14 = (AVG_1_1_LEV_10*U1_B0(0,2,0)*rho_B0(0,2,0) +
      AVG_1_1_LEV_11*D10_B0(0,2,0)*p_B0(0,2,0) +
      AVG_1_1_LEV_11*U1_B0(0,2,0)*rhou0_B0(0,2,0) +
      AVG_1_1_LEV_12*D11_B0(0,2,0)*p_B0(0,2,0) +
      AVG_1_1_LEV_12*U1_B0(0,2,0)*rhou1_B0(0,2,0) +
      AVG_1_1_LEV_13*U1_B0(0,2,0)*rhou2_B0(0,2,0) +
      AVG_1_1_LEV_14*U1_B0(0,2,0)*p_B0(0,2,0) +
      AVG_1_1_LEV_14*U1_B0(0,2,0)*rhoE_B0(0,2,0))*detJ_B0(0,2,0);

    CF_24 = (AVG_1_1_LEV_20*U1_B0(0,2,0)*rho_B0(0,2,0) +
      AVG_1_1_LEV_21*D10_B0(0,2,0)*p_B0(0,2,0) +
      AVG_1_1_LEV_21*U1_B0(0,2,0)*rhou0_B0(0,2,0) +
      AVG_1_1_LEV_22*D11_B0(0,2,0)*p_B0(0,2,0) +
      AVG_1_1_LEV_22*U1_B0(0,2,0)*rhou1_B0(0,2,0))*detJ_B0(0,2,0);

    CF_34 = (AVG_1_1_LEV_30*U1_B0(0,2,0)*rho_B0(0,2,0) +
      AVG_1_1_LEV_31*D10_B0(0,2,0)*p_B0(0,2,0) +
      AVG_1_1_LEV_31*U1_B0(0,2,0)*rhou0_B0(0,2,0) +
      AVG_1_1_LEV_32*D11_B0(0,2,0)*p_B0(0,2,0) +
      AVG_1_1_LEV_32*U1_B0(0,2,0)*rhou1_B0(0,2,0) +
      AVG_1_1_LEV_33*U1_B0(0,2,0)*rhou2_B0(0,2,0) +
      AVG_1_1_LEV_34*U1_B0(0,2,0)*p_B0(0,2,0) +
      AVG_1_1_LEV_34*U1_B0(0,2,0)*rhoE_B0(0,2,0))*detJ_B0(0,2,0);

    CF_44 = (AVG_1_1_LEV_40*U1_B0(0,2,0)*rho_B0(0,2,0) +
      AVG_1_1_LEV_41*D10_B0(0,2,0)*p_B0(0,2,0) +
      AVG_1_1_LEV_41*U1_B0(0,2,0)*rhou0_B0(0,2,0) +
      AVG_1_1_LEV_42*D11_B0(0,2,0)*p_B0(0,2,0) +
      AVG_1_1_LEV_42*U1_B0(0,2,0)*rhou1_B0(0,2,0) +
      AVG_1_1_LEV_43*U1_B0(0,2,0)*rhou2_B0(0,2,0) +
      AVG_1_1_LEV_44*U1_B0(0,2,0)*p_B0(0,2,0) +
      AVG_1_1_LEV_44*U1_B0(0,2,0)*rhoE_B0(0,2,0))*detJ_B0(0,2,0);

    CF_05 = (AVG_1_1_LEV_00*U1_B0(0,3,0)*rho_B0(0,3,0) +
      AVG_1_1_LEV_01*D10_B0(0,3,0)*p_B0(0,3,0) +
      AVG_1_1_LEV_01*U1_B0(0,3,0)*rhou0_B0(0,3,0) +
      AVG_1_1_LEV_02*D11_B0(0,3,0)*p_B0(0,3,0) +
      AVG_1_1_LEV_02*U1_B0(0,3,0)*rhou1_B0(0,3,0) +
      AVG_1_1_LEV_03*U1_B0(0,3,0)*rhou2_B0(0,3,0) +
      AVG_1_1_LEV_04*U1_B0(0,3,0)*p_B0(0,3,0) +
      AVG_1_1_LEV_04*U1_B0(0,3,0)*rhoE_B0(0,3,0))*detJ_B0(0,3,0);

    CF_15 = (AVG_1_1_LEV_10*U1_B0(0,3,0)*rho_B0(0,3,0) +
      AVG_1_1_LEV_11*D10_B0(0,3,0)*p_B0(0,3,0) +
      AVG_1_1_LEV_11*U1_B0(0,3,0)*rhou0_B0(0,3,0) +
      AVG_1_1_LEV_12*D11_B0(0,3,0)*p_B0(0,3,0) +
      AVG_1_1_LEV_12*U1_B0(0,3,0)*rhou1_B0(0,3,0) +
      AVG_1_1_LEV_13*U1_B0(0,3,0)*rhou2_B0(0,3,0) +
      AVG_1_1_LEV_14*U1_B0(0,3,0)*p_B0(0,3,0) +
      AVG_1_1_LEV_14*U1_B0(0,3,0)*rhoE_B0(0,3,0))*detJ_B0(0,3,0);

    CF_25 = (AVG_1_1_LEV_20*U1_B0(0,3,0)*rho_B0(0,3,0) +
      AVG_1_1_LEV_21*D10_B0(0,3,0)*p_B0(0,3,0) +
      AVG_1_1_LEV_21*U1_B0(0,3,0)*rhou0_B0(0,3,0) +
      AVG_1_1_LEV_22*D11_B0(0,3,0)*p_B0(0,3,0) +
      AVG_1_1_LEV_22*U1_B0(0,3,0)*rhou1_B0(0,3,0))*detJ_B0(0,3,0);

    CF_35 = (AVG_1_1_LEV_30*U1_B0(0,3,0)*rho_B0(0,3,0) +
      AVG_1_1_LEV_31*D10_B0(0,3,0)*p_B0(0,3,0) +
      AVG_1_1_LEV_31*U1_B0(0,3,0)*rhou0_B0(0,3,0) +
      AVG_1_1_LEV_32*D11_B0(0,3,0)*p_B0(0,3,0) +
      AVG_1_1_LEV_32*U1_B0(0,3,0)*rhou1_B0(0,3,0) +
      AVG_1_1_LEV_33*U1_B0(0,3,0)*rhou2_B0(0,3,0) +
      AVG_1_1_LEV_34*U1_B0(0,3,0)*p_B0(0,3,0) +
      AVG_1_1_LEV_34*U1_B0(0,3,0)*rhoE_B0(0,3,0))*detJ_B0(0,3,0);

    CF_45 = (AVG_1_1_LEV_40*U1_B0(0,3,0)*rho_B0(0,3,0) +
      AVG_1_1_LEV_41*D10_B0(0,3,0)*p_B0(0,3,0) +
      AVG_1_1_LEV_41*U1_B0(0,3,0)*rhou0_B0(0,3,0) +
      AVG_1_1_LEV_42*D11_B0(0,3,0)*p_B0(0,3,0) +
      AVG_1_1_LEV_42*U1_B0(0,3,0)*rhou1_B0(0,3,0) +
      AVG_1_1_LEV_43*U1_B0(0,3,0)*rhou2_B0(0,3,0) +
      AVG_1_1_LEV_44*U1_B0(0,3,0)*p_B0(0,3,0) +
      AVG_1_1_LEV_44*U1_B0(0,3,0)*rhoE_B0(0,3,0))*detJ_B0(0,3,0);

    CS_00 = AVG_1_1_LEV_00*rho_B0(0,-2,0) + AVG_1_1_LEV_01*rhou0_B0(0,-2,0) +
      AVG_1_1_LEV_02*rhou1_B0(0,-2,0) + AVG_1_1_LEV_03*rhou2_B0(0,-2,0) +
      AVG_1_1_LEV_04*rhoE_B0(0,-2,0);

    CS_01 = AVG_1_1_LEV_00*rho_B0(0,-1,0) + AVG_1_1_LEV_01*rhou0_B0(0,-1,0) +
      AVG_1_1_LEV_02*rhou1_B0(0,-1,0) + AVG_1_1_LEV_03*rhou2_B0(0,-1,0) +
      AVG_1_1_LEV_04*rhoE_B0(0,-1,0);

    CS_02 = AVG_1_1_LEV_00*rho_B0(0,0,0) + AVG_1_1_LEV_01*rhou0_B0(0,0,0) +
      AVG_1_1_LEV_02*rhou1_B0(0,0,0) + AVG_1_1_LEV_03*rhou2_B0(0,0,0) +
      AVG_1_1_LEV_04*rhoE_B0(0,0,0);

    CS_03 = AVG_1_1_LEV_00*rho_B0(0,1,0) + AVG_1_1_LEV_01*rhou0_B0(0,1,0) +
      AVG_1_1_LEV_02*rhou1_B0(0,1,0) + AVG_1_1_LEV_03*rhou2_B0(0,1,0) +
      AVG_1_1_LEV_04*rhoE_B0(0,1,0);

    CS_04 = AVG_1_1_LEV_00*rho_B0(0,2,0) + AVG_1_1_LEV_01*rhou0_B0(0,2,0) +
      AVG_1_1_LEV_02*rhou1_B0(0,2,0) + AVG_1_1_LEV_03*rhou2_B0(0,2,0) +
      AVG_1_1_LEV_04*rhoE_B0(0,2,0);

    CS_05 = AVG_1_1_LEV_00*rho_B0(0,3,0) + AVG_1_1_LEV_01*rhou0_B0(0,3,0) +
      AVG_1_1_LEV_02*rhou1_B0(0,3,0) + AVG_1_1_LEV_03*rhou2_B0(0,3,0) +
      AVG_1_1_LEV_04*rhoE_B0(0,3,0);

    CS_10 = AVG_1_1_LEV_10*rho_B0(0,-2,0) + AVG_1_1_LEV_11*rhou0_B0(0,-2,0) +
      AVG_1_1_LEV_12*rhou1_B0(0,-2,0) + AVG_1_1_LEV_13*rhou2_B0(0,-2,0) +
      AVG_1_1_LEV_14*rhoE_B0(0,-2,0);

    CS_11 = AVG_1_1_LEV_10*rho_B0(0,-1,0) + AVG_1_1_LEV_11*rhou0_B0(0,-1,0) +
      AVG_1_1_LEV_12*rhou1_B0(0,-1,0) + AVG_1_1_LEV_13*rhou2_B0(0,-1,0) +
      AVG_1_1_LEV_14*rhoE_B0(0,-1,0);

    CS_12 = AVG_1_1_LEV_10*rho_B0(0,0,0) + AVG_1_1_LEV_11*rhou0_B0(0,0,0) +
      AVG_1_1_LEV_12*rhou1_B0(0,0,0) + AVG_1_1_LEV_13*rhou2_B0(0,0,0) +
      AVG_1_1_LEV_14*rhoE_B0(0,0,0);

    CS_13 = AVG_1_1_LEV_10*rho_B0(0,1,0) + AVG_1_1_LEV_11*rhou0_B0(0,1,0) +
      AVG_1_1_LEV_12*rhou1_B0(0,1,0) + AVG_1_1_LEV_13*rhou2_B0(0,1,0) +
      AVG_1_1_LEV_14*rhoE_B0(0,1,0);

    CS_14 = AVG_1_1_LEV_10*rho_B0(0,2,0) + AVG_1_1_LEV_11*rhou0_B0(0,2,0) +
      AVG_1_1_LEV_12*rhou1_B0(0,2,0) + AVG_1_1_LEV_13*rhou2_B0(0,2,0) +
      AVG_1_1_LEV_14*rhoE_B0(0,2,0);

    CS_15 = AVG_1_1_LEV_10*rho_B0(0,3,0) + AVG_1_1_LEV_11*rhou0_B0(0,3,0) +
      AVG_1_1_LEV_12*rhou1_B0(0,3,0) + AVG_1_1_LEV_13*rhou2_B0(0,3,0) +
      AVG_1_1_LEV_14*rhoE_B0(0,3,0);

    CS_20 = AVG_1_1_LEV_20*rho_B0(0,-2,0) + AVG_1_1_LEV_21*rhou0_B0(0,-2,0) +
      AVG_1_1_LEV_22*rhou1_B0(0,-2,0);

    CS_21 = AVG_1_1_LEV_20*rho_B0(0,-1,0) + AVG_1_1_LEV_21*rhou0_B0(0,-1,0) +
      AVG_1_1_LEV_22*rhou1_B0(0,-1,0);

    CS_22 = AVG_1_1_LEV_20*rho_B0(0,0,0) + AVG_1_1_LEV_21*rhou0_B0(0,0,0) +
      AVG_1_1_LEV_22*rhou1_B0(0,0,0);

    CS_23 = AVG_1_1_LEV_20*rho_B0(0,1,0) + AVG_1_1_LEV_21*rhou0_B0(0,1,0) +
      AVG_1_1_LEV_22*rhou1_B0(0,1,0);

    CS_24 = AVG_1_1_LEV_20*rho_B0(0,2,0) + AVG_1_1_LEV_21*rhou0_B0(0,2,0) +
      AVG_1_1_LEV_22*rhou1_B0(0,2,0);

    CS_25 = AVG_1_1_LEV_20*rho_B0(0,3,0) + AVG_1_1_LEV_21*rhou0_B0(0,3,0) +
      AVG_1_1_LEV_22*rhou1_B0(0,3,0);

    CS_30 = AVG_1_1_LEV_30*rho_B0(0,-2,0) + AVG_1_1_LEV_31*rhou0_B0(0,-2,0) +
      AVG_1_1_LEV_32*rhou1_B0(0,-2,0) + AVG_1_1_LEV_33*rhou2_B0(0,-2,0) +
      AVG_1_1_LEV_34*rhoE_B0(0,-2,0);

    CS_31 = AVG_1_1_LEV_30*rho_B0(0,-1,0) + AVG_1_1_LEV_31*rhou0_B0(0,-1,0) +
      AVG_1_1_LEV_32*rhou1_B0(0,-1,0) + AVG_1_1_LEV_33*rhou2_B0(0,-1,0) +
      AVG_1_1_LEV_34*rhoE_B0(0,-1,0);

    CS_32 = AVG_1_1_LEV_30*rho_B0(0,0,0) + AVG_1_1_LEV_31*rhou0_B0(0,0,0) +
      AVG_1_1_LEV_32*rhou1_B0(0,0,0) + AVG_1_1_LEV_33*rhou2_B0(0,0,0) +
      AVG_1_1_LEV_34*rhoE_B0(0,0,0);

    CS_33 = AVG_1_1_LEV_30*rho_B0(0,1,0) + AVG_1_1_LEV_31*rhou0_B0(0,1,0) +
      AVG_1_1_LEV_32*rhou1_B0(0,1,0) + AVG_1_1_LEV_33*rhou2_B0(0,1,0) +
      AVG_1_1_LEV_34*rhoE_B0(0,1,0);

    CS_34 = AVG_1_1_LEV_30*rho_B0(0,2,0) + AVG_1_1_LEV_31*rhou0_B0(0,2,0) +
      AVG_1_1_LEV_32*rhou1_B0(0,2,0) + AVG_1_1_LEV_33*rhou2_B0(0,2,0) +
      AVG_1_1_LEV_34*rhoE_B0(0,2,0);

    CS_35 = AVG_1_1_LEV_30*rho_B0(0,3,0) + AVG_1_1_LEV_31*rhou0_B0(0,3,0) +
      AVG_1_1_LEV_32*rhou1_B0(0,3,0) + AVG_1_1_LEV_33*rhou2_B0(0,3,0) +
      AVG_1_1_LEV_34*rhoE_B0(0,3,0);

    CS_40 = AVG_1_1_LEV_40*rho_B0(0,-2,0) + AVG_1_1_LEV_41*rhou0_B0(0,-2,0) +
      AVG_1_1_LEV_42*rhou1_B0(0,-2,0) + AVG_1_1_LEV_43*rhou2_B0(0,-2,0) +
      AVG_1_1_LEV_44*rhoE_B0(0,-2,0);

    CS_41 = AVG_1_1_LEV_40*rho_B0(0,-1,0) + AVG_1_1_LEV_41*rhou0_B0(0,-1,0) +
      AVG_1_1_LEV_42*rhou1_B0(0,-1,0) + AVG_1_1_LEV_43*rhou2_B0(0,-1,0) +
      AVG_1_1_LEV_44*rhoE_B0(0,-1,0);

    CS_42 = AVG_1_1_LEV_40*rho_B0(0,0,0) + AVG_1_1_LEV_41*rhou0_B0(0,0,0) +
      AVG_1_1_LEV_42*rhou1_B0(0,0,0) + AVG_1_1_LEV_43*rhou2_B0(0,0,0) +
      AVG_1_1_LEV_44*rhoE_B0(0,0,0);

    CS_43 = AVG_1_1_LEV_40*rho_B0(0,1,0) + AVG_1_1_LEV_41*rhou0_B0(0,1,0) +
      AVG_1_1_LEV_42*rhou1_B0(0,1,0) + AVG_1_1_LEV_43*rhou2_B0(0,1,0) +
      AVG_1_1_LEV_44*rhoE_B0(0,1,0);

    CS_44 = AVG_1_1_LEV_40*rho_B0(0,2,0) + AVG_1_1_LEV_41*rhou0_B0(0,2,0) +
      AVG_1_1_LEV_42*rhou1_B0(0,2,0) + AVG_1_1_LEV_43*rhou2_B0(0,2,0) +
      AVG_1_1_LEV_44*rhoE_B0(0,2,0);

    CS_45 = AVG_1_1_LEV_40*rho_B0(0,3,0) + AVG_1_1_LEV_41*rhou0_B0(0,3,0) +
      AVG_1_1_LEV_42*rhou1_B0(0,3,0) + AVG_1_1_LEV_43*rhou2_B0(0,3,0) +
      AVG_1_1_LEV_44*rhoE_B0(0,3,0);

    max_lambda_1_00 = fmax(fabs(D10_B0(0,0,0)*u0_B0(0,0,0) +
      D11_B0(0,0,0)*u1_B0(0,0,0)), fmax(fabs(D10_B0(0,3,0)*u0_B0(0,3,0) +
      D11_B0(0,3,0)*u1_B0(0,3,0)), fmax(fabs(D10_B0(0,2,0)*u0_B0(0,2,0) +
      D11_B0(0,2,0)*u1_B0(0,2,0)), fmax(fabs(D10_B0(0,-1,0)*u0_B0(0,-1,0) +
      D11_B0(0,-1,0)*u1_B0(0,-1,0)), fmax(fabs(D10_B0(0,1,0)*u0_B0(0,1,0) +
      D11_B0(0,1,0)*u1_B0(0,1,0)), fabs(D10_B0(0,-2,0)*u0_B0(0,-2,0) +
      D11_B0(0,-2,0)*u1_B0(0,-2,0)))))));

   max_lambda_1_11 = max_lambda_1_00;

   max_lambda_1_22 = max_lambda_1_00;

    max_lambda_1_33 = fmax(fabs(sqrt(pow(D10_B0(0,0,0), 2) + pow(D11_B0(0,0,0),
      2))*a_B0(0,0,0) + D10_B0(0,0,0)*u0_B0(0,0,0) +
      D11_B0(0,0,0)*u1_B0(0,0,0)), fmax(fabs(sqrt(pow(D10_B0(0,2,0), 2) +
      pow(D11_B0(0,2,0), 2))*a_B0(0,2,0) + D10_B0(0,2,0)*u0_B0(0,2,0) +
      D11_B0(0,2,0)*u1_B0(0,2,0)), fmax(fabs(sqrt(pow(D10_B0(0,3,0), 2) +
      pow(D11_B0(0,3,0), 2))*a_B0(0,3,0) + D10_B0(0,3,0)*u0_B0(0,3,0) +
      D11_B0(0,3,0)*u1_B0(0,3,0)), fmax(fabs(sqrt(pow(D10_B0(0,-2,0), 2) +
      pow(D11_B0(0,-2,0), 2))*a_B0(0,-2,0) + D10_B0(0,-2,0)*u0_B0(0,-2,0) +
      D11_B0(0,-2,0)*u1_B0(0,-2,0)), fmax(fabs(sqrt(pow(D10_B0(0,1,0), 2) +
      pow(D11_B0(0,1,0), 2))*a_B0(0,1,0) + D10_B0(0,1,0)*u0_B0(0,1,0) +
      D11_B0(0,1,0)*u1_B0(0,1,0)), fabs(sqrt(pow(D10_B0(0,-1,0), 2) +
      pow(D11_B0(0,-1,0), 2))*a_B0(0,-1,0) + D10_B0(0,-1,0)*u0_B0(0,-1,0) +
      D11_B0(0,-1,0)*u1_B0(0,-1,0)))))));

    max_lambda_1_44 = fmax(fabs(-sqrt(pow(D10_B0(0,-2,0), 2) + pow(D11_B0(0,-2,0),
      2))*a_B0(0,-2,0) + D10_B0(0,-2,0)*u0_B0(0,-2,0) +
      D11_B0(0,-2,0)*u1_B0(0,-2,0)), fmax(fabs(-sqrt(pow(D10_B0(0,-1,0), 2) +
      pow(D11_B0(0,-1,0), 2))*a_B0(0,-1,0) + D10_B0(0,-1,0)*u0_B0(0,-1,0) +
      D11_B0(0,-1,0)*u1_B0(0,-1,0)), fmax(fabs(-sqrt(pow(D10_B0(0,2,0), 2) +
      pow(D11_B0(0,2,0), 2))*a_B0(0,2,0) + D10_B0(0,2,0)*u0_B0(0,2,0) +
      D11_B0(0,2,0)*u1_B0(0,2,0)), fmax(fabs(-sqrt(pow(D10_B0(0,1,0), 2) +
      pow(D11_B0(0,1,0), 2))*a_B0(0,1,0) + D10_B0(0,1,0)*u0_B0(0,1,0) +
      D11_B0(0,1,0)*u1_B0(0,1,0)), fmax(fabs(-sqrt(pow(D10_B0(0,3,0), 2) +
      pow(D11_B0(0,3,0), 2))*a_B0(0,3,0) + D10_B0(0,3,0)*u0_B0(0,3,0) +
      D11_B0(0,3,0)*u1_B0(0,3,0)), fabs(-sqrt(pow(D10_B0(0,0,0), 2) +
      pow(D11_B0(0,0,0), 2))*a_B0(0,0,0) + D10_B0(0,0,0)*u0_B0(0,0,0) +
      D11_B0(0,0,0)*u1_B0(0,0,0)))))));

    beta_0 = (rc9)*(CF_02 + CS_02*max_lambda_1_00)*((rc20)*(CF_02 + CS_02*max_lambda_1_00) - rc21*(CF_03 +
      CS_03*max_lambda_1_00) + (rc22)*(CF_04 + CS_04*max_lambda_1_00)) + (rc9)*(CF_03 +
      CS_03*max_lambda_1_00)*((rc23)*(CF_03 + CS_03*max_lambda_1_00) - rc24*(CF_04 + CS_04*max_lambda_1_00)) +
      (rc25)*pow(CF_04 + CS_04*max_lambda_1_00, 2);

    beta_1 = (rc9)*(CF_01 + CS_01*max_lambda_1_00)*((rc26)*(CF_01 + CS_01*max_lambda_1_00) - rc27*(CF_02 +
      CS_02*max_lambda_1_00) + (rc28)*(CF_03 + CS_03*max_lambda_1_00)) + (rc9)*(CF_02 +
      CS_02*max_lambda_1_00)*((rc27)*(CF_02 + CS_02*max_lambda_1_00) - rc27*(CF_03 + CS_03*max_lambda_1_00)) +
      (rc25)*pow(CF_03 + CS_03*max_lambda_1_00, 2);

    beta_2 = (rc9)*(CF_00 + CS_00*max_lambda_1_00)*((rc26)*(CF_00 + CS_00*max_lambda_1_00) + (rc22)*(CF_02 +
      CS_02*max_lambda_1_00)) + (rc9)*(CF_01 + CS_01*max_lambda_1_00)*(-rc24*(CF_00 + CS_00*max_lambda_1_00) +
      (rc23)*(CF_01 + CS_01*max_lambda_1_00) - rc21*(CF_02 + CS_02*max_lambda_1_00)) + (rc28)*pow(CF_02 +
      CS_02*max_lambda_1_00, 2);

   alpha_0 = 0.3 + (rc29)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_0 + 1.0e-14, 2);

   alpha_1 = 0.6 + (rc30)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_1 + 1.0e-14, 2);

   alpha_2 = 0.1 + (rc31)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_2 + 1.0e-14, 2);

   inv_alpha_sum = 1.0/(alpha_0 + alpha_1 + alpha_2);

   omega_0 = alpha_0*inv_alpha_sum;

   omega_1 = alpha_1*inv_alpha_sum;

   omega_2 = alpha_2*inv_alpha_sum;

    Recon_0 = Recon_0 + omega_0*((rc32)*(CF_02 + CS_02*max_lambda_1_00) + (rc33)*(CF_03 + CS_03*max_lambda_1_00) -
      rc16*(CF_04 + CS_04*max_lambda_1_00)) + omega_1*(-rc16*(CF_01 + CS_01*max_lambda_1_00) + (rc33)*(CF_02 +
      CS_02*max_lambda_1_00) + (rc32)*(CF_03 + CS_03*max_lambda_1_00)) + omega_2*((rc32)*(CF_00 + CS_00*max_lambda_1_00)
      - rc34*(CF_01 + CS_01*max_lambda_1_00) + (rc35)*(CF_02 + CS_02*max_lambda_1_00));

    beta_0 = (rc9)*(CF_03 - CS_03*max_lambda_1_00)*((rc20)*(CF_03 - CS_03*max_lambda_1_00) - rc21*(CF_04 -
      CS_04*max_lambda_1_00) + (rc22)*(CF_05 - CS_05*max_lambda_1_00)) + (rc9)*(CF_04 -
      CS_04*max_lambda_1_00)*((rc23)*(CF_04 - CS_04*max_lambda_1_00) - rc24*(CF_05 - CS_05*max_lambda_1_00)) +
      (rc25)*pow(CF_05 - CS_05*max_lambda_1_00, 2);

    beta_1 = (rc9)*(CF_02 - CS_02*max_lambda_1_00)*((rc26)*(CF_02 - CS_02*max_lambda_1_00) - rc27*(CF_03 -
      CS_03*max_lambda_1_00) + (rc28)*(CF_04 - CS_04*max_lambda_1_00)) + (rc9)*(CF_03 -
      CS_03*max_lambda_1_00)*((rc27)*(CF_03 - CS_03*max_lambda_1_00) - rc27*(CF_04 - CS_04*max_lambda_1_00)) +
      (rc25)*pow(CF_04 - CS_04*max_lambda_1_00, 2);

    beta_2 = (rc9)*(CF_01 - CS_01*max_lambda_1_00)*((rc26)*(CF_01 - CS_01*max_lambda_1_00) - rc24*(CF_02 -
      CS_02*max_lambda_1_00) + (rc22)*(CF_03 - CS_03*max_lambda_1_00)) + (rc9)*(CF_02 -
      CS_02*max_lambda_1_00)*((rc23)*(CF_02 - CS_02*max_lambda_1_00) - rc21*(CF_03 - CS_03*max_lambda_1_00)) +
      (rc28)*pow(CF_03 - CS_03*max_lambda_1_00, 2);

   alpha_0 = 0.1 + (rc31)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_0 + 1.0e-14, 2);

   alpha_1 = 0.6 + (rc30)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_1 + 1.0e-14, 2);

   alpha_2 = 0.3 + (rc29)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_2 + 1.0e-14, 2);

   inv_alpha_sum = 1.0/(alpha_0 + alpha_1 + alpha_2);

   omega_0 = alpha_0*inv_alpha_sum;

   omega_1 = alpha_1*inv_alpha_sum;

   omega_2 = alpha_2*inv_alpha_sum;

    Recon_0 = Recon_0 + omega_0*((rc35)*(CF_03 - CS_03*max_lambda_1_00) - rc34*(CF_04 - CS_04*max_lambda_1_00) +
      (rc32)*(CF_05 - CS_05*max_lambda_1_00)) + omega_1*((rc32)*(CF_02 - CS_02*max_lambda_1_00) + (rc33)*(CF_03 -
      CS_03*max_lambda_1_00) - rc16*(CF_04 - CS_04*max_lambda_1_00)) + omega_2*(-rc16*(CF_01 - CS_01*max_lambda_1_00) +
      (rc33)*(CF_02 - CS_02*max_lambda_1_00) + (rc32)*(CF_03 - CS_03*max_lambda_1_00));

    beta_0 = (rc9)*(CF_12 + CS_12*max_lambda_1_11)*((rc20)*(CF_12 + CS_12*max_lambda_1_11) - rc21*(CF_13 +
      CS_13*max_lambda_1_11) + (rc22)*(CF_14 + CS_14*max_lambda_1_11)) + (rc9)*(CF_13 +
      CS_13*max_lambda_1_11)*((rc23)*(CF_13 + CS_13*max_lambda_1_11) - rc24*(CF_14 + CS_14*max_lambda_1_11)) +
      (rc25)*pow(CF_14 + CS_14*max_lambda_1_11, 2);

    beta_1 = (rc9)*(CF_11 + CS_11*max_lambda_1_11)*((rc26)*(CF_11 + CS_11*max_lambda_1_11) - rc27*(CF_12 +
      CS_12*max_lambda_1_11) + (rc28)*(CF_13 + CS_13*max_lambda_1_11)) + (rc9)*(CF_12 +
      CS_12*max_lambda_1_11)*((rc27)*(CF_12 + CS_12*max_lambda_1_11) - rc27*(CF_13 + CS_13*max_lambda_1_11)) +
      (rc25)*pow(CF_13 + CS_13*max_lambda_1_11, 2);

    beta_2 = (rc9)*(CF_10 + CS_10*max_lambda_1_11)*((rc26)*(CF_10 + CS_10*max_lambda_1_11) + (rc22)*(CF_12 +
      CS_12*max_lambda_1_11)) + (rc9)*(CF_11 + CS_11*max_lambda_1_11)*(-rc24*(CF_10 + CS_10*max_lambda_1_11) +
      (rc23)*(CF_11 + CS_11*max_lambda_1_11) - rc21*(CF_12 + CS_12*max_lambda_1_11)) + (rc28)*pow(CF_12 +
      CS_12*max_lambda_1_11, 2);

   alpha_0 = 0.3 + (rc29)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_0 + 1.0e-14, 2);

   alpha_1 = 0.6 + (rc30)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_1 + 1.0e-14, 2);

   alpha_2 = 0.1 + (rc31)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_2 + 1.0e-14, 2);

   inv_alpha_sum = 1.0/(alpha_0 + alpha_1 + alpha_2);

   omega_0 = alpha_0*inv_alpha_sum;

   omega_1 = alpha_1*inv_alpha_sum;

   omega_2 = alpha_2*inv_alpha_sum;

    Recon_1 = Recon_1 + omega_0*((rc32)*(CF_12 + CS_12*max_lambda_1_11) + (rc33)*(CF_13 + CS_13*max_lambda_1_11) -
      rc16*(CF_14 + CS_14*max_lambda_1_11)) + omega_1*(-rc16*(CF_11 + CS_11*max_lambda_1_11) + (rc33)*(CF_12 +
      CS_12*max_lambda_1_11) + (rc32)*(CF_13 + CS_13*max_lambda_1_11)) + omega_2*((rc32)*(CF_10 + CS_10*max_lambda_1_11)
      - rc34*(CF_11 + CS_11*max_lambda_1_11) + (rc35)*(CF_12 + CS_12*max_lambda_1_11));

    beta_0 = (rc9)*(CF_13 - CS_13*max_lambda_1_11)*((rc20)*(CF_13 - CS_13*max_lambda_1_11) - rc21*(CF_14 -
      CS_14*max_lambda_1_11) + (rc22)*(CF_15 - CS_15*max_lambda_1_11)) + (rc9)*(CF_14 -
      CS_14*max_lambda_1_11)*((rc23)*(CF_14 - CS_14*max_lambda_1_11) - rc24*(CF_15 - CS_15*max_lambda_1_11)) +
      (rc25)*pow(CF_15 - CS_15*max_lambda_1_11, 2);

    beta_1 = (rc9)*(CF_12 - CS_12*max_lambda_1_11)*((rc26)*(CF_12 - CS_12*max_lambda_1_11) - rc27*(CF_13 -
      CS_13*max_lambda_1_11) + (rc28)*(CF_14 - CS_14*max_lambda_1_11)) + (rc9)*(CF_13 -
      CS_13*max_lambda_1_11)*((rc27)*(CF_13 - CS_13*max_lambda_1_11) - rc27*(CF_14 - CS_14*max_lambda_1_11)) +
      (rc25)*pow(CF_14 - CS_14*max_lambda_1_11, 2);

    beta_2 = (rc9)*(CF_11 - CS_11*max_lambda_1_11)*((rc26)*(CF_11 - CS_11*max_lambda_1_11) - rc24*(CF_12 -
      CS_12*max_lambda_1_11) + (rc22)*(CF_13 - CS_13*max_lambda_1_11)) + (rc9)*(CF_12 -
      CS_12*max_lambda_1_11)*((rc23)*(CF_12 - CS_12*max_lambda_1_11) - rc21*(CF_13 - CS_13*max_lambda_1_11)) +
      (rc28)*pow(CF_13 - CS_13*max_lambda_1_11, 2);

   alpha_0 = 0.1 + (rc31)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_0 + 1.0e-14, 2);

   alpha_1 = 0.6 + (rc30)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_1 + 1.0e-14, 2);

   alpha_2 = 0.3 + (rc29)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_2 + 1.0e-14, 2);

   inv_alpha_sum = 1.0/(alpha_0 + alpha_1 + alpha_2);

   omega_0 = alpha_0*inv_alpha_sum;

   omega_1 = alpha_1*inv_alpha_sum;

   omega_2 = alpha_2*inv_alpha_sum;

    Recon_1 = Recon_1 + omega_0*((rc35)*(CF_13 - CS_13*max_lambda_1_11) - rc34*(CF_14 - CS_14*max_lambda_1_11) +
      (rc32)*(CF_15 - CS_15*max_lambda_1_11)) + omega_1*((rc32)*(CF_12 - CS_12*max_lambda_1_11) + (rc33)*(CF_13 -
      CS_13*max_lambda_1_11) - rc16*(CF_14 - CS_14*max_lambda_1_11)) + omega_2*(-rc16*(CF_11 - CS_11*max_lambda_1_11) +
      (rc33)*(CF_12 - CS_12*max_lambda_1_11) + (rc32)*(CF_13 - CS_13*max_lambda_1_11));

    beta_0 = (rc9)*(CF_22 + CS_22*max_lambda_1_22)*((rc20)*(CF_22 + CS_22*max_lambda_1_22) - rc21*(CF_23 +
      CS_23*max_lambda_1_22) + (rc22)*(CF_24 + CS_24*max_lambda_1_22)) + (rc9)*(CF_23 +
      CS_23*max_lambda_1_22)*((rc23)*(CF_23 + CS_23*max_lambda_1_22) - rc24*(CF_24 + CS_24*max_lambda_1_22)) +
      (rc25)*pow(CF_24 + CS_24*max_lambda_1_22, 2);

    beta_1 = (rc9)*(CF_21 + CS_21*max_lambda_1_22)*((rc26)*(CF_21 + CS_21*max_lambda_1_22) - rc27*(CF_22 +
      CS_22*max_lambda_1_22) + (rc28)*(CF_23 + CS_23*max_lambda_1_22)) + (rc9)*(CF_22 +
      CS_22*max_lambda_1_22)*((rc27)*(CF_22 + CS_22*max_lambda_1_22) - rc27*(CF_23 + CS_23*max_lambda_1_22)) +
      (rc25)*pow(CF_23 + CS_23*max_lambda_1_22, 2);

    beta_2 = (rc9)*(CF_20 + CS_20*max_lambda_1_22)*((rc26)*(CF_20 + CS_20*max_lambda_1_22) + (rc22)*(CF_22 +
      CS_22*max_lambda_1_22)) + (rc9)*(CF_21 + CS_21*max_lambda_1_22)*(-rc24*(CF_20 + CS_20*max_lambda_1_22) +
      (rc23)*(CF_21 + CS_21*max_lambda_1_22) - rc21*(CF_22 + CS_22*max_lambda_1_22)) + (rc28)*pow(CF_22 +
      CS_22*max_lambda_1_22, 2);

   alpha_0 = 0.3 + (rc29)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_0 + 1.0e-14, 2);

   alpha_1 = 0.6 + (rc30)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_1 + 1.0e-14, 2);

   alpha_2 = 0.1 + (rc31)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_2 + 1.0e-14, 2);

   inv_alpha_sum = 1.0/(alpha_0 + alpha_1 + alpha_2);

   omega_0 = alpha_0*inv_alpha_sum;

   omega_1 = alpha_1*inv_alpha_sum;

   omega_2 = alpha_2*inv_alpha_sum;

    Recon_2 = Recon_2 + omega_0*((rc32)*(CF_22 + CS_22*max_lambda_1_22) + (rc33)*(CF_23 + CS_23*max_lambda_1_22) -
      rc16*(CF_24 + CS_24*max_lambda_1_22)) + omega_1*(-rc16*(CF_21 + CS_21*max_lambda_1_22) + (rc33)*(CF_22 +
      CS_22*max_lambda_1_22) + (rc32)*(CF_23 + CS_23*max_lambda_1_22)) + omega_2*((rc32)*(CF_20 + CS_20*max_lambda_1_22)
      - rc34*(CF_21 + CS_21*max_lambda_1_22) + (rc35)*(CF_22 + CS_22*max_lambda_1_22));

    beta_0 = (rc9)*(CF_23 - CS_23*max_lambda_1_22)*((rc20)*(CF_23 - CS_23*max_lambda_1_22) - rc21*(CF_24 -
      CS_24*max_lambda_1_22) + (rc22)*(CF_25 - CS_25*max_lambda_1_22)) + (rc9)*(CF_24 -
      CS_24*max_lambda_1_22)*((rc23)*(CF_24 - CS_24*max_lambda_1_22) - rc24*(CF_25 - CS_25*max_lambda_1_22)) +
      (rc25)*pow(CF_25 - CS_25*max_lambda_1_22, 2);

    beta_1 = (rc9)*(CF_22 - CS_22*max_lambda_1_22)*((rc26)*(CF_22 - CS_22*max_lambda_1_22) - rc27*(CF_23 -
      CS_23*max_lambda_1_22) + (rc28)*(CF_24 - CS_24*max_lambda_1_22)) + (rc9)*(CF_23 -
      CS_23*max_lambda_1_22)*((rc27)*(CF_23 - CS_23*max_lambda_1_22) - rc27*(CF_24 - CS_24*max_lambda_1_22)) +
      (rc25)*pow(CF_24 - CS_24*max_lambda_1_22, 2);

    beta_2 = (rc9)*(CF_21 - CS_21*max_lambda_1_22)*((rc26)*(CF_21 - CS_21*max_lambda_1_22) - rc24*(CF_22 -
      CS_22*max_lambda_1_22) + (rc22)*(CF_23 - CS_23*max_lambda_1_22)) + (rc9)*(CF_22 -
      CS_22*max_lambda_1_22)*((rc23)*(CF_22 - CS_22*max_lambda_1_22) - rc21*(CF_23 - CS_23*max_lambda_1_22)) +
      (rc28)*pow(CF_23 - CS_23*max_lambda_1_22, 2);

   alpha_0 = 0.1 + (rc31)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_0 + 1.0e-14, 2);

   alpha_1 = 0.6 + (rc30)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_1 + 1.0e-14, 2);

   alpha_2 = 0.3 + (rc29)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_2 + 1.0e-14, 2);

   inv_alpha_sum = 1.0/(alpha_0 + alpha_1 + alpha_2);

   omega_0 = alpha_0*inv_alpha_sum;

   omega_1 = alpha_1*inv_alpha_sum;

   omega_2 = alpha_2*inv_alpha_sum;

    Recon_2 = Recon_2 + omega_0*((rc35)*(CF_23 - CS_23*max_lambda_1_22) - rc34*(CF_24 - CS_24*max_lambda_1_22) +
      (rc32)*(CF_25 - CS_25*max_lambda_1_22)) + omega_1*((rc32)*(CF_22 - CS_22*max_lambda_1_22) + (rc33)*(CF_23 -
      CS_23*max_lambda_1_22) - rc16*(CF_24 - CS_24*max_lambda_1_22)) + omega_2*(-rc16*(CF_21 - CS_21*max_lambda_1_22) +
      (rc33)*(CF_22 - CS_22*max_lambda_1_22) + (rc32)*(CF_23 - CS_23*max_lambda_1_22));

    beta_0 = (rc9)*(CF_32 + CS_32*max_lambda_1_33)*((rc20)*(CF_32 + CS_32*max_lambda_1_33) - rc21*(CF_33 +
      CS_33*max_lambda_1_33) + (rc22)*(CF_34 + CS_34*max_lambda_1_33)) + (rc9)*(CF_33 +
      CS_33*max_lambda_1_33)*((rc23)*(CF_33 + CS_33*max_lambda_1_33) - rc24*(CF_34 + CS_34*max_lambda_1_33)) +
      (rc25)*pow(CF_34 + CS_34*max_lambda_1_33, 2);

    beta_1 = (rc9)*(CF_31 + CS_31*max_lambda_1_33)*((rc26)*(CF_31 + CS_31*max_lambda_1_33) - rc27*(CF_32 +
      CS_32*max_lambda_1_33) + (rc28)*(CF_33 + CS_33*max_lambda_1_33)) + (rc9)*(CF_32 +
      CS_32*max_lambda_1_33)*((rc27)*(CF_32 + CS_32*max_lambda_1_33) - rc27*(CF_33 + CS_33*max_lambda_1_33)) +
      (rc25)*pow(CF_33 + CS_33*max_lambda_1_33, 2);

    beta_2 = (rc9)*(CF_30 + CS_30*max_lambda_1_33)*((rc26)*(CF_30 + CS_30*max_lambda_1_33) + (rc22)*(CF_32 +
      CS_32*max_lambda_1_33)) + (rc9)*(CF_31 + CS_31*max_lambda_1_33)*(-rc24*(CF_30 + CS_30*max_lambda_1_33) +
      (rc23)*(CF_31 + CS_31*max_lambda_1_33) - rc21*(CF_32 + CS_32*max_lambda_1_33)) + (rc28)*pow(CF_32 +
      CS_32*max_lambda_1_33, 2);

   alpha_0 = 0.3 + (rc29)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_0 + 1.0e-14, 2);

   alpha_1 = 0.6 + (rc30)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_1 + 1.0e-14, 2);

   alpha_2 = 0.1 + (rc31)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_2 + 1.0e-14, 2);

   inv_alpha_sum = 1.0/(alpha_0 + alpha_1 + alpha_2);

   omega_0 = alpha_0*inv_alpha_sum;

   omega_1 = alpha_1*inv_alpha_sum;

   omega_2 = alpha_2*inv_alpha_sum;

    Recon_3 = Recon_3 + omega_0*((rc32)*(CF_32 + CS_32*max_lambda_1_33) + (rc33)*(CF_33 + CS_33*max_lambda_1_33) -
      rc16*(CF_34 + CS_34*max_lambda_1_33)) + omega_1*(-rc16*(CF_31 + CS_31*max_lambda_1_33) + (rc33)*(CF_32 +
      CS_32*max_lambda_1_33) + (rc32)*(CF_33 + CS_33*max_lambda_1_33)) + omega_2*((rc32)*(CF_30 + CS_30*max_lambda_1_33)
      - rc34*(CF_31 + CS_31*max_lambda_1_33) + (rc35)*(CF_32 + CS_32*max_lambda_1_33));

    beta_0 = (rc9)*(CF_33 - CS_33*max_lambda_1_33)*((rc20)*(CF_33 - CS_33*max_lambda_1_33) - rc21*(CF_34 -
      CS_34*max_lambda_1_33) + (rc22)*(CF_35 - CS_35*max_lambda_1_33)) + (rc9)*(CF_34 -
      CS_34*max_lambda_1_33)*((rc23)*(CF_34 - CS_34*max_lambda_1_33) - rc24*(CF_35 - CS_35*max_lambda_1_33)) +
      (rc25)*pow(CF_35 - CS_35*max_lambda_1_33, 2);

    beta_1 = (rc9)*(CF_32 - CS_32*max_lambda_1_33)*((rc26)*(CF_32 - CS_32*max_lambda_1_33) - rc27*(CF_33 -
      CS_33*max_lambda_1_33) + (rc28)*(CF_34 - CS_34*max_lambda_1_33)) + (rc9)*(CF_33 -
      CS_33*max_lambda_1_33)*((rc27)*(CF_33 - CS_33*max_lambda_1_33) - rc27*(CF_34 - CS_34*max_lambda_1_33)) +
      (rc25)*pow(CF_34 - CS_34*max_lambda_1_33, 2);

    beta_2 = (rc9)*(CF_31 - CS_31*max_lambda_1_33)*((rc26)*(CF_31 - CS_31*max_lambda_1_33) - rc24*(CF_32 -
      CS_32*max_lambda_1_33) + (rc22)*(CF_33 - CS_33*max_lambda_1_33)) + (rc9)*(CF_32 -
      CS_32*max_lambda_1_33)*((rc23)*(CF_32 - CS_32*max_lambda_1_33) - rc21*(CF_33 - CS_33*max_lambda_1_33)) +
      (rc28)*pow(CF_33 - CS_33*max_lambda_1_33, 2);

   alpha_0 = 0.1 + (rc31)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_0 + 1.0e-14, 2);

   alpha_1 = 0.6 + (rc30)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_1 + 1.0e-14, 2);

   alpha_2 = 0.3 + (rc29)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_2 + 1.0e-14, 2);

   inv_alpha_sum = 1.0/(alpha_0 + alpha_1 + alpha_2);

   omega_0 = alpha_0*inv_alpha_sum;

   omega_1 = alpha_1*inv_alpha_sum;

   omega_2 = alpha_2*inv_alpha_sum;

    Recon_3 = Recon_3 + omega_0*((rc35)*(CF_33 - CS_33*max_lambda_1_33) - rc34*(CF_34 - CS_34*max_lambda_1_33) +
      (rc32)*(CF_35 - CS_35*max_lambda_1_33)) + omega_1*((rc32)*(CF_32 - CS_32*max_lambda_1_33) + (rc33)*(CF_33 -
      CS_33*max_lambda_1_33) - rc16*(CF_34 - CS_34*max_lambda_1_33)) + omega_2*(-rc16*(CF_31 - CS_31*max_lambda_1_33) +
      (rc33)*(CF_32 - CS_32*max_lambda_1_33) + (rc32)*(CF_33 - CS_33*max_lambda_1_33));

    beta_0 = (rc9)*(CF_42 + CS_42*max_lambda_1_44)*((rc20)*(CF_42 + CS_42*max_lambda_1_44) - rc21*(CF_43 +
      CS_43*max_lambda_1_44) + (rc22)*(CF_44 + CS_44*max_lambda_1_44)) + (rc9)*(CF_43 +
      CS_43*max_lambda_1_44)*((rc23)*(CF_43 + CS_43*max_lambda_1_44) - rc24*(CF_44 + CS_44*max_lambda_1_44)) +
      (rc25)*pow(CF_44 + CS_44*max_lambda_1_44, 2);

    beta_1 = (rc9)*(CF_41 + CS_41*max_lambda_1_44)*((rc26)*(CF_41 + CS_41*max_lambda_1_44) - rc27*(CF_42 +
      CS_42*max_lambda_1_44) + (rc28)*(CF_43 + CS_43*max_lambda_1_44)) + (rc9)*(CF_42 +
      CS_42*max_lambda_1_44)*((rc27)*(CF_42 + CS_42*max_lambda_1_44) - rc27*(CF_43 + CS_43*max_lambda_1_44)) +
      (rc25)*pow(CF_43 + CS_43*max_lambda_1_44, 2);

    beta_2 = (rc9)*(CF_40 + CS_40*max_lambda_1_44)*((rc26)*(CF_40 + CS_40*max_lambda_1_44) + (rc22)*(CF_42 +
      CS_42*max_lambda_1_44)) + (rc9)*(CF_41 + CS_41*max_lambda_1_44)*(-rc24*(CF_40 + CS_40*max_lambda_1_44) +
      (rc23)*(CF_41 + CS_41*max_lambda_1_44) - rc21*(CF_42 + CS_42*max_lambda_1_44)) + (rc28)*pow(CF_42 +
      CS_42*max_lambda_1_44, 2);

   alpha_0 = 0.3 + (rc29)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_0 + 1.0e-14, 2);

   alpha_1 = 0.6 + (rc30)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_1 + 1.0e-14, 2);

   alpha_2 = 0.1 + (rc31)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_2 + 1.0e-14, 2);

   inv_alpha_sum = 1.0/(alpha_0 + alpha_1 + alpha_2);

   omega_0 = alpha_0*inv_alpha_sum;

   omega_1 = alpha_1*inv_alpha_sum;

   omega_2 = alpha_2*inv_alpha_sum;

    Recon_4 = Recon_4 + omega_0*((rc32)*(CF_42 + CS_42*max_lambda_1_44) + (rc33)*(CF_43 + CS_43*max_lambda_1_44) -
      rc16*(CF_44 + CS_44*max_lambda_1_44)) + omega_1*(-rc16*(CF_41 + CS_41*max_lambda_1_44) + (rc33)*(CF_42 +
      CS_42*max_lambda_1_44) + (rc32)*(CF_43 + CS_43*max_lambda_1_44)) + omega_2*((rc32)*(CF_40 + CS_40*max_lambda_1_44)
      - rc34*(CF_41 + CS_41*max_lambda_1_44) + (rc35)*(CF_42 + CS_42*max_lambda_1_44));

    beta_0 = (rc9)*(CF_43 - CS_43*max_lambda_1_44)*((rc20)*(CF_43 - CS_43*max_lambda_1_44) - rc21*(CF_44 -
      CS_44*max_lambda_1_44) + (rc22)*(CF_45 - CS_45*max_lambda_1_44)) + (rc9)*(CF_44 -
      CS_44*max_lambda_1_44)*((rc23)*(CF_44 - CS_44*max_lambda_1_44) - rc24*(CF_45 - CS_45*max_lambda_1_44)) +
      (rc25)*pow(CF_45 - CS_45*max_lambda_1_44, 2);

    beta_1 = (rc9)*(CF_42 - CS_42*max_lambda_1_44)*((rc26)*(CF_42 - CS_42*max_lambda_1_44) - rc27*(CF_43 -
      CS_43*max_lambda_1_44) + (rc28)*(CF_44 - CS_44*max_lambda_1_44)) + (rc9)*(CF_43 -
      CS_43*max_lambda_1_44)*((rc27)*(CF_43 - CS_43*max_lambda_1_44) - rc27*(CF_44 - CS_44*max_lambda_1_44)) +
      (rc25)*pow(CF_44 - CS_44*max_lambda_1_44, 2);

    beta_2 = (rc9)*(CF_41 - CS_41*max_lambda_1_44)*((rc26)*(CF_41 - CS_41*max_lambda_1_44) - rc24*(CF_42 -
      CS_42*max_lambda_1_44) + (rc22)*(CF_43 - CS_43*max_lambda_1_44)) + (rc9)*(CF_42 -
      CS_42*max_lambda_1_44)*((rc23)*(CF_42 - CS_42*max_lambda_1_44) - rc21*(CF_43 - CS_43*max_lambda_1_44)) +
      (rc28)*pow(CF_43 - CS_43*max_lambda_1_44, 2);

   alpha_0 = 0.1 + (rc31)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_0 + 1.0e-14, 2);

   alpha_1 = 0.6 + (rc30)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_1 + 1.0e-14, 2);

   alpha_2 = 0.3 + (rc29)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_2 + 1.0e-14, 2);

   inv_alpha_sum = 1.0/(alpha_0 + alpha_1 + alpha_2);

   omega_0 = alpha_0*inv_alpha_sum;

   omega_1 = alpha_1*inv_alpha_sum;

   omega_2 = alpha_2*inv_alpha_sum;

    Recon_4 = Recon_4 + omega_0*((rc35)*(CF_43 - CS_43*max_lambda_1_44) - rc34*(CF_44 - CS_44*max_lambda_1_44) +
      (rc32)*(CF_45 - CS_45*max_lambda_1_44)) + omega_1*((rc32)*(CF_42 - CS_42*max_lambda_1_44) + (rc33)*(CF_43 -
      CS_43*max_lambda_1_44) - rc16*(CF_44 - CS_44*max_lambda_1_44)) + omega_2*(-rc16*(CF_41 - CS_41*max_lambda_1_44) +
      (rc33)*(CF_42 - CS_42*max_lambda_1_44) + (rc32)*(CF_43 - CS_43*max_lambda_1_44));

    wk5_B0(0,0,0) = AVG_1_D10*Recon_0*inv_AVG_met_fact + AVG_1_D11*Recon_1*inv_AVG_met_fact +
      0.707106781186547*AVG_1_rho*Recon_3*inv_AVG_a + 0.707106781186547*AVG_1_rho*Recon_4*inv_AVG_a;

    wk6_B0(0,0,0) = AVG_1_D10*AVG_1_u0*Recon_0*inv_AVG_met_fact +
      AVG_1_D11*AVG_1_rho*Recon_2*inv_AVG_met_fact + AVG_1_D11*AVG_1_u0*Recon_1*inv_AVG_met_fact +
      0.707106781186547*AVG_1_rho*Recon_3*inv_AVG_a*(AVG_1_D10*AVG_1_a*inv_AVG_met_fact + AVG_1_u0) +
      0.707106781186547*AVG_1_rho*Recon_4*inv_AVG_a*(-AVG_1_D10*AVG_1_a*inv_AVG_met_fact + AVG_1_u0);

    wk7_B0(0,0,0) = -AVG_1_D10*AVG_1_rho*Recon_2*inv_AVG_met_fact +
      AVG_1_D10*AVG_1_u1*Recon_0*inv_AVG_met_fact + AVG_1_D11*AVG_1_u1*Recon_1*inv_AVG_met_fact +
      0.707106781186547*AVG_1_rho*Recon_3*inv_AVG_a*(AVG_1_D11*AVG_1_a*inv_AVG_met_fact + AVG_1_u1) +
      0.707106781186547*AVG_1_rho*Recon_4*inv_AVG_a*(-AVG_1_D11*AVG_1_a*inv_AVG_met_fact + AVG_1_u1);

    wk8_B0(0,0,0) = 0.707106781186547*AVG_1_rho*AVG_1_u2*Recon_3*inv_AVG_a +
      0.707106781186547*AVG_1_rho*AVG_1_u2*Recon_4*inv_AVG_a + Recon_0*(AVG_1_D10*AVG_1_u2*inv_AVG_met_fact -
      AVG_1_D11*AVG_1_rho*inv_AVG_met_fact) + Recon_1*(AVG_1_D10*AVG_1_rho*inv_AVG_met_fact +
      AVG_1_D11*AVG_1_u2*inv_AVG_met_fact);

    wk9_B0(0,0,0) = AVG_1_rho*Recon_2*(-AVG_1_D10*AVG_1_u1*inv_AVG_met_fact +
      AVG_1_D11*AVG_1_u0*inv_AVG_met_fact) +
      0.707106781186547*AVG_1_rho*Recon_3*inv_AVG_a*(rcinv36*((rc9)*gamma_m1*(pow(AVG_1_u0, 2) + pow(AVG_1_u1, 2) +
      pow(AVG_1_u2, 2)) + pow(AVG_1_a, 2)) + AVG_1_a*(AVG_1_D10*AVG_1_u0*inv_AVG_met_fact +
      AVG_1_D11*AVG_1_u1*inv_AVG_met_fact)) +
      0.707106781186547*AVG_1_rho*Recon_4*inv_AVG_a*(rcinv36*((rc9)*gamma_m1*(pow(AVG_1_u0, 2) + pow(AVG_1_u1, 2) +
      pow(AVG_1_u2, 2)) + pow(AVG_1_a, 2)) - AVG_1_a*(AVG_1_D10*AVG_1_u0*inv_AVG_met_fact +
      AVG_1_D11*AVG_1_u1*inv_AVG_met_fact)) + Recon_0*((rc9)*AVG_1_D10*inv_AVG_met_fact*(pow(AVG_1_u0, 2) +
      pow(AVG_1_u1, 2) + pow(AVG_1_u2, 2)) - AVG_1_D11*AVG_1_rho*AVG_1_u2*inv_AVG_met_fact) +
      Recon_1*(AVG_1_D10*AVG_1_rho*AVG_1_u2*inv_AVG_met_fact + (rc9)*AVG_1_D11*inv_AVG_met_fact*(pow(AVG_1_u0, 2) +
      pow(AVG_1_u1, 2) + pow(AVG_1_u2, 2)));


      }
    }
  }
  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[22].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_host(args, 19);
  ops_set_halo_dirtybit3(&args[14],range);
  ops_set_halo_dirtybit3(&args[15],range);
  ops_set_halo_dirtybit3(&args[16],range);
  ops_set_halo_dirtybit3(&args[17],range);
  ops_set_halo_dirtybit3(&args[18],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[22].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg7);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg8);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg9);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg10);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg11);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg12);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg13);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg14);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg15);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg16);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg17);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg18);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel001(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11,
 ops_arg arg12, ops_arg arg13, ops_arg arg14, ops_arg arg15,
 ops_arg arg16, ops_arg arg17, ops_arg arg18) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)calloc(1,sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 0;
  desc->index = 22;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 22;
  for ( int i=0; i<6; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 19;
  desc->args = (ops_arg*)ops_malloc(19*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg2.dat->index;
  desc->args[3] = arg3;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg3.dat->index;
  desc->args[4] = arg4;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg4.dat->index;
  desc->args[5] = arg5;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg5.dat->index;
  desc->args[6] = arg6;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg6.dat->index;
  desc->args[7] = arg7;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg7.dat->index;
  desc->args[8] = arg8;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg8.dat->index;
  desc->args[9] = arg9;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg9.dat->index;
  desc->args[10] = arg10;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg10.dat->index;
  desc->args[11] = arg11;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg11.dat->index;
  desc->args[12] = arg12;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg12.dat->index;
  desc->args[13] = arg13;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg13.dat->index;
  desc->args[14] = arg14;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg14.dat->index;
  desc->args[15] = arg15;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg15.dat->index;
  desc->args[16] = arg16;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg16.dat->index;
  desc->args[17] = arg17;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg17.dat->index;
  desc->args[18] = arg18;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg18.dat->index;
  desc->function = ops_par_loop_opensbliblock00Kernel001_execute;
  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,22,"opensbliblock00Kernel001");
  }
  ops_enqueue_kernel(desc);
}
#endif
