//
// auto-generated by ops.py
//
__constant__ int dims_opensbliblock00Kernel092 [9][2];
static int dims_opensbliblock00Kernel092_h [9][2] = {{0}};

//user function
__device__

 void opensbliblock00Kernel092_gpu(ACC<double> &rhoE_B0,
  ACC<double> &rho_B0,
  ACC<double> &rhou0_B0,
  ACC<double> &rhou1_B0,
  ACC<double> &rhou2_B0,
  ACC<double> &x0_B0,
  ACC<double> &x2_B0,
  ACC<double> &x1_B0,
  const int *idx)
{
   double T = 0.0;
   double rho = 0.0;
   double rhou0 = 0.0;
   double rhou1 = 0.0;
   x0_B0(0,0,0) = Delta0block0*idx[0];

    x1_B0(0,0,0) = (-(1.0/20.0)*H*exp(-((-(1.0/2.0)*L + Delta0block0*idx[0])*(-(1.0/2.0)*L +
      Delta0block0*idx[0]))*inv2a)*exp(-((-(1.0/2.0)*W + Delta2block0*idx[2])*(-(1.0/2.0)*W +
      Delta2block0*idx[2]))*inv2a) + H)*sinh(b*invH*Delta1block0*idx[1])/sinh(b) + ((1.0/20.0))*H*exp(-((-(1.0/2.0)*L +
      Delta0block0*idx[0])*(-(1.0/2.0)*L + Delta0block0*idx[0]))*inv2a)*exp(-((-(1.0/2.0)*W +
      Delta2block0*idx[2])*(-(1.0/2.0)*W + Delta2block0*idx[2]))*inv2a);

   x2_B0(0,0,0) = Delta2block0*idx[2];

    rhou0 = ((x1_B0(0,0,0) < 3.47434743474347) ? (
   -9.41967207151553e-7 + 0.000613828400710496*pow(x1_B0(0,0,0), 16)
      + 3.37722054657068*pow(x1_B0(0,0,0), 9) + 8.56002881776995e-18*pow(x1_B0(0,0,0), 41) +
      3.23932608424406e-7*pow(x1_B0(0,0,0), 22) + 1.94024691559566e-8*pow(x1_B0(0,0,0), 24) +
      1.04940578786992e-12*pow(x1_B0(0,0,0), 32) + 4.91129010741448*pow(x1_B0(0,0,0), 7) +
      1.24982177727222*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) +
      5.56132977621397e-22*pow(x1_B0(0,0,0), 48) + 0.000176987525519087*pow(x1_B0(0,0,0), 17) +
      1.24222622336016e-7*pow(x1_B0(0,0,0), 23) + 0.137515271370201*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) +
      2.3555492777611e-22*pow(x1_B0(0,0,0), 50) + 0.0357543185172109*pow(x1_B0(0,0,0), 11) +
      5.37598576202624e-16*pow(x1_B0(0,0,0), 38) + 1.76772429782625e-11*pow(x1_B0(0,0,0), 30) +
      2.86638559964255e-16*pow(x1_B0(0,0,0), 39) + 1.89469495194353e-11*pow(x1_B0(0,0,0), 29) +
      1.76715088906924e-20*pow(x1_B0(0,0,0), 47) + 7.78516249047705e-17*pow(x1_B0(0,0,0), 40) +
      0.0952129739882658*pow(x1_B0(0,0,0), 12) + 4.27794832987129e-20*pow(x1_B0(0,0,0), 46) +
      5.89366906826062e-12*pow(x1_B0(0,0,0), 31) + 0.423487432074122*x1_B0(0,0,0) -
      9.50677069522702e-15*pow(x1_B0(0,0,0), 36) -
      3.05403724529565*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) -
      6.1354732571988e-6*pow(x1_B0(0,0,0), 18) - 1.62564132709003e-5*pow(x1_B0(0,0,0), 19) -
      0.000526665419777598*pow(x1_B0(0,0,0), 15) - 2.65168942457028e-9*pow(x1_B0(0,0,0), 26) -
      1.19128651698976e-10*pow(x1_B0(0,0,0), 28) - 0.00843666727267235*pow(x1_B0(0,0,0), 14) -
      2.00935744152354e-21*pow(x1_B0(0,0,0), 49) - 5.1654697631693*pow(x1_B0(0,0,0), 8) -
      5.69010318695979e-19*pow(x1_B0(0,0,0), 44) - 6.17393007973971e-16*pow(x1_B0(0,0,0), 37) -
      4.1822231440021e-14*pow(x1_B0(0,0,0), 35) - 0.00594411137351235*pow(x1_B0(0,0,0), 13) -
      8.29563232382128e-10*pow(x1_B0(0,0,0), 27) - 1.10429555878606e-7*pow(x1_B0(0,0,0), 21) -
      3.04089545826647e-20*pow(x1_B0(0,0,0), 45) - 1.15749221486844*pow(x1_B0(0,0,0), 10) -
      4.43734433122466e-6*pow(x1_B0(0,0,0), 20) - 2.10089699572831e-18*pow(x1_B0(0,0,0), 43) -
      3.79864274570734e-14*pow(x1_B0(0,0,0), 33) -
      0.340808475086283*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) - 2.75186414593423e-9*pow(x1_B0(0,0,0),
      25) - 1.03685516151979e-13*pow(x1_B0(0,0,0), 34) - 3.20005903751066e-18*pow(x1_B0(0,0,0), 42) -
      0.00379046822573778*(x1_B0(0,0,0)*x1_B0(0,0,0))
)
: (
   0.999999408078923
));

    rhou1 = ((x1_B0(0,0,0) < 3.47434743474347) ? (
   -3.82450180851277e-8 + 6.186794363468e-6*pow(x1_B0(0,0,0), 16) +
      1.25484845288117e-14*pow(x1_B0(0,0,0), 32) + 2.24954058629723e-6*pow(x1_B0(0,0,0), 17) +
      4.14968990285729e-6*x1_B0(0,0,0) + 0.00117421078362464*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) +
      0.00122012071977175*pow(x1_B0(0,0,0), 12) + 7.95670170515972e-14*pow(x1_B0(0,0,0), 29) +
      1.61679245607276e-13*pow(x1_B0(0,0,0), 30) + 3.31890292562878e-16*pow(x1_B0(0,0,0), 33) +
      0.024436212767697*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) +
      7.69181334189621e-24*pow(x1_B0(0,0,0), 48) + 2.1576554647756e-24*pow(x1_B0(0,0,0), 50) +
      0.0824513961294015*pow(x1_B0(0,0,0), 7) + 1.70508557930283e-22*pow(x1_B0(0,0,0), 47) +
      1.06166392982356e-19*pow(x1_B0(0,0,0), 41) + 6.20640928953035e-8*pow(x1_B0(0,0,0), 18) +
      6.10502841760137e-14*pow(x1_B0(0,0,0), 31) + 0.00108918117998653*(x1_B0(0,0,0)*x1_B0(0,0,0)) +
      2.61425094167977e-10*pow(x1_B0(0,0,0), 24) + 4.2441030519992e-18*pow(x1_B0(0,0,0), 38) +
      1.35337138459532e-9*pow(x1_B0(0,0,0), 23) + 0.0478146724255516*pow(x1_B0(0,0,0), 9) +
      2.89302203645917e-9*pow(x1_B0(0,0,0), 22) + 2.69802948259641e-18*pow(x1_B0(0,0,0), 39) +
      3.81787677195739e-22*pow(x1_B0(0,0,0), 46) + 7.95413538795197e-19*pow(x1_B0(0,0,0), 40) -
      8.90831291175122e-16*pow(x1_B0(0,0,0), 34) - 5.701951447644e-21*pow(x1_B0(0,0,0), 44) -
      8.98719899571629e-12*pow(x1_B0(0,0,0), 27) - 0.0798999852889223*pow(x1_B0(0,0,0), 8) -
      1.89236971654899e-23*pow(x1_B0(0,0,0), 49) - 1.95832488013046e-20*pow(x1_B0(0,0,0), 43) -
      1.02493206120451e-17*pow(x1_B0(0,0,0), 37) - 1.03415796927838e-11*pow(x1_B0(0,0,0), 25) -
      1.58893176488887e-12*pow(x1_B0(0,0,0), 28) -
      0.0554884389398171*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) -
      4.10569601727487e-16*pow(x1_B0(0,0,0), 35) - 0.0144728051769681*pow(x1_B0(0,0,0), 10) -
      4.2602950246167e-22*pow(x1_B0(0,0,0), 45) - 4.20732843390409e-9*pow(x1_B0(0,0,0), 21) -
      1.63186840482375e-7*pow(x1_B0(0,0,0), 19) - 0.000174695037124041*pow(x1_B0(0,0,0), 11) -
      1.13934957271094e-5*pow(x1_B0(0,0,0), 15) - 1.22892507043693e-5*pow(x1_B0(0,0,0), 13) -
      0.000100760511123402*pow(x1_B0(0,0,0), 14) -
      0.00654597240521947*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) - 2.49618557647004e-11*pow(x1_B0(0,0,0),
      26) - 5.39312821816524e-8*pow(x1_B0(0,0,0), 20) - 2.46383361869256e-20*pow(x1_B0(0,0,0), 42) -
      1.03115993611505e-16*pow(x1_B0(0,0,0), 36)
)
: (
   0.00564964364741575
));

    T = ((x1_B0(0,0,0) < 3.47434743474347) ? (
   1.67619323517671 + 0.000546556514231602*pow(x1_B0(0,0,0), 14) +
      2.84082766458035e-14*pow(x1_B0(0,0,0), 33) + 9.62144378408451e-10*pow(x1_B0(0,0,0), 25) +
      0.0513779963692559*pow(x1_B0(0,0,0), 10) + 0.00248793100317704*pow(x1_B0(0,0,0), 13) +
      7.52115337522613e-20*pow(x1_B0(0,0,0), 44) + 6.59237386827232e-19*pow(x1_B0(0,0,0), 42) +
      8.91073005719208e-11*pow(x1_B0(0,0,0), 27) +
      0.274555059341105*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) +
      1.01293721678769e-15*pow(x1_B0(0,0,0), 36) + 5.85606755194866e-15*pow(x1_B0(0,0,0), 35) +
      2.00313598822224e-22*pow(x1_B0(0,0,0), 45) + 0.486109994170276*pow(x1_B0(0,0,0), 7) +
      0.016295290641699*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) + 2.68015550395405e-7*pow(x1_B0(0,0,0), 20) +
      2.20028500618131e-6*pow(x1_B0(0,0,0), 19) + 7.47704449521701e-5*x1_B0(0,0,0) +
      0.0387069194356651*pow(x1_B0(0,0,0), 9) + 1.86796743416999e-14*pow(x1_B0(0,0,0), 34) +
      5.26405704077908e-6*pow(x1_B0(0,0,0), 18) + 3.02359004140933e-22*pow(x1_B0(0,0,0), 49) +
      3.24393929242347e-19*pow(x1_B0(0,0,0), 43) + 2.76991168496541e-12*pow(x1_B0(0,0,0), 28) +
      4.12951994238752e-10*pow(x1_B0(0,0,0), 26) - 2.53606686749876e-21*pow(x1_B0(0,0,0), 47) -
      4.86363354044092e-19*pow(x1_B0(0,0,0), 41) - 0.284700199848964*pow(x1_B0(0,0,0), 8) -
      2.8876553711809e-12*pow(x1_B0(0,0,0), 30) - 4.86888191265591e-17*pow(x1_B0(0,0,0), 37) -
      7.11708893366916e-21*pow(x1_B0(0,0,0), 46) - 8.18097963380289e-5*pow(x1_B0(0,0,0), 16) -
      4.36436982884742e-17*pow(x1_B0(0,0,0), 39) - 9.40870600134967e-8*pow(x1_B0(0,0,0), 21) -
      1.30815868835258e-8*pow(x1_B0(0,0,0), 23) - 6.87033316645359e-6*pow(x1_B0(0,0,0), 17) -
      5.63174875122123e-8*pow(x1_B0(0,0,0), 22) - 1.08161915263698e-16*pow(x1_B0(0,0,0), 38) -
      7.07249669257882e-24*pow(x1_B0(0,0,0), 48) - 0.291761620917306*(x1_B0(0,0,0)*x1_B0(0,0,0)) -
      0.000150182995287043*pow(x1_B0(0,0,0), 15) - 7.36876583429846e-14*pow(x1_B0(0,0,0), 32) -
      3.19671297599922e-10*pow(x1_B0(0,0,0), 24) - 3.73061876952194e-23*pow(x1_B0(0,0,0), 50) -
      9.84138178764639e-18*pow(x1_B0(0,0,0), 40) - 0.0233427405115097*pow(x1_B0(0,0,0), 11) -
      7.2458403897293e-13*pow(x1_B0(0,0,0), 31) - 0.00313487325891606*pow(x1_B0(0,0,0), 12) -
      0.10530401015664*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) - 6.23242767688354e-12*pow(x1_B0(0,0,0),
      29) - 0.4425160760866*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0))
)
: (

      1.00000058834432
));

   rho = 1.0/T;

   rho_B0(0,0,0) = rho;

   rhou0_B0(0,0,0) = rhou0;

   rhou1_B0(0,0,0) = rhou1;

   rhoE_B0(0,0,0) = (0.5*(rhou0*rhou0) + 0.5*(rhou1*rhou1))/rho + invgama*inv2Minf*inv_gamma_m1*T*rho;

   rhou2_B0(0,0,0) = 0.0;

}



__global__ void ops_opensbliblock00Kernel092(
double* __restrict arg0,
double* __restrict arg1,
double* __restrict arg2,
double* __restrict arg3,
double* __restrict arg4,
double* __restrict arg5,
double* __restrict arg6,
double* __restrict arg7,
int arg_idx0, int arg_idx1, int arg_idx2,
int size0,
int size1,
int size2 ){


  int idx_z = blockDim.z * blockIdx.z + threadIdx.z;
  int idx_y = blockDim.y * blockIdx.y + threadIdx.y;
  int idx_x = blockDim.x * blockIdx.x + threadIdx.x;

  int arg_idx[3];
  arg_idx[0] = arg_idx0+idx_x;
  arg_idx[1] = arg_idx1+idx_y;
  arg_idx[2] = arg_idx2+idx_z;
  arg0 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel092[0][0] + idx_z * 1*1 * dims_opensbliblock00Kernel092[0][0] * dims_opensbliblock00Kernel092[0][1];
  arg1 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel092[1][0] + idx_z * 1*1 * dims_opensbliblock00Kernel092[1][0] * dims_opensbliblock00Kernel092[1][1];
  arg2 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel092[2][0] + idx_z * 1*1 * dims_opensbliblock00Kernel092[2][0] * dims_opensbliblock00Kernel092[2][1];
  arg3 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel092[3][0] + idx_z * 1*1 * dims_opensbliblock00Kernel092[3][0] * dims_opensbliblock00Kernel092[3][1];
  arg4 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel092[4][0] + idx_z * 1*1 * dims_opensbliblock00Kernel092[4][0] * dims_opensbliblock00Kernel092[4][1];
  arg5 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel092[5][0] + idx_z * 1*1 * dims_opensbliblock00Kernel092[5][0] * dims_opensbliblock00Kernel092[5][1];
  arg6 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel092[6][0] + idx_z * 1*1 * dims_opensbliblock00Kernel092[6][0] * dims_opensbliblock00Kernel092[6][1];
  arg7 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel092[7][0] + idx_z * 1*1 * dims_opensbliblock00Kernel092[7][0] * dims_opensbliblock00Kernel092[7][1];

  if (idx_x < size0 && idx_y < size1 && idx_z < size2) {
    ACC<double> argp0(dims_opensbliblock00Kernel092[0][0], dims_opensbliblock00Kernel092[0][1], arg0);
    ACC<double> argp1(dims_opensbliblock00Kernel092[1][0], dims_opensbliblock00Kernel092[1][1], arg1);
    ACC<double> argp2(dims_opensbliblock00Kernel092[2][0], dims_opensbliblock00Kernel092[2][1], arg2);
    ACC<double> argp3(dims_opensbliblock00Kernel092[3][0], dims_opensbliblock00Kernel092[3][1], arg3);
    ACC<double> argp4(dims_opensbliblock00Kernel092[4][0], dims_opensbliblock00Kernel092[4][1], arg4);
    ACC<double> argp5(dims_opensbliblock00Kernel092[5][0], dims_opensbliblock00Kernel092[5][1], arg5);
    ACC<double> argp6(dims_opensbliblock00Kernel092[6][0], dims_opensbliblock00Kernel092[6][1], arg6);
    ACC<double> argp7(dims_opensbliblock00Kernel092[7][0], dims_opensbliblock00Kernel092[7][1], arg7);
    opensbliblock00Kernel092_gpu(
     argp0, argp1, argp2, argp3, argp4,
     argp5, argp6, argp7, arg_idx);
  }

}

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel092(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8) {
#else
void ops_par_loop_opensbliblock00Kernel092_execute(ops_kernel_descriptor *desc) {
  int dim = desc->dim;
  #if OPS_MPI
  ops_block block = desc->block;
  #endif
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  #endif

  //Timing
  double t1,t2,c1,c2;

  ops_arg args[9] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8};


  #if CHECKPOINTING && !OPS_LAZY
  if (!ops_checkpointing_before(args,9,range,0)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,0,"opensbliblock00Kernel092");
    block->instance->OPS_kernels[0].count++;
    ops_timers_core(&c1,&t1);
  }

  //compute locally allocated range for the sub-block
  int start[3];
  int end[3];

  int arg_idx[3];
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<3; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 9,block, range, start, end, arg_idx) < 0) return;
  #endif

  #if defined(OPS_MPI)
  #if defined(OPS_LAZY)
  sub_block_list sb = OPS_sub_block_list[block->index];
  arg_idx[0] = sb->decomp_disp[0]+start[0];
  arg_idx[1] = sb->decomp_disp[1]+start[1];
  arg_idx[2] = sb->decomp_disp[2]+start[2];
  #endif
  #else //OPS_MPI
  arg_idx[0] = start[0];
  arg_idx[1] = start[1];
  arg_idx[2] = start[2];
  #endif //OPS_MPI
  int xdim0 = args[0].dat->size[0];
  int ydim0 = args[0].dat->size[1];
  int xdim1 = args[1].dat->size[0];
  int ydim1 = args[1].dat->size[1];
  int xdim2 = args[2].dat->size[0];
  int ydim2 = args[2].dat->size[1];
  int xdim3 = args[3].dat->size[0];
  int ydim3 = args[3].dat->size[1];
  int xdim4 = args[4].dat->size[0];
  int ydim4 = args[4].dat->size[1];
  int xdim5 = args[5].dat->size[0];
  int ydim5 = args[5].dat->size[1];
  int xdim6 = args[6].dat->size[0];
  int ydim6 = args[6].dat->size[1];
  int xdim7 = args[7].dat->size[0];
  int ydim7 = args[7].dat->size[1];

  if (xdim0 != dims_opensbliblock00Kernel092_h[0][0] || ydim0 != dims_opensbliblock00Kernel092_h[0][1] || xdim1 != dims_opensbliblock00Kernel092_h[1][0] || ydim1 != dims_opensbliblock00Kernel092_h[1][1] || xdim2 != dims_opensbliblock00Kernel092_h[2][0] || ydim2 != dims_opensbliblock00Kernel092_h[2][1] || xdim3 != dims_opensbliblock00Kernel092_h[3][0] || ydim3 != dims_opensbliblock00Kernel092_h[3][1] || xdim4 != dims_opensbliblock00Kernel092_h[4][0] || ydim4 != dims_opensbliblock00Kernel092_h[4][1] || xdim5 != dims_opensbliblock00Kernel092_h[5][0] || ydim5 != dims_opensbliblock00Kernel092_h[5][1] || xdim6 != dims_opensbliblock00Kernel092_h[6][0] || ydim6 != dims_opensbliblock00Kernel092_h[6][1] || xdim7 != dims_opensbliblock00Kernel092_h[7][0] || ydim7 != dims_opensbliblock00Kernel092_h[7][1]) {
    dims_opensbliblock00Kernel092_h[0][0] = xdim0;
    dims_opensbliblock00Kernel092_h[0][1] = ydim0;
    dims_opensbliblock00Kernel092_h[1][0] = xdim1;
    dims_opensbliblock00Kernel092_h[1][1] = ydim1;
    dims_opensbliblock00Kernel092_h[2][0] = xdim2;
    dims_opensbliblock00Kernel092_h[2][1] = ydim2;
    dims_opensbliblock00Kernel092_h[3][0] = xdim3;
    dims_opensbliblock00Kernel092_h[3][1] = ydim3;
    dims_opensbliblock00Kernel092_h[4][0] = xdim4;
    dims_opensbliblock00Kernel092_h[4][1] = ydim4;
    dims_opensbliblock00Kernel092_h[5][0] = xdim5;
    dims_opensbliblock00Kernel092_h[5][1] = ydim5;
    dims_opensbliblock00Kernel092_h[6][0] = xdim6;
    dims_opensbliblock00Kernel092_h[6][1] = ydim6;
    dims_opensbliblock00Kernel092_h[7][0] = xdim7;
    dims_opensbliblock00Kernel092_h[7][1] = ydim7;
    cutilSafeCall(block->instance->ostream(), cudaMemcpyToSymbol( dims_opensbliblock00Kernel092, dims_opensbliblock00Kernel092_h, sizeof(dims_opensbliblock00Kernel092)));
  }



  int x_size = MAX(0,end[0]-start[0]);
  int y_size = MAX(0,end[1]-start[1]);
  int z_size = MAX(0,end[2]-start[2]);

  dim3 grid( (x_size-1)/block->instance->OPS_block_size_x+ 1, (y_size-1)/block->instance->OPS_block_size_y + 1, (z_size-1)/block->instance->OPS_block_size_z +1);
  dim3 tblock(block->instance->OPS_block_size_x,block->instance->OPS_block_size_y,block->instance->OPS_block_size_z);



  long long int dat0 = (block->instance->OPS_soa ? args[0].dat->type_size : args[0].dat->elem_size);
  long long int dat1 = (block->instance->OPS_soa ? args[1].dat->type_size : args[1].dat->elem_size);
  long long int dat2 = (block->instance->OPS_soa ? args[2].dat->type_size : args[2].dat->elem_size);
  long long int dat3 = (block->instance->OPS_soa ? args[3].dat->type_size : args[3].dat->elem_size);
  long long int dat4 = (block->instance->OPS_soa ? args[4].dat->type_size : args[4].dat->elem_size);
  long long int dat5 = (block->instance->OPS_soa ? args[5].dat->type_size : args[5].dat->elem_size);
  long long int dat6 = (block->instance->OPS_soa ? args[6].dat->type_size : args[6].dat->elem_size);
  long long int dat7 = (block->instance->OPS_soa ? args[7].dat->type_size : args[7].dat->elem_size);

  char *p_a[9];

  //set up initial pointers
  long long int base0 = args[0].dat->base_offset + 
           dat0 * 1 * (start[0] * args[0].stencil->stride[0]);
  base0 = base0+ dat0 *
    args[0].dat->size[0] *
    (start[1] * args[0].stencil->stride[1]);
  base0 = base0+ dat0 *
    args[0].dat->size[0] *
    args[0].dat->size[1] *
    (start[2] * args[0].stencil->stride[2]);
  p_a[0] = (char *)args[0].data_d + base0;

  long long int base1 = args[1].dat->base_offset + 
           dat1 * 1 * (start[0] * args[1].stencil->stride[0]);
  base1 = base1+ dat1 *
    args[1].dat->size[0] *
    (start[1] * args[1].stencil->stride[1]);
  base1 = base1+ dat1 *
    args[1].dat->size[0] *
    args[1].dat->size[1] *
    (start[2] * args[1].stencil->stride[2]);
  p_a[1] = (char *)args[1].data_d + base1;

  long long int base2 = args[2].dat->base_offset + 
           dat2 * 1 * (start[0] * args[2].stencil->stride[0]);
  base2 = base2+ dat2 *
    args[2].dat->size[0] *
    (start[1] * args[2].stencil->stride[1]);
  base2 = base2+ dat2 *
    args[2].dat->size[0] *
    args[2].dat->size[1] *
    (start[2] * args[2].stencil->stride[2]);
  p_a[2] = (char *)args[2].data_d + base2;

  long long int base3 = args[3].dat->base_offset + 
           dat3 * 1 * (start[0] * args[3].stencil->stride[0]);
  base3 = base3+ dat3 *
    args[3].dat->size[0] *
    (start[1] * args[3].stencil->stride[1]);
  base3 = base3+ dat3 *
    args[3].dat->size[0] *
    args[3].dat->size[1] *
    (start[2] * args[3].stencil->stride[2]);
  p_a[3] = (char *)args[3].data_d + base3;

  long long int base4 = args[4].dat->base_offset + 
           dat4 * 1 * (start[0] * args[4].stencil->stride[0]);
  base4 = base4+ dat4 *
    args[4].dat->size[0] *
    (start[1] * args[4].stencil->stride[1]);
  base4 = base4+ dat4 *
    args[4].dat->size[0] *
    args[4].dat->size[1] *
    (start[2] * args[4].stencil->stride[2]);
  p_a[4] = (char *)args[4].data_d + base4;

  long long int base5 = args[5].dat->base_offset + 
           dat5 * 1 * (start[0] * args[5].stencil->stride[0]);
  base5 = base5+ dat5 *
    args[5].dat->size[0] *
    (start[1] * args[5].stencil->stride[1]);
  base5 = base5+ dat5 *
    args[5].dat->size[0] *
    args[5].dat->size[1] *
    (start[2] * args[5].stencil->stride[2]);
  p_a[5] = (char *)args[5].data_d + base5;

  long long int base6 = args[6].dat->base_offset + 
           dat6 * 1 * (start[0] * args[6].stencil->stride[0]);
  base6 = base6+ dat6 *
    args[6].dat->size[0] *
    (start[1] * args[6].stencil->stride[1]);
  base6 = base6+ dat6 *
    args[6].dat->size[0] *
    args[6].dat->size[1] *
    (start[2] * args[6].stencil->stride[2]);
  p_a[6] = (char *)args[6].data_d + base6;

  long long int base7 = args[7].dat->base_offset + 
           dat7 * 1 * (start[0] * args[7].stencil->stride[0]);
  base7 = base7+ dat7 *
    args[7].dat->size[0] *
    (start[1] * args[7].stencil->stride[1]);
  base7 = base7+ dat7 *
    args[7].dat->size[0] *
    args[7].dat->size[1] *
    (start[2] * args[7].stencil->stride[2]);
  p_a[7] = (char *)args[7].data_d + base7;


  #ifndef OPS_LAZY
  ops_H_D_exchanges_device(args, 9);
  ops_halo_exchanges(args,9,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[0].mpi_time += t2-t1;
  }


  //call kernel wrapper function, passing in pointers to data
  if (x_size > 0 && y_size > 0 && z_size > 0)
    ops_opensbliblock00Kernel092<<<grid, tblock >>> ( 
     (double *)p_a[0], (double *)p_a[1],
     (double *)p_a[2], (double *)p_a[3],
     (double *)p_a[4], (double *)p_a[5],
     (double *)p_a[6], (double *)p_a[7],
     arg_idx[0], arg_idx[1], arg_idx[2],
    x_size, y_size, z_size);

  cutilSafeCall(block->instance->ostream(), cudaGetLastError());

  if (block->instance->OPS_diags>1) {
    cutilSafeCall(block->instance->ostream(), cudaDeviceSynchronize());
    ops_timers_core(&c1,&t1);
    block->instance->OPS_kernels[0].time += t1-t2;
  }

  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 9);
  ops_set_halo_dirtybit3(&args[0],range);
  ops_set_halo_dirtybit3(&args[1],range);
  ops_set_halo_dirtybit3(&args[2],range);
  ops_set_halo_dirtybit3(&args[3],range);
  ops_set_halo_dirtybit3(&args[4],range);
  ops_set_halo_dirtybit3(&args[5],range);
  ops_set_halo_dirtybit3(&args[6],range);
  ops_set_halo_dirtybit3(&args[7],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[0].mpi_time += t2-t1;
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg7);
  }
}

#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel092(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8) {
  ops_arg args[9] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8 };

  //create kernel descriptor and pass it to ops_enqueue_kernel
  create_kerneldesc_and_enque(name, args, 9, 0, dim, 1, range, block, ops_par_loop_opensbliblock00Kernel092_execute);
}
#endif
