//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel081(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11,
 ops_arg arg12, ops_arg arg13, ops_arg arg14, ops_arg arg15,
 ops_arg arg16, ops_arg arg17, ops_arg arg18, ops_arg arg19,
 ops_arg arg20, ops_arg arg21, ops_arg arg22, ops_arg arg23,
 ops_arg arg24, ops_arg arg25, ops_arg arg26, ops_arg arg27,
 ops_arg arg28, ops_arg arg29, ops_arg arg30, ops_arg arg31,
 ops_arg arg32, ops_arg arg33, ops_arg arg34, ops_arg arg35,
 ops_arg arg36, ops_arg arg37, ops_arg arg38, ops_arg arg39,
 ops_arg arg40, ops_arg arg41, ops_arg arg42, ops_arg arg43,
 ops_arg arg44, ops_arg arg45, ops_arg arg46, ops_arg arg47,
 ops_arg arg48, ops_arg arg49, ops_arg arg50, ops_arg arg51,
 ops_arg arg52, ops_arg arg53, ops_arg arg54, ops_arg arg55,
 ops_arg arg56, ops_arg arg57) {
#else
void ops_par_loop_opensbliblock00Kernel081_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  ops_arg arg9 = desc->args[9];
  ops_arg arg10 = desc->args[10];
  ops_arg arg11 = desc->args[11];
  ops_arg arg12 = desc->args[12];
  ops_arg arg13 = desc->args[13];
  ops_arg arg14 = desc->args[14];
  ops_arg arg15 = desc->args[15];
  ops_arg arg16 = desc->args[16];
  ops_arg arg17 = desc->args[17];
  ops_arg arg18 = desc->args[18];
  ops_arg arg19 = desc->args[19];
  ops_arg arg20 = desc->args[20];
  ops_arg arg21 = desc->args[21];
  ops_arg arg22 = desc->args[22];
  ops_arg arg23 = desc->args[23];
  ops_arg arg24 = desc->args[24];
  ops_arg arg25 = desc->args[25];
  ops_arg arg26 = desc->args[26];
  ops_arg arg27 = desc->args[27];
  ops_arg arg28 = desc->args[28];
  ops_arg arg29 = desc->args[29];
  ops_arg arg30 = desc->args[30];
  ops_arg arg31 = desc->args[31];
  ops_arg arg32 = desc->args[32];
  ops_arg arg33 = desc->args[33];
  ops_arg arg34 = desc->args[34];
  ops_arg arg35 = desc->args[35];
  ops_arg arg36 = desc->args[36];
  ops_arg arg37 = desc->args[37];
  ops_arg arg38 = desc->args[38];
  ops_arg arg39 = desc->args[39];
  ops_arg arg40 = desc->args[40];
  ops_arg arg41 = desc->args[41];
  ops_arg arg42 = desc->args[42];
  ops_arg arg43 = desc->args[43];
  ops_arg arg44 = desc->args[44];
  ops_arg arg45 = desc->args[45];
  ops_arg arg46 = desc->args[46];
  ops_arg arg47 = desc->args[47];
  ops_arg arg48 = desc->args[48];
  ops_arg arg49 = desc->args[49];
  ops_arg arg50 = desc->args[50];
  ops_arg arg51 = desc->args[51];
  ops_arg arg52 = desc->args[52];
  ops_arg arg53 = desc->args[53];
  ops_arg arg54 = desc->args[54];
  ops_arg arg55 = desc->args[55];
  ops_arg arg56 = desc->args[56];
  ops_arg arg57 = desc->args[57];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[58] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,58,range,37)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,37,"opensbliblock00Kernel081");
    block->instance->OPS_kernels[37].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "opensbliblock00Kernel081");
  #endif


  //compute locally allocated range for the sub-block
  int start[3];
  int end[3];
  int arg_idx[3];
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<3; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 58,block, range, start, end, arg_idx) < 0) return;
  #endif

  int start0 = start[0];
  int end0 = end[0];
  int start1 = start[1];
  int end1 = end[1];
  int start2 = start[2];
  int end2 = end[2];

  #if defined(OPS_MPI)
  #if defined(OPS_LAZY)
  sub_block_list sb = OPS_sub_block_list[block->index];
  arg_idx[0] = sb->decomp_disp[0];
  arg_idx[1] = sb->decomp_disp[1];
  arg_idx[2] = sb->decomp_disp[2];
  #else
  arg_idx[0] -= start[0];
  arg_idx[1] -= start[1];
  arg_idx[2] -= start[2];
  #endif
  #else //OPS_MPI
  arg_idx[0] = 0;
  arg_idx[1] = 0;
  arg_idx[2] = 0;
  #endif //OPS_MPI

  //initialize global variable with the dimension of dats
  int xdim0_opensbliblock00Kernel081 = args[0].dat->size[0];
  int ydim0_opensbliblock00Kernel081 = args[0].dat->size[1];
  int xdim1_opensbliblock00Kernel081 = args[1].dat->size[0];
  int ydim1_opensbliblock00Kernel081 = args[1].dat->size[1];
  int xdim2_opensbliblock00Kernel081 = args[2].dat->size[0];
  int ydim2_opensbliblock00Kernel081 = args[2].dat->size[1];
  int xdim3_opensbliblock00Kernel081 = args[3].dat->size[0];
  int ydim3_opensbliblock00Kernel081 = args[3].dat->size[1];
  int xdim4_opensbliblock00Kernel081 = args[4].dat->size[0];
  int ydim4_opensbliblock00Kernel081 = args[4].dat->size[1];
  int xdim5_opensbliblock00Kernel081 = args[5].dat->size[0];
  int ydim5_opensbliblock00Kernel081 = args[5].dat->size[1];
  int xdim6_opensbliblock00Kernel081 = args[6].dat->size[0];
  int ydim6_opensbliblock00Kernel081 = args[6].dat->size[1];
  int xdim7_opensbliblock00Kernel081 = args[7].dat->size[0];
  int ydim7_opensbliblock00Kernel081 = args[7].dat->size[1];
  int xdim8_opensbliblock00Kernel081 = args[8].dat->size[0];
  int ydim8_opensbliblock00Kernel081 = args[8].dat->size[1];
  int xdim9_opensbliblock00Kernel081 = args[9].dat->size[0];
  int ydim9_opensbliblock00Kernel081 = args[9].dat->size[1];
  int xdim10_opensbliblock00Kernel081 = args[10].dat->size[0];
  int ydim10_opensbliblock00Kernel081 = args[10].dat->size[1];
  int xdim11_opensbliblock00Kernel081 = args[11].dat->size[0];
  int ydim11_opensbliblock00Kernel081 = args[11].dat->size[1];
  int xdim12_opensbliblock00Kernel081 = args[12].dat->size[0];
  int ydim12_opensbliblock00Kernel081 = args[12].dat->size[1];
  int xdim13_opensbliblock00Kernel081 = args[13].dat->size[0];
  int ydim13_opensbliblock00Kernel081 = args[13].dat->size[1];
  int xdim14_opensbliblock00Kernel081 = args[14].dat->size[0];
  int ydim14_opensbliblock00Kernel081 = args[14].dat->size[1];
  int xdim15_opensbliblock00Kernel081 = args[15].dat->size[0];
  int ydim15_opensbliblock00Kernel081 = args[15].dat->size[1];
  int xdim16_opensbliblock00Kernel081 = args[16].dat->size[0];
  int ydim16_opensbliblock00Kernel081 = args[16].dat->size[1];
  int xdim17_opensbliblock00Kernel081 = args[17].dat->size[0];
  int ydim17_opensbliblock00Kernel081 = args[17].dat->size[1];
  int xdim18_opensbliblock00Kernel081 = args[18].dat->size[0];
  int ydim18_opensbliblock00Kernel081 = args[18].dat->size[1];
  int xdim19_opensbliblock00Kernel081 = args[19].dat->size[0];
  int ydim19_opensbliblock00Kernel081 = args[19].dat->size[1];
  int xdim20_opensbliblock00Kernel081 = args[20].dat->size[0];
  int ydim20_opensbliblock00Kernel081 = args[20].dat->size[1];
  int xdim21_opensbliblock00Kernel081 = args[21].dat->size[0];
  int ydim21_opensbliblock00Kernel081 = args[21].dat->size[1];
  int xdim22_opensbliblock00Kernel081 = args[22].dat->size[0];
  int ydim22_opensbliblock00Kernel081 = args[22].dat->size[1];
  int xdim23_opensbliblock00Kernel081 = args[23].dat->size[0];
  int ydim23_opensbliblock00Kernel081 = args[23].dat->size[1];
  int xdim24_opensbliblock00Kernel081 = args[24].dat->size[0];
  int ydim24_opensbliblock00Kernel081 = args[24].dat->size[1];
  int xdim25_opensbliblock00Kernel081 = args[25].dat->size[0];
  int ydim25_opensbliblock00Kernel081 = args[25].dat->size[1];
  int xdim26_opensbliblock00Kernel081 = args[26].dat->size[0];
  int ydim26_opensbliblock00Kernel081 = args[26].dat->size[1];
  int xdim27_opensbliblock00Kernel081 = args[27].dat->size[0];
  int ydim27_opensbliblock00Kernel081 = args[27].dat->size[1];
  int xdim28_opensbliblock00Kernel081 = args[28].dat->size[0];
  int ydim28_opensbliblock00Kernel081 = args[28].dat->size[1];
  int xdim29_opensbliblock00Kernel081 = args[29].dat->size[0];
  int ydim29_opensbliblock00Kernel081 = args[29].dat->size[1];
  int xdim30_opensbliblock00Kernel081 = args[30].dat->size[0];
  int ydim30_opensbliblock00Kernel081 = args[30].dat->size[1];
  int xdim31_opensbliblock00Kernel081 = args[31].dat->size[0];
  int ydim31_opensbliblock00Kernel081 = args[31].dat->size[1];
  int xdim32_opensbliblock00Kernel081 = args[32].dat->size[0];
  int ydim32_opensbliblock00Kernel081 = args[32].dat->size[1];
  int xdim33_opensbliblock00Kernel081 = args[33].dat->size[0];
  int ydim33_opensbliblock00Kernel081 = args[33].dat->size[1];
  int xdim34_opensbliblock00Kernel081 = args[34].dat->size[0];
  int ydim34_opensbliblock00Kernel081 = args[34].dat->size[1];
  int xdim35_opensbliblock00Kernel081 = args[35].dat->size[0];
  int ydim35_opensbliblock00Kernel081 = args[35].dat->size[1];
  int xdim36_opensbliblock00Kernel081 = args[36].dat->size[0];
  int ydim36_opensbliblock00Kernel081 = args[36].dat->size[1];
  int xdim37_opensbliblock00Kernel081 = args[37].dat->size[0];
  int ydim37_opensbliblock00Kernel081 = args[37].dat->size[1];
  int xdim38_opensbliblock00Kernel081 = args[38].dat->size[0];
  int ydim38_opensbliblock00Kernel081 = args[38].dat->size[1];
  int xdim39_opensbliblock00Kernel081 = args[39].dat->size[0];
  int ydim39_opensbliblock00Kernel081 = args[39].dat->size[1];
  int xdim40_opensbliblock00Kernel081 = args[40].dat->size[0];
  int ydim40_opensbliblock00Kernel081 = args[40].dat->size[1];
  int xdim41_opensbliblock00Kernel081 = args[41].dat->size[0];
  int ydim41_opensbliblock00Kernel081 = args[41].dat->size[1];
  int xdim42_opensbliblock00Kernel081 = args[42].dat->size[0];
  int ydim42_opensbliblock00Kernel081 = args[42].dat->size[1];
  int xdim43_opensbliblock00Kernel081 = args[43].dat->size[0];
  int ydim43_opensbliblock00Kernel081 = args[43].dat->size[1];
  int xdim44_opensbliblock00Kernel081 = args[44].dat->size[0];
  int ydim44_opensbliblock00Kernel081 = args[44].dat->size[1];
  int xdim45_opensbliblock00Kernel081 = args[45].dat->size[0];
  int ydim45_opensbliblock00Kernel081 = args[45].dat->size[1];
  int xdim46_opensbliblock00Kernel081 = args[46].dat->size[0];
  int ydim46_opensbliblock00Kernel081 = args[46].dat->size[1];
  int xdim47_opensbliblock00Kernel081 = args[47].dat->size[0];
  int ydim47_opensbliblock00Kernel081 = args[47].dat->size[1];
  int xdim48_opensbliblock00Kernel081 = args[48].dat->size[0];
  int ydim48_opensbliblock00Kernel081 = args[48].dat->size[1];
  int xdim49_opensbliblock00Kernel081 = args[49].dat->size[0];
  int ydim49_opensbliblock00Kernel081 = args[49].dat->size[1];
  int xdim50_opensbliblock00Kernel081 = args[50].dat->size[0];
  int ydim50_opensbliblock00Kernel081 = args[50].dat->size[1];
  int xdim51_opensbliblock00Kernel081 = args[51].dat->size[0];
  int ydim51_opensbliblock00Kernel081 = args[51].dat->size[1];
  int xdim52_opensbliblock00Kernel081 = args[52].dat->size[0];
  int ydim52_opensbliblock00Kernel081 = args[52].dat->size[1];
  int xdim53_opensbliblock00Kernel081 = args[53].dat->size[0];
  int ydim53_opensbliblock00Kernel081 = args[53].dat->size[1];
  int xdim54_opensbliblock00Kernel081 = args[54].dat->size[0];
  int ydim54_opensbliblock00Kernel081 = args[54].dat->size[1];
  int xdim55_opensbliblock00Kernel081 = args[55].dat->size[0];
  int ydim55_opensbliblock00Kernel081 = args[55].dat->size[1];
  int xdim56_opensbliblock00Kernel081 = args[56].dat->size[0];
  int ydim56_opensbliblock00Kernel081 = args[56].dat->size[1];

  //set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset;
  double * __restrict__ D00_B0_p = (double *)(args[0].data_d + base0);

  int base1 = args[1].dat->base_offset;
  double * __restrict__ D01_B0_p = (double *)(args[1].data_d + base1);

  int base2 = args[2].dat->base_offset;
  double * __restrict__ D02_B0_p = (double *)(args[2].data_d + base2);

  int base3 = args[3].dat->base_offset;
  double * __restrict__ D10_B0_p = (double *)(args[3].data_d + base3);

  int base4 = args[4].dat->base_offset;
  double * __restrict__ D11_B0_p = (double *)(args[4].data_d + base4);

  int base5 = args[5].dat->base_offset;
  double * __restrict__ D12_B0_p = (double *)(args[5].data_d + base5);

  int base6 = args[6].dat->base_offset;
  double * __restrict__ D20_B0_p = (double *)(args[6].data_d + base6);

  int base7 = args[7].dat->base_offset;
  double * __restrict__ D21_B0_p = (double *)(args[7].data_d + base7);

  int base8 = args[8].dat->base_offset;
  double * __restrict__ D22_B0_p = (double *)(args[8].data_d + base8);

  int base9 = args[9].dat->base_offset;
  double * __restrict__ SD000_B0_p = (double *)(args[9].data_d + base9);

  int base10 = args[10].dat->base_offset;
  double * __restrict__ SD001_B0_p = (double *)(args[10].data_d + base10);

  int base11 = args[11].dat->base_offset;
  double * __restrict__ SD002_B0_p = (double *)(args[11].data_d + base11);

  int base12 = args[12].dat->base_offset;
  double * __restrict__ SD010_B0_p = (double *)(args[12].data_d + base12);

  int base13 = args[13].dat->base_offset;
  double * __restrict__ SD011_B0_p = (double *)(args[13].data_d + base13);

  int base14 = args[14].dat->base_offset;
  double * __restrict__ SD012_B0_p = (double *)(args[14].data_d + base14);

  int base15 = args[15].dat->base_offset;
  double * __restrict__ SD020_B0_p = (double *)(args[15].data_d + base15);

  int base16 = args[16].dat->base_offset;
  double * __restrict__ SD021_B0_p = (double *)(args[16].data_d + base16);

  int base17 = args[17].dat->base_offset;
  double * __restrict__ SD022_B0_p = (double *)(args[17].data_d + base17);

  int base18 = args[18].dat->base_offset;
  double * __restrict__ SD100_B0_p = (double *)(args[18].data_d + base18);

  int base19 = args[19].dat->base_offset;
  double * __restrict__ SD101_B0_p = (double *)(args[19].data_d + base19);

  int base20 = args[20].dat->base_offset;
  double * __restrict__ SD102_B0_p = (double *)(args[20].data_d + base20);

  int base21 = args[21].dat->base_offset;
  double * __restrict__ SD110_B0_p = (double *)(args[21].data_d + base21);

  int base22 = args[22].dat->base_offset;
  double * __restrict__ SD111_B0_p = (double *)(args[22].data_d + base22);

  int base23 = args[23].dat->base_offset;
  double * __restrict__ SD112_B0_p = (double *)(args[23].data_d + base23);

  int base24 = args[24].dat->base_offset;
  double * __restrict__ SD120_B0_p = (double *)(args[24].data_d + base24);

  int base25 = args[25].dat->base_offset;
  double * __restrict__ SD121_B0_p = (double *)(args[25].data_d + base25);

  int base26 = args[26].dat->base_offset;
  double * __restrict__ SD122_B0_p = (double *)(args[26].data_d + base26);

  int base27 = args[27].dat->base_offset;
  double * __restrict__ SD200_B0_p = (double *)(args[27].data_d + base27);

  int base28 = args[28].dat->base_offset;
  double * __restrict__ SD201_B0_p = (double *)(args[28].data_d + base28);

  int base29 = args[29].dat->base_offset;
  double * __restrict__ SD202_B0_p = (double *)(args[29].data_d + base29);

  int base30 = args[30].dat->base_offset;
  double * __restrict__ SD210_B0_p = (double *)(args[30].data_d + base30);

  int base31 = args[31].dat->base_offset;
  double * __restrict__ SD211_B0_p = (double *)(args[31].data_d + base31);

  int base32 = args[32].dat->base_offset;
  double * __restrict__ SD212_B0_p = (double *)(args[32].data_d + base32);

  int base33 = args[33].dat->base_offset;
  double * __restrict__ SD220_B0_p = (double *)(args[33].data_d + base33);

  int base34 = args[34].dat->base_offset;
  double * __restrict__ SD221_B0_p = (double *)(args[34].data_d + base34);

  int base35 = args[35].dat->base_offset;
  double * __restrict__ SD222_B0_p = (double *)(args[35].data_d + base35);

  int base36 = args[36].dat->base_offset;
  double * __restrict__ T_B0_p = (double *)(args[36].data_d + base36);

  int base37 = args[37].dat->base_offset;
  double * __restrict__ mu_B0_p = (double *)(args[37].data_d + base37);

  int base38 = args[38].dat->base_offset;
  double * __restrict__ u0_B0_p = (double *)(args[38].data_d + base38);

  int base39 = args[39].dat->base_offset;
  double * __restrict__ u1_B0_p = (double *)(args[39].data_d + base39);

  int base40 = args[40].dat->base_offset;
  double * __restrict__ u2_B0_p = (double *)(args[40].data_d + base40);

  int base41 = args[41].dat->base_offset;
  double * __restrict__ wk0_B0_p = (double *)(args[41].data_d + base41);

  int base42 = args[42].dat->base_offset;
  double * __restrict__ wk10_B0_p = (double *)(args[42].data_d + base42);

  int base43 = args[43].dat->base_offset;
  double * __restrict__ wk11_B0_p = (double *)(args[43].data_d + base43);

  int base44 = args[44].dat->base_offset;
  double * __restrict__ wk1_B0_p = (double *)(args[44].data_d + base44);

  int base45 = args[45].dat->base_offset;
  double * __restrict__ wk2_B0_p = (double *)(args[45].data_d + base45);

  int base46 = args[46].dat->base_offset;
  double * __restrict__ wk3_B0_p = (double *)(args[46].data_d + base46);

  int base47 = args[47].dat->base_offset;
  double * __restrict__ wk4_B0_p = (double *)(args[47].data_d + base47);

  int base48 = args[48].dat->base_offset;
  double * __restrict__ wk5_B0_p = (double *)(args[48].data_d + base48);

  int base49 = args[49].dat->base_offset;
  double * __restrict__ wk6_B0_p = (double *)(args[49].data_d + base49);

  int base50 = args[50].dat->base_offset;
  double * __restrict__ wk7_B0_p = (double *)(args[50].data_d + base50);

  int base51 = args[51].dat->base_offset;
  double * __restrict__ wk8_B0_p = (double *)(args[51].data_d + base51);

  int base52 = args[52].dat->base_offset;
  double * __restrict__ wk9_B0_p = (double *)(args[52].data_d + base52);

  int base53 = args[53].dat->base_offset;
  double * __restrict__ Residual1_B0_p = (double *)(args[53].data_d + base53);

  int base54 = args[54].dat->base_offset;
  double * __restrict__ Residual2_B0_p = (double *)(args[54].data_d + base54);

  int base55 = args[55].dat->base_offset;
  double * __restrict__ Residual3_B0_p = (double *)(args[55].data_d + base55);

  int base56 = args[56].dat->base_offset;
  double * __restrict__ Residual4_B0_p = (double *)(args[56].data_d + base56);




  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_device(args, 58);
  ops_halo_exchanges(args,58,range);
  ops_H_D_exchanges_device(args, 58);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[37].mpi_time += __t1-__t2;
  }

  #pragma omp target teams distribute parallel for collapse(3)
  for ( int n_z=start2; n_z<end2; n_z++ ){
    for ( int n_y=start1; n_y<end1; n_y++ ){
      for ( int n_x=start0; n_x<end0; n_x++ ){
        int idx[] = {arg_idx[0]+n_x, arg_idx[1]+n_y, arg_idx[2]+n_z};
        const ACC<double> D00_B0(xdim0_opensbliblock00Kernel081, ydim0_opensbliblock00Kernel081, D00_B0_p + n_x*1 + n_y * xdim0_opensbliblock00Kernel081*1 + n_z * xdim0_opensbliblock00Kernel081 * ydim0_opensbliblock00Kernel081*1);
        const ACC<double> D01_B0(xdim1_opensbliblock00Kernel081, ydim1_opensbliblock00Kernel081, D01_B0_p + n_x*1 + n_y * xdim1_opensbliblock00Kernel081*1 + n_z * xdim1_opensbliblock00Kernel081 * ydim1_opensbliblock00Kernel081*1);
        const ACC<double> D02_B0(xdim2_opensbliblock00Kernel081, ydim2_opensbliblock00Kernel081, D02_B0_p + n_x*1 + n_y * xdim2_opensbliblock00Kernel081*1 + n_z * xdim2_opensbliblock00Kernel081 * ydim2_opensbliblock00Kernel081*1);
        const ACC<double> D10_B0(xdim3_opensbliblock00Kernel081, ydim3_opensbliblock00Kernel081, D10_B0_p + n_x*1 + n_y * xdim3_opensbliblock00Kernel081*1 + n_z * xdim3_opensbliblock00Kernel081 * ydim3_opensbliblock00Kernel081*1);
        const ACC<double> D11_B0(xdim4_opensbliblock00Kernel081, ydim4_opensbliblock00Kernel081, D11_B0_p + n_x*1 + n_y * xdim4_opensbliblock00Kernel081*1 + n_z * xdim4_opensbliblock00Kernel081 * ydim4_opensbliblock00Kernel081*1);
        const ACC<double> D12_B0(xdim5_opensbliblock00Kernel081, ydim5_opensbliblock00Kernel081, D12_B0_p + n_x*1 + n_y * xdim5_opensbliblock00Kernel081*1 + n_z * xdim5_opensbliblock00Kernel081 * ydim5_opensbliblock00Kernel081*1);
        const ACC<double> D20_B0(xdim6_opensbliblock00Kernel081, ydim6_opensbliblock00Kernel081, D20_B0_p + n_x*1 + n_y * xdim6_opensbliblock00Kernel081*1 + n_z * xdim6_opensbliblock00Kernel081 * ydim6_opensbliblock00Kernel081*1);
        const ACC<double> D21_B0(xdim7_opensbliblock00Kernel081, ydim7_opensbliblock00Kernel081, D21_B0_p + n_x*1 + n_y * xdim7_opensbliblock00Kernel081*1 + n_z * xdim7_opensbliblock00Kernel081 * ydim7_opensbliblock00Kernel081*1);
        const ACC<double> D22_B0(xdim8_opensbliblock00Kernel081, ydim8_opensbliblock00Kernel081, D22_B0_p + n_x*1 + n_y * xdim8_opensbliblock00Kernel081*1 + n_z * xdim8_opensbliblock00Kernel081 * ydim8_opensbliblock00Kernel081*1);
        const ACC<double> SD000_B0(xdim9_opensbliblock00Kernel081, ydim9_opensbliblock00Kernel081, SD000_B0_p + n_x*1 + n_y * xdim9_opensbliblock00Kernel081*1 + n_z * xdim9_opensbliblock00Kernel081 * ydim9_opensbliblock00Kernel081*1);
        const ACC<double> SD001_B0(xdim10_opensbliblock00Kernel081, ydim10_opensbliblock00Kernel081, SD001_B0_p + n_x*1 + n_y * xdim10_opensbliblock00Kernel081*1 + n_z * xdim10_opensbliblock00Kernel081 * ydim10_opensbliblock00Kernel081*1);
        const ACC<double> SD002_B0(xdim11_opensbliblock00Kernel081, ydim11_opensbliblock00Kernel081, SD002_B0_p + n_x*1 + n_y * xdim11_opensbliblock00Kernel081*1 + n_z * xdim11_opensbliblock00Kernel081 * ydim11_opensbliblock00Kernel081*1);
        const ACC<double> SD010_B0(xdim12_opensbliblock00Kernel081, ydim12_opensbliblock00Kernel081, SD010_B0_p + n_x*1 + n_y * xdim12_opensbliblock00Kernel081*1 + n_z * xdim12_opensbliblock00Kernel081 * ydim12_opensbliblock00Kernel081*1);
        const ACC<double> SD011_B0(xdim13_opensbliblock00Kernel081, ydim13_opensbliblock00Kernel081, SD011_B0_p + n_x*1 + n_y * xdim13_opensbliblock00Kernel081*1 + n_z * xdim13_opensbliblock00Kernel081 * ydim13_opensbliblock00Kernel081*1);
        const ACC<double> SD012_B0(xdim14_opensbliblock00Kernel081, ydim14_opensbliblock00Kernel081, SD012_B0_p + n_x*1 + n_y * xdim14_opensbliblock00Kernel081*1 + n_z * xdim14_opensbliblock00Kernel081 * ydim14_opensbliblock00Kernel081*1);
        const ACC<double> SD020_B0(xdim15_opensbliblock00Kernel081, ydim15_opensbliblock00Kernel081, SD020_B0_p + n_x*1 + n_y * xdim15_opensbliblock00Kernel081*1 + n_z * xdim15_opensbliblock00Kernel081 * ydim15_opensbliblock00Kernel081*1);
        const ACC<double> SD021_B0(xdim16_opensbliblock00Kernel081, ydim16_opensbliblock00Kernel081, SD021_B0_p + n_x*1 + n_y * xdim16_opensbliblock00Kernel081*1 + n_z * xdim16_opensbliblock00Kernel081 * ydim16_opensbliblock00Kernel081*1);
        const ACC<double> SD022_B0(xdim17_opensbliblock00Kernel081, ydim17_opensbliblock00Kernel081, SD022_B0_p + n_x*1 + n_y * xdim17_opensbliblock00Kernel081*1 + n_z * xdim17_opensbliblock00Kernel081 * ydim17_opensbliblock00Kernel081*1);
        const ACC<double> SD100_B0(xdim18_opensbliblock00Kernel081, ydim18_opensbliblock00Kernel081, SD100_B0_p + n_x*1 + n_y * xdim18_opensbliblock00Kernel081*1 + n_z * xdim18_opensbliblock00Kernel081 * ydim18_opensbliblock00Kernel081*1);
        const ACC<double> SD101_B0(xdim19_opensbliblock00Kernel081, ydim19_opensbliblock00Kernel081, SD101_B0_p + n_x*1 + n_y * xdim19_opensbliblock00Kernel081*1 + n_z * xdim19_opensbliblock00Kernel081 * ydim19_opensbliblock00Kernel081*1);
        const ACC<double> SD102_B0(xdim20_opensbliblock00Kernel081, ydim20_opensbliblock00Kernel081, SD102_B0_p + n_x*1 + n_y * xdim20_opensbliblock00Kernel081*1 + n_z * xdim20_opensbliblock00Kernel081 * ydim20_opensbliblock00Kernel081*1);
        const ACC<double> SD110_B0(xdim21_opensbliblock00Kernel081, ydim21_opensbliblock00Kernel081, SD110_B0_p + n_x*1 + n_y * xdim21_opensbliblock00Kernel081*1 + n_z * xdim21_opensbliblock00Kernel081 * ydim21_opensbliblock00Kernel081*1);
        const ACC<double> SD111_B0(xdim22_opensbliblock00Kernel081, ydim22_opensbliblock00Kernel081, SD111_B0_p + n_x*1 + n_y * xdim22_opensbliblock00Kernel081*1 + n_z * xdim22_opensbliblock00Kernel081 * ydim22_opensbliblock00Kernel081*1);
        const ACC<double> SD112_B0(xdim23_opensbliblock00Kernel081, ydim23_opensbliblock00Kernel081, SD112_B0_p + n_x*1 + n_y * xdim23_opensbliblock00Kernel081*1 + n_z * xdim23_opensbliblock00Kernel081 * ydim23_opensbliblock00Kernel081*1);
        const ACC<double> SD120_B0(xdim24_opensbliblock00Kernel081, ydim24_opensbliblock00Kernel081, SD120_B0_p + n_x*1 + n_y * xdim24_opensbliblock00Kernel081*1 + n_z * xdim24_opensbliblock00Kernel081 * ydim24_opensbliblock00Kernel081*1);
        const ACC<double> SD121_B0(xdim25_opensbliblock00Kernel081, ydim25_opensbliblock00Kernel081, SD121_B0_p + n_x*1 + n_y * xdim25_opensbliblock00Kernel081*1 + n_z * xdim25_opensbliblock00Kernel081 * ydim25_opensbliblock00Kernel081*1);
        const ACC<double> SD122_B0(xdim26_opensbliblock00Kernel081, ydim26_opensbliblock00Kernel081, SD122_B0_p + n_x*1 + n_y * xdim26_opensbliblock00Kernel081*1 + n_z * xdim26_opensbliblock00Kernel081 * ydim26_opensbliblock00Kernel081*1);
        const ACC<double> SD200_B0(xdim27_opensbliblock00Kernel081, ydim27_opensbliblock00Kernel081, SD200_B0_p + n_x*1 + n_y * xdim27_opensbliblock00Kernel081*1 + n_z * xdim27_opensbliblock00Kernel081 * ydim27_opensbliblock00Kernel081*1);
        const ACC<double> SD201_B0(xdim28_opensbliblock00Kernel081, ydim28_opensbliblock00Kernel081, SD201_B0_p + n_x*1 + n_y * xdim28_opensbliblock00Kernel081*1 + n_z * xdim28_opensbliblock00Kernel081 * ydim28_opensbliblock00Kernel081*1);
        const ACC<double> SD202_B0(xdim29_opensbliblock00Kernel081, ydim29_opensbliblock00Kernel081, SD202_B0_p + n_x*1 + n_y * xdim29_opensbliblock00Kernel081*1 + n_z * xdim29_opensbliblock00Kernel081 * ydim29_opensbliblock00Kernel081*1);
        const ACC<double> SD210_B0(xdim30_opensbliblock00Kernel081, ydim30_opensbliblock00Kernel081, SD210_B0_p + n_x*1 + n_y * xdim30_opensbliblock00Kernel081*1 + n_z * xdim30_opensbliblock00Kernel081 * ydim30_opensbliblock00Kernel081*1);
        const ACC<double> SD211_B0(xdim31_opensbliblock00Kernel081, ydim31_opensbliblock00Kernel081, SD211_B0_p + n_x*1 + n_y * xdim31_opensbliblock00Kernel081*1 + n_z * xdim31_opensbliblock00Kernel081 * ydim31_opensbliblock00Kernel081*1);
        const ACC<double> SD212_B0(xdim32_opensbliblock00Kernel081, ydim32_opensbliblock00Kernel081, SD212_B0_p + n_x*1 + n_y * xdim32_opensbliblock00Kernel081*1 + n_z * xdim32_opensbliblock00Kernel081 * ydim32_opensbliblock00Kernel081*1);
        const ACC<double> SD220_B0(xdim33_opensbliblock00Kernel081, ydim33_opensbliblock00Kernel081, SD220_B0_p + n_x*1 + n_y * xdim33_opensbliblock00Kernel081*1 + n_z * xdim33_opensbliblock00Kernel081 * ydim33_opensbliblock00Kernel081*1);
        const ACC<double> SD221_B0(xdim34_opensbliblock00Kernel081, ydim34_opensbliblock00Kernel081, SD221_B0_p + n_x*1 + n_y * xdim34_opensbliblock00Kernel081*1 + n_z * xdim34_opensbliblock00Kernel081 * ydim34_opensbliblock00Kernel081*1);
        const ACC<double> SD222_B0(xdim35_opensbliblock00Kernel081, ydim35_opensbliblock00Kernel081, SD222_B0_p + n_x*1 + n_y * xdim35_opensbliblock00Kernel081*1 + n_z * xdim35_opensbliblock00Kernel081 * ydim35_opensbliblock00Kernel081*1);
        const ACC<double> T_B0(xdim36_opensbliblock00Kernel081, ydim36_opensbliblock00Kernel081, T_B0_p + n_x*1 + n_y * xdim36_opensbliblock00Kernel081*1 + n_z * xdim36_opensbliblock00Kernel081 * ydim36_opensbliblock00Kernel081*1);
        const ACC<double> mu_B0(xdim37_opensbliblock00Kernel081, ydim37_opensbliblock00Kernel081, mu_B0_p + n_x*1 + n_y * xdim37_opensbliblock00Kernel081*1 + n_z * xdim37_opensbliblock00Kernel081 * ydim37_opensbliblock00Kernel081*1);
        const ACC<double> u0_B0(xdim38_opensbliblock00Kernel081, ydim38_opensbliblock00Kernel081, u0_B0_p + n_x*1 + n_y * xdim38_opensbliblock00Kernel081*1 + n_z * xdim38_opensbliblock00Kernel081 * ydim38_opensbliblock00Kernel081*1);
        const ACC<double> u1_B0(xdim39_opensbliblock00Kernel081, ydim39_opensbliblock00Kernel081, u1_B0_p + n_x*1 + n_y * xdim39_opensbliblock00Kernel081*1 + n_z * xdim39_opensbliblock00Kernel081 * ydim39_opensbliblock00Kernel081*1);
        const ACC<double> u2_B0(xdim40_opensbliblock00Kernel081, ydim40_opensbliblock00Kernel081, u2_B0_p + n_x*1 + n_y * xdim40_opensbliblock00Kernel081*1 + n_z * xdim40_opensbliblock00Kernel081 * ydim40_opensbliblock00Kernel081*1);
        const ACC<double> wk0_B0(xdim41_opensbliblock00Kernel081, ydim41_opensbliblock00Kernel081, wk0_B0_p + n_x*1 + n_y * xdim41_opensbliblock00Kernel081*1 + n_z * xdim41_opensbliblock00Kernel081 * ydim41_opensbliblock00Kernel081*1);
        const ACC<double> wk10_B0(xdim42_opensbliblock00Kernel081, ydim42_opensbliblock00Kernel081, wk10_B0_p + n_x*1 + n_y * xdim42_opensbliblock00Kernel081*1 + n_z * xdim42_opensbliblock00Kernel081 * ydim42_opensbliblock00Kernel081*1);
        const ACC<double> wk11_B0(xdim43_opensbliblock00Kernel081, ydim43_opensbliblock00Kernel081, wk11_B0_p + n_x*1 + n_y * xdim43_opensbliblock00Kernel081*1 + n_z * xdim43_opensbliblock00Kernel081 * ydim43_opensbliblock00Kernel081*1);
        const ACC<double> wk1_B0(xdim44_opensbliblock00Kernel081, ydim44_opensbliblock00Kernel081, wk1_B0_p + n_x*1 + n_y * xdim44_opensbliblock00Kernel081*1 + n_z * xdim44_opensbliblock00Kernel081 * ydim44_opensbliblock00Kernel081*1);
        const ACC<double> wk2_B0(xdim45_opensbliblock00Kernel081, ydim45_opensbliblock00Kernel081, wk2_B0_p + n_x*1 + n_y * xdim45_opensbliblock00Kernel081*1 + n_z * xdim45_opensbliblock00Kernel081 * ydim45_opensbliblock00Kernel081*1);
        const ACC<double> wk3_B0(xdim46_opensbliblock00Kernel081, ydim46_opensbliblock00Kernel081, wk3_B0_p + n_x*1 + n_y * xdim46_opensbliblock00Kernel081*1 + n_z * xdim46_opensbliblock00Kernel081 * ydim46_opensbliblock00Kernel081*1);
        const ACC<double> wk4_B0(xdim47_opensbliblock00Kernel081, ydim47_opensbliblock00Kernel081, wk4_B0_p + n_x*1 + n_y * xdim47_opensbliblock00Kernel081*1 + n_z * xdim47_opensbliblock00Kernel081 * ydim47_opensbliblock00Kernel081*1);
        const ACC<double> wk5_B0(xdim48_opensbliblock00Kernel081, ydim48_opensbliblock00Kernel081, wk5_B0_p + n_x*1 + n_y * xdim48_opensbliblock00Kernel081*1 + n_z * xdim48_opensbliblock00Kernel081 * ydim48_opensbliblock00Kernel081*1);
        const ACC<double> wk6_B0(xdim49_opensbliblock00Kernel081, ydim49_opensbliblock00Kernel081, wk6_B0_p + n_x*1 + n_y * xdim49_opensbliblock00Kernel081*1 + n_z * xdim49_opensbliblock00Kernel081 * ydim49_opensbliblock00Kernel081*1);
        const ACC<double> wk7_B0(xdim50_opensbliblock00Kernel081, ydim50_opensbliblock00Kernel081, wk7_B0_p + n_x*1 + n_y * xdim50_opensbliblock00Kernel081*1 + n_z * xdim50_opensbliblock00Kernel081 * ydim50_opensbliblock00Kernel081*1);
        const ACC<double> wk8_B0(xdim51_opensbliblock00Kernel081, ydim51_opensbliblock00Kernel081, wk8_B0_p + n_x*1 + n_y * xdim51_opensbliblock00Kernel081*1 + n_z * xdim51_opensbliblock00Kernel081 * ydim51_opensbliblock00Kernel081*1);
        const ACC<double> wk9_B0(xdim52_opensbliblock00Kernel081, ydim52_opensbliblock00Kernel081, wk9_B0_p + n_x*1 + n_y * xdim52_opensbliblock00Kernel081*1 + n_z * xdim52_opensbliblock00Kernel081 * ydim52_opensbliblock00Kernel081*1);
        ACC<double> Residual1_B0(xdim53_opensbliblock00Kernel081, ydim53_opensbliblock00Kernel081, Residual1_B0_p + n_x*1 + n_y * xdim53_opensbliblock00Kernel081*1 + n_z * xdim53_opensbliblock00Kernel081 * ydim53_opensbliblock00Kernel081*1);
        ACC<double> Residual2_B0(xdim54_opensbliblock00Kernel081, ydim54_opensbliblock00Kernel081, Residual2_B0_p + n_x*1 + n_y * xdim54_opensbliblock00Kernel081*1 + n_z * xdim54_opensbliblock00Kernel081 * ydim54_opensbliblock00Kernel081*1);
        ACC<double> Residual3_B0(xdim55_opensbliblock00Kernel081, ydim55_opensbliblock00Kernel081, Residual3_B0_p + n_x*1 + n_y * xdim55_opensbliblock00Kernel081*1 + n_z * xdim55_opensbliblock00Kernel081 * ydim55_opensbliblock00Kernel081*1);
        ACC<double> Residual4_B0(xdim56_opensbliblock00Kernel081, ydim56_opensbliblock00Kernel081, Residual4_B0_p + n_x*1 + n_y * xdim56_opensbliblock00Kernel081*1 + n_z * xdim56_opensbliblock00Kernel081 * ydim56_opensbliblock00Kernel081*1);
        
   double d1_mu_dx = 0.0;
   double d1_mu_dy = 0.0;
   double d1_mu_dz = 0.0;
   double d1_wk0_dy = 0.0;
   double d1_wk0_dz = 0.0;
   double d1_wk1_dy = 0.0;
   double d1_wk1_dz = 0.0;
   double d1_wk2_dy = 0.0;
   double d1_wk2_dz = 0.0;
   double d1_wk3_dy = 0.0;
   double d1_wk3_dz = 0.0;
   double d1_wk4_dz = 0.0;
   double d1_wk5_dz = 0.0;
   double d1_wk6_dz = 0.0;
   double d1_wk7_dz = 0.0;
   double d2_T_dx = 0.0;
   double d2_T_dy = 0.0;
   double d2_T_dz = 0.0;
   double d2_u0_dx = 0.0;
   double d2_u0_dy = 0.0;
   double d2_u0_dz = 0.0;
   double d2_u1_dx = 0.0;
   double d2_u1_dy = 0.0;
   double d2_u1_dz = 0.0;
   double d2_u2_dx = 0.0;
   double d2_u2_dy = 0.0;
   double d2_u2_dz = 0.0;
   if (idx[0] == 0){

       d1_mu_dx = (-3*mu_B0(2,0,0) + 4*mu_B0(1,0,0) - (25.0/12.0)*mu_B0(0,0,0) - (1.0/4.0)*mu_B0(4,0,0) +
            ((4.0/3.0))*mu_B0(3,0,0))*invDelta0block0;

   }

   else if (idx[0] == 1){

       d1_mu_dx = (-(5.0/6.0)*mu_B0(0,0,0) - (1.0/2.0)*mu_B0(2,0,0) - (1.0/4.0)*mu_B0(-1,0,0) +
            ((1.0/12.0))*mu_B0(3,0,0) + ((3.0/2.0))*mu_B0(1,0,0))*invDelta0block0;

   }

   else if (idx[0] == -1 + block0np0){

       d1_mu_dx = (-4*mu_B0(-1,0,0) + 3*mu_B0(-2,0,0) - (4.0/3.0)*mu_B0(-3,0,0) + ((1.0/4.0))*mu_B0(-4,0,0) +
            ((25.0/12.0))*mu_B0(0,0,0))*invDelta0block0;

   }

   else if (idx[0] == -2 + block0np0){

       d1_mu_dx = (((1.0/2.0))*mu_B0(-2,0,0) - (3.0/2.0)*mu_B0(-1,0,0) - (1.0/12.0)*mu_B0(-3,0,0) +
            ((1.0/4.0))*mu_B0(1,0,0) + ((5.0/6.0))*mu_B0(0,0,0))*invDelta0block0;

   }

   else{

       d1_mu_dx = (-(2.0/3.0)*mu_B0(-1,0,0) - (1.0/12.0)*mu_B0(2,0,0) + ((1.0/12.0))*mu_B0(-2,0,0) +
            ((2.0/3.0))*mu_B0(1,0,0))*invDelta0block0;

   }

   if (idx[0] == 0){

       d2_T_dx = (-(26.0/3.0)*T_B0(1,0,0) - (14.0/3.0)*T_B0(3,0,0) + ((11.0/12.0))*T_B0(4,0,0) +
            ((19.0/2.0))*T_B0(2,0,0) + ((35.0/12.0))*T_B0(0,0,0))*inv2Delta0block0;

       d2_u0_dx = (-(26.0/3.0)*u0_B0(1,0,0) - (14.0/3.0)*u0_B0(3,0,0) + ((11.0/12.0))*u0_B0(4,0,0) +
            ((19.0/2.0))*u0_B0(2,0,0) + ((35.0/12.0))*u0_B0(0,0,0))*inv2Delta0block0;

       d2_u1_dx = (-(26.0/3.0)*u1_B0(1,0,0) - (14.0/3.0)*u1_B0(3,0,0) + ((11.0/12.0))*u1_B0(4,0,0) +
            ((19.0/2.0))*u1_B0(2,0,0) + ((35.0/12.0))*u1_B0(0,0,0))*inv2Delta0block0;

       d2_u2_dx = (-(26.0/3.0)*u2_B0(1,0,0) - (14.0/3.0)*u2_B0(3,0,0) + ((11.0/12.0))*u2_B0(4,0,0) +
            ((19.0/2.0))*u2_B0(2,0,0) + ((35.0/12.0))*u2_B0(0,0,0))*inv2Delta0block0;

   }

   else if (idx[0] == 1){

       d2_T_dx = (((1.0/2.0))*T_B0(1,0,0) - (5.0/3.0)*T_B0(0,0,0) - (1.0/12.0)*T_B0(3,0,0) + ((1.0/3.0))*T_B0(2,0,0) +
            ((11.0/12.0))*T_B0(-1,0,0))*inv2Delta0block0;

       d2_u0_dx = (((1.0/2.0))*u0_B0(1,0,0) - (5.0/3.0)*u0_B0(0,0,0) - (1.0/12.0)*u0_B0(3,0,0) +
            ((1.0/3.0))*u0_B0(2,0,0) + ((11.0/12.0))*u0_B0(-1,0,0))*inv2Delta0block0;

       d2_u1_dx = (((1.0/2.0))*u1_B0(1,0,0) - (5.0/3.0)*u1_B0(0,0,0) - (1.0/12.0)*u1_B0(3,0,0) +
            ((1.0/3.0))*u1_B0(2,0,0) + ((11.0/12.0))*u1_B0(-1,0,0))*inv2Delta0block0;

       d2_u2_dx = (((1.0/2.0))*u2_B0(1,0,0) - (5.0/3.0)*u2_B0(0,0,0) - (1.0/12.0)*u2_B0(3,0,0) +
            ((1.0/3.0))*u2_B0(2,0,0) + ((11.0/12.0))*u2_B0(-1,0,0))*inv2Delta0block0;

   }

   else if (idx[0] == -1 + block0np0){

       d2_T_dx = (-(26.0/3.0)*T_B0(-1,0,0) - (14.0/3.0)*T_B0(-3,0,0) + ((11.0/12.0))*T_B0(-4,0,0) +
            ((19.0/2.0))*T_B0(-2,0,0) + ((35.0/12.0))*T_B0(0,0,0))*inv2Delta0block0;

       d2_u0_dx = (-(26.0/3.0)*u0_B0(-1,0,0) - (14.0/3.0)*u0_B0(-3,0,0) + ((11.0/12.0))*u0_B0(-4,0,0) +
            ((19.0/2.0))*u0_B0(-2,0,0) + ((35.0/12.0))*u0_B0(0,0,0))*inv2Delta0block0;

       d2_u1_dx = (-(26.0/3.0)*u1_B0(-1,0,0) - (14.0/3.0)*u1_B0(-3,0,0) + ((11.0/12.0))*u1_B0(-4,0,0) +
            ((19.0/2.0))*u1_B0(-2,0,0) + ((35.0/12.0))*u1_B0(0,0,0))*inv2Delta0block0;

       d2_u2_dx = (-(26.0/3.0)*u2_B0(-1,0,0) - (14.0/3.0)*u2_B0(-3,0,0) + ((11.0/12.0))*u2_B0(-4,0,0) +
            ((19.0/2.0))*u2_B0(-2,0,0) + ((35.0/12.0))*u2_B0(0,0,0))*inv2Delta0block0;

   }

   else if (idx[0] == -2 + block0np0){

       d2_T_dx = (((1.0/2.0))*T_B0(-1,0,0) - (5.0/3.0)*T_B0(0,0,0) - (1.0/12.0)*T_B0(-3,0,0) + ((1.0/3.0))*T_B0(-2,0,0)
            + ((11.0/12.0))*T_B0(1,0,0))*inv2Delta0block0;

       d2_u0_dx = (((1.0/2.0))*u0_B0(-1,0,0) - (5.0/3.0)*u0_B0(0,0,0) - (1.0/12.0)*u0_B0(-3,0,0) +
            ((1.0/3.0))*u0_B0(-2,0,0) + ((11.0/12.0))*u0_B0(1,0,0))*inv2Delta0block0;

       d2_u1_dx = (((1.0/2.0))*u1_B0(-1,0,0) - (5.0/3.0)*u1_B0(0,0,0) - (1.0/12.0)*u1_B0(-3,0,0) +
            ((1.0/3.0))*u1_B0(-2,0,0) + ((11.0/12.0))*u1_B0(1,0,0))*inv2Delta0block0;

       d2_u2_dx = (((1.0/2.0))*u2_B0(-1,0,0) - (5.0/3.0)*u2_B0(0,0,0) - (1.0/12.0)*u2_B0(-3,0,0) +
            ((1.0/3.0))*u2_B0(-2,0,0) + ((11.0/12.0))*u2_B0(1,0,0))*inv2Delta0block0;

   }

   else{

       d2_T_dx = (-(5.0/2.0)*T_B0(0,0,0) - (1.0/12.0)*T_B0(-2,0,0) - (1.0/12.0)*T_B0(2,0,0) + ((4.0/3.0))*T_B0(1,0,0) +
            ((4.0/3.0))*T_B0(-1,0,0))*inv2Delta0block0;

       d2_u0_dx = (-(5.0/2.0)*u0_B0(0,0,0) - (1.0/12.0)*u0_B0(-2,0,0) - (1.0/12.0)*u0_B0(2,0,0) +
            ((4.0/3.0))*u0_B0(1,0,0) + ((4.0/3.0))*u0_B0(-1,0,0))*inv2Delta0block0;

       d2_u1_dx = (-(5.0/2.0)*u1_B0(0,0,0) - (1.0/12.0)*u1_B0(-2,0,0) - (1.0/12.0)*u1_B0(2,0,0) +
            ((4.0/3.0))*u1_B0(1,0,0) + ((4.0/3.0))*u1_B0(-1,0,0))*inv2Delta0block0;

       d2_u2_dx = (-(5.0/2.0)*u2_B0(0,0,0) - (1.0/12.0)*u2_B0(-2,0,0) - (1.0/12.0)*u2_B0(2,0,0) +
            ((4.0/3.0))*u2_B0(1,0,0) + ((4.0/3.0))*u2_B0(-1,0,0))*inv2Delta0block0;

   }

   if (idx[1] == 0){

       d1_mu_dy = (-3*mu_B0(0,2,0) + 4*mu_B0(0,1,0) - (25.0/12.0)*mu_B0(0,0,0) - (1.0/4.0)*mu_B0(0,4,0) +
            ((4.0/3.0))*mu_B0(0,3,0))*invDelta1block0;

       d1_wk0_dy = (-3*wk0_B0(0,2,0) + 4*wk0_B0(0,1,0) - (25.0/12.0)*wk0_B0(0,0,0) - (1.0/4.0)*wk0_B0(0,4,0) +
            ((4.0/3.0))*wk0_B0(0,3,0))*invDelta1block0;

       d1_wk1_dy = (-3*wk1_B0(0,2,0) + 4*wk1_B0(0,1,0) - (25.0/12.0)*wk1_B0(0,0,0) - (1.0/4.0)*wk1_B0(0,4,0) +
            ((4.0/3.0))*wk1_B0(0,3,0))*invDelta1block0;

       d1_wk2_dy = (-3*wk2_B0(0,2,0) + 4*wk2_B0(0,1,0) - (25.0/12.0)*wk2_B0(0,0,0) - (1.0/4.0)*wk2_B0(0,4,0) +
            ((4.0/3.0))*wk2_B0(0,3,0))*invDelta1block0;

       d1_wk3_dy = (-3*wk3_B0(0,2,0) + 4*wk3_B0(0,1,0) - (25.0/12.0)*wk3_B0(0,0,0) - (1.0/4.0)*wk3_B0(0,4,0) +
            ((4.0/3.0))*wk3_B0(0,3,0))*invDelta1block0;

   }

   else if (idx[1] == 1){

       d1_mu_dy = (-(5.0/6.0)*mu_B0(0,0,0) - (1.0/2.0)*mu_B0(0,2,0) - (1.0/4.0)*mu_B0(0,-1,0) +
            ((1.0/12.0))*mu_B0(0,3,0) + ((3.0/2.0))*mu_B0(0,1,0))*invDelta1block0;

       d1_wk0_dy = (-(5.0/6.0)*wk0_B0(0,0,0) - (1.0/2.0)*wk0_B0(0,2,0) - (1.0/4.0)*wk0_B0(0,-1,0) +
            ((1.0/12.0))*wk0_B0(0,3,0) + ((3.0/2.0))*wk0_B0(0,1,0))*invDelta1block0;

       d1_wk1_dy = (-(5.0/6.0)*wk1_B0(0,0,0) - (1.0/2.0)*wk1_B0(0,2,0) - (1.0/4.0)*wk1_B0(0,-1,0) +
            ((1.0/12.0))*wk1_B0(0,3,0) + ((3.0/2.0))*wk1_B0(0,1,0))*invDelta1block0;

       d1_wk2_dy = (-(5.0/6.0)*wk2_B0(0,0,0) - (1.0/2.0)*wk2_B0(0,2,0) - (1.0/4.0)*wk2_B0(0,-1,0) +
            ((1.0/12.0))*wk2_B0(0,3,0) + ((3.0/2.0))*wk2_B0(0,1,0))*invDelta1block0;

       d1_wk3_dy = (-(5.0/6.0)*wk3_B0(0,0,0) - (1.0/2.0)*wk3_B0(0,2,0) - (1.0/4.0)*wk3_B0(0,-1,0) +
            ((1.0/12.0))*wk3_B0(0,3,0) + ((3.0/2.0))*wk3_B0(0,1,0))*invDelta1block0;

   }

   else{

       d1_mu_dy = (-(2.0/3.0)*mu_B0(0,-1,0) - (1.0/12.0)*mu_B0(0,2,0) + ((1.0/12.0))*mu_B0(0,-2,0) +
            ((2.0/3.0))*mu_B0(0,1,0))*invDelta1block0;

       d1_wk0_dy = (-(2.0/3.0)*wk0_B0(0,-1,0) - (1.0/12.0)*wk0_B0(0,2,0) + ((1.0/12.0))*wk0_B0(0,-2,0) +
            ((2.0/3.0))*wk0_B0(0,1,0))*invDelta1block0;

       d1_wk1_dy = (-(2.0/3.0)*wk1_B0(0,-1,0) - (1.0/12.0)*wk1_B0(0,2,0) + ((1.0/12.0))*wk1_B0(0,-2,0) +
            ((2.0/3.0))*wk1_B0(0,1,0))*invDelta1block0;

       d1_wk2_dy = (-(2.0/3.0)*wk2_B0(0,-1,0) - (1.0/12.0)*wk2_B0(0,2,0) + ((1.0/12.0))*wk2_B0(0,-2,0) +
            ((2.0/3.0))*wk2_B0(0,1,0))*invDelta1block0;

       d1_wk3_dy = (-(2.0/3.0)*wk3_B0(0,-1,0) - (1.0/12.0)*wk3_B0(0,2,0) + ((1.0/12.0))*wk3_B0(0,-2,0) +
            ((2.0/3.0))*wk3_B0(0,1,0))*invDelta1block0;

   }

   if (idx[1] == 0){

       d2_T_dy = (-(26.0/3.0)*T_B0(0,1,0) - (14.0/3.0)*T_B0(0,3,0) + ((11.0/12.0))*T_B0(0,4,0) +
            ((19.0/2.0))*T_B0(0,2,0) + ((35.0/12.0))*T_B0(0,0,0))*inv2Delta1block0;

       d2_u0_dy = (-(26.0/3.0)*u0_B0(0,1,0) - (14.0/3.0)*u0_B0(0,3,0) + ((11.0/12.0))*u0_B0(0,4,0) +
            ((19.0/2.0))*u0_B0(0,2,0) + ((35.0/12.0))*u0_B0(0,0,0))*inv2Delta1block0;

       d2_u1_dy = (-(26.0/3.0)*u1_B0(0,1,0) - (14.0/3.0)*u1_B0(0,3,0) + ((11.0/12.0))*u1_B0(0,4,0) +
            ((19.0/2.0))*u1_B0(0,2,0) + ((35.0/12.0))*u1_B0(0,0,0))*inv2Delta1block0;

       d2_u2_dy = (-(26.0/3.0)*u2_B0(0,1,0) - (14.0/3.0)*u2_B0(0,3,0) + ((11.0/12.0))*u2_B0(0,4,0) +
            ((19.0/2.0))*u2_B0(0,2,0) + ((35.0/12.0))*u2_B0(0,0,0))*inv2Delta1block0;

   }

   else if (idx[1] == 1){

       d2_T_dy = (((1.0/2.0))*T_B0(0,1,0) - (5.0/3.0)*T_B0(0,0,0) - (1.0/12.0)*T_B0(0,3,0) + ((1.0/3.0))*T_B0(0,2,0) +
            ((11.0/12.0))*T_B0(0,-1,0))*inv2Delta1block0;

       d2_u0_dy = (((1.0/2.0))*u0_B0(0,1,0) - (5.0/3.0)*u0_B0(0,0,0) - (1.0/12.0)*u0_B0(0,3,0) +
            ((1.0/3.0))*u0_B0(0,2,0) + ((11.0/12.0))*u0_B0(0,-1,0))*inv2Delta1block0;

       d2_u1_dy = (((1.0/2.0))*u1_B0(0,1,0) - (5.0/3.0)*u1_B0(0,0,0) - (1.0/12.0)*u1_B0(0,3,0) +
            ((1.0/3.0))*u1_B0(0,2,0) + ((11.0/12.0))*u1_B0(0,-1,0))*inv2Delta1block0;

       d2_u2_dy = (((1.0/2.0))*u2_B0(0,1,0) - (5.0/3.0)*u2_B0(0,0,0) - (1.0/12.0)*u2_B0(0,3,0) +
            ((1.0/3.0))*u2_B0(0,2,0) + ((11.0/12.0))*u2_B0(0,-1,0))*inv2Delta1block0;

   }

   else{

       d2_T_dy = (-(5.0/2.0)*T_B0(0,0,0) - (1.0/12.0)*T_B0(0,-2,0) - (1.0/12.0)*T_B0(0,2,0) + ((4.0/3.0))*T_B0(0,1,0) +
            ((4.0/3.0))*T_B0(0,-1,0))*inv2Delta1block0;

       d2_u0_dy = (-(5.0/2.0)*u0_B0(0,0,0) - (1.0/12.0)*u0_B0(0,-2,0) - (1.0/12.0)*u0_B0(0,2,0) +
            ((4.0/3.0))*u0_B0(0,1,0) + ((4.0/3.0))*u0_B0(0,-1,0))*inv2Delta1block0;

       d2_u1_dy = (-(5.0/2.0)*u1_B0(0,0,0) - (1.0/12.0)*u1_B0(0,-2,0) - (1.0/12.0)*u1_B0(0,2,0) +
            ((4.0/3.0))*u1_B0(0,1,0) + ((4.0/3.0))*u1_B0(0,-1,0))*inv2Delta1block0;

       d2_u2_dy = (-(5.0/2.0)*u2_B0(0,0,0) - (1.0/12.0)*u2_B0(0,-2,0) - (1.0/12.0)*u2_B0(0,2,0) +
            ((4.0/3.0))*u2_B0(0,1,0) + ((4.0/3.0))*u2_B0(0,-1,0))*inv2Delta1block0;

   }

    d2_T_dz = -(1.0/12.0)*(-16*T_B0(0,0,1) - 16*T_B0(0,0,-1) + 30*T_B0(0,0,0) + T_B0(0,0,-2) +
      T_B0(0,0,2))*inv2Delta2block0;

   d1_mu_dz = ((1.0/12.0))*(-mu_B0(0,0,2) - 8*mu_B0(0,0,-1) + 8*mu_B0(0,0,1) + mu_B0(0,0,-2))*invDelta2block0;

    d2_u0_dz = ((1.0/12.0))*(-u0_B0(0,0,-2) - u0_B0(0,0,2) - 30*u0_B0(0,0,0) + 16*u0_B0(0,0,1) +
      16*u0_B0(0,0,-1))*inv2Delta2block0;

    d2_u1_dz = -(1.0/12.0)*(-16*u1_B0(0,0,1) - 16*u1_B0(0,0,-1) + 30*u1_B0(0,0,0) + u1_B0(0,0,-2) +
      u1_B0(0,0,2))*inv2Delta2block0;

    d2_u2_dz = ((1.0/12.0))*(-u2_B0(0,0,-2) - u2_B0(0,0,2) - 30*u2_B0(0,0,0) + 16*u2_B0(0,0,1) +
      16*u2_B0(0,0,-1))*inv2Delta2block0;

   d1_wk0_dz = -(1.0/12.0)*(-wk0_B0(0,0,-2) - 8*wk0_B0(0,0,1) + 8*wk0_B0(0,0,-1) + wk0_B0(0,0,2))*invDelta2block0;

   d1_wk1_dz = -(1.0/12.0)*(-wk1_B0(0,0,-2) - 8*wk1_B0(0,0,1) + 8*wk1_B0(0,0,-1) + wk1_B0(0,0,2))*invDelta2block0;

   d1_wk2_dz = -(1.0/12.0)*(-wk2_B0(0,0,-2) - 8*wk2_B0(0,0,1) + 8*wk2_B0(0,0,-1) + wk2_B0(0,0,2))*invDelta2block0;

   d1_wk3_dz = -(1.0/12.0)*(-wk3_B0(0,0,-2) - 8*wk3_B0(0,0,1) + 8*wk3_B0(0,0,-1) + wk3_B0(0,0,2))*invDelta2block0;

   d1_wk4_dz = -(1.0/12.0)*(-wk4_B0(0,0,-2) - 8*wk4_B0(0,0,1) + 8*wk4_B0(0,0,-1) + wk4_B0(0,0,2))*invDelta2block0;

   d1_wk5_dz = ((1.0/12.0))*(-wk5_B0(0,0,2) - 8*wk5_B0(0,0,-1) + 8*wk5_B0(0,0,1) + wk5_B0(0,0,-2))*invDelta2block0;

   d1_wk6_dz = ((1.0/12.0))*(-wk6_B0(0,0,2) - 8*wk6_B0(0,0,-1) + 8*wk6_B0(0,0,1) + wk6_B0(0,0,-2))*invDelta2block0;

   d1_wk7_dz = -(1.0/12.0)*(-wk7_B0(0,0,-2) - 8*wk7_B0(0,0,1) + 8*wk7_B0(0,0,-1) + wk7_B0(0,0,2))*invDelta2block0;

    Residual1_B0(0,0,0) = (D01_B0(0,0,0)*d1_mu_dx + D11_B0(0,0,0)*d1_mu_dy +
      D21_B0(0,0,0)*d1_mu_dz)*(D00_B0(0,0,0)*wk1_B0(0,0,0) + D01_B0(0,0,0)*wk0_B0(0,0,0) + D10_B0(0,0,0)*wk5_B0(0,0,0) +
      D11_B0(0,0,0)*wk4_B0(0,0,0) + D20_B0(0,0,0)*wk9_B0(0,0,0) + D21_B0(0,0,0)*wk8_B0(0,0,0))*invRe +
      (D02_B0(0,0,0)*d1_mu_dx + D12_B0(0,0,0)*d1_mu_dy + D22_B0(0,0,0)*d1_mu_dz)*(D00_B0(0,0,0)*wk2_B0(0,0,0) +
      D02_B0(0,0,0)*wk0_B0(0,0,0) + D10_B0(0,0,0)*wk6_B0(0,0,0) + D12_B0(0,0,0)*wk4_B0(0,0,0) +
      D20_B0(0,0,0)*wk10_B0(0,0,0) + D22_B0(0,0,0)*wk8_B0(0,0,0))*invRe +
      ((1.0/3.0))*(3*(D01_B0(0,0,0)*D01_B0(0,0,0))*d2_u0_dx + 3*(D02_B0(0,0,0)*D02_B0(0,0,0))*d2_u0_dx +
      3*(D11_B0(0,0,0)*D11_B0(0,0,0))*d2_u0_dy + 3*(D12_B0(0,0,0)*D12_B0(0,0,0))*d2_u0_dy +
      3*(D21_B0(0,0,0)*D21_B0(0,0,0))*d2_u0_dz + 3*(D22_B0(0,0,0)*D22_B0(0,0,0))*d2_u0_dz +
      4*(D00_B0(0,0,0)*D00_B0(0,0,0))*d2_u0_dx + 4*(D10_B0(0,0,0)*D10_B0(0,0,0))*d2_u0_dy +
      4*(D20_B0(0,0,0)*D20_B0(0,0,0))*d2_u0_dz + D00_B0(0,0,0)*D01_B0(0,0,0)*d2_u1_dx +
      D00_B0(0,0,0)*D02_B0(0,0,0)*d2_u2_dx + D00_B0(0,0,0)*D11_B0(0,0,0)*d1_wk1_dy +
      D00_B0(0,0,0)*D12_B0(0,0,0)*d1_wk2_dy + D00_B0(0,0,0)*D21_B0(0,0,0)*d1_wk1_dz +
      D00_B0(0,0,0)*D22_B0(0,0,0)*d1_wk2_dz + D01_B0(0,0,0)*D10_B0(0,0,0)*d1_wk1_dy +
      D01_B0(0,0,0)*D20_B0(0,0,0)*d1_wk1_dz + D02_B0(0,0,0)*D10_B0(0,0,0)*d1_wk2_dy +
      D02_B0(0,0,0)*D20_B0(0,0,0)*d1_wk2_dz + D10_B0(0,0,0)*D11_B0(0,0,0)*d2_u1_dy +
      D10_B0(0,0,0)*D12_B0(0,0,0)*d2_u2_dy + D10_B0(0,0,0)*D21_B0(0,0,0)*d1_wk5_dz +
      D10_B0(0,0,0)*D22_B0(0,0,0)*d1_wk6_dz + D11_B0(0,0,0)*D20_B0(0,0,0)*d1_wk5_dz +
      D12_B0(0,0,0)*D20_B0(0,0,0)*d1_wk6_dz + D20_B0(0,0,0)*D21_B0(0,0,0)*d2_u1_dz +
      D20_B0(0,0,0)*D22_B0(0,0,0)*d2_u2_dz - 2*D00_B0(0,0,0)*wk1_B0(0,0,0)*SD010_B0(0,0,0) -
      2*D00_B0(0,0,0)*wk2_B0(0,0,0)*SD020_B0(0,0,0) - 2*D00_B0(0,0,0)*wk5_B0(0,0,0)*SD110_B0(0,0,0) -
      2*D00_B0(0,0,0)*wk6_B0(0,0,0)*SD120_B0(0,0,0) - 2*D00_B0(0,0,0)*wk9_B0(0,0,0)*SD210_B0(0,0,0) -
      2*D00_B0(0,0,0)*wk10_B0(0,0,0)*SD220_B0(0,0,0) - 2*D10_B0(0,0,0)*wk1_B0(0,0,0)*SD011_B0(0,0,0) -
      2*D10_B0(0,0,0)*wk2_B0(0,0,0)*SD021_B0(0,0,0) - 2*D10_B0(0,0,0)*wk5_B0(0,0,0)*SD111_B0(0,0,0) -
      2*D10_B0(0,0,0)*wk6_B0(0,0,0)*SD121_B0(0,0,0) - 2*D10_B0(0,0,0)*wk9_B0(0,0,0)*SD211_B0(0,0,0) -
      2*D10_B0(0,0,0)*wk10_B0(0,0,0)*SD221_B0(0,0,0) - 2*D20_B0(0,0,0)*wk1_B0(0,0,0)*SD012_B0(0,0,0) -
      2*D20_B0(0,0,0)*wk2_B0(0,0,0)*SD022_B0(0,0,0) - 2*D20_B0(0,0,0)*wk5_B0(0,0,0)*SD112_B0(0,0,0) -
      2*D20_B0(0,0,0)*wk6_B0(0,0,0)*SD122_B0(0,0,0) - 2*D20_B0(0,0,0)*wk9_B0(0,0,0)*SD212_B0(0,0,0) -
      2*D20_B0(0,0,0)*wk10_B0(0,0,0)*SD222_B0(0,0,0) + 3*D01_B0(0,0,0)*wk0_B0(0,0,0)*SD010_B0(0,0,0) +
      3*D01_B0(0,0,0)*wk1_B0(0,0,0)*SD000_B0(0,0,0) + 3*D01_B0(0,0,0)*wk4_B0(0,0,0)*SD110_B0(0,0,0) +
      3*D01_B0(0,0,0)*wk5_B0(0,0,0)*SD100_B0(0,0,0) + 3*D01_B0(0,0,0)*wk8_B0(0,0,0)*SD210_B0(0,0,0) +
      3*D01_B0(0,0,0)*wk9_B0(0,0,0)*SD200_B0(0,0,0) + 3*D02_B0(0,0,0)*wk0_B0(0,0,0)*SD020_B0(0,0,0) +
      3*D02_B0(0,0,0)*wk2_B0(0,0,0)*SD000_B0(0,0,0) + 3*D02_B0(0,0,0)*wk4_B0(0,0,0)*SD120_B0(0,0,0) +
      3*D02_B0(0,0,0)*wk6_B0(0,0,0)*SD100_B0(0,0,0) + 3*D02_B0(0,0,0)*wk8_B0(0,0,0)*SD220_B0(0,0,0) +
      3*D02_B0(0,0,0)*wk10_B0(0,0,0)*SD200_B0(0,0,0) + 3*D11_B0(0,0,0)*wk0_B0(0,0,0)*SD011_B0(0,0,0) +
      3*D11_B0(0,0,0)*wk1_B0(0,0,0)*SD001_B0(0,0,0) + 3*D11_B0(0,0,0)*wk4_B0(0,0,0)*SD111_B0(0,0,0) +
      3*D11_B0(0,0,0)*wk5_B0(0,0,0)*SD101_B0(0,0,0) + 3*D11_B0(0,0,0)*wk8_B0(0,0,0)*SD211_B0(0,0,0) +
      3*D11_B0(0,0,0)*wk9_B0(0,0,0)*SD201_B0(0,0,0) + 3*D12_B0(0,0,0)*wk0_B0(0,0,0)*SD021_B0(0,0,0) +
      3*D12_B0(0,0,0)*wk2_B0(0,0,0)*SD001_B0(0,0,0) + 3*D12_B0(0,0,0)*wk4_B0(0,0,0)*SD121_B0(0,0,0) +
      3*D12_B0(0,0,0)*wk6_B0(0,0,0)*SD101_B0(0,0,0) + 3*D12_B0(0,0,0)*wk8_B0(0,0,0)*SD221_B0(0,0,0) +
      3*D12_B0(0,0,0)*wk10_B0(0,0,0)*SD201_B0(0,0,0) + 3*D21_B0(0,0,0)*wk0_B0(0,0,0)*SD012_B0(0,0,0) +
      3*D21_B0(0,0,0)*wk1_B0(0,0,0)*SD002_B0(0,0,0) + 3*D21_B0(0,0,0)*wk4_B0(0,0,0)*SD112_B0(0,0,0) +
      3*D21_B0(0,0,0)*wk5_B0(0,0,0)*SD102_B0(0,0,0) + 3*D21_B0(0,0,0)*wk8_B0(0,0,0)*SD212_B0(0,0,0) +
      3*D21_B0(0,0,0)*wk9_B0(0,0,0)*SD202_B0(0,0,0) + 3*D22_B0(0,0,0)*wk0_B0(0,0,0)*SD022_B0(0,0,0) +
      3*D22_B0(0,0,0)*wk2_B0(0,0,0)*SD002_B0(0,0,0) + 3*D22_B0(0,0,0)*wk4_B0(0,0,0)*SD122_B0(0,0,0) +
      3*D22_B0(0,0,0)*wk6_B0(0,0,0)*SD102_B0(0,0,0) + 3*D22_B0(0,0,0)*wk8_B0(0,0,0)*SD222_B0(0,0,0) +
      3*D22_B0(0,0,0)*wk10_B0(0,0,0)*SD202_B0(0,0,0) + 4*D00_B0(0,0,0)*wk0_B0(0,0,0)*SD000_B0(0,0,0) +
      4*D00_B0(0,0,0)*wk4_B0(0,0,0)*SD100_B0(0,0,0) + 4*D00_B0(0,0,0)*wk8_B0(0,0,0)*SD200_B0(0,0,0) +
      4*D10_B0(0,0,0)*wk0_B0(0,0,0)*SD001_B0(0,0,0) + 4*D10_B0(0,0,0)*wk4_B0(0,0,0)*SD101_B0(0,0,0) +
      4*D10_B0(0,0,0)*wk8_B0(0,0,0)*SD201_B0(0,0,0) + 4*D20_B0(0,0,0)*wk0_B0(0,0,0)*SD002_B0(0,0,0) +
      4*D20_B0(0,0,0)*wk4_B0(0,0,0)*SD102_B0(0,0,0) + 4*D20_B0(0,0,0)*wk8_B0(0,0,0)*SD202_B0(0,0,0) +
      6*D01_B0(0,0,0)*D11_B0(0,0,0)*d1_wk0_dy + 6*D01_B0(0,0,0)*D21_B0(0,0,0)*d1_wk0_dz +
      6*D02_B0(0,0,0)*D12_B0(0,0,0)*d1_wk0_dy + 6*D02_B0(0,0,0)*D22_B0(0,0,0)*d1_wk0_dz +
      6*D11_B0(0,0,0)*D21_B0(0,0,0)*d1_wk4_dz + 6*D12_B0(0,0,0)*D22_B0(0,0,0)*d1_wk4_dz +
      8*D00_B0(0,0,0)*D10_B0(0,0,0)*d1_wk0_dy + 8*D00_B0(0,0,0)*D20_B0(0,0,0)*d1_wk0_dz +
      8*D10_B0(0,0,0)*D20_B0(0,0,0)*d1_wk4_dz)*invRe*mu_B0(0,0,0) + ((2.0/3.0))*(D00_B0(0,0,0)*d1_mu_dx +
      D10_B0(0,0,0)*d1_mu_dy + D20_B0(0,0,0)*d1_mu_dz)*(-D01_B0(0,0,0)*wk1_B0(0,0,0) - D02_B0(0,0,0)*wk2_B0(0,0,0) -
      D11_B0(0,0,0)*wk5_B0(0,0,0) - D12_B0(0,0,0)*wk6_B0(0,0,0) - D21_B0(0,0,0)*wk9_B0(0,0,0) -
      D22_B0(0,0,0)*wk10_B0(0,0,0) + 2*D00_B0(0,0,0)*wk0_B0(0,0,0) + 2*D10_B0(0,0,0)*wk4_B0(0,0,0) +
      2*D20_B0(0,0,0)*wk8_B0(0,0,0))*invRe + Residual1_B0(0,0,0);

    Residual2_B0(0,0,0) = (D00_B0(0,0,0)*d1_mu_dx + D10_B0(0,0,0)*d1_mu_dy +
      D20_B0(0,0,0)*d1_mu_dz)*(D00_B0(0,0,0)*wk1_B0(0,0,0) + D01_B0(0,0,0)*wk0_B0(0,0,0) + D10_B0(0,0,0)*wk5_B0(0,0,0) +
      D11_B0(0,0,0)*wk4_B0(0,0,0) + D20_B0(0,0,0)*wk9_B0(0,0,0) + D21_B0(0,0,0)*wk8_B0(0,0,0))*invRe +
      (D02_B0(0,0,0)*d1_mu_dx + D12_B0(0,0,0)*d1_mu_dy + D22_B0(0,0,0)*d1_mu_dz)*(D01_B0(0,0,0)*wk2_B0(0,0,0) +
      D02_B0(0,0,0)*wk1_B0(0,0,0) + D11_B0(0,0,0)*wk6_B0(0,0,0) + D12_B0(0,0,0)*wk5_B0(0,0,0) +
      D21_B0(0,0,0)*wk10_B0(0,0,0) + D22_B0(0,0,0)*wk9_B0(0,0,0))*invRe - (2.0/3.0)*(D01_B0(0,0,0)*d1_mu_dx +
      D11_B0(0,0,0)*d1_mu_dy + D21_B0(0,0,0)*d1_mu_dz)*(D00_B0(0,0,0)*wk0_B0(0,0,0) + D02_B0(0,0,0)*wk2_B0(0,0,0) +
      D10_B0(0,0,0)*wk4_B0(0,0,0) + D12_B0(0,0,0)*wk6_B0(0,0,0) + D20_B0(0,0,0)*wk8_B0(0,0,0) +
      D22_B0(0,0,0)*wk10_B0(0,0,0) - 2*D01_B0(0,0,0)*wk1_B0(0,0,0) - 2*D11_B0(0,0,0)*wk5_B0(0,0,0) -
      2*D21_B0(0,0,0)*wk9_B0(0,0,0))*invRe + ((1.0/3.0))*(3*(D00_B0(0,0,0)*D00_B0(0,0,0))*d2_u1_dx +
      3*(D02_B0(0,0,0)*D02_B0(0,0,0))*d2_u1_dx + 3*(D10_B0(0,0,0)*D10_B0(0,0,0))*d2_u1_dy +
      3*(D12_B0(0,0,0)*D12_B0(0,0,0))*d2_u1_dy + 3*(D20_B0(0,0,0)*D20_B0(0,0,0))*d2_u1_dz +
      3*(D22_B0(0,0,0)*D22_B0(0,0,0))*d2_u1_dz + 4*(D01_B0(0,0,0)*D01_B0(0,0,0))*d2_u1_dx +
      4*(D11_B0(0,0,0)*D11_B0(0,0,0))*d2_u1_dy + 4*(D21_B0(0,0,0)*D21_B0(0,0,0))*d2_u1_dz +
      D00_B0(0,0,0)*D01_B0(0,0,0)*d2_u0_dx + D00_B0(0,0,0)*D11_B0(0,0,0)*d1_wk0_dy +
      D00_B0(0,0,0)*D21_B0(0,0,0)*d1_wk0_dz + D01_B0(0,0,0)*D02_B0(0,0,0)*d2_u2_dx +
      D01_B0(0,0,0)*D10_B0(0,0,0)*d1_wk0_dy + D01_B0(0,0,0)*D12_B0(0,0,0)*d1_wk2_dy +
      D01_B0(0,0,0)*D20_B0(0,0,0)*d1_wk0_dz + D01_B0(0,0,0)*D22_B0(0,0,0)*d1_wk2_dz +
      D02_B0(0,0,0)*D11_B0(0,0,0)*d1_wk2_dy + D02_B0(0,0,0)*D21_B0(0,0,0)*d1_wk2_dz +
      D10_B0(0,0,0)*D11_B0(0,0,0)*d2_u0_dy + D10_B0(0,0,0)*D21_B0(0,0,0)*d1_wk4_dz +
      D11_B0(0,0,0)*D12_B0(0,0,0)*d2_u2_dy + D11_B0(0,0,0)*D20_B0(0,0,0)*d1_wk4_dz +
      D11_B0(0,0,0)*D22_B0(0,0,0)*d1_wk6_dz + D12_B0(0,0,0)*D21_B0(0,0,0)*d1_wk6_dz +
      D20_B0(0,0,0)*D21_B0(0,0,0)*d2_u0_dz + D21_B0(0,0,0)*D22_B0(0,0,0)*d2_u2_dz -
      2*D01_B0(0,0,0)*wk0_B0(0,0,0)*SD000_B0(0,0,0) - 2*D01_B0(0,0,0)*wk2_B0(0,0,0)*SD020_B0(0,0,0) -
      2*D01_B0(0,0,0)*wk4_B0(0,0,0)*SD100_B0(0,0,0) - 2*D01_B0(0,0,0)*wk6_B0(0,0,0)*SD120_B0(0,0,0) -
      2*D01_B0(0,0,0)*wk8_B0(0,0,0)*SD200_B0(0,0,0) - 2*D01_B0(0,0,0)*wk10_B0(0,0,0)*SD220_B0(0,0,0) -
      2*D11_B0(0,0,0)*wk0_B0(0,0,0)*SD001_B0(0,0,0) - 2*D11_B0(0,0,0)*wk2_B0(0,0,0)*SD021_B0(0,0,0) -
      2*D11_B0(0,0,0)*wk4_B0(0,0,0)*SD101_B0(0,0,0) - 2*D11_B0(0,0,0)*wk6_B0(0,0,0)*SD121_B0(0,0,0) -
      2*D11_B0(0,0,0)*wk8_B0(0,0,0)*SD201_B0(0,0,0) - 2*D11_B0(0,0,0)*wk10_B0(0,0,0)*SD221_B0(0,0,0) -
      2*D21_B0(0,0,0)*wk0_B0(0,0,0)*SD002_B0(0,0,0) - 2*D21_B0(0,0,0)*wk2_B0(0,0,0)*SD022_B0(0,0,0) -
      2*D21_B0(0,0,0)*wk4_B0(0,0,0)*SD102_B0(0,0,0) - 2*D21_B0(0,0,0)*wk6_B0(0,0,0)*SD122_B0(0,0,0) -
      2*D21_B0(0,0,0)*wk8_B0(0,0,0)*SD202_B0(0,0,0) - 2*D21_B0(0,0,0)*wk10_B0(0,0,0)*SD222_B0(0,0,0) +
      3*D00_B0(0,0,0)*wk0_B0(0,0,0)*SD010_B0(0,0,0) + 3*D00_B0(0,0,0)*wk1_B0(0,0,0)*SD000_B0(0,0,0) +
      3*D00_B0(0,0,0)*wk4_B0(0,0,0)*SD110_B0(0,0,0) + 3*D00_B0(0,0,0)*wk5_B0(0,0,0)*SD100_B0(0,0,0) +
      3*D00_B0(0,0,0)*wk8_B0(0,0,0)*SD210_B0(0,0,0) + 3*D00_B0(0,0,0)*wk9_B0(0,0,0)*SD200_B0(0,0,0) +
      3*D02_B0(0,0,0)*wk1_B0(0,0,0)*SD020_B0(0,0,0) + 3*D02_B0(0,0,0)*wk2_B0(0,0,0)*SD010_B0(0,0,0) +
      3*D02_B0(0,0,0)*wk5_B0(0,0,0)*SD120_B0(0,0,0) + 3*D02_B0(0,0,0)*wk6_B0(0,0,0)*SD110_B0(0,0,0) +
      3*D02_B0(0,0,0)*wk9_B0(0,0,0)*SD220_B0(0,0,0) + 3*D02_B0(0,0,0)*wk10_B0(0,0,0)*SD210_B0(0,0,0) +
      3*D10_B0(0,0,0)*wk0_B0(0,0,0)*SD011_B0(0,0,0) + 3*D10_B0(0,0,0)*wk1_B0(0,0,0)*SD001_B0(0,0,0) +
      3*D10_B0(0,0,0)*wk4_B0(0,0,0)*SD111_B0(0,0,0) + 3*D10_B0(0,0,0)*wk5_B0(0,0,0)*SD101_B0(0,0,0) +
      3*D10_B0(0,0,0)*wk8_B0(0,0,0)*SD211_B0(0,0,0) + 3*D10_B0(0,0,0)*wk9_B0(0,0,0)*SD201_B0(0,0,0) +
      3*D12_B0(0,0,0)*wk1_B0(0,0,0)*SD021_B0(0,0,0) + 3*D12_B0(0,0,0)*wk2_B0(0,0,0)*SD011_B0(0,0,0) +
      3*D12_B0(0,0,0)*wk5_B0(0,0,0)*SD121_B0(0,0,0) + 3*D12_B0(0,0,0)*wk6_B0(0,0,0)*SD111_B0(0,0,0) +
      3*D12_B0(0,0,0)*wk9_B0(0,0,0)*SD221_B0(0,0,0) + 3*D12_B0(0,0,0)*wk10_B0(0,0,0)*SD211_B0(0,0,0) +
      3*D20_B0(0,0,0)*wk0_B0(0,0,0)*SD012_B0(0,0,0) + 3*D20_B0(0,0,0)*wk1_B0(0,0,0)*SD002_B0(0,0,0) +
      3*D20_B0(0,0,0)*wk4_B0(0,0,0)*SD112_B0(0,0,0) + 3*D20_B0(0,0,0)*wk5_B0(0,0,0)*SD102_B0(0,0,0) +
      3*D20_B0(0,0,0)*wk8_B0(0,0,0)*SD212_B0(0,0,0) + 3*D20_B0(0,0,0)*wk9_B0(0,0,0)*SD202_B0(0,0,0) +
      3*D22_B0(0,0,0)*wk1_B0(0,0,0)*SD022_B0(0,0,0) + 3*D22_B0(0,0,0)*wk2_B0(0,0,0)*SD012_B0(0,0,0) +
      3*D22_B0(0,0,0)*wk5_B0(0,0,0)*SD122_B0(0,0,0) + 3*D22_B0(0,0,0)*wk6_B0(0,0,0)*SD112_B0(0,0,0) +
      3*D22_B0(0,0,0)*wk9_B0(0,0,0)*SD222_B0(0,0,0) + 3*D22_B0(0,0,0)*wk10_B0(0,0,0)*SD212_B0(0,0,0) +
      4*D01_B0(0,0,0)*wk1_B0(0,0,0)*SD010_B0(0,0,0) + 4*D01_B0(0,0,0)*wk5_B0(0,0,0)*SD110_B0(0,0,0) +
      4*D01_B0(0,0,0)*wk9_B0(0,0,0)*SD210_B0(0,0,0) + 4*D11_B0(0,0,0)*wk1_B0(0,0,0)*SD011_B0(0,0,0) +
      4*D11_B0(0,0,0)*wk5_B0(0,0,0)*SD111_B0(0,0,0) + 4*D11_B0(0,0,0)*wk9_B0(0,0,0)*SD211_B0(0,0,0) +
      4*D21_B0(0,0,0)*wk1_B0(0,0,0)*SD012_B0(0,0,0) + 4*D21_B0(0,0,0)*wk5_B0(0,0,0)*SD112_B0(0,0,0) +
      4*D21_B0(0,0,0)*wk9_B0(0,0,0)*SD212_B0(0,0,0) + 6*D00_B0(0,0,0)*D10_B0(0,0,0)*d1_wk1_dy +
      6*D00_B0(0,0,0)*D20_B0(0,0,0)*d1_wk1_dz + 6*D02_B0(0,0,0)*D12_B0(0,0,0)*d1_wk1_dy +
      6*D02_B0(0,0,0)*D22_B0(0,0,0)*d1_wk1_dz + 6*D10_B0(0,0,0)*D20_B0(0,0,0)*d1_wk5_dz +
      6*D12_B0(0,0,0)*D22_B0(0,0,0)*d1_wk5_dz + 8*D01_B0(0,0,0)*D11_B0(0,0,0)*d1_wk1_dy +
      8*D01_B0(0,0,0)*D21_B0(0,0,0)*d1_wk1_dz + 8*D11_B0(0,0,0)*D21_B0(0,0,0)*d1_wk5_dz)*invRe*mu_B0(0,0,0) +
      Residual2_B0(0,0,0);

    Residual3_B0(0,0,0) = (D00_B0(0,0,0)*d1_mu_dx + D10_B0(0,0,0)*d1_mu_dy +
      D20_B0(0,0,0)*d1_mu_dz)*(D00_B0(0,0,0)*wk2_B0(0,0,0) + D02_B0(0,0,0)*wk0_B0(0,0,0) + D10_B0(0,0,0)*wk6_B0(0,0,0) +
      D12_B0(0,0,0)*wk4_B0(0,0,0) + D20_B0(0,0,0)*wk10_B0(0,0,0) + D22_B0(0,0,0)*wk8_B0(0,0,0))*invRe +
      (D01_B0(0,0,0)*d1_mu_dx + D11_B0(0,0,0)*d1_mu_dy + D21_B0(0,0,0)*d1_mu_dz)*(D01_B0(0,0,0)*wk2_B0(0,0,0) +
      D02_B0(0,0,0)*wk1_B0(0,0,0) + D11_B0(0,0,0)*wk6_B0(0,0,0) + D12_B0(0,0,0)*wk5_B0(0,0,0) +
      D21_B0(0,0,0)*wk10_B0(0,0,0) + D22_B0(0,0,0)*wk9_B0(0,0,0))*invRe - (2.0/3.0)*(D02_B0(0,0,0)*d1_mu_dx +
      D12_B0(0,0,0)*d1_mu_dy + D22_B0(0,0,0)*d1_mu_dz)*(D00_B0(0,0,0)*wk0_B0(0,0,0) + D01_B0(0,0,0)*wk1_B0(0,0,0) +
      D10_B0(0,0,0)*wk4_B0(0,0,0) + D11_B0(0,0,0)*wk5_B0(0,0,0) + D20_B0(0,0,0)*wk8_B0(0,0,0) +
      D21_B0(0,0,0)*wk9_B0(0,0,0) - 2*D02_B0(0,0,0)*wk2_B0(0,0,0) - 2*D12_B0(0,0,0)*wk6_B0(0,0,0) -
      2*D22_B0(0,0,0)*wk10_B0(0,0,0))*invRe + ((1.0/3.0))*(3*(D00_B0(0,0,0)*D00_B0(0,0,0))*d2_u2_dx +
      3*(D01_B0(0,0,0)*D01_B0(0,0,0))*d2_u2_dx + 3*(D10_B0(0,0,0)*D10_B0(0,0,0))*d2_u2_dy +
      3*(D11_B0(0,0,0)*D11_B0(0,0,0))*d2_u2_dy + 3*(D20_B0(0,0,0)*D20_B0(0,0,0))*d2_u2_dz +
      3*(D21_B0(0,0,0)*D21_B0(0,0,0))*d2_u2_dz + 4*(D02_B0(0,0,0)*D02_B0(0,0,0))*d2_u2_dx +
      4*(D12_B0(0,0,0)*D12_B0(0,0,0))*d2_u2_dy + 4*(D22_B0(0,0,0)*D22_B0(0,0,0))*d2_u2_dz +
      D00_B0(0,0,0)*D02_B0(0,0,0)*d2_u0_dx + D00_B0(0,0,0)*D12_B0(0,0,0)*d1_wk0_dy +
      D00_B0(0,0,0)*D22_B0(0,0,0)*d1_wk0_dz + D01_B0(0,0,0)*D02_B0(0,0,0)*d2_u1_dx +
      D01_B0(0,0,0)*D12_B0(0,0,0)*d1_wk1_dy + D01_B0(0,0,0)*D22_B0(0,0,0)*d1_wk1_dz +
      D02_B0(0,0,0)*D10_B0(0,0,0)*d1_wk0_dy + D02_B0(0,0,0)*D11_B0(0,0,0)*d1_wk1_dy +
      D02_B0(0,0,0)*D20_B0(0,0,0)*d1_wk0_dz + D02_B0(0,0,0)*D21_B0(0,0,0)*d1_wk1_dz +
      D10_B0(0,0,0)*D12_B0(0,0,0)*d2_u0_dy + D10_B0(0,0,0)*D22_B0(0,0,0)*d1_wk4_dz +
      D11_B0(0,0,0)*D12_B0(0,0,0)*d2_u1_dy + D11_B0(0,0,0)*D22_B0(0,0,0)*d1_wk5_dz +
      D12_B0(0,0,0)*D20_B0(0,0,0)*d1_wk4_dz + D12_B0(0,0,0)*D21_B0(0,0,0)*d1_wk5_dz +
      D20_B0(0,0,0)*D22_B0(0,0,0)*d2_u0_dz + D21_B0(0,0,0)*D22_B0(0,0,0)*d2_u1_dz -
      2*D02_B0(0,0,0)*wk0_B0(0,0,0)*SD000_B0(0,0,0) - 2*D02_B0(0,0,0)*wk1_B0(0,0,0)*SD010_B0(0,0,0) -
      2*D02_B0(0,0,0)*wk4_B0(0,0,0)*SD100_B0(0,0,0) - 2*D02_B0(0,0,0)*wk5_B0(0,0,0)*SD110_B0(0,0,0) -
      2*D02_B0(0,0,0)*wk8_B0(0,0,0)*SD200_B0(0,0,0) - 2*D02_B0(0,0,0)*wk9_B0(0,0,0)*SD210_B0(0,0,0) -
      2*D12_B0(0,0,0)*wk0_B0(0,0,0)*SD001_B0(0,0,0) - 2*D12_B0(0,0,0)*wk1_B0(0,0,0)*SD011_B0(0,0,0) -
      2*D12_B0(0,0,0)*wk4_B0(0,0,0)*SD101_B0(0,0,0) - 2*D12_B0(0,0,0)*wk5_B0(0,0,0)*SD111_B0(0,0,0) -
      2*D12_B0(0,0,0)*wk8_B0(0,0,0)*SD201_B0(0,0,0) - 2*D12_B0(0,0,0)*wk9_B0(0,0,0)*SD211_B0(0,0,0) -
      2*D22_B0(0,0,0)*wk0_B0(0,0,0)*SD002_B0(0,0,0) - 2*D22_B0(0,0,0)*wk1_B0(0,0,0)*SD012_B0(0,0,0) -
      2*D22_B0(0,0,0)*wk4_B0(0,0,0)*SD102_B0(0,0,0) - 2*D22_B0(0,0,0)*wk5_B0(0,0,0)*SD112_B0(0,0,0) -
      2*D22_B0(0,0,0)*wk8_B0(0,0,0)*SD202_B0(0,0,0) - 2*D22_B0(0,0,0)*wk9_B0(0,0,0)*SD212_B0(0,0,0) +
      3*D00_B0(0,0,0)*wk0_B0(0,0,0)*SD020_B0(0,0,0) + 3*D00_B0(0,0,0)*wk2_B0(0,0,0)*SD000_B0(0,0,0) +
      3*D00_B0(0,0,0)*wk4_B0(0,0,0)*SD120_B0(0,0,0) + 3*D00_B0(0,0,0)*wk6_B0(0,0,0)*SD100_B0(0,0,0) +
      3*D00_B0(0,0,0)*wk8_B0(0,0,0)*SD220_B0(0,0,0) + 3*D00_B0(0,0,0)*wk10_B0(0,0,0)*SD200_B0(0,0,0) +
      3*D01_B0(0,0,0)*wk1_B0(0,0,0)*SD020_B0(0,0,0) + 3*D01_B0(0,0,0)*wk2_B0(0,0,0)*SD010_B0(0,0,0) +
      3*D01_B0(0,0,0)*wk5_B0(0,0,0)*SD120_B0(0,0,0) + 3*D01_B0(0,0,0)*wk6_B0(0,0,0)*SD110_B0(0,0,0) +
      3*D01_B0(0,0,0)*wk9_B0(0,0,0)*SD220_B0(0,0,0) + 3*D01_B0(0,0,0)*wk10_B0(0,0,0)*SD210_B0(0,0,0) +
      3*D10_B0(0,0,0)*wk0_B0(0,0,0)*SD021_B0(0,0,0) + 3*D10_B0(0,0,0)*wk2_B0(0,0,0)*SD001_B0(0,0,0) +
      3*D10_B0(0,0,0)*wk4_B0(0,0,0)*SD121_B0(0,0,0) + 3*D10_B0(0,0,0)*wk6_B0(0,0,0)*SD101_B0(0,0,0) +
      3*D10_B0(0,0,0)*wk8_B0(0,0,0)*SD221_B0(0,0,0) + 3*D10_B0(0,0,0)*wk10_B0(0,0,0)*SD201_B0(0,0,0) +
      3*D11_B0(0,0,0)*wk1_B0(0,0,0)*SD021_B0(0,0,0) + 3*D11_B0(0,0,0)*wk2_B0(0,0,0)*SD011_B0(0,0,0) +
      3*D11_B0(0,0,0)*wk5_B0(0,0,0)*SD121_B0(0,0,0) + 3*D11_B0(0,0,0)*wk6_B0(0,0,0)*SD111_B0(0,0,0) +
      3*D11_B0(0,0,0)*wk9_B0(0,0,0)*SD221_B0(0,0,0) + 3*D11_B0(0,0,0)*wk10_B0(0,0,0)*SD211_B0(0,0,0) +
      3*D20_B0(0,0,0)*wk0_B0(0,0,0)*SD022_B0(0,0,0) + 3*D20_B0(0,0,0)*wk2_B0(0,0,0)*SD002_B0(0,0,0) +
      3*D20_B0(0,0,0)*wk4_B0(0,0,0)*SD122_B0(0,0,0) + 3*D20_B0(0,0,0)*wk6_B0(0,0,0)*SD102_B0(0,0,0) +
      3*D20_B0(0,0,0)*wk8_B0(0,0,0)*SD222_B0(0,0,0) + 3*D20_B0(0,0,0)*wk10_B0(0,0,0)*SD202_B0(0,0,0) +
      3*D21_B0(0,0,0)*wk1_B0(0,0,0)*SD022_B0(0,0,0) + 3*D21_B0(0,0,0)*wk2_B0(0,0,0)*SD012_B0(0,0,0) +
      3*D21_B0(0,0,0)*wk5_B0(0,0,0)*SD122_B0(0,0,0) + 3*D21_B0(0,0,0)*wk6_B0(0,0,0)*SD112_B0(0,0,0) +
      3*D21_B0(0,0,0)*wk9_B0(0,0,0)*SD222_B0(0,0,0) + 3*D21_B0(0,0,0)*wk10_B0(0,0,0)*SD212_B0(0,0,0) +
      4*D02_B0(0,0,0)*wk2_B0(0,0,0)*SD020_B0(0,0,0) + 4*D02_B0(0,0,0)*wk6_B0(0,0,0)*SD120_B0(0,0,0) +
      4*D02_B0(0,0,0)*wk10_B0(0,0,0)*SD220_B0(0,0,0) + 4*D12_B0(0,0,0)*wk2_B0(0,0,0)*SD021_B0(0,0,0) +
      4*D12_B0(0,0,0)*wk6_B0(0,0,0)*SD121_B0(0,0,0) + 4*D12_B0(0,0,0)*wk10_B0(0,0,0)*SD221_B0(0,0,0) +
      4*D22_B0(0,0,0)*wk2_B0(0,0,0)*SD022_B0(0,0,0) + 4*D22_B0(0,0,0)*wk6_B0(0,0,0)*SD122_B0(0,0,0) +
      4*D22_B0(0,0,0)*wk10_B0(0,0,0)*SD222_B0(0,0,0) + 6*D00_B0(0,0,0)*D10_B0(0,0,0)*d1_wk2_dy +
      6*D00_B0(0,0,0)*D20_B0(0,0,0)*d1_wk2_dz + 6*D01_B0(0,0,0)*D11_B0(0,0,0)*d1_wk2_dy +
      6*D01_B0(0,0,0)*D21_B0(0,0,0)*d1_wk2_dz + 6*D10_B0(0,0,0)*D20_B0(0,0,0)*d1_wk6_dz +
      6*D11_B0(0,0,0)*D21_B0(0,0,0)*d1_wk6_dz + 8*D02_B0(0,0,0)*D12_B0(0,0,0)*d1_wk2_dy +
      8*D02_B0(0,0,0)*D22_B0(0,0,0)*d1_wk2_dz + 8*D12_B0(0,0,0)*D22_B0(0,0,0)*d1_wk6_dz)*invRe*mu_B0(0,0,0) +
      Residual3_B0(0,0,0);

    Residual4_B0(0,0,0) = (D00_B0(0,0,0)*wk1_B0(0,0,0) + D10_B0(0,0,0)*wk5_B0(0,0,0) +
      D20_B0(0,0,0)*wk9_B0(0,0,0))*(D00_B0(0,0,0)*wk1_B0(0,0,0) + D01_B0(0,0,0)*wk0_B0(0,0,0) +
      D10_B0(0,0,0)*wk5_B0(0,0,0) + D11_B0(0,0,0)*wk4_B0(0,0,0) + D20_B0(0,0,0)*wk9_B0(0,0,0) +
      D21_B0(0,0,0)*wk8_B0(0,0,0))*invRe*mu_B0(0,0,0) + (D00_B0(0,0,0)*wk2_B0(0,0,0) + D10_B0(0,0,0)*wk6_B0(0,0,0) +
      D20_B0(0,0,0)*wk10_B0(0,0,0))*(D00_B0(0,0,0)*wk2_B0(0,0,0) + D02_B0(0,0,0)*wk0_B0(0,0,0) +
      D10_B0(0,0,0)*wk6_B0(0,0,0) + D12_B0(0,0,0)*wk4_B0(0,0,0) + D20_B0(0,0,0)*wk10_B0(0,0,0) +
      D22_B0(0,0,0)*wk8_B0(0,0,0))*invRe*mu_B0(0,0,0) + (D00_B0(0,0,0)*d1_mu_dx + D10_B0(0,0,0)*d1_mu_dy +
      D20_B0(0,0,0)*d1_mu_dz)*(D00_B0(0,0,0)*wk1_B0(0,0,0) + D01_B0(0,0,0)*wk0_B0(0,0,0) + D10_B0(0,0,0)*wk5_B0(0,0,0) +
      D11_B0(0,0,0)*wk4_B0(0,0,0) + D20_B0(0,0,0)*wk9_B0(0,0,0) + D21_B0(0,0,0)*wk8_B0(0,0,0))*invRe*u1_B0(0,0,0) +
      (D00_B0(0,0,0)*d1_mu_dx + D10_B0(0,0,0)*d1_mu_dy + D20_B0(0,0,0)*d1_mu_dz)*(D00_B0(0,0,0)*wk2_B0(0,0,0) +
      D02_B0(0,0,0)*wk0_B0(0,0,0) + D10_B0(0,0,0)*wk6_B0(0,0,0) + D12_B0(0,0,0)*wk4_B0(0,0,0) +
      D20_B0(0,0,0)*wk10_B0(0,0,0) + D22_B0(0,0,0)*wk8_B0(0,0,0))*invRe*u2_B0(0,0,0) + (D01_B0(0,0,0)*wk0_B0(0,0,0) +
      D11_B0(0,0,0)*wk4_B0(0,0,0) + D21_B0(0,0,0)*wk8_B0(0,0,0))*(D00_B0(0,0,0)*wk1_B0(0,0,0) +
      D01_B0(0,0,0)*wk0_B0(0,0,0) + D10_B0(0,0,0)*wk5_B0(0,0,0) + D11_B0(0,0,0)*wk4_B0(0,0,0) +
      D20_B0(0,0,0)*wk9_B0(0,0,0) + D21_B0(0,0,0)*wk8_B0(0,0,0))*invRe*mu_B0(0,0,0) + (D01_B0(0,0,0)*wk2_B0(0,0,0) +
      D11_B0(0,0,0)*wk6_B0(0,0,0) + D21_B0(0,0,0)*wk10_B0(0,0,0))*(D01_B0(0,0,0)*wk2_B0(0,0,0) +
      D02_B0(0,0,0)*wk1_B0(0,0,0) + D11_B0(0,0,0)*wk6_B0(0,0,0) + D12_B0(0,0,0)*wk5_B0(0,0,0) +
      D21_B0(0,0,0)*wk10_B0(0,0,0) + D22_B0(0,0,0)*wk9_B0(0,0,0))*invRe*mu_B0(0,0,0) + (D01_B0(0,0,0)*d1_mu_dx +
      D11_B0(0,0,0)*d1_mu_dy + D21_B0(0,0,0)*d1_mu_dz)*(D00_B0(0,0,0)*wk1_B0(0,0,0) + D01_B0(0,0,0)*wk0_B0(0,0,0) +
      D10_B0(0,0,0)*wk5_B0(0,0,0) + D11_B0(0,0,0)*wk4_B0(0,0,0) + D20_B0(0,0,0)*wk9_B0(0,0,0) +
      D21_B0(0,0,0)*wk8_B0(0,0,0))*invRe*u0_B0(0,0,0) + (D01_B0(0,0,0)*d1_mu_dx + D11_B0(0,0,0)*d1_mu_dy +
      D21_B0(0,0,0)*d1_mu_dz)*(D01_B0(0,0,0)*wk2_B0(0,0,0) + D02_B0(0,0,0)*wk1_B0(0,0,0) + D11_B0(0,0,0)*wk6_B0(0,0,0) +
      D12_B0(0,0,0)*wk5_B0(0,0,0) + D21_B0(0,0,0)*wk10_B0(0,0,0) + D22_B0(0,0,0)*wk9_B0(0,0,0))*invRe*u2_B0(0,0,0) +
      (D02_B0(0,0,0)*wk0_B0(0,0,0) + D12_B0(0,0,0)*wk4_B0(0,0,0) +
      D22_B0(0,0,0)*wk8_B0(0,0,0))*(D00_B0(0,0,0)*wk2_B0(0,0,0) + D02_B0(0,0,0)*wk0_B0(0,0,0) +
      D10_B0(0,0,0)*wk6_B0(0,0,0) + D12_B0(0,0,0)*wk4_B0(0,0,0) + D20_B0(0,0,0)*wk10_B0(0,0,0) +
      D22_B0(0,0,0)*wk8_B0(0,0,0))*invRe*mu_B0(0,0,0) + (D02_B0(0,0,0)*wk1_B0(0,0,0) + D12_B0(0,0,0)*wk5_B0(0,0,0) +
      D22_B0(0,0,0)*wk9_B0(0,0,0))*(D01_B0(0,0,0)*wk2_B0(0,0,0) + D02_B0(0,0,0)*wk1_B0(0,0,0) +
      D11_B0(0,0,0)*wk6_B0(0,0,0) + D12_B0(0,0,0)*wk5_B0(0,0,0) + D21_B0(0,0,0)*wk10_B0(0,0,0) +
      D22_B0(0,0,0)*wk9_B0(0,0,0))*invRe*mu_B0(0,0,0) + (D02_B0(0,0,0)*d1_mu_dx + D12_B0(0,0,0)*d1_mu_dy +
      D22_B0(0,0,0)*d1_mu_dz)*(D00_B0(0,0,0)*wk2_B0(0,0,0) + D02_B0(0,0,0)*wk0_B0(0,0,0) + D10_B0(0,0,0)*wk6_B0(0,0,0) +
      D12_B0(0,0,0)*wk4_B0(0,0,0) + D20_B0(0,0,0)*wk10_B0(0,0,0) + D22_B0(0,0,0)*wk8_B0(0,0,0))*invRe*u0_B0(0,0,0) +
      (D02_B0(0,0,0)*d1_mu_dx + D12_B0(0,0,0)*d1_mu_dy + D22_B0(0,0,0)*d1_mu_dz)*(D01_B0(0,0,0)*wk2_B0(0,0,0) +
      D02_B0(0,0,0)*wk1_B0(0,0,0) + D11_B0(0,0,0)*wk6_B0(0,0,0) + D12_B0(0,0,0)*wk5_B0(0,0,0) +
      D21_B0(0,0,0)*wk10_B0(0,0,0) + D22_B0(0,0,0)*wk9_B0(0,0,0))*invRe*u1_B0(0,0,0) -
      (2.0/3.0)*(D01_B0(0,0,0)*wk1_B0(0,0,0) + D11_B0(0,0,0)*wk5_B0(0,0,0) +
      D21_B0(0,0,0)*wk9_B0(0,0,0))*(D00_B0(0,0,0)*wk0_B0(0,0,0) + D02_B0(0,0,0)*wk2_B0(0,0,0) +
      D10_B0(0,0,0)*wk4_B0(0,0,0) + D12_B0(0,0,0)*wk6_B0(0,0,0) + D20_B0(0,0,0)*wk8_B0(0,0,0) +
      D22_B0(0,0,0)*wk10_B0(0,0,0) - 2*D01_B0(0,0,0)*wk1_B0(0,0,0) - 2*D11_B0(0,0,0)*wk5_B0(0,0,0) -
      2*D21_B0(0,0,0)*wk9_B0(0,0,0))*invRe*mu_B0(0,0,0) - (2.0/3.0)*(D01_B0(0,0,0)*d1_mu_dx + D11_B0(0,0,0)*d1_mu_dy +
      D21_B0(0,0,0)*d1_mu_dz)*(D00_B0(0,0,0)*wk0_B0(0,0,0) + D02_B0(0,0,0)*wk2_B0(0,0,0) + D10_B0(0,0,0)*wk4_B0(0,0,0) +
      D12_B0(0,0,0)*wk6_B0(0,0,0) + D20_B0(0,0,0)*wk8_B0(0,0,0) + D22_B0(0,0,0)*wk10_B0(0,0,0) -
      2*D01_B0(0,0,0)*wk1_B0(0,0,0) - 2*D11_B0(0,0,0)*wk5_B0(0,0,0) - 2*D21_B0(0,0,0)*wk9_B0(0,0,0))*invRe*u1_B0(0,0,0)
      - (2.0/3.0)*(D02_B0(0,0,0)*wk2_B0(0,0,0) + D12_B0(0,0,0)*wk6_B0(0,0,0) +
      D22_B0(0,0,0)*wk10_B0(0,0,0))*(D00_B0(0,0,0)*wk0_B0(0,0,0) + D01_B0(0,0,0)*wk1_B0(0,0,0) +
      D10_B0(0,0,0)*wk4_B0(0,0,0) + D11_B0(0,0,0)*wk5_B0(0,0,0) + D20_B0(0,0,0)*wk8_B0(0,0,0) +
      D21_B0(0,0,0)*wk9_B0(0,0,0) - 2*D02_B0(0,0,0)*wk2_B0(0,0,0) - 2*D12_B0(0,0,0)*wk6_B0(0,0,0) -
      2*D22_B0(0,0,0)*wk10_B0(0,0,0))*invRe*mu_B0(0,0,0) - (2.0/3.0)*(D02_B0(0,0,0)*d1_mu_dx + D12_B0(0,0,0)*d1_mu_dy +
      D22_B0(0,0,0)*d1_mu_dz)*(D00_B0(0,0,0)*wk0_B0(0,0,0) + D01_B0(0,0,0)*wk1_B0(0,0,0) + D10_B0(0,0,0)*wk4_B0(0,0,0) +
      D11_B0(0,0,0)*wk5_B0(0,0,0) + D20_B0(0,0,0)*wk8_B0(0,0,0) + D21_B0(0,0,0)*wk9_B0(0,0,0) -
      2*D02_B0(0,0,0)*wk2_B0(0,0,0) - 2*D12_B0(0,0,0)*wk6_B0(0,0,0) - 2*D22_B0(0,0,0)*wk10_B0(0,0,0))*invRe*u2_B0(0,0,0)
      + ((1.0/3.0))*(3*(D00_B0(0,0,0)*D00_B0(0,0,0))*d2_u1_dx + 3*(D02_B0(0,0,0)*D02_B0(0,0,0))*d2_u1_dx +
      3*(D10_B0(0,0,0)*D10_B0(0,0,0))*d2_u1_dy + 3*(D12_B0(0,0,0)*D12_B0(0,0,0))*d2_u1_dy +
      3*(D20_B0(0,0,0)*D20_B0(0,0,0))*d2_u1_dz + 3*(D22_B0(0,0,0)*D22_B0(0,0,0))*d2_u1_dz +
      4*(D01_B0(0,0,0)*D01_B0(0,0,0))*d2_u1_dx + 4*(D11_B0(0,0,0)*D11_B0(0,0,0))*d2_u1_dy +
      4*(D21_B0(0,0,0)*D21_B0(0,0,0))*d2_u1_dz + D00_B0(0,0,0)*D01_B0(0,0,0)*d2_u0_dx +
      D00_B0(0,0,0)*D11_B0(0,0,0)*d1_wk0_dy + D00_B0(0,0,0)*D21_B0(0,0,0)*d1_wk0_dz +
      D01_B0(0,0,0)*D02_B0(0,0,0)*d2_u2_dx + D01_B0(0,0,0)*D10_B0(0,0,0)*d1_wk0_dy +
      D01_B0(0,0,0)*D12_B0(0,0,0)*d1_wk2_dy + D01_B0(0,0,0)*D20_B0(0,0,0)*d1_wk0_dz +
      D01_B0(0,0,0)*D22_B0(0,0,0)*d1_wk2_dz + D02_B0(0,0,0)*D11_B0(0,0,0)*d1_wk2_dy +
      D02_B0(0,0,0)*D21_B0(0,0,0)*d1_wk2_dz + D10_B0(0,0,0)*D11_B0(0,0,0)*d2_u0_dy +
      D10_B0(0,0,0)*D21_B0(0,0,0)*d1_wk4_dz + D11_B0(0,0,0)*D12_B0(0,0,0)*d2_u2_dy +
      D11_B0(0,0,0)*D20_B0(0,0,0)*d1_wk4_dz + D11_B0(0,0,0)*D22_B0(0,0,0)*d1_wk6_dz +
      D12_B0(0,0,0)*D21_B0(0,0,0)*d1_wk6_dz + D20_B0(0,0,0)*D21_B0(0,0,0)*d2_u0_dz +
      D21_B0(0,0,0)*D22_B0(0,0,0)*d2_u2_dz - 2*D01_B0(0,0,0)*wk0_B0(0,0,0)*SD000_B0(0,0,0) -
      2*D01_B0(0,0,0)*wk2_B0(0,0,0)*SD020_B0(0,0,0) - 2*D01_B0(0,0,0)*wk4_B0(0,0,0)*SD100_B0(0,0,0) -
      2*D01_B0(0,0,0)*wk6_B0(0,0,0)*SD120_B0(0,0,0) - 2*D01_B0(0,0,0)*wk8_B0(0,0,0)*SD200_B0(0,0,0) -
      2*D01_B0(0,0,0)*wk10_B0(0,0,0)*SD220_B0(0,0,0) - 2*D11_B0(0,0,0)*wk0_B0(0,0,0)*SD001_B0(0,0,0) -
      2*D11_B0(0,0,0)*wk2_B0(0,0,0)*SD021_B0(0,0,0) - 2*D11_B0(0,0,0)*wk4_B0(0,0,0)*SD101_B0(0,0,0) -
      2*D11_B0(0,0,0)*wk6_B0(0,0,0)*SD121_B0(0,0,0) - 2*D11_B0(0,0,0)*wk8_B0(0,0,0)*SD201_B0(0,0,0) -
      2*D11_B0(0,0,0)*wk10_B0(0,0,0)*SD221_B0(0,0,0) - 2*D21_B0(0,0,0)*wk0_B0(0,0,0)*SD002_B0(0,0,0) -
      2*D21_B0(0,0,0)*wk2_B0(0,0,0)*SD022_B0(0,0,0) - 2*D21_B0(0,0,0)*wk4_B0(0,0,0)*SD102_B0(0,0,0) -
      2*D21_B0(0,0,0)*wk6_B0(0,0,0)*SD122_B0(0,0,0) - 2*D21_B0(0,0,0)*wk8_B0(0,0,0)*SD202_B0(0,0,0) -
      2*D21_B0(0,0,0)*wk10_B0(0,0,0)*SD222_B0(0,0,0) + 3*D00_B0(0,0,0)*wk0_B0(0,0,0)*SD010_B0(0,0,0) +
      3*D00_B0(0,0,0)*wk1_B0(0,0,0)*SD000_B0(0,0,0) + 3*D00_B0(0,0,0)*wk4_B0(0,0,0)*SD110_B0(0,0,0) +
      3*D00_B0(0,0,0)*wk5_B0(0,0,0)*SD100_B0(0,0,0) + 3*D00_B0(0,0,0)*wk8_B0(0,0,0)*SD210_B0(0,0,0) +
      3*D00_B0(0,0,0)*wk9_B0(0,0,0)*SD200_B0(0,0,0) + 3*D02_B0(0,0,0)*wk1_B0(0,0,0)*SD020_B0(0,0,0) +
      3*D02_B0(0,0,0)*wk2_B0(0,0,0)*SD010_B0(0,0,0) + 3*D02_B0(0,0,0)*wk5_B0(0,0,0)*SD120_B0(0,0,0) +
      3*D02_B0(0,0,0)*wk6_B0(0,0,0)*SD110_B0(0,0,0) + 3*D02_B0(0,0,0)*wk9_B0(0,0,0)*SD220_B0(0,0,0) +
      3*D02_B0(0,0,0)*wk10_B0(0,0,0)*SD210_B0(0,0,0) + 3*D10_B0(0,0,0)*wk0_B0(0,0,0)*SD011_B0(0,0,0) +
      3*D10_B0(0,0,0)*wk1_B0(0,0,0)*SD001_B0(0,0,0) + 3*D10_B0(0,0,0)*wk4_B0(0,0,0)*SD111_B0(0,0,0) +
      3*D10_B0(0,0,0)*wk5_B0(0,0,0)*SD101_B0(0,0,0) + 3*D10_B0(0,0,0)*wk8_B0(0,0,0)*SD211_B0(0,0,0) +
      3*D10_B0(0,0,0)*wk9_B0(0,0,0)*SD201_B0(0,0,0) + 3*D12_B0(0,0,0)*wk1_B0(0,0,0)*SD021_B0(0,0,0) +
      3*D12_B0(0,0,0)*wk2_B0(0,0,0)*SD011_B0(0,0,0) + 3*D12_B0(0,0,0)*wk5_B0(0,0,0)*SD121_B0(0,0,0) +
      3*D12_B0(0,0,0)*wk6_B0(0,0,0)*SD111_B0(0,0,0) + 3*D12_B0(0,0,0)*wk9_B0(0,0,0)*SD221_B0(0,0,0) +
      3*D12_B0(0,0,0)*wk10_B0(0,0,0)*SD211_B0(0,0,0) + 3*D20_B0(0,0,0)*wk0_B0(0,0,0)*SD012_B0(0,0,0) +
      3*D20_B0(0,0,0)*wk1_B0(0,0,0)*SD002_B0(0,0,0) + 3*D20_B0(0,0,0)*wk4_B0(0,0,0)*SD112_B0(0,0,0) +
      3*D20_B0(0,0,0)*wk5_B0(0,0,0)*SD102_B0(0,0,0) + 3*D20_B0(0,0,0)*wk8_B0(0,0,0)*SD212_B0(0,0,0) +
      3*D20_B0(0,0,0)*wk9_B0(0,0,0)*SD202_B0(0,0,0) + 3*D22_B0(0,0,0)*wk1_B0(0,0,0)*SD022_B0(0,0,0) +
      3*D22_B0(0,0,0)*wk2_B0(0,0,0)*SD012_B0(0,0,0) + 3*D22_B0(0,0,0)*wk5_B0(0,0,0)*SD122_B0(0,0,0) +
      3*D22_B0(0,0,0)*wk6_B0(0,0,0)*SD112_B0(0,0,0) + 3*D22_B0(0,0,0)*wk9_B0(0,0,0)*SD222_B0(0,0,0) +
      3*D22_B0(0,0,0)*wk10_B0(0,0,0)*SD212_B0(0,0,0) + 4*D01_B0(0,0,0)*wk1_B0(0,0,0)*SD010_B0(0,0,0) +
      4*D01_B0(0,0,0)*wk5_B0(0,0,0)*SD110_B0(0,0,0) + 4*D01_B0(0,0,0)*wk9_B0(0,0,0)*SD210_B0(0,0,0) +
      4*D11_B0(0,0,0)*wk1_B0(0,0,0)*SD011_B0(0,0,0) + 4*D11_B0(0,0,0)*wk5_B0(0,0,0)*SD111_B0(0,0,0) +
      4*D11_B0(0,0,0)*wk9_B0(0,0,0)*SD211_B0(0,0,0) + 4*D21_B0(0,0,0)*wk1_B0(0,0,0)*SD012_B0(0,0,0) +
      4*D21_B0(0,0,0)*wk5_B0(0,0,0)*SD112_B0(0,0,0) + 4*D21_B0(0,0,0)*wk9_B0(0,0,0)*SD212_B0(0,0,0) +
      6*D00_B0(0,0,0)*D10_B0(0,0,0)*d1_wk1_dy + 6*D00_B0(0,0,0)*D20_B0(0,0,0)*d1_wk1_dz +
      6*D02_B0(0,0,0)*D12_B0(0,0,0)*d1_wk1_dy + 6*D02_B0(0,0,0)*D22_B0(0,0,0)*d1_wk1_dz +
      6*D10_B0(0,0,0)*D20_B0(0,0,0)*d1_wk5_dz + 6*D12_B0(0,0,0)*D22_B0(0,0,0)*d1_wk5_dz +
      8*D01_B0(0,0,0)*D11_B0(0,0,0)*d1_wk1_dy + 8*D01_B0(0,0,0)*D21_B0(0,0,0)*d1_wk1_dz +
      8*D11_B0(0,0,0)*D21_B0(0,0,0)*d1_wk5_dz)*invRe*mu_B0(0,0,0)*u1_B0(0,0,0) +
      ((1.0/3.0))*(3*(D00_B0(0,0,0)*D00_B0(0,0,0))*d2_u2_dx + 3*(D01_B0(0,0,0)*D01_B0(0,0,0))*d2_u2_dx +
      3*(D10_B0(0,0,0)*D10_B0(0,0,0))*d2_u2_dy + 3*(D11_B0(0,0,0)*D11_B0(0,0,0))*d2_u2_dy +
      3*(D20_B0(0,0,0)*D20_B0(0,0,0))*d2_u2_dz + 3*(D21_B0(0,0,0)*D21_B0(0,0,0))*d2_u2_dz +
      4*(D02_B0(0,0,0)*D02_B0(0,0,0))*d2_u2_dx + 4*(D12_B0(0,0,0)*D12_B0(0,0,0))*d2_u2_dy +
      4*(D22_B0(0,0,0)*D22_B0(0,0,0))*d2_u2_dz + D00_B0(0,0,0)*D02_B0(0,0,0)*d2_u0_dx +
      D00_B0(0,0,0)*D12_B0(0,0,0)*d1_wk0_dy + D00_B0(0,0,0)*D22_B0(0,0,0)*d1_wk0_dz +
      D01_B0(0,0,0)*D02_B0(0,0,0)*d2_u1_dx + D01_B0(0,0,0)*D12_B0(0,0,0)*d1_wk1_dy +
      D01_B0(0,0,0)*D22_B0(0,0,0)*d1_wk1_dz + D02_B0(0,0,0)*D10_B0(0,0,0)*d1_wk0_dy +
      D02_B0(0,0,0)*D11_B0(0,0,0)*d1_wk1_dy + D02_B0(0,0,0)*D20_B0(0,0,0)*d1_wk0_dz +
      D02_B0(0,0,0)*D21_B0(0,0,0)*d1_wk1_dz + D10_B0(0,0,0)*D12_B0(0,0,0)*d2_u0_dy +
      D10_B0(0,0,0)*D22_B0(0,0,0)*d1_wk4_dz + D11_B0(0,0,0)*D12_B0(0,0,0)*d2_u1_dy +
      D11_B0(0,0,0)*D22_B0(0,0,0)*d1_wk5_dz + D12_B0(0,0,0)*D20_B0(0,0,0)*d1_wk4_dz +
      D12_B0(0,0,0)*D21_B0(0,0,0)*d1_wk5_dz + D20_B0(0,0,0)*D22_B0(0,0,0)*d2_u0_dz +
      D21_B0(0,0,0)*D22_B0(0,0,0)*d2_u1_dz - 2*D02_B0(0,0,0)*wk0_B0(0,0,0)*SD000_B0(0,0,0) -
      2*D02_B0(0,0,0)*wk1_B0(0,0,0)*SD010_B0(0,0,0) - 2*D02_B0(0,0,0)*wk4_B0(0,0,0)*SD100_B0(0,0,0) -
      2*D02_B0(0,0,0)*wk5_B0(0,0,0)*SD110_B0(0,0,0) - 2*D02_B0(0,0,0)*wk8_B0(0,0,0)*SD200_B0(0,0,0) -
      2*D02_B0(0,0,0)*wk9_B0(0,0,0)*SD210_B0(0,0,0) - 2*D12_B0(0,0,0)*wk0_B0(0,0,0)*SD001_B0(0,0,0) -
      2*D12_B0(0,0,0)*wk1_B0(0,0,0)*SD011_B0(0,0,0) - 2*D12_B0(0,0,0)*wk4_B0(0,0,0)*SD101_B0(0,0,0) -
      2*D12_B0(0,0,0)*wk5_B0(0,0,0)*SD111_B0(0,0,0) - 2*D12_B0(0,0,0)*wk8_B0(0,0,0)*SD201_B0(0,0,0) -
      2*D12_B0(0,0,0)*wk9_B0(0,0,0)*SD211_B0(0,0,0) - 2*D22_B0(0,0,0)*wk0_B0(0,0,0)*SD002_B0(0,0,0) -
      2*D22_B0(0,0,0)*wk1_B0(0,0,0)*SD012_B0(0,0,0) - 2*D22_B0(0,0,0)*wk4_B0(0,0,0)*SD102_B0(0,0,0) -
      2*D22_B0(0,0,0)*wk5_B0(0,0,0)*SD112_B0(0,0,0) - 2*D22_B0(0,0,0)*wk8_B0(0,0,0)*SD202_B0(0,0,0) -
      2*D22_B0(0,0,0)*wk9_B0(0,0,0)*SD212_B0(0,0,0) + 3*D00_B0(0,0,0)*wk0_B0(0,0,0)*SD020_B0(0,0,0) +
      3*D00_B0(0,0,0)*wk2_B0(0,0,0)*SD000_B0(0,0,0) + 3*D00_B0(0,0,0)*wk4_B0(0,0,0)*SD120_B0(0,0,0) +
      3*D00_B0(0,0,0)*wk6_B0(0,0,0)*SD100_B0(0,0,0) + 3*D00_B0(0,0,0)*wk8_B0(0,0,0)*SD220_B0(0,0,0) +
      3*D00_B0(0,0,0)*wk10_B0(0,0,0)*SD200_B0(0,0,0) + 3*D01_B0(0,0,0)*wk1_B0(0,0,0)*SD020_B0(0,0,0) +
      3*D01_B0(0,0,0)*wk2_B0(0,0,0)*SD010_B0(0,0,0) + 3*D01_B0(0,0,0)*wk5_B0(0,0,0)*SD120_B0(0,0,0) +
      3*D01_B0(0,0,0)*wk6_B0(0,0,0)*SD110_B0(0,0,0) + 3*D01_B0(0,0,0)*wk9_B0(0,0,0)*SD220_B0(0,0,0) +
      3*D01_B0(0,0,0)*wk10_B0(0,0,0)*SD210_B0(0,0,0) + 3*D10_B0(0,0,0)*wk0_B0(0,0,0)*SD021_B0(0,0,0) +
      3*D10_B0(0,0,0)*wk2_B0(0,0,0)*SD001_B0(0,0,0) + 3*D10_B0(0,0,0)*wk4_B0(0,0,0)*SD121_B0(0,0,0) +
      3*D10_B0(0,0,0)*wk6_B0(0,0,0)*SD101_B0(0,0,0) + 3*D10_B0(0,0,0)*wk8_B0(0,0,0)*SD221_B0(0,0,0) +
      3*D10_B0(0,0,0)*wk10_B0(0,0,0)*SD201_B0(0,0,0) + 3*D11_B0(0,0,0)*wk1_B0(0,0,0)*SD021_B0(0,0,0) +
      3*D11_B0(0,0,0)*wk2_B0(0,0,0)*SD011_B0(0,0,0) + 3*D11_B0(0,0,0)*wk5_B0(0,0,0)*SD121_B0(0,0,0) +
      3*D11_B0(0,0,0)*wk6_B0(0,0,0)*SD111_B0(0,0,0) + 3*D11_B0(0,0,0)*wk9_B0(0,0,0)*SD221_B0(0,0,0) +
      3*D11_B0(0,0,0)*wk10_B0(0,0,0)*SD211_B0(0,0,0) + 3*D20_B0(0,0,0)*wk0_B0(0,0,0)*SD022_B0(0,0,0) +
      3*D20_B0(0,0,0)*wk2_B0(0,0,0)*SD002_B0(0,0,0) + 3*D20_B0(0,0,0)*wk4_B0(0,0,0)*SD122_B0(0,0,0) +
      3*D20_B0(0,0,0)*wk6_B0(0,0,0)*SD102_B0(0,0,0) + 3*D20_B0(0,0,0)*wk8_B0(0,0,0)*SD222_B0(0,0,0) +
      3*D20_B0(0,0,0)*wk10_B0(0,0,0)*SD202_B0(0,0,0) + 3*D21_B0(0,0,0)*wk1_B0(0,0,0)*SD022_B0(0,0,0) +
      3*D21_B0(0,0,0)*wk2_B0(0,0,0)*SD012_B0(0,0,0) + 3*D21_B0(0,0,0)*wk5_B0(0,0,0)*SD122_B0(0,0,0) +
      3*D21_B0(0,0,0)*wk6_B0(0,0,0)*SD112_B0(0,0,0) + 3*D21_B0(0,0,0)*wk9_B0(0,0,0)*SD222_B0(0,0,0) +
      3*D21_B0(0,0,0)*wk10_B0(0,0,0)*SD212_B0(0,0,0) + 4*D02_B0(0,0,0)*wk2_B0(0,0,0)*SD020_B0(0,0,0) +
      4*D02_B0(0,0,0)*wk6_B0(0,0,0)*SD120_B0(0,0,0) + 4*D02_B0(0,0,0)*wk10_B0(0,0,0)*SD220_B0(0,0,0) +
      4*D12_B0(0,0,0)*wk2_B0(0,0,0)*SD021_B0(0,0,0) + 4*D12_B0(0,0,0)*wk6_B0(0,0,0)*SD121_B0(0,0,0) +
      4*D12_B0(0,0,0)*wk10_B0(0,0,0)*SD221_B0(0,0,0) + 4*D22_B0(0,0,0)*wk2_B0(0,0,0)*SD022_B0(0,0,0) +
      4*D22_B0(0,0,0)*wk6_B0(0,0,0)*SD122_B0(0,0,0) + 4*D22_B0(0,0,0)*wk10_B0(0,0,0)*SD222_B0(0,0,0) +
      6*D00_B0(0,0,0)*D10_B0(0,0,0)*d1_wk2_dy + 6*D00_B0(0,0,0)*D20_B0(0,0,0)*d1_wk2_dz +
      6*D01_B0(0,0,0)*D11_B0(0,0,0)*d1_wk2_dy + 6*D01_B0(0,0,0)*D21_B0(0,0,0)*d1_wk2_dz +
      6*D10_B0(0,0,0)*D20_B0(0,0,0)*d1_wk6_dz + 6*D11_B0(0,0,0)*D21_B0(0,0,0)*d1_wk6_dz +
      8*D02_B0(0,0,0)*D12_B0(0,0,0)*d1_wk2_dy + 8*D02_B0(0,0,0)*D22_B0(0,0,0)*d1_wk2_dz +
      8*D12_B0(0,0,0)*D22_B0(0,0,0)*d1_wk6_dz)*invRe*mu_B0(0,0,0)*u2_B0(0,0,0) +
      ((1.0/3.0))*(3*(D01_B0(0,0,0)*D01_B0(0,0,0))*d2_u0_dx + 3*(D02_B0(0,0,0)*D02_B0(0,0,0))*d2_u0_dx +
      3*(D11_B0(0,0,0)*D11_B0(0,0,0))*d2_u0_dy + 3*(D12_B0(0,0,0)*D12_B0(0,0,0))*d2_u0_dy +
      3*(D21_B0(0,0,0)*D21_B0(0,0,0))*d2_u0_dz + 3*(D22_B0(0,0,0)*D22_B0(0,0,0))*d2_u0_dz +
      4*(D00_B0(0,0,0)*D00_B0(0,0,0))*d2_u0_dx + 4*(D10_B0(0,0,0)*D10_B0(0,0,0))*d2_u0_dy +
      4*(D20_B0(0,0,0)*D20_B0(0,0,0))*d2_u0_dz + D00_B0(0,0,0)*D01_B0(0,0,0)*d2_u1_dx +
      D00_B0(0,0,0)*D02_B0(0,0,0)*d2_u2_dx + D00_B0(0,0,0)*D11_B0(0,0,0)*d1_wk1_dy +
      D00_B0(0,0,0)*D12_B0(0,0,0)*d1_wk2_dy + D00_B0(0,0,0)*D21_B0(0,0,0)*d1_wk1_dz +
      D00_B0(0,0,0)*D22_B0(0,0,0)*d1_wk2_dz + D01_B0(0,0,0)*D10_B0(0,0,0)*d1_wk1_dy +
      D01_B0(0,0,0)*D20_B0(0,0,0)*d1_wk1_dz + D02_B0(0,0,0)*D10_B0(0,0,0)*d1_wk2_dy +
      D02_B0(0,0,0)*D20_B0(0,0,0)*d1_wk2_dz + D10_B0(0,0,0)*D11_B0(0,0,0)*d2_u1_dy +
      D10_B0(0,0,0)*D12_B0(0,0,0)*d2_u2_dy + D10_B0(0,0,0)*D21_B0(0,0,0)*d1_wk5_dz +
      D10_B0(0,0,0)*D22_B0(0,0,0)*d1_wk6_dz + D11_B0(0,0,0)*D20_B0(0,0,0)*d1_wk5_dz +
      D12_B0(0,0,0)*D20_B0(0,0,0)*d1_wk6_dz + D20_B0(0,0,0)*D21_B0(0,0,0)*d2_u1_dz +
      D20_B0(0,0,0)*D22_B0(0,0,0)*d2_u2_dz - 2*D00_B0(0,0,0)*wk1_B0(0,0,0)*SD010_B0(0,0,0) -
      2*D00_B0(0,0,0)*wk2_B0(0,0,0)*SD020_B0(0,0,0) - 2*D00_B0(0,0,0)*wk5_B0(0,0,0)*SD110_B0(0,0,0) -
      2*D00_B0(0,0,0)*wk6_B0(0,0,0)*SD120_B0(0,0,0) - 2*D00_B0(0,0,0)*wk9_B0(0,0,0)*SD210_B0(0,0,0) -
      2*D00_B0(0,0,0)*wk10_B0(0,0,0)*SD220_B0(0,0,0) - 2*D10_B0(0,0,0)*wk1_B0(0,0,0)*SD011_B0(0,0,0) -
      2*D10_B0(0,0,0)*wk2_B0(0,0,0)*SD021_B0(0,0,0) - 2*D10_B0(0,0,0)*wk5_B0(0,0,0)*SD111_B0(0,0,0) -
      2*D10_B0(0,0,0)*wk6_B0(0,0,0)*SD121_B0(0,0,0) - 2*D10_B0(0,0,0)*wk9_B0(0,0,0)*SD211_B0(0,0,0) -
      2*D10_B0(0,0,0)*wk10_B0(0,0,0)*SD221_B0(0,0,0) - 2*D20_B0(0,0,0)*wk1_B0(0,0,0)*SD012_B0(0,0,0) -
      2*D20_B0(0,0,0)*wk2_B0(0,0,0)*SD022_B0(0,0,0) - 2*D20_B0(0,0,0)*wk5_B0(0,0,0)*SD112_B0(0,0,0) -
      2*D20_B0(0,0,0)*wk6_B0(0,0,0)*SD122_B0(0,0,0) - 2*D20_B0(0,0,0)*wk9_B0(0,0,0)*SD212_B0(0,0,0) -
      2*D20_B0(0,0,0)*wk10_B0(0,0,0)*SD222_B0(0,0,0) + 3*D01_B0(0,0,0)*wk0_B0(0,0,0)*SD010_B0(0,0,0) +
      3*D01_B0(0,0,0)*wk1_B0(0,0,0)*SD000_B0(0,0,0) + 3*D01_B0(0,0,0)*wk4_B0(0,0,0)*SD110_B0(0,0,0) +
      3*D01_B0(0,0,0)*wk5_B0(0,0,0)*SD100_B0(0,0,0) + 3*D01_B0(0,0,0)*wk8_B0(0,0,0)*SD210_B0(0,0,0) +
      3*D01_B0(0,0,0)*wk9_B0(0,0,0)*SD200_B0(0,0,0) + 3*D02_B0(0,0,0)*wk0_B0(0,0,0)*SD020_B0(0,0,0) +
      3*D02_B0(0,0,0)*wk2_B0(0,0,0)*SD000_B0(0,0,0) + 3*D02_B0(0,0,0)*wk4_B0(0,0,0)*SD120_B0(0,0,0) +
      3*D02_B0(0,0,0)*wk6_B0(0,0,0)*SD100_B0(0,0,0) + 3*D02_B0(0,0,0)*wk8_B0(0,0,0)*SD220_B0(0,0,0) +
      3*D02_B0(0,0,0)*wk10_B0(0,0,0)*SD200_B0(0,0,0) + 3*D11_B0(0,0,0)*wk0_B0(0,0,0)*SD011_B0(0,0,0) +
      3*D11_B0(0,0,0)*wk1_B0(0,0,0)*SD001_B0(0,0,0) + 3*D11_B0(0,0,0)*wk4_B0(0,0,0)*SD111_B0(0,0,0) +
      3*D11_B0(0,0,0)*wk5_B0(0,0,0)*SD101_B0(0,0,0) + 3*D11_B0(0,0,0)*wk8_B0(0,0,0)*SD211_B0(0,0,0) +
      3*D11_B0(0,0,0)*wk9_B0(0,0,0)*SD201_B0(0,0,0) + 3*D12_B0(0,0,0)*wk0_B0(0,0,0)*SD021_B0(0,0,0) +
      3*D12_B0(0,0,0)*wk2_B0(0,0,0)*SD001_B0(0,0,0) + 3*D12_B0(0,0,0)*wk4_B0(0,0,0)*SD121_B0(0,0,0) +
      3*D12_B0(0,0,0)*wk6_B0(0,0,0)*SD101_B0(0,0,0) + 3*D12_B0(0,0,0)*wk8_B0(0,0,0)*SD221_B0(0,0,0) +
      3*D12_B0(0,0,0)*wk10_B0(0,0,0)*SD201_B0(0,0,0) + 3*D21_B0(0,0,0)*wk0_B0(0,0,0)*SD012_B0(0,0,0) +
      3*D21_B0(0,0,0)*wk1_B0(0,0,0)*SD002_B0(0,0,0) + 3*D21_B0(0,0,0)*wk4_B0(0,0,0)*SD112_B0(0,0,0) +
      3*D21_B0(0,0,0)*wk5_B0(0,0,0)*SD102_B0(0,0,0) + 3*D21_B0(0,0,0)*wk8_B0(0,0,0)*SD212_B0(0,0,0) +
      3*D21_B0(0,0,0)*wk9_B0(0,0,0)*SD202_B0(0,0,0) + 3*D22_B0(0,0,0)*wk0_B0(0,0,0)*SD022_B0(0,0,0) +
      3*D22_B0(0,0,0)*wk2_B0(0,0,0)*SD002_B0(0,0,0) + 3*D22_B0(0,0,0)*wk4_B0(0,0,0)*SD122_B0(0,0,0) +
      3*D22_B0(0,0,0)*wk6_B0(0,0,0)*SD102_B0(0,0,0) + 3*D22_B0(0,0,0)*wk8_B0(0,0,0)*SD222_B0(0,0,0) +
      3*D22_B0(0,0,0)*wk10_B0(0,0,0)*SD202_B0(0,0,0) + 4*D00_B0(0,0,0)*wk0_B0(0,0,0)*SD000_B0(0,0,0) +
      4*D00_B0(0,0,0)*wk4_B0(0,0,0)*SD100_B0(0,0,0) + 4*D00_B0(0,0,0)*wk8_B0(0,0,0)*SD200_B0(0,0,0) +
      4*D10_B0(0,0,0)*wk0_B0(0,0,0)*SD001_B0(0,0,0) + 4*D10_B0(0,0,0)*wk4_B0(0,0,0)*SD101_B0(0,0,0) +
      4*D10_B0(0,0,0)*wk8_B0(0,0,0)*SD201_B0(0,0,0) + 4*D20_B0(0,0,0)*wk0_B0(0,0,0)*SD002_B0(0,0,0) +
      4*D20_B0(0,0,0)*wk4_B0(0,0,0)*SD102_B0(0,0,0) + 4*D20_B0(0,0,0)*wk8_B0(0,0,0)*SD202_B0(0,0,0) +
      6*D01_B0(0,0,0)*D11_B0(0,0,0)*d1_wk0_dy + 6*D01_B0(0,0,0)*D21_B0(0,0,0)*d1_wk0_dz +
      6*D02_B0(0,0,0)*D12_B0(0,0,0)*d1_wk0_dy + 6*D02_B0(0,0,0)*D22_B0(0,0,0)*d1_wk0_dz +
      6*D11_B0(0,0,0)*D21_B0(0,0,0)*d1_wk4_dz + 6*D12_B0(0,0,0)*D22_B0(0,0,0)*d1_wk4_dz +
      8*D00_B0(0,0,0)*D10_B0(0,0,0)*d1_wk0_dy + 8*D00_B0(0,0,0)*D20_B0(0,0,0)*d1_wk0_dz +
      8*D10_B0(0,0,0)*D20_B0(0,0,0)*d1_wk4_dz)*invRe*mu_B0(0,0,0)*u0_B0(0,0,0) +
      ((2.0/3.0))*(D00_B0(0,0,0)*wk0_B0(0,0,0) + D10_B0(0,0,0)*wk4_B0(0,0,0) +
      D20_B0(0,0,0)*wk8_B0(0,0,0))*(-D01_B0(0,0,0)*wk1_B0(0,0,0) - D02_B0(0,0,0)*wk2_B0(0,0,0) -
      D11_B0(0,0,0)*wk5_B0(0,0,0) - D12_B0(0,0,0)*wk6_B0(0,0,0) - D21_B0(0,0,0)*wk9_B0(0,0,0) -
      D22_B0(0,0,0)*wk10_B0(0,0,0) + 2*D00_B0(0,0,0)*wk0_B0(0,0,0) + 2*D10_B0(0,0,0)*wk4_B0(0,0,0) +
      2*D20_B0(0,0,0)*wk8_B0(0,0,0))*invRe*mu_B0(0,0,0) + ((2.0/3.0))*(D00_B0(0,0,0)*d1_mu_dx + D10_B0(0,0,0)*d1_mu_dy +
      D20_B0(0,0,0)*d1_mu_dz)*(-D01_B0(0,0,0)*wk1_B0(0,0,0) - D02_B0(0,0,0)*wk2_B0(0,0,0) - D11_B0(0,0,0)*wk5_B0(0,0,0)
      - D12_B0(0,0,0)*wk6_B0(0,0,0) - D21_B0(0,0,0)*wk9_B0(0,0,0) - D22_B0(0,0,0)*wk10_B0(0,0,0) +
      2*D00_B0(0,0,0)*wk0_B0(0,0,0) + 2*D10_B0(0,0,0)*wk4_B0(0,0,0) + 2*D20_B0(0,0,0)*wk8_B0(0,0,0))*invRe*u0_B0(0,0,0)
      + (D00_B0(0,0,0)*wk3_B0(0,0,0) + D10_B0(0,0,0)*wk7_B0(0,0,0) +
      D20_B0(0,0,0)*wk11_B0(0,0,0))*(D00_B0(0,0,0)*d1_mu_dx + D10_B0(0,0,0)*d1_mu_dy +
      D20_B0(0,0,0)*d1_mu_dz)*invPr*invRe*inv2Minf*inv_gamma_m1 + (D01_B0(0,0,0)*wk3_B0(0,0,0) +
      D11_B0(0,0,0)*wk7_B0(0,0,0) + D21_B0(0,0,0)*wk11_B0(0,0,0))*(D01_B0(0,0,0)*d1_mu_dx + D11_B0(0,0,0)*d1_mu_dy +
      D21_B0(0,0,0)*d1_mu_dz)*invPr*invRe*inv2Minf*inv_gamma_m1 + (D02_B0(0,0,0)*wk3_B0(0,0,0) +
      D12_B0(0,0,0)*wk7_B0(0,0,0) + D22_B0(0,0,0)*wk11_B0(0,0,0))*(D02_B0(0,0,0)*d1_mu_dx + D12_B0(0,0,0)*d1_mu_dy +
      D22_B0(0,0,0)*d1_mu_dz)*invPr*invRe*inv2Minf*inv_gamma_m1 + ((D00_B0(0,0,0)*D00_B0(0,0,0))*d2_T_dx +
      (D01_B0(0,0,0)*D01_B0(0,0,0))*d2_T_dx + (D02_B0(0,0,0)*D02_B0(0,0,0))*d2_T_dx +
      (D10_B0(0,0,0)*D10_B0(0,0,0))*d2_T_dy + (D11_B0(0,0,0)*D11_B0(0,0,0))*d2_T_dy +
      (D12_B0(0,0,0)*D12_B0(0,0,0))*d2_T_dy + (D20_B0(0,0,0)*D20_B0(0,0,0))*d2_T_dz +
      (D21_B0(0,0,0)*D21_B0(0,0,0))*d2_T_dz + (D22_B0(0,0,0)*D22_B0(0,0,0))*d2_T_dz +
      D00_B0(0,0,0)*wk3_B0(0,0,0)*SD000_B0(0,0,0) + D00_B0(0,0,0)*wk7_B0(0,0,0)*SD100_B0(0,0,0) +
      D00_B0(0,0,0)*wk11_B0(0,0,0)*SD200_B0(0,0,0) + D01_B0(0,0,0)*wk3_B0(0,0,0)*SD010_B0(0,0,0) +
      D01_B0(0,0,0)*wk7_B0(0,0,0)*SD110_B0(0,0,0) + D01_B0(0,0,0)*wk11_B0(0,0,0)*SD210_B0(0,0,0) +
      D02_B0(0,0,0)*wk3_B0(0,0,0)*SD020_B0(0,0,0) + D02_B0(0,0,0)*wk7_B0(0,0,0)*SD120_B0(0,0,0) +
      D02_B0(0,0,0)*wk11_B0(0,0,0)*SD220_B0(0,0,0) + D10_B0(0,0,0)*wk3_B0(0,0,0)*SD001_B0(0,0,0) +
      D10_B0(0,0,0)*wk7_B0(0,0,0)*SD101_B0(0,0,0) + D10_B0(0,0,0)*wk11_B0(0,0,0)*SD201_B0(0,0,0) +
      D11_B0(0,0,0)*wk3_B0(0,0,0)*SD011_B0(0,0,0) + D11_B0(0,0,0)*wk7_B0(0,0,0)*SD111_B0(0,0,0) +
      D11_B0(0,0,0)*wk11_B0(0,0,0)*SD211_B0(0,0,0) + D12_B0(0,0,0)*wk3_B0(0,0,0)*SD021_B0(0,0,0) +
      D12_B0(0,0,0)*wk7_B0(0,0,0)*SD121_B0(0,0,0) + D12_B0(0,0,0)*wk11_B0(0,0,0)*SD221_B0(0,0,0) +
      D20_B0(0,0,0)*wk3_B0(0,0,0)*SD002_B0(0,0,0) + D20_B0(0,0,0)*wk7_B0(0,0,0)*SD102_B0(0,0,0) +
      D20_B0(0,0,0)*wk11_B0(0,0,0)*SD202_B0(0,0,0) + D21_B0(0,0,0)*wk3_B0(0,0,0)*SD012_B0(0,0,0) +
      D21_B0(0,0,0)*wk7_B0(0,0,0)*SD112_B0(0,0,0) + D21_B0(0,0,0)*wk11_B0(0,0,0)*SD212_B0(0,0,0) +
      D22_B0(0,0,0)*wk3_B0(0,0,0)*SD022_B0(0,0,0) + D22_B0(0,0,0)*wk7_B0(0,0,0)*SD122_B0(0,0,0) +
      D22_B0(0,0,0)*wk11_B0(0,0,0)*SD222_B0(0,0,0) + 2*D00_B0(0,0,0)*D10_B0(0,0,0)*d1_wk3_dy +
      2*D00_B0(0,0,0)*D20_B0(0,0,0)*d1_wk3_dz + 2*D01_B0(0,0,0)*D11_B0(0,0,0)*d1_wk3_dy +
      2*D01_B0(0,0,0)*D21_B0(0,0,0)*d1_wk3_dz + 2*D02_B0(0,0,0)*D12_B0(0,0,0)*d1_wk3_dy +
      2*D02_B0(0,0,0)*D22_B0(0,0,0)*d1_wk3_dz + 2*D10_B0(0,0,0)*D20_B0(0,0,0)*d1_wk7_dz +
      2*D11_B0(0,0,0)*D21_B0(0,0,0)*d1_wk7_dz +
      2*D12_B0(0,0,0)*D22_B0(0,0,0)*d1_wk7_dz)*invPr*invRe*inv2Minf*inv_gamma_m1*mu_B0(0,0,0) + Residual4_B0(0,0,0);


      }
    }
  }
  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[37].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 58);
  ops_set_halo_dirtybit3(&args[53],range);
  ops_set_halo_dirtybit3(&args[54],range);
  ops_set_halo_dirtybit3(&args[55],range);
  ops_set_halo_dirtybit3(&args[56],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[37].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg7);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg8);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg9);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg10);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg11);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg12);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg13);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg14);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg15);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg16);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg17);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg18);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg19);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg20);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg21);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg22);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg23);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg24);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg25);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg26);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg27);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg28);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg29);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg30);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg31);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg32);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg33);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg34);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg35);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg36);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg37);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg38);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg39);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg40);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg41);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg42);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg43);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg44);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg45);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg46);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg47);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg48);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg49);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg50);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg51);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg52);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg53);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg54);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg55);
    block->instance->OPS_kernels[37].transfer += ops_compute_transfer(dim, start, end, &arg56);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel081(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11,
 ops_arg arg12, ops_arg arg13, ops_arg arg14, ops_arg arg15,
 ops_arg arg16, ops_arg arg17, ops_arg arg18, ops_arg arg19,
 ops_arg arg20, ops_arg arg21, ops_arg arg22, ops_arg arg23,
 ops_arg arg24, ops_arg arg25, ops_arg arg26, ops_arg arg27,
 ops_arg arg28, ops_arg arg29, ops_arg arg30, ops_arg arg31,
 ops_arg arg32, ops_arg arg33, ops_arg arg34, ops_arg arg35,
 ops_arg arg36, ops_arg arg37, ops_arg arg38, ops_arg arg39,
 ops_arg arg40, ops_arg arg41, ops_arg arg42, ops_arg arg43,
 ops_arg arg44, ops_arg arg45, ops_arg arg46, ops_arg arg47,
 ops_arg arg48, ops_arg arg49, ops_arg arg50, ops_arg arg51,
 ops_arg arg52, ops_arg arg53, ops_arg arg54, ops_arg arg55,
 ops_arg arg56, ops_arg arg57) {
  ops_arg args[58] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57 };

  //create kernel descriptor and pass it to ops_enqueue_kernel
  create_kerneldesc_and_enque(name, args, 58, 37, dim, 0, range, block, ops_par_loop_opensbliblock00Kernel081_execute);
}
#endif
