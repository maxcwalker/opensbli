//
// auto-generated by ops.py
//
__constant__ int dims_opensbliblock00Kernel049 [7][1];
static int dims_opensbliblock00Kernel049_h [7][1] = {{0}};

//user function
__device__

 void opensbliblock00Kernel049_gpu(ACC<double> &rhoE_B0,
  ACC<double> &rho_B0,
  ACC<double> &rhou0_B0,
  ACC<double> &rhou1_B0,
  ACC<double> &x0_B0,
  ACC<double> &x1_B0,
  const int *idx)
{
   double T = 0.0;
   double rho = 0.0;
   double rhou0 = 0.0;
   double rhou1 = 0.0;
   x0_B0(0,0) = Delta0block0*idx[0];

    x1_B0(0,0) = ((1.0/20.0))*H*exp(-((-(1.0/2.0)*L + Delta0block0*idx[0])*(-(1.0/2.0)*L + Delta0block0*idx[0]))*inv2a)
      + (-(1.0/20.0)*H*exp(-((-(1.0/2.0)*L + Delta0block0*idx[0])*(-(1.0/2.0)*L + Delta0block0*idx[0]))*inv2a) +
      H)*sinh(b*invH*Delta1block0*idx[1])/sinh(b);

    rhou0 = ((x1_B0(0,0) < 2.99429942994299) ? (
   -6.79885229354697e-6 + 1.67214576440403e-15*pow(x1_B0(0,0), 43) +
      6.62609706082458e-8*pow(x1_B0(0,0), 24) + 2.98375659025026e-5*pow(x1_B0(0,0), 20) +
      0.126243129686605*pow(x1_B0(0,0), 13) + 4.19573005111711*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0))
      + 1.69076757508543*pow(x1_B0(0,0), 10) + 2.03176591512731e-19*pow(x1_B0(0,0), 48) +
      0.0298244304917194*pow(x1_B0(0,0), 14) + 3.83419788084576e-18*pow(x1_B0(0,0), 49) +
      0.000615582519760767*pow(x1_B0(0,0), 18) + 0.324542714858587*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) +
      1.55527060442377e-7*pow(x1_B0(0,0), 26) + 3.88129708090835e-11*pow(x1_B0(0,0), 33) +
      10.6865238854981*pow(x1_B0(0,0), 7) + 0.366955462805737*x1_B0(0,0) + 2.53262687813713e-11*pow(x1_B0(0,0), 34) +
      3.14827640533376e-15*pow(x1_B0(0,0), 42) + 4.27145437316059e-16*pow(x1_B0(0,0), 44) +
      0.000269336486878435*pow(x1_B0(0,0), 19) + 1.15214468964544*pow(x1_B0(0,0), 9) +
      3.50438739574933e-8*pow(x1_B0(0,0), 27) + 8.62883142948422e-12*pow(x1_B0(0,0), 35) +
      3.47266104607713e-7*pow(x1_B0(0,0), 25) + 1.55582786171241e-12*pow(x1_B0(0,0), 36) -
      7.20659855575652*pow(x1_B0(0,0), 8) -
      8.58262294264666*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) -
      0.0110034695305397*pow(x1_B0(0,0), 15) - 0.00631704177417841*pow(x1_B0(0,0), 16) -
      1.89504462660425e-13*pow(x1_B0(0,0), 37) - 5.91600474661752e-17*pow(x1_B0(0,0), 46) -
      2.78552815102481e-13*pow(x1_B0(0,0), 38) - 8.63295716234996e-18*pow(x1_B0(0,0), 45) -
      0.0195239337386234*(x1_B0(0,0)*x1_B0(0,0)) - 1.26048044856151*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) -
      5.59449766936062e-19*pow(x1_B0(0,0), 50) - 2.78585585488651e-6*pow(x1_B0(0,0), 23) -
      4.70977143222768e-11*pow(x1_B0(0,0), 32) - 0.13022591625403*pow(x1_B0(0,0), 12) -
      2.99381761569239e-14*pow(x1_B0(0,0), 40) - 1.21813959744852e-13*pow(x1_B0(0,0), 39) -
      2.05542500875851e-9*pow(x1_B0(0,0), 30) - 4.25404943097097e-9*pow(x1_B0(0,0), 29) -
      5.52553504022722e-10*pow(x1_B0(0,0), 31) - 5.79287182325348e-10*pow(x1_B0(0,0), 28) -
      1.93038694398876e-5*pow(x1_B0(0,0), 21) - 1.15119271094842e-5*pow(x1_B0(0,0), 22) -
      2.33848528182873e-17*pow(x1_B0(0,0), 47) - 0.885085658468942*pow(x1_B0(0,0), 11) -
      0.000443349455521302*pow(x1_B0(0,0), 17) - 8.60901866220568e-16*pow(x1_B0(0,0), 41)
)
: (

      0.999999224476483
));

    rhou1 = ((x1_B0(0,0) < 2.99429942994299) ? (
   -3.55809262938878e-8 +
      0.000502173746863*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) + 5.05628488696696e-9*pow(x1_B0(0,0), 25) +
      3.26077171091605e-6*x1_B0(0,0) + 2.67167062793271e-19*pow(x1_B0(0,0), 45) + 1.00091188044208e-9*pow(x1_B0(0,0),
      27) + 4.42078058019716e-14*pow(x1_B0(0,0), 36) +
      0.0516627511761917*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) +
      0.000414336236066314*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) + 6.49345465644724e-6*pow(x1_B0(0,0), 19) +
      0.00169834206105855*pow(x1_B0(0,0), 13) + 5.49661999515462e-17*pow(x1_B0(0,0), 42) +
      4.6137902286588e-13*pow(x1_B0(0,0), 33) + 4.85037171824644e-13*pow(x1_B0(0,0), 34) +
      2.7150506827642e-16*pow(x1_B0(0,0), 37) + 3.46584192929136e-17*pow(x1_B0(0,0), 43) +
      0.00125338352789817*pow(x1_B0(0,0), 14) + 9.91685221830504e-18*pow(x1_B0(0,0), 44) +
      0.0915443510541033*pow(x1_B0(0,0), 10) + 8.0200735796748e-20*pow(x1_B0(0,0), 49) +
      0.00154408756160506*(x1_B0(0,0)*x1_B0(0,0)) + 1.52283931245167e-6*pow(x1_B0(0,0), 20) +
      0.20683469022637*pow(x1_B0(0,0), 8) + 1.94822682850571e-13*pow(x1_B0(0,0), 35) +
      1.02765795274568e-10*pow(x1_B0(0,0), 28) + 3.34289856562083e-9*pow(x1_B0(0,0), 26) +
      7.13044307392859e-6*pow(x1_B0(0,0), 18) - 7.25250677255355e-16*pow(x1_B0(0,0), 40) -
      9.08347249629834e-9*pow(x1_B0(0,0), 24) - 2.56804312724929e-15*pow(x1_B0(0,0), 39) -
      0.188773333436024*pow(x1_B0(0,0), 9) - 2.8697732308619e-5*pow(x1_B0(0,0), 15) -
      8.09580874114824e-21*pow(x1_B0(0,0), 48) - 2.21037886849149e-12*pow(x1_B0(0,0), 32) -
      0.00955081867425732*pow(x1_B0(0,0), 12) - 8.12833717377197e-8*pow(x1_B0(0,0), 23) -
      6.25916350876912e-11*pow(x1_B0(0,0), 29) - 0.134992085123733*pow(x1_B0(0,0), 7) -
      6.31267481738989e-17*pow(x1_B0(0,0), 41) - 5.07524000049457e-19*pow(x1_B0(0,0), 47) -
      3.59441987111512e-5*pow(x1_B0(0,0), 17) -
      0.0096025712923926*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) - 0.000153858548343256*pow(x1_B0(0,0),
      16) - 0.010034669380685*pow(x1_B0(0,0), 11) - 1.53178456879174e-7*pow(x1_B0(0,0), 21) -
      1.16147003447654e-18*pow(x1_B0(0,0), 46) - 4.96474941780048e-15*pow(x1_B0(0,0), 38) -
      4.22856961424178e-11*pow(x1_B0(0,0), 30) - 1.12820437760232e-20*pow(x1_B0(0,0), 50) -
      1.39392346238368e-11*pow(x1_B0(0,0), 31) - 2.34094986727713e-7*pow(x1_B0(0,0), 22)
)
: (

      0.00878175646748518
));

    T = ((x1_B0(0,0) < 2.99429942994299) ? (
   2.05509841547725 + 3.8212473384235e-9*pow(x1_B0(0,0), 28) +
      0.196895824562075*pow(x1_B0(0,0), 11) + 1.42982882188753e-17*pow(x1_B0(0,0), 45) +
      0.0232241263819855*pow(x1_B0(0,0), 14) + 6.98953216447816e-6*pow(x1_B0(0,0), 21) +
      1.39315293284763e-8*pow(x1_B0(0,0), 26) + 2.25561145727452e-13*pow(x1_B0(0,0), 34) +
      2.60580316630023e-19*pow(x1_B0(0,0), 49) +
      6.57336872053344*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) +
      0.647453621926527*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) + 3.23872805592056e-5*pow(x1_B0(0,0), 20) +
      4.95662842981949e-13*pow(x1_B0(0,0), 36) + 6.1621090471385e-17*pow(x1_B0(0,0), 44) +
      1.2869055385934e-13*pow(x1_B0(0,0), 37) + 1.06585809905616e-12*pow(x1_B0(0,0), 35) +
      5.93091178567877e-10*pow(x1_B0(0,0), 29) + 10.8017663552313*pow(x1_B0(0,0), 8) +
      9.90167089336861e-15*pow(x1_B0(0,0), 38) + 0.00574892119341443*pow(x1_B0(0,0), 15) +
      1.14510428296074e-8*pow(x1_B0(0,0), 27) + 4.93530669430688e-5*pow(x1_B0(0,0), 19) +
      1.02711852895838e-16*pow(x1_B0(0,0), 43) + 1.95900301618798*pow(x1_B0(0,0), 10) - 10.4739984091963*pow(x1_B0(0,0),
      7) - 5.33039546348979e-15*pow(x1_B0(0,0), 40) - 1.17486403129522e-10*pow(x1_B0(0,0), 30) -
      0.000144099162483709*pow(x1_B0(0,0), 18) - 9.09984616614245e-12*pow(x1_B0(0,0), 33) -
      1.56198360830805e-15*pow(x1_B0(0,0), 41) - 0.233437748980024*pow(x1_B0(0,0), 12) -
      0.500539338745882*(x1_B0(0,0)*x1_B0(0,0)) - 0.0199877526980616*pow(x1_B0(0,0), 13) -
      2.63193632371527*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) - 0.000329119172379296*x1_B0(0,0) -
      6.73370820899258*pow(x1_B0(0,0), 9) - 0.109888830873074*(x1_B0(0,0)*x1_B0(0,0)*x1_B0(0,0)) -
      1.17758291158569e-10*pow(x1_B0(0,0), 31) - 9.74728650158839e-7*pow(x1_B0(0,0), 23) -
      8.92129738625189e-15*pow(x1_B0(0,0), 39) - 0.00123299895914358*pow(x1_B0(0,0), 16) -
      2.19751981779326e-18*pow(x1_B0(0,0), 47) - 6.14496948201501e-7*pow(x1_B0(0,0), 22) -
      1.4931238860637e-16*pow(x1_B0(0,0), 42) - 3.47458952796756e-7*pow(x1_B0(0,0), 24) -
      4.43046996992817e-11*pow(x1_B0(0,0), 32) - 4.97047225496105e-8*pow(x1_B0(0,0), 25) -
      1.48892919053983e-18*pow(x1_B0(0,0), 46) - 2.41225653208545e-20*pow(x1_B0(0,0), 50) -
      3.95865283426961e-19*pow(x1_B0(0,0), 48) - 0.00092373473652247*pow(x1_B0(0,0), 17)
)
: (
   1.00000077269372
));

   rho = 1.0/T;

   rho_B0(0,0) = rho;

   rhou0_B0(0,0) = rhou0;

   rhou1_B0(0,0) = rhou1;

   rhoE_B0(0,0) = (0.5*(rhou0*rhou0) + 0.5*(rhou1*rhou1))/rho + invgama*inv2Minf*inv_gamma_m1*T*rho;

}



__global__ void ops_opensbliblock00Kernel049(
double* __restrict arg0,
double* __restrict arg1,
double* __restrict arg2,
double* __restrict arg3,
double* __restrict arg4,
double* __restrict arg5,
int arg_idx0, int arg_idx1,
int size0,
int size1 ){


  int idx_y = blockDim.y * blockIdx.y + threadIdx.y;
  int idx_x = blockDim.x * blockIdx.x + threadIdx.x;

  int arg_idx[2];
  arg_idx[0] = arg_idx0+idx_x;
  arg_idx[1] = arg_idx1+idx_y;
  arg0 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel049[0][0];
  arg1 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel049[1][0];
  arg2 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel049[2][0];
  arg3 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel049[3][0];
  arg4 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel049[4][0];
  arg5 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel049[5][0];

  if (idx_x < size0 && idx_y < size1) {
    ACC<double> argp0(dims_opensbliblock00Kernel049[0][0], arg0);
    ACC<double> argp1(dims_opensbliblock00Kernel049[1][0], arg1);
    ACC<double> argp2(dims_opensbliblock00Kernel049[2][0], arg2);
    ACC<double> argp3(dims_opensbliblock00Kernel049[3][0], arg3);
    ACC<double> argp4(dims_opensbliblock00Kernel049[4][0], arg4);
    ACC<double> argp5(dims_opensbliblock00Kernel049[5][0], arg5);
    opensbliblock00Kernel049_gpu(
     argp0, argp1, argp2, argp3, argp4,
     argp5, arg_idx);
  }

}

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel049(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6) {
#else
void ops_par_loop_opensbliblock00Kernel049_execute(ops_kernel_descriptor *desc) {
  int dim = desc->dim;
  #if OPS_MPI
  ops_block block = desc->block;
  #endif
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  #endif

  //Timing
  double t1,t2,c1,c2;

  ops_arg args[7] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6};


  #if CHECKPOINTING && !OPS_LAZY
  if (!ops_checkpointing_before(args,7,range,0)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,0,"opensbliblock00Kernel049");
    block->instance->OPS_kernels[0].count++;
    ops_timers_core(&c1,&t1);
  }

  //compute locally allocated range for the sub-block
  int start[2];
  int end[2];

  int arg_idx[2];
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<2; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 7,block, range, start, end, arg_idx) < 0) return;
  #endif

  #if defined(OPS_MPI)
  #if defined(OPS_LAZY)
  sub_block_list sb = OPS_sub_block_list[block->index];
  arg_idx[0] = sb->decomp_disp[0]+start[0];
  arg_idx[1] = sb->decomp_disp[1]+start[1];
  #endif
  #else //OPS_MPI
  arg_idx[0] = start[0];
  arg_idx[1] = start[1];
  #endif //OPS_MPI
  int xdim0 = args[0].dat->size[0];
  int xdim1 = args[1].dat->size[0];
  int xdim2 = args[2].dat->size[0];
  int xdim3 = args[3].dat->size[0];
  int xdim4 = args[4].dat->size[0];
  int xdim5 = args[5].dat->size[0];

  if (xdim0 != dims_opensbliblock00Kernel049_h[0][0] || xdim1 != dims_opensbliblock00Kernel049_h[1][0] || xdim2 != dims_opensbliblock00Kernel049_h[2][0] || xdim3 != dims_opensbliblock00Kernel049_h[3][0] || xdim4 != dims_opensbliblock00Kernel049_h[4][0] || xdim5 != dims_opensbliblock00Kernel049_h[5][0]) {
    dims_opensbliblock00Kernel049_h[0][0] = xdim0;
    dims_opensbliblock00Kernel049_h[1][0] = xdim1;
    dims_opensbliblock00Kernel049_h[2][0] = xdim2;
    dims_opensbliblock00Kernel049_h[3][0] = xdim3;
    dims_opensbliblock00Kernel049_h[4][0] = xdim4;
    dims_opensbliblock00Kernel049_h[5][0] = xdim5;
    cutilSafeCall(block->instance->ostream(), cudaMemcpyToSymbol( dims_opensbliblock00Kernel049, dims_opensbliblock00Kernel049_h, sizeof(dims_opensbliblock00Kernel049)));
  }



  int x_size = MAX(0,end[0]-start[0]);
  int y_size = MAX(0,end[1]-start[1]);

  dim3 grid( (x_size-1)/block->instance->OPS_block_size_x+ 1, (y_size-1)/block->instance->OPS_block_size_y + 1, 1);
  dim3 tblock(block->instance->OPS_block_size_x,block->instance->OPS_block_size_y,block->instance->OPS_block_size_z);



  long long int dat0 = (block->instance->OPS_soa ? args[0].dat->type_size : args[0].dat->elem_size);
  long long int dat1 = (block->instance->OPS_soa ? args[1].dat->type_size : args[1].dat->elem_size);
  long long int dat2 = (block->instance->OPS_soa ? args[2].dat->type_size : args[2].dat->elem_size);
  long long int dat3 = (block->instance->OPS_soa ? args[3].dat->type_size : args[3].dat->elem_size);
  long long int dat4 = (block->instance->OPS_soa ? args[4].dat->type_size : args[4].dat->elem_size);
  long long int dat5 = (block->instance->OPS_soa ? args[5].dat->type_size : args[5].dat->elem_size);

  char *p_a[7];

  //set up initial pointers
  long long int base0 = args[0].dat->base_offset + 
           dat0 * 1 * (start[0] * args[0].stencil->stride[0]);
  base0 = base0+ dat0 *
    args[0].dat->size[0] *
    (start[1] * args[0].stencil->stride[1]);
  p_a[0] = (char *)args[0].data_d + base0;

  long long int base1 = args[1].dat->base_offset + 
           dat1 * 1 * (start[0] * args[1].stencil->stride[0]);
  base1 = base1+ dat1 *
    args[1].dat->size[0] *
    (start[1] * args[1].stencil->stride[1]);
  p_a[1] = (char *)args[1].data_d + base1;

  long long int base2 = args[2].dat->base_offset + 
           dat2 * 1 * (start[0] * args[2].stencil->stride[0]);
  base2 = base2+ dat2 *
    args[2].dat->size[0] *
    (start[1] * args[2].stencil->stride[1]);
  p_a[2] = (char *)args[2].data_d + base2;

  long long int base3 = args[3].dat->base_offset + 
           dat3 * 1 * (start[0] * args[3].stencil->stride[0]);
  base3 = base3+ dat3 *
    args[3].dat->size[0] *
    (start[1] * args[3].stencil->stride[1]);
  p_a[3] = (char *)args[3].data_d + base3;

  long long int base4 = args[4].dat->base_offset + 
           dat4 * 1 * (start[0] * args[4].stencil->stride[0]);
  base4 = base4+ dat4 *
    args[4].dat->size[0] *
    (start[1] * args[4].stencil->stride[1]);
  p_a[4] = (char *)args[4].data_d + base4;

  long long int base5 = args[5].dat->base_offset + 
           dat5 * 1 * (start[0] * args[5].stencil->stride[0]);
  base5 = base5+ dat5 *
    args[5].dat->size[0] *
    (start[1] * args[5].stencil->stride[1]);
  p_a[5] = (char *)args[5].data_d + base5;


  #ifndef OPS_LAZY
  ops_H_D_exchanges_device(args, 7);
  ops_halo_exchanges(args,7,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[0].mpi_time += t2-t1;
  }


  //call kernel wrapper function, passing in pointers to data
  if (x_size > 0 && y_size > 0)
    ops_opensbliblock00Kernel049<<<grid, tblock >>> ( 
     (double *)p_a[0], (double *)p_a[1],
     (double *)p_a[2], (double *)p_a[3],
     (double *)p_a[4], (double *)p_a[5],
     arg_idx[0], arg_idx[1],
    x_size, y_size);

  cutilSafeCall(block->instance->ostream(), cudaGetLastError());

  if (block->instance->OPS_diags>1) {
    cutilSafeCall(block->instance->ostream(), cudaDeviceSynchronize());
    ops_timers_core(&c1,&t1);
    block->instance->OPS_kernels[0].time += t1-t2;
  }

  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 7);
  ops_set_halo_dirtybit3(&args[0],range);
  ops_set_halo_dirtybit3(&args[1],range);
  ops_set_halo_dirtybit3(&args[2],range);
  ops_set_halo_dirtybit3(&args[3],range);
  ops_set_halo_dirtybit3(&args[4],range);
  ops_set_halo_dirtybit3(&args[5],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[0].mpi_time += t2-t1;
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg5);
  }
}

#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel049(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6) {
  ops_arg args[7] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6 };

  //create kernel descriptor and pass it to ops_enqueue_kernel
  create_kerneldesc_and_enque(name, args, 7, 0, dim, 1, range, block, ops_par_loop_opensbliblock00Kernel049_execute);
}
#endif
