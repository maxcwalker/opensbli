//
// auto-generated by ops.py
//
__constant__ int dims_opensbliblock00Kernel066 [7][1];
static int dims_opensbliblock00Kernel066_h [7][1] = {{0}};

//user function
__device__

 void opensbliblock00Kernel066_gpu(ACC<double> &rhoE_B0,
  ACC<double> &rhou1_B0,
  ACC<double> &x0_B0,
  ACC<double> &rhou0_B0,
  ACC<double> &rho_B0,
  ACC<double> &x1_B0,
  const int *idx)
{
   double rhou0 = 0.0;
   double rho = 0.0;
   double rhou1 = 0.0;
   double T = 0.0;
   x0_B0(0,0) = Delta0block0*idx[0];

    x1_B0(0,0) = (rc6)*H*exp(-rcinv5*pow(Delta0block0*idx[0] - rc7*L, 2)) + (H -
      rc6*H*exp(-rcinv5*pow(Delta0block0*idx[0] - rc7*L, 2)))*sinh(Delta1block0*b*rcinv4*idx[1])/sinh(b);

    rhou0 = ((x1_B0(0,0) < 4.97849784978498) ? (
   1.12040675895803e-31*pow(x1_B0(0,0), 50) -
      1.64617224380928e-30*pow(x1_B0(0,0), 49) + 2.62870108682109e-30*pow(x1_B0(0,0), 48) +
      3.39928855109623e-29*pow(x1_B0(0,0), 47) + 6.52089644654981e-29*pow(x1_B0(0,0), 46) -
      4.38634529645538e-28*pow(x1_B0(0,0), 45) - 3.88818512285584e-27*pow(x1_B0(0,0), 44) -
      1.30856760658175e-26*pow(x1_B0(0,0), 43) + 9.3831523377831e-27*pow(x1_B0(0,0), 42) +
      3.82232231443795e-25*pow(x1_B0(0,0), 41) + 2.42163873344882e-24*pow(x1_B0(0,0), 40) +
      7.68652042157374e-24*pow(x1_B0(0,0), 39) - 5.32695482451029e-24*pow(x1_B0(0,0), 38) -
      2.34816367860066e-22*pow(x1_B0(0,0), 37) - 1.61174235136764e-21*pow(x1_B0(0,0), 36) -
      6.03582507699181e-21*pow(x1_B0(0,0), 35) - 3.69195824354356e-21*pow(x1_B0(0,0), 34) +
      1.2963396142951e-19*pow(x1_B0(0,0), 33) + 1.07879118563899e-18*pow(x1_B0(0,0), 32) +
      4.74230390537465e-18*pow(x1_B0(0,0), 31) + 7.18191748192305e-18*pow(x1_B0(0,0), 30) -
      7.23783211517809e-17*pow(x1_B0(0,0), 29) - 7.31734393254316e-16*pow(x1_B0(0,0), 28) -
      3.46123804622998e-15*pow(x1_B0(0,0), 27) - 5.53316938994833e-15*pow(x1_B0(0,0), 26) +
      5.39527666854329e-14*pow(x1_B0(0,0), 25) + 5.32443613615035e-13*pow(x1_B0(0,0), 24) +
      2.21682990533008e-12*pow(x1_B0(0,0), 23) + 3.83395828553926e-13*pow(x1_B0(0,0), 22) -
      5.84846325117166e-11*pow(x1_B0(0,0), 21) - 3.79933869681278e-10*pow(x1_B0(0,0), 20) -
      6.7329423900684e-10*pow(x1_B0(0,0), 19) + 6.69953011916935e-9*pow(x1_B0(0,0), 18) +
      5.41899530458238e-8*pow(x1_B0(0,0), 17) + 7.53741811416735e-8*pow(x1_B0(0,0), 16) -
      1.18095679679628e-6*pow(x1_B0(0,0), 15) - 6.26878130906676e-6*pow(x1_B0(0,0), 14) +
      1.54981250484598e-5*pow(x1_B0(0,0), 13) + 0.000194792003766469*pow(x1_B0(0,0), 12) -
      0.000362812287507265*pow(x1_B0(0,0), 11) - 0.00454247167281625*pow(x1_B0(0,0), 10) +
      0.0264085802897927*pow(x1_B0(0,0), 9) - 0.0683336112518823*pow(x1_B0(0,0), 8) +
      0.10715877779824*pow(x1_B0(0,0), 7) - 0.109002787345017*pow(x1_B0(0,0), 6) +
      0.0702989422874367*pow(x1_B0(0,0), 5) - 0.0512688521906877*pow(x1_B0(0,0), 4) +
      0.0302098296360661*pow(x1_B0(0,0), 3) - 0.000950967297650773*pow(x1_B0(0,0), 2) +
      0.540592211622455*x1_B0(0,0) - 7.41810027442598e-7
)
: (
   0.999999842649273
));

    rhou1 = ((x1_B0(0,0) < 4.97849784978498) ? (
   -1.09003245349175e-33*pow(x1_B0(0,0), 50) +
      1.22963332881994e-32*pow(x1_B0(0,0), 49) + 2.44056217203923e-33*pow(x1_B0(0,0), 48) -
      2.06348934767763e-31*pow(x1_B0(0,0), 47) - 9.10601466407113e-31*pow(x1_B0(0,0), 46) -
      4.43450005585078e-31*pow(x1_B0(0,0), 45) + 1.71255635507746e-29*pow(x1_B0(0,0), 44) +
      1.18178647035439e-28*pow(x1_B0(0,0), 43) + 3.97090031172534e-28*pow(x1_B0(0,0), 42) +
      7.60497465512482e-30*pow(x1_B0(0,0), 41) - 9.27913765763701e-27*pow(x1_B0(0,0), 40) -
      6.76105049972417e-26*pow(x1_B0(0,0), 39) - 2.76516796901416e-25*pow(x1_B0(0,0), 38) -
      4.30246632902277e-25*pow(x1_B0(0,0), 37) + 3.49816996744632e-24*pow(x1_B0(0,0), 36) +
      3.71169197380773e-23*pow(x1_B0(0,0), 35) + 1.96556719480685e-22*pow(x1_B0(0,0), 34) +
      5.79996157602682e-22*pow(x1_B0(0,0), 33) - 4.73324926870791e-22*pow(x1_B0(0,0), 32) -
      1.81629120956119e-20*pow(x1_B0(0,0), 31) - 1.26324259145204e-19*pow(x1_B0(0,0), 30) -
      4.97372268384972e-19*pow(x1_B0(0,0), 29) - 5.33429113163157e-19*pow(x1_B0(0,0), 28) +
      8.70891488331194e-18*pow(x1_B0(0,0), 27) + 7.79951740748941e-17*pow(x1_B0(0,0), 26) +
      3.44944603718394e-16*pow(x1_B0(0,0), 25) + 4.65214979672885e-16*pow(x1_B0(0,0), 24) -
      5.64624825793885e-15*pow(x1_B0(0,0), 23) - 5.09797334093984e-14*pow(x1_B0(0,0), 22) -
      1.95075014697856e-13*pow(x1_B0(0,0), 21) + 6.23420343314538e-14*pow(x1_B0(0,0), 20) +
      5.48059812866576e-12*pow(x1_B0(0,0), 19) + 3.09276992192946e-11*pow(x1_B0(0,0), 18) +
      2.97270889213143e-11*pow(x1_B0(0,0), 17) - 6.52068758622014e-10*pow(x1_B0(0,0), 16) -
      3.80953524026593e-9*pow(x1_B0(0,0), 15) + 1.38525022708385e-9*pow(x1_B0(0,0), 14) +
      1.01726115022539e-7*pow(x1_B0(0,0), 13) + 2.06324351903803e-7*pow(x1_B0(0,0), 12) -
      2.25277175059587e-6*pow(x1_B0(0,0), 11) - 4.28641186087153e-6*pow(x1_B0(0,0), 10) +
      6.14136296005458e-5*pow(x1_B0(0,0), 9) - 0.000200822024340446*pow(x1_B0(0,0), 8) +
      0.000356931166795007*pow(x1_B0(0,0), 7) - 0.000397933947164689*pow(x1_B0(0,0), 6) +
      0.000242958009012651*pow(x1_B0(0,0), 5) - 8.7518210691162e-5*pow(x1_B0(0,0), 4) +
      3.27560586565153e-5*pow(x1_B0(0,0), 3) + 0.00057320222196052*pow(x1_B0(0,0), 2) +
      2.75181955664214e-7*x1_B0(0,0) - 3.94641661590997e-9
)
: (
   0.00213785003134369
));

    T = ((x1_B0(0,0) < 4.97849784978498) ? (
   -3.99963979334487e-32*pow(x1_B0(0,0), 50) +
      5.26943973936009e-31*pow(x1_B0(0,0), 49) - 4.82857207751886e-31*pow(x1_B0(0,0), 48) -
      1.01007040051659e-29*pow(x1_B0(0,0), 47) - 2.77003126323023e-29*pow(x1_B0(0,0), 46) +
      8.00209158782686e-29*pow(x1_B0(0,0), 45) + 1.04931740177004e-27*pow(x1_B0(0,0), 44) +
      4.50590524315619e-27*pow(x1_B0(0,0), 43) + 4.52394274178731e-27*pow(x1_B0(0,0), 42) -
      7.58711897936253e-26*pow(x1_B0(0,0), 41) - 6.30279144983186e-25*pow(x1_B0(0,0), 40) -
      2.61050040826575e-24*pow(x1_B0(0,0), 39) - 3.35745693522357e-24*pow(x1_B0(0,0), 38) +
      3.98425505989108e-23*pow(x1_B0(0,0), 37) + 3.76214851049861e-22*pow(x1_B0(0,0), 36) +
      1.78961233273755e-21*pow(x1_B0(0,0), 35) + 3.84545329100199e-21*pow(x1_B0(0,0), 34) -
      1.664020707376e-20*pow(x1_B0(0,0), 33) - 2.22156669286193e-19*pow(x1_B0(0,0), 32) -
      1.22908916267338e-18*pow(x1_B0(0,0), 31) - 3.4063892799288e-18*pow(x1_B0(0,0), 30) +
      6.6597531611825e-18*pow(x1_B0(0,0), 29) + 1.3749495582018e-16*pow(x1_B0(0,0), 28) +
      8.24661026893089e-16*pow(x1_B0(0,0), 27) + 2.30607153565108e-15*pow(x1_B0(0,0), 26) -
      5.46419491653124e-15*pow(x1_B0(0,0), 25) - 9.91561004128263e-14*pow(x1_B0(0,0), 24) -
      5.28759645607252e-13*pow(x1_B0(0,0), 23) - 8.49909268447769e-13*pow(x1_B0(0,0), 22) +
      8.75332518473403e-12*pow(x1_B0(0,0), 21) + 7.70275041929402e-11*pow(x1_B0(0,0), 20) +
      2.1723633725296e-10*pow(x1_B0(0,0), 19) - 8.82383666813153e-10*pow(x1_B0(0,0), 18) -
      1.04572282480761e-8*pow(x1_B0(0,0), 17) - 2.49743253107607e-8*pow(x1_B0(0,0), 16) +
      1.81257712886885e-7*pow(x1_B0(0,0), 15) + 1.29224922693375e-6*pow(x1_B0(0,0), 14) -
      1.57174329246904e-6*pow(x1_B0(0,0), 13) - 3.65123456908424e-5*pow(x1_B0(0,0), 12) +
      3.6724978272315e-5*pow(x1_B0(0,0), 11) + 0.000861767245833591*pow(x1_B0(0,0), 10) -
      0.00429817425357679*pow(x1_B0(0,0), 9) + 0.0100831069009663*pow(x1_B0(0,0), 8) -
      0.0147953043462663*pow(x1_B0(0,0), 7) + 0.0141130192862291*pow(x1_B0(0,0), 6) -
      0.00610116051397934*pow(x1_B0(0,0), 5) + 0.00282172215667811*pow(x1_B0(0,0), 4) -
      0.000832096282215353*pow(x1_B0(0,0), 3) - 0.0381899646473647*pow(x1_B0(0,0), 2) -
      5.92688310761302e-6*x1_B0(0,0) + 1.1224249005153
)
: (
   1.00000015154315
));

   rho = 1.0/T;

   rho_B0(0,0) = rho;

   rhou0_B0(0,0) = rhou0;

   rhou1_B0(0,0) = rhou1;

   rhoE_B0(0,0) = rcinv10*rcinv8*rcinv9*T*rho + (0.5*pow(rhou0, 2) + 0.5*pow(rhou1, 2))/rho;

}



__global__ void ops_opensbliblock00Kernel066(
double* __restrict arg0,
double* __restrict arg1,
double* __restrict arg2,
double* __restrict arg3,
double* __restrict arg4,
double* __restrict arg5,
int arg_idx0, int arg_idx1,
int size0,
int size1 ){

  //Make sure constants are not optimized out
  if (size0==-1) dims_opensbliblock00Kernel066[0][0]=0;


  int idx_y = hipBlockDim_y * hipBlockIdx_y + hipThreadIdx_y;
  int idx_x = hipBlockDim_x * hipBlockIdx_x + hipThreadIdx_x;

  int arg_idx[2];
  arg_idx[0] = arg_idx0+idx_x;
  arg_idx[1] = arg_idx1+idx_y;
  arg0 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel066[0][0];
  arg1 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel066[1][0];
  arg2 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel066[2][0];
  arg3 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel066[3][0];
  arg4 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel066[4][0];
  arg5 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel066[5][0];

  if (idx_x < size0 && idx_y < size1) {
    ACC<double> argp0(dims_opensbliblock00Kernel066[0][0], arg0);
    ACC<double> argp1(dims_opensbliblock00Kernel066[1][0], arg1);
    ACC<double> argp2(dims_opensbliblock00Kernel066[2][0], arg2);
    ACC<double> argp3(dims_opensbliblock00Kernel066[3][0], arg3);
    ACC<double> argp4(dims_opensbliblock00Kernel066[4][0], arg4);
    ACC<double> argp5(dims_opensbliblock00Kernel066[5][0], arg5);
    opensbliblock00Kernel066_gpu(argp0, argp1, argp2, argp3,
                   argp4, argp5, arg_idx);
  }

}

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel066(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6) {
#else
void ops_par_loop_opensbliblock00Kernel066_execute(ops_kernel_descriptor *desc) {
  int dim = desc->dim;
  #if OPS_MPI
  ops_block block = desc->block;
  #endif
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  #endif

  //Timing
  double t1,t2,c1,c2;

  ops_arg args[7] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6};


  #if CHECKPOINTING && !OPS_LAZY
  if (!ops_checkpointing_before(args,7,range,0)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,0,"opensbliblock00Kernel066");
    block->instance->OPS_kernels[0].count++;
    ops_timers_core(&c1,&t1);
  }

  //compute locally allocated range for the sub-block
  int start[2];
  int end[2];
  #if OPS_MPI && !OPS_LAZY
  sub_block_list sb = OPS_sub_block_list[block->index];
  #endif //OPS_MPI

  int arg_idx[2];
  #ifdef OPS_MPI
  if (compute_ranges(args, 7,block, range, start, end, arg_idx) < 0) return;
  #else //OPS_MPI
  for ( int n=0; n<2; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
    arg_idx[n] = start[n];
  }
  #endif
  int xdim0 = args[0].dat->size[0];
  int xdim1 = args[1].dat->size[0];
  int xdim2 = args[2].dat->size[0];
  int xdim3 = args[3].dat->size[0];
  int xdim4 = args[4].dat->size[0];
  int xdim5 = args[5].dat->size[0];

  if (xdim0 != dims_opensbliblock00Kernel066_h[0][0] || xdim1 != dims_opensbliblock00Kernel066_h[1][0] || xdim2 != dims_opensbliblock00Kernel066_h[2][0] || xdim3 != dims_opensbliblock00Kernel066_h[3][0] || xdim4 != dims_opensbliblock00Kernel066_h[4][0] || xdim5 != dims_opensbliblock00Kernel066_h[5][0]) {
    dims_opensbliblock00Kernel066_h[0][0] = xdim0;
    dims_opensbliblock00Kernel066_h[1][0] = xdim1;
    dims_opensbliblock00Kernel066_h[2][0] = xdim2;
    dims_opensbliblock00Kernel066_h[3][0] = xdim3;
    dims_opensbliblock00Kernel066_h[4][0] = xdim4;
    dims_opensbliblock00Kernel066_h[5][0] = xdim5;
    hipSafeCall(block->instance->ostream(), hipMemcpyToSymbol(HIP_SYMBOL(dims_opensbliblock00Kernel066), dims_opensbliblock00Kernel066_h, sizeof(dims_opensbliblock00Kernel066)));
  }



  int x_size = MAX(0,end[0]-start[0]);
  int y_size = MAX(0,end[1]-start[1]);

  dim3 grid( (x_size-1)/block->instance->OPS_block_size_x+ 1, (y_size-1)/block->instance->OPS_block_size_y + 1, 1);
  dim3 tblock(block->instance->OPS_block_size_x,block->instance->OPS_block_size_y,block->instance->OPS_block_size_z);



  long long int dat0 = (block->instance->OPS_soa ? args[0].dat->type_size : args[0].dat->elem_size);
  long long int dat1 = (block->instance->OPS_soa ? args[1].dat->type_size : args[1].dat->elem_size);
  long long int dat2 = (block->instance->OPS_soa ? args[2].dat->type_size : args[2].dat->elem_size);
  long long int dat3 = (block->instance->OPS_soa ? args[3].dat->type_size : args[3].dat->elem_size);
  long long int dat4 = (block->instance->OPS_soa ? args[4].dat->type_size : args[4].dat->elem_size);
  long long int dat5 = (block->instance->OPS_soa ? args[5].dat->type_size : args[5].dat->elem_size);

  char *p_a[7];

  //set up initial pointers
  long long int base0 = args[0].dat->base_offset + 
           dat0 * 1 * (start[0] * args[0].stencil->stride[0]);
  base0 = base0+ dat0 *
    args[0].dat->size[0] *
    (start[1] * args[0].stencil->stride[1]);
  p_a[0] = (char *)args[0].data_d + base0;

  long long int base1 = args[1].dat->base_offset + 
           dat1 * 1 * (start[0] * args[1].stencil->stride[0]);
  base1 = base1+ dat1 *
    args[1].dat->size[0] *
    (start[1] * args[1].stencil->stride[1]);
  p_a[1] = (char *)args[1].data_d + base1;

  long long int base2 = args[2].dat->base_offset + 
           dat2 * 1 * (start[0] * args[2].stencil->stride[0]);
  base2 = base2+ dat2 *
    args[2].dat->size[0] *
    (start[1] * args[2].stencil->stride[1]);
  p_a[2] = (char *)args[2].data_d + base2;

  long long int base3 = args[3].dat->base_offset + 
           dat3 * 1 * (start[0] * args[3].stencil->stride[0]);
  base3 = base3+ dat3 *
    args[3].dat->size[0] *
    (start[1] * args[3].stencil->stride[1]);
  p_a[3] = (char *)args[3].data_d + base3;

  long long int base4 = args[4].dat->base_offset + 
           dat4 * 1 * (start[0] * args[4].stencil->stride[0]);
  base4 = base4+ dat4 *
    args[4].dat->size[0] *
    (start[1] * args[4].stencil->stride[1]);
  p_a[4] = (char *)args[4].data_d + base4;

  long long int base5 = args[5].dat->base_offset + 
           dat5 * 1 * (start[0] * args[5].stencil->stride[0]);
  base5 = base5+ dat5 *
    args[5].dat->size[0] *
    (start[1] * args[5].stencil->stride[1]);
  p_a[5] = (char *)args[5].data_d + base5;


  #ifndef OPS_LAZY
  ops_H_D_exchanges_device(args, 7);
  ops_halo_exchanges(args,7,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[0].mpi_time += t2-t1;
  }


  //call kernel wrapper function, passing in pointers to data
  if (x_size > 0 && y_size > 0)
    hipLaunchKernelGGL(ops_opensbliblock00Kernel066,grid ,tblock ,0 ,0 , (double *)p_a[0], (double *)p_a[1],
         (double *)p_a[2], (double *)p_a[3],
         (double *)p_a[4], (double *)p_a[5],
         arg_idx[0], arg_idx[1],x_size, y_size);

  hipSafeCall(block->instance->ostream(), hipGetLastError());

  if (block->instance->OPS_diags>1) {
    hipSafeCall(block->instance->ostream(), hipDeviceSynchronize());
    ops_timers_core(&c1,&t1);
    block->instance->OPS_kernels[0].time += t1-t2;
  }

  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 7);
  ops_set_halo_dirtybit3(&args[0],range);
  ops_set_halo_dirtybit3(&args[1],range);
  ops_set_halo_dirtybit3(&args[2],range);
  ops_set_halo_dirtybit3(&args[3],range);
  ops_set_halo_dirtybit3(&args[4],range);
  ops_set_halo_dirtybit3(&args[5],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[0].mpi_time += t2-t1;
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg5);
  }
}

#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel066(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3, ops_arg arg4, ops_arg arg5, ops_arg arg6) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)calloc(1,sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 1;
  desc->index = 0;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 0;
  for ( int i=0; i<4; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 7;
  desc->args = (ops_arg*)malloc(7*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg2.dat->index;
  desc->args[3] = arg3;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg3.dat->index;
  desc->args[4] = arg4;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg4.dat->index;
  desc->args[5] = arg5;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg5.dat->index;
  desc->args[6] = arg6;
  desc->function = ops_par_loop_opensbliblock00Kernel066_execute;
  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,0,"opensbliblock00Kernel066");
  }
  ops_enqueue_kernel(desc);
}
#endif
