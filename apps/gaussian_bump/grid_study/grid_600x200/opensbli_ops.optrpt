Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1] opensbli_ops.cpp(491,1)
  -> defdec_data_set.h:(8,8) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(17,10) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(26,10) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(35,10) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(44,10) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(53,11) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(62,9) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(71,8) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(80,16) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(89,16) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(98,16) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(107,16) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(116,10) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(125,11) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(134,12) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(143,12) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(152,12) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(161,12) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(170,12) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(179,12) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(188,12) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(197,12) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(206,12) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(215,12) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(224,8) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(233,17) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(242,18) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(251,19) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(260,19) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(269,9) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(278,9) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(287,9) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(296,9) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(305,10) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(314,11) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(323,11) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(332,11) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(341,11) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(350,11) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(359,11) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(368,11) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(377,10) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(386,10) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(395,10) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(404,10) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(413,10) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(422,10) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(431,10) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(440,10) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(449,10) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(458,9) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(467,9) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> INLINE: (508,9) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (511,9) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (517,10) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (521,10) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (558,22) ops_decl_const2<int>(const char *, int, const char *, int *)
  -> (558,64) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,103) ops_decl_const2<int>(const char *, int, const char *, int *)
  -> (558,153) ops_decl_const2<int>(const char *, int, const char *, int *)
  -> (558,203) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,262) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,321) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,366) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,409) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,454) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,497) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,540) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,579) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,618) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,669) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,714) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,759) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,804) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,849) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,886) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,923) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,960) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,997) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,1044) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,1091) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,1132) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,1173) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,1220) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,1267) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,1316) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,1359) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,1402) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,1445) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,1488) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,1531) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,1574) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,1617) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,1666) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,1715) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,1758) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,1801) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,1844) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,1887) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,1930) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,1973) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,2016) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,2059) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,2102) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,2145) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,2188) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,2231) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,2274) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,2317) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,2360) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,2409) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,2452) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,2495) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,2538) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,2581) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,2624) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,2673) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> (558,2716) ops_decl_const2<double>(const char *, int, const char *, double *)
  -> INLINE: (726,4) std::fmod<int, int>(int, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (988,52) ops_arg_gbl<double>(double *, int, const char *, ops_access)
  -> (989,52) ops_arg_gbl<double>(double *, int, const char *, ops_access)
  -> INLINE: (1017,5) std::fmod<int, int>(int, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (1031,1) ops_reduction_result<double>(ops_reduction, double *)
  -> (1039,1) ops_reduction_result<double>(ops_reduction, double *)
  -> (1047,1) ops_reduction_result<double>(ops_reduction, double *)
  -> (1055,1) ops_reduction_result<double>(ops_reduction, double *)
  -> (1063,1) ops_reduction_result<double>(ops_reduction, double *)
  -> (1071,1) ops_reduction_result<double>(ops_reduction, double *)
  -> INLINE: (1075,5) std::fmod<int, int>(int, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at opensbli_ops.cpp(724,1)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at opensbli_ops.cpp(755,1)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between iteration_range_7_block0[0] (757:32) and iteration_range_65_block0 (1010:82)
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

defdec_data_set.h(6,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(15,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(24,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(33,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(42,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(51,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(60,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(69,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(75,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(76,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(78,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(84,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(85,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(87,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(93,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(94,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(96,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(102,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(103,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(105,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(114,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(123,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(132,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(141,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(150,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(159,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(168,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(177,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(186,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(195,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(204,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(213,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(222,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(228,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(229,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(231,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(237,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(238,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(240,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(246,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(247,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(249,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(255,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(256,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(258,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(267,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(276,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(285,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(294,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(303,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(312,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(321,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(330,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(339,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(348,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(357,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(366,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(375,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(384,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(393,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(402,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(411,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(420,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(429,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(438,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(447,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(456,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(465,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(563,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(565,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
opensbli_ops.cpp(567,24):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(569,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
opensbli_ops.cpp(571,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(573,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
opensbli_ops.cpp(575,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
opensbli_ops.cpp(577,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
opensbli_ops.cpp(579,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
opensbli_ops.cpp(581,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
opensbli_ops.cpp(583,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
opensbli_ops.cpp(585,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
opensbli_ops.cpp(587,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
opensbli_ops.cpp(589,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
opensbli_ops.cpp(591,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
opensbli_ops.cpp(596,33):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(596,75):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(596,75):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(596,75):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(596,75):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(596,75):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(596,75):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(596,75):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(605,33):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(605,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(605,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(605,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(610,33):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(610,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(610,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(610,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(615,33):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(615,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(615,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(615,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(620,33):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(620,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(620,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(620,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(625,33):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(625,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(625,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(625,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(625,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(625,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(625,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(625,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(625,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(625,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(636,33):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(636,62):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(636,62):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(636,62):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(636,62):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(636,62):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(643,33):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(643,82):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(643,82):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(643,82):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(643,82):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(643,82):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(650,33):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(650,62):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(650,62):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(650,62):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(650,62):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(650,62):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(657,33):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(657,82):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(657,82):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(657,82):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(657,82):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(657,82):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(664,33):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(664,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(664,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(664,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(669,33):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(669,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(669,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(669,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(674,33):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(674,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(674,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(674,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(679,33):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(679,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(679,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(679,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(684,33):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(684,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(684,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(684,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(689,33):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(689,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(689,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(689,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(694,33):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(694,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(694,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(694,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(699,33):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(699,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(699,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(699,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(704,33):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(704,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(704,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(704,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(704,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(704,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(704,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(704,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(704,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(704,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(704,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(704,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(704,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(704,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(704,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(704,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(704,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(730,62):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(730,62):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(730,62):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(730,62):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(736,82):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(736,82):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(736,82):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(736,82):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(742,62):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(742,62):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(742,62):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(742,62):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(742,62):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(749,82):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(749,82):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(749,82):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(749,82):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(757,74):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(757,74):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(757,74):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(762,74):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(762,74):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(762,74):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(767,69):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(767,69):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(767,69):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(767,69):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(767,69):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(774,75):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(774,75):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(774,75):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(774,75):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(774,75):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(781,70):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(781,70):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(781,70):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(781,70):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(781,70):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(788,75):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(788,75):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(788,75):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(793,75):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(793,75):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(793,75):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(798,75):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(798,75):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(802,69):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(802,69):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(802,69):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(802,69):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(802,69):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(802,69):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(802,69):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(802,69):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(802,69):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(802,69):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(802,69):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(802,69):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(802,69):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(802,69):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(802,69):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(802,69):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(820,69):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(820,69):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(820,69):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(820,69):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(820,69):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(820,69):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(820,69):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(820,69):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(820,69):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(820,69):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(820,69):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(820,69):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(820,69):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(820,69):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(820,69):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(820,69):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(838,33):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(838,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(838,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(838,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(838,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(838,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(838,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(838,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(838,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(838,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(838,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(838,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(838,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(838,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(853,33):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(853,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(853,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(853,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(858,70):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(858,70):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(858,70):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(863,33):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(863,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(863,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(863,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(868,33):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(868,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(868,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(868,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(873,70):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(873,70):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(873,70):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(878,33):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(878,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(878,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(878,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(883,33):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(883,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(883,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(883,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(888,33):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(888,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(888,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(888,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(893,70):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(893,70):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(893,70):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(898,33):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(898,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(898,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(898,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(903,33):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(903,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(903,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(903,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(908,33):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(908,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(908,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(908,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(913,33):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(913,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(913,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(913,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(918,33):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(918,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(918,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(918,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(923,33):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(923,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(923,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(923,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(928,33):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(928,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(928,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(928,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(933,33):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(933,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(933,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(933,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(938,33):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(938,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(938,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(938,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(938,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(938,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(938,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(938,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(938,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(938,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(938,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(938,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(938,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(938,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(938,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(938,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(938,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(938,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(938,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(938,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(938,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(938,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(938,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(938,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(938,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(938,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(938,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(938,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(938,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(938,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(938,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(938,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(938,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(938,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(938,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(938,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(975,33):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(975,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(975,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(975,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(975,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(975,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(975,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(975,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(975,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(975,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(975,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(975,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(975,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(975,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(975,65):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(991,62):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(991,62):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(991,62):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(991,62):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(997,82):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(997,82):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(997,82):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(997,82):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(1003,62):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(1003,62):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(1003,62):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(1003,62):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(1003,62):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(1010,82):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(1010,82):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(1010,82):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(1010,82):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(1022,28):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(1028,52):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(1028,52):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(1036,52):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(1036,52):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(1044,52):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(1044,52):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(1052,52):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(1052,52):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(1060,52):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(1060,52):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(1068,52):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(1068,52):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(491,1):remark #34051: REGISTER ALLOCATION : [main] opensbli_ops.cpp:491

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   46[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm31]
        
    Routine temporaries
        Total         :    5283
            Global    :     460
            Local     :    4823
        Regenerable   :    2875
        Spilled       :      72
        
    Routine stack
        Variables     :   20924 bytes*
            Reads     :     934 [1.76e+01 ~ 17.6%]
            Writes    :     610 [4.52e+00 ~ 4.5%]
        Spills        :     536 bytes*
            Reads     :     356 [6.41e+00 ~ 6.4%]
            Writes    :      68 [1.88e-01 ~ 0.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: ops_reduction_result<double>(ops_reduction, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ops_reduction_result<double>(ops_reduction, double *)) [2] /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_lib_core.h(890,76)
  -> INLINE: (891,7) type_error(const double *, const char *)
  -> (892,21) OPSException::~OPSException(OPSException *)
  -> INLINE: (892,21) OPSException::OPSException(OPSException *, int)
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(76,5) std::exception::exception(std::exception *const)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(76,5) std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>>::basic_stringstream(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>> *const)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(76,5) std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (893,8) OPSException::operator<<<char [46]>(OPSException *, const char (&)[46])
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(88,8) OPSException::insert(OPSException *, const char *)
      -> (96,12) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> INLINE: (893,59) OPSException::operator<<<char *>(OPSException *, char *const &)
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(88,8) OPSException::insert<char *>(OPSException *, char *const &)
      -> (104,21) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
      -> (111,12) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> INLINE: (893,75) OPSException::operator<<<char [25]>(OPSException *, const char (&)[25])
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(88,8) OPSException::insert(OPSException *, const char *)
      -> (96,12) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> INLINE: (894,11) OPSException::OPSException(OPSException *, const OPSException &)
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(77,5) std::exception::exception(std::exception *const)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(77,5) std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>>::basic_stringstream(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>> *const)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(77,5) std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(77,5) std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_stringstream(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>> *const)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(77,5) std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(82,22) std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>>::rdbuf(const std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>> *) const
  -> (897,21) OPSException::~OPSException(OPSException *)
  -> INLINE: (897,21) OPSException::OPSException(OPSException *, int)
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(76,5) std::exception::exception(std::exception *const)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(76,5) std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>>::basic_stringstream(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>> *const)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(76,5) std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (898,8) OPSException::operator<<<char [40]>(OPSException *, const char (&)[40])
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(88,8) OPSException::insert(OPSException *, const char *)
      -> (96,12) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> INLINE: (898,53) OPSException::operator<<<char *>(OPSException *, char *const &)
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(88,8) OPSException::insert<char *>(OPSException *, char *const &)
      -> (104,21) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
      -> (111,12) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> INLINE: (898,69) OPSException::operator<<<char [97]>(OPSException *, const char (&)[97])
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(88,8) OPSException::insert(OPSException *, const char *)
      -> (96,12) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> INLINE: (899,11) OPSException::OPSException(OPSException *, const OPSException &)
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(77,5) std::exception::exception(std::exception *const)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(77,5) std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>>::basic_stringstream(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>> *const)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(77,5) std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(77,5) std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_stringstream(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>> *const)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(77,5) std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(82,22) std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>>::rdbuf(const std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>> *) const


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/bits/basic_ios.h(460,7) inlined into /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_lib_core.h(895,11)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at /mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/bits/basic_ios.h(460,7) inlined into /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_lib_core.h(895,11)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at /mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/bits/basic_ios.h(460,7) inlined into /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_lib_core.h(895,11)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at /mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/bits/basic_ios.h(460,7) inlined into /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_lib_core.h(895,11)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at /mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/streambuf(470,7) inlined into /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_lib_core.h(895,11)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at /mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/streambuf(470,7) inlined into /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_lib_core.h(895,11)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at /mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/bits/basic_ios.h(460,7) inlined into /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_lib_core.h(900,11)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at /mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/bits/basic_ios.h(460,7) inlined into /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_lib_core.h(900,11)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at /mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/bits/basic_ios.h(460,7) inlined into /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_lib_core.h(900,11)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at /mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/bits/basic_ios.h(460,7) inlined into /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_lib_core.h(900,11)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at /mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/streambuf(470,7) inlined into /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_lib_core.h(900,11)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at /mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/streambuf(470,7) inlined into /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_lib_core.h(900,11)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 2  
LOOP END

    Report from: Code generation optimizations [cg]

/research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h(79,7):remark #34026: call to memcpy implemented as a call to optimized library version
/research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h(79,7):remark #34026: call to memcpy implemented as a call to optimized library version
/research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_lib_core.h(890,76):remark #34051: REGISTER ALLOCATION : [_Z20ops_reduction_resultIdEvP18ops_reduction_corePT_] /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_lib_core.h:890

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :     495
            Global    :      51
            Local     :     444
        Regenerable   :     125
        Spilled       :       7
        
    Routine stack
        Variables     :    5056 bytes*
            Reads     :      34 [4.26e+00 ~ 4.3%]
            Writes    :     118 [1.65e+01 ~ 16.5%]
        Spills        :      16 bytes*
            Reads     :       5 [1.52e-01 ~ 0.2%]
            Writes    :       2 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char>>::~basic_stringbuf(std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char>> *)

    Report from: Code generation optimizations [cg]

/mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/iosfwd(96,11):remark #34051: REGISTER ALLOCATION : [_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEED1Ev] /mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/iosfwd:96

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdi r12]
        
    Routine temporaries
        Total         :      13
            Global    :       8
            Local     :       5
        Regenerable   :       0
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::char_traits<char>::length(const std::char_traits<char>::char_type *)

    Report from: Code generation optimizations [cg]

/mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/bits/char_traits.h(366,7):remark #34051: REGISTER ALLOCATION : [_ZNSt11char_traitsIcE6lengthEPKc] /mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/bits/char_traits.h:366

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      12
            Global    :       7
            Local     :       5
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: OPSException::~OPSException(OPSException *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (OPSException::~OPSException(OPSException *)) [9] /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h(75,37)
  -> INLINE: (75,38) std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_stringstream(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (75,38) std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

/research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h(75,37):remark #34051: REGISTER ALLOCATION : [_ZN12OPSExceptionD1Ev] /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:75

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rsi rdi r8 r13-r14]
        
    Routine temporaries
        Total         :      57
            Global    :      12
            Local     :      45
        Regenerable   :       4
        Spilled       :       2
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       3 [0.00e+00 ~ 0.0%]
            Writes    :       3 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::pointer_traits<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::const_pointer>::pointer_to(std::__make_not_void<std::pointer_traits<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::const_pointer>::element_type> &)

    Report from: Code generation optimizations [cg]

/mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/bits/ptr_traits.h(147,7):remark #34051: REGISTER ALLOCATION : [_ZNSt14pointer_traitsIPKcE10pointer_toERS0_] /mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/bits/ptr_traits.h:147

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rax rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: ops_arg_gbl<double>(double *, int, const char *, ops_access)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ops_arg_gbl<double>(double *, int, const char *, ops_access)) [11] /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_lib_core.h(761,73)


    Report from: Code generation optimizations [cg]

/research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_lib_core.h(763,57):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
/research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_lib_core.h(761,73):remark #34051: REGISTER ALLOCATION : [_Z11ops_arg_gblIdE7ops_argPT_iPKci] /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_lib_core.h:761

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rsi rdi r8 r12 zmm0-zmm1]
        
    Routine temporaries
        Total         :      25
            Global    :       7
            Local     :      18
        Regenerable   :       3
        Spilled       :       1
        
    Routine stack
        Variables     :      56 bytes*
            Reads     :       3 [1.03e+01 ~ 10.3%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)) [12] /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_lib_core.h(657,40)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_lib_core.h(660,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_lib_core.h(660,3)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

    Report from: Code generation optimizations [cg]

/research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_lib_core.h(657,40):remark #34051: REGISTER ALLOCATION : [_Z12ops_decl_datIdEP12ops_dat_coreP14ops_block_coreiPiS4_S4_S4_PT_PKcS8_] /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_lib_core.h:657

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rsi rdi r8-r11 zmm0]
        
    Routine temporaries
        Total         :      32
            Global    :       8
            Local     :      24
        Regenerable   :       5
        Spilled       :       0
        
    Routine stack
        Variables     :      20 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [6.06e+00 ~ 6.1%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: ops_decl_const2<double>(const char *, int, const char *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ops_decl_const2<double>(const char *, int, const char *, double *)) [13] /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_internal2.h(394,76)
  -> INLINE: (395,7) type_error(const double *, const char *)
  -> (396,21) OPSException::~OPSException(OPSException *)
  -> INLINE: (396,21) OPSException::OPSException(OPSException *, int)
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(76,5) std::exception::exception(std::exception *const)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(76,5) std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>>::basic_stringstream(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>> *const)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(76,5) std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (397,8) OPSException::operator<<<char [46]>(OPSException *, const char (&)[46])
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(88,8) OPSException::insert(OPSException *, const char *)
      -> (96,12) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> INLINE: (397,59) OPSException::operator<<<const char *>(OPSException *, const char *const &)
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(88,8) OPSException::insert(OPSException *, const char *)
      -> (96,12) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> INLINE: (398,11) OPSException::OPSException(OPSException *, const OPSException &)
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(77,5) std::exception::exception(std::exception *const)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(77,5) std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>>::basic_stringstream(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>> *const)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(77,5) std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(77,5) std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_stringstream(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>> *const)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(77,5) std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(82,22) std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>>::rdbuf(const std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>> *) const


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/bits/basic_ios.h(460,7) inlined into /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_internal2.h(399,11)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at /mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/bits/basic_ios.h(460,7) inlined into /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_internal2.h(399,11)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at /mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/bits/basic_ios.h(460,7) inlined into /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_internal2.h(399,11)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at /mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/bits/basic_ios.h(460,7) inlined into /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_internal2.h(399,11)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at /mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/streambuf(470,7) inlined into /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_internal2.h(399,11)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at /mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/streambuf(470,7) inlined into /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_internal2.h(399,11)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 2  
LOOP END

    Report from: Code generation optimizations [cg]

/research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h(79,7):remark #34026: call to memcpy implemented as a call to optimized library version
/research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_internal2.h(394,76):remark #34051: REGISTER ALLOCATION : [_Z15ops_decl_const2IdEvPKciS1_PT_] /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_internal2.h:394

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :     252
            Global    :      31
            Local     :     221
        Regenerable   :      57
        Spilled       :       6
        
    Routine stack
        Variables     :    2536 bytes*
            Reads     :      15 [3.30e+00 ~ 3.3%]
            Writes    :      57 [1.58e+01 ~ 15.8%]
        Spills        :       8 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: ops_decl_const2<int>(const char *, int, const char *, int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ops_decl_const2<int>(const char *, int, const char *, int *)) [14] /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_internal2.h(394,76)
  -> INLINE: (395,7) type_error(const int *, const char *)
  -> (396,21) OPSException::~OPSException(OPSException *)
  -> INLINE: (396,21) OPSException::OPSException(OPSException *, int)
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(76,5) std::exception::exception(std::exception *const)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(76,5) std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>>::basic_stringstream(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>> *const)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(76,5) std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (397,8) OPSException::operator<<<char [46]>(OPSException *, const char (&)[46])
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(88,8) OPSException::insert(OPSException *, const char *)
      -> (96,12) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> INLINE: (397,59) OPSException::operator<<<const char *>(OPSException *, const char *const &)
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(88,8) OPSException::insert(OPSException *, const char *)
      -> (96,12) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> INLINE: (398,11) OPSException::OPSException(OPSException *, const OPSException &)
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(77,5) std::exception::exception(std::exception *const)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(77,5) std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>>::basic_stringstream(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>> *const)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(77,5) std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(77,5) std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_stringstream(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>> *const)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(77,5) std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:(82,22) std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>>::rdbuf(const std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>> *) const


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/bits/basic_ios.h(460,7) inlined into /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_internal2.h(399,11)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at /mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/bits/basic_ios.h(460,7) inlined into /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_internal2.h(399,11)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at /mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/bits/basic_ios.h(460,7) inlined into /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_internal2.h(399,11)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at /mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/bits/basic_ios.h(460,7) inlined into /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_internal2.h(399,11)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at /mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/streambuf(470,7) inlined into /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_internal2.h(399,11)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at /mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/streambuf(470,7) inlined into /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_internal2.h(399,11)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 2  
LOOP END

    Report from: Code generation optimizations [cg]

/research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h(79,7):remark #34026: call to memcpy implemented as a call to optimized library version
/research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_internal2.h(394,76):remark #34051: REGISTER ALLOCATION : [_Z15ops_decl_const2IiEvPKciS1_PT_] /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_internal2.h:394

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :     252
            Global    :      31
            Local     :     221
        Regenerable   :      57
        Spilled       :       6
        
    Routine stack
        Variables     :    2536 bytes*
            Reads     :      15 [3.30e+00 ~ 3.3%]
            Writes    :      57 [1.58e+01 ~ 15.8%]
        Spills        :       8 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel066(double *, double *, double *, double *, double *, double *, const int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel066(double *, double *, double *, double *, double *, double *, const int *)) [15] opensbliblock00_kernels.h(5,1)
  -> INLINE: (12,48) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (13,25) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (16,25) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (17,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (17,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (18,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (18,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (19,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (19,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (20,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (20,80) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (21,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (21,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (22,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (22,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (23,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (23,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (24,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (24,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (25,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (25,80) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (26,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (26,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (27,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (27,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (28,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (28,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (29,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (29,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (30,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (30,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (31,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (31,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (32,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (32,79) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (33,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (33,79) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (34,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (34,79) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (35,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (35,80) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (36,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (36,80) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (37,26) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (37,76) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (38,24) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (38,73) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (39,26) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (39,76) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (40,26) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (40,78) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (48,26) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (49,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (49,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (50,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (50,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (51,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (51,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (52,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (52,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (53,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (53,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (54,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (54,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (55,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (55,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (56,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (56,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (57,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (57,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (58,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (58,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (59,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (59,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (60,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (60,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (61,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (61,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (62,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (62,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (63,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (63,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (64,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (64,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (65,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (65,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (66,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (66,79) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (67,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (67,79) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (68,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (68,79) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (69,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (69,79) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (70,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (70,80) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (71,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (71,78) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (72,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (72,78) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (80,26) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (81,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (81,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (82,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (82,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (83,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (83,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (84,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (84,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (85,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (85,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (86,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (86,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (87,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (87,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (88,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (88,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (89,26) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (89,79) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (90,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (90,80) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (91,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (91,79) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (92,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (92,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (93,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (93,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (94,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (94,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (95,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (95,81) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (96,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (96,80) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (97,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (97,79) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (98,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (98,79) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (99,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (99,79) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (100,26) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (100,79) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (101,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (101,77) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (102,26) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (102,76) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (103,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (103,78) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (104,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (104,78) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (119,64) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (119,84) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(5,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel066PdS_S_S_S_S_PKi] opensbliblock00_kernels.h:5

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   44[ rax rdx rcx rbx rsi rdi r8-r9 r12-r15 zmm0-zmm31]
        
    Routine temporaries
        Total         :     338
            Global    :      25
            Local     :     313
        Regenerable   :      16
        Spilled       :      12
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      56 bytes*
            Reads     :       8 [4.93e+00 ~ 4.9%]
            Writes    :       7 [4.31e+00 ~ 4.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel067(const double *, double *, const int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel067(const double *, double *, const int *)) [16] opensbliblock00_kernels.h(124,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(124,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel067PKdPdPKi] opensbliblock00_kernels.h:124

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rsi rdi zmm0-zmm5]
        
    Routine temporaries
        Total         :      52
            Global    :      14
            Local     :      38
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel068(const double *, double *, const int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel068(const double *, double *, const int *)) [17] opensbliblock00_kernels.h(142,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(142,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel068PKdPdPKi] opensbliblock00_kernels.h:142

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rsi rdi zmm0-zmm4]
        
    Routine temporaries
        Total         :      52
            Global    :      14
            Local     :      38
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel069(const double *, double *, const int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel069(const double *, double *, const int *)) [18] opensbliblock00_kernels.h(160,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(160,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel069PKdPdPKi] opensbliblock00_kernels.h:160

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rsi rdi zmm0-zmm4]
        
    Routine temporaries
        Total         :      59
            Global    :      11
            Local     :      48
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel070(const double *, double *, const int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel070(const double *, double *, const int *)) [19] opensbliblock00_kernels.h(188,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(188,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel070PKdPdPKi] opensbliblock00_kernels.h:188

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rsi rdi zmm0-zmm4]
        
    Routine temporaries
        Total         :      59
            Global    :      11
            Local     :      48
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel073(const double *, const double *, const double *, const double *, double *, double *, double *, double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel073(const double *, const double *, const double *, const double *, double *, double *, double *, double *, double *)) [20] opensbliblock00_kernels.h(217,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(217,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel073PKdS0_S0_S0_PdS1_S1_S1_S1_] opensbliblock00_kernels.h:217

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rsi rdi r8-r11 zmm0-zmm20]
        
    Routine temporaries
        Total         :      47
            Global    :       0
            Local     :      47
        Regenerable   :       3
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel074(double *, double *, double *, double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel074(double *, double *, double *, double *, double *)) [21] opensbliblock00_kernels.h(235,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(235,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel074PdS_S_S_S_] opensbliblock00_kernels.h:235

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rsi rdi r8-r11]
        
    Routine temporaries
        Total         :      31
            Global    :       0
            Local     :      31
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel075(double *, double *, double *, double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel075(double *, double *, double *, double *, double *)) [22] opensbliblock00_kernels.h(269,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(269,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel075PdS_S_S_S_] opensbliblock00_kernels.h:269

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rsi rdi r8-r11]
        
    Routine temporaries
        Total         :      36
            Global    :       0
            Local     :      36
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel076(double *, double *, double *, double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel076(double *, double *, double *, double *, double *)) [23] opensbliblock00_kernels.h(313,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(313,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel076PdS_S_S_S_] opensbliblock00_kernels.h:313

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rsi rdi r8-r11 r13-r15]
        
    Routine temporaries
        Total         :      91
            Global    :       0
            Local     :      91
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel077(double *, double *, double *, double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel077(double *, double *, double *, double *, double *)) [24] opensbliblock00_kernels.h(347,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(347,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel077PdS_S_S_S_] opensbliblock00_kernels.h:347

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rsi rdi r8-r11 r13-r15]
        
    Routine temporaries
        Total         :     116
            Global    :       0
            Local     :     116
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel078(const double *, double *, const int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel078(const double *, double *, const int *)) [25] opensbliblock00_kernels.h(391,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(391,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel078PKdPdPKi] opensbliblock00_kernels.h:391

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rsi rdi zmm0-zmm4]
        
    Routine temporaries
        Total         :      52
            Global    :      14
            Local     :      38
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel079(const double *, double *, const int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel079(const double *, double *, const int *)) [26] opensbliblock00_kernels.h(409,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(409,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel079PKdPdPKi] opensbliblock00_kernels.h:409

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rsi rdi zmm0-zmm5]
        
    Routine temporaries
        Total         :      52
            Global    :      14
            Local     :      38
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel080(const double *, double *, const int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel080(const double *, double *, const int *)) [27] opensbliblock00_kernels.h(427,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(427,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel080PKdPdPKi] opensbliblock00_kernels.h:427

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rsi rdi zmm0-zmm4]
        
    Routine temporaries
        Total         :      52
            Global    :      14
            Local     :      38
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel081(const double *, double *, const int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel081(const double *, double *, const int *)) [28] opensbliblock00_kernels.h(445,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(445,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel081PKdPdPKi] opensbliblock00_kernels.h:445

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rsi rdi zmm0-zmm4]
        
    Routine temporaries
        Total         :      59
            Global    :      11
            Local     :      48
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel082(const double *, double *, const int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel082(const double *, double *, const int *)) [29] opensbliblock00_kernels.h(473,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(473,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel082PKdPdPKi] opensbliblock00_kernels.h:473

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rsi rdi zmm0-zmm4]
        
    Routine temporaries
        Total         :      59
            Global    :      11
            Local     :      48
        Regenerable   :       2
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel083(const double *, double *, const int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel083(const double *, double *, const int *)) [30] opensbliblock00_kernels.h(501,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(501,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel083PKdPdPKi] opensbliblock00_kernels.h:501

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rsi rdi zmm0-zmm5]
        
    Routine temporaries
        Total         :      51
            Global    :      14
            Local     :      37
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel084(const double *, double *, const int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel084(const double *, double *, const int *)) [31] opensbliblock00_kernels.h(519,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(519,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel084PKdPdPKi] opensbliblock00_kernels.h:519

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rsi rdi zmm0-zmm4]
        
    Routine temporaries
        Total         :      59
            Global    :      11
            Local     :      48
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel085(const double *, double *, const int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel085(const double *, double *, const int *)) [32] opensbliblock00_kernels.h(547,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(547,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel085PKdPdPKi] opensbliblock00_kernels.h:547

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rsi rdi zmm0-zmm4]
        
    Routine temporaries
        Total         :      59
            Global    :      11
            Local     :      48
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel090(const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, double *, double *, double *, double *, double *, double *, double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel090(const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, double *, double *, double *, double *, double *, double *, double *, double *)) [33] opensbliblock00_kernels.h(577,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(577,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel090PKdS0_S0_S0_S0_S0_S0_S0_PdS1_S1_S1_S1_S1_S1_S1_] opensbliblock00_kernels.h:577

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rsi rdi r8-r11]
        
    Routine temporaries
        Total         :      36
            Global    :       0
            Local     :      36
        Regenerable   :      10
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel062(double *, double *, double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel062(double *, double *, double *, double *)) [34] opensbliblock00_kernels.h(597,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(597,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel062PdS_S_S_] opensbliblock00_kernels.h:597

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rsi rdi r8-r10]
        
    Routine temporaries
        Total         :      18
            Global    :       0
            Local     :      18
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel063(double *, double *, double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel063(double *, double *, double *, double *)) [35] opensbliblock00_kernels.h(609,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(609,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel063PdS_S_S_] opensbliblock00_kernels.h:609

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rsi rdi r8-r11]
        
    Routine temporaries
        Total         :      34
            Global    :       0
            Local     :      34
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel064(const double *, double *, double *, double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel064(const double *, double *, double *, double *, double *)) [36] opensbliblock00_kernels.h(654,1)
  -> INLINE: (678,33) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (678,73) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (693,15) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (693,53) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (693,93) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (698,17) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (706,63) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (706,77) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (710,17) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (714,17) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (726,63) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (726,77) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (728,63) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (728,77) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (732,17) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (736,17) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (740,17) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (756,63) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (756,77) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (758,63) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (758,77) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (760,63) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (760,77) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(654,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel064PKdPdS1_S1_S1_] opensbliblock00_kernels.h:654

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   47[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm31]
        
    Routine temporaries
        Total         :     190
            Global    :       0
            Local     :     190
        Regenerable   :       2
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel065(double *, double *, double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel065(double *, double *, double *, double *)) [37] opensbliblock00_kernels.h(765,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(765,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel065PdS_S_S_] opensbliblock00_kernels.h:765

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rsi rdi r8-r15]
        
    Routine temporaries
        Total         :      98
            Global    :       0
            Local     :      98
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel007(const double *, const double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel007(const double *, const double *, double *)) [38] opensbliblock00_kernels.h(809,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(809,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel007PKdS0_Pd] opensbliblock00_kernels.h:809

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    5[ rdx rsi rdi zmm0-zmm1]
        
    Routine temporaries
        Total         :      14
            Global    :       0
            Local     :      14
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel002(const double *, const double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel002(const double *, const double *, double *)) [39] opensbliblock00_kernels.h(815,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(815,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel002PKdS0_Pd] opensbliblock00_kernels.h:815

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    5[ rdx rsi rdi zmm0-zmm1]
        
    Routine temporaries
        Total         :      14
            Global    :       0
            Local     :      14
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel008(const double *, const double *, const double *, const double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel008(const double *, const double *, const double *, const double *, double *)) [40] opensbliblock00_kernels.h(822,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(822,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel008PKdS0_S0_S0_Pd] opensbliblock00_kernels.h:822

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rdx rcx rsi rdi r8 zmm0-zmm2]
        
    Routine temporaries
        Total         :      20
            Global    :       0
            Local     :      20
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel013(const double *, const double *, const double *, const double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel013(const double *, const double *, const double *, const double *, double *)) [41] opensbliblock00_kernels.h(829,1)
  -> INLINE: (830,90) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (831,33) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(829,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel013PKdS0_S0_S0_Pd] opensbliblock00_kernels.h:829

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rdx rcx rsi rdi r8 zmm0-zmm5]
        
    Routine temporaries
        Total         :      25
            Global    :       0
            Local     :      25
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel010(const double *, const double *, const double *, const double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel010(const double *, const double *, const double *, const double *, double *)) [42] opensbliblock00_kernels.h(837,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(837,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel010PKdS0_S0_S0_Pd] opensbliblock00_kernels.h:837

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rdx rcx rsi rdi r8 zmm0-zmm2]
        
    Routine temporaries
        Total         :      20
            Global    :       0
            Local     :      20
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel023(const double *, const double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel023(const double *, const double *, double *)) [43] opensbliblock00_kernels.h(843,1)
  -> INLINE: (844,26) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(843,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel023PKdS0_Pd] opensbliblock00_kernels.h:843

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rdx rsi rdi zmm0-zmm4]
        
    Routine temporaries
        Total         :      17
            Global    :       0
            Local     :      17
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel016(const double *, const double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel016(const double *, const double *, double *)) [44] opensbliblock00_kernels.h(849,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(849,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel016PKdS0_Pd] opensbliblock00_kernels.h:849

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rdx rsi rdi zmm0-zmm2]
        
    Routine temporaries
        Total         :      16
            Global    :       0
            Local     :      16
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel019(const double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel019(const double *, double *)) [45] opensbliblock00_kernels.h(855,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(855,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel019PKdPd] opensbliblock00_kernels.h:855

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rsi rdi zmm0-zmm6]
        
    Routine temporaries
        Total         :      19
            Global    :       0
            Local     :      19
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel000(const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, double *, double *, double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel000(const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, double *, double *, double *, double *)) [46] opensbliblock00_kernels.h(864,1)
  -> INLINE: (971,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (971,47) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (973,33) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (973,50) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (973,75) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (973,92) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (974,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (974,24) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (974,44) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (974,61) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (976,39) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (978,39) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (980,31) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (988,70) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (988,94) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (989,103) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (990,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1000,68) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1000,92) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1001,103) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1002,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1274,38) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1274,70) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1276,22) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1276,54) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1278,22) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1278,55) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1280,22) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1280,54) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1282,22) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1282,55) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1284,17) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1284,49) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1287,39) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1287,72) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1289,71) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1290,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1291,69) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1292,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1293,69) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1294,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1295,69) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1296,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1297,66) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1298,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1304,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1309,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1313,95) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1316,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1316,57) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1318,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1318,57) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1320,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1320,57) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1338,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1343,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1348,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1350,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1350,57) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1352,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1352,57) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1354,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1354,57) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1372,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1377,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1381,95) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1384,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1384,57) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1386,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1386,57) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1388,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1388,57) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1406,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1411,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1416,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1418,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1418,57) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1420,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1420,57) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1422,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1422,57) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1440,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1445,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1449,95) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1452,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1452,57) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1454,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1454,57) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1456,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1456,57) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1474,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1479,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1484,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1486,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1486,57) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1488,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1488,57) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1490,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1490,57) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1508,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1513,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1517,95) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1520,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1520,57) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1522,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1522,57) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1524,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1524,57) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1542,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1547,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1552,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1554,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1554,57) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1556,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1556,57) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1558,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1558,57) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1588,79) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1588,98) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1589,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1590,79) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1590,98) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1591,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1592,22) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1592,47) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(864,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel000PKdS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_PdS1_S1_S1_] opensbliblock00_kernels.h:864

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   45[ rax rdx rcx rbx rsi rdi r8-r10 r12-r15 zmm0-zmm31]
        
    Routine temporaries
        Total         :    1263
            Global    :     209
            Local     :    1054
        Regenerable   :      16
        Spilled       :     159
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :    1232 bytes*
            Reads     :     267 [1.66e+01 ~ 16.6%]
            Writes    :     158 [9.83e+00 ~ 9.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel001(const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, double *, double *, double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel001(const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, double *, double *, double *, double *)) [47] opensbliblock00_kernels.h(1600,1)
  -> INLINE: (1707,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1707,47) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1709,33) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1709,50) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1709,75) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1709,92) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1710,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1710,24) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1710,44) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1710,61) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1712,39) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1714,39) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1716,31) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1724,70) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1724,94) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1725,103) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1726,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1736,68) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1736,92) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1737,103) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (1738,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2010,38) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2010,70) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2012,22) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2012,54) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2014,22) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2014,54) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2016,22) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2016,55) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2018,22) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2018,54) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2020,17) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2020,50) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2023,39) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2023,72) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2025,71) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2026,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2027,69) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2028,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2029,69) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2030,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2031,71) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2032,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2033,64) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2034,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2040,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2045,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2049,95) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2052,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2052,57) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2054,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2054,57) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2056,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2056,57) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2074,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2079,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2084,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2086,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2086,57) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2088,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2088,57) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2090,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2090,57) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2108,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2113,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2117,95) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2120,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2120,57) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2122,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2122,57) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2124,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2124,57) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2142,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2147,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2152,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2154,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2154,57) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2156,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2156,57) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2158,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2158,57) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2176,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2181,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2185,95) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2188,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2188,57) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2190,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2190,57) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2192,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2192,57) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2210,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2215,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2220,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2222,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2222,57) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2224,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2224,57) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2226,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2226,57) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2244,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2249,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2253,95) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2256,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2256,57) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2258,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2258,57) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2260,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2260,57) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2278,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2283,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2288,14) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2290,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2290,57) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2292,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2292,57) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2294,27) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2294,57) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2324,79) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2324,98) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2325,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2326,79) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2326,98) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2327,7) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2328,22) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2328,47) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(1600,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel001PKdS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_PdS1_S1_S1_] opensbliblock00_kernels.h:1600

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   46[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm31]
        
    Routine temporaries
        Total         :    1374
            Global    :     232
            Local     :    1142
        Regenerable   :      16
        Spilled       :     190
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :    1480 bytes*
            Reads     :     318 [1.74e+01 ~ 17.4%]
            Writes    :     196 [1.07e+01 ~ 10.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel017(const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, double *, double *, double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel017(const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, double *, double *, double *, double *)) [48] opensbliblock00_kernels.h(2335,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(2335,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel017PKdS0_S0_S0_S0_S0_S0_S0_S0_PdS1_S1_S1_] opensbliblock00_kernels.h:2335

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   33[ rax rdx rcx rsi rdi r8-r11 zmm0-zmm23]
        
    Routine temporaries
        Total         :      65
            Global    :       0
            Local     :      65
        Regenerable   :       7
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel028(const double *, double *, const int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel028(const double *, double *, const int *)) [49] opensbliblock00_kernels.h(2351,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(2351,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel028PKdPdPKi] opensbliblock00_kernels.h:2351

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rsi rdi zmm0-zmm5]
        
    Routine temporaries
        Total         :      59
            Global    :      12
            Local     :      47
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel029(const double *, double *, const int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel029(const double *, double *, const int *)) [50] opensbliblock00_kernels.h(2379,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(2379,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel029PKdPdPKi] opensbliblock00_kernels.h:2379

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rsi rdi zmm0-zmm4]
        
    Routine temporaries
        Total         :      59
            Global    :      11
            Local     :      48
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel042(const double *, double *, const int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel042(const double *, double *, const int *)) [51] opensbliblock00_kernels.h(2407,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(2407,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel042PKdPdPKi] opensbliblock00_kernels.h:2407

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rsi rdi zmm0-zmm5]
        
    Routine temporaries
        Total         :      59
            Global    :      12
            Local     :      47
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel037(const double *, double *, const int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel037(const double *, double *, const int *)) [52] opensbliblock00_kernels.h(2435,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(2435,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel037PKdPdPKi] opensbliblock00_kernels.h:2435

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rsi rdi zmm0-zmm5]
        
    Routine temporaries
        Total         :      50
            Global    :      15
            Local     :      35
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel033(const double *, double *, const int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel033(const double *, double *, const int *)) [53] opensbliblock00_kernels.h(2453,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(2453,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel033PKdPdPKi] opensbliblock00_kernels.h:2453

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rsi rdi zmm0-zmm4]
        
    Routine temporaries
        Total         :      59
            Global    :      11
            Local     :      48
        Regenerable   :       2
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel044(const double *, double *, const int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel044(const double *, double *, const int *)) [54] opensbliblock00_kernels.h(2481,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(2481,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel044PKdPdPKi] opensbliblock00_kernels.h:2481

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rsi rdi zmm0-zmm4]
        
    Routine temporaries
        Total         :      50
            Global    :      15
            Local     :      35
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel030(const double *, double *, const int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel030(const double *, double *, const int *)) [55] opensbliblock00_kernels.h(2499,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(2499,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel030PKdPdPKi] opensbliblock00_kernels.h:2499

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rsi rdi zmm0-zmm4]
        
    Routine temporaries
        Total         :      59
            Global    :      11
            Local     :      48
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel032(const double *, double *, const int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel032(const double *, double *, const int *)) [56] opensbliblock00_kernels.h(2527,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(2527,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel032PKdPdPKi] opensbliblock00_kernels.h:2527

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rsi rdi zmm0-zmm5]
        
    Routine temporaries
        Total         :      50
            Global    :      14
            Local     :      36
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel038(const double *, double *, const int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel038(const double *, double *, const int *)) [57] opensbliblock00_kernels.h(2545,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(2545,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel038PKdPdPKi] opensbliblock00_kernels.h:2545

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rsi rdi zmm0-zmm4]
        
    Routine temporaries
        Total         :      59
            Global    :      11
            Local     :      48
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel036(const double *, double *, const int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel036(const double *, double *, const int *)) [58] opensbliblock00_kernels.h(2573,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(2573,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel036PKdPdPKi] opensbliblock00_kernels.h:2573

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rsi rdi zmm0-zmm4]
        
    Routine temporaries
        Total         :      52
            Global    :      14
            Local     :      38
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel041(const double *, double *, const int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel041(const double *, double *, const int *)) [59] opensbliblock00_kernels.h(2591,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(2591,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel041PKdPdPKi] opensbliblock00_kernels.h:2591

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rsi rdi zmm0-zmm5]
        
    Routine temporaries
        Total         :      50
            Global    :      14
            Local     :      36
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel034(const double *, double *, const int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel034(const double *, double *, const int *)) [60] opensbliblock00_kernels.h(2609,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(2609,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel034PKdPdPKi] opensbliblock00_kernels.h:2609

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rsi rdi zmm0-zmm5]
        
    Routine temporaries
        Total         :      51
            Global    :      14
            Local     :      37
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel043(const double *, double *, const int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel043(const double *, double *, const int *)) [61] opensbliblock00_kernels.h(2627,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(2627,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel043PKdPdPKi] opensbliblock00_kernels.h:2627

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rsi rdi zmm0-zmm5]
        
    Routine temporaries
        Total         :      50
            Global    :      15
            Local     :      35
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel035(const double *, double *, const int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel035(const double *, double *, const int *)) [62] opensbliblock00_kernels.h(2646,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(2646,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel035PKdPdPKi] opensbliblock00_kernels.h:2646

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rsi rdi zmm0-zmm4]
        
    Routine temporaries
        Total         :      59
            Global    :      12
            Local     :      47
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel031(const double *, double *, const int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel031(const double *, double *, const int *)) [63] opensbliblock00_kernels.h(2674,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(2674,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel031PKdPdPKi] opensbliblock00_kernels.h:2674

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rsi rdi zmm0-zmm5]
        
    Routine temporaries
        Total         :      50
            Global    :      14
            Local     :      36
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel040(const double *, double *, const int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel040(const double *, double *, const int *)) [64] opensbliblock00_kernels.h(2692,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(2692,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel040PKdPdPKi] opensbliblock00_kernels.h:2692

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rsi rdi zmm0-zmm5]
        
    Routine temporaries
        Total         :      50
            Global    :      14
            Local     :      36
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel039(const double *, double *, const int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel039(const double *, double *, const int *)) [65] opensbliblock00_kernels.h(2710,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(2710,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel039PKdPdPKi] opensbliblock00_kernels.h:2710

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rsi rdi zmm0-zmm4]
        
    Routine temporaries
        Total         :      52
            Global    :      14
            Local     :      38
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel061(const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, double *, double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel061(const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, double *, double *, double *)) [66] opensbliblock00_kernels.h(2735,1)
  -> INLINE: (2742,72) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2749,83) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2755,85) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2760,84) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2773,71) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2780,86) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2786,84) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2791,87) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2803,87) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2806,79) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2809,78) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2811,80) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2845,92) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2852,86) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2858,84) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2863,87) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2868,25) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2875,83) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2881,85) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (2886,84) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(2735,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel061PKdS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_PdS1_S1_] opensbliblock00_kernels.h:2735

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   46[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm31]
        
    Routine temporaries
        Total         :     409
            Global    :      59
            Local     :     350
        Regenerable   :      31
        Spilled       :      33
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     224 bytes*
            Reads     :      29 [6.40e+00 ~ 6.4%]
            Writes    :      28 [6.18e+00 ~ 6.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel091(const double *, const double *, const double *, const double *, double *, double *, double *, double *, double *, double *, double *, double *, const double *, const double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel091(const double *, const double *, const double *, const double *, double *, double *, double *, double *, double *, double *, double *, double *, const double *, const double *)) [67] opensbliblock00_kernels.h(2898,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(2898,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel091PKdS0_S0_S0_PdS1_S1_S1_S1_S1_S1_S1_S0_S0_] opensbliblock00_kernels.h:2898

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   25[ rax rdx rcx rsi rdi r8-r11 zmm0-zmm15]
        
    Routine temporaries
        Total         :      50
            Global    :       0
            Local     :      50
        Regenerable   :       8
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: monitor_0_p_B0(const double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (monitor_0_p_B0(const double *, double *)) [68] reductions.h(3,63)


    Report from: Code generation optimizations [cg]

reductions.h(3,63):remark #34051: REGISTER ALLOCATION : [_Z14monitor_0_p_B0PKdPd] reductions.h:3

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rsi rdi]
        
    Routine temporaries
        Total         :      11
            Global    :       0
            Local     :      11
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: monitor_1_p_B0(const double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (monitor_1_p_B0(const double *, double *)) [69] reductions.h(7,63)


    Report from: Code generation optimizations [cg]

reductions.h(7,63):remark #34051: REGISTER ALLOCATION : [_Z14monitor_1_p_B0PKdPd] reductions.h:7

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rsi rdi]
        
    Routine temporaries
        Total         :      11
            Global    :       0
            Local     :      11
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: monitor_2_p_B0(const double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (monitor_2_p_B0(const double *, double *)) [70] reductions.h(11,63)


    Report from: Code generation optimizations [cg]

reductions.h(11,63):remark #34051: REGISTER ALLOCATION : [_Z14monitor_2_p_B0PKdPd] reductions.h:11

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rsi rdi]
        
    Routine temporaries
        Total         :      11
            Global    :       0
            Local     :      11
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: monitor_3_p_B0(const double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (monitor_3_p_B0(const double *, double *)) [71] reductions.h(15,63)


    Report from: Code generation optimizations [cg]

reductions.h(15,63):remark #34051: REGISTER ALLOCATION : [_Z14monitor_3_p_B0PKdPd] reductions.h:15

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rsi rdi]
        
    Routine temporaries
        Total         :      11
            Global    :       0
            Local     :      11
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: monitor_4_p_B0(const double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (monitor_4_p_B0(const double *, double *)) [72] reductions.h(19,63)


    Report from: Code generation optimizations [cg]

reductions.h(19,63):remark #34051: REGISTER ALLOCATION : [_Z14monitor_4_p_B0PKdPd] reductions.h:19

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rsi rdi]
        
    Routine temporaries
        Total         :      11
            Global    :       0
            Local     :      11
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: monitor_5_p_B0(const double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (monitor_5_p_B0(const double *, double *)) [73] reductions.h(23,63)


    Report from: Code generation optimizations [cg]

reductions.h(23,63):remark #34051: REGISTER ALLOCATION : [_Z14monitor_5_p_B0PKdPd] reductions.h:23

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rsi rdi]
        
    Routine temporaries
        Total         :      11
            Global    :       0
            Local     :      11
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: OPSException::~OPSException(OPSException *const)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (OPSException::~OPSException(OPSException *const)) [74] /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h(75,13)
  -> INLINE: (75,13) OPSException::~OPSException(OPSException *)
    -> INLINE: (75,38) std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: (75,38) std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_stringstream(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>> *const)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

/research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h(75,13):remark #34051: REGISTER ALLOCATION : [_ZN12OPSExceptionD0Ev] /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:75

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rsi rdi r8 r13-r14]
        
    Routine temporaries
        Total         :      58
            Global    :      12
            Local     :      46
        Regenerable   :       4
        Spilled       :       2
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       3 [0.00e+00 ~ 0.0%]
            Writes    :       3 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: OPSException::OPSException(OPSException *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (OPSException::OPSException(OPSException *, int)) /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h(76,62)

===========================================================================

Begin optimization report for: OPSException::OPSException(OPSException *, const OPSException &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (OPSException::OPSException(OPSException *, const OPSException &)) /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h(77,43)

===========================================================================

Begin optimization report for: OPSException::insert(OPSException *, const char *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (OPSException::insert(OPSException *, const char *)) /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h(95,5)

===========================================================================

Begin optimization report for: OPSException::what(const OPSException *) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (OPSException::what(const OPSException *) const) [78] /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h(114,46)
  -> INLINE: (115,22) std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (115,22) std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> *, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (115,28) std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (116,29) std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::c_str(const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

/mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/bits/char_traits.h(409,33):remark #34026: call to memcpy implemented as a call to optimized library version
/research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h(114,46):remark #34051: REGISTER ALLOCATION : [_ZNK12OPSException4whatEv] /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h:114

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8 r14]
        
    Routine temporaries
        Total         :      66
            Global    :      21
            Local     :      45
        Regenerable   :      13
        Spilled       :       1
        
    Routine stack
        Variables     :      40 bytes*
            Reads     :      14 [9.01e+00 ~ 9.0%]
            Writes    :       7 [7.91e+00 ~ 7.9%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: OPSException::operator<<<const char *>(OPSException *, const char *const &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (OPSException::operator<<<const char *>(OPSException *, const char *const &)) /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h(87,5)

===========================================================================

Begin optimization report for: OPSException::operator<<<char [46]>(OPSException *, const char (&)[46])

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (OPSException::operator<<<char [46]>(OPSException *, const char (&)[46])) /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h(87,5)

===========================================================================

Begin optimization report for: OPSException::operator<<<char *>(OPSException *, char *const &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (OPSException::operator<<<char *>(OPSException *, char *const &)) /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h(87,5)

===========================================================================

Begin optimization report for: OPSException::operator<<<char [25]>(OPSException *, const char (&)[25])

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (OPSException::operator<<<char [25]>(OPSException *, const char (&)[25])) /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h(87,5)

===========================================================================

Begin optimization report for: OPSException::operator<<<char [40]>(OPSException *, const char (&)[40])

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (OPSException::operator<<<char [40]>(OPSException *, const char (&)[40])) /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h(87,5)

===========================================================================

Begin optimization report for: OPSException::operator<<<char [97]>(OPSException *, const char (&)[97])

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (OPSException::operator<<<char [97]>(OPSException *, const char (&)[97])) /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h(87,5)

===========================================================================

Begin optimization report for: OPSException::insert<char *>(OPSException *, char *const &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (OPSException::insert<char *>(OPSException *, char *const &)) /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_exceptions.h(101,5)

===========================================================================

Begin optimization report for: std::pow<double, int>(double, int)

    Report from: Code generation optimizations [cg]

/mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/cmath(416,5):remark #34051: REGISTER ALLOCATION : [_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_Xsr3std12__is_integerIS2_EE7__valueEE6__typeENS4_IS3_Xsr3std12__is_integerIS3_EE7__valueEE6__typeEE6__typeES2_S3_] /mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/cmath:416

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rdi zmm0-zmm1]
        
    Routine temporaries
        Total         :      16
            Global    :       7
            Local     :       9
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::fmod<int, int>(int, int)

    Report from: Code generation optimizations [cg]

/mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/cmath(291,5):remark #34051: REGISTER ALLOCATION : [_ZSt4fmodIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_Xsr3std12__is_integerIS2_EE7__valueEE6__typeENS4_IS3_Xsr3std12__is_integerIS3_EE7__valueEE6__typeEE6__typeES2_S3_] /mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/cmath:291

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rsi rdi zmm0-zmm1]
        
    Routine temporaries
        Total         :      14
            Global    :       0
            Local     :      14
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: __sti__$E()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (__sti__$E()) [179] <compiler generated>
  -> INLINE: /mainfs/local/software/gcc/10.3.0/bin/../include/c++/10.3.0/iostream:(74,25) __sti__f()


    Report from: Code generation optimizations [cg]

<compiler generated>:remark #34051: REGISTER ALLOCATION : [__sti__$E] (null):0

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rdx rsi rdi]
        
    Routine temporaries
        Total         :      19
            Global    :       9
            Local     :      10
        Regenerable   :      11
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: __sti__f()

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (__sti__f()) <compiler generated>

===========================================================================

Begin optimization report for: type_error(const int *, const char *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (type_error(const int *, const char *)) /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_internal1.h(112,55)

===========================================================================

Begin optimization report for: type_error(const double *, const char *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (type_error(const double *, const char *)) /research/opensbli/gnsa1e21/opensbli_mpi_cuda/OPS/ops/c/include/ops_internal1.h(104,58)

===========================================================================
