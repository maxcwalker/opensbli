//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel066(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6) {
#else
void ops_par_loop_opensbliblock00Kernel066_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[7] = { arg0, arg1, arg2, arg3, arg4,
 arg5, arg6};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,7,range,0)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,0,"opensbliblock00Kernel066");
    block->instance->OPS_kernels[0].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "opensbliblock00Kernel066");
  #endif


  //compute locally allocated range for the sub-block
  int start[2];
  int end[2];
  int arg_idx[2];
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<2; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 7,block, range, start, end, arg_idx) < 0) return;
  #endif

  #if defined(OPS_MPI)
  #if defined(OPS_LAZY)
  sub_block_list sb = OPS_sub_block_list[block->index];
  arg_idx[0] = sb->decomp_disp[0];
  arg_idx[1] = sb->decomp_disp[1];
  #else
  arg_idx[0] -= start[0];
  arg_idx[1] -= start[1];
  #endif
  #else //OPS_MPI
  arg_idx[0] = 0;
  arg_idx[1] = 0;
  #endif //OPS_MPI

  //initialize global variable with the dimension of dats
  int xdim0_opensbliblock00Kernel066 = args[0].dat->size[0];
  int xdim1_opensbliblock00Kernel066 = args[1].dat->size[0];
  int xdim2_opensbliblock00Kernel066 = args[2].dat->size[0];
  int xdim3_opensbliblock00Kernel066 = args[3].dat->size[0];
  int xdim4_opensbliblock00Kernel066 = args[4].dat->size[0];
  int xdim5_opensbliblock00Kernel066 = args[5].dat->size[0];

  //set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset/sizeof(double);
  double* rhoE_B0_p = (double*)args[0].data_d;

  int base1 = args[1].dat->base_offset/sizeof(double);
  double* rho_B0_p = (double*)args[1].data_d;

  int base2 = args[2].dat->base_offset/sizeof(double);
  double* rhou0_B0_p = (double*)args[2].data_d;

  int base3 = args[3].dat->base_offset/sizeof(double);
  double* rhou1_B0_p = (double*)args[3].data_d;

  int base4 = args[4].dat->base_offset/sizeof(double);
  double* x0_B0_p = (double*)args[4].data_d;

  int base5 = args[5].dat->base_offset/sizeof(double);
  double* x1_B0_p = (double*)args[5].data_d;




  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_device(args, 7);
  ops_halo_exchanges(args,7,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[0].mpi_time += __t1-__t2;
  }

  int start_0 = start[0];
  int end_0 = end[0];
  int arg_idx_0 = arg_idx[0];
  int start_1 = start[1];
  int end_1 = end[1];
  int arg_idx_1 = arg_idx[1];
  if ((end[0]-start[0])>0 && (end[1]-start[1])>0) {
    block->instance->sycl_instance->queue->submit([&](cl::sycl::handler &cgh) {

      auto Delta0block0_sycl = (*Delta0block0_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto Delta1block0_sycl = (*Delta1block0_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto H_sycl = (*H_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto L_sycl = (*L_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto b_sycl = (*b_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto inv2Minf_sycl = (*inv2Minf_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto inv2a_sycl = (*inv2a_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto invH_sycl = (*invH_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto inv_gamma_m1_sycl = (*inv_gamma_m1_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto invgama_sycl = (*invgama_p).template get_access<cl::sycl::access::mode::read>(cgh);

      cgh.parallel_for<class opensbliblock00Kernel066_kernel>(cl::sycl::nd_range<2>(cl::sycl::range<2>(
           ((end[1]-start[1]-1)/block->instance->OPS_block_size_y+1)*block->instance->OPS_block_size_y,
            ((end[0]-start[0]-1)/block->instance->OPS_block_size_x+1)*block->instance->OPS_block_size_x
             ),cl::sycl::range<2>(
             block->instance->OPS_block_size_y,
      block->instance->OPS_block_size_x
             ))
      , [=](cl::sycl::nd_item<2> item
      ) [[intel::kernel_args_restrict]] {
        int n_y = item.get_global_id(0)+start_1;
        int n_x = item.get_global_id(1)+start_0;
        int idx[] = {arg_idx_0+n_x, arg_idx_1+n_y};
        ACC<double> rhoE_B0(xdim0_opensbliblock00Kernel066, &rhoE_B0_p[0] + base0 + n_x*1 + n_y * xdim0_opensbliblock00Kernel066*1);
        ACC<double> rho_B0(xdim1_opensbliblock00Kernel066, &rho_B0_p[0] + base1 + n_x*1 + n_y * xdim1_opensbliblock00Kernel066*1);
        ACC<double> rhou0_B0(xdim2_opensbliblock00Kernel066, &rhou0_B0_p[0] + base2 + n_x*1 + n_y * xdim2_opensbliblock00Kernel066*1);
        ACC<double> rhou1_B0(xdim3_opensbliblock00Kernel066, &rhou1_B0_p[0] + base3 + n_x*1 + n_y * xdim3_opensbliblock00Kernel066*1);
        ACC<double> x0_B0(xdim4_opensbliblock00Kernel066, &x0_B0_p[0] + base4 + n_x*1 + n_y * xdim4_opensbliblock00Kernel066*1);
        ACC<double> x1_B0(xdim5_opensbliblock00Kernel066, &x1_B0_p[0] + base5 + n_x*1 + n_y * xdim5_opensbliblock00Kernel066*1);
        //USER CODE
        if (n_x < end_0 && n_y < end_1) {
          
   double T = 0.0;
   double rho = 0.0;
   double rhou0 = 0.0;
   double rhou1 = 0.0;
   double x1b0 = 0.0;
   x0_B0(0,0) = Delta0block0_sycl[0]*idx[0];

    x1_B0(0,0) = ((1.0/20.0))*H_sycl[0]*cl::sycl::exp(-((-(1.0/2.0)*L_sycl[0] + Delta0block0_sycl[0]*idx[0])*(-(1.0/2.0)*L_sycl[0] + Delta0block0_sycl[0]*idx[0]))*inv2a_sycl[0])
      + (-(1.0/20.0)*H_sycl[0]*cl::sycl::exp(-((-(1.0/2.0)*L_sycl[0] + Delta0block0_sycl[0]*idx[0])*(-(1.0/2.0)*L_sycl[0] + Delta0block0_sycl[0]*idx[0]))*inv2a_sycl[0]) +
      H_sycl[0])*sinh(b_sycl[0]*invH_sycl[0]*Delta1block0_sycl[0]*idx[1])/sinh(b_sycl[0]);

    rhou0 = ((-x1b0 + x1_B0(0,0) < 3.06430643064306) ? (
   2.98010537508574e-7 + 2.17137893910512e-8*pow(-x1b0 +
      x1_B0(0,0), 27) + 0.0252449626304193*pow(-x1b0 + x1_B0(0,0), 14) + 1.72288869974662e-16*pow(-x1b0 + x1_B0(0,0),
      44) + 30.6037023000319*pow(-x1b0 + x1_B0(0,0), 7) + 2.12843517734356e-5*pow(-x1b0 + x1_B0(0,0), 20) +
      0.70500345124088*x1_B0(0,0) + 1.32482987815919e-15*pow(-x1b0 + x1_B0(0,0), 42) + 4.35046042189372e-12*pow(-x1b0 +
      x1_B0(0,0), 35) + 1.28472097728017*pow(-x1b0 + x1_B0(0,0), 10) + 5.40448458421883*pow(-x1b0 + x1_B0(0,0), 9) +
      7.67673035724381e-13*pow(-x1b0 + x1_B0(0,0), 36) + 0.000211166618419883*pow(-x1b0 + x1_B0(0,0), 19) +
      5.2776959398151e-8*pow(-x1b0 + x1_B0(0,0), 24) + 1.30783741946686e-11*pow(-x1b0 + x1_B0(0,0), 34) +
      3.99039681831242*((-x1b0 + x1_B0(0,0))*(-x1b0 + x1_B0(0,0))*(-x1b0 + x1_B0(0,0))) + 0.000518125029896123*pow(-x1b0
      + x1_B0(0,0), 18) + 0.133865868334425*pow(-x1b0 + x1_B0(0,0), 13) + 6.70874505326609e-20*pow(-x1b0 + x1_B0(0,0),
      48) + 19.9087894702914*((-x1b0 + x1_B0(0,0))*(-x1b0 + x1_B0(0,0))*(-x1b0 + x1_B0(0,0))*(-x1b0 + x1_B0(0,0))*(-x1b0
      + x1_B0(0,0))) + 2.05227695456625e-11*pow(-x1b0 + x1_B0(0,0), 33) + 6.89065718764235e-16*pow(-x1b0 + x1_B0(0,0),
      43) + 1.36444444761311e-18*pow(-x1b0 + x1_B0(0,0), 49) + 9.94338036470296e-8*pow(-x1b0 + x1_B0(0,0), 26) +
      2.29770520340474e-7*pow(-x1b0 + x1_B0(0,0), 25) - 3.14685525043011e-18*pow(-x1b0 + x1_B0(0,0), 45) -
      5.54663857336047e-14*pow(-x1b0 + x1_B0(0,0), 39) - 2.50967722926707e-9*pow(-x1b0 + x1_B0(0,0), 29) -
      3.75537943671666e-10*pow(-x1b0 + x1_B0(0,0), 28) - 1.2970382233701e-13*pow(-x1b0 + x1_B0(0,0), 38) -
      0.70500345124088*x1b0 - 19.4490714625157*pow(-x1b0 + x1_B0(0,0), 8) - 9.84001869224845*((-x1b0 +
      x1_B0(0,0))*(-x1b0 + x1_B0(0,0))*(-x1b0 + x1_B0(0,0))*(-x1b0 + x1_B0(0,0))) - 1.17917798848888e-9*pow(-x1b0 +
      x1_B0(0,0), 30) - 3.08824172034029e-10*pow(-x1b0 + x1_B0(0,0), 31) - 1.36055618730943*((-x1b0 + x1_B0(0,0))*(-x1b0
      + x1_B0(0,0))) - 0.00549316667051347*pow(-x1b0 + x1_B0(0,0), 16) - 29.7489710517421*((-x1b0 + x1_B0(0,0))*(-x1b0 +
      x1_B0(0,0))*(-x1b0 + x1_B0(0,0))*(-x1b0 + x1_B0(0,0))*(-x1b0 + x1_B0(0,0))*(-x1b0 + x1_B0(0,0))) -
      1.92048017861274e-6*pow(-x1b0 + x1_B0(0,0), 23) - 8.27802057742277e-6*pow(-x1b0 + x1_B0(0,0), 22) -
      1.0958051866497*pow(-x1b0 + x1_B0(0,0), 11) - 0.000296044358818979*pow(-x1b0 + x1_B0(0,0), 17) -
      8.74763938491298e-18*pow(-x1b0 + x1_B0(0,0), 47) - 0.0811820521446499*pow(-x1b0 + x1_B0(0,0), 12) -
      0.0110103876402037*pow(-x1b0 + x1_B0(0,0), 15) - 8.9227208199772e-14*pow(-x1b0 + x1_B0(0,0), 37) -
      2.26097375236549e-17*pow(-x1b0 + x1_B0(0,0), 46) - 2.57705290058786e-11*pow(-x1b0 + x1_B0(0,0), 32) -
      3.9396145861337e-16*pow(-x1b0 + x1_B0(0,0), 41) - 1.94065718568835e-19*pow(-x1b0 + x1_B0(0,0), 50) -
      1.33377666289244e-14*pow(-x1b0 + x1_B0(0,0), 40) - 1.46567217885769e-5*pow(-x1b0 + x1_B0(0,0), 21)
)
: (

      0.999998963470747
));

    rhou1 = ((-x1b0 + x1_B0(0,0) < 3.06430643064306) ? (
   -4.54052089570034e-9 + 8.1880548886519e-6*pow(-x1b0 +
      x1_B0(0,0), 15) + 3.15590063406684e-7*pow(-x1b0 + x1_B0(0,0), 20) + 0.040425268842647*((-x1b0 + x1_B0(0,0))*(-x1b0
      + x1_B0(0,0))*(-x1b0 + x1_B0(0,0))*(-x1b0 + x1_B0(0,0))*(-x1b0 + x1_B0(0,0))*(-x1b0 + x1_B0(0,0))) +
      2.0154496007228e-11*pow(-x1b0 + x1_B0(0,0), 28) + 0.0242329259197411*pow(-x1b0 + x1_B0(0,0), 10) +
      0.000291381826494586*pow(-x1b0 + x1_B0(0,0), 14) + 6.73898204799131e-10*pow(-x1b0 + x1_B0(0,0), 25) +
      1.85416600135407e-16*pow(-x1b0 + x1_B0(0,0), 37) + 2.46346518485074e-14*pow(-x1b0 + x1_B0(0,0), 35) +
      3.55996755975014e-18*pow(-x1b0 + x1_B0(0,0), 43) + 5.96015141953445e-14*pow(-x1b0 + x1_B0(0,0), 34) +
      7.19961160237273e-21*pow(-x1b0 + x1_B0(0,0), 49) + 5.11019492260991e-10*pow(-x1b0 + x1_B0(0,0), 26) +
      0.000271933313720515*pow(-x1b0 + x1_B0(0,0), 13) + 1.02819050245244e-18*pow(-x1b0 + x1_B0(0,0), 44) +
      1.20076383298111e-6*pow(-x1b0 + x1_B0(0,0), 19) + 0.0802767538273824*pow(-x1b0 + x1_B0(0,0), 8) +
      1.60952352657344e-10*pow(-x1b0 + x1_B0(0,0), 27) + 0.000675804420077356*((-x1b0 + x1_B0(0,0))*(-x1b0 +
      x1_B0(0,0))) + 3.46646111091862e-7*x1_B0(0,0) + 3.95659671623606e-20*pow(-x1b0 + x1_B0(0,0), 45) +
      0.00601485560417741*((-x1b0 + x1_B0(0,0))*(-x1b0 + x1_B0(0,0))*(-x1b0 + x1_B0(0,0))*(-x1b0 + x1_B0(0,0))) +
      5.44509393295634e-18*pow(-x1b0 + x1_B0(0,0), 42) + 4.56390658216947e-14*pow(-x1b0 + x1_B0(0,0), 33) +
      5.77610054249051e-15*pow(-x1b0 + x1_B0(0,0), 36) + 9.37278284543165e-7*pow(-x1b0 + x1_B0(0,0), 18) -
      3.43043397023927e-13*pow(-x1b0 + x1_B0(0,0), 32) - 1.97603337376184e-9*pow(-x1b0 + x1_B0(0,0), 24) -
      0.0173159424327144*((-x1b0 + x1_B0(0,0))*(-x1b0 + x1_B0(0,0))*(-x1b0 + x1_B0(0,0))*(-x1b0 + x1_B0(0,0))*(-x1b0 +
      x1_B0(0,0))) - 1.08374437841993e-21*pow(-x1b0 + x1_B0(0,0), 48) - 3.84328807722218e-8*pow(-x1b0 + x1_B0(0,0), 22)
      - 0.00174020189862055*((-x1b0 + x1_B0(0,0))*(-x1b0 + x1_B0(0,0))*(-x1b0 + x1_B0(0,0))) -
      1.98806894410881e-12*pow(-x1b0 + x1_B0(0,0), 31) - 9.78788444400239e-22*pow(-x1b0 + x1_B0(0,0), 50) -
      0.00248243956904384*pow(-x1b0 + x1_B0(0,0), 12) - 1.09492602247293e-19*pow(-x1b0 + x1_B0(0,0), 46) -
      7.69040185413285e-12*pow(-x1b0 + x1_B0(0,0), 29) - 8.33906981903121e-6*pow(-x1b0 + x1_B0(0,0), 17) -
      0.0687165671173466*pow(-x1b0 + x1_B0(0,0), 7) - 8.2833798617672e-18*pow(-x1b0 + x1_B0(0,0), 41) -
      5.42856439731251e-16*pow(-x1b0 + x1_B0(0,0), 38) - 2.9053357388848e-16*pow(-x1b0 + x1_B0(0,0), 39) -
      0.00141134699427674*pow(-x1b0 + x1_B0(0,0), 11) - 3.46646111091862e-7*x1b0 - 8.33338364767477e-17*pow(-x1b0 +
      x1_B0(0,0), 40) - 5.82577714670976e-12*pow(-x1b0 + x1_B0(0,0), 30) - 1.19380225994185e-8*pow(-x1b0 + x1_B0(0,0),
      21) - 4.82177190833371e-20*pow(-x1b0 + x1_B0(0,0), 47) - 0.0600438180785648*pow(-x1b0 + x1_B0(0,0), 9) -
      1.43879912982306e-8*pow(-x1b0 + x1_B0(0,0), 23) - 3.04892028367409e-5*pow(-x1b0 + x1_B0(0,0), 16)
)
: (

      0.00193194788504255
));

    T = ((-x1b0 + x1_B0(0,0) < 3.06430643064306) ? (
   1.36969826742154 + 0.0992963978742254*pow(-x1b0 + x1_B0(0,0),
      13) + 2.86617027971165e-15*pow(-x1b0 + x1_B0(0,0), 41) + 2.0268337344622*x1_B0(0,0) + 42.4845202774873*pow(-x1b0 +
      x1_B0(0,0), 9) + 0.00582133304112724*pow(-x1b0 + x1_B0(0,0), 16) + 6.64980553213925e-6*pow(-x1b0 + x1_B0(0,0), 22)
      + 1.13879429024366e-10*pow(-x1b0 + x1_B0(0,0), 32) + 1.1308454106724e-13*pow(-x1b0 + x1_B0(0,0), 38) +
      0.00030145027063903*pow(-x1b0 + x1_B0(0,0), 18) + 1.26189273290074e-9*pow(-x1b0 + x1_B0(0,0), 30) +
      97.5431351348556*pow(-x1b0 + x1_B0(0,0), 7) + 4.37375087293463e-19*pow(-x1b0 + x1_B0(0,0), 48) +
      3.91704143820735e-6*pow(-x1b0 + x1_B0(0,0), 23) + 1.09546598579685*pow(-x1b0 + x1_B0(0,0), 12) +
      5.19322330244578e-10*pow(-x1b0 + x1_B0(0,0), 31) + 2.50553276623531e-19*pow(-x1b0 + x1_B0(0,0), 50) +
      7.12556727621899e-14*pow(-x1b0 + x1_B0(0,0), 39) + 43.2952051988253*((-x1b0 + x1_B0(0,0))*(-x1b0 +
      x1_B0(0,0))*(-x1b0 + x1_B0(0,0))*(-x1b0 + x1_B0(0,0))*(-x1b0 + x1_B0(0,0))) + 5.94617332276474*((-x1b0 +
      x1_B0(0,0))*(-x1b0 + x1_B0(0,0))*(-x1b0 + x1_B0(0,0))) + 2.23675251451957e-14*pow(-x1b0 + x1_B0(0,0), 40) +
      7.43073974634038e-10*pow(-x1b0 + x1_B0(0,0), 29) + 0.00339078474382293*pow(-x1b0 + x1_B0(0,0), 17) +
      1.26410264823667e-17*pow(-x1b0 + x1_B0(0,0), 47) + 8.92551641671999e-7*pow(-x1b0 + x1_B0(0,0), 24) +
      2.69256935130225e-17*pow(-x1b0 + x1_B0(0,0), 46) - 4.43354296488102e-8*pow(-x1b0 + x1_B0(0,0), 27) -
      2.0268337344622*x1b0 - 1.38796867965428e-13*pow(-x1b0 + x1_B0(0,0), 37) - 0.0983732879910376*pow(-x1b0 +
      x1_B0(0,0), 14) - 81.9540739658969*pow(-x1b0 + x1_B0(0,0), 8) - 0.0214185365200827*pow(-x1b0 + x1_B0(0,0), 15) -
      3.36981953913679*((-x1b0 + x1_B0(0,0))*(-x1b0 + x1_B0(0,0))) - 1.26838474894301e-11*pow(-x1b0 + x1_B0(0,0), 34) -
      1.08493288242023e-7*pow(-x1b0 + x1_B0(0,0), 26) - 8.8861672751871e-16*pow(-x1b0 + x1_B0(0,0), 43) -
      0.000251816345600445*pow(-x1b0 + x1_B0(0,0), 19) - 1.86978885577543e-18*pow(-x1b0 + x1_B0(0,0), 49) -
      17.5412907280677*((-x1b0 + x1_B0(0,0))*(-x1b0 + x1_B0(0,0))*(-x1b0 + x1_B0(0,0))*(-x1b0 + x1_B0(0,0))) -
      8.58959654131943e-9*pow(-x1b0 + x1_B0(0,0), 28) - 3.48338396716385e-8*pow(-x1b0 + x1_B0(0,0), 25) -
      1.66670032495984e-17*pow(-x1b0 + x1_B0(0,0), 45) - 77.8084617211988*((-x1b0 + x1_B0(0,0))*(-x1b0 +
      x1_B0(0,0))*(-x1b0 + x1_B0(0,0))*(-x1b0 + x1_B0(0,0))*(-x1b0 + x1_B0(0,0))*(-x1b0 + x1_B0(0,0))) -
      2.75031316978532e-16*pow(-x1b0 + x1_B0(0,0), 44) - 10.1079111210035*pow(-x1b0 + x1_B0(0,0), 10) -
      1.17119752904835e-15*pow(-x1b0 + x1_B0(0,0), 42) - 1.34176860771771*pow(-x1b0 + x1_B0(0,0), 11) -
      7.56013271459707e-13*pow(-x1b0 + x1_B0(0,0), 33) - 6.14617333062365e-12*pow(-x1b0 + x1_B0(0,0), 35) -
      1.29935522041302e-5*pow(-x1b0 + x1_B0(0,0), 21) - 1.64571857521028e-12*pow(-x1b0 + x1_B0(0,0), 36) -
      0.00011149693097182*pow(-x1b0 + x1_B0(0,0), 20)
)
: (
   1.00000103348235
));

   rho = 1.0/T;

   rho_B0(0,0) = rho;

   rhou0_B0(0,0) = rhou0;

   rhou1_B0(0,0) = rhou1;

   rhoE_B0(0,0) = (0.5*(rhou0*rhou0) + 0.5*(rhou1*rhou1))/rho + invgama_sycl[0]*inv2Minf_sycl[0]*inv_gamma_m1_sycl[0]*T*rho;


        }
      });
    });
  }
  if (block->instance->OPS_diags > 1) {
    block->instance->sycl_instance->queue->wait();
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[0].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 7);
  ops_set_halo_dirtybit3(&args[0],range);
  ops_set_halo_dirtybit3(&args[1],range);
  ops_set_halo_dirtybit3(&args[2],range);
  ops_set_halo_dirtybit3(&args[3],range);
  ops_set_halo_dirtybit3(&args[4],range);
  ops_set_halo_dirtybit3(&args[5],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[0].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg5);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel066(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)calloc(1,sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 1;
  desc->index = 0;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 0;
  for ( int i=0; i<4; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 7;
  desc->args = (ops_arg*)ops_malloc(7*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg2.dat->index;
  desc->args[3] = arg3;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg3.dat->index;
  desc->args[4] = arg4;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg4.dat->index;
  desc->args[5] = arg5;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg5.dat->index;
  desc->args[6] = arg6;
  desc->function = ops_par_loop_opensbliblock00Kernel066_execute;
  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,0,"opensbliblock00Kernel066");
  }
  ops_enqueue_kernel(desc);
}
#endif
