//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel069(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2) {
#else
void ops_par_loop_opensbliblock00Kernel069_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[3] = { arg0, arg1, arg2};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,3,range,3)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,3,"opensbliblock00Kernel069");
    block->instance->OPS_kernels[3].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "opensbliblock00Kernel069");
  #endif


  //compute locally allocated range for the sub-block
  int start[2];
  int end[2];
  int arg_idx[2];
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<2; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 3,block, range, start, end, arg_idx) < 0) return;
  #endif


  #if defined(OPS_MPI)
  #if defined(OPS_LAZY)
  sub_block_list sb = OPS_sub_block_list[block->index];
  arg_idx[0] = sb->decomp_disp[0];
  arg_idx[1] = sb->decomp_disp[1];
  #else
  arg_idx[0] -= start[0];
  arg_idx[1] -= start[1];
  #endif
  #else //OPS_MPI
  arg_idx[0] = 0;
  arg_idx[1] = 0;
  #endif //OPS_MPI

  //initialize global variable with the dimension of dats
  int xdim0_opensbliblock00Kernel069 = args[0].dat->size[0];
  int xdim1_opensbliblock00Kernel069 = args[1].dat->size[0];

  //set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset;
  double * __restrict__ x1_B0_p = (double *)(args[0].data + base0);

  int base1 = args[1].dat->base_offset;
  double * __restrict__ wk2_B0_p = (double *)(args[1].data + base1);




  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_host(args, 3);
  ops_halo_exchanges(args,3,range);
  ops_H_D_exchanges_host(args, 3);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[3].mpi_time += __t1-__t2;
  }

  #pragma omp parallel for
  for ( int n_y=start[1]; n_y<end[1]; n_y++ ){
    #ifdef __INTEL_COMPILER
    #pragma loop_count(10000)
    #pragma omp simd
    #elif defined(__clang__)
    #pragma clang loop vectorize(assume_safety)
    #elif defined(__GNUC__)
    #pragma GCC ivdep
    #else
    #pragma simd
    #endif
    for ( int n_x=start[0]; n_x<end[0]; n_x++ ){
      int idx[] = {arg_idx[0]+n_x, arg_idx[1]+n_y};
      const ACC<double> x1_B0(xdim0_opensbliblock00Kernel069, x1_B0_p + n_x*1 + n_y * xdim0_opensbliblock00Kernel069*1);
      ACC<double> wk2_B0(xdim1_opensbliblock00Kernel069, wk2_B0_p + n_x*1 + n_y * xdim1_opensbliblock00Kernel069*1);
      
    wk2_B0(0,0) = invDelta0block0*((idx[0] == 0) ? (
   3.0*x1_B0(1,0) + 0.333333333333333*x1_B0(3,0) - 1.5*x1_B0(2,0) -
      1.83333333333333*x1_B0(0,0)
)
: ((idx[0] == 1) ? (
   0.0394168524399447*x1_B0(2,0) +
      0.00571369039775442*x1_B0(4,0) + 0.719443173328855*x1_B0(1,0) - 0.322484932882161*x1_B0(0,0) -
      0.0658051057710389*x1_B0(3,0) - 0.376283677513354*x1_B0(-1,0)
)
: ((idx[0] == 2) ? (

      0.197184333887745*x1_B0(0,0) + 0.521455851089587*x1_B0(1,0) + 0.113446470384241*x1_B0(-2,0) -
      0.00412637789557492*x1_B0(3,0) - 0.0367146847001261*x1_B0(2,0) - 0.791245592765872*x1_B0(-1,0)
)
: ((idx[0] == 3)
      ? (
   0.0451033223343881*x1_B0(0,0) + 0.652141084861241*x1_B0(1,0) + 0.121937153224065*x1_B0(-2,0) -
      0.00932597985049999*x1_B0(-3,0) - 0.727822147724592*x1_B0(-1,0) - 0.082033432844602*x1_B0(2,0)
)
: ((idx[0] == -1
      + block0np0) ? (
   1.5*x1_B0(-2,0) + 1.83333333333333*x1_B0(0,0) - 3.0*x1_B0(-1,0) -
      0.333333333333333*x1_B0(-3,0)
)
: ((idx[0] == -2 + block0np0) ? (
   0.322484932882161*x1_B0(0,0) +
      0.0658051057710389*x1_B0(-3,0) + 0.376283677513354*x1_B0(1,0) - 0.0394168524399447*x1_B0(-2,0) -
      0.00571369039775442*x1_B0(-4,0) - 0.719443173328855*x1_B0(-1,0)
)
: ((idx[0] == -3 + block0np0) ? (

      0.00412637789557492*x1_B0(-3,0) + 0.0367146847001261*x1_B0(-2,0) + 0.791245592765872*x1_B0(1,0) -
      0.197184333887745*x1_B0(0,0) - 0.521455851089587*x1_B0(-1,0) - 0.113446470384241*x1_B0(2,0)
)
: ((idx[0] == -4 +
      block0np0) ? (
   0.00932597985049999*x1_B0(3,0) + 0.727822147724592*x1_B0(1,0) + 0.082033432844602*x1_B0(-2,0) -
      0.0451033223343881*x1_B0(0,0) - 0.652141084861241*x1_B0(-1,0) - 0.121937153224065*x1_B0(2,0)
)
: (

      -(2.0/3.0)*x1_B0(-1,0) - (1.0/12.0)*x1_B0(2,0) + ((1.0/12.0))*x1_B0(-2,0) + ((2.0/3.0))*x1_B0(1,0)
)))))))));


    }
  }
  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[3].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_host(args, 3);
  ops_set_halo_dirtybit3(&args[1],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[3].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[3].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[3].transfer += ops_compute_transfer(dim, start, end, &arg1);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel069(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2) {
  ops_arg args[3] = { arg0, arg1, arg2 };

  //create kernel descriptor and pass it to ops_enqueue_kernel
  create_kerneldesc_and_enque(name, args, 3, 3, dim, 0, range, block, ops_par_loop_opensbliblock00Kernel069_execute);
}
#endif
