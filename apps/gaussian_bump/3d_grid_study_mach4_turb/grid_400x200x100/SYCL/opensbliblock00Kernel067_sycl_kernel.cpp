//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel067(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8) {
#else
void ops_par_loop_opensbliblock00Kernel067_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[9] = { arg0, arg1, arg2, arg3, arg4,
 arg5, arg6, arg7, arg8};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,9,range,0)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,0,"opensbliblock00Kernel067");
    block->instance->OPS_kernels[0].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "opensbliblock00Kernel067");
  #endif


  //compute locally allocated range for the sub-block
  int start[3];
  int end[3];
  int arg_idx[3];
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<3; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 9,block, range, start, end, arg_idx) < 0) return;
  #endif

  #if defined(OPS_MPI)
  #if defined(OPS_LAZY)
  sub_block_list sb = OPS_sub_block_list[block->index];
  arg_idx[0] = sb->decomp_disp[0];
  arg_idx[1] = sb->decomp_disp[1];
  arg_idx[2] = sb->decomp_disp[2];
  #else
  arg_idx[0] -= start[0];
  arg_idx[1] -= start[1];
  arg_idx[2] -= start[2];
  #endif
  #else //OPS_MPI
  arg_idx[0] = 0;
  arg_idx[1] = 0;
  arg_idx[2] = 0;
  #endif //OPS_MPI

  //initialize global variable with the dimension of dats
  int xdim0_opensbliblock00Kernel067 = args[0].dat->size[0];
  int ydim0_opensbliblock00Kernel067 = args[0].dat->size[1];
  int xdim1_opensbliblock00Kernel067 = args[1].dat->size[0];
  int ydim1_opensbliblock00Kernel067 = args[1].dat->size[1];
  int xdim2_opensbliblock00Kernel067 = args[2].dat->size[0];
  int ydim2_opensbliblock00Kernel067 = args[2].dat->size[1];
  int xdim3_opensbliblock00Kernel067 = args[3].dat->size[0];
  int ydim3_opensbliblock00Kernel067 = args[3].dat->size[1];
  int xdim4_opensbliblock00Kernel067 = args[4].dat->size[0];
  int ydim4_opensbliblock00Kernel067 = args[4].dat->size[1];
  int xdim5_opensbliblock00Kernel067 = args[5].dat->size[0];
  int ydim5_opensbliblock00Kernel067 = args[5].dat->size[1];
  int xdim6_opensbliblock00Kernel067 = args[6].dat->size[0];
  int ydim6_opensbliblock00Kernel067 = args[6].dat->size[1];
  int xdim7_opensbliblock00Kernel067 = args[7].dat->size[0];
  int ydim7_opensbliblock00Kernel067 = args[7].dat->size[1];

  //set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset/sizeof(double);
  double* rhoE_B0_p = (double*)args[0].data_d;

  int base1 = args[1].dat->base_offset/sizeof(double);
  double* rho_B0_p = (double*)args[1].data_d;

  int base2 = args[2].dat->base_offset/sizeof(double);
  double* rhou0_B0_p = (double*)args[2].data_d;

  int base3 = args[3].dat->base_offset/sizeof(double);
  double* rhou1_B0_p = (double*)args[3].data_d;

  int base4 = args[4].dat->base_offset/sizeof(double);
  double* rhou2_B0_p = (double*)args[4].data_d;

  int base5 = args[5].dat->base_offset/sizeof(double);
  double* x0_B0_p = (double*)args[5].data_d;

  int base6 = args[6].dat->base_offset/sizeof(double);
  double* x2_B0_p = (double*)args[6].data_d;

  int base7 = args[7].dat->base_offset/sizeof(double);
  double* x1_B0_p = (double*)args[7].data_d;




  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_device(args, 9);
  ops_halo_exchanges(args,9,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[0].mpi_time += __t1-__t2;
  }

  int start_0 = start[0];
  int end_0 = end[0];
  int arg_idx_0 = arg_idx[0];
  int start_1 = start[1];
  int end_1 = end[1];
  int arg_idx_1 = arg_idx[1];
  int start_2 = start[2];
  int end_2 = end[2];
  int arg_idx_2 = arg_idx[2];
  if ((end[0]-start[0])>0 && (end[1]-start[1])>0 && (end[2]-start[2])>0) {
    block->instance->sycl_instance->queue->submit([&](cl::sycl::handler &cgh) {

      auto Delta0block0_sycl = (*Delta0block0_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto Delta1block0_sycl = (*Delta1block0_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto Delta2block0_sycl = (*Delta2block0_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto H_sycl = (*H_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto L_sycl = (*L_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto b_sycl = (*b_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto inv2Minf_sycl = (*inv2Minf_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto inv2a_sycl = (*inv2a_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto invH_sycl = (*invH_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto inv_gamma_m1_sycl = (*inv_gamma_m1_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto invgama_sycl = (*invgama_p).template get_access<cl::sycl::access::mode::read>(cgh);

      cgh.parallel_for<class opensbliblock00Kernel067_kernel>(cl::sycl::nd_range<3>(cl::sycl::range<3>(
           ((end[2]-start[2]-1)/block->instance->OPS_block_size_z+1)*block->instance->OPS_block_size_z,
           ((end[1]-start[1]-1)/block->instance->OPS_block_size_y+1)*block->instance->OPS_block_size_y,
            ((end[0]-start[0]-1)/block->instance->OPS_block_size_x+1)*block->instance->OPS_block_size_x
             ),cl::sycl::range<3>(
             block->instance->OPS_block_size_z,
             block->instance->OPS_block_size_y,
      block->instance->OPS_block_size_x
             ))
      , [=](cl::sycl::nd_item<3> item
      ) [[intel::kernel_args_restrict]] {
        int n_z = item.get_global_id(0)+start_2;
        int n_y = item.get_global_id(1)+start_1;
        int n_x = item.get_global_id(2)+start_0;
        int idx[] = {arg_idx_0+n_x, arg_idx_1+n_y, arg_idx_2+n_z};
        ACC<double> rhoE_B0(xdim0_opensbliblock00Kernel067, ydim0_opensbliblock00Kernel067, &rhoE_B0_p[0] + base0 + n_x*1 + n_y * xdim0_opensbliblock00Kernel067*1 + n_z * xdim0_opensbliblock00Kernel067 * ydim0_opensbliblock00Kernel067*1);
        ACC<double> rho_B0(xdim1_opensbliblock00Kernel067, ydim1_opensbliblock00Kernel067, &rho_B0_p[0] + base1 + n_x*1 + n_y * xdim1_opensbliblock00Kernel067*1 + n_z * xdim1_opensbliblock00Kernel067 * ydim1_opensbliblock00Kernel067*1);
        ACC<double> rhou0_B0(xdim2_opensbliblock00Kernel067, ydim2_opensbliblock00Kernel067, &rhou0_B0_p[0] + base2 + n_x*1 + n_y * xdim2_opensbliblock00Kernel067*1 + n_z * xdim2_opensbliblock00Kernel067 * ydim2_opensbliblock00Kernel067*1);
        ACC<double> rhou1_B0(xdim3_opensbliblock00Kernel067, ydim3_opensbliblock00Kernel067, &rhou1_B0_p[0] + base3 + n_x*1 + n_y * xdim3_opensbliblock00Kernel067*1 + n_z * xdim3_opensbliblock00Kernel067 * ydim3_opensbliblock00Kernel067*1);
        ACC<double> rhou2_B0(xdim4_opensbliblock00Kernel067, ydim4_opensbliblock00Kernel067, &rhou2_B0_p[0] + base4 + n_x*1 + n_y * xdim4_opensbliblock00Kernel067*1 + n_z * xdim4_opensbliblock00Kernel067 * ydim4_opensbliblock00Kernel067*1);
        ACC<double> x0_B0(xdim5_opensbliblock00Kernel067, ydim5_opensbliblock00Kernel067, &x0_B0_p[0] + base5 + n_x*1 + n_y * xdim5_opensbliblock00Kernel067*1 + n_z * xdim5_opensbliblock00Kernel067 * ydim5_opensbliblock00Kernel067*1);
        ACC<double> x2_B0(xdim6_opensbliblock00Kernel067, ydim6_opensbliblock00Kernel067, &x2_B0_p[0] + base6 + n_x*1 + n_y * xdim6_opensbliblock00Kernel067*1 + n_z * xdim6_opensbliblock00Kernel067 * ydim6_opensbliblock00Kernel067*1);
        ACC<double> x1_B0(xdim7_opensbliblock00Kernel067, ydim7_opensbliblock00Kernel067, &x1_B0_p[0] + base7 + n_x*1 + n_y * xdim7_opensbliblock00Kernel067*1 + n_z * xdim7_opensbliblock00Kernel067 * ydim7_opensbliblock00Kernel067*1);
        //USER CODE
        if (n_x < end_0 && n_y < end_1 && n_z < end_2) {
          
   double T = 0.0;
   double rho = 0.0;
   double rhou0 = 0.0;
   double rhou1 = 0.0;
   x0_B0(0,0,0) = Delta0block0_sycl[0]*idx[0];

    x1_B0(0,0,0) = ((1.0/20.0))*H_sycl[0]*cl::sycl::exp(-((-(1.0/2.0)*L_sycl[0] + Delta0block0_sycl[0]*idx[0])*(-(1.0/2.0)*L_sycl[0] +
      Delta0block0_sycl[0]*idx[0]))*inv2a_sycl[0]) + (-(1.0/20.0)*H_sycl[0]*cl::sycl::exp(-((-(1.0/2.0)*L_sycl[0] + Delta0block0_sycl[0]*idx[0])*(-(1.0/2.0)*L_sycl[0] +
      Delta0block0_sycl[0]*idx[0]))*inv2a_sycl[0]) + H_sycl[0])*sinh(b_sycl[0]*invH_sycl[0]*Delta1block0_sycl[0]*idx[1])/sinh(b_sycl[0]);

   x2_B0(0,0,0) = Delta2block0_sycl[0]*idx[2];

    rhou0 = ((x1_B0(0,0,0) < 3.03630363036304) ? (
   4.84470319627795e-6 + 3.02526630796405e-7*pow(x1_B0(0,0,0), 25) +
      1.74234589465073e-7*pow(x1_B0(0,0,0), 26) + 0.000372853514282923*pow(x1_B0(0,0,0), 19) +
      2.28285280708983e-11*pow(x1_B0(0,0,0), 34) + 4.11331346207011*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) +
      0.0681016509439579*pow(x1_B0(0,0,0), 14) + 7.30106371185324e-5*pow(x1_B0(0,0,0), 20) +
      1.85237327214938e-12*pow(x1_B0(0,0,0), 36) + 8.68008064436135e-12*pow(x1_B0(0,0,0), 35) +
      0.149430464665782*pow(x1_B0(0,0,0), 13) + 4.79482882987701*pow(x1_B0(0,0,0), 10) +
      3.69916311003817e-9*pow(x1_B0(0,0,0), 28) + 0.000554620180547822*pow(x1_B0(0,0,0), 18) +
      18.205643200438*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) +
      19.1312269076461*pow(x1_B0(0,0,0), 7) + 2.33453756049161e-15*pow(x1_B0(0,0,0), 42) +
      0.712531311977064*x1_B0(0,0,0) + 1.39289122578023e-15*pow(x1_B0(0,0,0), 43) +
      4.79988189691391e-8*pow(x1_B0(0,0,0), 27) + 2.9411909790281e-18*pow(x1_B0(0,0,0), 49) +
      3.83548437870764e-16*pow(x1_B0(0,0,0), 44) + 2.55432030185843e-11*pow(x1_B0(0,0,0), 33) +
      6.7200916109978e-18*pow(x1_B0(0,0,0), 45) - 9.75801199343951*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0))
      - 1.11611368795713*pow(x1_B0(0,0,0), 11) - 0.0094043241504171*pow(x1_B0(0,0,0), 16) -
      2.9519158546936e-14*pow(x1_B0(0,0,0), 40) -
      23.7751867434047*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) -
      1.31671459660688e-5*pow(x1_B0(0,0,0), 21) - 1.33226733762979e-5*pow(x1_B0(0,0,0), 22) -
      2.08492280644717e-9*pow(x1_B0(0,0,0), 30) - 1.90294562105522e-17*pow(x1_B0(0,0,0), 47) -
      5.9049048002554*pow(x1_B0(0,0,0), 8) - 9.08370813481916e-11*pow(x1_B0(0,0,0), 32) -
      0.00702382015116634*pow(x1_B0(0,0,0), 15) - 2.06884942138734e-19*pow(x1_B0(0,0,0), 48) -
      4.26727667793311*pow(x1_B0(0,0,0), 9) - 3.0785299544297e-14*pow(x1_B0(0,0,0), 37) -
      4.13618913330935e-6*pow(x1_B0(0,0,0), 23) - 2.20010013855109e-15*pow(x1_B0(0,0,0), 41) -
      6.44851048614519e-10*pow(x1_B0(0,0,0), 31) - 3.34275847027426e-7*pow(x1_B0(0,0,0), 24) -
      1.40944771740273*(x1_B0(0,0,0)*x1_B0(0,0,0)) - 4.51470098749031e-17*pow(x1_B0(0,0,0), 46) -
      0.00167612026242843*pow(x1_B0(0,0,0), 17) - 0.464021120061018*pow(x1_B0(0,0,0), 12) -
      3.46091917423212e-9*pow(x1_B0(0,0,0), 29) - 4.10735237670049e-19*pow(x1_B0(0,0,0), 50) -
      1.09257070010783e-13*pow(x1_B0(0,0,0), 39) - 2.23323692653076e-13*pow(x1_B0(0,0,0), 38)
)
: (

      0.999998990614738
));

    rhou1 = ((x1_B0(0,0,0) < 3.03630363036304) ? (
   1.95729794562414e-8 + 0.288671484925218*pow(x1_B0(0,0,0), 8) +
      0.00150650846346765*(x1_B0(0,0,0)*x1_B0(0,0,0)) + 9.28907124367508e-14*pow(x1_B0(0,0,0), 33) +
      1.87227069925768e-13*pow(x1_B0(0,0,0), 34) + 2.69110844442441e-20*pow(x1_B0(0,0,0), 49) +
      6.41659859835918e-5*pow(x1_B0(0,0,0), 15) + 0.0755941392568768*pow(x1_B0(0,0,0), 10) +
      1.75918126994432e-17*pow(x1_B0(0,0,0), 42) + 1.24238354414316e-15*pow(x1_B0(0,0,0), 37) +
      8.31164938550847e-14*pow(x1_B0(0,0,0), 35) + 1.21499835321655e-8*pow(x1_B0(0,0,0), 21) +
      1.55931541831987e-9*pow(x1_B0(0,0,0), 26) + 1.63254062058984e-9*pow(x1_B0(0,0,0), 25) +
      0.000518630838066326*pow(x1_B0(0,0,0), 13) + 3.80212429694364e-18*pow(x1_B0(0,0,0), 44) +
      1.0698195518771e-6*pow(x1_B0(0,0,0), 20) + 5.36121231348108e-10*pow(x1_B0(0,0,0), 27) +
      0.156166079374583*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) +
      0.0202972119799195*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) + 8.11654362143126e-11*pow(x1_B0(0,0,0),
      28) + 2.0893405697099e-14*pow(x1_B0(0,0,0), 36) + 1.4945540545201e-6*pow(x1_B0(0,0,0), 18) +
      1.25509734301471e-17*pow(x1_B0(0,0,0), 43) + 2.01612466792397e-19*pow(x1_B0(0,0,0), 45) +
      3.55635863251083e-6*pow(x1_B0(0,0,0), 19) + 0.000916743042294744*pow(x1_B0(0,0,0), 14) -
      0.00176501108873094*pow(x1_B0(0,0,0), 11) - 3.64042294255687e-21*pow(x1_B0(0,0,0), 50) -
      1.70927764953959e-15*pow(x1_B0(0,0,0), 38) - 7.70810522233823e-9*pow(x1_B0(0,0,0), 24) -
      1.28901083285288e-12*pow(x1_B0(0,0,0), 32) - 1.81611119641614e-11*pow(x1_B0(0,0,0), 30) -
      3.00737073897751e-16*pow(x1_B0(0,0,0), 40) - 1.79315842269108e-19*pow(x1_B0(0,0,0), 47) -
      0.00805371784741751*pow(x1_B0(0,0,0), 12) - 0.258780134460638*pow(x1_B0(0,0,0), 7) -
      0.0655597899310164*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) -
      9.93536519008939e-16*pow(x1_B0(0,0,0), 39) - 0.00486911095936617*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) -
      3.50476552150713e-17*pow(x1_B0(0,0,0), 41) - 1.95714036248594e-11*pow(x1_B0(0,0,0), 29) -
      2.66645558298625e-6*x1_B0(0,0,0) - 8.79992516978442e-5*pow(x1_B0(0,0,0), 16) -
      4.63750770177386e-8*pow(x1_B0(0,0,0), 23) - 0.203667418276254*pow(x1_B0(0,0,0), 9) -
      5.57830549657364e-21*pow(x1_B0(0,0,0), 48) - 3.88268650687612e-19*pow(x1_B0(0,0,0), 46) -
      6.67471730033211e-12*pow(x1_B0(0,0,0), 31) - 1.10537056409946e-7*pow(x1_B0(0,0,0), 22) -
      2.84184371260082e-5*pow(x1_B0(0,0,0), 17)
)
: (
   0.00399361131424684
));

    T = ((x1_B0(0,0,0) < 3.03630363036304) ? (
   1.3697052553685 + 1.28936935581061e-9*pow(x1_B0(0,0,0), 29) +
      5.32009899923074e-6*pow(x1_B0(0,0,0), 23) + 1.88440949856522e-9*pow(x1_B0(0,0,0), 30) +
      46.9378793668066*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) +
      7.64013805811628e-10*pow(x1_B0(0,0,0), 31) + 0.00771039710661354*pow(x1_B0(0,0,0), 16) +
      47.8727531176556*pow(x1_B0(0,0,0), 9) + 0.102651375077392*pow(x1_B0(0,0,0), 13) + 2.05024935274229*x1_B0(0,0,0) +
      0.0042068846555653*pow(x1_B0(0,0,0), 17) + 9.49612701335754e-6*pow(x1_B0(0,0,0), 22) +
      1.64734972146088e-10*pow(x1_B0(0,0,0), 32) + 1.83428311168133e-13*pow(x1_B0(0,0,0), 38) +
      6.52236018094809*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) + 4.59809902234877e-17*pow(x1_B0(0,0,0), 46) +
      106.798208294561*pow(x1_B0(0,0,0), 7) + 1.13945218533936e-13*pow(x1_B0(0,0,0), 39) +
      4.41756723567205e-19*pow(x1_B0(0,0,0), 50) + 1.17071888950479e-6*pow(x1_B0(0,0,0), 24) +
      3.56784261397435e-14*pow(x1_B0(0,0,0), 40) + 4.48267933563387e-15*pow(x1_B0(0,0,0), 41) +
      1.29269070547175*pow(x1_B0(0,0,0), 12) + 0.000317059486332761*pow(x1_B0(0,0,0), 18) +
      2.15964603429758e-17*pow(x1_B0(0,0,0), 47) + 7.17725141607208e-19*pow(x1_B0(0,0,0), 48) -
      84.5681310889815*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) -
      1.96430540919528e-15*pow(x1_B0(0,0,0), 42) - 0.000143684372361934*pow(x1_B0(0,0,0), 20) -
      1.50299679197039e-5*pow(x1_B0(0,0,0), 21) - 6.24393430418641e-8*pow(x1_B0(0,0,0), 27) -
      19.1007567960575*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) - 1.97339357196591e-11*pow(x1_B0(0,0,0),
      34) - 90.7863955978125*pow(x1_B0(0,0,0), 8) - 1.440019297608*pow(x1_B0(0,0,0), 11) -
      11.7554327681854*pow(x1_B0(0,0,0), 10) - 1.17265976829984e-8*pow(x1_B0(0,0,0), 28) -
      1.4720935803585e-15*pow(x1_B0(0,0,0), 43) - 3.18670962206325e-12*pow(x1_B0(0,0,0), 33) -
      4.55622624124269e-16*pow(x1_B0(0,0,0), 44) - 7.08593637264995e-8*pow(x1_B0(0,0,0), 25) -
      9.44281689455367e-12*pow(x1_B0(0,0,0), 35) - 1.56334531809739e-7*pow(x1_B0(0,0,0), 26) -
      2.51082676162032e-12*pow(x1_B0(0,0,0), 36) - 0.000339492046772559*pow(x1_B0(0,0,0), 19) -
      0.0246146050739303*pow(x1_B0(0,0,0), 15) - 1.98173218628524e-13*pow(x1_B0(0,0,0), 37) -
      3.53367509574732*(x1_B0(0,0,0)*x1_B0(0,0,0)) - 3.25915900995778e-18*pow(x1_B0(0,0,0), 49) -
      2.65217102642266e-17*pow(x1_B0(0,0,0), 45) - 0.12038532458648*pow(x1_B0(0,0,0), 14)
)
: (
   1.00000100684787
));

   rho = 1.0/T;

   rho_B0(0,0,0) = rho;

   rhou0_B0(0,0,0) = rhou0;

   rhou1_B0(0,0,0) = rhou1;

   rhoE_B0(0,0,0) = (0.5*(rhou0*rhou0) + 0.5*(rhou1*rhou1))/rho + invgama_sycl[0]*inv2Minf_sycl[0]*inv_gamma_m1_sycl[0]*T*rho;

   rhou2_B0(0,0,0) = 0.0;


        }
      });
    });
  }
  if (block->instance->OPS_diags > 1) {
    block->instance->sycl_instance->queue->wait();
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[0].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 9);
  ops_set_halo_dirtybit3(&args[0],range);
  ops_set_halo_dirtybit3(&args[1],range);
  ops_set_halo_dirtybit3(&args[2],range);
  ops_set_halo_dirtybit3(&args[3],range);
  ops_set_halo_dirtybit3(&args[4],range);
  ops_set_halo_dirtybit3(&args[5],range);
  ops_set_halo_dirtybit3(&args[6],range);
  ops_set_halo_dirtybit3(&args[7],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[0].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg7);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel067(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)calloc(1,sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 1;
  desc->index = 0;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 0;
  for ( int i=0; i<6; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 9;
  desc->args = (ops_arg*)ops_malloc(9*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg2.dat->index;
  desc->args[3] = arg3;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg3.dat->index;
  desc->args[4] = arg4;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg4.dat->index;
  desc->args[5] = arg5;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg5.dat->index;
  desc->args[6] = arg6;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg6.dat->index;
  desc->args[7] = arg7;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg7.dat->index;
  desc->args[8] = arg8;
  desc->function = ops_par_loop_opensbliblock00Kernel067_execute;
  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,0,"opensbliblock00Kernel067");
  }
  ops_enqueue_kernel(desc);
}
#endif
