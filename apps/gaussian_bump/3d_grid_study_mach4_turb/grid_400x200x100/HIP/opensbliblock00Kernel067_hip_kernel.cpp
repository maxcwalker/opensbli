//
// auto-generated by ops.py
//
__constant__ int dims_opensbliblock00Kernel067 [9][2];
static int dims_opensbliblock00Kernel067_h [9][2] = {{0}};

//user function
__device__

 void opensbliblock00Kernel067_gpu(ACC<double> &rhoE_B0,
  ACC<double> &rho_B0,
  ACC<double> &rhou0_B0,
  ACC<double> &rhou1_B0,
  ACC<double> &rhou2_B0,
  ACC<double> &x0_B0,
  ACC<double> &x2_B0,
  ACC<double> &x1_B0,
  const int *idx)
{
   double T = 0.0;
   double rho = 0.0;
   double rhou0 = 0.0;
   double rhou1 = 0.0;
   x0_B0(0,0,0) = Delta0block0*idx[0];

    x1_B0(0,0,0) = ((1.0/20.0))*H*exp(-((-(1.0/2.0)*L + Delta0block0*idx[0])*(-(1.0/2.0)*L +
      Delta0block0*idx[0]))*inv2a) + (-(1.0/20.0)*H*exp(-((-(1.0/2.0)*L + Delta0block0*idx[0])*(-(1.0/2.0)*L +
      Delta0block0*idx[0]))*inv2a) + H)*sinh(b*invH*Delta1block0*idx[1])/sinh(b);

   x2_B0(0,0,0) = Delta2block0*idx[2];

    rhou0 = ((x1_B0(0,0,0) < 3.03630363036304) ? (
   4.84470319627795e-6 + 3.02526630796405e-7*pow(x1_B0(0,0,0), 25) +
      1.74234589465073e-7*pow(x1_B0(0,0,0), 26) + 0.000372853514282923*pow(x1_B0(0,0,0), 19) +
      2.28285280708983e-11*pow(x1_B0(0,0,0), 34) + 4.11331346207011*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) +
      0.0681016509439579*pow(x1_B0(0,0,0), 14) + 7.30106371185324e-5*pow(x1_B0(0,0,0), 20) +
      1.85237327214938e-12*pow(x1_B0(0,0,0), 36) + 8.68008064436135e-12*pow(x1_B0(0,0,0), 35) +
      0.149430464665782*pow(x1_B0(0,0,0), 13) + 4.79482882987701*pow(x1_B0(0,0,0), 10) +
      3.69916311003817e-9*pow(x1_B0(0,0,0), 28) + 0.000554620180547822*pow(x1_B0(0,0,0), 18) +
      18.205643200438*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) +
      19.1312269076461*pow(x1_B0(0,0,0), 7) + 2.33453756049161e-15*pow(x1_B0(0,0,0), 42) +
      0.712531311977064*x1_B0(0,0,0) + 1.39289122578023e-15*pow(x1_B0(0,0,0), 43) +
      4.79988189691391e-8*pow(x1_B0(0,0,0), 27) + 2.9411909790281e-18*pow(x1_B0(0,0,0), 49) +
      3.83548437870764e-16*pow(x1_B0(0,0,0), 44) + 2.55432030185843e-11*pow(x1_B0(0,0,0), 33) +
      6.7200916109978e-18*pow(x1_B0(0,0,0), 45) - 9.75801199343951*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0))
      - 1.11611368795713*pow(x1_B0(0,0,0), 11) - 0.0094043241504171*pow(x1_B0(0,0,0), 16) -
      2.9519158546936e-14*pow(x1_B0(0,0,0), 40) -
      23.7751867434047*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) -
      1.31671459660688e-5*pow(x1_B0(0,0,0), 21) - 1.33226733762979e-5*pow(x1_B0(0,0,0), 22) -
      2.08492280644717e-9*pow(x1_B0(0,0,0), 30) - 1.90294562105522e-17*pow(x1_B0(0,0,0), 47) -
      5.9049048002554*pow(x1_B0(0,0,0), 8) - 9.08370813481916e-11*pow(x1_B0(0,0,0), 32) -
      0.00702382015116634*pow(x1_B0(0,0,0), 15) - 2.06884942138734e-19*pow(x1_B0(0,0,0), 48) -
      4.26727667793311*pow(x1_B0(0,0,0), 9) - 3.0785299544297e-14*pow(x1_B0(0,0,0), 37) -
      4.13618913330935e-6*pow(x1_B0(0,0,0), 23) - 2.20010013855109e-15*pow(x1_B0(0,0,0), 41) -
      6.44851048614519e-10*pow(x1_B0(0,0,0), 31) - 3.34275847027426e-7*pow(x1_B0(0,0,0), 24) -
      1.40944771740273*(x1_B0(0,0,0)*x1_B0(0,0,0)) - 4.51470098749031e-17*pow(x1_B0(0,0,0), 46) -
      0.00167612026242843*pow(x1_B0(0,0,0), 17) - 0.464021120061018*pow(x1_B0(0,0,0), 12) -
      3.46091917423212e-9*pow(x1_B0(0,0,0), 29) - 4.10735237670049e-19*pow(x1_B0(0,0,0), 50) -
      1.09257070010783e-13*pow(x1_B0(0,0,0), 39) - 2.23323692653076e-13*pow(x1_B0(0,0,0), 38)
)
: (

      0.999998990614738
));

    rhou1 = ((x1_B0(0,0,0) < 3.03630363036304) ? (
   1.95729794562414e-8 + 0.288671484925218*pow(x1_B0(0,0,0), 8) +
      0.00150650846346765*(x1_B0(0,0,0)*x1_B0(0,0,0)) + 9.28907124367508e-14*pow(x1_B0(0,0,0), 33) +
      1.87227069925768e-13*pow(x1_B0(0,0,0), 34) + 2.69110844442441e-20*pow(x1_B0(0,0,0), 49) +
      6.41659859835918e-5*pow(x1_B0(0,0,0), 15) + 0.0755941392568768*pow(x1_B0(0,0,0), 10) +
      1.75918126994432e-17*pow(x1_B0(0,0,0), 42) + 1.24238354414316e-15*pow(x1_B0(0,0,0), 37) +
      8.31164938550847e-14*pow(x1_B0(0,0,0), 35) + 1.21499835321655e-8*pow(x1_B0(0,0,0), 21) +
      1.55931541831987e-9*pow(x1_B0(0,0,0), 26) + 1.63254062058984e-9*pow(x1_B0(0,0,0), 25) +
      0.000518630838066326*pow(x1_B0(0,0,0), 13) + 3.80212429694364e-18*pow(x1_B0(0,0,0), 44) +
      1.0698195518771e-6*pow(x1_B0(0,0,0), 20) + 5.36121231348108e-10*pow(x1_B0(0,0,0), 27) +
      0.156166079374583*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) +
      0.0202972119799195*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) + 8.11654362143126e-11*pow(x1_B0(0,0,0),
      28) + 2.0893405697099e-14*pow(x1_B0(0,0,0), 36) + 1.4945540545201e-6*pow(x1_B0(0,0,0), 18) +
      1.25509734301471e-17*pow(x1_B0(0,0,0), 43) + 2.01612466792397e-19*pow(x1_B0(0,0,0), 45) +
      3.55635863251083e-6*pow(x1_B0(0,0,0), 19) + 0.000916743042294744*pow(x1_B0(0,0,0), 14) -
      0.00176501108873094*pow(x1_B0(0,0,0), 11) - 3.64042294255687e-21*pow(x1_B0(0,0,0), 50) -
      1.70927764953959e-15*pow(x1_B0(0,0,0), 38) - 7.70810522233823e-9*pow(x1_B0(0,0,0), 24) -
      1.28901083285288e-12*pow(x1_B0(0,0,0), 32) - 1.81611119641614e-11*pow(x1_B0(0,0,0), 30) -
      3.00737073897751e-16*pow(x1_B0(0,0,0), 40) - 1.79315842269108e-19*pow(x1_B0(0,0,0), 47) -
      0.00805371784741751*pow(x1_B0(0,0,0), 12) - 0.258780134460638*pow(x1_B0(0,0,0), 7) -
      0.0655597899310164*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) -
      9.93536519008939e-16*pow(x1_B0(0,0,0), 39) - 0.00486911095936617*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) -
      3.50476552150713e-17*pow(x1_B0(0,0,0), 41) - 1.95714036248594e-11*pow(x1_B0(0,0,0), 29) -
      2.66645558298625e-6*x1_B0(0,0,0) - 8.79992516978442e-5*pow(x1_B0(0,0,0), 16) -
      4.63750770177386e-8*pow(x1_B0(0,0,0), 23) - 0.203667418276254*pow(x1_B0(0,0,0), 9) -
      5.57830549657364e-21*pow(x1_B0(0,0,0), 48) - 3.88268650687612e-19*pow(x1_B0(0,0,0), 46) -
      6.67471730033211e-12*pow(x1_B0(0,0,0), 31) - 1.10537056409946e-7*pow(x1_B0(0,0,0), 22) -
      2.84184371260082e-5*pow(x1_B0(0,0,0), 17)
)
: (
   0.00399361131424684
));

    T = ((x1_B0(0,0,0) < 3.03630363036304) ? (
   1.3697052553685 + 1.28936935581061e-9*pow(x1_B0(0,0,0), 29) +
      5.32009899923074e-6*pow(x1_B0(0,0,0), 23) + 1.88440949856522e-9*pow(x1_B0(0,0,0), 30) +
      46.9378793668066*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) +
      7.64013805811628e-10*pow(x1_B0(0,0,0), 31) + 0.00771039710661354*pow(x1_B0(0,0,0), 16) +
      47.8727531176556*pow(x1_B0(0,0,0), 9) + 0.102651375077392*pow(x1_B0(0,0,0), 13) + 2.05024935274229*x1_B0(0,0,0) +
      0.0042068846555653*pow(x1_B0(0,0,0), 17) + 9.49612701335754e-6*pow(x1_B0(0,0,0), 22) +
      1.64734972146088e-10*pow(x1_B0(0,0,0), 32) + 1.83428311168133e-13*pow(x1_B0(0,0,0), 38) +
      6.52236018094809*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) + 4.59809902234877e-17*pow(x1_B0(0,0,0), 46) +
      106.798208294561*pow(x1_B0(0,0,0), 7) + 1.13945218533936e-13*pow(x1_B0(0,0,0), 39) +
      4.41756723567205e-19*pow(x1_B0(0,0,0), 50) + 1.17071888950479e-6*pow(x1_B0(0,0,0), 24) +
      3.56784261397435e-14*pow(x1_B0(0,0,0), 40) + 4.48267933563387e-15*pow(x1_B0(0,0,0), 41) +
      1.29269070547175*pow(x1_B0(0,0,0), 12) + 0.000317059486332761*pow(x1_B0(0,0,0), 18) +
      2.15964603429758e-17*pow(x1_B0(0,0,0), 47) + 7.17725141607208e-19*pow(x1_B0(0,0,0), 48) -
      84.5681310889815*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) -
      1.96430540919528e-15*pow(x1_B0(0,0,0), 42) - 0.000143684372361934*pow(x1_B0(0,0,0), 20) -
      1.50299679197039e-5*pow(x1_B0(0,0,0), 21) - 6.24393430418641e-8*pow(x1_B0(0,0,0), 27) -
      19.1007567960575*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) - 1.97339357196591e-11*pow(x1_B0(0,0,0),
      34) - 90.7863955978125*pow(x1_B0(0,0,0), 8) - 1.440019297608*pow(x1_B0(0,0,0), 11) -
      11.7554327681854*pow(x1_B0(0,0,0), 10) - 1.17265976829984e-8*pow(x1_B0(0,0,0), 28) -
      1.4720935803585e-15*pow(x1_B0(0,0,0), 43) - 3.18670962206325e-12*pow(x1_B0(0,0,0), 33) -
      4.55622624124269e-16*pow(x1_B0(0,0,0), 44) - 7.08593637264995e-8*pow(x1_B0(0,0,0), 25) -
      9.44281689455367e-12*pow(x1_B0(0,0,0), 35) - 1.56334531809739e-7*pow(x1_B0(0,0,0), 26) -
      2.51082676162032e-12*pow(x1_B0(0,0,0), 36) - 0.000339492046772559*pow(x1_B0(0,0,0), 19) -
      0.0246146050739303*pow(x1_B0(0,0,0), 15) - 1.98173218628524e-13*pow(x1_B0(0,0,0), 37) -
      3.53367509574732*(x1_B0(0,0,0)*x1_B0(0,0,0)) - 3.25915900995778e-18*pow(x1_B0(0,0,0), 49) -
      2.65217102642266e-17*pow(x1_B0(0,0,0), 45) - 0.12038532458648*pow(x1_B0(0,0,0), 14)
)
: (
   1.00000100684787
));

   rho = 1.0/T;

   rho_B0(0,0,0) = rho;

   rhou0_B0(0,0,0) = rhou0;

   rhou1_B0(0,0,0) = rhou1;

   rhoE_B0(0,0,0) = (0.5*(rhou0*rhou0) + 0.5*(rhou1*rhou1))/rho + invgama*inv2Minf*inv_gamma_m1*T*rho;

   rhou2_B0(0,0,0) = 0.0;

}



__global__ void ops_opensbliblock00Kernel067(
double* __restrict arg0,
double* __restrict arg1,
double* __restrict arg2,
double* __restrict arg3,
double* __restrict arg4,
double* __restrict arg5,
double* __restrict arg6,
double* __restrict arg7,
int arg_idx0, int arg_idx1, int arg_idx2,
int size0,
int size1,
int size2 ){


  int idx_z = blockDim.z * blockIdx.z + threadIdx.z;
  int idx_y = blockDim.y * blockIdx.y + threadIdx.y;
  int idx_x = blockDim.x * blockIdx.x + threadIdx.x;

  int arg_idx[3];
  arg_idx[0] = arg_idx0+idx_x;
  arg_idx[1] = arg_idx1+idx_y;
  arg_idx[2] = arg_idx2+idx_z;
  arg0 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel067[0][0] + idx_z * 1*1 * dims_opensbliblock00Kernel067[0][0] * dims_opensbliblock00Kernel067[0][1];
  arg1 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel067[1][0] + idx_z * 1*1 * dims_opensbliblock00Kernel067[1][0] * dims_opensbliblock00Kernel067[1][1];
  arg2 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel067[2][0] + idx_z * 1*1 * dims_opensbliblock00Kernel067[2][0] * dims_opensbliblock00Kernel067[2][1];
  arg3 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel067[3][0] + idx_z * 1*1 * dims_opensbliblock00Kernel067[3][0] * dims_opensbliblock00Kernel067[3][1];
  arg4 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel067[4][0] + idx_z * 1*1 * dims_opensbliblock00Kernel067[4][0] * dims_opensbliblock00Kernel067[4][1];
  arg5 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel067[5][0] + idx_z * 1*1 * dims_opensbliblock00Kernel067[5][0] * dims_opensbliblock00Kernel067[5][1];
  arg6 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel067[6][0] + idx_z * 1*1 * dims_opensbliblock00Kernel067[6][0] * dims_opensbliblock00Kernel067[6][1];
  arg7 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel067[7][0] + idx_z * 1*1 * dims_opensbliblock00Kernel067[7][0] * dims_opensbliblock00Kernel067[7][1];

  if (idx_x < size0 && idx_y < size1 && idx_z < size2) {
    ACC<double> argp0(dims_opensbliblock00Kernel067[0][0], dims_opensbliblock00Kernel067[0][1], arg0);
    ACC<double> argp1(dims_opensbliblock00Kernel067[1][0], dims_opensbliblock00Kernel067[1][1], arg1);
    ACC<double> argp2(dims_opensbliblock00Kernel067[2][0], dims_opensbliblock00Kernel067[2][1], arg2);
    ACC<double> argp3(dims_opensbliblock00Kernel067[3][0], dims_opensbliblock00Kernel067[3][1], arg3);
    ACC<double> argp4(dims_opensbliblock00Kernel067[4][0], dims_opensbliblock00Kernel067[4][1], arg4);
    ACC<double> argp5(dims_opensbliblock00Kernel067[5][0], dims_opensbliblock00Kernel067[5][1], arg5);
    ACC<double> argp6(dims_opensbliblock00Kernel067[6][0], dims_opensbliblock00Kernel067[6][1], arg6);
    ACC<double> argp7(dims_opensbliblock00Kernel067[7][0], dims_opensbliblock00Kernel067[7][1], arg7);
    opensbliblock00Kernel067_gpu(
     argp0, argp1, argp2, argp3, argp4,
     argp5, argp6, argp7, arg_idx);
  }

}

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel067(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8) {
#else
void ops_par_loop_opensbliblock00Kernel067_execute(ops_kernel_descriptor *desc) {
  int dim = desc->dim;
  #if OPS_MPI
  ops_block block = desc->block;
  #endif
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  #endif

  //Timing
  double t1,t2,c1,c2;

  ops_arg args[9] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8};


  #if CHECKPOINTING && !OPS_LAZY
  if (!ops_checkpointing_before(args,9,range,0)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,0,"opensbliblock00Kernel067");
    block->instance->OPS_kernels[0].count++;
    ops_timers_core(&c1,&t1);
  }

  //compute locally allocated range for the sub-block
  int start[3];
  int end[3];

  int arg_idx[3];
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<3; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 9,block, range, start, end, arg_idx) < 0) return;
  #endif

  #if defined(OPS_MPI)
  #if defined(OPS_LAZY)
  sub_block_list sb = OPS_sub_block_list[block->index];
  arg_idx[0] = sb->decomp_disp[0]+start[0];
  arg_idx[1] = sb->decomp_disp[1]+start[1];
  arg_idx[2] = sb->decomp_disp[2]+start[2];
  #endif
  #else //OPS_MPI
  arg_idx[0] = start[0];
  arg_idx[1] = start[1];
  arg_idx[2] = start[2];
  #endif //OPS_MPI
  int xdim0 = args[0].dat->size[0];
  int ydim0 = args[0].dat->size[1];
  int xdim1 = args[1].dat->size[0];
  int ydim1 = args[1].dat->size[1];
  int xdim2 = args[2].dat->size[0];
  int ydim2 = args[2].dat->size[1];
  int xdim3 = args[3].dat->size[0];
  int ydim3 = args[3].dat->size[1];
  int xdim4 = args[4].dat->size[0];
  int ydim4 = args[4].dat->size[1];
  int xdim5 = args[5].dat->size[0];
  int ydim5 = args[5].dat->size[1];
  int xdim6 = args[6].dat->size[0];
  int ydim6 = args[6].dat->size[1];
  int xdim7 = args[7].dat->size[0];
  int ydim7 = args[7].dat->size[1];

  if (xdim0 != dims_opensbliblock00Kernel067_h[0][0] || ydim0 != dims_opensbliblock00Kernel067_h[0][1] || xdim1 != dims_opensbliblock00Kernel067_h[1][0] || ydim1 != dims_opensbliblock00Kernel067_h[1][1] || xdim2 != dims_opensbliblock00Kernel067_h[2][0] || ydim2 != dims_opensbliblock00Kernel067_h[2][1] || xdim3 != dims_opensbliblock00Kernel067_h[3][0] || ydim3 != dims_opensbliblock00Kernel067_h[3][1] || xdim4 != dims_opensbliblock00Kernel067_h[4][0] || ydim4 != dims_opensbliblock00Kernel067_h[4][1] || xdim5 != dims_opensbliblock00Kernel067_h[5][0] || ydim5 != dims_opensbliblock00Kernel067_h[5][1] || xdim6 != dims_opensbliblock00Kernel067_h[6][0] || ydim6 != dims_opensbliblock00Kernel067_h[6][1] || xdim7 != dims_opensbliblock00Kernel067_h[7][0] || ydim7 != dims_opensbliblock00Kernel067_h[7][1]) {
    dims_opensbliblock00Kernel067_h[0][0] = xdim0;
    dims_opensbliblock00Kernel067_h[0][1] = ydim0;
    dims_opensbliblock00Kernel067_h[1][0] = xdim1;
    dims_opensbliblock00Kernel067_h[1][1] = ydim1;
    dims_opensbliblock00Kernel067_h[2][0] = xdim2;
    dims_opensbliblock00Kernel067_h[2][1] = ydim2;
    dims_opensbliblock00Kernel067_h[3][0] = xdim3;
    dims_opensbliblock00Kernel067_h[3][1] = ydim3;
    dims_opensbliblock00Kernel067_h[4][0] = xdim4;
    dims_opensbliblock00Kernel067_h[4][1] = ydim4;
    dims_opensbliblock00Kernel067_h[5][0] = xdim5;
    dims_opensbliblock00Kernel067_h[5][1] = ydim5;
    dims_opensbliblock00Kernel067_h[6][0] = xdim6;
    dims_opensbliblock00Kernel067_h[6][1] = ydim6;
    dims_opensbliblock00Kernel067_h[7][0] = xdim7;
    dims_opensbliblock00Kernel067_h[7][1] = ydim7;
    hipSafeCall(block->instance->ostream(), hipMemcpyToSymbol( dims_opensbliblock00Kernel067, dims_opensbliblock00Kernel067_h, sizeof(dims_opensbliblock00Kernel067)));
  }



  int x_size = MAX(0,end[0]-start[0]);
  int y_size = MAX(0,end[1]-start[1]);
  int z_size = MAX(0,end[2]-start[2]);

  dim3 grid( (x_size-1)/block->instance->OPS_block_size_x+ 1, (y_size-1)/block->instance->OPS_block_size_y + 1, (z_size-1)/block->instance->OPS_block_size_z +1);
  dim3 tblock(block->instance->OPS_block_size_x,block->instance->OPS_block_size_y,block->instance->OPS_block_size_z);



  long long int dat0 = (block->instance->OPS_soa ? args[0].dat->type_size : args[0].dat->elem_size);
  long long int dat1 = (block->instance->OPS_soa ? args[1].dat->type_size : args[1].dat->elem_size);
  long long int dat2 = (block->instance->OPS_soa ? args[2].dat->type_size : args[2].dat->elem_size);
  long long int dat3 = (block->instance->OPS_soa ? args[3].dat->type_size : args[3].dat->elem_size);
  long long int dat4 = (block->instance->OPS_soa ? args[4].dat->type_size : args[4].dat->elem_size);
  long long int dat5 = (block->instance->OPS_soa ? args[5].dat->type_size : args[5].dat->elem_size);
  long long int dat6 = (block->instance->OPS_soa ? args[6].dat->type_size : args[6].dat->elem_size);
  long long int dat7 = (block->instance->OPS_soa ? args[7].dat->type_size : args[7].dat->elem_size);

  char *p_a[9];

  //set up initial pointers
  long long int base0 = args[0].dat->base_offset + 
           dat0 * 1 * (start[0] * args[0].stencil->stride[0]);
  base0 = base0+ dat0 *
    args[0].dat->size[0] *
    (start[1] * args[0].stencil->stride[1]);
  base0 = base0+ dat0 *
    args[0].dat->size[0] *
    args[0].dat->size[1] *
    (start[2] * args[0].stencil->stride[2]);
  p_a[0] = (char *)args[0].data_d + base0;

  long long int base1 = args[1].dat->base_offset + 
           dat1 * 1 * (start[0] * args[1].stencil->stride[0]);
  base1 = base1+ dat1 *
    args[1].dat->size[0] *
    (start[1] * args[1].stencil->stride[1]);
  base1 = base1+ dat1 *
    args[1].dat->size[0] *
    args[1].dat->size[1] *
    (start[2] * args[1].stencil->stride[2]);
  p_a[1] = (char *)args[1].data_d + base1;

  long long int base2 = args[2].dat->base_offset + 
           dat2 * 1 * (start[0] * args[2].stencil->stride[0]);
  base2 = base2+ dat2 *
    args[2].dat->size[0] *
    (start[1] * args[2].stencil->stride[1]);
  base2 = base2+ dat2 *
    args[2].dat->size[0] *
    args[2].dat->size[1] *
    (start[2] * args[2].stencil->stride[2]);
  p_a[2] = (char *)args[2].data_d + base2;

  long long int base3 = args[3].dat->base_offset + 
           dat3 * 1 * (start[0] * args[3].stencil->stride[0]);
  base3 = base3+ dat3 *
    args[3].dat->size[0] *
    (start[1] * args[3].stencil->stride[1]);
  base3 = base3+ dat3 *
    args[3].dat->size[0] *
    args[3].dat->size[1] *
    (start[2] * args[3].stencil->stride[2]);
  p_a[3] = (char *)args[3].data_d + base3;

  long long int base4 = args[4].dat->base_offset + 
           dat4 * 1 * (start[0] * args[4].stencil->stride[0]);
  base4 = base4+ dat4 *
    args[4].dat->size[0] *
    (start[1] * args[4].stencil->stride[1]);
  base4 = base4+ dat4 *
    args[4].dat->size[0] *
    args[4].dat->size[1] *
    (start[2] * args[4].stencil->stride[2]);
  p_a[4] = (char *)args[4].data_d + base4;

  long long int base5 = args[5].dat->base_offset + 
           dat5 * 1 * (start[0] * args[5].stencil->stride[0]);
  base5 = base5+ dat5 *
    args[5].dat->size[0] *
    (start[1] * args[5].stencil->stride[1]);
  base5 = base5+ dat5 *
    args[5].dat->size[0] *
    args[5].dat->size[1] *
    (start[2] * args[5].stencil->stride[2]);
  p_a[5] = (char *)args[5].data_d + base5;

  long long int base6 = args[6].dat->base_offset + 
           dat6 * 1 * (start[0] * args[6].stencil->stride[0]);
  base6 = base6+ dat6 *
    args[6].dat->size[0] *
    (start[1] * args[6].stencil->stride[1]);
  base6 = base6+ dat6 *
    args[6].dat->size[0] *
    args[6].dat->size[1] *
    (start[2] * args[6].stencil->stride[2]);
  p_a[6] = (char *)args[6].data_d + base6;

  long long int base7 = args[7].dat->base_offset + 
           dat7 * 1 * (start[0] * args[7].stencil->stride[0]);
  base7 = base7+ dat7 *
    args[7].dat->size[0] *
    (start[1] * args[7].stencil->stride[1]);
  base7 = base7+ dat7 *
    args[7].dat->size[0] *
    args[7].dat->size[1] *
    (start[2] * args[7].stencil->stride[2]);
  p_a[7] = (char *)args[7].data_d + base7;


  #ifndef OPS_LAZY
  ops_H_D_exchanges_device(args, 9);
  ops_halo_exchanges(args,9,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[0].mpi_time += t2-t1;
  }


  //call kernel wrapper function, passing in pointers to data
  if (x_size > 0 && y_size > 0 && z_size > 0)
    ops_opensbliblock00Kernel067<<<grid, tblock >>> ( 
     (double *)p_a[0], (double *)p_a[1],
     (double *)p_a[2], (double *)p_a[3],
     (double *)p_a[4], (double *)p_a[5],
     (double *)p_a[6], (double *)p_a[7],
     arg_idx[0], arg_idx[1], arg_idx[2],
    x_size, y_size, z_size);

  hipSafeCall(block->instance->ostream(), hipGetLastError());

  if (block->instance->OPS_diags>1) {
    hipSafeCall(block->instance->ostream(), hipDeviceSynchronize());
    ops_timers_core(&c1,&t1);
    block->instance->OPS_kernels[0].time += t1-t2;
  }

  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 9);
  ops_set_halo_dirtybit3(&args[0],range);
  ops_set_halo_dirtybit3(&args[1],range);
  ops_set_halo_dirtybit3(&args[2],range);
  ops_set_halo_dirtybit3(&args[3],range);
  ops_set_halo_dirtybit3(&args[4],range);
  ops_set_halo_dirtybit3(&args[5],range);
  ops_set_halo_dirtybit3(&args[6],range);
  ops_set_halo_dirtybit3(&args[7],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[0].mpi_time += t2-t1;
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg7);
  }
}

#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel067(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8) {
  ops_arg args[9] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8 };

  //create kernel descriptor and pass it to ops_enqueue_kernel
  create_kerneldesc_and_enque(name, args, 9, 0, dim, 1, range, block, ops_par_loop_opensbliblock00Kernel067_execute);
}
#endif
