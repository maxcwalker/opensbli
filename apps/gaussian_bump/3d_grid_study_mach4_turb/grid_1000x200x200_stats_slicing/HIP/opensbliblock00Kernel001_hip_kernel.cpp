//
// auto-generated by ops.py
//
__constant__ int dims_opensbliblock00Kernel001 [19][2];
static int dims_opensbliblock00Kernel001_h [19][2] = {{0}};

//user function
__device__

 void opensbliblock00Kernel001_gpu(const ACC<double> &D10_B0,
  const ACC<double> &D11_B0,
  const ACC<double> &U1_B0,
  const
ACC<double> &a_B0,
  const ACC<double> &detJ_B0,
  const ACC<double> &p_B0,
  const ACC<double> &rhoE_B0,
  const ACC<double>
&rho_B0,
  const ACC<double> &rhou0_B0,
  const ACC<double> &rhou1_B0,
  const ACC<double> &rhou2_B0,
  const ACC<double>
&u0_B0,
  const ACC<double> &u1_B0,
  const ACC<double> &u2_B0,
  ACC<double> &wk5_B0,
  ACC<double> &wk6_B0,
  ACC<double>
&wk7_B0,
  ACC<double> &wk8_B0,
  ACC<double> &wk9_B0)
{
   double AVG_1_1_LEV_00 = 0.0;
   double AVG_1_1_LEV_01 = 0.0;
   double AVG_1_1_LEV_02 = 0.0;
   double AVG_1_1_LEV_03 = 0.0;
   double AVG_1_1_LEV_04 = 0.0;
   double AVG_1_1_LEV_10 = 0.0;
   double AVG_1_1_LEV_11 = 0.0;
   double AVG_1_1_LEV_12 = 0.0;
   double AVG_1_1_LEV_13 = 0.0;
   double AVG_1_1_LEV_14 = 0.0;
   double AVG_1_1_LEV_20 = 0.0;
   double AVG_1_1_LEV_21 = 0.0;
   double AVG_1_1_LEV_22 = 0.0;
   double AVG_1_1_LEV_30 = 0.0;
   double AVG_1_1_LEV_31 = 0.0;
   double AVG_1_1_LEV_32 = 0.0;
   double AVG_1_1_LEV_33 = 0.0;
   double AVG_1_1_LEV_34 = 0.0;
   double AVG_1_1_LEV_40 = 0.0;
   double AVG_1_1_LEV_41 = 0.0;
   double AVG_1_1_LEV_42 = 0.0;
   double AVG_1_1_LEV_43 = 0.0;
   double AVG_1_1_LEV_44 = 0.0;
   double AVG_1_D10 = 0.0;
   double AVG_1_D11 = 0.0;
   double AVG_1_a = 0.0;
   double AVG_1_detJ = 0.0;
   double AVG_1_inv_rho = 0.0;
   double AVG_1_rho = 0.0;
   double AVG_1_u0 = 0.0;
   double AVG_1_u1 = 0.0;
   double AVG_1_u2 = 0.0;
   double CF_00 = 0.0;
   double CF_01 = 0.0;
   double CF_02 = 0.0;
   double CF_03 = 0.0;
   double CF_04 = 0.0;
   double CF_05 = 0.0;
   double CF_10 = 0.0;
   double CF_11 = 0.0;
   double CF_12 = 0.0;
   double CF_13 = 0.0;
   double CF_14 = 0.0;
   double CF_15 = 0.0;
   double CF_20 = 0.0;
   double CF_21 = 0.0;
   double CF_22 = 0.0;
   double CF_23 = 0.0;
   double CF_24 = 0.0;
   double CF_25 = 0.0;
   double CF_30 = 0.0;
   double CF_31 = 0.0;
   double CF_32 = 0.0;
   double CF_33 = 0.0;
   double CF_34 = 0.0;
   double CF_35 = 0.0;
   double CF_40 = 0.0;
   double CF_41 = 0.0;
   double CF_42 = 0.0;
   double CF_43 = 0.0;
   double CF_44 = 0.0;
   double CF_45 = 0.0;
   double CS_00 = 0.0;
   double CS_01 = 0.0;
   double CS_02 = 0.0;
   double CS_03 = 0.0;
   double CS_04 = 0.0;
   double CS_05 = 0.0;
   double CS_10 = 0.0;
   double CS_11 = 0.0;
   double CS_12 = 0.0;
   double CS_13 = 0.0;
   double CS_14 = 0.0;
   double CS_15 = 0.0;
   double CS_20 = 0.0;
   double CS_21 = 0.0;
   double CS_22 = 0.0;
   double CS_23 = 0.0;
   double CS_24 = 0.0;
   double CS_25 = 0.0;
   double CS_30 = 0.0;
   double CS_31 = 0.0;
   double CS_32 = 0.0;
   double CS_33 = 0.0;
   double CS_34 = 0.0;
   double CS_35 = 0.0;
   double CS_40 = 0.0;
   double CS_41 = 0.0;
   double CS_42 = 0.0;
   double CS_43 = 0.0;
   double CS_44 = 0.0;
   double CS_45 = 0.0;
   double Recon_0 = 0.0;
   double Recon_1 = 0.0;
   double Recon_2 = 0.0;
   double Recon_3 = 0.0;
   double Recon_4 = 0.0;
   double alpha_0 = 0.0;
   double alpha_1 = 0.0;
   double alpha_2 = 0.0;
   double alpha_3 = 0.0;
   double beta_0 = 0.0;
   double beta_1 = 0.0;
   double beta_2 = 0.0;
   double beta_3 = 0.0;
   double delta_0 = 0.0;
   double delta_1 = 0.0;
   double delta_2 = 0.0;
   double delta_3 = 0.0;
   double inv_AVG_a = 0.0;
   double inv_AVG_met_fact = 0.0;
   double inv_AVG_rho = 0.0;
   double inv_alpha_sum = 0.0;
   double inv_beta_0 = 0.0;
   double inv_beta_1 = 0.0;
   double inv_beta_2 = 0.0;
   double inv_beta_3 = 0.0;
   double inv_omega_sum = 0.0;
   double max_lambda_00 = 0.0;
   double max_lambda_11 = 0.0;
   double max_lambda_22 = 0.0;
   double max_lambda_33 = 0.0;
   double max_lambda_44 = 0.0;
   AVG_1_rho = sqrt(rho_B0(0,0,0)*rho_B0(0,1,0));

   AVG_1_inv_rho = 1.0/((sqrt(rho_B0(0,0,0)) + sqrt(rho_B0(0,1,0))));

   AVG_1_u0 = (sqrt(rho_B0(0,0,0))*u0_B0(0,0,0) + sqrt(rho_B0(0,1,0))*u0_B0(0,1,0))*AVG_1_inv_rho;

   AVG_1_u1 = (sqrt(rho_B0(0,0,0))*u1_B0(0,0,0) + sqrt(rho_B0(0,1,0))*u1_B0(0,1,0))*AVG_1_inv_rho;

   AVG_1_u2 = (sqrt(rho_B0(0,0,0))*u2_B0(0,0,0) + sqrt(rho_B0(0,1,0))*u2_B0(0,1,0))*AVG_1_inv_rho;

    AVG_1_a = sqrt((-(1.0/2.0)*((AVG_1_u0*AVG_1_u0) + (AVG_1_u1*AVG_1_u1) + (AVG_1_u2*AVG_1_u2)) + ((p_B0(0,0,0) +
      rhoE_B0(0,0,0))/sqrt(rho_B0(0,0,0)) + (p_B0(0,1,0) +
      rhoE_B0(0,1,0))/sqrt(rho_B0(0,1,0)))*AVG_1_inv_rho)*gamma_m1);

   AVG_1_detJ = ((1.0/2.0))*(detJ_B0(0,0,0) + detJ_B0(0,1,0));

   AVG_1_D10 = ((1.0/2.0))*(D10_B0(0,0,0) + D10_B0(0,1,0));

   AVG_1_D11 = ((1.0/2.0))*(D11_B0(0,0,0) + D11_B0(0,1,0));

   inv_AVG_a = 1.0/(AVG_1_a);

   inv_AVG_rho = 1.0/(AVG_1_rho);

   inv_AVG_met_fact = pow((AVG_1_D10*AVG_1_D10) + (AVG_1_D11*AVG_1_D11), (-1.0/2.0));

    AVG_1_1_LEV_00 = -(1.0/2.0)*(-2*AVG_1_D10 - (AVG_1_u0*AVG_1_u0)*(inv_AVG_a*inv_AVG_a)*AVG_1_D10 -
      (AVG_1_u1*AVG_1_u1)*(inv_AVG_a*inv_AVG_a)*AVG_1_D10 - (AVG_1_u2*AVG_1_u2)*(inv_AVG_a*inv_AVG_a)*AVG_1_D10 -
      2*AVG_1_D11*AVG_1_u2*inv_AVG_rho + (AVG_1_u0*AVG_1_u0)*(inv_AVG_a*inv_AVG_a)*gama*AVG_1_D10 +
      (AVG_1_u1*AVG_1_u1)*(inv_AVG_a*inv_AVG_a)*gama*AVG_1_D10 +
      (AVG_1_u2*AVG_1_u2)*(inv_AVG_a*inv_AVG_a)*gama*AVG_1_D10)*inv_AVG_met_fact;

   AVG_1_1_LEV_01 = (inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_1_D10*AVG_1_u0*inv_AVG_met_fact;

   AVG_1_1_LEV_02 = (inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_1_D10*AVG_1_u1*inv_AVG_met_fact;

    AVG_1_1_LEV_03 = (-AVG_1_D11*inv_AVG_rho - (inv_AVG_a*inv_AVG_a)*AVG_1_D10*AVG_1_u2 +
      (inv_AVG_a*inv_AVG_a)*gama*AVG_1_D10*AVG_1_u2)*inv_AVG_met_fact;

   AVG_1_1_LEV_04 = -(inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_1_D10*inv_AVG_met_fact;

    AVG_1_1_LEV_10 = -(1.0/2.0)*(-2*AVG_1_D11 - (AVG_1_u0*AVG_1_u0)*(inv_AVG_a*inv_AVG_a)*AVG_1_D11 -
      (AVG_1_u1*AVG_1_u1)*(inv_AVG_a*inv_AVG_a)*AVG_1_D11 - (AVG_1_u2*AVG_1_u2)*(inv_AVG_a*inv_AVG_a)*AVG_1_D11 +
      2*AVG_1_D10*AVG_1_u2*inv_AVG_rho + (AVG_1_u0*AVG_1_u0)*(inv_AVG_a*inv_AVG_a)*gama*AVG_1_D11 +
      (AVG_1_u1*AVG_1_u1)*(inv_AVG_a*inv_AVG_a)*gama*AVG_1_D11 +
      (AVG_1_u2*AVG_1_u2)*(inv_AVG_a*inv_AVG_a)*gama*AVG_1_D11)*inv_AVG_met_fact;

   AVG_1_1_LEV_11 = (inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_1_D11*AVG_1_u0*inv_AVG_met_fact;

   AVG_1_1_LEV_12 = (inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_1_D11*AVG_1_u1*inv_AVG_met_fact;

    AVG_1_1_LEV_13 = (AVG_1_D10*inv_AVG_rho - (inv_AVG_a*inv_AVG_a)*AVG_1_D11*AVG_1_u2 +
      (inv_AVG_a*inv_AVG_a)*gama*AVG_1_D11*AVG_1_u2)*inv_AVG_met_fact;

   AVG_1_1_LEV_14 = -(inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_1_D11*inv_AVG_met_fact;

   AVG_1_1_LEV_20 = (AVG_1_D10*AVG_1_u1 - AVG_1_D11*AVG_1_u0)*inv_AVG_met_fact*inv_AVG_rho;

   AVG_1_1_LEV_21 = AVG_1_D11*inv_AVG_met_fact*inv_AVG_rho;

   AVG_1_1_LEV_22 = -AVG_1_D10*inv_AVG_met_fact*inv_AVG_rho;

    AVG_1_1_LEV_30 = -0.353553390593274*((AVG_1_u0*AVG_1_u0) + (AVG_1_u1*AVG_1_u1) + (AVG_1_u2*AVG_1_u2) -
      (AVG_1_u0*AVG_1_u0)*gama - (AVG_1_u1*AVG_1_u1)*gama - (AVG_1_u2*AVG_1_u2)*gama +
      2*AVG_1_D10*AVG_1_a*AVG_1_u0*inv_AVG_met_fact +
      2*AVG_1_D11*AVG_1_a*AVG_1_u1*inv_AVG_met_fact)*inv_AVG_a*inv_AVG_rho;

    AVG_1_1_LEV_31 = 0.707106781186547*(-gama*AVG_1_u0 + AVG_1_D10*AVG_1_a*inv_AVG_met_fact +
      AVG_1_u0)*inv_AVG_a*inv_AVG_rho;

    AVG_1_1_LEV_32 = 0.707106781186547*(-gama*AVG_1_u1 + AVG_1_D11*AVG_1_a*inv_AVG_met_fact +
      AVG_1_u1)*inv_AVG_a*inv_AVG_rho;

   AVG_1_1_LEV_33 = -0.707106781186547*gamma_m1*AVG_1_u2*inv_AVG_a*inv_AVG_rho;

   AVG_1_1_LEV_34 = 0.707106781186547*gamma_m1*inv_AVG_a*inv_AVG_rho;

    AVG_1_1_LEV_40 = 0.353553390593274*(-(AVG_1_u0*AVG_1_u0) - (AVG_1_u1*AVG_1_u1) - (AVG_1_u2*AVG_1_u2) +
      (AVG_1_u0*AVG_1_u0)*gama + (AVG_1_u1*AVG_1_u1)*gama + (AVG_1_u2*AVG_1_u2)*gama +
      2*AVG_1_D10*AVG_1_a*AVG_1_u0*inv_AVG_met_fact +
      2*AVG_1_D11*AVG_1_a*AVG_1_u1*inv_AVG_met_fact)*inv_AVG_a*inv_AVG_rho;

    AVG_1_1_LEV_41 = -0.707106781186547*(-AVG_1_u0 + gama*AVG_1_u0 +
      AVG_1_D10*AVG_1_a*inv_AVG_met_fact)*inv_AVG_a*inv_AVG_rho;

    AVG_1_1_LEV_42 = -0.707106781186547*(-AVG_1_u1 + gama*AVG_1_u1 +
      AVG_1_D11*AVG_1_a*inv_AVG_met_fact)*inv_AVG_a*inv_AVG_rho;

   AVG_1_1_LEV_43 = -0.707106781186547*gamma_m1*AVG_1_u2*inv_AVG_a*inv_AVG_rho;

   AVG_1_1_LEV_44 = 0.707106781186547*gamma_m1*inv_AVG_a*inv_AVG_rho;

    CF_00 = (p_B0(0,-2,0)*U1_B0(0,-2,0)*AVG_1_1_LEV_04 + p_B0(0,-2,0)*D10_B0(0,-2,0)*AVG_1_1_LEV_01 +
      p_B0(0,-2,0)*D11_B0(0,-2,0)*AVG_1_1_LEV_02 + U1_B0(0,-2,0)*rho_B0(0,-2,0)*AVG_1_1_LEV_00 +
      U1_B0(0,-2,0)*rhoE_B0(0,-2,0)*AVG_1_1_LEV_04 + U1_B0(0,-2,0)*rhou0_B0(0,-2,0)*AVG_1_1_LEV_01 +
      U1_B0(0,-2,0)*rhou1_B0(0,-2,0)*AVG_1_1_LEV_02 + U1_B0(0,-2,0)*rhou2_B0(0,-2,0)*AVG_1_1_LEV_03)*detJ_B0(0,-2,0);

    CF_10 = (p_B0(0,-2,0)*U1_B0(0,-2,0)*AVG_1_1_LEV_14 + p_B0(0,-2,0)*D10_B0(0,-2,0)*AVG_1_1_LEV_11 +
      p_B0(0,-2,0)*D11_B0(0,-2,0)*AVG_1_1_LEV_12 + U1_B0(0,-2,0)*rho_B0(0,-2,0)*AVG_1_1_LEV_10 +
      U1_B0(0,-2,0)*rhoE_B0(0,-2,0)*AVG_1_1_LEV_14 + U1_B0(0,-2,0)*rhou0_B0(0,-2,0)*AVG_1_1_LEV_11 +
      U1_B0(0,-2,0)*rhou1_B0(0,-2,0)*AVG_1_1_LEV_12 + U1_B0(0,-2,0)*rhou2_B0(0,-2,0)*AVG_1_1_LEV_13)*detJ_B0(0,-2,0);

    CF_20 = (p_B0(0,-2,0)*D10_B0(0,-2,0)*AVG_1_1_LEV_21 + p_B0(0,-2,0)*D11_B0(0,-2,0)*AVG_1_1_LEV_22 +
      U1_B0(0,-2,0)*rho_B0(0,-2,0)*AVG_1_1_LEV_20 + U1_B0(0,-2,0)*rhou0_B0(0,-2,0)*AVG_1_1_LEV_21 +
      U1_B0(0,-2,0)*rhou1_B0(0,-2,0)*AVG_1_1_LEV_22)*detJ_B0(0,-2,0);

    CF_30 = (p_B0(0,-2,0)*U1_B0(0,-2,0)*AVG_1_1_LEV_34 + p_B0(0,-2,0)*D10_B0(0,-2,0)*AVG_1_1_LEV_31 +
      p_B0(0,-2,0)*D11_B0(0,-2,0)*AVG_1_1_LEV_32 + U1_B0(0,-2,0)*rho_B0(0,-2,0)*AVG_1_1_LEV_30 +
      U1_B0(0,-2,0)*rhoE_B0(0,-2,0)*AVG_1_1_LEV_34 + U1_B0(0,-2,0)*rhou0_B0(0,-2,0)*AVG_1_1_LEV_31 +
      U1_B0(0,-2,0)*rhou1_B0(0,-2,0)*AVG_1_1_LEV_32 + U1_B0(0,-2,0)*rhou2_B0(0,-2,0)*AVG_1_1_LEV_33)*detJ_B0(0,-2,0);

    CF_40 = (p_B0(0,-2,0)*U1_B0(0,-2,0)*AVG_1_1_LEV_44 + p_B0(0,-2,0)*D10_B0(0,-2,0)*AVG_1_1_LEV_41 +
      p_B0(0,-2,0)*D11_B0(0,-2,0)*AVG_1_1_LEV_42 + U1_B0(0,-2,0)*rho_B0(0,-2,0)*AVG_1_1_LEV_40 +
      U1_B0(0,-2,0)*rhoE_B0(0,-2,0)*AVG_1_1_LEV_44 + U1_B0(0,-2,0)*rhou0_B0(0,-2,0)*AVG_1_1_LEV_41 +
      U1_B0(0,-2,0)*rhou1_B0(0,-2,0)*AVG_1_1_LEV_42 + U1_B0(0,-2,0)*rhou2_B0(0,-2,0)*AVG_1_1_LEV_43)*detJ_B0(0,-2,0);

    CS_00 = rho_B0(0,-2,0)*AVG_1_1_LEV_00 + rhoE_B0(0,-2,0)*AVG_1_1_LEV_04 + rhou0_B0(0,-2,0)*AVG_1_1_LEV_01 +
      rhou1_B0(0,-2,0)*AVG_1_1_LEV_02 + rhou2_B0(0,-2,0)*AVG_1_1_LEV_03;

    CS_10 = rho_B0(0,-2,0)*AVG_1_1_LEV_10 + rhoE_B0(0,-2,0)*AVG_1_1_LEV_14 + rhou0_B0(0,-2,0)*AVG_1_1_LEV_11 +
      rhou1_B0(0,-2,0)*AVG_1_1_LEV_12 + rhou2_B0(0,-2,0)*AVG_1_1_LEV_13;

   CS_20 = rho_B0(0,-2,0)*AVG_1_1_LEV_20 + rhou0_B0(0,-2,0)*AVG_1_1_LEV_21 + rhou1_B0(0,-2,0)*AVG_1_1_LEV_22;

    CS_30 = rho_B0(0,-2,0)*AVG_1_1_LEV_30 + rhoE_B0(0,-2,0)*AVG_1_1_LEV_34 + rhou0_B0(0,-2,0)*AVG_1_1_LEV_31 +
      rhou1_B0(0,-2,0)*AVG_1_1_LEV_32 + rhou2_B0(0,-2,0)*AVG_1_1_LEV_33;

    CS_40 = rho_B0(0,-2,0)*AVG_1_1_LEV_40 + rhoE_B0(0,-2,0)*AVG_1_1_LEV_44 + rhou0_B0(0,-2,0)*AVG_1_1_LEV_41 +
      rhou1_B0(0,-2,0)*AVG_1_1_LEV_42 + rhou2_B0(0,-2,0)*AVG_1_1_LEV_43;

    CF_01 = (p_B0(0,-1,0)*U1_B0(0,-1,0)*AVG_1_1_LEV_04 + p_B0(0,-1,0)*D10_B0(0,-1,0)*AVG_1_1_LEV_01 +
      p_B0(0,-1,0)*D11_B0(0,-1,0)*AVG_1_1_LEV_02 + U1_B0(0,-1,0)*rho_B0(0,-1,0)*AVG_1_1_LEV_00 +
      U1_B0(0,-1,0)*rhoE_B0(0,-1,0)*AVG_1_1_LEV_04 + U1_B0(0,-1,0)*rhou0_B0(0,-1,0)*AVG_1_1_LEV_01 +
      U1_B0(0,-1,0)*rhou1_B0(0,-1,0)*AVG_1_1_LEV_02 + U1_B0(0,-1,0)*rhou2_B0(0,-1,0)*AVG_1_1_LEV_03)*detJ_B0(0,-1,0);

    CF_11 = (p_B0(0,-1,0)*U1_B0(0,-1,0)*AVG_1_1_LEV_14 + p_B0(0,-1,0)*D10_B0(0,-1,0)*AVG_1_1_LEV_11 +
      p_B0(0,-1,0)*D11_B0(0,-1,0)*AVG_1_1_LEV_12 + U1_B0(0,-1,0)*rho_B0(0,-1,0)*AVG_1_1_LEV_10 +
      U1_B0(0,-1,0)*rhoE_B0(0,-1,0)*AVG_1_1_LEV_14 + U1_B0(0,-1,0)*rhou0_B0(0,-1,0)*AVG_1_1_LEV_11 +
      U1_B0(0,-1,0)*rhou1_B0(0,-1,0)*AVG_1_1_LEV_12 + U1_B0(0,-1,0)*rhou2_B0(0,-1,0)*AVG_1_1_LEV_13)*detJ_B0(0,-1,0);

    CF_21 = (p_B0(0,-1,0)*D10_B0(0,-1,0)*AVG_1_1_LEV_21 + p_B0(0,-1,0)*D11_B0(0,-1,0)*AVG_1_1_LEV_22 +
      U1_B0(0,-1,0)*rho_B0(0,-1,0)*AVG_1_1_LEV_20 + U1_B0(0,-1,0)*rhou0_B0(0,-1,0)*AVG_1_1_LEV_21 +
      U1_B0(0,-1,0)*rhou1_B0(0,-1,0)*AVG_1_1_LEV_22)*detJ_B0(0,-1,0);

    CF_31 = (p_B0(0,-1,0)*U1_B0(0,-1,0)*AVG_1_1_LEV_34 + p_B0(0,-1,0)*D10_B0(0,-1,0)*AVG_1_1_LEV_31 +
      p_B0(0,-1,0)*D11_B0(0,-1,0)*AVG_1_1_LEV_32 + U1_B0(0,-1,0)*rho_B0(0,-1,0)*AVG_1_1_LEV_30 +
      U1_B0(0,-1,0)*rhoE_B0(0,-1,0)*AVG_1_1_LEV_34 + U1_B0(0,-1,0)*rhou0_B0(0,-1,0)*AVG_1_1_LEV_31 +
      U1_B0(0,-1,0)*rhou1_B0(0,-1,0)*AVG_1_1_LEV_32 + U1_B0(0,-1,0)*rhou2_B0(0,-1,0)*AVG_1_1_LEV_33)*detJ_B0(0,-1,0);

    CF_41 = (p_B0(0,-1,0)*U1_B0(0,-1,0)*AVG_1_1_LEV_44 + p_B0(0,-1,0)*D10_B0(0,-1,0)*AVG_1_1_LEV_41 +
      p_B0(0,-1,0)*D11_B0(0,-1,0)*AVG_1_1_LEV_42 + U1_B0(0,-1,0)*rho_B0(0,-1,0)*AVG_1_1_LEV_40 +
      U1_B0(0,-1,0)*rhoE_B0(0,-1,0)*AVG_1_1_LEV_44 + U1_B0(0,-1,0)*rhou0_B0(0,-1,0)*AVG_1_1_LEV_41 +
      U1_B0(0,-1,0)*rhou1_B0(0,-1,0)*AVG_1_1_LEV_42 + U1_B0(0,-1,0)*rhou2_B0(0,-1,0)*AVG_1_1_LEV_43)*detJ_B0(0,-1,0);

    CS_01 = rho_B0(0,-1,0)*AVG_1_1_LEV_00 + rhoE_B0(0,-1,0)*AVG_1_1_LEV_04 + rhou0_B0(0,-1,0)*AVG_1_1_LEV_01 +
      rhou1_B0(0,-1,0)*AVG_1_1_LEV_02 + rhou2_B0(0,-1,0)*AVG_1_1_LEV_03;

    CS_11 = rho_B0(0,-1,0)*AVG_1_1_LEV_10 + rhoE_B0(0,-1,0)*AVG_1_1_LEV_14 + rhou0_B0(0,-1,0)*AVG_1_1_LEV_11 +
      rhou1_B0(0,-1,0)*AVG_1_1_LEV_12 + rhou2_B0(0,-1,0)*AVG_1_1_LEV_13;

   CS_21 = rho_B0(0,-1,0)*AVG_1_1_LEV_20 + rhou0_B0(0,-1,0)*AVG_1_1_LEV_21 + rhou1_B0(0,-1,0)*AVG_1_1_LEV_22;

    CS_31 = rho_B0(0,-1,0)*AVG_1_1_LEV_30 + rhoE_B0(0,-1,0)*AVG_1_1_LEV_34 + rhou0_B0(0,-1,0)*AVG_1_1_LEV_31 +
      rhou1_B0(0,-1,0)*AVG_1_1_LEV_32 + rhou2_B0(0,-1,0)*AVG_1_1_LEV_33;

    CS_41 = rho_B0(0,-1,0)*AVG_1_1_LEV_40 + rhoE_B0(0,-1,0)*AVG_1_1_LEV_44 + rhou0_B0(0,-1,0)*AVG_1_1_LEV_41 +
      rhou1_B0(0,-1,0)*AVG_1_1_LEV_42 + rhou2_B0(0,-1,0)*AVG_1_1_LEV_43;

    CF_02 = (p_B0(0,0,0)*U1_B0(0,0,0)*AVG_1_1_LEV_04 + p_B0(0,0,0)*D10_B0(0,0,0)*AVG_1_1_LEV_01 +
      p_B0(0,0,0)*D11_B0(0,0,0)*AVG_1_1_LEV_02 + U1_B0(0,0,0)*rho_B0(0,0,0)*AVG_1_1_LEV_00 +
      U1_B0(0,0,0)*rhoE_B0(0,0,0)*AVG_1_1_LEV_04 + U1_B0(0,0,0)*rhou0_B0(0,0,0)*AVG_1_1_LEV_01 +
      U1_B0(0,0,0)*rhou1_B0(0,0,0)*AVG_1_1_LEV_02 + U1_B0(0,0,0)*rhou2_B0(0,0,0)*AVG_1_1_LEV_03)*detJ_B0(0,0,0);

    CF_12 = (p_B0(0,0,0)*U1_B0(0,0,0)*AVG_1_1_LEV_14 + p_B0(0,0,0)*D10_B0(0,0,0)*AVG_1_1_LEV_11 +
      p_B0(0,0,0)*D11_B0(0,0,0)*AVG_1_1_LEV_12 + U1_B0(0,0,0)*rho_B0(0,0,0)*AVG_1_1_LEV_10 +
      U1_B0(0,0,0)*rhoE_B0(0,0,0)*AVG_1_1_LEV_14 + U1_B0(0,0,0)*rhou0_B0(0,0,0)*AVG_1_1_LEV_11 +
      U1_B0(0,0,0)*rhou1_B0(0,0,0)*AVG_1_1_LEV_12 + U1_B0(0,0,0)*rhou2_B0(0,0,0)*AVG_1_1_LEV_13)*detJ_B0(0,0,0);

    CF_22 = (p_B0(0,0,0)*D10_B0(0,0,0)*AVG_1_1_LEV_21 + p_B0(0,0,0)*D11_B0(0,0,0)*AVG_1_1_LEV_22 +
      U1_B0(0,0,0)*rho_B0(0,0,0)*AVG_1_1_LEV_20 + U1_B0(0,0,0)*rhou0_B0(0,0,0)*AVG_1_1_LEV_21 +
      U1_B0(0,0,0)*rhou1_B0(0,0,0)*AVG_1_1_LEV_22)*detJ_B0(0,0,0);

    CF_32 = (p_B0(0,0,0)*U1_B0(0,0,0)*AVG_1_1_LEV_34 + p_B0(0,0,0)*D10_B0(0,0,0)*AVG_1_1_LEV_31 +
      p_B0(0,0,0)*D11_B0(0,0,0)*AVG_1_1_LEV_32 + U1_B0(0,0,0)*rho_B0(0,0,0)*AVG_1_1_LEV_30 +
      U1_B0(0,0,0)*rhoE_B0(0,0,0)*AVG_1_1_LEV_34 + U1_B0(0,0,0)*rhou0_B0(0,0,0)*AVG_1_1_LEV_31 +
      U1_B0(0,0,0)*rhou1_B0(0,0,0)*AVG_1_1_LEV_32 + U1_B0(0,0,0)*rhou2_B0(0,0,0)*AVG_1_1_LEV_33)*detJ_B0(0,0,0);

    CF_42 = (p_B0(0,0,0)*U1_B0(0,0,0)*AVG_1_1_LEV_44 + p_B0(0,0,0)*D10_B0(0,0,0)*AVG_1_1_LEV_41 +
      p_B0(0,0,0)*D11_B0(0,0,0)*AVG_1_1_LEV_42 + U1_B0(0,0,0)*rho_B0(0,0,0)*AVG_1_1_LEV_40 +
      U1_B0(0,0,0)*rhoE_B0(0,0,0)*AVG_1_1_LEV_44 + U1_B0(0,0,0)*rhou0_B0(0,0,0)*AVG_1_1_LEV_41 +
      U1_B0(0,0,0)*rhou1_B0(0,0,0)*AVG_1_1_LEV_42 + U1_B0(0,0,0)*rhou2_B0(0,0,0)*AVG_1_1_LEV_43)*detJ_B0(0,0,0);

    CS_02 = rho_B0(0,0,0)*AVG_1_1_LEV_00 + rhoE_B0(0,0,0)*AVG_1_1_LEV_04 + rhou0_B0(0,0,0)*AVG_1_1_LEV_01 +
      rhou1_B0(0,0,0)*AVG_1_1_LEV_02 + rhou2_B0(0,0,0)*AVG_1_1_LEV_03;

    CS_12 = rho_B0(0,0,0)*AVG_1_1_LEV_10 + rhoE_B0(0,0,0)*AVG_1_1_LEV_14 + rhou0_B0(0,0,0)*AVG_1_1_LEV_11 +
      rhou1_B0(0,0,0)*AVG_1_1_LEV_12 + rhou2_B0(0,0,0)*AVG_1_1_LEV_13;

   CS_22 = rho_B0(0,0,0)*AVG_1_1_LEV_20 + rhou0_B0(0,0,0)*AVG_1_1_LEV_21 + rhou1_B0(0,0,0)*AVG_1_1_LEV_22;

    CS_32 = rho_B0(0,0,0)*AVG_1_1_LEV_30 + rhoE_B0(0,0,0)*AVG_1_1_LEV_34 + rhou0_B0(0,0,0)*AVG_1_1_LEV_31 +
      rhou1_B0(0,0,0)*AVG_1_1_LEV_32 + rhou2_B0(0,0,0)*AVG_1_1_LEV_33;

    CS_42 = rho_B0(0,0,0)*AVG_1_1_LEV_40 + rhoE_B0(0,0,0)*AVG_1_1_LEV_44 + rhou0_B0(0,0,0)*AVG_1_1_LEV_41 +
      rhou1_B0(0,0,0)*AVG_1_1_LEV_42 + rhou2_B0(0,0,0)*AVG_1_1_LEV_43;

    CF_03 = (p_B0(0,1,0)*U1_B0(0,1,0)*AVG_1_1_LEV_04 + p_B0(0,1,0)*D10_B0(0,1,0)*AVG_1_1_LEV_01 +
      p_B0(0,1,0)*D11_B0(0,1,0)*AVG_1_1_LEV_02 + U1_B0(0,1,0)*rho_B0(0,1,0)*AVG_1_1_LEV_00 +
      U1_B0(0,1,0)*rhoE_B0(0,1,0)*AVG_1_1_LEV_04 + U1_B0(0,1,0)*rhou0_B0(0,1,0)*AVG_1_1_LEV_01 +
      U1_B0(0,1,0)*rhou1_B0(0,1,0)*AVG_1_1_LEV_02 + U1_B0(0,1,0)*rhou2_B0(0,1,0)*AVG_1_1_LEV_03)*detJ_B0(0,1,0);

    CF_13 = (p_B0(0,1,0)*U1_B0(0,1,0)*AVG_1_1_LEV_14 + p_B0(0,1,0)*D10_B0(0,1,0)*AVG_1_1_LEV_11 +
      p_B0(0,1,0)*D11_B0(0,1,0)*AVG_1_1_LEV_12 + U1_B0(0,1,0)*rho_B0(0,1,0)*AVG_1_1_LEV_10 +
      U1_B0(0,1,0)*rhoE_B0(0,1,0)*AVG_1_1_LEV_14 + U1_B0(0,1,0)*rhou0_B0(0,1,0)*AVG_1_1_LEV_11 +
      U1_B0(0,1,0)*rhou1_B0(0,1,0)*AVG_1_1_LEV_12 + U1_B0(0,1,0)*rhou2_B0(0,1,0)*AVG_1_1_LEV_13)*detJ_B0(0,1,0);

    CF_23 = (p_B0(0,1,0)*D10_B0(0,1,0)*AVG_1_1_LEV_21 + p_B0(0,1,0)*D11_B0(0,1,0)*AVG_1_1_LEV_22 +
      U1_B0(0,1,0)*rho_B0(0,1,0)*AVG_1_1_LEV_20 + U1_B0(0,1,0)*rhou0_B0(0,1,0)*AVG_1_1_LEV_21 +
      U1_B0(0,1,0)*rhou1_B0(0,1,0)*AVG_1_1_LEV_22)*detJ_B0(0,1,0);

    CF_33 = (p_B0(0,1,0)*U1_B0(0,1,0)*AVG_1_1_LEV_34 + p_B0(0,1,0)*D10_B0(0,1,0)*AVG_1_1_LEV_31 +
      p_B0(0,1,0)*D11_B0(0,1,0)*AVG_1_1_LEV_32 + U1_B0(0,1,0)*rho_B0(0,1,0)*AVG_1_1_LEV_30 +
      U1_B0(0,1,0)*rhoE_B0(0,1,0)*AVG_1_1_LEV_34 + U1_B0(0,1,0)*rhou0_B0(0,1,0)*AVG_1_1_LEV_31 +
      U1_B0(0,1,0)*rhou1_B0(0,1,0)*AVG_1_1_LEV_32 + U1_B0(0,1,0)*rhou2_B0(0,1,0)*AVG_1_1_LEV_33)*detJ_B0(0,1,0);

    CF_43 = (p_B0(0,1,0)*U1_B0(0,1,0)*AVG_1_1_LEV_44 + p_B0(0,1,0)*D10_B0(0,1,0)*AVG_1_1_LEV_41 +
      p_B0(0,1,0)*D11_B0(0,1,0)*AVG_1_1_LEV_42 + U1_B0(0,1,0)*rho_B0(0,1,0)*AVG_1_1_LEV_40 +
      U1_B0(0,1,0)*rhoE_B0(0,1,0)*AVG_1_1_LEV_44 + U1_B0(0,1,0)*rhou0_B0(0,1,0)*AVG_1_1_LEV_41 +
      U1_B0(0,1,0)*rhou1_B0(0,1,0)*AVG_1_1_LEV_42 + U1_B0(0,1,0)*rhou2_B0(0,1,0)*AVG_1_1_LEV_43)*detJ_B0(0,1,0);

    CS_03 = rho_B0(0,1,0)*AVG_1_1_LEV_00 + rhoE_B0(0,1,0)*AVG_1_1_LEV_04 + rhou0_B0(0,1,0)*AVG_1_1_LEV_01 +
      rhou1_B0(0,1,0)*AVG_1_1_LEV_02 + rhou2_B0(0,1,0)*AVG_1_1_LEV_03;

    CS_13 = rho_B0(0,1,0)*AVG_1_1_LEV_10 + rhoE_B0(0,1,0)*AVG_1_1_LEV_14 + rhou0_B0(0,1,0)*AVG_1_1_LEV_11 +
      rhou1_B0(0,1,0)*AVG_1_1_LEV_12 + rhou2_B0(0,1,0)*AVG_1_1_LEV_13;

   CS_23 = rho_B0(0,1,0)*AVG_1_1_LEV_20 + rhou0_B0(0,1,0)*AVG_1_1_LEV_21 + rhou1_B0(0,1,0)*AVG_1_1_LEV_22;

    CS_33 = rho_B0(0,1,0)*AVG_1_1_LEV_30 + rhoE_B0(0,1,0)*AVG_1_1_LEV_34 + rhou0_B0(0,1,0)*AVG_1_1_LEV_31 +
      rhou1_B0(0,1,0)*AVG_1_1_LEV_32 + rhou2_B0(0,1,0)*AVG_1_1_LEV_33;

    CS_43 = rho_B0(0,1,0)*AVG_1_1_LEV_40 + rhoE_B0(0,1,0)*AVG_1_1_LEV_44 + rhou0_B0(0,1,0)*AVG_1_1_LEV_41 +
      rhou1_B0(0,1,0)*AVG_1_1_LEV_42 + rhou2_B0(0,1,0)*AVG_1_1_LEV_43;

    CF_04 = (p_B0(0,2,0)*U1_B0(0,2,0)*AVG_1_1_LEV_04 + p_B0(0,2,0)*D10_B0(0,2,0)*AVG_1_1_LEV_01 +
      p_B0(0,2,0)*D11_B0(0,2,0)*AVG_1_1_LEV_02 + U1_B0(0,2,0)*rho_B0(0,2,0)*AVG_1_1_LEV_00 +
      U1_B0(0,2,0)*rhoE_B0(0,2,0)*AVG_1_1_LEV_04 + U1_B0(0,2,0)*rhou0_B0(0,2,0)*AVG_1_1_LEV_01 +
      U1_B0(0,2,0)*rhou1_B0(0,2,0)*AVG_1_1_LEV_02 + U1_B0(0,2,0)*rhou2_B0(0,2,0)*AVG_1_1_LEV_03)*detJ_B0(0,2,0);

    CF_14 = (p_B0(0,2,0)*U1_B0(0,2,0)*AVG_1_1_LEV_14 + p_B0(0,2,0)*D10_B0(0,2,0)*AVG_1_1_LEV_11 +
      p_B0(0,2,0)*D11_B0(0,2,0)*AVG_1_1_LEV_12 + U1_B0(0,2,0)*rho_B0(0,2,0)*AVG_1_1_LEV_10 +
      U1_B0(0,2,0)*rhoE_B0(0,2,0)*AVG_1_1_LEV_14 + U1_B0(0,2,0)*rhou0_B0(0,2,0)*AVG_1_1_LEV_11 +
      U1_B0(0,2,0)*rhou1_B0(0,2,0)*AVG_1_1_LEV_12 + U1_B0(0,2,0)*rhou2_B0(0,2,0)*AVG_1_1_LEV_13)*detJ_B0(0,2,0);

    CF_24 = (p_B0(0,2,0)*D10_B0(0,2,0)*AVG_1_1_LEV_21 + p_B0(0,2,0)*D11_B0(0,2,0)*AVG_1_1_LEV_22 +
      U1_B0(0,2,0)*rho_B0(0,2,0)*AVG_1_1_LEV_20 + U1_B0(0,2,0)*rhou0_B0(0,2,0)*AVG_1_1_LEV_21 +
      U1_B0(0,2,0)*rhou1_B0(0,2,0)*AVG_1_1_LEV_22)*detJ_B0(0,2,0);

    CF_34 = (p_B0(0,2,0)*U1_B0(0,2,0)*AVG_1_1_LEV_34 + p_B0(0,2,0)*D10_B0(0,2,0)*AVG_1_1_LEV_31 +
      p_B0(0,2,0)*D11_B0(0,2,0)*AVG_1_1_LEV_32 + U1_B0(0,2,0)*rho_B0(0,2,0)*AVG_1_1_LEV_30 +
      U1_B0(0,2,0)*rhoE_B0(0,2,0)*AVG_1_1_LEV_34 + U1_B0(0,2,0)*rhou0_B0(0,2,0)*AVG_1_1_LEV_31 +
      U1_B0(0,2,0)*rhou1_B0(0,2,0)*AVG_1_1_LEV_32 + U1_B0(0,2,0)*rhou2_B0(0,2,0)*AVG_1_1_LEV_33)*detJ_B0(0,2,0);

    CF_44 = (p_B0(0,2,0)*U1_B0(0,2,0)*AVG_1_1_LEV_44 + p_B0(0,2,0)*D10_B0(0,2,0)*AVG_1_1_LEV_41 +
      p_B0(0,2,0)*D11_B0(0,2,0)*AVG_1_1_LEV_42 + U1_B0(0,2,0)*rho_B0(0,2,0)*AVG_1_1_LEV_40 +
      U1_B0(0,2,0)*rhoE_B0(0,2,0)*AVG_1_1_LEV_44 + U1_B0(0,2,0)*rhou0_B0(0,2,0)*AVG_1_1_LEV_41 +
      U1_B0(0,2,0)*rhou1_B0(0,2,0)*AVG_1_1_LEV_42 + U1_B0(0,2,0)*rhou2_B0(0,2,0)*AVG_1_1_LEV_43)*detJ_B0(0,2,0);

    CS_04 = rho_B0(0,2,0)*AVG_1_1_LEV_00 + rhoE_B0(0,2,0)*AVG_1_1_LEV_04 + rhou0_B0(0,2,0)*AVG_1_1_LEV_01 +
      rhou1_B0(0,2,0)*AVG_1_1_LEV_02 + rhou2_B0(0,2,0)*AVG_1_1_LEV_03;

    CS_14 = rho_B0(0,2,0)*AVG_1_1_LEV_10 + rhoE_B0(0,2,0)*AVG_1_1_LEV_14 + rhou0_B0(0,2,0)*AVG_1_1_LEV_11 +
      rhou1_B0(0,2,0)*AVG_1_1_LEV_12 + rhou2_B0(0,2,0)*AVG_1_1_LEV_13;

   CS_24 = rho_B0(0,2,0)*AVG_1_1_LEV_20 + rhou0_B0(0,2,0)*AVG_1_1_LEV_21 + rhou1_B0(0,2,0)*AVG_1_1_LEV_22;

    CS_34 = rho_B0(0,2,0)*AVG_1_1_LEV_30 + rhoE_B0(0,2,0)*AVG_1_1_LEV_34 + rhou0_B0(0,2,0)*AVG_1_1_LEV_31 +
      rhou1_B0(0,2,0)*AVG_1_1_LEV_32 + rhou2_B0(0,2,0)*AVG_1_1_LEV_33;

    CS_44 = rho_B0(0,2,0)*AVG_1_1_LEV_40 + rhoE_B0(0,2,0)*AVG_1_1_LEV_44 + rhou0_B0(0,2,0)*AVG_1_1_LEV_41 +
      rhou1_B0(0,2,0)*AVG_1_1_LEV_42 + rhou2_B0(0,2,0)*AVG_1_1_LEV_43;

    CF_05 = (p_B0(0,3,0)*U1_B0(0,3,0)*AVG_1_1_LEV_04 + p_B0(0,3,0)*D10_B0(0,3,0)*AVG_1_1_LEV_01 +
      p_B0(0,3,0)*D11_B0(0,3,0)*AVG_1_1_LEV_02 + U1_B0(0,3,0)*rho_B0(0,3,0)*AVG_1_1_LEV_00 +
      U1_B0(0,3,0)*rhoE_B0(0,3,0)*AVG_1_1_LEV_04 + U1_B0(0,3,0)*rhou0_B0(0,3,0)*AVG_1_1_LEV_01 +
      U1_B0(0,3,0)*rhou1_B0(0,3,0)*AVG_1_1_LEV_02 + U1_B0(0,3,0)*rhou2_B0(0,3,0)*AVG_1_1_LEV_03)*detJ_B0(0,3,0);

    CF_15 = (p_B0(0,3,0)*U1_B0(0,3,0)*AVG_1_1_LEV_14 + p_B0(0,3,0)*D10_B0(0,3,0)*AVG_1_1_LEV_11 +
      p_B0(0,3,0)*D11_B0(0,3,0)*AVG_1_1_LEV_12 + U1_B0(0,3,0)*rho_B0(0,3,0)*AVG_1_1_LEV_10 +
      U1_B0(0,3,0)*rhoE_B0(0,3,0)*AVG_1_1_LEV_14 + U1_B0(0,3,0)*rhou0_B0(0,3,0)*AVG_1_1_LEV_11 +
      U1_B0(0,3,0)*rhou1_B0(0,3,0)*AVG_1_1_LEV_12 + U1_B0(0,3,0)*rhou2_B0(0,3,0)*AVG_1_1_LEV_13)*detJ_B0(0,3,0);

    CF_25 = (p_B0(0,3,0)*D10_B0(0,3,0)*AVG_1_1_LEV_21 + p_B0(0,3,0)*D11_B0(0,3,0)*AVG_1_1_LEV_22 +
      U1_B0(0,3,0)*rho_B0(0,3,0)*AVG_1_1_LEV_20 + U1_B0(0,3,0)*rhou0_B0(0,3,0)*AVG_1_1_LEV_21 +
      U1_B0(0,3,0)*rhou1_B0(0,3,0)*AVG_1_1_LEV_22)*detJ_B0(0,3,0);

    CF_35 = (p_B0(0,3,0)*U1_B0(0,3,0)*AVG_1_1_LEV_34 + p_B0(0,3,0)*D10_B0(0,3,0)*AVG_1_1_LEV_31 +
      p_B0(0,3,0)*D11_B0(0,3,0)*AVG_1_1_LEV_32 + U1_B0(0,3,0)*rho_B0(0,3,0)*AVG_1_1_LEV_30 +
      U1_B0(0,3,0)*rhoE_B0(0,3,0)*AVG_1_1_LEV_34 + U1_B0(0,3,0)*rhou0_B0(0,3,0)*AVG_1_1_LEV_31 +
      U1_B0(0,3,0)*rhou1_B0(0,3,0)*AVG_1_1_LEV_32 + U1_B0(0,3,0)*rhou2_B0(0,3,0)*AVG_1_1_LEV_33)*detJ_B0(0,3,0);

    CF_45 = (p_B0(0,3,0)*U1_B0(0,3,0)*AVG_1_1_LEV_44 + p_B0(0,3,0)*D10_B0(0,3,0)*AVG_1_1_LEV_41 +
      p_B0(0,3,0)*D11_B0(0,3,0)*AVG_1_1_LEV_42 + U1_B0(0,3,0)*rho_B0(0,3,0)*AVG_1_1_LEV_40 +
      U1_B0(0,3,0)*rhoE_B0(0,3,0)*AVG_1_1_LEV_44 + U1_B0(0,3,0)*rhou0_B0(0,3,0)*AVG_1_1_LEV_41 +
      U1_B0(0,3,0)*rhou1_B0(0,3,0)*AVG_1_1_LEV_42 + U1_B0(0,3,0)*rhou2_B0(0,3,0)*AVG_1_1_LEV_43)*detJ_B0(0,3,0);

    CS_05 = rho_B0(0,3,0)*AVG_1_1_LEV_00 + rhoE_B0(0,3,0)*AVG_1_1_LEV_04 + rhou0_B0(0,3,0)*AVG_1_1_LEV_01 +
      rhou1_B0(0,3,0)*AVG_1_1_LEV_02 + rhou2_B0(0,3,0)*AVG_1_1_LEV_03;

    CS_15 = rho_B0(0,3,0)*AVG_1_1_LEV_10 + rhoE_B0(0,3,0)*AVG_1_1_LEV_14 + rhou0_B0(0,3,0)*AVG_1_1_LEV_11 +
      rhou1_B0(0,3,0)*AVG_1_1_LEV_12 + rhou2_B0(0,3,0)*AVG_1_1_LEV_13;

   CS_25 = rho_B0(0,3,0)*AVG_1_1_LEV_20 + rhou0_B0(0,3,0)*AVG_1_1_LEV_21 + rhou1_B0(0,3,0)*AVG_1_1_LEV_22;

    CS_35 = rho_B0(0,3,0)*AVG_1_1_LEV_30 + rhoE_B0(0,3,0)*AVG_1_1_LEV_34 + rhou0_B0(0,3,0)*AVG_1_1_LEV_31 +
      rhou1_B0(0,3,0)*AVG_1_1_LEV_32 + rhou2_B0(0,3,0)*AVG_1_1_LEV_33;

    CS_45 = rho_B0(0,3,0)*AVG_1_1_LEV_40 + rhoE_B0(0,3,0)*AVG_1_1_LEV_44 + rhou0_B0(0,3,0)*AVG_1_1_LEV_41 +
      rhou1_B0(0,3,0)*AVG_1_1_LEV_42 + rhou2_B0(0,3,0)*AVG_1_1_LEV_43;

    max_lambda_00 = shock_filter_control*fmax(fabs(u0_B0(0,0,0)*D10_B0(0,0,0)*detJ_B0(0,0,0) +
      u1_B0(0,0,0)*D11_B0(0,0,0)*detJ_B0(0,0,0)), fabs(u0_B0(0,1,0)*D10_B0(0,1,0)*detJ_B0(0,1,0) +
      u1_B0(0,1,0)*D11_B0(0,1,0)*detJ_B0(0,1,0)));

   max_lambda_11 = max_lambda_00;

   max_lambda_22 = max_lambda_00;

    max_lambda_33 = shock_filter_control*fmax(fabs(sqrt((D10_B0(0,1,0)*D10_B0(0,1,0))*(detJ_B0(0,1,0)*detJ_B0(0,1,0)) +
      (D11_B0(0,1,0)*D11_B0(0,1,0))*(detJ_B0(0,1,0)*detJ_B0(0,1,0)))*a_B0(0,1,0) +
      u0_B0(0,1,0)*D10_B0(0,1,0)*detJ_B0(0,1,0) + u1_B0(0,1,0)*D11_B0(0,1,0)*detJ_B0(0,1,0)),
      fabs(sqrt((D10_B0(0,0,0)*D10_B0(0,0,0))*(detJ_B0(0,0,0)*detJ_B0(0,0,0)) +
      (D11_B0(0,0,0)*D11_B0(0,0,0))*(detJ_B0(0,0,0)*detJ_B0(0,0,0)))*a_B0(0,0,0) +
      u0_B0(0,0,0)*D10_B0(0,0,0)*detJ_B0(0,0,0) + u1_B0(0,0,0)*D11_B0(0,0,0)*detJ_B0(0,0,0)));

    max_lambda_44 = shock_filter_control*fmax(fabs(-sqrt((D10_B0(0,0,0)*D10_B0(0,0,0))*(detJ_B0(0,0,0)*detJ_B0(0,0,0)) +
      (D11_B0(0,0,0)*D11_B0(0,0,0))*(detJ_B0(0,0,0)*detJ_B0(0,0,0)))*a_B0(0,0,0) +
      u0_B0(0,0,0)*D10_B0(0,0,0)*detJ_B0(0,0,0) + u1_B0(0,0,0)*D11_B0(0,0,0)*detJ_B0(0,0,0)),
      fabs(-sqrt((D10_B0(0,1,0)*D10_B0(0,1,0))*(detJ_B0(0,1,0)*detJ_B0(0,1,0)) +
      (D11_B0(0,1,0)*D11_B0(0,1,0))*(detJ_B0(0,1,0)*detJ_B0(0,1,0)))*a_B0(0,1,0) +
      u0_B0(0,1,0)*D10_B0(0,1,0)*detJ_B0(0,1,0) + u1_B0(0,1,0)*D11_B0(0,1,0)*detJ_B0(0,1,0)));

    beta_0 = ((1.0/4.0))*((((1.0/2.0))*(CS_01*max_lambda_00 + CF_01) - (1.0/2.0)*(CS_03*max_lambda_00 +
      CF_03))*(((1.0/2.0))*(CS_01*max_lambda_00 + CF_01) - (1.0/2.0)*(CS_03*max_lambda_00 + CF_03))) +
      ((13.0/12.0))*((((1.0/2.0))*(CS_01*max_lambda_00 + CF_01) + ((1.0/2.0))*(CS_03*max_lambda_00 + CF_03) -
      (CS_02*max_lambda_00 + CF_02))*(((1.0/2.0))*(CS_01*max_lambda_00 + CF_01) + ((1.0/2.0))*(CS_03*max_lambda_00 +
      CF_03) - (CS_02*max_lambda_00 + CF_02)));

    beta_1 = ((1.0/4.0))*((((1.0/2.0))*(CS_04*max_lambda_00 + CF_04) - 2*(CS_03*max_lambda_00 + CF_03) +
      ((3.0/2.0))*(CS_02*max_lambda_00 + CF_02))*(((1.0/2.0))*(CS_04*max_lambda_00 + CF_04) - 2*(CS_03*max_lambda_00 +
      CF_03) + ((3.0/2.0))*(CS_02*max_lambda_00 + CF_02))) + ((13.0/12.0))*((((1.0/2.0))*(CS_02*max_lambda_00 + CF_02) +
      ((1.0/2.0))*(CS_04*max_lambda_00 + CF_04) - (CS_03*max_lambda_00 + CF_03))*(((1.0/2.0))*(CS_02*max_lambda_00 +
      CF_02) + ((1.0/2.0))*(CS_04*max_lambda_00 + CF_04) - (CS_03*max_lambda_00 + CF_03)));

    beta_2 = ((1.0/4.0))*((((1.0/2.0))*(CS_00*max_lambda_00 + CF_00) - 2*(CS_01*max_lambda_00 + CF_01) +
      ((3.0/2.0))*(CS_02*max_lambda_00 + CF_02))*(((1.0/2.0))*(CS_00*max_lambda_00 + CF_00) - 2*(CS_01*max_lambda_00 +
      CF_01) + ((3.0/2.0))*(CS_02*max_lambda_00 + CF_02))) + ((13.0/12.0))*((((1.0/2.0))*(CS_00*max_lambda_00 + CF_00) +
      ((1.0/2.0))*(CS_02*max_lambda_00 + CF_02) - (CS_01*max_lambda_00 + CF_01))*(((1.0/2.0))*(CS_00*max_lambda_00 +
      CF_00) + ((1.0/2.0))*(CS_02*max_lambda_00 + CF_02) - (CS_01*max_lambda_00 + CF_01)));

    beta_3 = -(781.0/480.0)*(CS_04*max_lambda_00 + CF_04) - (781.0/1440.0)*(CS_02*max_lambda_00 + CF_02) +
      ((1.0/36.0))*((9*(CS_03*max_lambda_00 + CF_03) - (11.0/2.0)*(CS_02*max_lambda_00 + CF_02) -
      (9.0/2.0)*(CS_04*max_lambda_00 + CF_04) + CS_05*max_lambda_00 + CF_05)*(9*(CS_03*max_lambda_00 + CF_03) -
      (11.0/2.0)*(CS_02*max_lambda_00 + CF_02) - (9.0/2.0)*(CS_04*max_lambda_00 + CF_04) + CS_05*max_lambda_00 + CF_05))
      + ((13.0/12.0))*((2*(CS_04*max_lambda_00 + CF_04) - (5.0/2.0)*(CS_03*max_lambda_00 + CF_03) -
      (1.0/2.0)*(CS_05*max_lambda_00 + CF_05) + CS_02*max_lambda_00 + CF_02)*(2*(CS_04*max_lambda_00 + CF_04) -
      (5.0/2.0)*(CS_03*max_lambda_00 + CF_03) - (1.0/2.0)*(CS_05*max_lambda_00 + CF_05) + CS_02*max_lambda_00 + CF_02))
      + ((781.0/480.0))*(CS_03*max_lambda_00 + CF_03) + ((781.0/1440.0))*(CS_05*max_lambda_00 + CF_05);

   inv_beta_0 = 1.0/(eps + beta_0);

   inv_beta_1 = 1.0/(eps + beta_1);

   inv_beta_2 = 1.0/(eps + beta_2);

   inv_beta_3 = 1.0/(eps + beta_3);

    alpha_0 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0));

    alpha_1 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1));

    alpha_2 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2));

    alpha_3 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3));

   inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2 + alpha_3));

   delta_0 = ((alpha_0*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_1 = ((alpha_1*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_2 = ((alpha_2*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_3 = ((alpha_3*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

    inv_omega_sum = 1.0/((((3.0/10.0))*delta_1 + ((23.0/125.0))*delta_3 + ((27.0/500.0))*delta_2 +
      ((231.0/500.0))*delta_0));

    Recon_0 = ((3.0/10.0))*(-(1.0/12.0)*(CS_04*max_lambda_00 + CF_04) + ((1.0/6.0))*(CS_02*max_lambda_00 + CF_02) +
      ((5.0/12.0))*(CS_03*max_lambda_00 + CF_03))*delta_1*inv_omega_sum +
      ((23.0/125.0))*(-(5.0/24.0)*(CS_04*max_lambda_00 + CF_04) + ((1.0/8.0))*(CS_02*max_lambda_00 + CF_02) +
      ((1.0/24.0))*(CS_05*max_lambda_00 + CF_05) + ((13.0/24.0))*(CS_03*max_lambda_00 + CF_03))*delta_3*inv_omega_sum +
      ((27.0/500.0))*(-(7.0/12.0)*(CS_01*max_lambda_00 + CF_01) + ((1.0/6.0))*(CS_00*max_lambda_00 + CF_00) +
      ((11.0/12.0))*(CS_02*max_lambda_00 + CF_02))*delta_2*inv_omega_sum +
      ((231.0/500.0))*(-(1.0/12.0)*(CS_01*max_lambda_00 + CF_01) + ((1.0/6.0))*(CS_03*max_lambda_00 + CF_03) +
      ((5.0/12.0))*(CS_02*max_lambda_00 + CF_02))*delta_0*inv_omega_sum + Recon_0;

    beta_0 = ((1.0/4.0))*((((1.0/2.0))*(-CS_02*max_lambda_00 + CF_02) - (1.0/2.0)*(-CS_04*max_lambda_00 +
      CF_04))*(((1.0/2.0))*(-CS_02*max_lambda_00 + CF_02) - (1.0/2.0)*(-CS_04*max_lambda_00 + CF_04))) +
      ((13.0/12.0))*((((1.0/2.0))*(-CS_02*max_lambda_00 + CF_02) + ((1.0/2.0))*(-CS_04*max_lambda_00 + CF_04) -
      (-CS_03*max_lambda_00 + CF_03))*(((1.0/2.0))*(-CS_02*max_lambda_00 + CF_02) + ((1.0/2.0))*(-CS_04*max_lambda_00 +
      CF_04) - (-CS_03*max_lambda_00 + CF_03)));

    beta_1 = ((1.0/4.0))*((((1.0/2.0))*(-CS_01*max_lambda_00 + CF_01) - 2*(-CS_02*max_lambda_00 + CF_02) +
      ((3.0/2.0))*(-CS_03*max_lambda_00 + CF_03))*(((1.0/2.0))*(-CS_01*max_lambda_00 + CF_01) - 2*(-CS_02*max_lambda_00
      + CF_02) + ((3.0/2.0))*(-CS_03*max_lambda_00 + CF_03))) + ((13.0/12.0))*((((1.0/2.0))*(-CS_01*max_lambda_00 +
      CF_01) + ((1.0/2.0))*(-CS_03*max_lambda_00 + CF_03) - (-CS_02*max_lambda_00 +
      CF_02))*(((1.0/2.0))*(-CS_01*max_lambda_00 + CF_01) + ((1.0/2.0))*(-CS_03*max_lambda_00 + CF_03) -
      (-CS_02*max_lambda_00 + CF_02)));

    beta_2 = ((1.0/4.0))*((((1.0/2.0))*(-CS_05*max_lambda_00 + CF_05) - 2*(-CS_04*max_lambda_00 + CF_04) +
      ((3.0/2.0))*(-CS_03*max_lambda_00 + CF_03))*(((1.0/2.0))*(-CS_05*max_lambda_00 + CF_05) - 2*(-CS_04*max_lambda_00
      + CF_04) + ((3.0/2.0))*(-CS_03*max_lambda_00 + CF_03))) + ((13.0/12.0))*((((1.0/2.0))*(-CS_03*max_lambda_00 +
      CF_03) + ((1.0/2.0))*(-CS_05*max_lambda_00 + CF_05) - (-CS_04*max_lambda_00 +
      CF_04))*(((1.0/2.0))*(-CS_03*max_lambda_00 + CF_03) + ((1.0/2.0))*(-CS_05*max_lambda_00 + CF_05) -
      (-CS_04*max_lambda_00 + CF_04)));

    beta_3 = ((1.0/36.0))*((-(-CS_00*max_lambda_00 + CF_00) - 9*(-CS_02*max_lambda_00 + CF_02) +
      ((9.0/2.0))*(-CS_01*max_lambda_00 + CF_01) + ((11.0/2.0))*(-CS_03*max_lambda_00 + CF_03))*(-(-CS_00*max_lambda_00
      + CF_00) - 9*(-CS_02*max_lambda_00 + CF_02) + ((9.0/2.0))*(-CS_01*max_lambda_00 + CF_01) +
      ((11.0/2.0))*(-CS_03*max_lambda_00 + CF_03))) + ((13.0/12.0))*((2*(-CS_01*max_lambda_00 + CF_01) -
      (5.0/2.0)*(-CS_02*max_lambda_00 + CF_02) - (1.0/2.0)*(-CS_00*max_lambda_00 + CF_00) - CS_03*max_lambda_00 +
      CF_03)*(2*(-CS_01*max_lambda_00 + CF_01) - (5.0/2.0)*(-CS_02*max_lambda_00 + CF_02) -
      (1.0/2.0)*(-CS_00*max_lambda_00 + CF_00) - CS_03*max_lambda_00 + CF_03)) +
      ((781.0/720.0))*((((1.0/2.0))*(-CS_03*max_lambda_00 + CF_03) - (3.0/2.0)*(-CS_02*max_lambda_00 + CF_02) -
      (1.0/2.0)*(-CS_00*max_lambda_00 + CF_00) + ((3.0/2.0))*(-CS_01*max_lambda_00 +
      CF_01))*(((1.0/2.0))*(-CS_03*max_lambda_00 + CF_03) - (3.0/2.0)*(-CS_02*max_lambda_00 + CF_02) -
      (1.0/2.0)*(-CS_00*max_lambda_00 + CF_00) + ((3.0/2.0))*(-CS_01*max_lambda_00 + CF_01)));

   inv_beta_0 = 1.0/(eps + beta_0);

   inv_beta_1 = 1.0/(eps + beta_1);

   inv_beta_2 = 1.0/(eps + beta_2);

   inv_beta_3 = 1.0/(eps + beta_3);

    alpha_0 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0));

    alpha_1 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1));

    alpha_2 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2));

    alpha_3 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3));

   inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2 + alpha_3));

   delta_0 = ((alpha_0*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_1 = ((alpha_1*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_2 = ((alpha_2*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_3 = ((alpha_3*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

    inv_omega_sum = 1.0/((((3.0/10.0))*delta_1 + ((23.0/125.0))*delta_3 + ((27.0/500.0))*delta_2 +
      ((231.0/500.0))*delta_0));

    Recon_0 = ((3.0/10.0))*(-(1.0/12.0)*(-CS_01*max_lambda_00 + CF_01) + ((1.0/6.0))*(-CS_03*max_lambda_00 + CF_03) +
      ((5.0/12.0))*(-CS_02*max_lambda_00 + CF_02))*delta_1*inv_omega_sum +
      ((23.0/125.0))*(-(5.0/24.0)*(-CS_01*max_lambda_00 + CF_01) + ((1.0/8.0))*(-CS_03*max_lambda_00 + CF_03) +
      ((1.0/24.0))*(-CS_00*max_lambda_00 + CF_00) + ((13.0/24.0))*(-CS_02*max_lambda_00 + CF_02))*delta_3*inv_omega_sum
      + ((27.0/500.0))*(-(7.0/12.0)*(-CS_04*max_lambda_00 + CF_04) + ((1.0/6.0))*(-CS_05*max_lambda_00 + CF_05) +
      ((11.0/12.0))*(-CS_03*max_lambda_00 + CF_03))*delta_2*inv_omega_sum +
      ((231.0/500.0))*(-(1.0/12.0)*(-CS_04*max_lambda_00 + CF_04) + ((1.0/6.0))*(-CS_02*max_lambda_00 + CF_02) +
      ((5.0/12.0))*(-CS_03*max_lambda_00 + CF_03))*delta_0*inv_omega_sum + Recon_0;

    beta_0 = ((1.0/4.0))*((((1.0/2.0))*(CS_11*max_lambda_11 + CF_11) - (1.0/2.0)*(CS_13*max_lambda_11 +
      CF_13))*(((1.0/2.0))*(CS_11*max_lambda_11 + CF_11) - (1.0/2.0)*(CS_13*max_lambda_11 + CF_13))) +
      ((13.0/12.0))*((((1.0/2.0))*(CS_11*max_lambda_11 + CF_11) + ((1.0/2.0))*(CS_13*max_lambda_11 + CF_13) -
      (CS_12*max_lambda_11 + CF_12))*(((1.0/2.0))*(CS_11*max_lambda_11 + CF_11) + ((1.0/2.0))*(CS_13*max_lambda_11 +
      CF_13) - (CS_12*max_lambda_11 + CF_12)));

    beta_1 = ((1.0/4.0))*((((1.0/2.0))*(CS_14*max_lambda_11 + CF_14) - 2*(CS_13*max_lambda_11 + CF_13) +
      ((3.0/2.0))*(CS_12*max_lambda_11 + CF_12))*(((1.0/2.0))*(CS_14*max_lambda_11 + CF_14) - 2*(CS_13*max_lambda_11 +
      CF_13) + ((3.0/2.0))*(CS_12*max_lambda_11 + CF_12))) + ((13.0/12.0))*((((1.0/2.0))*(CS_12*max_lambda_11 + CF_12) +
      ((1.0/2.0))*(CS_14*max_lambda_11 + CF_14) - (CS_13*max_lambda_11 + CF_13))*(((1.0/2.0))*(CS_12*max_lambda_11 +
      CF_12) + ((1.0/2.0))*(CS_14*max_lambda_11 + CF_14) - (CS_13*max_lambda_11 + CF_13)));

    beta_2 = ((1.0/4.0))*((((1.0/2.0))*(CS_10*max_lambda_11 + CF_10) - 2*(CS_11*max_lambda_11 + CF_11) +
      ((3.0/2.0))*(CS_12*max_lambda_11 + CF_12))*(((1.0/2.0))*(CS_10*max_lambda_11 + CF_10) - 2*(CS_11*max_lambda_11 +
      CF_11) + ((3.0/2.0))*(CS_12*max_lambda_11 + CF_12))) + ((13.0/12.0))*((((1.0/2.0))*(CS_10*max_lambda_11 + CF_10) +
      ((1.0/2.0))*(CS_12*max_lambda_11 + CF_12) - (CS_11*max_lambda_11 + CF_11))*(((1.0/2.0))*(CS_10*max_lambda_11 +
      CF_10) + ((1.0/2.0))*(CS_12*max_lambda_11 + CF_12) - (CS_11*max_lambda_11 + CF_11)));

    beta_3 = -(781.0/480.0)*(CS_14*max_lambda_11 + CF_14) - (781.0/1440.0)*(CS_12*max_lambda_11 + CF_12) +
      ((1.0/36.0))*((9*(CS_13*max_lambda_11 + CF_13) - (11.0/2.0)*(CS_12*max_lambda_11 + CF_12) -
      (9.0/2.0)*(CS_14*max_lambda_11 + CF_14) + CS_15*max_lambda_11 + CF_15)*(9*(CS_13*max_lambda_11 + CF_13) -
      (11.0/2.0)*(CS_12*max_lambda_11 + CF_12) - (9.0/2.0)*(CS_14*max_lambda_11 + CF_14) + CS_15*max_lambda_11 + CF_15))
      + ((13.0/12.0))*((2*(CS_14*max_lambda_11 + CF_14) - (5.0/2.0)*(CS_13*max_lambda_11 + CF_13) -
      (1.0/2.0)*(CS_15*max_lambda_11 + CF_15) + CS_12*max_lambda_11 + CF_12)*(2*(CS_14*max_lambda_11 + CF_14) -
      (5.0/2.0)*(CS_13*max_lambda_11 + CF_13) - (1.0/2.0)*(CS_15*max_lambda_11 + CF_15) + CS_12*max_lambda_11 + CF_12))
      + ((781.0/480.0))*(CS_13*max_lambda_11 + CF_13) + ((781.0/1440.0))*(CS_15*max_lambda_11 + CF_15);

   inv_beta_0 = 1.0/(eps + beta_0);

   inv_beta_1 = 1.0/(eps + beta_1);

   inv_beta_2 = 1.0/(eps + beta_2);

   inv_beta_3 = 1.0/(eps + beta_3);

    alpha_0 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0));

    alpha_1 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1));

    alpha_2 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2));

    alpha_3 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3));

   inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2 + alpha_3));

   delta_0 = ((alpha_0*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_1 = ((alpha_1*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_2 = ((alpha_2*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_3 = ((alpha_3*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

    inv_omega_sum = 1.0/((((3.0/10.0))*delta_1 + ((23.0/125.0))*delta_3 + ((27.0/500.0))*delta_2 +
      ((231.0/500.0))*delta_0));

    Recon_1 = ((3.0/10.0))*(-(1.0/12.0)*(CS_14*max_lambda_11 + CF_14) + ((1.0/6.0))*(CS_12*max_lambda_11 + CF_12) +
      ((5.0/12.0))*(CS_13*max_lambda_11 + CF_13))*delta_1*inv_omega_sum +
      ((23.0/125.0))*(-(5.0/24.0)*(CS_14*max_lambda_11 + CF_14) + ((1.0/8.0))*(CS_12*max_lambda_11 + CF_12) +
      ((1.0/24.0))*(CS_15*max_lambda_11 + CF_15) + ((13.0/24.0))*(CS_13*max_lambda_11 + CF_13))*delta_3*inv_omega_sum +
      ((27.0/500.0))*(-(7.0/12.0)*(CS_11*max_lambda_11 + CF_11) + ((1.0/6.0))*(CS_10*max_lambda_11 + CF_10) +
      ((11.0/12.0))*(CS_12*max_lambda_11 + CF_12))*delta_2*inv_omega_sum +
      ((231.0/500.0))*(-(1.0/12.0)*(CS_11*max_lambda_11 + CF_11) + ((1.0/6.0))*(CS_13*max_lambda_11 + CF_13) +
      ((5.0/12.0))*(CS_12*max_lambda_11 + CF_12))*delta_0*inv_omega_sum + Recon_1;

    beta_0 = ((1.0/4.0))*((((1.0/2.0))*(-CS_12*max_lambda_11 + CF_12) - (1.0/2.0)*(-CS_14*max_lambda_11 +
      CF_14))*(((1.0/2.0))*(-CS_12*max_lambda_11 + CF_12) - (1.0/2.0)*(-CS_14*max_lambda_11 + CF_14))) +
      ((13.0/12.0))*((((1.0/2.0))*(-CS_12*max_lambda_11 + CF_12) + ((1.0/2.0))*(-CS_14*max_lambda_11 + CF_14) -
      (-CS_13*max_lambda_11 + CF_13))*(((1.0/2.0))*(-CS_12*max_lambda_11 + CF_12) + ((1.0/2.0))*(-CS_14*max_lambda_11 +
      CF_14) - (-CS_13*max_lambda_11 + CF_13)));

    beta_1 = ((1.0/4.0))*((((1.0/2.0))*(-CS_11*max_lambda_11 + CF_11) - 2*(-CS_12*max_lambda_11 + CF_12) +
      ((3.0/2.0))*(-CS_13*max_lambda_11 + CF_13))*(((1.0/2.0))*(-CS_11*max_lambda_11 + CF_11) - 2*(-CS_12*max_lambda_11
      + CF_12) + ((3.0/2.0))*(-CS_13*max_lambda_11 + CF_13))) + ((13.0/12.0))*((((1.0/2.0))*(-CS_11*max_lambda_11 +
      CF_11) + ((1.0/2.0))*(-CS_13*max_lambda_11 + CF_13) - (-CS_12*max_lambda_11 +
      CF_12))*(((1.0/2.0))*(-CS_11*max_lambda_11 + CF_11) + ((1.0/2.0))*(-CS_13*max_lambda_11 + CF_13) -
      (-CS_12*max_lambda_11 + CF_12)));

    beta_2 = ((1.0/4.0))*((((1.0/2.0))*(-CS_15*max_lambda_11 + CF_15) - 2*(-CS_14*max_lambda_11 + CF_14) +
      ((3.0/2.0))*(-CS_13*max_lambda_11 + CF_13))*(((1.0/2.0))*(-CS_15*max_lambda_11 + CF_15) - 2*(-CS_14*max_lambda_11
      + CF_14) + ((3.0/2.0))*(-CS_13*max_lambda_11 + CF_13))) + ((13.0/12.0))*((((1.0/2.0))*(-CS_13*max_lambda_11 +
      CF_13) + ((1.0/2.0))*(-CS_15*max_lambda_11 + CF_15) - (-CS_14*max_lambda_11 +
      CF_14))*(((1.0/2.0))*(-CS_13*max_lambda_11 + CF_13) + ((1.0/2.0))*(-CS_15*max_lambda_11 + CF_15) -
      (-CS_14*max_lambda_11 + CF_14)));

    beta_3 = ((1.0/36.0))*((-(-CS_10*max_lambda_11 + CF_10) - 9*(-CS_12*max_lambda_11 + CF_12) +
      ((9.0/2.0))*(-CS_11*max_lambda_11 + CF_11) + ((11.0/2.0))*(-CS_13*max_lambda_11 + CF_13))*(-(-CS_10*max_lambda_11
      + CF_10) - 9*(-CS_12*max_lambda_11 + CF_12) + ((9.0/2.0))*(-CS_11*max_lambda_11 + CF_11) +
      ((11.0/2.0))*(-CS_13*max_lambda_11 + CF_13))) + ((13.0/12.0))*((2*(-CS_11*max_lambda_11 + CF_11) -
      (5.0/2.0)*(-CS_12*max_lambda_11 + CF_12) - (1.0/2.0)*(-CS_10*max_lambda_11 + CF_10) - CS_13*max_lambda_11 +
      CF_13)*(2*(-CS_11*max_lambda_11 + CF_11) - (5.0/2.0)*(-CS_12*max_lambda_11 + CF_12) -
      (1.0/2.0)*(-CS_10*max_lambda_11 + CF_10) - CS_13*max_lambda_11 + CF_13)) +
      ((781.0/720.0))*((((1.0/2.0))*(-CS_13*max_lambda_11 + CF_13) - (3.0/2.0)*(-CS_12*max_lambda_11 + CF_12) -
      (1.0/2.0)*(-CS_10*max_lambda_11 + CF_10) + ((3.0/2.0))*(-CS_11*max_lambda_11 +
      CF_11))*(((1.0/2.0))*(-CS_13*max_lambda_11 + CF_13) - (3.0/2.0)*(-CS_12*max_lambda_11 + CF_12) -
      (1.0/2.0)*(-CS_10*max_lambda_11 + CF_10) + ((3.0/2.0))*(-CS_11*max_lambda_11 + CF_11)));

   inv_beta_0 = 1.0/(eps + beta_0);

   inv_beta_1 = 1.0/(eps + beta_1);

   inv_beta_2 = 1.0/(eps + beta_2);

   inv_beta_3 = 1.0/(eps + beta_3);

    alpha_0 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0));

    alpha_1 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1));

    alpha_2 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2));

    alpha_3 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3));

   inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2 + alpha_3));

   delta_0 = ((alpha_0*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_1 = ((alpha_1*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_2 = ((alpha_2*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_3 = ((alpha_3*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

    inv_omega_sum = 1.0/((((3.0/10.0))*delta_1 + ((23.0/125.0))*delta_3 + ((27.0/500.0))*delta_2 +
      ((231.0/500.0))*delta_0));

    Recon_1 = ((3.0/10.0))*(-(1.0/12.0)*(-CS_11*max_lambda_11 + CF_11) + ((1.0/6.0))*(-CS_13*max_lambda_11 + CF_13) +
      ((5.0/12.0))*(-CS_12*max_lambda_11 + CF_12))*delta_1*inv_omega_sum +
      ((23.0/125.0))*(-(5.0/24.0)*(-CS_11*max_lambda_11 + CF_11) + ((1.0/8.0))*(-CS_13*max_lambda_11 + CF_13) +
      ((1.0/24.0))*(-CS_10*max_lambda_11 + CF_10) + ((13.0/24.0))*(-CS_12*max_lambda_11 + CF_12))*delta_3*inv_omega_sum
      + ((27.0/500.0))*(-(7.0/12.0)*(-CS_14*max_lambda_11 + CF_14) + ((1.0/6.0))*(-CS_15*max_lambda_11 + CF_15) +
      ((11.0/12.0))*(-CS_13*max_lambda_11 + CF_13))*delta_2*inv_omega_sum +
      ((231.0/500.0))*(-(1.0/12.0)*(-CS_14*max_lambda_11 + CF_14) + ((1.0/6.0))*(-CS_12*max_lambda_11 + CF_12) +
      ((5.0/12.0))*(-CS_13*max_lambda_11 + CF_13))*delta_0*inv_omega_sum + Recon_1;

    beta_0 = ((1.0/4.0))*((((1.0/2.0))*(CS_21*max_lambda_22 + CF_21) - (1.0/2.0)*(CS_23*max_lambda_22 +
      CF_23))*(((1.0/2.0))*(CS_21*max_lambda_22 + CF_21) - (1.0/2.0)*(CS_23*max_lambda_22 + CF_23))) +
      ((13.0/12.0))*((((1.0/2.0))*(CS_21*max_lambda_22 + CF_21) + ((1.0/2.0))*(CS_23*max_lambda_22 + CF_23) -
      (CS_22*max_lambda_22 + CF_22))*(((1.0/2.0))*(CS_21*max_lambda_22 + CF_21) + ((1.0/2.0))*(CS_23*max_lambda_22 +
      CF_23) - (CS_22*max_lambda_22 + CF_22)));

    beta_1 = ((1.0/4.0))*((((1.0/2.0))*(CS_24*max_lambda_22 + CF_24) - 2*(CS_23*max_lambda_22 + CF_23) +
      ((3.0/2.0))*(CS_22*max_lambda_22 + CF_22))*(((1.0/2.0))*(CS_24*max_lambda_22 + CF_24) - 2*(CS_23*max_lambda_22 +
      CF_23) + ((3.0/2.0))*(CS_22*max_lambda_22 + CF_22))) + ((13.0/12.0))*((((1.0/2.0))*(CS_22*max_lambda_22 + CF_22) +
      ((1.0/2.0))*(CS_24*max_lambda_22 + CF_24) - (CS_23*max_lambda_22 + CF_23))*(((1.0/2.0))*(CS_22*max_lambda_22 +
      CF_22) + ((1.0/2.0))*(CS_24*max_lambda_22 + CF_24) - (CS_23*max_lambda_22 + CF_23)));

    beta_2 = ((1.0/4.0))*((((1.0/2.0))*(CS_20*max_lambda_22 + CF_20) - 2*(CS_21*max_lambda_22 + CF_21) +
      ((3.0/2.0))*(CS_22*max_lambda_22 + CF_22))*(((1.0/2.0))*(CS_20*max_lambda_22 + CF_20) - 2*(CS_21*max_lambda_22 +
      CF_21) + ((3.0/2.0))*(CS_22*max_lambda_22 + CF_22))) + ((13.0/12.0))*((((1.0/2.0))*(CS_20*max_lambda_22 + CF_20) +
      ((1.0/2.0))*(CS_22*max_lambda_22 + CF_22) - (CS_21*max_lambda_22 + CF_21))*(((1.0/2.0))*(CS_20*max_lambda_22 +
      CF_20) + ((1.0/2.0))*(CS_22*max_lambda_22 + CF_22) - (CS_21*max_lambda_22 + CF_21)));

    beta_3 = -(781.0/480.0)*(CS_24*max_lambda_22 + CF_24) - (781.0/1440.0)*(CS_22*max_lambda_22 + CF_22) +
      ((1.0/36.0))*((9*(CS_23*max_lambda_22 + CF_23) - (11.0/2.0)*(CS_22*max_lambda_22 + CF_22) -
      (9.0/2.0)*(CS_24*max_lambda_22 + CF_24) + CS_25*max_lambda_22 + CF_25)*(9*(CS_23*max_lambda_22 + CF_23) -
      (11.0/2.0)*(CS_22*max_lambda_22 + CF_22) - (9.0/2.0)*(CS_24*max_lambda_22 + CF_24) + CS_25*max_lambda_22 + CF_25))
      + ((13.0/12.0))*((2*(CS_24*max_lambda_22 + CF_24) - (5.0/2.0)*(CS_23*max_lambda_22 + CF_23) -
      (1.0/2.0)*(CS_25*max_lambda_22 + CF_25) + CS_22*max_lambda_22 + CF_22)*(2*(CS_24*max_lambda_22 + CF_24) -
      (5.0/2.0)*(CS_23*max_lambda_22 + CF_23) - (1.0/2.0)*(CS_25*max_lambda_22 + CF_25) + CS_22*max_lambda_22 + CF_22))
      + ((781.0/480.0))*(CS_23*max_lambda_22 + CF_23) + ((781.0/1440.0))*(CS_25*max_lambda_22 + CF_25);

   inv_beta_0 = 1.0/(eps + beta_0);

   inv_beta_1 = 1.0/(eps + beta_1);

   inv_beta_2 = 1.0/(eps + beta_2);

   inv_beta_3 = 1.0/(eps + beta_3);

    alpha_0 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0));

    alpha_1 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1));

    alpha_2 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2));

    alpha_3 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3));

   inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2 + alpha_3));

   delta_0 = ((alpha_0*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_1 = ((alpha_1*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_2 = ((alpha_2*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_3 = ((alpha_3*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

    inv_omega_sum = 1.0/((((3.0/10.0))*delta_1 + ((23.0/125.0))*delta_3 + ((27.0/500.0))*delta_2 +
      ((231.0/500.0))*delta_0));

    Recon_2 = ((3.0/10.0))*(-(1.0/12.0)*(CS_24*max_lambda_22 + CF_24) + ((1.0/6.0))*(CS_22*max_lambda_22 + CF_22) +
      ((5.0/12.0))*(CS_23*max_lambda_22 + CF_23))*delta_1*inv_omega_sum +
      ((23.0/125.0))*(-(5.0/24.0)*(CS_24*max_lambda_22 + CF_24) + ((1.0/8.0))*(CS_22*max_lambda_22 + CF_22) +
      ((1.0/24.0))*(CS_25*max_lambda_22 + CF_25) + ((13.0/24.0))*(CS_23*max_lambda_22 + CF_23))*delta_3*inv_omega_sum +
      ((27.0/500.0))*(-(7.0/12.0)*(CS_21*max_lambda_22 + CF_21) + ((1.0/6.0))*(CS_20*max_lambda_22 + CF_20) +
      ((11.0/12.0))*(CS_22*max_lambda_22 + CF_22))*delta_2*inv_omega_sum +
      ((231.0/500.0))*(-(1.0/12.0)*(CS_21*max_lambda_22 + CF_21) + ((1.0/6.0))*(CS_23*max_lambda_22 + CF_23) +
      ((5.0/12.0))*(CS_22*max_lambda_22 + CF_22))*delta_0*inv_omega_sum + Recon_2;

    beta_0 = ((1.0/4.0))*((((1.0/2.0))*(-CS_22*max_lambda_22 + CF_22) - (1.0/2.0)*(-CS_24*max_lambda_22 +
      CF_24))*(((1.0/2.0))*(-CS_22*max_lambda_22 + CF_22) - (1.0/2.0)*(-CS_24*max_lambda_22 + CF_24))) +
      ((13.0/12.0))*((((1.0/2.0))*(-CS_22*max_lambda_22 + CF_22) + ((1.0/2.0))*(-CS_24*max_lambda_22 + CF_24) -
      (-CS_23*max_lambda_22 + CF_23))*(((1.0/2.0))*(-CS_22*max_lambda_22 + CF_22) + ((1.0/2.0))*(-CS_24*max_lambda_22 +
      CF_24) - (-CS_23*max_lambda_22 + CF_23)));

    beta_1 = ((1.0/4.0))*((((1.0/2.0))*(-CS_21*max_lambda_22 + CF_21) - 2*(-CS_22*max_lambda_22 + CF_22) +
      ((3.0/2.0))*(-CS_23*max_lambda_22 + CF_23))*(((1.0/2.0))*(-CS_21*max_lambda_22 + CF_21) - 2*(-CS_22*max_lambda_22
      + CF_22) + ((3.0/2.0))*(-CS_23*max_lambda_22 + CF_23))) + ((13.0/12.0))*((((1.0/2.0))*(-CS_21*max_lambda_22 +
      CF_21) + ((1.0/2.0))*(-CS_23*max_lambda_22 + CF_23) - (-CS_22*max_lambda_22 +
      CF_22))*(((1.0/2.0))*(-CS_21*max_lambda_22 + CF_21) + ((1.0/2.0))*(-CS_23*max_lambda_22 + CF_23) -
      (-CS_22*max_lambda_22 + CF_22)));

    beta_2 = ((1.0/4.0))*((((1.0/2.0))*(-CS_25*max_lambda_22 + CF_25) - 2*(-CS_24*max_lambda_22 + CF_24) +
      ((3.0/2.0))*(-CS_23*max_lambda_22 + CF_23))*(((1.0/2.0))*(-CS_25*max_lambda_22 + CF_25) - 2*(-CS_24*max_lambda_22
      + CF_24) + ((3.0/2.0))*(-CS_23*max_lambda_22 + CF_23))) + ((13.0/12.0))*((((1.0/2.0))*(-CS_23*max_lambda_22 +
      CF_23) + ((1.0/2.0))*(-CS_25*max_lambda_22 + CF_25) - (-CS_24*max_lambda_22 +
      CF_24))*(((1.0/2.0))*(-CS_23*max_lambda_22 + CF_23) + ((1.0/2.0))*(-CS_25*max_lambda_22 + CF_25) -
      (-CS_24*max_lambda_22 + CF_24)));

    beta_3 = ((1.0/36.0))*((-(-CS_20*max_lambda_22 + CF_20) - 9*(-CS_22*max_lambda_22 + CF_22) +
      ((9.0/2.0))*(-CS_21*max_lambda_22 + CF_21) + ((11.0/2.0))*(-CS_23*max_lambda_22 + CF_23))*(-(-CS_20*max_lambda_22
      + CF_20) - 9*(-CS_22*max_lambda_22 + CF_22) + ((9.0/2.0))*(-CS_21*max_lambda_22 + CF_21) +
      ((11.0/2.0))*(-CS_23*max_lambda_22 + CF_23))) + ((13.0/12.0))*((2*(-CS_21*max_lambda_22 + CF_21) -
      (5.0/2.0)*(-CS_22*max_lambda_22 + CF_22) - (1.0/2.0)*(-CS_20*max_lambda_22 + CF_20) - CS_23*max_lambda_22 +
      CF_23)*(2*(-CS_21*max_lambda_22 + CF_21) - (5.0/2.0)*(-CS_22*max_lambda_22 + CF_22) -
      (1.0/2.0)*(-CS_20*max_lambda_22 + CF_20) - CS_23*max_lambda_22 + CF_23)) +
      ((781.0/720.0))*((((1.0/2.0))*(-CS_23*max_lambda_22 + CF_23) - (3.0/2.0)*(-CS_22*max_lambda_22 + CF_22) -
      (1.0/2.0)*(-CS_20*max_lambda_22 + CF_20) + ((3.0/2.0))*(-CS_21*max_lambda_22 +
      CF_21))*(((1.0/2.0))*(-CS_23*max_lambda_22 + CF_23) - (3.0/2.0)*(-CS_22*max_lambda_22 + CF_22) -
      (1.0/2.0)*(-CS_20*max_lambda_22 + CF_20) + ((3.0/2.0))*(-CS_21*max_lambda_22 + CF_21)));

   inv_beta_0 = 1.0/(eps + beta_0);

   inv_beta_1 = 1.0/(eps + beta_1);

   inv_beta_2 = 1.0/(eps + beta_2);

   inv_beta_3 = 1.0/(eps + beta_3);

    alpha_0 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0));

    alpha_1 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1));

    alpha_2 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2));

    alpha_3 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3));

   inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2 + alpha_3));

   delta_0 = ((alpha_0*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_1 = ((alpha_1*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_2 = ((alpha_2*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_3 = ((alpha_3*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

    inv_omega_sum = 1.0/((((3.0/10.0))*delta_1 + ((23.0/125.0))*delta_3 + ((27.0/500.0))*delta_2 +
      ((231.0/500.0))*delta_0));

    Recon_2 = ((3.0/10.0))*(-(1.0/12.0)*(-CS_21*max_lambda_22 + CF_21) + ((1.0/6.0))*(-CS_23*max_lambda_22 + CF_23) +
      ((5.0/12.0))*(-CS_22*max_lambda_22 + CF_22))*delta_1*inv_omega_sum +
      ((23.0/125.0))*(-(5.0/24.0)*(-CS_21*max_lambda_22 + CF_21) + ((1.0/8.0))*(-CS_23*max_lambda_22 + CF_23) +
      ((1.0/24.0))*(-CS_20*max_lambda_22 + CF_20) + ((13.0/24.0))*(-CS_22*max_lambda_22 + CF_22))*delta_3*inv_omega_sum
      + ((27.0/500.0))*(-(7.0/12.0)*(-CS_24*max_lambda_22 + CF_24) + ((1.0/6.0))*(-CS_25*max_lambda_22 + CF_25) +
      ((11.0/12.0))*(-CS_23*max_lambda_22 + CF_23))*delta_2*inv_omega_sum +
      ((231.0/500.0))*(-(1.0/12.0)*(-CS_24*max_lambda_22 + CF_24) + ((1.0/6.0))*(-CS_22*max_lambda_22 + CF_22) +
      ((5.0/12.0))*(-CS_23*max_lambda_22 + CF_23))*delta_0*inv_omega_sum + Recon_2;

    beta_0 = ((1.0/4.0))*((((1.0/2.0))*(CS_31*max_lambda_33 + CF_31) - (1.0/2.0)*(CS_33*max_lambda_33 +
      CF_33))*(((1.0/2.0))*(CS_31*max_lambda_33 + CF_31) - (1.0/2.0)*(CS_33*max_lambda_33 + CF_33))) +
      ((13.0/12.0))*((((1.0/2.0))*(CS_31*max_lambda_33 + CF_31) + ((1.0/2.0))*(CS_33*max_lambda_33 + CF_33) -
      (CS_32*max_lambda_33 + CF_32))*(((1.0/2.0))*(CS_31*max_lambda_33 + CF_31) + ((1.0/2.0))*(CS_33*max_lambda_33 +
      CF_33) - (CS_32*max_lambda_33 + CF_32)));

    beta_1 = ((1.0/4.0))*((((1.0/2.0))*(CS_34*max_lambda_33 + CF_34) - 2*(CS_33*max_lambda_33 + CF_33) +
      ((3.0/2.0))*(CS_32*max_lambda_33 + CF_32))*(((1.0/2.0))*(CS_34*max_lambda_33 + CF_34) - 2*(CS_33*max_lambda_33 +
      CF_33) + ((3.0/2.0))*(CS_32*max_lambda_33 + CF_32))) + ((13.0/12.0))*((((1.0/2.0))*(CS_32*max_lambda_33 + CF_32) +
      ((1.0/2.0))*(CS_34*max_lambda_33 + CF_34) - (CS_33*max_lambda_33 + CF_33))*(((1.0/2.0))*(CS_32*max_lambda_33 +
      CF_32) + ((1.0/2.0))*(CS_34*max_lambda_33 + CF_34) - (CS_33*max_lambda_33 + CF_33)));

    beta_2 = ((1.0/4.0))*((((1.0/2.0))*(CS_30*max_lambda_33 + CF_30) - 2*(CS_31*max_lambda_33 + CF_31) +
      ((3.0/2.0))*(CS_32*max_lambda_33 + CF_32))*(((1.0/2.0))*(CS_30*max_lambda_33 + CF_30) - 2*(CS_31*max_lambda_33 +
      CF_31) + ((3.0/2.0))*(CS_32*max_lambda_33 + CF_32))) + ((13.0/12.0))*((((1.0/2.0))*(CS_30*max_lambda_33 + CF_30) +
      ((1.0/2.0))*(CS_32*max_lambda_33 + CF_32) - (CS_31*max_lambda_33 + CF_31))*(((1.0/2.0))*(CS_30*max_lambda_33 +
      CF_30) + ((1.0/2.0))*(CS_32*max_lambda_33 + CF_32) - (CS_31*max_lambda_33 + CF_31)));

    beta_3 = -(781.0/480.0)*(CS_34*max_lambda_33 + CF_34) - (781.0/1440.0)*(CS_32*max_lambda_33 + CF_32) +
      ((1.0/36.0))*((9*(CS_33*max_lambda_33 + CF_33) - (11.0/2.0)*(CS_32*max_lambda_33 + CF_32) -
      (9.0/2.0)*(CS_34*max_lambda_33 + CF_34) + CS_35*max_lambda_33 + CF_35)*(9*(CS_33*max_lambda_33 + CF_33) -
      (11.0/2.0)*(CS_32*max_lambda_33 + CF_32) - (9.0/2.0)*(CS_34*max_lambda_33 + CF_34) + CS_35*max_lambda_33 + CF_35))
      + ((13.0/12.0))*((2*(CS_34*max_lambda_33 + CF_34) - (5.0/2.0)*(CS_33*max_lambda_33 + CF_33) -
      (1.0/2.0)*(CS_35*max_lambda_33 + CF_35) + CS_32*max_lambda_33 + CF_32)*(2*(CS_34*max_lambda_33 + CF_34) -
      (5.0/2.0)*(CS_33*max_lambda_33 + CF_33) - (1.0/2.0)*(CS_35*max_lambda_33 + CF_35) + CS_32*max_lambda_33 + CF_32))
      + ((781.0/480.0))*(CS_33*max_lambda_33 + CF_33) + ((781.0/1440.0))*(CS_35*max_lambda_33 + CF_35);

   inv_beta_0 = 1.0/(eps + beta_0);

   inv_beta_1 = 1.0/(eps + beta_1);

   inv_beta_2 = 1.0/(eps + beta_2);

   inv_beta_3 = 1.0/(eps + beta_3);

    alpha_0 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0));

    alpha_1 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1));

    alpha_2 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2));

    alpha_3 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3));

   inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2 + alpha_3));

   delta_0 = ((alpha_0*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_1 = ((alpha_1*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_2 = ((alpha_2*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_3 = ((alpha_3*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

    inv_omega_sum = 1.0/((((3.0/10.0))*delta_1 + ((23.0/125.0))*delta_3 + ((27.0/500.0))*delta_2 +
      ((231.0/500.0))*delta_0));

    Recon_3 = ((3.0/10.0))*(-(1.0/12.0)*(CS_34*max_lambda_33 + CF_34) + ((1.0/6.0))*(CS_32*max_lambda_33 + CF_32) +
      ((5.0/12.0))*(CS_33*max_lambda_33 + CF_33))*delta_1*inv_omega_sum +
      ((23.0/125.0))*(-(5.0/24.0)*(CS_34*max_lambda_33 + CF_34) + ((1.0/8.0))*(CS_32*max_lambda_33 + CF_32) +
      ((1.0/24.0))*(CS_35*max_lambda_33 + CF_35) + ((13.0/24.0))*(CS_33*max_lambda_33 + CF_33))*delta_3*inv_omega_sum +
      ((27.0/500.0))*(-(7.0/12.0)*(CS_31*max_lambda_33 + CF_31) + ((1.0/6.0))*(CS_30*max_lambda_33 + CF_30) +
      ((11.0/12.0))*(CS_32*max_lambda_33 + CF_32))*delta_2*inv_omega_sum +
      ((231.0/500.0))*(-(1.0/12.0)*(CS_31*max_lambda_33 + CF_31) + ((1.0/6.0))*(CS_33*max_lambda_33 + CF_33) +
      ((5.0/12.0))*(CS_32*max_lambda_33 + CF_32))*delta_0*inv_omega_sum + Recon_3;

    beta_0 = ((1.0/4.0))*((((1.0/2.0))*(-CS_32*max_lambda_33 + CF_32) - (1.0/2.0)*(-CS_34*max_lambda_33 +
      CF_34))*(((1.0/2.0))*(-CS_32*max_lambda_33 + CF_32) - (1.0/2.0)*(-CS_34*max_lambda_33 + CF_34))) +
      ((13.0/12.0))*((((1.0/2.0))*(-CS_32*max_lambda_33 + CF_32) + ((1.0/2.0))*(-CS_34*max_lambda_33 + CF_34) -
      (-CS_33*max_lambda_33 + CF_33))*(((1.0/2.0))*(-CS_32*max_lambda_33 + CF_32) + ((1.0/2.0))*(-CS_34*max_lambda_33 +
      CF_34) - (-CS_33*max_lambda_33 + CF_33)));

    beta_1 = ((1.0/4.0))*((((1.0/2.0))*(-CS_31*max_lambda_33 + CF_31) - 2*(-CS_32*max_lambda_33 + CF_32) +
      ((3.0/2.0))*(-CS_33*max_lambda_33 + CF_33))*(((1.0/2.0))*(-CS_31*max_lambda_33 + CF_31) - 2*(-CS_32*max_lambda_33
      + CF_32) + ((3.0/2.0))*(-CS_33*max_lambda_33 + CF_33))) + ((13.0/12.0))*((((1.0/2.0))*(-CS_31*max_lambda_33 +
      CF_31) + ((1.0/2.0))*(-CS_33*max_lambda_33 + CF_33) - (-CS_32*max_lambda_33 +
      CF_32))*(((1.0/2.0))*(-CS_31*max_lambda_33 + CF_31) + ((1.0/2.0))*(-CS_33*max_lambda_33 + CF_33) -
      (-CS_32*max_lambda_33 + CF_32)));

    beta_2 = ((1.0/4.0))*((((1.0/2.0))*(-CS_35*max_lambda_33 + CF_35) - 2*(-CS_34*max_lambda_33 + CF_34) +
      ((3.0/2.0))*(-CS_33*max_lambda_33 + CF_33))*(((1.0/2.0))*(-CS_35*max_lambda_33 + CF_35) - 2*(-CS_34*max_lambda_33
      + CF_34) + ((3.0/2.0))*(-CS_33*max_lambda_33 + CF_33))) + ((13.0/12.0))*((((1.0/2.0))*(-CS_33*max_lambda_33 +
      CF_33) + ((1.0/2.0))*(-CS_35*max_lambda_33 + CF_35) - (-CS_34*max_lambda_33 +
      CF_34))*(((1.0/2.0))*(-CS_33*max_lambda_33 + CF_33) + ((1.0/2.0))*(-CS_35*max_lambda_33 + CF_35) -
      (-CS_34*max_lambda_33 + CF_34)));

    beta_3 = ((1.0/36.0))*((-(-CS_30*max_lambda_33 + CF_30) - 9*(-CS_32*max_lambda_33 + CF_32) +
      ((9.0/2.0))*(-CS_31*max_lambda_33 + CF_31) + ((11.0/2.0))*(-CS_33*max_lambda_33 + CF_33))*(-(-CS_30*max_lambda_33
      + CF_30) - 9*(-CS_32*max_lambda_33 + CF_32) + ((9.0/2.0))*(-CS_31*max_lambda_33 + CF_31) +
      ((11.0/2.0))*(-CS_33*max_lambda_33 + CF_33))) + ((13.0/12.0))*((2*(-CS_31*max_lambda_33 + CF_31) -
      (5.0/2.0)*(-CS_32*max_lambda_33 + CF_32) - (1.0/2.0)*(-CS_30*max_lambda_33 + CF_30) - CS_33*max_lambda_33 +
      CF_33)*(2*(-CS_31*max_lambda_33 + CF_31) - (5.0/2.0)*(-CS_32*max_lambda_33 + CF_32) -
      (1.0/2.0)*(-CS_30*max_lambda_33 + CF_30) - CS_33*max_lambda_33 + CF_33)) +
      ((781.0/720.0))*((((1.0/2.0))*(-CS_33*max_lambda_33 + CF_33) - (3.0/2.0)*(-CS_32*max_lambda_33 + CF_32) -
      (1.0/2.0)*(-CS_30*max_lambda_33 + CF_30) + ((3.0/2.0))*(-CS_31*max_lambda_33 +
      CF_31))*(((1.0/2.0))*(-CS_33*max_lambda_33 + CF_33) - (3.0/2.0)*(-CS_32*max_lambda_33 + CF_32) -
      (1.0/2.0)*(-CS_30*max_lambda_33 + CF_30) + ((3.0/2.0))*(-CS_31*max_lambda_33 + CF_31)));

   inv_beta_0 = 1.0/(eps + beta_0);

   inv_beta_1 = 1.0/(eps + beta_1);

   inv_beta_2 = 1.0/(eps + beta_2);

   inv_beta_3 = 1.0/(eps + beta_3);

    alpha_0 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0));

    alpha_1 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1));

    alpha_2 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2));

    alpha_3 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3));

   inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2 + alpha_3));

   delta_0 = ((alpha_0*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_1 = ((alpha_1*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_2 = ((alpha_2*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_3 = ((alpha_3*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

    inv_omega_sum = 1.0/((((3.0/10.0))*delta_1 + ((23.0/125.0))*delta_3 + ((27.0/500.0))*delta_2 +
      ((231.0/500.0))*delta_0));

    Recon_3 = ((3.0/10.0))*(-(1.0/12.0)*(-CS_31*max_lambda_33 + CF_31) + ((1.0/6.0))*(-CS_33*max_lambda_33 + CF_33) +
      ((5.0/12.0))*(-CS_32*max_lambda_33 + CF_32))*delta_1*inv_omega_sum +
      ((23.0/125.0))*(-(5.0/24.0)*(-CS_31*max_lambda_33 + CF_31) + ((1.0/8.0))*(-CS_33*max_lambda_33 + CF_33) +
      ((1.0/24.0))*(-CS_30*max_lambda_33 + CF_30) + ((13.0/24.0))*(-CS_32*max_lambda_33 + CF_32))*delta_3*inv_omega_sum
      + ((27.0/500.0))*(-(7.0/12.0)*(-CS_34*max_lambda_33 + CF_34) + ((1.0/6.0))*(-CS_35*max_lambda_33 + CF_35) +
      ((11.0/12.0))*(-CS_33*max_lambda_33 + CF_33))*delta_2*inv_omega_sum +
      ((231.0/500.0))*(-(1.0/12.0)*(-CS_34*max_lambda_33 + CF_34) + ((1.0/6.0))*(-CS_32*max_lambda_33 + CF_32) +
      ((5.0/12.0))*(-CS_33*max_lambda_33 + CF_33))*delta_0*inv_omega_sum + Recon_3;

    beta_0 = ((1.0/4.0))*((((1.0/2.0))*(CS_41*max_lambda_44 + CF_41) - (1.0/2.0)*(CS_43*max_lambda_44 +
      CF_43))*(((1.0/2.0))*(CS_41*max_lambda_44 + CF_41) - (1.0/2.0)*(CS_43*max_lambda_44 + CF_43))) +
      ((13.0/12.0))*((((1.0/2.0))*(CS_41*max_lambda_44 + CF_41) + ((1.0/2.0))*(CS_43*max_lambda_44 + CF_43) -
      (CS_42*max_lambda_44 + CF_42))*(((1.0/2.0))*(CS_41*max_lambda_44 + CF_41) + ((1.0/2.0))*(CS_43*max_lambda_44 +
      CF_43) - (CS_42*max_lambda_44 + CF_42)));

    beta_1 = ((1.0/4.0))*((((1.0/2.0))*(CS_44*max_lambda_44 + CF_44) - 2*(CS_43*max_lambda_44 + CF_43) +
      ((3.0/2.0))*(CS_42*max_lambda_44 + CF_42))*(((1.0/2.0))*(CS_44*max_lambda_44 + CF_44) - 2*(CS_43*max_lambda_44 +
      CF_43) + ((3.0/2.0))*(CS_42*max_lambda_44 + CF_42))) + ((13.0/12.0))*((((1.0/2.0))*(CS_42*max_lambda_44 + CF_42) +
      ((1.0/2.0))*(CS_44*max_lambda_44 + CF_44) - (CS_43*max_lambda_44 + CF_43))*(((1.0/2.0))*(CS_42*max_lambda_44 +
      CF_42) + ((1.0/2.0))*(CS_44*max_lambda_44 + CF_44) - (CS_43*max_lambda_44 + CF_43)));

    beta_2 = ((1.0/4.0))*((((1.0/2.0))*(CS_40*max_lambda_44 + CF_40) - 2*(CS_41*max_lambda_44 + CF_41) +
      ((3.0/2.0))*(CS_42*max_lambda_44 + CF_42))*(((1.0/2.0))*(CS_40*max_lambda_44 + CF_40) - 2*(CS_41*max_lambda_44 +
      CF_41) + ((3.0/2.0))*(CS_42*max_lambda_44 + CF_42))) + ((13.0/12.0))*((((1.0/2.0))*(CS_40*max_lambda_44 + CF_40) +
      ((1.0/2.0))*(CS_42*max_lambda_44 + CF_42) - (CS_41*max_lambda_44 + CF_41))*(((1.0/2.0))*(CS_40*max_lambda_44 +
      CF_40) + ((1.0/2.0))*(CS_42*max_lambda_44 + CF_42) - (CS_41*max_lambda_44 + CF_41)));

    beta_3 = -(781.0/480.0)*(CS_44*max_lambda_44 + CF_44) - (781.0/1440.0)*(CS_42*max_lambda_44 + CF_42) +
      ((1.0/36.0))*((9*(CS_43*max_lambda_44 + CF_43) - (11.0/2.0)*(CS_42*max_lambda_44 + CF_42) -
      (9.0/2.0)*(CS_44*max_lambda_44 + CF_44) + CS_45*max_lambda_44 + CF_45)*(9*(CS_43*max_lambda_44 + CF_43) -
      (11.0/2.0)*(CS_42*max_lambda_44 + CF_42) - (9.0/2.0)*(CS_44*max_lambda_44 + CF_44) + CS_45*max_lambda_44 + CF_45))
      + ((13.0/12.0))*((2*(CS_44*max_lambda_44 + CF_44) - (5.0/2.0)*(CS_43*max_lambda_44 + CF_43) -
      (1.0/2.0)*(CS_45*max_lambda_44 + CF_45) + CS_42*max_lambda_44 + CF_42)*(2*(CS_44*max_lambda_44 + CF_44) -
      (5.0/2.0)*(CS_43*max_lambda_44 + CF_43) - (1.0/2.0)*(CS_45*max_lambda_44 + CF_45) + CS_42*max_lambda_44 + CF_42))
      + ((781.0/480.0))*(CS_43*max_lambda_44 + CF_43) + ((781.0/1440.0))*(CS_45*max_lambda_44 + CF_45);

   inv_beta_0 = 1.0/(eps + beta_0);

   inv_beta_1 = 1.0/(eps + beta_1);

   inv_beta_2 = 1.0/(eps + beta_2);

   inv_beta_3 = 1.0/(eps + beta_3);

    alpha_0 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0));

    alpha_1 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1));

    alpha_2 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2));

    alpha_3 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3));

   inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2 + alpha_3));

   delta_0 = ((alpha_0*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_1 = ((alpha_1*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_2 = ((alpha_2*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_3 = ((alpha_3*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

    inv_omega_sum = 1.0/((((3.0/10.0))*delta_1 + ((23.0/125.0))*delta_3 + ((27.0/500.0))*delta_2 +
      ((231.0/500.0))*delta_0));

    Recon_4 = ((3.0/10.0))*(-(1.0/12.0)*(CS_44*max_lambda_44 + CF_44) + ((1.0/6.0))*(CS_42*max_lambda_44 + CF_42) +
      ((5.0/12.0))*(CS_43*max_lambda_44 + CF_43))*delta_1*inv_omega_sum +
      ((23.0/125.0))*(-(5.0/24.0)*(CS_44*max_lambda_44 + CF_44) + ((1.0/8.0))*(CS_42*max_lambda_44 + CF_42) +
      ((1.0/24.0))*(CS_45*max_lambda_44 + CF_45) + ((13.0/24.0))*(CS_43*max_lambda_44 + CF_43))*delta_3*inv_omega_sum +
      ((27.0/500.0))*(-(7.0/12.0)*(CS_41*max_lambda_44 + CF_41) + ((1.0/6.0))*(CS_40*max_lambda_44 + CF_40) +
      ((11.0/12.0))*(CS_42*max_lambda_44 + CF_42))*delta_2*inv_omega_sum +
      ((231.0/500.0))*(-(1.0/12.0)*(CS_41*max_lambda_44 + CF_41) + ((1.0/6.0))*(CS_43*max_lambda_44 + CF_43) +
      ((5.0/12.0))*(CS_42*max_lambda_44 + CF_42))*delta_0*inv_omega_sum + Recon_4;

    beta_0 = ((1.0/4.0))*((((1.0/2.0))*(-CS_42*max_lambda_44 + CF_42) - (1.0/2.0)*(-CS_44*max_lambda_44 +
      CF_44))*(((1.0/2.0))*(-CS_42*max_lambda_44 + CF_42) - (1.0/2.0)*(-CS_44*max_lambda_44 + CF_44))) +
      ((13.0/12.0))*((((1.0/2.0))*(-CS_42*max_lambda_44 + CF_42) + ((1.0/2.0))*(-CS_44*max_lambda_44 + CF_44) -
      (-CS_43*max_lambda_44 + CF_43))*(((1.0/2.0))*(-CS_42*max_lambda_44 + CF_42) + ((1.0/2.0))*(-CS_44*max_lambda_44 +
      CF_44) - (-CS_43*max_lambda_44 + CF_43)));

    beta_1 = ((1.0/4.0))*((((1.0/2.0))*(-CS_41*max_lambda_44 + CF_41) - 2*(-CS_42*max_lambda_44 + CF_42) +
      ((3.0/2.0))*(-CS_43*max_lambda_44 + CF_43))*(((1.0/2.0))*(-CS_41*max_lambda_44 + CF_41) - 2*(-CS_42*max_lambda_44
      + CF_42) + ((3.0/2.0))*(-CS_43*max_lambda_44 + CF_43))) + ((13.0/12.0))*((((1.0/2.0))*(-CS_41*max_lambda_44 +
      CF_41) + ((1.0/2.0))*(-CS_43*max_lambda_44 + CF_43) - (-CS_42*max_lambda_44 +
      CF_42))*(((1.0/2.0))*(-CS_41*max_lambda_44 + CF_41) + ((1.0/2.0))*(-CS_43*max_lambda_44 + CF_43) -
      (-CS_42*max_lambda_44 + CF_42)));

    beta_2 = ((1.0/4.0))*((((1.0/2.0))*(-CS_45*max_lambda_44 + CF_45) - 2*(-CS_44*max_lambda_44 + CF_44) +
      ((3.0/2.0))*(-CS_43*max_lambda_44 + CF_43))*(((1.0/2.0))*(-CS_45*max_lambda_44 + CF_45) - 2*(-CS_44*max_lambda_44
      + CF_44) + ((3.0/2.0))*(-CS_43*max_lambda_44 + CF_43))) + ((13.0/12.0))*((((1.0/2.0))*(-CS_43*max_lambda_44 +
      CF_43) + ((1.0/2.0))*(-CS_45*max_lambda_44 + CF_45) - (-CS_44*max_lambda_44 +
      CF_44))*(((1.0/2.0))*(-CS_43*max_lambda_44 + CF_43) + ((1.0/2.0))*(-CS_45*max_lambda_44 + CF_45) -
      (-CS_44*max_lambda_44 + CF_44)));

    beta_3 = ((1.0/36.0))*((-(-CS_40*max_lambda_44 + CF_40) - 9*(-CS_42*max_lambda_44 + CF_42) +
      ((9.0/2.0))*(-CS_41*max_lambda_44 + CF_41) + ((11.0/2.0))*(-CS_43*max_lambda_44 + CF_43))*(-(-CS_40*max_lambda_44
      + CF_40) - 9*(-CS_42*max_lambda_44 + CF_42) + ((9.0/2.0))*(-CS_41*max_lambda_44 + CF_41) +
      ((11.0/2.0))*(-CS_43*max_lambda_44 + CF_43))) + ((13.0/12.0))*((2*(-CS_41*max_lambda_44 + CF_41) -
      (5.0/2.0)*(-CS_42*max_lambda_44 + CF_42) - (1.0/2.0)*(-CS_40*max_lambda_44 + CF_40) - CS_43*max_lambda_44 +
      CF_43)*(2*(-CS_41*max_lambda_44 + CF_41) - (5.0/2.0)*(-CS_42*max_lambda_44 + CF_42) -
      (1.0/2.0)*(-CS_40*max_lambda_44 + CF_40) - CS_43*max_lambda_44 + CF_43)) +
      ((781.0/720.0))*((((1.0/2.0))*(-CS_43*max_lambda_44 + CF_43) - (3.0/2.0)*(-CS_42*max_lambda_44 + CF_42) -
      (1.0/2.0)*(-CS_40*max_lambda_44 + CF_40) + ((3.0/2.0))*(-CS_41*max_lambda_44 +
      CF_41))*(((1.0/2.0))*(-CS_43*max_lambda_44 + CF_43) - (3.0/2.0)*(-CS_42*max_lambda_44 + CF_42) -
      (1.0/2.0)*(-CS_40*max_lambda_44 + CF_40) + ((3.0/2.0))*(-CS_41*max_lambda_44 + CF_41)));

   inv_beta_0 = 1.0/(eps + beta_0);

   inv_beta_1 = 1.0/(eps + beta_1);

   inv_beta_2 = 1.0/(eps + beta_2);

   inv_beta_3 = 1.0/(eps + beta_3);

    alpha_0 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_0));

    alpha_1 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_1));

    alpha_2 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_2));

    alpha_3 = ((1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 +
      fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 -
      (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 +
      ((1.0/6.0))*beta_0 + ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3)*(1 + fabs(-beta_3 - (2.0/3.0)*beta_1 + ((1.0/6.0))*beta_0 +
      ((1.0/6.0))*beta_2)*inv_beta_3));

   inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2 + alpha_3));

   delta_0 = ((alpha_0*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_1 = ((alpha_1*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_2 = ((alpha_2*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_3 = ((alpha_3*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

    inv_omega_sum = 1.0/((((3.0/10.0))*delta_1 + ((23.0/125.0))*delta_3 + ((27.0/500.0))*delta_2 +
      ((231.0/500.0))*delta_0));

    Recon_4 = ((3.0/10.0))*(-(1.0/12.0)*(-CS_41*max_lambda_44 + CF_41) + ((1.0/6.0))*(-CS_43*max_lambda_44 + CF_43) +
      ((5.0/12.0))*(-CS_42*max_lambda_44 + CF_42))*delta_1*inv_omega_sum +
      ((23.0/125.0))*(-(5.0/24.0)*(-CS_41*max_lambda_44 + CF_41) + ((1.0/8.0))*(-CS_43*max_lambda_44 + CF_43) +
      ((1.0/24.0))*(-CS_40*max_lambda_44 + CF_40) + ((13.0/24.0))*(-CS_42*max_lambda_44 + CF_42))*delta_3*inv_omega_sum
      + ((27.0/500.0))*(-(7.0/12.0)*(-CS_44*max_lambda_44 + CF_44) + ((1.0/6.0))*(-CS_45*max_lambda_44 + CF_45) +
      ((11.0/12.0))*(-CS_43*max_lambda_44 + CF_43))*delta_2*inv_omega_sum +
      ((231.0/500.0))*(-(1.0/12.0)*(-CS_44*max_lambda_44 + CF_44) + ((1.0/6.0))*(-CS_42*max_lambda_44 + CF_42) +
      ((5.0/12.0))*(-CS_43*max_lambda_44 + CF_43))*delta_0*inv_omega_sum + Recon_4;

    wk5_B0(0,0,0) = AVG_1_D10*Recon_0*inv_AVG_met_fact + AVG_1_D11*Recon_1*inv_AVG_met_fact +
      0.707106781186547*AVG_1_rho*Recon_3*inv_AVG_a + 0.707106781186547*AVG_1_rho*Recon_4*inv_AVG_a;

    wk6_B0(0,0,0) = AVG_1_D10*AVG_1_u0*Recon_0*inv_AVG_met_fact + AVG_1_D11*AVG_1_rho*Recon_2*inv_AVG_met_fact +
      AVG_1_D11*AVG_1_u0*Recon_1*inv_AVG_met_fact + 0.707106781186547*(AVG_1_D10*AVG_1_a*inv_AVG_met_fact +
      AVG_1_u0)*AVG_1_rho*Recon_3*inv_AVG_a + 0.707106781186547*(-AVG_1_D10*AVG_1_a*inv_AVG_met_fact +
      AVG_1_u0)*AVG_1_rho*Recon_4*inv_AVG_a;

    wk7_B0(0,0,0) = AVG_1_D10*AVG_1_u1*Recon_0*inv_AVG_met_fact + AVG_1_D11*AVG_1_u1*Recon_1*inv_AVG_met_fact -
      AVG_1_D10*AVG_1_rho*Recon_2*inv_AVG_met_fact + 0.707106781186547*(AVG_1_D11*AVG_1_a*inv_AVG_met_fact +
      AVG_1_u1)*AVG_1_rho*Recon_3*inv_AVG_a + 0.707106781186547*(-AVG_1_D11*AVG_1_a*inv_AVG_met_fact +
      AVG_1_u1)*AVG_1_rho*Recon_4*inv_AVG_a;

    wk8_B0(0,0,0) = (AVG_1_D10*AVG_1_rho*inv_AVG_met_fact + AVG_1_D11*AVG_1_u2*inv_AVG_met_fact)*Recon_1 +
      (AVG_1_D10*AVG_1_u2*inv_AVG_met_fact - AVG_1_D11*AVG_1_rho*inv_AVG_met_fact)*Recon_0 +
      0.707106781186547*AVG_1_rho*AVG_1_u2*Recon_3*inv_AVG_a + 0.707106781186547*AVG_1_rho*AVG_1_u2*Recon_4*inv_AVG_a;

    wk9_B0(0,0,0) = (((1.0/2.0))*((AVG_1_u0*AVG_1_u0) + (AVG_1_u1*AVG_1_u1) +
      (AVG_1_u2*AVG_1_u2))*AVG_1_D10*inv_AVG_met_fact - AVG_1_D11*AVG_1_rho*AVG_1_u2*inv_AVG_met_fact)*Recon_0 +
      (((1.0/2.0))*((AVG_1_u0*AVG_1_u0) + (AVG_1_u1*AVG_1_u1) + (AVG_1_u2*AVG_1_u2))*AVG_1_D11*inv_AVG_met_fact +
      AVG_1_D10*AVG_1_rho*AVG_1_u2*inv_AVG_met_fact)*Recon_1 + (AVG_1_D11*AVG_1_u0*inv_AVG_met_fact -
      AVG_1_D10*AVG_1_u1*inv_AVG_met_fact)*AVG_1_rho*Recon_2 + 0.707106781186547*(((AVG_1_a*AVG_1_a) +
      ((1.0/2.0))*((AVG_1_u0*AVG_1_u0) + (AVG_1_u1*AVG_1_u1) + (AVG_1_u2*AVG_1_u2))*gamma_m1)*invgamma_m1 +
      (AVG_1_D10*AVG_1_u0*inv_AVG_met_fact + AVG_1_D11*AVG_1_u1*inv_AVG_met_fact)*AVG_1_a)*AVG_1_rho*Recon_3*inv_AVG_a +
      0.707106781186547*(((AVG_1_a*AVG_1_a) + ((1.0/2.0))*((AVG_1_u0*AVG_1_u0) + (AVG_1_u1*AVG_1_u1) +
      (AVG_1_u2*AVG_1_u2))*gamma_m1)*invgamma_m1 - (AVG_1_D10*AVG_1_u0*inv_AVG_met_fact +
      AVG_1_D11*AVG_1_u1*inv_AVG_met_fact)*AVG_1_a)*AVG_1_rho*Recon_4*inv_AVG_a;

}



__global__ void ops_opensbliblock00Kernel001(
double* __restrict arg0,
double* __restrict arg1,
double* __restrict arg2,
double* __restrict arg3,
double* __restrict arg4,
double* __restrict arg5,
double* __restrict arg6,
double* __restrict arg7,
double* __restrict arg8,
double* __restrict arg9,
double* __restrict arg10,
double* __restrict arg11,
double* __restrict arg12,
double* __restrict arg13,
double* __restrict arg14,
double* __restrict arg15,
double* __restrict arg16,
double* __restrict arg17,
double* __restrict arg18,
int size0,
int size1,
int size2 ){


  int idx_z = blockDim.z * blockIdx.z + threadIdx.z;
  int idx_y = blockDim.y * blockIdx.y + threadIdx.y;
  int idx_x = blockDim.x * blockIdx.x + threadIdx.x;

  arg0 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel001[0][0] + idx_z * 1*1 * dims_opensbliblock00Kernel001[0][0] * dims_opensbliblock00Kernel001[0][1];
  arg1 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel001[1][0] + idx_z * 1*1 * dims_opensbliblock00Kernel001[1][0] * dims_opensbliblock00Kernel001[1][1];
  arg2 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel001[2][0] + idx_z * 1*1 * dims_opensbliblock00Kernel001[2][0] * dims_opensbliblock00Kernel001[2][1];
  arg3 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel001[3][0] + idx_z * 1*1 * dims_opensbliblock00Kernel001[3][0] * dims_opensbliblock00Kernel001[3][1];
  arg4 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel001[4][0] + idx_z * 1*1 * dims_opensbliblock00Kernel001[4][0] * dims_opensbliblock00Kernel001[4][1];
  arg5 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel001[5][0] + idx_z * 1*1 * dims_opensbliblock00Kernel001[5][0] * dims_opensbliblock00Kernel001[5][1];
  arg6 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel001[6][0] + idx_z * 1*1 * dims_opensbliblock00Kernel001[6][0] * dims_opensbliblock00Kernel001[6][1];
  arg7 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel001[7][0] + idx_z * 1*1 * dims_opensbliblock00Kernel001[7][0] * dims_opensbliblock00Kernel001[7][1];
  arg8 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel001[8][0] + idx_z * 1*1 * dims_opensbliblock00Kernel001[8][0] * dims_opensbliblock00Kernel001[8][1];
  arg9 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel001[9][0] + idx_z * 1*1 * dims_opensbliblock00Kernel001[9][0] * dims_opensbliblock00Kernel001[9][1];
  arg10 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel001[10][0] + idx_z * 1*1 * dims_opensbliblock00Kernel001[10][0] * dims_opensbliblock00Kernel001[10][1];
  arg11 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel001[11][0] + idx_z * 1*1 * dims_opensbliblock00Kernel001[11][0] * dims_opensbliblock00Kernel001[11][1];
  arg12 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel001[12][0] + idx_z * 1*1 * dims_opensbliblock00Kernel001[12][0] * dims_opensbliblock00Kernel001[12][1];
  arg13 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel001[13][0] + idx_z * 1*1 * dims_opensbliblock00Kernel001[13][0] * dims_opensbliblock00Kernel001[13][1];
  arg14 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel001[14][0] + idx_z * 1*1 * dims_opensbliblock00Kernel001[14][0] * dims_opensbliblock00Kernel001[14][1];
  arg15 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel001[15][0] + idx_z * 1*1 * dims_opensbliblock00Kernel001[15][0] * dims_opensbliblock00Kernel001[15][1];
  arg16 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel001[16][0] + idx_z * 1*1 * dims_opensbliblock00Kernel001[16][0] * dims_opensbliblock00Kernel001[16][1];
  arg17 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel001[17][0] + idx_z * 1*1 * dims_opensbliblock00Kernel001[17][0] * dims_opensbliblock00Kernel001[17][1];
  arg18 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel001[18][0] + idx_z * 1*1 * dims_opensbliblock00Kernel001[18][0] * dims_opensbliblock00Kernel001[18][1];

  if (idx_x < size0 && idx_y < size1 && idx_z < size2) {
    const ACC<double> argp0(dims_opensbliblock00Kernel001[0][0], dims_opensbliblock00Kernel001[0][1], arg0);
    const ACC<double> argp1(dims_opensbliblock00Kernel001[1][0], dims_opensbliblock00Kernel001[1][1], arg1);
    const ACC<double> argp2(dims_opensbliblock00Kernel001[2][0], dims_opensbliblock00Kernel001[2][1], arg2);
    const ACC<double> argp3(dims_opensbliblock00Kernel001[3][0], dims_opensbliblock00Kernel001[3][1], arg3);
    const ACC<double> argp4(dims_opensbliblock00Kernel001[4][0], dims_opensbliblock00Kernel001[4][1], arg4);
    const ACC<double> argp5(dims_opensbliblock00Kernel001[5][0], dims_opensbliblock00Kernel001[5][1], arg5);
    const ACC<double> argp6(dims_opensbliblock00Kernel001[6][0], dims_opensbliblock00Kernel001[6][1], arg6);
    const ACC<double> argp7(dims_opensbliblock00Kernel001[7][0], dims_opensbliblock00Kernel001[7][1], arg7);
    const ACC<double> argp8(dims_opensbliblock00Kernel001[8][0], dims_opensbliblock00Kernel001[8][1], arg8);
    const ACC<double> argp9(dims_opensbliblock00Kernel001[9][0], dims_opensbliblock00Kernel001[9][1], arg9);
    const ACC<double> argp10(dims_opensbliblock00Kernel001[10][0], dims_opensbliblock00Kernel001[10][1], arg10);
    const ACC<double> argp11(dims_opensbliblock00Kernel001[11][0], dims_opensbliblock00Kernel001[11][1], arg11);
    const ACC<double> argp12(dims_opensbliblock00Kernel001[12][0], dims_opensbliblock00Kernel001[12][1], arg12);
    const ACC<double> argp13(dims_opensbliblock00Kernel001[13][0], dims_opensbliblock00Kernel001[13][1], arg13);
    ACC<double> argp14(dims_opensbliblock00Kernel001[14][0], dims_opensbliblock00Kernel001[14][1], arg14);
    ACC<double> argp15(dims_opensbliblock00Kernel001[15][0], dims_opensbliblock00Kernel001[15][1], arg15);
    ACC<double> argp16(dims_opensbliblock00Kernel001[16][0], dims_opensbliblock00Kernel001[16][1], arg16);
    ACC<double> argp17(dims_opensbliblock00Kernel001[17][0], dims_opensbliblock00Kernel001[17][1], arg17);
    ACC<double> argp18(dims_opensbliblock00Kernel001[18][0], dims_opensbliblock00Kernel001[18][1], arg18);
    opensbliblock00Kernel001_gpu(
     argp0, argp1, argp2, argp3, argp4,
     argp5, argp6, argp7, argp8, argp9,
     argp10, argp11, argp12, argp13, argp14,
     argp15, argp16, argp17, argp18);
  }

}

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel001(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11,
 ops_arg arg12, ops_arg arg13, ops_arg arg14, ops_arg arg15,
 ops_arg arg16, ops_arg arg17, ops_arg arg18) {
#else
void ops_par_loop_opensbliblock00Kernel001_execute(ops_kernel_descriptor *desc) {
  int dim = desc->dim;
  #if OPS_MPI
  ops_block block = desc->block;
  #endif
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  ops_arg arg9 = desc->args[9];
  ops_arg arg10 = desc->args[10];
  ops_arg arg11 = desc->args[11];
  ops_arg arg12 = desc->args[12];
  ops_arg arg13 = desc->args[13];
  ops_arg arg14 = desc->args[14];
  ops_arg arg15 = desc->args[15];
  ops_arg arg16 = desc->args[16];
  ops_arg arg17 = desc->args[17];
  ops_arg arg18 = desc->args[18];
  #endif

  //Timing
  double t1,t2,c1,c2;

  ops_arg args[19] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18};


  #if CHECKPOINTING && !OPS_LAZY
  if (!ops_checkpointing_before(args,19,range,22)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,22,"opensbliblock00Kernel001");
    block->instance->OPS_kernels[22].count++;
    ops_timers_core(&c1,&t1);
  }

  //compute locally allocated range for the sub-block
  int start[3];
  int end[3];

  #ifdef OPS_MPI
  int arg_idx[3];
  #endif
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<3; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 19,block, range, start, end, arg_idx) < 0) return;
  #endif

  int xdim0 = args[0].dat->size[0];
  int ydim0 = args[0].dat->size[1];
  int xdim1 = args[1].dat->size[0];
  int ydim1 = args[1].dat->size[1];
  int xdim2 = args[2].dat->size[0];
  int ydim2 = args[2].dat->size[1];
  int xdim3 = args[3].dat->size[0];
  int ydim3 = args[3].dat->size[1];
  int xdim4 = args[4].dat->size[0];
  int ydim4 = args[4].dat->size[1];
  int xdim5 = args[5].dat->size[0];
  int ydim5 = args[5].dat->size[1];
  int xdim6 = args[6].dat->size[0];
  int ydim6 = args[6].dat->size[1];
  int xdim7 = args[7].dat->size[0];
  int ydim7 = args[7].dat->size[1];
  int xdim8 = args[8].dat->size[0];
  int ydim8 = args[8].dat->size[1];
  int xdim9 = args[9].dat->size[0];
  int ydim9 = args[9].dat->size[1];
  int xdim10 = args[10].dat->size[0];
  int ydim10 = args[10].dat->size[1];
  int xdim11 = args[11].dat->size[0];
  int ydim11 = args[11].dat->size[1];
  int xdim12 = args[12].dat->size[0];
  int ydim12 = args[12].dat->size[1];
  int xdim13 = args[13].dat->size[0];
  int ydim13 = args[13].dat->size[1];
  int xdim14 = args[14].dat->size[0];
  int ydim14 = args[14].dat->size[1];
  int xdim15 = args[15].dat->size[0];
  int ydim15 = args[15].dat->size[1];
  int xdim16 = args[16].dat->size[0];
  int ydim16 = args[16].dat->size[1];
  int xdim17 = args[17].dat->size[0];
  int ydim17 = args[17].dat->size[1];
  int xdim18 = args[18].dat->size[0];
  int ydim18 = args[18].dat->size[1];

  if (xdim0 != dims_opensbliblock00Kernel001_h[0][0] || ydim0 != dims_opensbliblock00Kernel001_h[0][1] || xdim1 != dims_opensbliblock00Kernel001_h[1][0] || ydim1 != dims_opensbliblock00Kernel001_h[1][1] || xdim2 != dims_opensbliblock00Kernel001_h[2][0] || ydim2 != dims_opensbliblock00Kernel001_h[2][1] || xdim3 != dims_opensbliblock00Kernel001_h[3][0] || ydim3 != dims_opensbliblock00Kernel001_h[3][1] || xdim4 != dims_opensbliblock00Kernel001_h[4][0] || ydim4 != dims_opensbliblock00Kernel001_h[4][1] || xdim5 != dims_opensbliblock00Kernel001_h[5][0] || ydim5 != dims_opensbliblock00Kernel001_h[5][1] || xdim6 != dims_opensbliblock00Kernel001_h[6][0] || ydim6 != dims_opensbliblock00Kernel001_h[6][1] || xdim7 != dims_opensbliblock00Kernel001_h[7][0] || ydim7 != dims_opensbliblock00Kernel001_h[7][1] || xdim8 != dims_opensbliblock00Kernel001_h[8][0] || ydim8 != dims_opensbliblock00Kernel001_h[8][1] || xdim9 != dims_opensbliblock00Kernel001_h[9][0] || ydim9 != dims_opensbliblock00Kernel001_h[9][1] || xdim10 != dims_opensbliblock00Kernel001_h[10][0] || ydim10 != dims_opensbliblock00Kernel001_h[10][1] || xdim11 != dims_opensbliblock00Kernel001_h[11][0] || ydim11 != dims_opensbliblock00Kernel001_h[11][1] || xdim12 != dims_opensbliblock00Kernel001_h[12][0] || ydim12 != dims_opensbliblock00Kernel001_h[12][1] || xdim13 != dims_opensbliblock00Kernel001_h[13][0] || ydim13 != dims_opensbliblock00Kernel001_h[13][1] || xdim14 != dims_opensbliblock00Kernel001_h[14][0] || ydim14 != dims_opensbliblock00Kernel001_h[14][1] || xdim15 != dims_opensbliblock00Kernel001_h[15][0] || ydim15 != dims_opensbliblock00Kernel001_h[15][1] || xdim16 != dims_opensbliblock00Kernel001_h[16][0] || ydim16 != dims_opensbliblock00Kernel001_h[16][1] || xdim17 != dims_opensbliblock00Kernel001_h[17][0] || ydim17 != dims_opensbliblock00Kernel001_h[17][1] || xdim18 != dims_opensbliblock00Kernel001_h[18][0] || ydim18 != dims_opensbliblock00Kernel001_h[18][1]) {
    dims_opensbliblock00Kernel001_h[0][0] = xdim0;
    dims_opensbliblock00Kernel001_h[0][1] = ydim0;
    dims_opensbliblock00Kernel001_h[1][0] = xdim1;
    dims_opensbliblock00Kernel001_h[1][1] = ydim1;
    dims_opensbliblock00Kernel001_h[2][0] = xdim2;
    dims_opensbliblock00Kernel001_h[2][1] = ydim2;
    dims_opensbliblock00Kernel001_h[3][0] = xdim3;
    dims_opensbliblock00Kernel001_h[3][1] = ydim3;
    dims_opensbliblock00Kernel001_h[4][0] = xdim4;
    dims_opensbliblock00Kernel001_h[4][1] = ydim4;
    dims_opensbliblock00Kernel001_h[5][0] = xdim5;
    dims_opensbliblock00Kernel001_h[5][1] = ydim5;
    dims_opensbliblock00Kernel001_h[6][0] = xdim6;
    dims_opensbliblock00Kernel001_h[6][1] = ydim6;
    dims_opensbliblock00Kernel001_h[7][0] = xdim7;
    dims_opensbliblock00Kernel001_h[7][1] = ydim7;
    dims_opensbliblock00Kernel001_h[8][0] = xdim8;
    dims_opensbliblock00Kernel001_h[8][1] = ydim8;
    dims_opensbliblock00Kernel001_h[9][0] = xdim9;
    dims_opensbliblock00Kernel001_h[9][1] = ydim9;
    dims_opensbliblock00Kernel001_h[10][0] = xdim10;
    dims_opensbliblock00Kernel001_h[10][1] = ydim10;
    dims_opensbliblock00Kernel001_h[11][0] = xdim11;
    dims_opensbliblock00Kernel001_h[11][1] = ydim11;
    dims_opensbliblock00Kernel001_h[12][0] = xdim12;
    dims_opensbliblock00Kernel001_h[12][1] = ydim12;
    dims_opensbliblock00Kernel001_h[13][0] = xdim13;
    dims_opensbliblock00Kernel001_h[13][1] = ydim13;
    dims_opensbliblock00Kernel001_h[14][0] = xdim14;
    dims_opensbliblock00Kernel001_h[14][1] = ydim14;
    dims_opensbliblock00Kernel001_h[15][0] = xdim15;
    dims_opensbliblock00Kernel001_h[15][1] = ydim15;
    dims_opensbliblock00Kernel001_h[16][0] = xdim16;
    dims_opensbliblock00Kernel001_h[16][1] = ydim16;
    dims_opensbliblock00Kernel001_h[17][0] = xdim17;
    dims_opensbliblock00Kernel001_h[17][1] = ydim17;
    dims_opensbliblock00Kernel001_h[18][0] = xdim18;
    dims_opensbliblock00Kernel001_h[18][1] = ydim18;
    hipSafeCall(block->instance->ostream(), hipMemcpyToSymbol( dims_opensbliblock00Kernel001, dims_opensbliblock00Kernel001_h, sizeof(dims_opensbliblock00Kernel001)));
  }



  int x_size = MAX(0,end[0]-start[0]);
  int y_size = MAX(0,end[1]-start[1]);
  int z_size = MAX(0,end[2]-start[2]);

  dim3 grid( (x_size-1)/block->instance->OPS_block_size_x+ 1, (y_size-1)/block->instance->OPS_block_size_y + 1, (z_size-1)/block->instance->OPS_block_size_z +1);
  dim3 tblock(block->instance->OPS_block_size_x,block->instance->OPS_block_size_y,block->instance->OPS_block_size_z);



  long long int dat0 = (block->instance->OPS_soa ? args[0].dat->type_size : args[0].dat->elem_size);
  long long int dat1 = (block->instance->OPS_soa ? args[1].dat->type_size : args[1].dat->elem_size);
  long long int dat2 = (block->instance->OPS_soa ? args[2].dat->type_size : args[2].dat->elem_size);
  long long int dat3 = (block->instance->OPS_soa ? args[3].dat->type_size : args[3].dat->elem_size);
  long long int dat4 = (block->instance->OPS_soa ? args[4].dat->type_size : args[4].dat->elem_size);
  long long int dat5 = (block->instance->OPS_soa ? args[5].dat->type_size : args[5].dat->elem_size);
  long long int dat6 = (block->instance->OPS_soa ? args[6].dat->type_size : args[6].dat->elem_size);
  long long int dat7 = (block->instance->OPS_soa ? args[7].dat->type_size : args[7].dat->elem_size);
  long long int dat8 = (block->instance->OPS_soa ? args[8].dat->type_size : args[8].dat->elem_size);
  long long int dat9 = (block->instance->OPS_soa ? args[9].dat->type_size : args[9].dat->elem_size);
  long long int dat10 = (block->instance->OPS_soa ? args[10].dat->type_size : args[10].dat->elem_size);
  long long int dat11 = (block->instance->OPS_soa ? args[11].dat->type_size : args[11].dat->elem_size);
  long long int dat12 = (block->instance->OPS_soa ? args[12].dat->type_size : args[12].dat->elem_size);
  long long int dat13 = (block->instance->OPS_soa ? args[13].dat->type_size : args[13].dat->elem_size);
  long long int dat14 = (block->instance->OPS_soa ? args[14].dat->type_size : args[14].dat->elem_size);
  long long int dat15 = (block->instance->OPS_soa ? args[15].dat->type_size : args[15].dat->elem_size);
  long long int dat16 = (block->instance->OPS_soa ? args[16].dat->type_size : args[16].dat->elem_size);
  long long int dat17 = (block->instance->OPS_soa ? args[17].dat->type_size : args[17].dat->elem_size);
  long long int dat18 = (block->instance->OPS_soa ? args[18].dat->type_size : args[18].dat->elem_size);

  char *p_a[19];

  //set up initial pointers
  long long int base0 = args[0].dat->base_offset + 
           dat0 * 1 * (start[0] * args[0].stencil->stride[0]);
  base0 = base0+ dat0 *
    args[0].dat->size[0] *
    (start[1] * args[0].stencil->stride[1]);
  base0 = base0+ dat0 *
    args[0].dat->size[0] *
    args[0].dat->size[1] *
    (start[2] * args[0].stencil->stride[2]);
  p_a[0] = (char *)args[0].data_d + base0;

  long long int base1 = args[1].dat->base_offset + 
           dat1 * 1 * (start[0] * args[1].stencil->stride[0]);
  base1 = base1+ dat1 *
    args[1].dat->size[0] *
    (start[1] * args[1].stencil->stride[1]);
  base1 = base1+ dat1 *
    args[1].dat->size[0] *
    args[1].dat->size[1] *
    (start[2] * args[1].stencil->stride[2]);
  p_a[1] = (char *)args[1].data_d + base1;

  long long int base2 = args[2].dat->base_offset + 
           dat2 * 1 * (start[0] * args[2].stencil->stride[0]);
  base2 = base2+ dat2 *
    args[2].dat->size[0] *
    (start[1] * args[2].stencil->stride[1]);
  base2 = base2+ dat2 *
    args[2].dat->size[0] *
    args[2].dat->size[1] *
    (start[2] * args[2].stencil->stride[2]);
  p_a[2] = (char *)args[2].data_d + base2;

  long long int base3 = args[3].dat->base_offset + 
           dat3 * 1 * (start[0] * args[3].stencil->stride[0]);
  base3 = base3+ dat3 *
    args[3].dat->size[0] *
    (start[1] * args[3].stencil->stride[1]);
  base3 = base3+ dat3 *
    args[3].dat->size[0] *
    args[3].dat->size[1] *
    (start[2] * args[3].stencil->stride[2]);
  p_a[3] = (char *)args[3].data_d + base3;

  long long int base4 = args[4].dat->base_offset + 
           dat4 * 1 * (start[0] * args[4].stencil->stride[0]);
  base4 = base4+ dat4 *
    args[4].dat->size[0] *
    (start[1] * args[4].stencil->stride[1]);
  base4 = base4+ dat4 *
    args[4].dat->size[0] *
    args[4].dat->size[1] *
    (start[2] * args[4].stencil->stride[2]);
  p_a[4] = (char *)args[4].data_d + base4;

  long long int base5 = args[5].dat->base_offset + 
           dat5 * 1 * (start[0] * args[5].stencil->stride[0]);
  base5 = base5+ dat5 *
    args[5].dat->size[0] *
    (start[1] * args[5].stencil->stride[1]);
  base5 = base5+ dat5 *
    args[5].dat->size[0] *
    args[5].dat->size[1] *
    (start[2] * args[5].stencil->stride[2]);
  p_a[5] = (char *)args[5].data_d + base5;

  long long int base6 = args[6].dat->base_offset + 
           dat6 * 1 * (start[0] * args[6].stencil->stride[0]);
  base6 = base6+ dat6 *
    args[6].dat->size[0] *
    (start[1] * args[6].stencil->stride[1]);
  base6 = base6+ dat6 *
    args[6].dat->size[0] *
    args[6].dat->size[1] *
    (start[2] * args[6].stencil->stride[2]);
  p_a[6] = (char *)args[6].data_d + base6;

  long long int base7 = args[7].dat->base_offset + 
           dat7 * 1 * (start[0] * args[7].stencil->stride[0]);
  base7 = base7+ dat7 *
    args[7].dat->size[0] *
    (start[1] * args[7].stencil->stride[1]);
  base7 = base7+ dat7 *
    args[7].dat->size[0] *
    args[7].dat->size[1] *
    (start[2] * args[7].stencil->stride[2]);
  p_a[7] = (char *)args[7].data_d + base7;

  long long int base8 = args[8].dat->base_offset + 
           dat8 * 1 * (start[0] * args[8].stencil->stride[0]);
  base8 = base8+ dat8 *
    args[8].dat->size[0] *
    (start[1] * args[8].stencil->stride[1]);
  base8 = base8+ dat8 *
    args[8].dat->size[0] *
    args[8].dat->size[1] *
    (start[2] * args[8].stencil->stride[2]);
  p_a[8] = (char *)args[8].data_d + base8;

  long long int base9 = args[9].dat->base_offset + 
           dat9 * 1 * (start[0] * args[9].stencil->stride[0]);
  base9 = base9+ dat9 *
    args[9].dat->size[0] *
    (start[1] * args[9].stencil->stride[1]);
  base9 = base9+ dat9 *
    args[9].dat->size[0] *
    args[9].dat->size[1] *
    (start[2] * args[9].stencil->stride[2]);
  p_a[9] = (char *)args[9].data_d + base9;

  long long int base10 = args[10].dat->base_offset + 
           dat10 * 1 * (start[0] * args[10].stencil->stride[0]);
  base10 = base10+ dat10 *
    args[10].dat->size[0] *
    (start[1] * args[10].stencil->stride[1]);
  base10 = base10+ dat10 *
    args[10].dat->size[0] *
    args[10].dat->size[1] *
    (start[2] * args[10].stencil->stride[2]);
  p_a[10] = (char *)args[10].data_d + base10;

  long long int base11 = args[11].dat->base_offset + 
           dat11 * 1 * (start[0] * args[11].stencil->stride[0]);
  base11 = base11+ dat11 *
    args[11].dat->size[0] *
    (start[1] * args[11].stencil->stride[1]);
  base11 = base11+ dat11 *
    args[11].dat->size[0] *
    args[11].dat->size[1] *
    (start[2] * args[11].stencil->stride[2]);
  p_a[11] = (char *)args[11].data_d + base11;

  long long int base12 = args[12].dat->base_offset + 
           dat12 * 1 * (start[0] * args[12].stencil->stride[0]);
  base12 = base12+ dat12 *
    args[12].dat->size[0] *
    (start[1] * args[12].stencil->stride[1]);
  base12 = base12+ dat12 *
    args[12].dat->size[0] *
    args[12].dat->size[1] *
    (start[2] * args[12].stencil->stride[2]);
  p_a[12] = (char *)args[12].data_d + base12;

  long long int base13 = args[13].dat->base_offset + 
           dat13 * 1 * (start[0] * args[13].stencil->stride[0]);
  base13 = base13+ dat13 *
    args[13].dat->size[0] *
    (start[1] * args[13].stencil->stride[1]);
  base13 = base13+ dat13 *
    args[13].dat->size[0] *
    args[13].dat->size[1] *
    (start[2] * args[13].stencil->stride[2]);
  p_a[13] = (char *)args[13].data_d + base13;

  long long int base14 = args[14].dat->base_offset + 
           dat14 * 1 * (start[0] * args[14].stencil->stride[0]);
  base14 = base14+ dat14 *
    args[14].dat->size[0] *
    (start[1] * args[14].stencil->stride[1]);
  base14 = base14+ dat14 *
    args[14].dat->size[0] *
    args[14].dat->size[1] *
    (start[2] * args[14].stencil->stride[2]);
  p_a[14] = (char *)args[14].data_d + base14;

  long long int base15 = args[15].dat->base_offset + 
           dat15 * 1 * (start[0] * args[15].stencil->stride[0]);
  base15 = base15+ dat15 *
    args[15].dat->size[0] *
    (start[1] * args[15].stencil->stride[1]);
  base15 = base15+ dat15 *
    args[15].dat->size[0] *
    args[15].dat->size[1] *
    (start[2] * args[15].stencil->stride[2]);
  p_a[15] = (char *)args[15].data_d + base15;

  long long int base16 = args[16].dat->base_offset + 
           dat16 * 1 * (start[0] * args[16].stencil->stride[0]);
  base16 = base16+ dat16 *
    args[16].dat->size[0] *
    (start[1] * args[16].stencil->stride[1]);
  base16 = base16+ dat16 *
    args[16].dat->size[0] *
    args[16].dat->size[1] *
    (start[2] * args[16].stencil->stride[2]);
  p_a[16] = (char *)args[16].data_d + base16;

  long long int base17 = args[17].dat->base_offset + 
           dat17 * 1 * (start[0] * args[17].stencil->stride[0]);
  base17 = base17+ dat17 *
    args[17].dat->size[0] *
    (start[1] * args[17].stencil->stride[1]);
  base17 = base17+ dat17 *
    args[17].dat->size[0] *
    args[17].dat->size[1] *
    (start[2] * args[17].stencil->stride[2]);
  p_a[17] = (char *)args[17].data_d + base17;

  long long int base18 = args[18].dat->base_offset + 
           dat18 * 1 * (start[0] * args[18].stencil->stride[0]);
  base18 = base18+ dat18 *
    args[18].dat->size[0] *
    (start[1] * args[18].stencil->stride[1]);
  base18 = base18+ dat18 *
    args[18].dat->size[0] *
    args[18].dat->size[1] *
    (start[2] * args[18].stencil->stride[2]);
  p_a[18] = (char *)args[18].data_d + base18;


  #ifndef OPS_LAZY
  ops_H_D_exchanges_device(args, 19);
  ops_halo_exchanges(args,19,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[22].mpi_time += t2-t1;
  }


  //call kernel wrapper function, passing in pointers to data
  if (x_size > 0 && y_size > 0 && z_size > 0)
    ops_opensbliblock00Kernel001<<<grid, tblock >>> ( 
     (double *)p_a[0], (double *)p_a[1],
     (double *)p_a[2], (double *)p_a[3],
     (double *)p_a[4], (double *)p_a[5],
     (double *)p_a[6], (double *)p_a[7],
     (double *)p_a[8], (double *)p_a[9],
     (double *)p_a[10], (double *)p_a[11],
     (double *)p_a[12], (double *)p_a[13],
     (double *)p_a[14], (double *)p_a[15],
     (double *)p_a[16], (double *)p_a[17],
     (double *)p_a[18],
    x_size, y_size, z_size);

  hipSafeCall(block->instance->ostream(), hipGetLastError());

  if (block->instance->OPS_diags>1) {
    hipSafeCall(block->instance->ostream(), hipDeviceSynchronize());
    ops_timers_core(&c1,&t1);
    block->instance->OPS_kernels[22].time += t1-t2;
  }

  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 19);
  ops_set_halo_dirtybit3(&args[14],range);
  ops_set_halo_dirtybit3(&args[15],range);
  ops_set_halo_dirtybit3(&args[16],range);
  ops_set_halo_dirtybit3(&args[17],range);
  ops_set_halo_dirtybit3(&args[18],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[22].mpi_time += t2-t1;
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg7);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg8);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg9);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg10);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg11);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg12);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg13);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg14);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg15);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg16);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg17);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg18);
  }
}

#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel001(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11,
 ops_arg arg12, ops_arg arg13, ops_arg arg14, ops_arg arg15,
 ops_arg arg16, ops_arg arg17, ops_arg arg18) {
  ops_arg args[19] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18 };

  //create kernel descriptor and pass it to ops_enqueue_kernel
  create_kerneldesc_and_enque(name, args, 19, 22, dim, 1, range, block, ops_par_loop_opensbliblock00Kernel001_execute);
}
#endif
