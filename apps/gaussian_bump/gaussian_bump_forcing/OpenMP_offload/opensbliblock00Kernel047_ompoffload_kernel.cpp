//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel047(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5) {
#else
void ops_par_loop_opensbliblock00Kernel047_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[6] = { arg0, arg1, arg2, arg3, arg4, arg5};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,6,range,9)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,9,"opensbliblock00Kernel047");
    block->instance->OPS_kernels[9].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "opensbliblock00Kernel047");
  #endif


  //compute locally allocated range for the sub-block
  int start[2];
  int end[2];
  #if defined(OPS_MPI) && !defined(OPS_LAZY)
  int arg_idx[2];
  #endif
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<2; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 6,block, range, start, end, arg_idx) < 0) return;
  #endif

  int start0 = start[0];
  int end0 = end[0];
  int start1 = start[1];
  int end1 = end[1];


  //initialize global variable with the dimension of dats
  int xdim1_opensbliblock00Kernel047 = args[1].dat->size[0];
  int xdim2_opensbliblock00Kernel047 = args[2].dat->size[0];
  int xdim3_opensbliblock00Kernel047 = args[3].dat->size[0];
  int xdim4_opensbliblock00Kernel047 = args[4].dat->size[0];
  int xdim5_opensbliblock00Kernel047 = args[5].dat->size[0];

  //set up initial pointers and exchange halos if necessary


  int base1 = args[1].dat->base_offset;
  double * __restrict__ x0_B0_p = (double *)(args[1].data_d + base1);

  int base2 = args[2].dat->base_offset;
  double * __restrict__ rhoE_B0_p = (double *)(args[2].data_d + base2);

  int base3 = args[3].dat->base_offset;
  double * __restrict__ rho_B0_p = (double *)(args[3].data_d + base3);

  int base4 = args[4].dat->base_offset;
  double * __restrict__ rhou0_B0_p = (double *)(args[4].data_d + base4);

  int base5 = args[5].dat->base_offset;
  double * __restrict__ rhou1_B0_p = (double *)(args[5].data_d + base5);


  int *arg0h = (int *)args[0].data;

  int consts_bytes = 0;
  consts_bytes += ROUND_UP(args[0].dim*sizeof(int));

  reallocConstArrays(block->instance,consts_bytes);
  consts_bytes = 0;

  args[0].data = block->instance->OPS_consts_h + consts_bytes;
  args[0].data_d = block->instance->OPS_consts_d + consts_bytes;
  for ( int d=0; d<args[0].dim; d++ ){
    ((int *)args[0].data)[d] = arg0h[d];
  }
  consts_bytes += ROUND_UP(args[0].dim*sizeof(int));

  mvConstArraysToDevice(block->instance,consts_bytes);

  int * __restrict__ iter = (int *)args[0].data_d;

  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_device(args, 6);
  ops_halo_exchanges(args,6,range);
  ops_H_D_exchanges_device(args, 6);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[9].mpi_time += __t1-__t2;
  }

  #pragma omp target teams distribute parallel for collapse(2)
  for ( int n_y=start1; n_y<end1; n_y++ ){
    for ( int n_x=start0; n_x<end0; n_x++ ){
      const ACC<double> x0_B0(xdim1_opensbliblock00Kernel047, x0_B0_p + n_x*1 + n_y * xdim1_opensbliblock00Kernel047*1);
      ACC<double> rhoE_B0(xdim2_opensbliblock00Kernel047, rhoE_B0_p + n_x*1 + n_y * xdim2_opensbliblock00Kernel047*1);
      ACC<double> rho_B0(xdim3_opensbliblock00Kernel047, rho_B0_p + n_x*1 + n_y * xdim3_opensbliblock00Kernel047*1);
      ACC<double> rhou0_B0(xdim4_opensbliblock00Kernel047, rhou0_B0_p + n_x*1 + n_y * xdim4_opensbliblock00Kernel047*1);
      ACC<double> rhou1_B0(xdim5_opensbliblock00Kernel047, rhou1_B0_p + n_x*1 + n_y * xdim5_opensbliblock00Kernel047*1);
      
   double Pwall = 0.0;
   double T1 = 0.0;
   double T2 = 0.0;
   double T3 = 0.0;
   double T4 = 0.0;
   double T_above = 0.0;
   double rho_halo_1 = 0.0;
   double rho_halo_2 = 0.0;
   double rho_halo_3 = 0.0;
   double rho_halo_4 = 0.0;
   double u01 = 0.0;
   double u02 = 0.0;
   double u03 = 0.0;
   double u04 = 0.0;
   double u11 = 0.0;
   double u12 = 0.0;
   double u13 = 0.0;
   double u14 = 0.0;
   rhou1_B0(0,0) = tripA*rho_B0(0,0)*exp(-((-xts + x0_B0(0,0))*(-xts + x0_B0(0,0)))*k_0)*sin(dt*omega_0* *iter);

   rhou0_B0(0,0) = 0.0;

   rhoE_B0(0,0) = Twall*inv2Minf*rho_B0(0,0)/(gama*(-1.0 + gama));

    Pwall = (-1 + gama)*(-(((1.0/2.0))*(rhou0_B0(0,0)*rhou0_B0(0,0)) +
      ((1.0/2.0))*(rhou1_B0(0,0)*rhou1_B0(0,0)))/rho_B0(0,0) + rhoE_B0(0,0));

   u01 = rhou0_B0(0,1)/rho_B0(0,1);

   u02 = rhou0_B0(0,2)/rho_B0(0,2);

   u03 = rhou0_B0(0,3)/rho_B0(0,3);

   u04 = rhou0_B0(0,4)/rho_B0(0,4);

   u11 = rhou1_B0(0,1)/rho_B0(0,1);

   u12 = rhou1_B0(0,2)/rho_B0(0,2);

   u13 = rhou1_B0(0,3)/rho_B0(0,3);

   u14 = rhou1_B0(0,4)/rho_B0(0,4);

    T_above = (Minf*Minf)*(-1 + gama)*(-(((1.0/2.0))*(rhou0_B0(0,1)*rhou0_B0(0,1)) +
      ((1.0/2.0))*(rhou1_B0(0,1)*rhou1_B0(0,1)))/rho_B0(0,1) + rhoE_B0(0,1))*gama/rho_B0(0,1);

   T1 = -T_above + 2*Twall;

   T2 = -2*T_above + 3*Twall;

   T3 = -3*T_above + 4*Twall;

   T4 = -4*T_above + 5*Twall;

   rho_halo_1 = (Minf*Minf)*gama*Pwall/T1;

   rho_B0(0,-1) = rho_halo_1;

   rho_halo_2 = (Minf*Minf)*gama*Pwall/T2;

   rho_B0(0,-2) = rho_halo_2;

   rho_halo_3 = (Minf*Minf)*gama*Pwall/T3;

   rho_B0(0,-3) = rho_halo_3;

   rho_halo_4 = (Minf*Minf)*gama*Pwall/T4;

   rho_B0(0,-4) = rho_halo_4;

   rhou0_B0(0,-1) = -rho_halo_1*u01;

   rhou1_B0(0,-1) = -rho_halo_1*u11;

   rhou0_B0(0,-2) = -rho_halo_2*u02;

   rhou1_B0(0,-2) = -rho_halo_2*u12;

   rhou0_B0(0,-3) = -rho_halo_3*u03;

   rhou1_B0(0,-3) = -rho_halo_3*u13;

   rhou0_B0(0,-4) = -rho_halo_4*u04;

   rhou1_B0(0,-4) = -rho_halo_4*u14;

   rhoE_B0(0,-1) = inv_gamma_m1*Pwall + ((1.0/2.0))*((u01*u01) + (u11*u11))*rho_halo_1;

   rhoE_B0(0,-2) = inv_gamma_m1*Pwall + ((1.0/2.0))*((u02*u02) + (u12*u12))*rho_halo_2;

   rhoE_B0(0,-3) = inv_gamma_m1*Pwall + ((1.0/2.0))*((u03*u03) + (u13*u13))*rho_halo_3;

   rhoE_B0(0,-4) = inv_gamma_m1*Pwall + ((1.0/2.0))*((u04*u04) + (u14*u14))*rho_halo_4;


    }
  }
  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[9].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 6);
  ops_set_halo_dirtybit3(&args[2],range);
  ops_set_halo_dirtybit3(&args[3],range);
  ops_set_halo_dirtybit3(&args[4],range);
  ops_set_halo_dirtybit3(&args[5],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[9].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[9].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[9].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[9].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[9].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[9].transfer += ops_compute_transfer(dim, start, end, &arg5);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel047(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5) {
  ops_arg args[6] = { arg0, arg1, arg2, arg3, arg4, arg5 };

  //create kernel descriptor and pass it to ops_enqueue_kernel
  create_kerneldesc_and_enque(name, args, 6, 9, dim, 0, range, block, ops_par_loop_opensbliblock00Kernel047_execute);
}
#endif
