//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel066(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6) {
#else
void ops_par_loop_opensbliblock00Kernel066_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[7] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,7,range,0)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,0,"opensbliblock00Kernel066");
    block->instance->OPS_kernels[0].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "opensbliblock00Kernel066");
  #endif


  //compute locally allocated range for the sub-block
  int start[2];
  int end[2];
  int arg_idx[2];
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<2; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 7,block, range, start, end, arg_idx) < 0) return;
  #endif

  #if defined(OPS_MPI)
  #if defined(OPS_LAZY)
  sub_block_list sb = OPS_sub_block_list[block->index];
  arg_idx[0] = sb->decomp_disp[0];
  arg_idx[1] = sb->decomp_disp[1];
  #else
  arg_idx[0] -= start[0];
  arg_idx[1] -= start[1];
  #endif
  #else //OPS_MPI
  arg_idx[0] = 0;
  arg_idx[1] = 0;
  #endif //OPS_MPI

  //initialize global variable with the dimension of dats
  int xdim0_opensbliblock00Kernel066 = args[0].dat->size[0];
  int xdim1_opensbliblock00Kernel066 = args[1].dat->size[0];
  int xdim2_opensbliblock00Kernel066 = args[2].dat->size[0];
  int xdim3_opensbliblock00Kernel066 = args[3].dat->size[0];
  int xdim4_opensbliblock00Kernel066 = args[4].dat->size[0];
  int xdim5_opensbliblock00Kernel066 = args[5].dat->size[0];

  //set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset;
  double * __restrict__ rhoE_B0_p = (double *)(args[0].data + base0);

  int base1 = args[1].dat->base_offset;
  double * __restrict__ rho_B0_p = (double *)(args[1].data + base1);

  int base2 = args[2].dat->base_offset;
  double * __restrict__ rhou0_B0_p = (double *)(args[2].data + base2);

  int base3 = args[3].dat->base_offset;
  double * __restrict__ rhou1_B0_p = (double *)(args[3].data + base3);

  int base4 = args[4].dat->base_offset;
  double * __restrict__ x1_B0_p = (double *)(args[4].data + base4);

  int base5 = args[5].dat->base_offset;
  double * __restrict__ x0_B0_p = (double *)(args[5].data + base5);




  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_host(args, 7);
  ops_halo_exchanges(args,7,range);
  ops_H_D_exchanges_host(args, 7);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[0].mpi_time += __t1-__t2;
  }

  #pragma omp parallel for
  for ( int n_y=start[1]; n_y<end[1]; n_y++ ){
    #ifdef __INTEL_COMPILER
    #pragma loop_count(10000)
    #pragma omp simd
    #elif defined(__clang__)
    #pragma clang loop vectorize(assume_safety)
    #elif defined(__GNUC__)
    #pragma GCC ivdep
    #else
    #pragma simd
    #endif
    for ( int n_x=start[0]; n_x<end[0]; n_x++ ){
      int idx[] = {arg_idx[0]+n_x, arg_idx[1]+n_y};
      ACC<double> rhoE_B0(xdim0_opensbliblock00Kernel066, rhoE_B0_p + n_x*1 + n_y * xdim0_opensbliblock00Kernel066*1);
      ACC<double> rho_B0(xdim1_opensbliblock00Kernel066, rho_B0_p + n_x*1 + n_y * xdim1_opensbliblock00Kernel066*1);
      ACC<double> rhou0_B0(xdim2_opensbliblock00Kernel066, rhou0_B0_p + n_x*1 + n_y * xdim2_opensbliblock00Kernel066*1);
      ACC<double> rhou1_B0(xdim3_opensbliblock00Kernel066, rhou1_B0_p + n_x*1 + n_y * xdim3_opensbliblock00Kernel066*1);
      ACC<double> x1_B0(xdim4_opensbliblock00Kernel066, x1_B0_p + n_x*1 + n_y * xdim4_opensbliblock00Kernel066*1);
      ACC<double> x0_B0(xdim5_opensbliblock00Kernel066, x0_B0_p + n_x*1 + n_y * xdim5_opensbliblock00Kernel066*1);
      
   double xbump4 = 0.0;
   double arg2 = 0.0;
   double rhou1 = 0.0;
   double xbump1 = 0.0;
   double y0 = 0.0;
   double xbump3 = 0.0;
   double rhou0 = 0.0;
   double arg5 = 0.0;
   double arg3 = 0.0;
   double rho = 0.0;
   double xbump6 = 0.0;
   double arg1 = 0.0;
   double arg4 = 0.0;
   double xbump5 = 0.0;
   double xbump2 = 0.0;
   double eta = 0.0;
   double T = 0.0;
   x0_B0(0,0) = Delta0block0*idx[0];

   xbump1 = 0.141871428571429*lx;

   xbump2 = 0.143871428571429*lx;

   xbump3 = 0.366971428571429*lx;

   xbump4 = 0.4091*lx;

   xbump5 = 0.548757142857143*lx;

   xbump6 = 0.555357142857143*lx;

   arg1 = 20.0*sin(M_PI*(1.5 - 0.0222222222222222*(-xbump1 + x0_B0(0,0) + 0.01)/(-xbump1 + xbump2))) + 20.0;

   arg2 = 0.05 + 10.92*(-xbump2 + x0_B0(0,0))/(-xbump2 + xbump3);

   arg3 = 1.18483289645568*sqrt(-pow(-xbump4 + x0_B0(0,0) + 0.01, 2) + 250000.0) - 580.416448227841;

   arg4 = sqrt(-pow(-xbump4 + x0_B0(0,0) - 0.01, 2) + 178649.9289) - 410.67;

   arg5 = 20.0*sin(M_PI*(1.425715 + 0.074285*(-xbump5 + x0_B0(0,0) + 0.01)/(-xbump5 + xbump6))) + 20.0;

    y0 = ((x0_B0(0,0) < xbump1) ? (
   0.0
)
: ((x0_B0(0,0) >= xbump1 && x0_B0(0,0) <
      xbump2) ? (
   arg1
)
: ((x0_B0(0,0) >= xbump2 && x0_B0(0,0) < xbump3) ? (
   arg2
)
:
      ((x0_B0(0,0) >= xbump3 && x0_B0(0,0) < xbump4) ? (
   arg3
)
: ((x0_B0(0,0) >=
      xbump4 && x0_B0(0,0) < xbump5) ? (
   arg4
)
: ((x0_B0(0,0) >= xbump5 && x0_B0(0,0)
      < xbump6) ? (
   arg5
)
: (
   0.0
)))))));

   eta = 1.0*idx[1]/(block0np1 - 1);

   x1_B0(0,0) = y0 + 0.0824835616570444*(-y0 + 700.0)*sinh(3.19*eta);

    rhou0 = ((x1_B0(0,0) < 3.47434743474347) ? (
   2.3555492777611e-22*pow(x1_B0(0,0), 50) -
      2.00935744152354e-21*pow(x1_B0(0,0), 49) + 5.56132977621397e-22*pow(x1_B0(0,0), 48) +
      1.76715088906924e-20*pow(x1_B0(0,0), 47) + 4.27794832987129e-20*pow(x1_B0(0,0), 46) -
      3.04089545826647e-20*pow(x1_B0(0,0), 45) - 5.69010318695979e-19*pow(x1_B0(0,0), 44) -
      2.10089699572831e-18*pow(x1_B0(0,0), 43) - 3.20005903751066e-18*pow(x1_B0(0,0), 42) +
      8.56002881776995e-18*pow(x1_B0(0,0), 41) + 7.78516249047705e-17*pow(x1_B0(0,0), 40) +
      2.86638559964255e-16*pow(x1_B0(0,0), 39) + 5.37598576202624e-16*pow(x1_B0(0,0), 38) -
      6.17393007973971e-16*pow(x1_B0(0,0), 37) - 9.50677069522702e-15*pow(x1_B0(0,0), 36) -
      4.1822231440021e-14*pow(x1_B0(0,0), 35) - 1.03685516151979e-13*pow(x1_B0(0,0), 34) -
      3.79864274570734e-14*pow(x1_B0(0,0), 33) + 1.04940578786992e-12*pow(x1_B0(0,0), 32) +
      5.89366906826062e-12*pow(x1_B0(0,0), 31) + 1.76772429782625e-11*pow(x1_B0(0,0), 30) +
      1.89469495194353e-11*pow(x1_B0(0,0), 29) - 1.19128651698976e-10*pow(x1_B0(0,0), 28) -
      8.29563232382128e-10*pow(x1_B0(0,0), 27) - 2.65168942457028e-9*pow(x1_B0(0,0), 26) -
      2.75186414593423e-9*pow(x1_B0(0,0), 25) + 1.94024691559566e-8*pow(x1_B0(0,0), 24) +
      1.24222622336016e-7*pow(x1_B0(0,0), 23) + 3.23932608424406e-7*pow(x1_B0(0,0), 22) -
      1.10429555878606e-7*pow(x1_B0(0,0), 21) - 4.43734433122466e-6*pow(x1_B0(0,0), 20) -
      1.62564132709003e-5*pow(x1_B0(0,0), 19) - 6.1354732571988e-6*pow(x1_B0(0,0), 18) +
      0.000176987525519087*pow(x1_B0(0,0), 17) + 0.000613828400710496*pow(x1_B0(0,0), 16) -
      0.000526665419777598*pow(x1_B0(0,0), 15) - 0.00843666727267235*pow(x1_B0(0,0), 14) -
      0.00594411137351235*pow(x1_B0(0,0), 13) + 0.0952129739882658*pow(x1_B0(0,0), 12) +
      0.0357543185172109*pow(x1_B0(0,0), 11) - 1.15749221486844*pow(x1_B0(0,0), 10) +
      3.37722054657068*pow(x1_B0(0,0), 9) - 5.1654697631693*pow(x1_B0(0,0), 8) +
      4.91129010741448*pow(x1_B0(0,0), 7) - 3.05403724529565*pow(x1_B0(0,0), 6) +
      1.24982177727222*pow(x1_B0(0,0), 5) - 0.340808475086283*pow(x1_B0(0,0), 4) +
      0.137515271370201*pow(x1_B0(0,0), 3) - 0.00379046822573778*pow(x1_B0(0,0), 2) +
      0.423487432074122*x1_B0(0,0) - 9.41967207151553e-7
)
: (
   0.999999408078923
));

    rhou1 = ((x1_B0(0,0) < 3.47434743474347) ? (
   2.04977269913921e-24*pow(x1_B0(0,0), 50) -
      1.79775123703858e-23*pow(x1_B0(0,0), 49) + 7.30722268349409e-24*pow(x1_B0(0,0), 48) +
      1.61983130576052e-22*pow(x1_B0(0,0), 47) + 3.62698294764969e-22*pow(x1_B0(0,0), 46) -
      4.04728027772141e-22*pow(x1_B0(0,0), 45) - 5.41685389194329e-21*pow(x1_B0(0,0), 44) -
      1.86040864285084e-20*pow(x1_B0(0,0), 43) - 2.34064195004721e-20*pow(x1_B0(0,0), 42) +
      1.0085807350287e-19*pow(x1_B0(0,0), 41) + 7.55642864070626e-19*pow(x1_B0(0,0), 40) +
      2.56312801754187e-18*pow(x1_B0(0,0), 39) + 4.03189791972121e-18*pow(x1_B0(0,0), 38) -
      9.73685458285705e-18*pow(x1_B0(0,0), 37) - 9.79601941752609e-17*pow(x1_B0(0,0), 36) -
      3.90041122889951e-16*pow(x1_B0(0,0), 35) - 8.46289730226912e-16*pow(x1_B0(0,0), 34) +
      3.15295773922618e-16*pow(x1_B0(0,0), 33) + 1.19210603243445e-14*pow(x1_B0(0,0), 32) +
      5.79977701286289e-14*pow(x1_B0(0,0), 31) + 1.53595283896047e-13*pow(x1_B0(0,0), 30) +
      7.55886671802599e-14*pow(x1_B0(0,0), 29) - 1.5094851784842e-12*pow(x1_B0(0,0), 28) -
      8.53783906688642e-12*pow(x1_B0(0,0), 27) - 2.3713763057742e-11*pow(x1_B0(0,0), 26) -
      9.82450085056844e-12*pow(x1_B0(0,0), 25) + 2.4835383975929e-10*pow(x1_B0(0,0), 24) +
      1.28570281846189e-9*pow(x1_B0(0,0), 23) + 2.74837094494519e-9*pow(x1_B0(0,0), 22) -
      3.9969620046783e-9*pow(x1_B0(0,0), 21) - 5.12347181647717e-8*pow(x1_B0(0,0), 20) -
      1.55027498910381e-7*pow(x1_B0(0,0), 19) + 5.89608876885765e-8*pow(x1_B0(0,0), 18) +
      2.13706356045406e-6*pow(x1_B0(0,0), 17) + 5.87745466240295e-6*pow(x1_B0(0,0), 16) -
      1.08238209371553e-5*pow(x1_B0(0,0), 15) - 9.5722485758595e-5*pow(x1_B0(0,0), 14) -
      1.16747884886639e-5*pow(x1_B0(0,0), 13) + 0.00115911468572085*pow(x1_B0(0,0), 12) -
      0.000165960282294848*pow(x1_B0(0,0), 11) - 0.0137491649429534*pow(x1_B0(0,0), 10) +
      0.0454239388512141*pow(x1_B0(0,0), 9) - 0.075904986054308*pow(x1_B0(0,0), 8) +
      0.0783288262990308*pow(x1_B0(0,0), 7) - 0.0527140169336367*pow(x1_B0(0,0), 6) +
      0.0232144020804661*pow(x1_B0(0,0), 5) - 0.00621867376354228*pow(x1_B0(0,0), 4) +
      0.00111550023929091*pow(x1_B0(0,0), 3) + 0.00103472212157645*pow(x1_B0(0,0), 2) +
      3.94220534466137e-6*x1_B0(0,0) - 3.63327668197158e-8
)
: (
   0.00536716146499162
));

    T = ((x1_B0(0,0) < 3.47434743474347) ? (
   -3.73061876952194e-23*pow(x1_B0(0,0), 50) +
      3.02359004140933e-22*pow(x1_B0(0,0), 49) - 7.07249669257882e-24*pow(x1_B0(0,0), 48) -
      2.53606686749876e-21*pow(x1_B0(0,0), 47) - 7.11708893366916e-21*pow(x1_B0(0,0), 46) +
      2.00313598822224e-22*pow(x1_B0(0,0), 45) + 7.52115337522613e-20*pow(x1_B0(0,0), 44) +
      3.24393929242347e-19*pow(x1_B0(0,0), 43) + 6.59237386827232e-19*pow(x1_B0(0,0), 42) -
      4.86363354044092e-19*pow(x1_B0(0,0), 41) - 9.84138178764639e-18*pow(x1_B0(0,0), 40) -
      4.36436982884742e-17*pow(x1_B0(0,0), 39) - 1.08161915263698e-16*pow(x1_B0(0,0), 38) -
      4.86888191265591e-17*pow(x1_B0(0,0), 37) + 1.01293721678769e-15*pow(x1_B0(0,0), 36) +
      5.85606755194866e-15*pow(x1_B0(0,0), 35) + 1.86796743416999e-14*pow(x1_B0(0,0), 34) +
      2.84082766458035e-14*pow(x1_B0(0,0), 33) - 7.36876583429846e-14*pow(x1_B0(0,0), 32) -
      7.2458403897293e-13*pow(x1_B0(0,0), 31) - 2.8876553711809e-12*pow(x1_B0(0,0), 30) -
      6.23242767688354e-12*pow(x1_B0(0,0), 29) + 2.76991168496541e-12*pow(x1_B0(0,0), 28) +
      8.91073005719208e-11*pow(x1_B0(0,0), 27) + 4.12951994238752e-10*pow(x1_B0(0,0), 26) +
      9.62144378408451e-10*pow(x1_B0(0,0), 25) - 3.19671297599922e-10*pow(x1_B0(0,0), 24) -
      1.30815868835258e-8*pow(x1_B0(0,0), 23) - 5.63174875122123e-8*pow(x1_B0(0,0), 22) -
      9.40870600134967e-8*pow(x1_B0(0,0), 21) + 2.68015550395405e-7*pow(x1_B0(0,0), 20) +
      2.20028500618131e-6*pow(x1_B0(0,0), 19) + 5.26405704077908e-6*pow(x1_B0(0,0), 18) -
      6.87033316645359e-6*pow(x1_B0(0,0), 17) - 8.18097963380289e-5*pow(x1_B0(0,0), 16) -
      0.000150182995287043*pow(x1_B0(0,0), 15) + 0.000546556514231602*pow(x1_B0(0,0), 14) +
      0.00248793100317704*pow(x1_B0(0,0), 13) - 0.00313487325891606*pow(x1_B0(0,0), 12) -
      0.0233427405115097*pow(x1_B0(0,0), 11) + 0.0513779963692559*pow(x1_B0(0,0), 10) +
      0.0387069194356651*pow(x1_B0(0,0), 9) - 0.284700199848964*pow(x1_B0(0,0), 8) +
      0.486109994170276*pow(x1_B0(0,0), 7) - 0.4425160760866*pow(x1_B0(0,0), 6) +
      0.274555059341105*pow(x1_B0(0,0), 5) - 0.10530401015664*pow(x1_B0(0,0), 4) +
      0.016295290641699*pow(x1_B0(0,0), 3) - 0.291761620917306*pow(x1_B0(0,0), 2) +
      7.47704449521701e-5*x1_B0(0,0) + 1.67619323517671
)
: (
   1.00000058834432
));

   rho = 1.0/T;

   rho_B0(0,0) = rho;

   rhou0_B0(0,0) = rhou0;

   rhou1_B0(0,0) = rhou1;

   rhoE_B0(0,0) = rcinv4*rcinv5*rcinv6*T*rho + (0.5*pow(rhou0, 2) + 0.5*pow(rhou1, 2))/rho;


    }
  }
  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[0].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_host(args, 7);
  ops_set_halo_dirtybit3(&args[0],range);
  ops_set_halo_dirtybit3(&args[1],range);
  ops_set_halo_dirtybit3(&args[2],range);
  ops_set_halo_dirtybit3(&args[3],range);
  ops_set_halo_dirtybit3(&args[4],range);
  ops_set_halo_dirtybit3(&args[5],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[0].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg5);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel066(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)calloc(1,sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 0;
  desc->index = 0;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 0;
  for ( int i=0; i<4; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 7;
  desc->args = (ops_arg*)ops_malloc(7*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg2.dat->index;
  desc->args[3] = arg3;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg3.dat->index;
  desc->args[4] = arg4;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg4.dat->index;
  desc->args[5] = arg5;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg5.dat->index;
  desc->args[6] = arg6;
  desc->function = ops_par_loop_opensbliblock00Kernel066_execute;
  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,0,"opensbliblock00Kernel066");
  }
  ops_enqueue_kernel(desc);
}
#endif
