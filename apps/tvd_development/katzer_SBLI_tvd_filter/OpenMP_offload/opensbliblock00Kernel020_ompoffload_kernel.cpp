//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel020(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11,
 ops_arg arg12, ops_arg arg13, ops_arg arg14, ops_arg arg15,
 ops_arg arg16) {
#else
void ops_par_loop_opensbliblock00Kernel020_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  ops_arg arg9 = desc->args[9];
  ops_arg arg10 = desc->args[10];
  ops_arg arg11 = desc->args[11];
  ops_arg arg12 = desc->args[12];
  ops_arg arg13 = desc->args[13];
  ops_arg arg14 = desc->args[14];
  ops_arg arg15 = desc->args[15];
  ops_arg arg16 = desc->args[16];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[17] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,17,range,22)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,22,"opensbliblock00Kernel020");
    block->instance->OPS_kernels[22].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "opensbliblock00Kernel020");
  #endif


  //compute locally allocated range for the sub-block
  int start[2];
  int end[2];
  int arg_idx[2];
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<2; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 17,block, range, start, end, arg_idx) < 0) return;
  #endif

  int start0 = start[0];
  int end0 = end[0];
  int start1 = start[1];
  int end1 = end[1];

  #if defined(OPS_MPI)
  #if defined(OPS_LAZY)
  sub_block_list sb = OPS_sub_block_list[block->index];
  arg_idx[0] = sb->decomp_disp[0];
  arg_idx[1] = sb->decomp_disp[1];
  #else
  arg_idx[0] -= start[0];
  arg_idx[1] -= start[1];
  #endif
  #else //OPS_MPI
  arg_idx[0] = 0;
  arg_idx[1] = 0;
  #endif //OPS_MPI

  //initialize global variable with the dimension of dats
  int xdim0_opensbliblock00Kernel020 = args[0].dat->size[0];
  int xdim1_opensbliblock00Kernel020 = args[1].dat->size[0];
  int xdim2_opensbliblock00Kernel020 = args[2].dat->size[0];
  int xdim3_opensbliblock00Kernel020 = args[3].dat->size[0];
  int xdim4_opensbliblock00Kernel020 = args[4].dat->size[0];
  int xdim5_opensbliblock00Kernel020 = args[5].dat->size[0];
  int xdim6_opensbliblock00Kernel020 = args[6].dat->size[0];
  int xdim7_opensbliblock00Kernel020 = args[7].dat->size[0];
  int xdim8_opensbliblock00Kernel020 = args[8].dat->size[0];
  int xdim9_opensbliblock00Kernel020 = args[9].dat->size[0];
  int xdim10_opensbliblock00Kernel020 = args[10].dat->size[0];
  int xdim11_opensbliblock00Kernel020 = args[11].dat->size[0];
  int xdim12_opensbliblock00Kernel020 = args[12].dat->size[0];
  int xdim13_opensbliblock00Kernel020 = args[13].dat->size[0];
  int xdim14_opensbliblock00Kernel020 = args[14].dat->size[0];
  int xdim15_opensbliblock00Kernel020 = args[15].dat->size[0];

  //set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset;
  double * __restrict__ D11_B0_p = (double *)(args[0].data_d + base0);

  int base1 = args[1].dat->base_offset;
  double * __restrict__ p_B0_p = (double *)(args[1].data_d + base1);

  int base2 = args[2].dat->base_offset;
  double * __restrict__ rhoE_B0_p = (double *)(args[2].data_d + base2);

  int base3 = args[3].dat->base_offset;
  double * __restrict__ rho_B0_p = (double *)(args[3].data_d + base3);

  int base4 = args[4].dat->base_offset;
  double * __restrict__ rhou0_B0_p = (double *)(args[4].data_d + base4);

  int base5 = args[5].dat->base_offset;
  double * __restrict__ rhou1_B0_p = (double *)(args[5].data_d + base5);

  int base6 = args[6].dat->base_offset;
  double * __restrict__ u0_B0_p = (double *)(args[6].data_d + base6);

  int base7 = args[7].dat->base_offset;
  double * __restrict__ u1_B0_p = (double *)(args[7].data_d + base7);

  int base8 = args[8].dat->base_offset;
  double * __restrict__ wk0_B0_p = (double *)(args[8].data_d + base8);

  int base9 = args[9].dat->base_offset;
  double * __restrict__ wk1_B0_p = (double *)(args[9].data_d + base9);

  int base10 = args[10].dat->base_offset;
  double * __restrict__ wk3_B0_p = (double *)(args[10].data_d + base10);

  int base11 = args[11].dat->base_offset;
  double * __restrict__ wk4_B0_p = (double *)(args[11].data_d + base11);

  int base12 = args[12].dat->base_offset;
  double * __restrict__ Residual0_B0_p = (double *)(args[12].data_d + base12);

  int base13 = args[13].dat->base_offset;
  double * __restrict__ Residual1_B0_p = (double *)(args[13].data_d + base13);

  int base14 = args[14].dat->base_offset;
  double * __restrict__ Residual2_B0_p = (double *)(args[14].data_d + base14);

  int base15 = args[15].dat->base_offset;
  double * __restrict__ Residual3_B0_p = (double *)(args[15].data_d + base15);




  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_device(args, 17);
  ops_halo_exchanges(args,17,range);
  ops_H_D_exchanges_device(args, 17);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[22].mpi_time += __t1-__t2;
  }

  #pragma omp target teams distribute parallel for collapse(2)
  for ( int n_y=start1; n_y<end1; n_y++ ){
    for ( int n_x=start0; n_x<end0; n_x++ ){
      int idx[] = {arg_idx[0]+n_x, arg_idx[1]+n_y};
      const ACC<double> D11_B0(xdim0_opensbliblock00Kernel020, D11_B0_p + n_x*1 + n_y * xdim0_opensbliblock00Kernel020*1);
      const ACC<double> p_B0(xdim1_opensbliblock00Kernel020, p_B0_p + n_x*1 + n_y * xdim1_opensbliblock00Kernel020*1);
      const ACC<double> rhoE_B0(xdim2_opensbliblock00Kernel020, rhoE_B0_p + n_x*1 + n_y * xdim2_opensbliblock00Kernel020*1);
      const ACC<double> rho_B0(xdim3_opensbliblock00Kernel020, rho_B0_p + n_x*1 + n_y * xdim3_opensbliblock00Kernel020*1);
      const ACC<double> rhou0_B0(xdim4_opensbliblock00Kernel020, rhou0_B0_p + n_x*1 + n_y * xdim4_opensbliblock00Kernel020*1);
      const ACC<double> rhou1_B0(xdim5_opensbliblock00Kernel020, rhou1_B0_p + n_x*1 + n_y * xdim5_opensbliblock00Kernel020*1);
      const ACC<double> u0_B0(xdim6_opensbliblock00Kernel020, u0_B0_p + n_x*1 + n_y * xdim6_opensbliblock00Kernel020*1);
      const ACC<double> u1_B0(xdim7_opensbliblock00Kernel020, u1_B0_p + n_x*1 + n_y * xdim7_opensbliblock00Kernel020*1);
      const ACC<double> wk0_B0(xdim8_opensbliblock00Kernel020, wk0_B0_p + n_x*1 + n_y * xdim8_opensbliblock00Kernel020*1);
      const ACC<double> wk1_B0(xdim9_opensbliblock00Kernel020, wk1_B0_p + n_x*1 + n_y * xdim9_opensbliblock00Kernel020*1);
      const ACC<double> wk3_B0(xdim10_opensbliblock00Kernel020, wk3_B0_p + n_x*1 + n_y * xdim10_opensbliblock00Kernel020*1);
      const ACC<double> wk4_B0(xdim11_opensbliblock00Kernel020, wk4_B0_p + n_x*1 + n_y * xdim11_opensbliblock00Kernel020*1);
      ACC<double> Residual0_B0(xdim12_opensbliblock00Kernel020, Residual0_B0_p + n_x*1 + n_y * xdim12_opensbliblock00Kernel020*1);
      ACC<double> Residual1_B0(xdim13_opensbliblock00Kernel020, Residual1_B0_p + n_x*1 + n_y * xdim13_opensbliblock00Kernel020*1);
      ACC<double> Residual2_B0(xdim14_opensbliblock00Kernel020, Residual2_B0_p + n_x*1 + n_y * xdim14_opensbliblock00Kernel020*1);
      ACC<double> Residual3_B0(xdim15_opensbliblock00Kernel020, Residual3_B0_p + n_x*1 + n_y * xdim15_opensbliblock00Kernel020*1);
      
   double d1_inv_rhoErho_dx = 0.0;
   double d1_inv_rhoErho_dy = 0.0;
   double d1_p_dx = 0.0;
   double d1_p_dy = 0.0;
   double d1_pu0_dx = 0.0;
   double d1_pu1_dy = 0.0;
   double d1_rhoEu0_dx = 0.0;
   double d1_rhoEu1_dy = 0.0;
   double d1_rhou0_dx = 0.0;
   double d1_rhou0u0_dx = 0.0;
   double d1_rhou0u1_dy = 0.0;
   double d1_rhou1_dy = 0.0;
   double d1_rhou1u0_dx = 0.0;
   double d1_rhou1u1_dy = 0.0;
   if (idx[0] == 0){

       d1_p_dx = (-3*p_B0(2,0) + 4*p_B0(1,0) - (25.0/12.0)*p_B0(0,0) - (1.0/4.0)*p_B0(4,0) +
            ((4.0/3.0))*p_B0(3,0))*invDelta0block0;

       d1_pu0_dx = (-3*p_B0(2,0)*u0_B0(2,0) + 4*p_B0(1,0)*u0_B0(1,0) - (25.0/12.0)*p_B0(0,0)*u0_B0(0,0) -
            (1.0/4.0)*p_B0(4,0)*u0_B0(4,0) + ((4.0/3.0))*p_B0(3,0)*u0_B0(3,0))*invDelta0block0;

       d1_rhoEu0_dx = (-3*u0_B0(2,0)*rhoE_B0(2,0) + 4*u0_B0(1,0)*rhoE_B0(1,0) - (25.0/12.0)*u0_B0(0,0)*rhoE_B0(0,0) -
            (1.0/4.0)*u0_B0(4,0)*rhoE_B0(4,0) + ((4.0/3.0))*u0_B0(3,0)*rhoE_B0(3,0))*invDelta0block0;

       d1_inv_rhoErho_dx = (-3*rhoE_B0(2,0)/rho_B0(2,0) + 4*rhoE_B0(1,0)/rho_B0(1,0) -
            (25.0/12.0)*rhoE_B0(0,0)/rho_B0(0,0) - (1.0/4.0)*rhoE_B0(4,0)/rho_B0(4,0) +
            ((4.0/3.0))*rhoE_B0(3,0)/rho_B0(3,0))*invDelta0block0;

       d1_rhou0_dx = (-3*rhou0_B0(2,0) + 4*rhou0_B0(1,0) - (25.0/12.0)*rhou0_B0(0,0) - (1.0/4.0)*rhou0_B0(4,0) +
            ((4.0/3.0))*rhou0_B0(3,0))*invDelta0block0;

       d1_rhou0u0_dx = (-3*u0_B0(2,0)*rhou0_B0(2,0) + 4*u0_B0(1,0)*rhou0_B0(1,0) - (25.0/12.0)*u0_B0(0,0)*rhou0_B0(0,0)
            - (1.0/4.0)*u0_B0(4,0)*rhou0_B0(4,0) + ((4.0/3.0))*u0_B0(3,0)*rhou0_B0(3,0))*invDelta0block0;

       d1_rhou1u0_dx = (-3*u0_B0(2,0)*rhou1_B0(2,0) + 4*u0_B0(1,0)*rhou1_B0(1,0) - (25.0/12.0)*u0_B0(0,0)*rhou1_B0(0,0)
            - (1.0/4.0)*u0_B0(4,0)*rhou1_B0(4,0) + ((4.0/3.0))*u0_B0(3,0)*rhou1_B0(3,0))*invDelta0block0;

   }

   else if (idx[0] == 1){

       d1_p_dx = (-(5.0/6.0)*p_B0(0,0) - (1.0/2.0)*p_B0(2,0) - (1.0/4.0)*p_B0(-1,0) + ((1.0/12.0))*p_B0(3,0) +
            ((3.0/2.0))*p_B0(1,0))*invDelta0block0;

       d1_pu0_dx = (-(5.0/6.0)*p_B0(0,0)*u0_B0(0,0) - (1.0/2.0)*p_B0(2,0)*u0_B0(2,0) - (1.0/4.0)*p_B0(-1,0)*u0_B0(-1,0)
            + ((1.0/12.0))*p_B0(3,0)*u0_B0(3,0) + ((3.0/2.0))*p_B0(1,0)*u0_B0(1,0))*invDelta0block0;

       d1_rhoEu0_dx = (-(5.0/6.0)*u0_B0(0,0)*rhoE_B0(0,0) - (1.0/2.0)*u0_B0(2,0)*rhoE_B0(2,0) -
            (1.0/4.0)*u0_B0(-1,0)*rhoE_B0(-1,0) + ((1.0/12.0))*u0_B0(3,0)*rhoE_B0(3,0) +
            ((3.0/2.0))*u0_B0(1,0)*rhoE_B0(1,0))*invDelta0block0;

       d1_inv_rhoErho_dx = (-(5.0/6.0)*rhoE_B0(0,0)/rho_B0(0,0) - (1.0/2.0)*rhoE_B0(2,0)/rho_B0(2,0) -
            (1.0/4.0)*rhoE_B0(-1,0)/rho_B0(-1,0) + ((1.0/12.0))*rhoE_B0(3,0)/rho_B0(3,0) +
            ((3.0/2.0))*rhoE_B0(1,0)/rho_B0(1,0))*invDelta0block0;

       d1_rhou0_dx = (-(5.0/6.0)*rhou0_B0(0,0) - (1.0/2.0)*rhou0_B0(2,0) - (1.0/4.0)*rhou0_B0(-1,0) +
            ((1.0/12.0))*rhou0_B0(3,0) + ((3.0/2.0))*rhou0_B0(1,0))*invDelta0block0;

       d1_rhou0u0_dx = (-(5.0/6.0)*u0_B0(0,0)*rhou0_B0(0,0) - (1.0/2.0)*u0_B0(2,0)*rhou0_B0(2,0) -
            (1.0/4.0)*u0_B0(-1,0)*rhou0_B0(-1,0) + ((1.0/12.0))*u0_B0(3,0)*rhou0_B0(3,0) +
            ((3.0/2.0))*u0_B0(1,0)*rhou0_B0(1,0))*invDelta0block0;

       d1_rhou1u0_dx = (-(5.0/6.0)*u0_B0(0,0)*rhou1_B0(0,0) - (1.0/2.0)*u0_B0(2,0)*rhou1_B0(2,0) -
            (1.0/4.0)*u0_B0(-1,0)*rhou1_B0(-1,0) + ((1.0/12.0))*u0_B0(3,0)*rhou1_B0(3,0) +
            ((3.0/2.0))*u0_B0(1,0)*rhou1_B0(1,0))*invDelta0block0;

   }

   else if (idx[0] == -1 + block0np0){

       d1_p_dx = (1.5*p_B0(-2,0) + 1.83333333333333*p_B0(0,0) - 3.0*p_B0(-1,0) -
            0.333333333333333*p_B0(-3,0))*invDelta0block0;

       d1_pu0_dx = (1.5*p_B0(-2,0)*u0_B0(-2,0) + 1.83333333333333*p_B0(0,0)*u0_B0(0,0) - 3.0*p_B0(-1,0)*u0_B0(-1,0) -
            0.333333333333333*p_B0(-3,0)*u0_B0(-3,0))*invDelta0block0;

       d1_rhoEu0_dx = (1.5*u0_B0(-2,0)*rhoE_B0(-2,0) + 1.83333333333333*u0_B0(0,0)*rhoE_B0(0,0) -
            3.0*u0_B0(-1,0)*rhoE_B0(-1,0) - 0.333333333333333*u0_B0(-3,0)*rhoE_B0(-3,0))*invDelta0block0;

       d1_inv_rhoErho_dx = (1.5*rhoE_B0(-2,0)/rho_B0(-2,0) + 1.83333333333333*rhoE_B0(0,0)/rho_B0(0,0) -
            3.0*rhoE_B0(-1,0)/rho_B0(-1,0) - 0.333333333333333*rhoE_B0(-3,0)/rho_B0(-3,0))*invDelta0block0;

       d1_rhou0_dx = (1.5*rhou0_B0(-2,0) + 1.83333333333333*rhou0_B0(0,0) - 3.0*rhou0_B0(-1,0) -
            0.333333333333333*rhou0_B0(-3,0))*invDelta0block0;

       d1_rhou0u0_dx = (1.5*u0_B0(-2,0)*rhou0_B0(-2,0) + 1.83333333333333*u0_B0(0,0)*rhou0_B0(0,0) -
            3.0*u0_B0(-1,0)*rhou0_B0(-1,0) - 0.333333333333333*u0_B0(-3,0)*rhou0_B0(-3,0))*invDelta0block0;

       d1_rhou1u0_dx = (1.5*u0_B0(-2,0)*rhou1_B0(-2,0) + 1.83333333333333*u0_B0(0,0)*rhou1_B0(0,0) -
            3.0*u0_B0(-1,0)*rhou1_B0(-1,0) - 0.333333333333333*u0_B0(-3,0)*rhou1_B0(-3,0))*invDelta0block0;

   }

   else if (idx[0] == -2 + block0np0){

       d1_p_dx = (0.322484932882161*p_B0(0,0) + 0.0658051057710389*p_B0(-3,0) + 0.376283677513354*p_B0(1,0) -
            0.0394168524399447*p_B0(-2,0) - 0.00571369039775442*p_B0(-4,0) -
            0.719443173328855*p_B0(-1,0))*invDelta0block0;

       d1_pu0_dx = (0.322484932882161*p_B0(0,0)*u0_B0(0,0) + 0.0658051057710389*p_B0(-3,0)*u0_B0(-3,0) +
            0.376283677513354*p_B0(1,0)*u0_B0(1,0) - 0.0394168524399447*p_B0(-2,0)*u0_B0(-2,0) -
            0.00571369039775442*p_B0(-4,0)*u0_B0(-4,0) - 0.719443173328855*p_B0(-1,0)*u0_B0(-1,0))*invDelta0block0;

       d1_rhoEu0_dx = (0.322484932882161*u0_B0(0,0)*rhoE_B0(0,0) + 0.0658051057710389*u0_B0(-3,0)*rhoE_B0(-3,0) +
            0.376283677513354*u0_B0(1,0)*rhoE_B0(1,0) - 0.0394168524399447*u0_B0(-2,0)*rhoE_B0(-2,0) -
            0.00571369039775442*u0_B0(-4,0)*rhoE_B0(-4,0) -
            0.719443173328855*u0_B0(-1,0)*rhoE_B0(-1,0))*invDelta0block0;

       d1_inv_rhoErho_dx = (0.322484932882161*rhoE_B0(0,0)/rho_B0(0,0) + 0.0658051057710389*rhoE_B0(-3,0)/rho_B0(-3,0) +
            0.376283677513354*rhoE_B0(1,0)/rho_B0(1,0) - 0.0394168524399447*rhoE_B0(-2,0)/rho_B0(-2,0) -
            0.00571369039775442*rhoE_B0(-4,0)/rho_B0(-4,0) -
            0.719443173328855*rhoE_B0(-1,0)/rho_B0(-1,0))*invDelta0block0;

       d1_rhou0_dx = (0.322484932882161*rhou0_B0(0,0) + 0.0658051057710389*rhou0_B0(-3,0) +
            0.376283677513354*rhou0_B0(1,0) - 0.0394168524399447*rhou0_B0(-2,0) - 0.00571369039775442*rhou0_B0(-4,0) -
            0.719443173328855*rhou0_B0(-1,0))*invDelta0block0;

       d1_rhou0u0_dx = (0.322484932882161*u0_B0(0,0)*rhou0_B0(0,0) + 0.0658051057710389*u0_B0(-3,0)*rhou0_B0(-3,0) +
            0.376283677513354*u0_B0(1,0)*rhou0_B0(1,0) - 0.0394168524399447*u0_B0(-2,0)*rhou0_B0(-2,0) -
            0.00571369039775442*u0_B0(-4,0)*rhou0_B0(-4,0) -
            0.719443173328855*u0_B0(-1,0)*rhou0_B0(-1,0))*invDelta0block0;

       d1_rhou1u0_dx = (0.322484932882161*u0_B0(0,0)*rhou1_B0(0,0) + 0.0658051057710389*u0_B0(-3,0)*rhou1_B0(-3,0) +
            0.376283677513354*u0_B0(1,0)*rhou1_B0(1,0) - 0.0394168524399447*u0_B0(-2,0)*rhou1_B0(-2,0) -
            0.00571369039775442*u0_B0(-4,0)*rhou1_B0(-4,0) -
            0.719443173328855*u0_B0(-1,0)*rhou1_B0(-1,0))*invDelta0block0;

   }

   else if (idx[0] == -3 + block0np0){

       d1_p_dx = (0.00412637789557492*p_B0(-3,0) + 0.0367146847001261*p_B0(-2,0) + 0.791245592765872*p_B0(1,0) -
            0.197184333887745*p_B0(0,0) - 0.521455851089587*p_B0(-1,0) - 0.113446470384241*p_B0(2,0))*invDelta0block0;

       d1_pu0_dx = (0.00412637789557492*p_B0(-3,0)*u0_B0(-3,0) + 0.0367146847001261*p_B0(-2,0)*u0_B0(-2,0) +
            0.791245592765872*p_B0(1,0)*u0_B0(1,0) - 0.197184333887745*p_B0(0,0)*u0_B0(0,0) -
            0.521455851089587*p_B0(-1,0)*u0_B0(-1,0) - 0.113446470384241*p_B0(2,0)*u0_B0(2,0))*invDelta0block0;

       d1_rhoEu0_dx = (0.00412637789557492*u0_B0(-3,0)*rhoE_B0(-3,0) + 0.0367146847001261*u0_B0(-2,0)*rhoE_B0(-2,0) +
            0.791245592765872*u0_B0(1,0)*rhoE_B0(1,0) - 0.197184333887745*u0_B0(0,0)*rhoE_B0(0,0) -
            0.521455851089587*u0_B0(-1,0)*rhoE_B0(-1,0) - 0.113446470384241*u0_B0(2,0)*rhoE_B0(2,0))*invDelta0block0;

       d1_inv_rhoErho_dx = (0.00412637789557492*rhoE_B0(-3,0)/rho_B0(-3,0) +
            0.0367146847001261*rhoE_B0(-2,0)/rho_B0(-2,0) + 0.791245592765872*rhoE_B0(1,0)/rho_B0(1,0) -
            0.197184333887745*rhoE_B0(0,0)/rho_B0(0,0) - 0.521455851089587*rhoE_B0(-1,0)/rho_B0(-1,0) -
            0.113446470384241*rhoE_B0(2,0)/rho_B0(2,0))*invDelta0block0;

       d1_rhou0_dx = (0.00412637789557492*rhou0_B0(-3,0) + 0.0367146847001261*rhou0_B0(-2,0) +
            0.791245592765872*rhou0_B0(1,0) - 0.197184333887745*rhou0_B0(0,0) - 0.521455851089587*rhou0_B0(-1,0) -
            0.113446470384241*rhou0_B0(2,0))*invDelta0block0;

       d1_rhou0u0_dx = (0.00412637789557492*u0_B0(-3,0)*rhou0_B0(-3,0) + 0.0367146847001261*u0_B0(-2,0)*rhou0_B0(-2,0) +
            0.791245592765872*u0_B0(1,0)*rhou0_B0(1,0) - 0.197184333887745*u0_B0(0,0)*rhou0_B0(0,0) -
            0.521455851089587*u0_B0(-1,0)*rhou0_B0(-1,0) - 0.113446470384241*u0_B0(2,0)*rhou0_B0(2,0))*invDelta0block0;

       d1_rhou1u0_dx = (0.00412637789557492*u0_B0(-3,0)*rhou1_B0(-3,0) + 0.0367146847001261*u0_B0(-2,0)*rhou1_B0(-2,0) +
            0.791245592765872*u0_B0(1,0)*rhou1_B0(1,0) - 0.197184333887745*u0_B0(0,0)*rhou1_B0(0,0) -
            0.521455851089587*u0_B0(-1,0)*rhou1_B0(-1,0) - 0.113446470384241*u0_B0(2,0)*rhou1_B0(2,0))*invDelta0block0;

   }

   else if (idx[0] == -4 + block0np0){

       d1_p_dx = (0.00932597985049999*p_B0(3,0) + 0.727822147724592*p_B0(1,0) + 0.082033432844602*p_B0(-2,0) -
            0.0451033223343881*p_B0(0,0) - 0.652141084861241*p_B0(-1,0) - 0.121937153224065*p_B0(2,0))*invDelta0block0;

       d1_pu0_dx = (0.00932597985049999*p_B0(3,0)*u0_B0(3,0) + 0.727822147724592*p_B0(1,0)*u0_B0(1,0) +
            0.082033432844602*p_B0(-2,0)*u0_B0(-2,0) - 0.0451033223343881*p_B0(0,0)*u0_B0(0,0) -
            0.652141084861241*p_B0(-1,0)*u0_B0(-1,0) - 0.121937153224065*p_B0(2,0)*u0_B0(2,0))*invDelta0block0;

       d1_rhoEu0_dx = (0.00932597985049999*u0_B0(3,0)*rhoE_B0(3,0) + 0.727822147724592*u0_B0(1,0)*rhoE_B0(1,0) +
            0.082033432844602*u0_B0(-2,0)*rhoE_B0(-2,0) - 0.0451033223343881*u0_B0(0,0)*rhoE_B0(0,0) -
            0.652141084861241*u0_B0(-1,0)*rhoE_B0(-1,0) - 0.121937153224065*u0_B0(2,0)*rhoE_B0(2,0))*invDelta0block0;

       d1_inv_rhoErho_dx = (0.00932597985049999*rhoE_B0(3,0)/rho_B0(3,0) + 0.727822147724592*rhoE_B0(1,0)/rho_B0(1,0) +
            0.082033432844602*rhoE_B0(-2,0)/rho_B0(-2,0) - 0.0451033223343881*rhoE_B0(0,0)/rho_B0(0,0) -
            0.652141084861241*rhoE_B0(-1,0)/rho_B0(-1,0) - 0.121937153224065*rhoE_B0(2,0)/rho_B0(2,0))*invDelta0block0;

       d1_rhou0_dx = (0.00932597985049999*rhou0_B0(3,0) + 0.727822147724592*rhou0_B0(1,0) +
            0.082033432844602*rhou0_B0(-2,0) - 0.0451033223343881*rhou0_B0(0,0) - 0.652141084861241*rhou0_B0(-1,0) -
            0.121937153224065*rhou0_B0(2,0))*invDelta0block0;

       d1_rhou0u0_dx = (0.00932597985049999*u0_B0(3,0)*rhou0_B0(3,0) + 0.727822147724592*u0_B0(1,0)*rhou0_B0(1,0) +
            0.082033432844602*u0_B0(-2,0)*rhou0_B0(-2,0) - 0.0451033223343881*u0_B0(0,0)*rhou0_B0(0,0) -
            0.652141084861241*u0_B0(-1,0)*rhou0_B0(-1,0) - 0.121937153224065*u0_B0(2,0)*rhou0_B0(2,0))*invDelta0block0;

       d1_rhou1u0_dx = (0.00932597985049999*u0_B0(3,0)*rhou1_B0(3,0) + 0.727822147724592*u0_B0(1,0)*rhou1_B0(1,0) +
            0.082033432844602*u0_B0(-2,0)*rhou1_B0(-2,0) - 0.0451033223343881*u0_B0(0,0)*rhou1_B0(0,0) -
            0.652141084861241*u0_B0(-1,0)*rhou1_B0(-1,0) - 0.121937153224065*u0_B0(2,0)*rhou1_B0(2,0))*invDelta0block0;

   }

   else{

       d1_p_dx = (-(2.0/3.0)*p_B0(-1,0) - (1.0/12.0)*p_B0(2,0) + ((1.0/12.0))*p_B0(-2,0) +
            ((2.0/3.0))*p_B0(1,0))*invDelta0block0;

       d1_pu0_dx = (-(2.0/3.0)*p_B0(-1,0)*u0_B0(-1,0) - (1.0/12.0)*p_B0(2,0)*u0_B0(2,0) +
            ((1.0/12.0))*p_B0(-2,0)*u0_B0(-2,0) + ((2.0/3.0))*p_B0(1,0)*u0_B0(1,0))*invDelta0block0;

       d1_rhoEu0_dx = (-(2.0/3.0)*u0_B0(-1,0)*rhoE_B0(-1,0) - (1.0/12.0)*u0_B0(2,0)*rhoE_B0(2,0) +
            ((1.0/12.0))*u0_B0(-2,0)*rhoE_B0(-2,0) + ((2.0/3.0))*u0_B0(1,0)*rhoE_B0(1,0))*invDelta0block0;

       d1_inv_rhoErho_dx = (-(2.0/3.0)*rhoE_B0(-1,0)/rho_B0(-1,0) - (1.0/12.0)*rhoE_B0(2,0)/rho_B0(2,0) +
            ((1.0/12.0))*rhoE_B0(-2,0)/rho_B0(-2,0) + ((2.0/3.0))*rhoE_B0(1,0)/rho_B0(1,0))*invDelta0block0;

       d1_rhou0_dx = (-(2.0/3.0)*rhou0_B0(-1,0) - (1.0/12.0)*rhou0_B0(2,0) + ((1.0/12.0))*rhou0_B0(-2,0) +
            ((2.0/3.0))*rhou0_B0(1,0))*invDelta0block0;

       d1_rhou0u0_dx = (-(2.0/3.0)*u0_B0(-1,0)*rhou0_B0(-1,0) - (1.0/12.0)*u0_B0(2,0)*rhou0_B0(2,0) +
            ((1.0/12.0))*u0_B0(-2,0)*rhou0_B0(-2,0) + ((2.0/3.0))*u0_B0(1,0)*rhou0_B0(1,0))*invDelta0block0;

       d1_rhou1u0_dx = (-(2.0/3.0)*u0_B0(-1,0)*rhou1_B0(-1,0) - (1.0/12.0)*u0_B0(2,0)*rhou1_B0(2,0) +
            ((1.0/12.0))*u0_B0(-2,0)*rhou1_B0(-2,0) + ((2.0/3.0))*u0_B0(1,0)*rhou1_B0(1,0))*invDelta0block0;

   }

   if (idx[1] == 0){

       d1_p_dy = (-3*p_B0(0,2) + 4*p_B0(0,1) - (25.0/12.0)*p_B0(0,0) - (1.0/4.0)*p_B0(0,4) +
            ((4.0/3.0))*p_B0(0,3))*invDelta1block0;

       d1_pu1_dy = (-3*p_B0(0,2)*u1_B0(0,2) + 4*p_B0(0,1)*u1_B0(0,1) - (25.0/12.0)*p_B0(0,0)*u1_B0(0,0) -
            (1.0/4.0)*p_B0(0,4)*u1_B0(0,4) + ((4.0/3.0))*p_B0(0,3)*u1_B0(0,3))*invDelta1block0;

       d1_rhoEu1_dy = (-3*u1_B0(0,2)*rhoE_B0(0,2) + 4*u1_B0(0,1)*rhoE_B0(0,1) - (25.0/12.0)*u1_B0(0,0)*rhoE_B0(0,0) -
            (1.0/4.0)*u1_B0(0,4)*rhoE_B0(0,4) + ((4.0/3.0))*u1_B0(0,3)*rhoE_B0(0,3))*invDelta1block0;

       d1_inv_rhoErho_dy = (-3*rhoE_B0(0,2)/rho_B0(0,2) + 4*rhoE_B0(0,1)/rho_B0(0,1) -
            (25.0/12.0)*rhoE_B0(0,0)/rho_B0(0,0) - (1.0/4.0)*rhoE_B0(0,4)/rho_B0(0,4) +
            ((4.0/3.0))*rhoE_B0(0,3)/rho_B0(0,3))*invDelta1block0;

       d1_rhou0u1_dy = (-3*u1_B0(0,2)*rhou0_B0(0,2) + 4*u1_B0(0,1)*rhou0_B0(0,1) - (25.0/12.0)*u1_B0(0,0)*rhou0_B0(0,0)
            - (1.0/4.0)*u1_B0(0,4)*rhou0_B0(0,4) + ((4.0/3.0))*u1_B0(0,3)*rhou0_B0(0,3))*invDelta1block0;

       d1_rhou1_dy = (-3*rhou1_B0(0,2) + 4*rhou1_B0(0,1) - (25.0/12.0)*rhou1_B0(0,0) - (1.0/4.0)*rhou1_B0(0,4) +
            ((4.0/3.0))*rhou1_B0(0,3))*invDelta1block0;

       d1_rhou1u1_dy = (-3*u1_B0(0,2)*rhou1_B0(0,2) + 4*u1_B0(0,1)*rhou1_B0(0,1) - (25.0/12.0)*u1_B0(0,0)*rhou1_B0(0,0)
            - (1.0/4.0)*u1_B0(0,4)*rhou1_B0(0,4) + ((4.0/3.0))*u1_B0(0,3)*rhou1_B0(0,3))*invDelta1block0;

   }

   else if (idx[1] == 1){

       d1_p_dy = (-(5.0/6.0)*p_B0(0,0) - (1.0/2.0)*p_B0(0,2) - (1.0/4.0)*p_B0(0,-1) + ((1.0/12.0))*p_B0(0,3) +
            ((3.0/2.0))*p_B0(0,1))*invDelta1block0;

       d1_pu1_dy = (-(5.0/6.0)*p_B0(0,0)*u1_B0(0,0) - (1.0/2.0)*p_B0(0,2)*u1_B0(0,2) - (1.0/4.0)*p_B0(0,-1)*u1_B0(0,-1)
            + ((1.0/12.0))*p_B0(0,3)*u1_B0(0,3) + ((3.0/2.0))*p_B0(0,1)*u1_B0(0,1))*invDelta1block0;

       d1_rhoEu1_dy = (-(5.0/6.0)*u1_B0(0,0)*rhoE_B0(0,0) - (1.0/2.0)*u1_B0(0,2)*rhoE_B0(0,2) -
            (1.0/4.0)*u1_B0(0,-1)*rhoE_B0(0,-1) + ((1.0/12.0))*u1_B0(0,3)*rhoE_B0(0,3) +
            ((3.0/2.0))*u1_B0(0,1)*rhoE_B0(0,1))*invDelta1block0;

       d1_inv_rhoErho_dy = (-(5.0/6.0)*rhoE_B0(0,0)/rho_B0(0,0) - (1.0/2.0)*rhoE_B0(0,2)/rho_B0(0,2) -
            (1.0/4.0)*rhoE_B0(0,-1)/rho_B0(0,-1) + ((1.0/12.0))*rhoE_B0(0,3)/rho_B0(0,3) +
            ((3.0/2.0))*rhoE_B0(0,1)/rho_B0(0,1))*invDelta1block0;

       d1_rhou0u1_dy = (-(5.0/6.0)*u1_B0(0,0)*rhou0_B0(0,0) - (1.0/2.0)*u1_B0(0,2)*rhou0_B0(0,2) -
            (1.0/4.0)*u1_B0(0,-1)*rhou0_B0(0,-1) + ((1.0/12.0))*u1_B0(0,3)*rhou0_B0(0,3) +
            ((3.0/2.0))*u1_B0(0,1)*rhou0_B0(0,1))*invDelta1block0;

       d1_rhou1_dy = (-(5.0/6.0)*rhou1_B0(0,0) - (1.0/2.0)*rhou1_B0(0,2) - (1.0/4.0)*rhou1_B0(0,-1) +
            ((1.0/12.0))*rhou1_B0(0,3) + ((3.0/2.0))*rhou1_B0(0,1))*invDelta1block0;

       d1_rhou1u1_dy = (-(5.0/6.0)*u1_B0(0,0)*rhou1_B0(0,0) - (1.0/2.0)*u1_B0(0,2)*rhou1_B0(0,2) -
            (1.0/4.0)*u1_B0(0,-1)*rhou1_B0(0,-1) + ((1.0/12.0))*u1_B0(0,3)*rhou1_B0(0,3) +
            ((3.0/2.0))*u1_B0(0,1)*rhou1_B0(0,1))*invDelta1block0;

   }

   else if (idx[1] == -1 + block0np1){

       d1_p_dy = (1.5*p_B0(0,-2) + 1.83333333333333*p_B0(0,0) - 3.0*p_B0(0,-1) -
            0.333333333333333*p_B0(0,-3))*invDelta1block0;

       d1_pu1_dy = (1.5*p_B0(0,-2)*u1_B0(0,-2) + 1.83333333333333*p_B0(0,0)*u1_B0(0,0) - 3.0*p_B0(0,-1)*u1_B0(0,-1) -
            0.333333333333333*p_B0(0,-3)*u1_B0(0,-3))*invDelta1block0;

       d1_rhoEu1_dy = (1.5*u1_B0(0,-2)*rhoE_B0(0,-2) + 1.83333333333333*u1_B0(0,0)*rhoE_B0(0,0) -
            3.0*u1_B0(0,-1)*rhoE_B0(0,-1) - 0.333333333333333*u1_B0(0,-3)*rhoE_B0(0,-3))*invDelta1block0;

       d1_inv_rhoErho_dy = (1.5*rhoE_B0(0,-2)/rho_B0(0,-2) + 1.83333333333333*rhoE_B0(0,0)/rho_B0(0,0) -
            3.0*rhoE_B0(0,-1)/rho_B0(0,-1) - 0.333333333333333*rhoE_B0(0,-3)/rho_B0(0,-3))*invDelta1block0;

       d1_rhou0u1_dy = (1.5*u1_B0(0,-2)*rhou0_B0(0,-2) + 1.83333333333333*u1_B0(0,0)*rhou0_B0(0,0) -
            3.0*u1_B0(0,-1)*rhou0_B0(0,-1) - 0.333333333333333*u1_B0(0,-3)*rhou0_B0(0,-3))*invDelta1block0;

       d1_rhou1_dy = (1.5*rhou1_B0(0,-2) + 1.83333333333333*rhou1_B0(0,0) - 3.0*rhou1_B0(0,-1) -
            0.333333333333333*rhou1_B0(0,-3))*invDelta1block0;

       d1_rhou1u1_dy = (1.5*u1_B0(0,-2)*rhou1_B0(0,-2) + 1.83333333333333*u1_B0(0,0)*rhou1_B0(0,0) -
            3.0*u1_B0(0,-1)*rhou1_B0(0,-1) - 0.333333333333333*u1_B0(0,-3)*rhou1_B0(0,-3))*invDelta1block0;

   }

   else if (idx[1] == -2 + block0np1){

       d1_p_dy = (0.322484932882161*p_B0(0,0) + 0.0658051057710389*p_B0(0,-3) + 0.376283677513354*p_B0(0,1) -
            0.0394168524399447*p_B0(0,-2) - 0.00571369039775442*p_B0(0,-4) -
            0.719443173328855*p_B0(0,-1))*invDelta1block0;

       d1_pu1_dy = (0.322484932882161*p_B0(0,0)*u1_B0(0,0) + 0.0658051057710389*p_B0(0,-3)*u1_B0(0,-3) +
            0.376283677513354*p_B0(0,1)*u1_B0(0,1) - 0.0394168524399447*p_B0(0,-2)*u1_B0(0,-2) -
            0.00571369039775442*p_B0(0,-4)*u1_B0(0,-4) - 0.719443173328855*p_B0(0,-1)*u1_B0(0,-1))*invDelta1block0;

       d1_rhoEu1_dy = (0.322484932882161*u1_B0(0,0)*rhoE_B0(0,0) + 0.0658051057710389*u1_B0(0,-3)*rhoE_B0(0,-3) +
            0.376283677513354*u1_B0(0,1)*rhoE_B0(0,1) - 0.0394168524399447*u1_B0(0,-2)*rhoE_B0(0,-2) -
            0.00571369039775442*u1_B0(0,-4)*rhoE_B0(0,-4) -
            0.719443173328855*u1_B0(0,-1)*rhoE_B0(0,-1))*invDelta1block0;

       d1_inv_rhoErho_dy = (0.322484932882161*rhoE_B0(0,0)/rho_B0(0,0) + 0.0658051057710389*rhoE_B0(0,-3)/rho_B0(0,-3) +
            0.376283677513354*rhoE_B0(0,1)/rho_B0(0,1) - 0.0394168524399447*rhoE_B0(0,-2)/rho_B0(0,-2) -
            0.00571369039775442*rhoE_B0(0,-4)/rho_B0(0,-4) -
            0.719443173328855*rhoE_B0(0,-1)/rho_B0(0,-1))*invDelta1block0;

       d1_rhou0u1_dy = (0.322484932882161*u1_B0(0,0)*rhou0_B0(0,0) + 0.0658051057710389*u1_B0(0,-3)*rhou0_B0(0,-3) +
            0.376283677513354*u1_B0(0,1)*rhou0_B0(0,1) - 0.0394168524399447*u1_B0(0,-2)*rhou0_B0(0,-2) -
            0.00571369039775442*u1_B0(0,-4)*rhou0_B0(0,-4) -
            0.719443173328855*u1_B0(0,-1)*rhou0_B0(0,-1))*invDelta1block0;

       d1_rhou1_dy = (0.322484932882161*rhou1_B0(0,0) + 0.0658051057710389*rhou1_B0(0,-3) +
            0.376283677513354*rhou1_B0(0,1) - 0.0394168524399447*rhou1_B0(0,-2) - 0.00571369039775442*rhou1_B0(0,-4) -
            0.719443173328855*rhou1_B0(0,-1))*invDelta1block0;

       d1_rhou1u1_dy = (0.322484932882161*u1_B0(0,0)*rhou1_B0(0,0) + 0.0658051057710389*u1_B0(0,-3)*rhou1_B0(0,-3) +
            0.376283677513354*u1_B0(0,1)*rhou1_B0(0,1) - 0.0394168524399447*u1_B0(0,-2)*rhou1_B0(0,-2) -
            0.00571369039775442*u1_B0(0,-4)*rhou1_B0(0,-4) -
            0.719443173328855*u1_B0(0,-1)*rhou1_B0(0,-1))*invDelta1block0;

   }

   else if (idx[1] == -3 + block0np1){

       d1_p_dy = (0.00412637789557492*p_B0(0,-3) + 0.0367146847001261*p_B0(0,-2) + 0.791245592765872*p_B0(0,1) -
            0.197184333887745*p_B0(0,0) - 0.521455851089587*p_B0(0,-1) - 0.113446470384241*p_B0(0,2))*invDelta1block0;

       d1_pu1_dy = (0.00412637789557492*p_B0(0,-3)*u1_B0(0,-3) + 0.0367146847001261*p_B0(0,-2)*u1_B0(0,-2) +
            0.791245592765872*p_B0(0,1)*u1_B0(0,1) - 0.197184333887745*p_B0(0,0)*u1_B0(0,0) -
            0.521455851089587*p_B0(0,-1)*u1_B0(0,-1) - 0.113446470384241*p_B0(0,2)*u1_B0(0,2))*invDelta1block0;

       d1_rhoEu1_dy = (0.00412637789557492*u1_B0(0,-3)*rhoE_B0(0,-3) + 0.0367146847001261*u1_B0(0,-2)*rhoE_B0(0,-2) +
            0.791245592765872*u1_B0(0,1)*rhoE_B0(0,1) - 0.197184333887745*u1_B0(0,0)*rhoE_B0(0,0) -
            0.521455851089587*u1_B0(0,-1)*rhoE_B0(0,-1) - 0.113446470384241*u1_B0(0,2)*rhoE_B0(0,2))*invDelta1block0;

       d1_inv_rhoErho_dy = (0.00412637789557492*rhoE_B0(0,-3)/rho_B0(0,-3) +
            0.0367146847001261*rhoE_B0(0,-2)/rho_B0(0,-2) + 0.791245592765872*rhoE_B0(0,1)/rho_B0(0,1) -
            0.197184333887745*rhoE_B0(0,0)/rho_B0(0,0) - 0.521455851089587*rhoE_B0(0,-1)/rho_B0(0,-1) -
            0.113446470384241*rhoE_B0(0,2)/rho_B0(0,2))*invDelta1block0;

       d1_rhou0u1_dy = (0.00412637789557492*u1_B0(0,-3)*rhou0_B0(0,-3) + 0.0367146847001261*u1_B0(0,-2)*rhou0_B0(0,-2) +
            0.791245592765872*u1_B0(0,1)*rhou0_B0(0,1) - 0.197184333887745*u1_B0(0,0)*rhou0_B0(0,0) -
            0.521455851089587*u1_B0(0,-1)*rhou0_B0(0,-1) - 0.113446470384241*u1_B0(0,2)*rhou0_B0(0,2))*invDelta1block0;

       d1_rhou1_dy = (0.00412637789557492*rhou1_B0(0,-3) + 0.0367146847001261*rhou1_B0(0,-2) +
            0.791245592765872*rhou1_B0(0,1) - 0.197184333887745*rhou1_B0(0,0) - 0.521455851089587*rhou1_B0(0,-1) -
            0.113446470384241*rhou1_B0(0,2))*invDelta1block0;

       d1_rhou1u1_dy = (0.00412637789557492*u1_B0(0,-3)*rhou1_B0(0,-3) + 0.0367146847001261*u1_B0(0,-2)*rhou1_B0(0,-2) +
            0.791245592765872*u1_B0(0,1)*rhou1_B0(0,1) - 0.197184333887745*u1_B0(0,0)*rhou1_B0(0,0) -
            0.521455851089587*u1_B0(0,-1)*rhou1_B0(0,-1) - 0.113446470384241*u1_B0(0,2)*rhou1_B0(0,2))*invDelta1block0;

   }

   else if (idx[1] == -4 + block0np1){

       d1_p_dy = (0.00932597985049999*p_B0(0,3) + 0.727822147724592*p_B0(0,1) + 0.082033432844602*p_B0(0,-2) -
            0.0451033223343881*p_B0(0,0) - 0.652141084861241*p_B0(0,-1) - 0.121937153224065*p_B0(0,2))*invDelta1block0;

       d1_pu1_dy = (0.00932597985049999*p_B0(0,3)*u1_B0(0,3) + 0.727822147724592*p_B0(0,1)*u1_B0(0,1) +
            0.082033432844602*p_B0(0,-2)*u1_B0(0,-2) - 0.0451033223343881*p_B0(0,0)*u1_B0(0,0) -
            0.652141084861241*p_B0(0,-1)*u1_B0(0,-1) - 0.121937153224065*p_B0(0,2)*u1_B0(0,2))*invDelta1block0;

       d1_rhoEu1_dy = (0.00932597985049999*u1_B0(0,3)*rhoE_B0(0,3) + 0.727822147724592*u1_B0(0,1)*rhoE_B0(0,1) +
            0.082033432844602*u1_B0(0,-2)*rhoE_B0(0,-2) - 0.0451033223343881*u1_B0(0,0)*rhoE_B0(0,0) -
            0.652141084861241*u1_B0(0,-1)*rhoE_B0(0,-1) - 0.121937153224065*u1_B0(0,2)*rhoE_B0(0,2))*invDelta1block0;

       d1_inv_rhoErho_dy = (0.00932597985049999*rhoE_B0(0,3)/rho_B0(0,3) + 0.727822147724592*rhoE_B0(0,1)/rho_B0(0,1) +
            0.082033432844602*rhoE_B0(0,-2)/rho_B0(0,-2) - 0.0451033223343881*rhoE_B0(0,0)/rho_B0(0,0) -
            0.652141084861241*rhoE_B0(0,-1)/rho_B0(0,-1) - 0.121937153224065*rhoE_B0(0,2)/rho_B0(0,2))*invDelta1block0;

       d1_rhou0u1_dy = (0.00932597985049999*u1_B0(0,3)*rhou0_B0(0,3) + 0.727822147724592*u1_B0(0,1)*rhou0_B0(0,1) +
            0.082033432844602*u1_B0(0,-2)*rhou0_B0(0,-2) - 0.0451033223343881*u1_B0(0,0)*rhou0_B0(0,0) -
            0.652141084861241*u1_B0(0,-1)*rhou0_B0(0,-1) - 0.121937153224065*u1_B0(0,2)*rhou0_B0(0,2))*invDelta1block0;

       d1_rhou1_dy = (0.00932597985049999*rhou1_B0(0,3) + 0.727822147724592*rhou1_B0(0,1) +
            0.082033432844602*rhou1_B0(0,-2) - 0.0451033223343881*rhou1_B0(0,0) - 0.652141084861241*rhou1_B0(0,-1) -
            0.121937153224065*rhou1_B0(0,2))*invDelta1block0;

       d1_rhou1u1_dy = (0.00932597985049999*u1_B0(0,3)*rhou1_B0(0,3) + 0.727822147724592*u1_B0(0,1)*rhou1_B0(0,1) +
            0.082033432844602*u1_B0(0,-2)*rhou1_B0(0,-2) - 0.0451033223343881*u1_B0(0,0)*rhou1_B0(0,0) -
            0.652141084861241*u1_B0(0,-1)*rhou1_B0(0,-1) - 0.121937153224065*u1_B0(0,2)*rhou1_B0(0,2))*invDelta1block0;

   }

   else{

       d1_p_dy = (-(2.0/3.0)*p_B0(0,-1) - (1.0/12.0)*p_B0(0,2) + ((1.0/12.0))*p_B0(0,-2) +
            ((2.0/3.0))*p_B0(0,1))*invDelta1block0;

       d1_pu1_dy = (-(2.0/3.0)*p_B0(0,-1)*u1_B0(0,-1) - (1.0/12.0)*p_B0(0,2)*u1_B0(0,2) +
            ((1.0/12.0))*p_B0(0,-2)*u1_B0(0,-2) + ((2.0/3.0))*p_B0(0,1)*u1_B0(0,1))*invDelta1block0;

       d1_rhoEu1_dy = (-(2.0/3.0)*u1_B0(0,-1)*rhoE_B0(0,-1) - (1.0/12.0)*u1_B0(0,2)*rhoE_B0(0,2) +
            ((1.0/12.0))*u1_B0(0,-2)*rhoE_B0(0,-2) + ((2.0/3.0))*u1_B0(0,1)*rhoE_B0(0,1))*invDelta1block0;

       d1_inv_rhoErho_dy = (-(2.0/3.0)*rhoE_B0(0,-1)/rho_B0(0,-1) - (1.0/12.0)*rhoE_B0(0,2)/rho_B0(0,2) +
            ((1.0/12.0))*rhoE_B0(0,-2)/rho_B0(0,-2) + ((2.0/3.0))*rhoE_B0(0,1)/rho_B0(0,1))*invDelta1block0;

       d1_rhou0u1_dy = (-(2.0/3.0)*u1_B0(0,-1)*rhou0_B0(0,-1) - (1.0/12.0)*u1_B0(0,2)*rhou0_B0(0,2) +
            ((1.0/12.0))*u1_B0(0,-2)*rhou0_B0(0,-2) + ((2.0/3.0))*u1_B0(0,1)*rhou0_B0(0,1))*invDelta1block0;

       d1_rhou1_dy = (-(2.0/3.0)*rhou1_B0(0,-1) - (1.0/12.0)*rhou1_B0(0,2) + ((1.0/12.0))*rhou1_B0(0,-2) +
            ((2.0/3.0))*rhou1_B0(0,1))*invDelta1block0;

       d1_rhou1u1_dy = (-(2.0/3.0)*u1_B0(0,-1)*rhou1_B0(0,-1) - (1.0/12.0)*u1_B0(0,2)*rhou1_B0(0,2) +
            ((1.0/12.0))*u1_B0(0,-2)*rhou1_B0(0,-2) + ((2.0/3.0))*u1_B0(0,1)*rhou1_B0(0,1))*invDelta1block0;

   }

   Residual0_B0(0,0) = -d1_rhou0_dx - D11_B0(0,0)*d1_rhou1_dy;

    Residual1_B0(0,0) = -d1_p_dx - (1.0/2.0)*d1_rhou0u0_dx - (1.0/2.0)*u0_B0(0,0)*d1_rhou0_dx -
      (1.0/2.0)*D11_B0(0,0)*d1_rhou0u1_dy - (1.0/2.0)*wk0_B0(0,0)*rhou0_B0(0,0) -
      (1.0/2.0)*u0_B0(0,0)*D11_B0(0,0)*d1_rhou1_dy - (1.0/2.0)*D11_B0(0,0)*wk3_B0(0,0)*rhou1_B0(0,0);

    Residual2_B0(0,0) = -(1.0/2.0)*d1_rhou1u0_dx - D11_B0(0,0)*d1_p_dy - (1.0/2.0)*(D11_B0(0,0)*d1_rhou1_dy +
      d1_rhou0_dx)*u1_B0(0,0) - (1.0/2.0)*D11_B0(0,0)*d1_rhou1u1_dy - (1.0/2.0)*wk1_B0(0,0)*rhou0_B0(0,0) -
      (1.0/2.0)*D11_B0(0,0)*wk4_B0(0,0)*rhou1_B0(0,0);

    Residual3_B0(0,0) = -d1_pu0_dx - (1.0/2.0)*d1_rhoEu0_dx - D11_B0(0,0)*d1_pu1_dy - (1.0/2.0)*D11_B0(0,0)*d1_rhoEu1_dy
      - (1.0/2.0)*rhou0_B0(0,0)*d1_inv_rhoErho_dx - (1.0/2.0)*(D11_B0(0,0)*d1_rhou1_dy +
      d1_rhou0_dx)*rhoE_B0(0,0)/rho_B0(0,0) - (1.0/2.0)*D11_B0(0,0)*rhou1_B0(0,0)*d1_inv_rhoErho_dy;


    }
  }
  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[22].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 17);
  ops_set_halo_dirtybit3(&args[12],range);
  ops_set_halo_dirtybit3(&args[13],range);
  ops_set_halo_dirtybit3(&args[14],range);
  ops_set_halo_dirtybit3(&args[15],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[22].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg7);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg8);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg9);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg10);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg11);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg12);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg13);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg14);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg15);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel020(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11,
 ops_arg arg12, ops_arg arg13, ops_arg arg14, ops_arg arg15,
 ops_arg arg16) {
  ops_arg args[17] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16 };

  //create kernel descriptor and pass it to ops_enqueue_kernel
  create_kerneldesc_and_enque(name, args, 17, 22, dim, 0, range, block, ops_par_loop_opensbliblock00Kernel020_execute);
}
#endif
