//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel010(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2) {
#else
void ops_par_loop_opensbliblock00Kernel010_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[3] = { arg0, arg1, arg2};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,3,range,20)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,20,"opensbliblock00Kernel010");
    block->instance->OPS_kernels[20].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "opensbliblock00Kernel010");
  #endif


  //compute locally allocated range for the sub-block
  int start[2];
  int end[2];
  int arg_idx[2];
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<2; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 3,block, range, start, end, arg_idx) < 0) return;
  #endif

  int start0 = start[0];
  int end0 = end[0];
  int start1 = start[1];
  int end1 = end[1];

  #if defined(OPS_MPI)
  #if defined(OPS_LAZY)
  sub_block_list sb = OPS_sub_block_list[block->index];
  arg_idx[0] = sb->decomp_disp[0];
  arg_idx[1] = sb->decomp_disp[1];
  #else
  arg_idx[0] -= start[0];
  arg_idx[1] -= start[1];
  #endif
  #else //OPS_MPI
  arg_idx[0] = 0;
  arg_idx[1] = 0;
  #endif //OPS_MPI

  //initialize global variable with the dimension of dats
  int xdim0_opensbliblock00Kernel010 = args[0].dat->size[0];
  int xdim1_opensbliblock00Kernel010 = args[1].dat->size[0];

  //set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset;
  double * __restrict__ u1_B0_p = (double *)(args[0].data_d + base0);

  int base1 = args[1].dat->base_offset;
  double * __restrict__ wk4_B0_p = (double *)(args[1].data_d + base1);




  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_device(args, 3);
  ops_halo_exchanges(args,3,range);
  ops_H_D_exchanges_device(args, 3);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[20].mpi_time += __t1-__t2;
  }

  #pragma omp target teams distribute parallel for collapse(2)
  for ( int n_y=start1; n_y<end1; n_y++ ){
    for ( int n_x=start0; n_x<end0; n_x++ ){
      int idx[] = {arg_idx[0]+n_x, arg_idx[1]+n_y};
      const ACC<double> u1_B0(xdim0_opensbliblock00Kernel010, u1_B0_p + n_x*1 + n_y * xdim0_opensbliblock00Kernel010*1);
      ACC<double> wk4_B0(xdim1_opensbliblock00Kernel010, wk4_B0_p + n_x*1 + n_y * xdim1_opensbliblock00Kernel010*1);
      
   if (idx[1] == 0){

       wk4_B0(0,0) = (-3*u1_B0(0,2) + 4*u1_B0(0,1) - (25.0/12.0)*u1_B0(0,0) - (1.0/4.0)*u1_B0(0,4) +
            ((4.0/3.0))*u1_B0(0,3))*invDelta1block0;

   }

   else if (idx[1] == 1){

       wk4_B0(0,0) = (-(5.0/6.0)*u1_B0(0,0) - (1.0/2.0)*u1_B0(0,2) - (1.0/4.0)*u1_B0(0,-1) + ((1.0/12.0))*u1_B0(0,3) +
            ((3.0/2.0))*u1_B0(0,1))*invDelta1block0;

   }

   else if (idx[1] == -1 + block0np1){

       wk4_B0(0,0) = (1.5*u1_B0(0,-2) + 1.83333333333333*u1_B0(0,0) - 3.0*u1_B0(0,-1) -
            0.333333333333333*u1_B0(0,-3))*invDelta1block0;

   }

   else if (idx[1] == -2 + block0np1){

       wk4_B0(0,0) = (0.322484932882161*u1_B0(0,0) + 0.0658051057710389*u1_B0(0,-3) + 0.376283677513354*u1_B0(0,1) -
            0.0394168524399447*u1_B0(0,-2) - 0.00571369039775442*u1_B0(0,-4) -
            0.719443173328855*u1_B0(0,-1))*invDelta1block0;

   }

   else if (idx[1] == -3 + block0np1){

       wk4_B0(0,0) = (0.00412637789557492*u1_B0(0,-3) + 0.0367146847001261*u1_B0(0,-2) + 0.791245592765872*u1_B0(0,1) -
            0.197184333887745*u1_B0(0,0) - 0.521455851089587*u1_B0(0,-1) -
            0.113446470384241*u1_B0(0,2))*invDelta1block0;

   }

   else if (idx[1] == -4 + block0np1){

       wk4_B0(0,0) = (0.00932597985049999*u1_B0(0,3) + 0.727822147724592*u1_B0(0,1) + 0.082033432844602*u1_B0(0,-2) -
            0.0451033223343881*u1_B0(0,0) - 0.652141084861241*u1_B0(0,-1) -
            0.121937153224065*u1_B0(0,2))*invDelta1block0;

   }

   else{

       wk4_B0(0,0) = (-(2.0/3.0)*u1_B0(0,-1) - (1.0/12.0)*u1_B0(0,2) + ((1.0/12.0))*u1_B0(0,-2) +
            ((2.0/3.0))*u1_B0(0,1))*invDelta1block0;

   }


    }
  }
  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[20].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 3);
  ops_set_halo_dirtybit3(&args[1],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[20].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[20].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[20].transfer += ops_compute_transfer(dim, start, end, &arg1);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel010(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2) {
  ops_arg args[3] = { arg0, arg1, arg2 };

  //create kernel descriptor and pass it to ops_enqueue_kernel
  create_kerneldesc_and_enque(name, args, 3, 20, dim, 0, range, block, ops_par_loop_opensbliblock00Kernel010_execute);
}
#endif
