//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel027(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10) {
#else
void ops_par_loop_opensbliblock00Kernel027_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  ops_arg arg9 = desc->args[9];
  ops_arg arg10 = desc->args[10];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[11] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,11,range,15)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,15,"opensbliblock00Kernel027");
    block->instance->OPS_kernels[15].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "opensbliblock00Kernel027");
  #endif


  //compute locally allocated range for the sub-block
  int start[2];
  int end[2];
  int arg_idx[2];
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<2; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 11,block, range, start, end, arg_idx) < 0) return;
  #endif


  #if defined(OPS_MPI)
  #if defined(OPS_LAZY)
  sub_block_list sb = OPS_sub_block_list[block->index];
  arg_idx[0] = sb->decomp_disp[0];
  arg_idx[1] = sb->decomp_disp[1];
  #else
  arg_idx[0] -= start[0];
  arg_idx[1] -= start[1];
  #endif
  #else //OPS_MPI
  arg_idx[0] = 0;
  arg_idx[1] = 0;
  #endif //OPS_MPI

  //initialize global variable with the dimension of dats
  int xdim0_opensbliblock00Kernel027 = args[0].dat->size[0];
  int xdim1_opensbliblock00Kernel027 = args[1].dat->size[0];
  int xdim2_opensbliblock00Kernel027 = args[2].dat->size[0];
  int xdim3_opensbliblock00Kernel027 = args[3].dat->size[0];
  int xdim4_opensbliblock00Kernel027 = args[4].dat->size[0];
  int xdim5_opensbliblock00Kernel027 = args[5].dat->size[0];
  int xdim6_opensbliblock00Kernel027 = args[6].dat->size[0];
  int xdim7_opensbliblock00Kernel027 = args[7].dat->size[0];
  int xdim8_opensbliblock00Kernel027 = args[8].dat->size[0];
  int xdim9_opensbliblock00Kernel027 = args[9].dat->size[0];

  //set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset;
  double * __restrict__ p_B0_p = (double *)(args[0].data + base0);

  int base1 = args[1].dat->base_offset;
  double * __restrict__ rhoE_B0_p = (double *)(args[1].data + base1);

  int base2 = args[2].dat->base_offset;
  double * __restrict__ rhou0_B0_p = (double *)(args[2].data + base2);

  int base3 = args[3].dat->base_offset;
  double * __restrict__ rhou1_B0_p = (double *)(args[3].data + base3);

  int base4 = args[4].dat->base_offset;
  double * __restrict__ u0_B0_p = (double *)(args[4].data + base4);

  int base5 = args[5].dat->base_offset;
  double * __restrict__ u1_B0_p = (double *)(args[5].data + base5);

  int base6 = args[6].dat->base_offset;
  double * __restrict__ Residual0_B0_p = (double *)(args[6].data + base6);

  int base7 = args[7].dat->base_offset;
  double * __restrict__ Residual1_B0_p = (double *)(args[7].data + base7);

  int base8 = args[8].dat->base_offset;
  double * __restrict__ Residual2_B0_p = (double *)(args[8].data + base8);

  int base9 = args[9].dat->base_offset;
  double * __restrict__ Residual3_B0_p = (double *)(args[9].data + base9);




  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_host(args, 11);
  ops_halo_exchanges(args,11,range);
  ops_H_D_exchanges_host(args, 11);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[15].mpi_time += __t1-__t2;
  }

  #pragma omp parallel for
  for ( int n_y=start[1]; n_y<end[1]; n_y++ ){
    #ifdef __INTEL_COMPILER
    #pragma loop_count(10000)
    #pragma omp simd
    #elif defined(__clang__)
    #pragma clang loop vectorize(assume_safety)
    #elif defined(__GNUC__)
    #pragma GCC ivdep
    #else
    #pragma simd
    #endif
    for ( int n_x=start[0]; n_x<end[0]; n_x++ ){
      int idx[] = {arg_idx[0]+n_x, arg_idx[1]+n_y};
      const ACC<double> p_B0(xdim0_opensbliblock00Kernel027, p_B0_p + n_x*1 + n_y * xdim0_opensbliblock00Kernel027*1);
      const ACC<double> rhoE_B0(xdim1_opensbliblock00Kernel027, rhoE_B0_p + n_x*1 + n_y * xdim1_opensbliblock00Kernel027*1);
      const ACC<double> rhou0_B0(xdim2_opensbliblock00Kernel027, rhou0_B0_p + n_x*1 + n_y * xdim2_opensbliblock00Kernel027*1);
      const ACC<double> rhou1_B0(xdim3_opensbliblock00Kernel027, rhou1_B0_p + n_x*1 + n_y * xdim3_opensbliblock00Kernel027*1);
      const ACC<double> u0_B0(xdim4_opensbliblock00Kernel027, u0_B0_p + n_x*1 + n_y * xdim4_opensbliblock00Kernel027*1);
      const ACC<double> u1_B0(xdim5_opensbliblock00Kernel027, u1_B0_p + n_x*1 + n_y * xdim5_opensbliblock00Kernel027*1);
      ACC<double> Residual0_B0(xdim6_opensbliblock00Kernel027, Residual0_B0_p + n_x*1 + n_y * xdim6_opensbliblock00Kernel027*1);
      ACC<double> Residual1_B0(xdim7_opensbliblock00Kernel027, Residual1_B0_p + n_x*1 + n_y * xdim7_opensbliblock00Kernel027*1);
      ACC<double> Residual2_B0(xdim8_opensbliblock00Kernel027, Residual2_B0_p + n_x*1 + n_y * xdim8_opensbliblock00Kernel027*1);
      ACC<double> Residual3_B0(xdim9_opensbliblock00Kernel027, Residual3_B0_p + n_x*1 + n_y * xdim9_opensbliblock00Kernel027*1);
      
   double d1_prhoEu0_dx = 0.0;
   double d1_prhoEu1_dy = 0.0;
   double d1_prhou0u0_dx = 0.0;
   double d1_prhou1u1_dy = 0.0;
   double d1_rhou0_dx = 0.0;
   double d1_rhou0u1_dy = 0.0;
   double d1_rhou1_dy = 0.0;
   double d1_rhou1u0_dx = 0.0;
   if (idx[0] == 0){

       d1_prhoEu0_dx = (-3*(p_B0(2,0) + rhoE_B0(2,0))*u0_B0(2,0) + 4*(p_B0(1,0) + rhoE_B0(1,0))*u0_B0(1,0) -
            (25.0/12.0)*(p_B0(0,0) + rhoE_B0(0,0))*u0_B0(0,0) - (1.0/4.0)*(p_B0(4,0) + rhoE_B0(4,0))*u0_B0(4,0) +
            ((4.0/3.0))*(p_B0(3,0) + rhoE_B0(3,0))*u0_B0(3,0))*invDelta0block0;

       d1_prhou0u0_dx = (-3*p_B0(2,0) + 4*p_B0(1,0) - (25.0/12.0)*p_B0(0,0) - (1.0/4.0)*p_B0(4,0) +
            ((4.0/3.0))*p_B0(3,0) - 3*u0_B0(2,0)*rhou0_B0(2,0) + 4*u0_B0(1,0)*rhou0_B0(1,0) -
            (25.0/12.0)*u0_B0(0,0)*rhou0_B0(0,0) - (1.0/4.0)*u0_B0(4,0)*rhou0_B0(4,0) +
            ((4.0/3.0))*u0_B0(3,0)*rhou0_B0(3,0))*invDelta0block0;

       d1_rhou0_dx = (-3*rhou0_B0(2,0) + 4*rhou0_B0(1,0) - (25.0/12.0)*rhou0_B0(0,0) - (1.0/4.0)*rhou0_B0(4,0) +
            ((4.0/3.0))*rhou0_B0(3,0))*invDelta0block0;

       d1_rhou1u0_dx = (-3*u0_B0(2,0)*rhou1_B0(2,0) + 4*u0_B0(1,0)*rhou1_B0(1,0) - (25.0/12.0)*u0_B0(0,0)*rhou1_B0(0,0)
            - (1.0/4.0)*u0_B0(4,0)*rhou1_B0(4,0) + ((4.0/3.0))*u0_B0(3,0)*rhou1_B0(3,0))*invDelta0block0;

   }

   else if (idx[0] == 1){

       d1_prhoEu0_dx = (-(5.0/6.0)*(p_B0(0,0) + rhoE_B0(0,0))*u0_B0(0,0) - (1.0/2.0)*(p_B0(2,0) +
            rhoE_B0(2,0))*u0_B0(2,0) - (1.0/4.0)*(p_B0(-1,0) + rhoE_B0(-1,0))*u0_B0(-1,0) + ((1.0/12.0))*(p_B0(3,0) +
            rhoE_B0(3,0))*u0_B0(3,0) + ((3.0/2.0))*(p_B0(1,0) + rhoE_B0(1,0))*u0_B0(1,0))*invDelta0block0;

       d1_prhou0u0_dx = (-(5.0/6.0)*p_B0(0,0) - (1.0/2.0)*p_B0(2,0) - (1.0/4.0)*p_B0(-1,0) + ((1.0/12.0))*p_B0(3,0) +
            ((3.0/2.0))*p_B0(1,0) - (5.0/6.0)*u0_B0(0,0)*rhou0_B0(0,0) - (1.0/2.0)*u0_B0(2,0)*rhou0_B0(2,0) -
            (1.0/4.0)*u0_B0(-1,0)*rhou0_B0(-1,0) + ((1.0/12.0))*u0_B0(3,0)*rhou0_B0(3,0) +
            ((3.0/2.0))*u0_B0(1,0)*rhou0_B0(1,0))*invDelta0block0;

       d1_rhou0_dx = (-(5.0/6.0)*rhou0_B0(0,0) - (1.0/2.0)*rhou0_B0(2,0) - (1.0/4.0)*rhou0_B0(-1,0) +
            ((1.0/12.0))*rhou0_B0(3,0) + ((3.0/2.0))*rhou0_B0(1,0))*invDelta0block0;

       d1_rhou1u0_dx = (-(5.0/6.0)*u0_B0(0,0)*rhou1_B0(0,0) - (1.0/2.0)*u0_B0(2,0)*rhou1_B0(2,0) -
            (1.0/4.0)*u0_B0(-1,0)*rhou1_B0(-1,0) + ((1.0/12.0))*u0_B0(3,0)*rhou1_B0(3,0) +
            ((3.0/2.0))*u0_B0(1,0)*rhou1_B0(1,0))*invDelta0block0;

   }

   else if (idx[0] == -1 + block0np0){

       d1_prhoEu0_dx = (-4*(p_B0(-1,0) + rhoE_B0(-1,0))*u0_B0(-1,0) + 3*(p_B0(-2,0) + rhoE_B0(-2,0))*u0_B0(-2,0) -
            (4.0/3.0)*(p_B0(-3,0) + rhoE_B0(-3,0))*u0_B0(-3,0) + ((1.0/4.0))*(p_B0(-4,0) + rhoE_B0(-4,0))*u0_B0(-4,0) +
            ((25.0/12.0))*(p_B0(0,0) + rhoE_B0(0,0))*u0_B0(0,0))*invDelta0block0;

       d1_prhou0u0_dx = (-4*p_B0(-1,0) + 3*p_B0(-2,0) - (4.0/3.0)*p_B0(-3,0) + ((1.0/4.0))*p_B0(-4,0) +
            ((25.0/12.0))*p_B0(0,0) - 4*u0_B0(-1,0)*rhou0_B0(-1,0) + 3*u0_B0(-2,0)*rhou0_B0(-2,0) -
            (4.0/3.0)*u0_B0(-3,0)*rhou0_B0(-3,0) + ((1.0/4.0))*u0_B0(-4,0)*rhou0_B0(-4,0) +
            ((25.0/12.0))*u0_B0(0,0)*rhou0_B0(0,0))*invDelta0block0;

       d1_rhou0_dx = (-4*rhou0_B0(-1,0) + 3*rhou0_B0(-2,0) - (4.0/3.0)*rhou0_B0(-3,0) + ((1.0/4.0))*rhou0_B0(-4,0) +
            ((25.0/12.0))*rhou0_B0(0,0))*invDelta0block0;

       d1_rhou1u0_dx = (-4*u0_B0(-1,0)*rhou1_B0(-1,0) + 3*u0_B0(-2,0)*rhou1_B0(-2,0) -
            (4.0/3.0)*u0_B0(-3,0)*rhou1_B0(-3,0) + ((1.0/4.0))*u0_B0(-4,0)*rhou1_B0(-4,0) +
            ((25.0/12.0))*u0_B0(0,0)*rhou1_B0(0,0))*invDelta0block0;

   }

   else if (idx[0] == -2 + block0np0){

       d1_prhoEu0_dx = (((1.0/2.0))*(p_B0(-2,0) + rhoE_B0(-2,0))*u0_B0(-2,0) - (3.0/2.0)*(p_B0(-1,0) +
            rhoE_B0(-1,0))*u0_B0(-1,0) - (1.0/12.0)*(p_B0(-3,0) + rhoE_B0(-3,0))*u0_B0(-3,0) + ((1.0/4.0))*(p_B0(1,0) +
            rhoE_B0(1,0))*u0_B0(1,0) + ((5.0/6.0))*(p_B0(0,0) + rhoE_B0(0,0))*u0_B0(0,0))*invDelta0block0;

       d1_prhou0u0_dx = (((1.0/2.0))*p_B0(-2,0) - (3.0/2.0)*p_B0(-1,0) - (1.0/12.0)*p_B0(-3,0) + ((1.0/4.0))*p_B0(1,0) +
            ((5.0/6.0))*p_B0(0,0) + ((1.0/2.0))*u0_B0(-2,0)*rhou0_B0(-2,0) - (3.0/2.0)*u0_B0(-1,0)*rhou0_B0(-1,0) -
            (1.0/12.0)*u0_B0(-3,0)*rhou0_B0(-3,0) + ((1.0/4.0))*u0_B0(1,0)*rhou0_B0(1,0) +
            ((5.0/6.0))*u0_B0(0,0)*rhou0_B0(0,0))*invDelta0block0;

       d1_rhou0_dx = (((1.0/2.0))*rhou0_B0(-2,0) - (3.0/2.0)*rhou0_B0(-1,0) - (1.0/12.0)*rhou0_B0(-3,0) +
            ((1.0/4.0))*rhou0_B0(1,0) + ((5.0/6.0))*rhou0_B0(0,0))*invDelta0block0;

       d1_rhou1u0_dx = (((1.0/2.0))*u0_B0(-2,0)*rhou1_B0(-2,0) - (3.0/2.0)*u0_B0(-1,0)*rhou1_B0(-1,0) -
            (1.0/12.0)*u0_B0(-3,0)*rhou1_B0(-3,0) + ((1.0/4.0))*u0_B0(1,0)*rhou1_B0(1,0) +
            ((5.0/6.0))*u0_B0(0,0)*rhou1_B0(0,0))*invDelta0block0;

   }

   else{

       d1_prhoEu0_dx = (-(2.0/3.0)*(p_B0(-1,0) + rhoE_B0(-1,0))*u0_B0(-1,0) - (1.0/12.0)*(p_B0(2,0) +
            rhoE_B0(2,0))*u0_B0(2,0) + ((1.0/12.0))*(p_B0(-2,0) + rhoE_B0(-2,0))*u0_B0(-2,0) + ((2.0/3.0))*(p_B0(1,0) +
            rhoE_B0(1,0))*u0_B0(1,0))*invDelta0block0;

       d1_prhou0u0_dx = (-(2.0/3.0)*p_B0(-1,0) - (1.0/12.0)*p_B0(2,0) + ((1.0/12.0))*p_B0(-2,0) + ((2.0/3.0))*p_B0(1,0)
            - (2.0/3.0)*u0_B0(-1,0)*rhou0_B0(-1,0) - (1.0/12.0)*u0_B0(2,0)*rhou0_B0(2,0) +
            ((1.0/12.0))*u0_B0(-2,0)*rhou0_B0(-2,0) + ((2.0/3.0))*u0_B0(1,0)*rhou0_B0(1,0))*invDelta0block0;

       d1_rhou0_dx = (-(2.0/3.0)*rhou0_B0(-1,0) - (1.0/12.0)*rhou0_B0(2,0) + ((1.0/12.0))*rhou0_B0(-2,0) +
            ((2.0/3.0))*rhou0_B0(1,0))*invDelta0block0;

       d1_rhou1u0_dx = (-(2.0/3.0)*u0_B0(-1,0)*rhou1_B0(-1,0) - (1.0/12.0)*u0_B0(2,0)*rhou1_B0(2,0) +
            ((1.0/12.0))*u0_B0(-2,0)*rhou1_B0(-2,0) + ((2.0/3.0))*u0_B0(1,0)*rhou1_B0(1,0))*invDelta0block0;

   }

   if (idx[1] == 0){

       d1_prhoEu1_dy = (-3*(p_B0(0,2) + rhoE_B0(0,2))*u1_B0(0,2) + 4*(p_B0(0,1) + rhoE_B0(0,1))*u1_B0(0,1) -
            (25.0/12.0)*(p_B0(0,0) + rhoE_B0(0,0))*u1_B0(0,0) - (1.0/4.0)*(p_B0(0,4) + rhoE_B0(0,4))*u1_B0(0,4) +
            ((4.0/3.0))*(p_B0(0,3) + rhoE_B0(0,3))*u1_B0(0,3))*invDelta1block0;

       d1_prhou1u1_dy = (-3*p_B0(0,2) + 4*p_B0(0,1) - (25.0/12.0)*p_B0(0,0) - (1.0/4.0)*p_B0(0,4) +
            ((4.0/3.0))*p_B0(0,3) - 3*u1_B0(0,2)*rhou1_B0(0,2) + 4*u1_B0(0,1)*rhou1_B0(0,1) -
            (25.0/12.0)*u1_B0(0,0)*rhou1_B0(0,0) - (1.0/4.0)*u1_B0(0,4)*rhou1_B0(0,4) +
            ((4.0/3.0))*u1_B0(0,3)*rhou1_B0(0,3))*invDelta1block0;

       d1_rhou0u1_dy = (-3*u1_B0(0,2)*rhou0_B0(0,2) + 4*u1_B0(0,1)*rhou0_B0(0,1) - (25.0/12.0)*u1_B0(0,0)*rhou0_B0(0,0)
            - (1.0/4.0)*u1_B0(0,4)*rhou0_B0(0,4) + ((4.0/3.0))*u1_B0(0,3)*rhou0_B0(0,3))*invDelta1block0;

       d1_rhou1_dy = (-3*rhou1_B0(0,2) + 4*rhou1_B0(0,1) - (25.0/12.0)*rhou1_B0(0,0) - (1.0/4.0)*rhou1_B0(0,4) +
            ((4.0/3.0))*rhou1_B0(0,3))*invDelta1block0;

   }

   else if (idx[1] == 1){

       d1_prhoEu1_dy = (-(5.0/6.0)*(p_B0(0,0) + rhoE_B0(0,0))*u1_B0(0,0) - (1.0/2.0)*(p_B0(0,2) +
            rhoE_B0(0,2))*u1_B0(0,2) - (1.0/4.0)*(p_B0(0,-1) + rhoE_B0(0,-1))*u1_B0(0,-1) + ((1.0/12.0))*(p_B0(0,3) +
            rhoE_B0(0,3))*u1_B0(0,3) + ((3.0/2.0))*(p_B0(0,1) + rhoE_B0(0,1))*u1_B0(0,1))*invDelta1block0;

       d1_prhou1u1_dy = (-(5.0/6.0)*p_B0(0,0) - (1.0/2.0)*p_B0(0,2) - (1.0/4.0)*p_B0(0,-1) + ((1.0/12.0))*p_B0(0,3) +
            ((3.0/2.0))*p_B0(0,1) - (5.0/6.0)*u1_B0(0,0)*rhou1_B0(0,0) - (1.0/2.0)*u1_B0(0,2)*rhou1_B0(0,2) -
            (1.0/4.0)*u1_B0(0,-1)*rhou1_B0(0,-1) + ((1.0/12.0))*u1_B0(0,3)*rhou1_B0(0,3) +
            ((3.0/2.0))*u1_B0(0,1)*rhou1_B0(0,1))*invDelta1block0;

       d1_rhou0u1_dy = (-(5.0/6.0)*u1_B0(0,0)*rhou0_B0(0,0) - (1.0/2.0)*u1_B0(0,2)*rhou0_B0(0,2) -
            (1.0/4.0)*u1_B0(0,-1)*rhou0_B0(0,-1) + ((1.0/12.0))*u1_B0(0,3)*rhou0_B0(0,3) +
            ((3.0/2.0))*u1_B0(0,1)*rhou0_B0(0,1))*invDelta1block0;

       d1_rhou1_dy = (-(5.0/6.0)*rhou1_B0(0,0) - (1.0/2.0)*rhou1_B0(0,2) - (1.0/4.0)*rhou1_B0(0,-1) +
            ((1.0/12.0))*rhou1_B0(0,3) + ((3.0/2.0))*rhou1_B0(0,1))*invDelta1block0;

   }

   else{

       d1_prhoEu1_dy = (-(2.0/3.0)*(p_B0(0,-1) + rhoE_B0(0,-1))*u1_B0(0,-1) - (1.0/12.0)*(p_B0(0,2) +
            rhoE_B0(0,2))*u1_B0(0,2) + ((1.0/12.0))*(p_B0(0,-2) + rhoE_B0(0,-2))*u1_B0(0,-2) + ((2.0/3.0))*(p_B0(0,1) +
            rhoE_B0(0,1))*u1_B0(0,1))*invDelta1block0;

       d1_prhou1u1_dy = (-(2.0/3.0)*p_B0(0,-1) - (1.0/12.0)*p_B0(0,2) + ((1.0/12.0))*p_B0(0,-2) + ((2.0/3.0))*p_B0(0,1)
            - (2.0/3.0)*u1_B0(0,-1)*rhou1_B0(0,-1) - (1.0/12.0)*u1_B0(0,2)*rhou1_B0(0,2) +
            ((1.0/12.0))*u1_B0(0,-2)*rhou1_B0(0,-2) + ((2.0/3.0))*u1_B0(0,1)*rhou1_B0(0,1))*invDelta1block0;

       d1_rhou0u1_dy = (-(2.0/3.0)*u1_B0(0,-1)*rhou0_B0(0,-1) - (1.0/12.0)*u1_B0(0,2)*rhou0_B0(0,2) +
            ((1.0/12.0))*u1_B0(0,-2)*rhou0_B0(0,-2) + ((2.0/3.0))*u1_B0(0,1)*rhou0_B0(0,1))*invDelta1block0;

       d1_rhou1_dy = (-(2.0/3.0)*rhou1_B0(0,-1) - (1.0/12.0)*rhou1_B0(0,2) + ((1.0/12.0))*rhou1_B0(0,-2) +
            ((2.0/3.0))*rhou1_B0(0,1))*invDelta1block0;

   }

   Residual0_B0(0,0) = -d1_rhou0_dx - d1_rhou1_dy;

   Residual1_B0(0,0) = -d1_prhou0u0_dx - d1_rhou0u1_dy;

   Residual2_B0(0,0) = -d1_prhou1u1_dy - d1_rhou1u0_dx;

   Residual3_B0(0,0) = -d1_prhoEu0_dx - d1_prhoEu1_dy;


    }
  }
  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[15].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_host(args, 11);
  ops_set_halo_dirtybit3(&args[6],range);
  ops_set_halo_dirtybit3(&args[7],range);
  ops_set_halo_dirtybit3(&args[8],range);
  ops_set_halo_dirtybit3(&args[9],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[15].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[15].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[15].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[15].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[15].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[15].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[15].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[15].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[15].transfer += ops_compute_transfer(dim, start, end, &arg7);
    block->instance->OPS_kernels[15].transfer += ops_compute_transfer(dim, start, end, &arg8);
    block->instance->OPS_kernels[15].transfer += ops_compute_transfer(dim, start, end, &arg9);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel027(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10) {
  ops_arg args[11] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10 };

  //create kernel descriptor and pass it to ops_enqueue_kernel
  create_kerneldesc_and_enque(name, args, 11, 15, dim, 0, range, block, ops_par_loop_opensbliblock00Kernel027_execute);
}
#endif
