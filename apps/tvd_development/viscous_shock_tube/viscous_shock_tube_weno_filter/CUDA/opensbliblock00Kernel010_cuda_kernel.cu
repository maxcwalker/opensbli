//
// auto-generated by ops.py
//
__constant__ int dims_opensbliblock00Kernel010 [15][1];
static int dims_opensbliblock00Kernel010_h [15][1] = {{0}};

//user function
__device__

 void opensbliblock00Kernel010_gpu(const ACC<double> &Residual0_B0,
  const ACC<double> &Residual1_B0,
  const ACC<double>
&Residual2_B0,
  const ACC<double> &Residual3_B0,
  const ACC<double> &kappa_B0,
  const ACC<double> &wk0_B0,
  const
ACC<double> &wk1_B0,
  const ACC<double> &wk2_B0,
  const ACC<double> &wk3_B0,
  ACC<double> &WENO_filter_B0,
  ACC<double>
&rhoE_B0,
  ACC<double> &rho_B0,
  ACC<double> &rhou0_B0,
  ACC<double> &rhou1_B0,
  const int *idx)
{
   double Grid_0 = 0.0;
   double Grid_1 = 0.0;
   double Wall = 0.0;
   Grid_0 = idx[0];

   Grid_1 = idx[1];

   Wall = ((Grid_0 >= -6 + block0np0 || Grid_0 <= 5 || Grid_1 <= 5) ? (
   0
)
: (
   1
));

    WENO_filter_B0(0,0) = ((fmax(kappa_B0(0,1), fmax(kappa_B0(2,0), fmax(kappa_B0(1,0), fmax(kappa_B0(-1,0),
      fmax(kappa_B0(0,0), fmax(kappa_B0(0,2), kappa_B0(0,-1))))))) >= Ducros_select) ? (
   1
)
: (
   0.0
));

    rho_B0(0,0) = (-(-wk0_B0(-1,0) + wk0_B0(0,0))*inv_rfact0_block0 - (-Residual0_B0(0,-1) +
      Residual0_B0(0,0))*inv_rfact1_block0*Wall)*dt*WENO_filter_B0(0,0) + rho_B0(0,0);

    rhou0_B0(0,0) = (-(-wk1_B0(-1,0) + wk1_B0(0,0))*inv_rfact0_block0 - (-Residual1_B0(0,-1) +
      Residual1_B0(0,0))*inv_rfact1_block0*Wall)*dt*WENO_filter_B0(0,0) + rhou0_B0(0,0);

    rhou1_B0(0,0) = (-(-wk2_B0(-1,0) + wk2_B0(0,0))*inv_rfact0_block0 - (-Residual2_B0(0,-1) +
      Residual2_B0(0,0))*inv_rfact1_block0*Wall)*dt*WENO_filter_B0(0,0) + rhou1_B0(0,0);

    rhoE_B0(0,0) = (-(-wk3_B0(-1,0) + wk3_B0(0,0))*inv_rfact0_block0 - (-Residual3_B0(0,-1) +
      Residual3_B0(0,0))*inv_rfact1_block0*Wall)*dt*WENO_filter_B0(0,0) + rhoE_B0(0,0);

}



__global__ void ops_opensbliblock00Kernel010(
double* __restrict arg0,
double* __restrict arg1,
double* __restrict arg2,
double* __restrict arg3,
double* __restrict arg4,
double* __restrict arg5,
double* __restrict arg6,
double* __restrict arg7,
double* __restrict arg8,
double* __restrict arg9,
double* __restrict arg10,
double* __restrict arg11,
double* __restrict arg12,
double* __restrict arg13,
int arg_idx0, int arg_idx1,
int size0,
int size1 ){


  int idx_y = blockDim.y * blockIdx.y + threadIdx.y;
  int idx_x = blockDim.x * blockIdx.x + threadIdx.x;

  int arg_idx[2];
  arg_idx[0] = arg_idx0+idx_x;
  arg_idx[1] = arg_idx1+idx_y;
  arg0 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel010[0][0];
  arg1 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel010[1][0];
  arg2 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel010[2][0];
  arg3 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel010[3][0];
  arg4 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel010[4][0];
  arg5 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel010[5][0];
  arg6 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel010[6][0];
  arg7 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel010[7][0];
  arg8 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel010[8][0];
  arg9 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel010[9][0];
  arg10 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel010[10][0];
  arg11 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel010[11][0];
  arg12 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel010[12][0];
  arg13 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel010[13][0];

  if (idx_x < size0 && idx_y < size1) {
    const ACC<double> argp0(dims_opensbliblock00Kernel010[0][0], arg0);
    const ACC<double> argp1(dims_opensbliblock00Kernel010[1][0], arg1);
    const ACC<double> argp2(dims_opensbliblock00Kernel010[2][0], arg2);
    const ACC<double> argp3(dims_opensbliblock00Kernel010[3][0], arg3);
    const ACC<double> argp4(dims_opensbliblock00Kernel010[4][0], arg4);
    const ACC<double> argp5(dims_opensbliblock00Kernel010[5][0], arg5);
    const ACC<double> argp6(dims_opensbliblock00Kernel010[6][0], arg6);
    const ACC<double> argp7(dims_opensbliblock00Kernel010[7][0], arg7);
    const ACC<double> argp8(dims_opensbliblock00Kernel010[8][0], arg8);
    ACC<double> argp9(dims_opensbliblock00Kernel010[9][0], arg9);
    ACC<double> argp10(dims_opensbliblock00Kernel010[10][0], arg10);
    ACC<double> argp11(dims_opensbliblock00Kernel010[11][0], arg11);
    ACC<double> argp12(dims_opensbliblock00Kernel010[12][0], arg12);
    ACC<double> argp13(dims_opensbliblock00Kernel010[13][0], arg13);
    opensbliblock00Kernel010_gpu(
     argp0, argp1, argp2, argp3, argp4,
     argp5, argp6, argp7, argp8, argp9,
     argp10, argp11, argp12, argp13, arg_idx);
  }

}

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel010(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11,
 ops_arg arg12, ops_arg arg13, ops_arg arg14) {
#else
void ops_par_loop_opensbliblock00Kernel010_execute(ops_kernel_descriptor *desc) {
  int dim = desc->dim;
  #if OPS_MPI
  ops_block block = desc->block;
  #endif
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  ops_arg arg9 = desc->args[9];
  ops_arg arg10 = desc->args[10];
  ops_arg arg11 = desc->args[11];
  ops_arg arg12 = desc->args[12];
  ops_arg arg13 = desc->args[13];
  ops_arg arg14 = desc->args[14];
  #endif

  //Timing
  double t1,t2,c1,c2;

  ops_arg args[15] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14};


  #if CHECKPOINTING && !OPS_LAZY
  if (!ops_checkpointing_before(args,15,range,23)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,23,"opensbliblock00Kernel010");
    block->instance->OPS_kernels[23].count++;
    ops_timers_core(&c1,&t1);
  }

  //compute locally allocated range for the sub-block
  int start[2];
  int end[2];

  int arg_idx[2];
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<2; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 15,block, range, start, end, arg_idx) < 0) return;
  #endif

  #if defined(OPS_MPI)
  #if defined(OPS_LAZY)
  sub_block_list sb = OPS_sub_block_list[block->index];
  arg_idx[0] = sb->decomp_disp[0]+start[0];
  arg_idx[1] = sb->decomp_disp[1]+start[1];
  #endif
  #else //OPS_MPI
  arg_idx[0] = start[0];
  arg_idx[1] = start[1];
  #endif //OPS_MPI
  int xdim0 = args[0].dat->size[0];
  int xdim1 = args[1].dat->size[0];
  int xdim2 = args[2].dat->size[0];
  int xdim3 = args[3].dat->size[0];
  int xdim4 = args[4].dat->size[0];
  int xdim5 = args[5].dat->size[0];
  int xdim6 = args[6].dat->size[0];
  int xdim7 = args[7].dat->size[0];
  int xdim8 = args[8].dat->size[0];
  int xdim9 = args[9].dat->size[0];
  int xdim10 = args[10].dat->size[0];
  int xdim11 = args[11].dat->size[0];
  int xdim12 = args[12].dat->size[0];
  int xdim13 = args[13].dat->size[0];

  if (xdim0 != dims_opensbliblock00Kernel010_h[0][0] || xdim1 != dims_opensbliblock00Kernel010_h[1][0] || xdim2 != dims_opensbliblock00Kernel010_h[2][0] || xdim3 != dims_opensbliblock00Kernel010_h[3][0] || xdim4 != dims_opensbliblock00Kernel010_h[4][0] || xdim5 != dims_opensbliblock00Kernel010_h[5][0] || xdim6 != dims_opensbliblock00Kernel010_h[6][0] || xdim7 != dims_opensbliblock00Kernel010_h[7][0] || xdim8 != dims_opensbliblock00Kernel010_h[8][0] || xdim9 != dims_opensbliblock00Kernel010_h[9][0] || xdim10 != dims_opensbliblock00Kernel010_h[10][0] || xdim11 != dims_opensbliblock00Kernel010_h[11][0] || xdim12 != dims_opensbliblock00Kernel010_h[12][0] || xdim13 != dims_opensbliblock00Kernel010_h[13][0]) {
    dims_opensbliblock00Kernel010_h[0][0] = xdim0;
    dims_opensbliblock00Kernel010_h[1][0] = xdim1;
    dims_opensbliblock00Kernel010_h[2][0] = xdim2;
    dims_opensbliblock00Kernel010_h[3][0] = xdim3;
    dims_opensbliblock00Kernel010_h[4][0] = xdim4;
    dims_opensbliblock00Kernel010_h[5][0] = xdim5;
    dims_opensbliblock00Kernel010_h[6][0] = xdim6;
    dims_opensbliblock00Kernel010_h[7][0] = xdim7;
    dims_opensbliblock00Kernel010_h[8][0] = xdim8;
    dims_opensbliblock00Kernel010_h[9][0] = xdim9;
    dims_opensbliblock00Kernel010_h[10][0] = xdim10;
    dims_opensbliblock00Kernel010_h[11][0] = xdim11;
    dims_opensbliblock00Kernel010_h[12][0] = xdim12;
    dims_opensbliblock00Kernel010_h[13][0] = xdim13;
    cutilSafeCall(block->instance->ostream(), cudaMemcpyToSymbol( dims_opensbliblock00Kernel010, dims_opensbliblock00Kernel010_h, sizeof(dims_opensbliblock00Kernel010)));
  }



  int x_size = MAX(0,end[0]-start[0]);
  int y_size = MAX(0,end[1]-start[1]);

  dim3 grid( (x_size-1)/block->instance->OPS_block_size_x+ 1, (y_size-1)/block->instance->OPS_block_size_y + 1, 1);
  dim3 tblock(block->instance->OPS_block_size_x,block->instance->OPS_block_size_y,block->instance->OPS_block_size_z);



  long long int dat0 = (block->instance->OPS_soa ? args[0].dat->type_size : args[0].dat->elem_size);
  long long int dat1 = (block->instance->OPS_soa ? args[1].dat->type_size : args[1].dat->elem_size);
  long long int dat2 = (block->instance->OPS_soa ? args[2].dat->type_size : args[2].dat->elem_size);
  long long int dat3 = (block->instance->OPS_soa ? args[3].dat->type_size : args[3].dat->elem_size);
  long long int dat4 = (block->instance->OPS_soa ? args[4].dat->type_size : args[4].dat->elem_size);
  long long int dat5 = (block->instance->OPS_soa ? args[5].dat->type_size : args[5].dat->elem_size);
  long long int dat6 = (block->instance->OPS_soa ? args[6].dat->type_size : args[6].dat->elem_size);
  long long int dat7 = (block->instance->OPS_soa ? args[7].dat->type_size : args[7].dat->elem_size);
  long long int dat8 = (block->instance->OPS_soa ? args[8].dat->type_size : args[8].dat->elem_size);
  long long int dat9 = (block->instance->OPS_soa ? args[9].dat->type_size : args[9].dat->elem_size);
  long long int dat10 = (block->instance->OPS_soa ? args[10].dat->type_size : args[10].dat->elem_size);
  long long int dat11 = (block->instance->OPS_soa ? args[11].dat->type_size : args[11].dat->elem_size);
  long long int dat12 = (block->instance->OPS_soa ? args[12].dat->type_size : args[12].dat->elem_size);
  long long int dat13 = (block->instance->OPS_soa ? args[13].dat->type_size : args[13].dat->elem_size);

  char *p_a[15];

  //set up initial pointers
  long long int base0 = args[0].dat->base_offset + 
           dat0 * 1 * (start[0] * args[0].stencil->stride[0]);
  base0 = base0+ dat0 *
    args[0].dat->size[0] *
    (start[1] * args[0].stencil->stride[1]);
  p_a[0] = (char *)args[0].data_d + base0;

  long long int base1 = args[1].dat->base_offset + 
           dat1 * 1 * (start[0] * args[1].stencil->stride[0]);
  base1 = base1+ dat1 *
    args[1].dat->size[0] *
    (start[1] * args[1].stencil->stride[1]);
  p_a[1] = (char *)args[1].data_d + base1;

  long long int base2 = args[2].dat->base_offset + 
           dat2 * 1 * (start[0] * args[2].stencil->stride[0]);
  base2 = base2+ dat2 *
    args[2].dat->size[0] *
    (start[1] * args[2].stencil->stride[1]);
  p_a[2] = (char *)args[2].data_d + base2;

  long long int base3 = args[3].dat->base_offset + 
           dat3 * 1 * (start[0] * args[3].stencil->stride[0]);
  base3 = base3+ dat3 *
    args[3].dat->size[0] *
    (start[1] * args[3].stencil->stride[1]);
  p_a[3] = (char *)args[3].data_d + base3;

  long long int base4 = args[4].dat->base_offset + 
           dat4 * 1 * (start[0] * args[4].stencil->stride[0]);
  base4 = base4+ dat4 *
    args[4].dat->size[0] *
    (start[1] * args[4].stencil->stride[1]);
  p_a[4] = (char *)args[4].data_d + base4;

  long long int base5 = args[5].dat->base_offset + 
           dat5 * 1 * (start[0] * args[5].stencil->stride[0]);
  base5 = base5+ dat5 *
    args[5].dat->size[0] *
    (start[1] * args[5].stencil->stride[1]);
  p_a[5] = (char *)args[5].data_d + base5;

  long long int base6 = args[6].dat->base_offset + 
           dat6 * 1 * (start[0] * args[6].stencil->stride[0]);
  base6 = base6+ dat6 *
    args[6].dat->size[0] *
    (start[1] * args[6].stencil->stride[1]);
  p_a[6] = (char *)args[6].data_d + base6;

  long long int base7 = args[7].dat->base_offset + 
           dat7 * 1 * (start[0] * args[7].stencil->stride[0]);
  base7 = base7+ dat7 *
    args[7].dat->size[0] *
    (start[1] * args[7].stencil->stride[1]);
  p_a[7] = (char *)args[7].data_d + base7;

  long long int base8 = args[8].dat->base_offset + 
           dat8 * 1 * (start[0] * args[8].stencil->stride[0]);
  base8 = base8+ dat8 *
    args[8].dat->size[0] *
    (start[1] * args[8].stencil->stride[1]);
  p_a[8] = (char *)args[8].data_d + base8;

  long long int base9 = args[9].dat->base_offset + 
           dat9 * 1 * (start[0] * args[9].stencil->stride[0]);
  base9 = base9+ dat9 *
    args[9].dat->size[0] *
    (start[1] * args[9].stencil->stride[1]);
  p_a[9] = (char *)args[9].data_d + base9;

  long long int base10 = args[10].dat->base_offset + 
           dat10 * 1 * (start[0] * args[10].stencil->stride[0]);
  base10 = base10+ dat10 *
    args[10].dat->size[0] *
    (start[1] * args[10].stencil->stride[1]);
  p_a[10] = (char *)args[10].data_d + base10;

  long long int base11 = args[11].dat->base_offset + 
           dat11 * 1 * (start[0] * args[11].stencil->stride[0]);
  base11 = base11+ dat11 *
    args[11].dat->size[0] *
    (start[1] * args[11].stencil->stride[1]);
  p_a[11] = (char *)args[11].data_d + base11;

  long long int base12 = args[12].dat->base_offset + 
           dat12 * 1 * (start[0] * args[12].stencil->stride[0]);
  base12 = base12+ dat12 *
    args[12].dat->size[0] *
    (start[1] * args[12].stencil->stride[1]);
  p_a[12] = (char *)args[12].data_d + base12;

  long long int base13 = args[13].dat->base_offset + 
           dat13 * 1 * (start[0] * args[13].stencil->stride[0]);
  base13 = base13+ dat13 *
    args[13].dat->size[0] *
    (start[1] * args[13].stencil->stride[1]);
  p_a[13] = (char *)args[13].data_d + base13;


  #ifndef OPS_LAZY
  ops_H_D_exchanges_device(args, 15);
  ops_halo_exchanges(args,15,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[23].mpi_time += t2-t1;
  }


  //call kernel wrapper function, passing in pointers to data
  if (x_size > 0 && y_size > 0)
    ops_opensbliblock00Kernel010<<<grid, tblock >>> ( 
     (double *)p_a[0], (double *)p_a[1],
     (double *)p_a[2], (double *)p_a[3],
     (double *)p_a[4], (double *)p_a[5],
     (double *)p_a[6], (double *)p_a[7],
     (double *)p_a[8], (double *)p_a[9],
     (double *)p_a[10], (double *)p_a[11],
     (double *)p_a[12], (double *)p_a[13],
     arg_idx[0], arg_idx[1],
    x_size, y_size);

  cutilSafeCall(block->instance->ostream(), cudaGetLastError());

  if (block->instance->OPS_diags>1) {
    cutilSafeCall(block->instance->ostream(), cudaDeviceSynchronize());
    ops_timers_core(&c1,&t1);
    block->instance->OPS_kernels[23].time += t1-t2;
  }

  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 15);
  ops_set_halo_dirtybit3(&args[9],range);
  ops_set_halo_dirtybit3(&args[10],range);
  ops_set_halo_dirtybit3(&args[11],range);
  ops_set_halo_dirtybit3(&args[12],range);
  ops_set_halo_dirtybit3(&args[13],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[23].mpi_time += t2-t1;
    block->instance->OPS_kernels[23].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[23].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[23].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[23].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[23].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[23].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[23].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[23].transfer += ops_compute_transfer(dim, start, end, &arg7);
    block->instance->OPS_kernels[23].transfer += ops_compute_transfer(dim, start, end, &arg8);
    block->instance->OPS_kernels[23].transfer += ops_compute_transfer(dim, start, end, &arg9);
    block->instance->OPS_kernels[23].transfer += ops_compute_transfer(dim, start, end, &arg10);
    block->instance->OPS_kernels[23].transfer += ops_compute_transfer(dim, start, end, &arg11);
    block->instance->OPS_kernels[23].transfer += ops_compute_transfer(dim, start, end, &arg12);
    block->instance->OPS_kernels[23].transfer += ops_compute_transfer(dim, start, end, &arg13);
  }
}

#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel010(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11,
 ops_arg arg12, ops_arg arg13, ops_arg arg14) {
  ops_arg args[15] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14 };

  //create kernel descriptor and pass it to ops_enqueue_kernel
  create_kerneldesc_and_enque(name, args, 15, 23, dim, 1, range, block, ops_par_loop_opensbliblock00Kernel010_execute);
}
#endif
