//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel006(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11,
 ops_arg arg12) {
#else
void ops_par_loop_opensbliblock00Kernel006_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  ops_arg arg9 = desc->args[9];
  ops_arg arg10 = desc->args[10];
  ops_arg arg11 = desc->args[11];
  ops_arg arg12 = desc->args[12];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[13] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,13,range,21)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,21,"opensbliblock00Kernel006");
    block->instance->OPS_kernels[21].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "opensbliblock00Kernel006");
  #endif


  //compute locally allocated range for the sub-block
  int start[2];
  int end[2];
  int arg_idx[2];
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<2; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 13,block, range, start, end, arg_idx) < 0) return;
  #endif

  int start0 = start[0];
  int end0 = end[0];
  int start1 = start[1];
  int end1 = end[1];

  #if defined(OPS_MPI)
  #if defined(OPS_LAZY)
  sub_block_list sb = OPS_sub_block_list[block->index];
  arg_idx[0] = sb->decomp_disp[0];
  arg_idx[1] = sb->decomp_disp[1];
  #else
  arg_idx[0] -= start[0];
  arg_idx[1] -= start[1];
  #endif
  #else //OPS_MPI
  arg_idx[0] = 0;
  arg_idx[1] = 0;
  #endif //OPS_MPI

  //initialize global variable with the dimension of dats
  int xdim0_opensbliblock00Kernel006 = args[0].dat->size[0];
  int xdim1_opensbliblock00Kernel006 = args[1].dat->size[0];
  int xdim2_opensbliblock00Kernel006 = args[2].dat->size[0];
  int xdim3_opensbliblock00Kernel006 = args[3].dat->size[0];
  int xdim4_opensbliblock00Kernel006 = args[4].dat->size[0];
  int xdim5_opensbliblock00Kernel006 = args[5].dat->size[0];
  int xdim6_opensbliblock00Kernel006 = args[6].dat->size[0];
  int xdim7_opensbliblock00Kernel006 = args[7].dat->size[0];
  int xdim8_opensbliblock00Kernel006 = args[8].dat->size[0];
  int xdim9_opensbliblock00Kernel006 = args[9].dat->size[0];
  int xdim10_opensbliblock00Kernel006 = args[10].dat->size[0];
  int xdim11_opensbliblock00Kernel006 = args[11].dat->size[0];

  //set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset;
  double * __restrict__ Residual0_B0_p = (double *)(args[0].data_d + base0);

  int base1 = args[1].dat->base_offset;
  double * __restrict__ Residual1_B0_p = (double *)(args[1].data_d + base1);

  int base2 = args[2].dat->base_offset;
  double * __restrict__ Residual2_B0_p = (double *)(args[2].data_d + base2);

  int base3 = args[3].dat->base_offset;
  double * __restrict__ Residual3_B0_p = (double *)(args[3].data_d + base3);

  int base4 = args[4].dat->base_offset;
  double * __restrict__ wk0_B0_p = (double *)(args[4].data_d + base4);

  int base5 = args[5].dat->base_offset;
  double * __restrict__ wk1_B0_p = (double *)(args[5].data_d + base5);

  int base6 = args[6].dat->base_offset;
  double * __restrict__ wk2_B0_p = (double *)(args[6].data_d + base6);

  int base7 = args[7].dat->base_offset;
  double * __restrict__ wk3_B0_p = (double *)(args[7].data_d + base7);

  int base8 = args[8].dat->base_offset;
  double * __restrict__ rhoE_B0_p = (double *)(args[8].data_d + base8);

  int base9 = args[9].dat->base_offset;
  double * __restrict__ rho_B0_p = (double *)(args[9].data_d + base9);

  int base10 = args[10].dat->base_offset;
  double * __restrict__ rhou0_B0_p = (double *)(args[10].data_d + base10);

  int base11 = args[11].dat->base_offset;
  double * __restrict__ rhou1_B0_p = (double *)(args[11].data_d + base11);




  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_device(args, 13);
  ops_halo_exchanges(args,13,range);
  ops_H_D_exchanges_device(args, 13);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[21].mpi_time += __t1-__t2;
  }

  #pragma omp target teams distribute parallel for collapse(2)
  for ( int n_y=start1; n_y<end1; n_y++ ){
    for ( int n_x=start0; n_x<end0; n_x++ ){
      int idx[] = {arg_idx[0]+n_x, arg_idx[1]+n_y};
      const ACC<double> Residual0_B0(xdim0_opensbliblock00Kernel006, Residual0_B0_p + n_x*1 + n_y * xdim0_opensbliblock00Kernel006*1);
      const ACC<double> Residual1_B0(xdim1_opensbliblock00Kernel006, Residual1_B0_p + n_x*1 + n_y * xdim1_opensbliblock00Kernel006*1);
      const ACC<double> Residual2_B0(xdim2_opensbliblock00Kernel006, Residual2_B0_p + n_x*1 + n_y * xdim2_opensbliblock00Kernel006*1);
      const ACC<double> Residual3_B0(xdim3_opensbliblock00Kernel006, Residual3_B0_p + n_x*1 + n_y * xdim3_opensbliblock00Kernel006*1);
      const ACC<double> wk0_B0(xdim4_opensbliblock00Kernel006, wk0_B0_p + n_x*1 + n_y * xdim4_opensbliblock00Kernel006*1);
      const ACC<double> wk1_B0(xdim5_opensbliblock00Kernel006, wk1_B0_p + n_x*1 + n_y * xdim5_opensbliblock00Kernel006*1);
      const ACC<double> wk2_B0(xdim6_opensbliblock00Kernel006, wk2_B0_p + n_x*1 + n_y * xdim6_opensbliblock00Kernel006*1);
      const ACC<double> wk3_B0(xdim7_opensbliblock00Kernel006, wk3_B0_p + n_x*1 + n_y * xdim7_opensbliblock00Kernel006*1);
      ACC<double> rhoE_B0(xdim8_opensbliblock00Kernel006, rhoE_B0_p + n_x*1 + n_y * xdim8_opensbliblock00Kernel006*1);
      ACC<double> rho_B0(xdim9_opensbliblock00Kernel006, rho_B0_p + n_x*1 + n_y * xdim9_opensbliblock00Kernel006*1);
      ACC<double> rhou0_B0(xdim10_opensbliblock00Kernel006, rhou0_B0_p + n_x*1 + n_y * xdim10_opensbliblock00Kernel006*1);
      ACC<double> rhou1_B0(xdim11_opensbliblock00Kernel006, rhou1_B0_p + n_x*1 + n_y * xdim11_opensbliblock00Kernel006*1);
      
   double Grid_0 = 0.0;
   double Grid_1 = 0.0;
   double Wall = 0.0;
   Grid_0 = idx[0];

   Grid_1 = idx[1];

   Wall = ((Grid_0 >= -6 + block0np0 || Grid_0 <= 5 || Grid_1 <= 5) ? (
   0
)
: (
   1
));

    rho_B0(0,0) = (-(-wk0_B0(-1,0) + wk0_B0(0,0))*inv_rfact0_block0 - (-Residual0_B0(0,-1) +
      Residual0_B0(0,0))*inv_rfact1_block0*Wall)*dt + rho_B0(0,0);

    rhou0_B0(0,0) = (-(-wk1_B0(-1,0) + wk1_B0(0,0))*inv_rfact0_block0 - (-Residual1_B0(0,-1) +
      Residual1_B0(0,0))*inv_rfact1_block0*Wall)*dt + rhou0_B0(0,0);

    rhou1_B0(0,0) = (-(-wk2_B0(-1,0) + wk2_B0(0,0))*inv_rfact0_block0 - (-Residual2_B0(0,-1) +
      Residual2_B0(0,0))*inv_rfact1_block0*Wall)*dt + rhou1_B0(0,0);

    rhoE_B0(0,0) = (-(-wk3_B0(-1,0) + wk3_B0(0,0))*inv_rfact0_block0 - (-Residual3_B0(0,-1) +
      Residual3_B0(0,0))*inv_rfact1_block0*Wall)*dt + rhoE_B0(0,0);


    }
  }
  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[21].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 13);
  ops_set_halo_dirtybit3(&args[8],range);
  ops_set_halo_dirtybit3(&args[9],range);
  ops_set_halo_dirtybit3(&args[10],range);
  ops_set_halo_dirtybit3(&args[11],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[21].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[21].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[21].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[21].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[21].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[21].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[21].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[21].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[21].transfer += ops_compute_transfer(dim, start, end, &arg7);
    block->instance->OPS_kernels[21].transfer += ops_compute_transfer(dim, start, end, &arg8);
    block->instance->OPS_kernels[21].transfer += ops_compute_transfer(dim, start, end, &arg9);
    block->instance->OPS_kernels[21].transfer += ops_compute_transfer(dim, start, end, &arg10);
    block->instance->OPS_kernels[21].transfer += ops_compute_transfer(dim, start, end, &arg11);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel006(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11,
 ops_arg arg12) {
  ops_arg args[13] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12 };

  //create kernel descriptor and pass it to ops_enqueue_kernel
  create_kerneldesc_and_enque(name, args, 13, 21, dim, 0, range, block, ops_par_loop_opensbliblock00Kernel006_execute);
}
#endif
