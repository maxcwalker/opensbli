//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel024(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4) {
#else
void ops_par_loop_opensbliblock00Kernel024_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[5] = { arg0, arg1, arg2, arg3, arg4};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,5,range,1)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,1,"opensbliblock00Kernel024");
    block->instance->OPS_kernels[1].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "opensbliblock00Kernel024");
  #endif


  //compute locally allocated range for the sub-block
  int start[2];
  int end[2];
  int arg_idx[2];
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<2; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 5,block, range, start, end, arg_idx) < 0) return;
  #endif

  int start0 = start[0];
  int end0 = end[0];
  int start1 = start[1];
  int end1 = end[1];

  #if defined(OPS_MPI)
  #if defined(OPS_LAZY)
  sub_block_list sb = OPS_sub_block_list[block->index];
  arg_idx[0] = sb->decomp_disp[0];
  arg_idx[1] = sb->decomp_disp[1];
  #else
  arg_idx[0] -= start[0];
  arg_idx[1] -= start[1];
  #endif
  #else //OPS_MPI
  arg_idx[0] = 0;
  arg_idx[1] = 0;
  #endif //OPS_MPI

  //initialize global variable with the dimension of dats
  int xdim0_opensbliblock00Kernel024 = args[0].dat->size[0];
  int xdim1_opensbliblock00Kernel024 = args[1].dat->size[0];
  int xdim2_opensbliblock00Kernel024 = args[2].dat->size[0];
  int xdim3_opensbliblock00Kernel024 = args[3].dat->size[0];

  //set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset;
  double * __restrict__ x1_B0_p = (double *)(args[0].data_d + base0);

  int base1 = args[1].dat->base_offset;
  double * __restrict__ D11_B0_p = (double *)(args[1].data_d + base1);

  int base2 = args[2].dat->base_offset;
  double * __restrict__ detJ_B0_p = (double *)(args[2].data_d + base2);

  int base3 = args[3].dat->base_offset;
  double * __restrict__ wk3_B0_p = (double *)(args[3].data_d + base3);




  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_device(args, 5);
  ops_halo_exchanges(args,5,range);
  ops_H_D_exchanges_device(args, 5);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[1].mpi_time += __t1-__t2;
  }

  #pragma omp target teams distribute parallel for collapse(2)
  for ( int n_y=start1; n_y<end1; n_y++ ){
    for ( int n_x=start0; n_x<end0; n_x++ ){
      int idx[] = {arg_idx[0]+n_x, arg_idx[1]+n_y};
      const ACC<double> x1_B0(xdim0_opensbliblock00Kernel024, x1_B0_p + n_x*1 + n_y * xdim0_opensbliblock00Kernel024*1);
      ACC<double> D11_B0(xdim1_opensbliblock00Kernel024, D11_B0_p + n_x*1 + n_y * xdim1_opensbliblock00Kernel024*1);
      ACC<double> detJ_B0(xdim2_opensbliblock00Kernel024, detJ_B0_p + n_x*1 + n_y * xdim2_opensbliblock00Kernel024*1);
      ACC<double> wk3_B0(xdim3_opensbliblock00Kernel024, wk3_B0_p + n_x*1 + n_y * xdim3_opensbliblock00Kernel024*1);
      
   double d1_x1_dy = 0.0;
    d1_x1_dy = invDelta1block0*((idx[1] == 0) ? (
   3.0*x1_B0(0,1) + 0.333333333333333*x1_B0(0,3) - 1.5*x1_B0(0,2) -
      1.83333333333333*x1_B0(0,0)
)
: ((idx[1] == 1) ? (
   0.0394168524399447*x1_B0(0,2) +
      0.00571369039775442*x1_B0(0,4) + 0.719443173328855*x1_B0(0,1) - 0.322484932882161*x1_B0(0,0) -
      0.0658051057710389*x1_B0(0,3) - 0.376283677513354*x1_B0(0,-1)
)
: ((idx[1] == 2) ? (

      0.197184333887745*x1_B0(0,0) + 0.521455851089587*x1_B0(0,1) + 0.113446470384241*x1_B0(0,-2) -
      0.00412637789557492*x1_B0(0,3) - 0.0367146847001261*x1_B0(0,2) - 0.791245592765872*x1_B0(0,-1)
)
: ((idx[1] == 3)
      ? (
   0.0451033223343881*x1_B0(0,0) + 0.652141084861241*x1_B0(0,1) + 0.121937153224065*x1_B0(0,-2) -
      0.00932597985049999*x1_B0(0,-3) - 0.727822147724592*x1_B0(0,-1) - 0.082033432844602*x1_B0(0,2)
)
: ((idx[1] == -1
      + block0np1) ? (
   1.5*x1_B0(0,-2) + 1.83333333333333*x1_B0(0,0) - 3.0*x1_B0(0,-1) -
      0.333333333333333*x1_B0(0,-3)
)
: ((idx[1] == -2 + block0np1) ? (
   0.322484932882161*x1_B0(0,0) +
      0.0658051057710389*x1_B0(0,-3) + 0.376283677513354*x1_B0(0,1) - 0.0394168524399447*x1_B0(0,-2) -
      0.00571369039775442*x1_B0(0,-4) - 0.719443173328855*x1_B0(0,-1)
)
: ((idx[1] == -3 + block0np1) ? (

      0.00412637789557492*x1_B0(0,-3) + 0.0367146847001261*x1_B0(0,-2) + 0.791245592765872*x1_B0(0,1) -
      0.197184333887745*x1_B0(0,0) - 0.521455851089587*x1_B0(0,-1) - 0.113446470384241*x1_B0(0,2)
)
: ((idx[1] == -4 +
      block0np1) ? (
   0.00932597985049999*x1_B0(0,3) + 0.727822147724592*x1_B0(0,1) + 0.082033432844602*x1_B0(0,-2) -
      0.0451033223343881*x1_B0(0,0) - 0.652141084861241*x1_B0(0,-1) - 0.121937153224065*x1_B0(0,2)
)
: (

      -(2.0/3.0)*x1_B0(0,-1) - (1.0/12.0)*x1_B0(0,2) + ((1.0/12.0))*x1_B0(0,-2) + ((2.0/3.0))*x1_B0(0,1)
)))))))));

   wk3_B0(0,0) = d1_x1_dy;

   detJ_B0(0,0) = d1_x1_dy;

   D11_B0(0,0) = 1.0/(d1_x1_dy);


    }
  }
  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[1].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 5);
  ops_set_halo_dirtybit3(&args[1],range);
  ops_set_halo_dirtybit3(&args[2],range);
  ops_set_halo_dirtybit3(&args[3],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[1].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[1].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[1].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[1].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[1].transfer += ops_compute_transfer(dim, start, end, &arg3);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel024(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4) {
  ops_arg args[5] = { arg0, arg1, arg2, arg3, arg4 };

  //create kernel descriptor and pass it to ops_enqueue_kernel
  create_kerneldesc_and_enque(name, args, 5, 1, dim, 0, range, block, ops_par_loop_opensbliblock00Kernel024_execute);
}
#endif
