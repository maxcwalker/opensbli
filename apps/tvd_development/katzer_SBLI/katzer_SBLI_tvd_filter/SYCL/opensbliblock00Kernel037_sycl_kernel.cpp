//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel037(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4) {
#else
void ops_par_loop_opensbliblock00Kernel037_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[5] = { arg0, arg1, arg2, arg3, arg4};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,5,range,26)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,26,"opensbliblock00Kernel037");
    block->instance->OPS_kernels[26].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "opensbliblock00Kernel037");
  #endif


  //compute locally allocated range for the sub-block
  int start[2];
  int end[2];
  int arg_idx[2];
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<2; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 5,block, range, start, end, arg_idx) < 0) return;
  #endif

  #if defined(OPS_MPI)
  #if defined(OPS_LAZY)
  sub_block_list sb = OPS_sub_block_list[block->index];
  arg_idx[0] = sb->decomp_disp[0];
  arg_idx[1] = sb->decomp_disp[1];
  #else
  arg_idx[0] -= start[0];
  arg_idx[1] -= start[1];
  #endif
  #else //OPS_MPI
  arg_idx[0] = 0;
  arg_idx[1] = 0;
  #endif //OPS_MPI

  //initialize global variable with the dimension of dats
  int xdim0_opensbliblock00Kernel037 = args[0].dat->size[0];
  int xdim1_opensbliblock00Kernel037 = args[1].dat->size[0];
  int xdim2_opensbliblock00Kernel037 = args[2].dat->size[0];
  int xdim3_opensbliblock00Kernel037 = args[3].dat->size[0];

  //set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset/sizeof(double);
  double* D11_B0_p = (double*)args[0].data_d;

  int base1 = args[1].dat->base_offset/sizeof(double);
  double* u0_B0_p = (double*)args[1].data_d;

  int base2 = args[2].dat->base_offset/sizeof(double);
  double* u1_B0_p = (double*)args[2].data_d;

  int base3 = args[3].dat->base_offset/sizeof(double);
  double* kappa_B0_p = (double*)args[3].data_d;




  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_device(args, 5);
  ops_halo_exchanges(args,5,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[26].mpi_time += __t1-__t2;
  }

  int start_0 = start[0];
  int end_0 = end[0];
  int arg_idx_0 = arg_idx[0];
  int start_1 = start[1];
  int end_1 = end[1];
  int arg_idx_1 = arg_idx[1];
  if ((end[0]-start[0])>0 && (end[1]-start[1])>0) {
    block->instance->sycl_instance->queue->submit([&](cl::sycl::handler &cgh) {

      auto Delta0block0_sycl = (*Delta0block0_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto Delta1block0_sycl = (*Delta1block0_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto block0np0_sycl = (*block0np0_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto block0np1_sycl = (*block0np1_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto invDelta0block0_sycl = (*invDelta0block0_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto invDelta1block0_sycl = (*invDelta1block0_p).template get_access<cl::sycl::access::mode::read>(cgh);

      cgh.parallel_for<class opensbliblock00Kernel037_kernel>(cl::sycl::nd_range<2>(cl::sycl::range<2>(
           ((end[1]-start[1]-1)/block->instance->OPS_block_size_y+1)*block->instance->OPS_block_size_y,
            ((end[0]-start[0]-1)/block->instance->OPS_block_size_x+1)*block->instance->OPS_block_size_x
             ),cl::sycl::range<2>(
             block->instance->OPS_block_size_y,
      block->instance->OPS_block_size_x
             ))
      , [=](cl::sycl::nd_item<2> item
      ) [[intel::kernel_args_restrict]] {
        int n_y = item.get_global_id(0)+start_1;
        int n_x = item.get_global_id(1)+start_0;
        int idx[] = {arg_idx_0+n_x, arg_idx_1+n_y};
        const ACC<double> D11_B0(xdim0_opensbliblock00Kernel037, &D11_B0_p[0] + base0 + n_x*1 + n_y * xdim0_opensbliblock00Kernel037*1);
        const ACC<double> u0_B0(xdim1_opensbliblock00Kernel037, &u0_B0_p[0] + base1 + n_x*1 + n_y * xdim1_opensbliblock00Kernel037*1);
        const ACC<double> u1_B0(xdim2_opensbliblock00Kernel037, &u1_B0_p[0] + base2 + n_x*1 + n_y * xdim2_opensbliblock00Kernel037*1);
        ACC<double> kappa_B0(xdim3_opensbliblock00Kernel037, &kappa_B0_p[0] + base3 + n_x*1 + n_y * xdim3_opensbliblock00Kernel037*1);
        //USER CODE
        if (n_x < end_0 && n_y < end_1) {
          
   double d1_u0_dx = 0.0;
   double d1_u0_dy = 0.0;
   double d1_u1_dx = 0.0;
   double d1_u1_dy = 0.0;
    d1_u0_dy = invDelta1block0_sycl[0]*((idx[1] == 0) ? (
   3.0*u0_B0(0,1) + 0.333333333333333*u0_B0(0,3) - 1.5*u0_B0(0,2) -
      1.83333333333333*u0_B0(0,0)
)
: ((idx[1] == 1) ? (
   0.0394168524399447*u0_B0(0,2) +
      0.00571369039775442*u0_B0(0,4) + 0.719443173328855*u0_B0(0,1) - 0.322484932882161*u0_B0(0,0) -
      0.0658051057710389*u0_B0(0,3) - 0.376283677513354*u0_B0(0,-1)
)
: ((idx[1] == 2) ? (

      0.197184333887745*u0_B0(0,0) + 0.521455851089587*u0_B0(0,1) + 0.113446470384241*u0_B0(0,-2) -
      0.00412637789557492*u0_B0(0,3) - 0.0367146847001261*u0_B0(0,2) - 0.791245592765872*u0_B0(0,-1)
)
: ((idx[1] == 3)
      ? (
   0.0451033223343881*u0_B0(0,0) + 0.652141084861241*u0_B0(0,1) + 0.121937153224065*u0_B0(0,-2) -
      0.00932597985049999*u0_B0(0,-3) - 0.727822147724592*u0_B0(0,-1) - 0.082033432844602*u0_B0(0,2)
)
: ((idx[1] == -1
      + block0np1_sycl[0]) ? (
   1.5*u0_B0(0,-2) + 1.83333333333333*u0_B0(0,0) - 3.0*u0_B0(0,-1) -
      0.333333333333333*u0_B0(0,-3)
)
: ((idx[1] == -2 + block0np1_sycl[0]) ? (
   0.322484932882161*u0_B0(0,0) +
      0.0658051057710389*u0_B0(0,-3) + 0.376283677513354*u0_B0(0,1) - 0.0394168524399447*u0_B0(0,-2) -
      0.00571369039775442*u0_B0(0,-4) - 0.719443173328855*u0_B0(0,-1)
)
: ((idx[1] == -3 + block0np1_sycl[0]) ? (

      0.00412637789557492*u0_B0(0,-3) + 0.0367146847001261*u0_B0(0,-2) + 0.791245592765872*u0_B0(0,1) -
      0.197184333887745*u0_B0(0,0) - 0.521455851089587*u0_B0(0,-1) - 0.113446470384241*u0_B0(0,2)
)
: ((idx[1] == -4 +
      block0np1_sycl[0]) ? (
   0.00932597985049999*u0_B0(0,3) + 0.727822147724592*u0_B0(0,1) + 0.082033432844602*u0_B0(0,-2) -
      0.0451033223343881*u0_B0(0,0) - 0.652141084861241*u0_B0(0,-1) - 0.121937153224065*u0_B0(0,2)
)
: (

      -(2.0/3.0)*u0_B0(0,-1) - (1.0/12.0)*u0_B0(0,2) + ((1.0/12.0))*u0_B0(0,-2) + ((2.0/3.0))*u0_B0(0,1)
)))))))));

    d1_u1_dy = invDelta1block0_sycl[0]*((idx[1] == 0) ? (
   3.0*u1_B0(0,1) + 0.333333333333333*u1_B0(0,3) - 1.5*u1_B0(0,2) -
      1.83333333333333*u1_B0(0,0)
)
: ((idx[1] == 1) ? (
   0.0394168524399447*u1_B0(0,2) +
      0.00571369039775442*u1_B0(0,4) + 0.719443173328855*u1_B0(0,1) - 0.322484932882161*u1_B0(0,0) -
      0.0658051057710389*u1_B0(0,3) - 0.376283677513354*u1_B0(0,-1)
)
: ((idx[1] == 2) ? (

      0.197184333887745*u1_B0(0,0) + 0.521455851089587*u1_B0(0,1) + 0.113446470384241*u1_B0(0,-2) -
      0.00412637789557492*u1_B0(0,3) - 0.0367146847001261*u1_B0(0,2) - 0.791245592765872*u1_B0(0,-1)
)
: ((idx[1] == 3)
      ? (
   0.0451033223343881*u1_B0(0,0) + 0.652141084861241*u1_B0(0,1) + 0.121937153224065*u1_B0(0,-2) -
      0.00932597985049999*u1_B0(0,-3) - 0.727822147724592*u1_B0(0,-1) - 0.082033432844602*u1_B0(0,2)
)
: ((idx[1] == -1
      + block0np1_sycl[0]) ? (
   1.5*u1_B0(0,-2) + 1.83333333333333*u1_B0(0,0) - 3.0*u1_B0(0,-1) -
      0.333333333333333*u1_B0(0,-3)
)
: ((idx[1] == -2 + block0np1_sycl[0]) ? (
   0.322484932882161*u1_B0(0,0) +
      0.0658051057710389*u1_B0(0,-3) + 0.376283677513354*u1_B0(0,1) - 0.0394168524399447*u1_B0(0,-2) -
      0.00571369039775442*u1_B0(0,-4) - 0.719443173328855*u1_B0(0,-1)
)
: ((idx[1] == -3 + block0np1_sycl[0]) ? (

      0.00412637789557492*u1_B0(0,-3) + 0.0367146847001261*u1_B0(0,-2) + 0.791245592765872*u1_B0(0,1) -
      0.197184333887745*u1_B0(0,0) - 0.521455851089587*u1_B0(0,-1) - 0.113446470384241*u1_B0(0,2)
)
: ((idx[1] == -4 +
      block0np1_sycl[0]) ? (
   0.00932597985049999*u1_B0(0,3) + 0.727822147724592*u1_B0(0,1) + 0.082033432844602*u1_B0(0,-2) -
      0.0451033223343881*u1_B0(0,0) - 0.652141084861241*u1_B0(0,-1) - 0.121937153224065*u1_B0(0,2)
)
: (

      -(2.0/3.0)*u1_B0(0,-1) - (1.0/12.0)*u1_B0(0,2) + ((1.0/12.0))*u1_B0(0,-2) + ((2.0/3.0))*u1_B0(0,1)
)))))))));

    d1_u1_dx = invDelta0block0_sycl[0]*((idx[0] == 0) ? (
   3.0*u1_B0(1,0) + 0.333333333333333*u1_B0(3,0) - 1.5*u1_B0(2,0) -
      1.83333333333333*u1_B0(0,0)
)
: ((idx[0] == 1) ? (
   0.0394168524399447*u1_B0(2,0) +
      0.00571369039775442*u1_B0(4,0) + 0.719443173328855*u1_B0(1,0) - 0.322484932882161*u1_B0(0,0) -
      0.0658051057710389*u1_B0(3,0) - 0.376283677513354*u1_B0(-1,0)
)
: ((idx[0] == 2) ? (

      0.197184333887745*u1_B0(0,0) + 0.521455851089587*u1_B0(1,0) + 0.113446470384241*u1_B0(-2,0) -
      0.00412637789557492*u1_B0(3,0) - 0.0367146847001261*u1_B0(2,0) - 0.791245592765872*u1_B0(-1,0)
)
: ((idx[0] == 3)
      ? (
   0.0451033223343881*u1_B0(0,0) + 0.652141084861241*u1_B0(1,0) + 0.121937153224065*u1_B0(-2,0) -
      0.00932597985049999*u1_B0(-3,0) - 0.727822147724592*u1_B0(-1,0) - 0.082033432844602*u1_B0(2,0)
)
: ((idx[0] == -1
      + block0np0_sycl[0]) ? (
   1.5*u1_B0(-2,0) + 1.83333333333333*u1_B0(0,0) - 3.0*u1_B0(-1,0) -
      0.333333333333333*u1_B0(-3,0)
)
: ((idx[0] == -2 + block0np0_sycl[0]) ? (
   0.322484932882161*u1_B0(0,0) +
      0.0658051057710389*u1_B0(-3,0) + 0.376283677513354*u1_B0(1,0) - 0.0394168524399447*u1_B0(-2,0) -
      0.00571369039775442*u1_B0(-4,0) - 0.719443173328855*u1_B0(-1,0)
)
: ((idx[0] == -3 + block0np0_sycl[0]) ? (

      0.00412637789557492*u1_B0(-3,0) + 0.0367146847001261*u1_B0(-2,0) + 0.791245592765872*u1_B0(1,0) -
      0.197184333887745*u1_B0(0,0) - 0.521455851089587*u1_B0(-1,0) - 0.113446470384241*u1_B0(2,0)
)
: ((idx[0] == -4 +
      block0np0_sycl[0]) ? (
   0.00932597985049999*u1_B0(3,0) + 0.727822147724592*u1_B0(1,0) + 0.082033432844602*u1_B0(-2,0) -
      0.0451033223343881*u1_B0(0,0) - 0.652141084861241*u1_B0(-1,0) - 0.121937153224065*u1_B0(2,0)
)
: (

      -(2.0/3.0)*u1_B0(-1,0) - (1.0/12.0)*u1_B0(2,0) + ((1.0/12.0))*u1_B0(-2,0) + ((2.0/3.0))*u1_B0(1,0)
)))))))));

    d1_u0_dx = invDelta0block0_sycl[0]*((idx[0] == 0) ? (
   3.0*u0_B0(1,0) + 0.333333333333333*u0_B0(3,0) - 1.5*u0_B0(2,0) -
      1.83333333333333*u0_B0(0,0)
)
: ((idx[0] == 1) ? (
   0.0394168524399447*u0_B0(2,0) +
      0.00571369039775442*u0_B0(4,0) + 0.719443173328855*u0_B0(1,0) - 0.322484932882161*u0_B0(0,0) -
      0.0658051057710389*u0_B0(3,0) - 0.376283677513354*u0_B0(-1,0)
)
: ((idx[0] == 2) ? (

      0.197184333887745*u0_B0(0,0) + 0.521455851089587*u0_B0(1,0) + 0.113446470384241*u0_B0(-2,0) -
      0.00412637789557492*u0_B0(3,0) - 0.0367146847001261*u0_B0(2,0) - 0.791245592765872*u0_B0(-1,0)
)
: ((idx[0] == 3)
      ? (
   0.0451033223343881*u0_B0(0,0) + 0.652141084861241*u0_B0(1,0) + 0.121937153224065*u0_B0(-2,0) -
      0.00932597985049999*u0_B0(-3,0) - 0.727822147724592*u0_B0(-1,0) - 0.082033432844602*u0_B0(2,0)
)
: ((idx[0] == -1
      + block0np0_sycl[0]) ? (
   1.5*u0_B0(-2,0) + 1.83333333333333*u0_B0(0,0) - 3.0*u0_B0(-1,0) -
      0.333333333333333*u0_B0(-3,0)
)
: ((idx[0] == -2 + block0np0_sycl[0]) ? (
   0.322484932882161*u0_B0(0,0) +
      0.0658051057710389*u0_B0(-3,0) + 0.376283677513354*u0_B0(1,0) - 0.0394168524399447*u0_B0(-2,0) -
      0.00571369039775442*u0_B0(-4,0) - 0.719443173328855*u0_B0(-1,0)
)
: ((idx[0] == -3 + block0np0_sycl[0]) ? (

      0.00412637789557492*u0_B0(-3,0) + 0.0367146847001261*u0_B0(-2,0) + 0.791245592765872*u0_B0(1,0) -
      0.197184333887745*u0_B0(0,0) - 0.521455851089587*u0_B0(-1,0) - 0.113446470384241*u0_B0(2,0)
)
: ((idx[0] == -4 +
      block0np0_sycl[0]) ? (
   0.00932597985049999*u0_B0(3,0) + 0.727822147724592*u0_B0(1,0) + 0.082033432844602*u0_B0(-2,0) -
      0.0451033223343881*u0_B0(0,0) - 0.652141084861241*u0_B0(-1,0) - 0.121937153224065*u0_B0(2,0)
)
: (

      -(2.0/3.0)*u0_B0(-1,0) - (1.0/12.0)*u0_B0(2,0) + ((1.0/12.0))*u0_B0(-2,0) + ((2.0/3.0))*u0_B0(1,0)
)))))))));

    kappa_B0(0,0) = ((D11_B0(0,0)*d1_u1_dy + d1_u0_dx)*(D11_B0(0,0)*d1_u1_dy + d1_u0_dx))*(0.5 - 0.5*tanh(2.5 +
      500.0*(D11_B0(0,0)*d1_u1_dy + d1_u0_dx)/cl::sycl::sqrt((Delta0block0_sycl[0]*Delta0block0_sycl[0]) + (Delta1block0_sycl[0]*Delta1block0_sycl[0]))))/(1.0e-40
      + ((D11_B0(0,0)*d1_u1_dy + d1_u0_dx)*(D11_B0(0,0)*d1_u1_dy + d1_u0_dx)) + ((-D11_B0(0,0)*d1_u0_dy +
      d1_u1_dx)*(-D11_B0(0,0)*d1_u0_dy + d1_u1_dx)));


        }
      });
    });
  }
  if (block->instance->OPS_diags > 1) {
    block->instance->sycl_instance->queue->wait();
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[26].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 5);
  ops_set_halo_dirtybit3(&args[3],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[26].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[26].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[26].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[26].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[26].transfer += ops_compute_transfer(dim, start, end, &arg3);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel037(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)calloc(1,sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 1;
  desc->index = 26;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 26;
  for ( int i=0; i<4; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 5;
  desc->args = (ops_arg*)ops_malloc(5*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg2.dat->index;
  desc->args[3] = arg3;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg3.dat->index;
  desc->args[4] = arg4;
  desc->function = ops_par_loop_opensbliblock00Kernel037_execute;
  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,26,"opensbliblock00Kernel037");
  }
  ops_enqueue_kernel(desc);
}
#endif
