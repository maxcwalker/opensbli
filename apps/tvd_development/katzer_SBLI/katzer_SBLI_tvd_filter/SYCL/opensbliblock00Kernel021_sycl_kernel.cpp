//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel021(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11,
 ops_arg arg12, ops_arg arg13, ops_arg arg14, ops_arg arg15) {
#else
void ops_par_loop_opensbliblock00Kernel021_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  ops_arg arg9 = desc->args[9];
  ops_arg arg10 = desc->args[10];
  ops_arg arg11 = desc->args[11];
  ops_arg arg12 = desc->args[12];
  ops_arg arg13 = desc->args[13];
  ops_arg arg14 = desc->args[14];
  ops_arg arg15 = desc->args[15];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[16] = { arg0, arg1, arg2, arg3, arg4,
 arg5, arg6, arg7, arg8, arg9,
 arg10, arg11, arg12, arg13, arg14,
 arg15};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,16,range,23)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,23,"opensbliblock00Kernel021");
    block->instance->OPS_kernels[23].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "opensbliblock00Kernel021");
  #endif


  //compute locally allocated range for the sub-block
  int start[2];
  int end[2];
  int arg_idx[2];
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<2; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 16,block, range, start, end, arg_idx) < 0) return;
  #endif

  #if defined(OPS_MPI)
  #if defined(OPS_LAZY)
  sub_block_list sb = OPS_sub_block_list[block->index];
  arg_idx[0] = sb->decomp_disp[0];
  arg_idx[1] = sb->decomp_disp[1];
  #else
  arg_idx[0] -= start[0];
  arg_idx[1] -= start[1];
  #endif
  #else //OPS_MPI
  arg_idx[0] = 0;
  arg_idx[1] = 0;
  #endif //OPS_MPI

  //initialize global variable with the dimension of dats
  int xdim0_opensbliblock00Kernel021 = args[0].dat->size[0];
  int xdim1_opensbliblock00Kernel021 = args[1].dat->size[0];
  int xdim2_opensbliblock00Kernel021 = args[2].dat->size[0];
  int xdim3_opensbliblock00Kernel021 = args[3].dat->size[0];
  int xdim4_opensbliblock00Kernel021 = args[4].dat->size[0];
  int xdim5_opensbliblock00Kernel021 = args[5].dat->size[0];
  int xdim6_opensbliblock00Kernel021 = args[6].dat->size[0];
  int xdim7_opensbliblock00Kernel021 = args[7].dat->size[0];
  int xdim8_opensbliblock00Kernel021 = args[8].dat->size[0];
  int xdim9_opensbliblock00Kernel021 = args[9].dat->size[0];
  int xdim10_opensbliblock00Kernel021 = args[10].dat->size[0];
  int xdim11_opensbliblock00Kernel021 = args[11].dat->size[0];
  int xdim12_opensbliblock00Kernel021 = args[12].dat->size[0];
  int xdim13_opensbliblock00Kernel021 = args[13].dat->size[0];
  int xdim14_opensbliblock00Kernel021 = args[14].dat->size[0];

  //set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset/sizeof(double);
  double* D11_B0_p = (double*)args[0].data_d;

  int base1 = args[1].dat->base_offset/sizeof(double);
  double* SD111_B0_p = (double*)args[1].data_d;

  int base2 = args[2].dat->base_offset/sizeof(double);
  double* T_B0_p = (double*)args[2].data_d;

  int base3 = args[3].dat->base_offset/sizeof(double);
  double* mu_B0_p = (double*)args[3].data_d;

  int base4 = args[4].dat->base_offset/sizeof(double);
  double* u0_B0_p = (double*)args[4].data_d;

  int base5 = args[5].dat->base_offset/sizeof(double);
  double* u1_B0_p = (double*)args[5].data_d;

  int base6 = args[6].dat->base_offset/sizeof(double);
  double* wk0_B0_p = (double*)args[6].data_d;

  int base7 = args[7].dat->base_offset/sizeof(double);
  double* wk1_B0_p = (double*)args[7].data_d;

  int base8 = args[8].dat->base_offset/sizeof(double);
  double* wk2_B0_p = (double*)args[8].data_d;

  int base9 = args[9].dat->base_offset/sizeof(double);
  double* wk3_B0_p = (double*)args[9].data_d;

  int base10 = args[10].dat->base_offset/sizeof(double);
  double* wk4_B0_p = (double*)args[10].data_d;

  int base11 = args[11].dat->base_offset/sizeof(double);
  double* wk5_B0_p = (double*)args[11].data_d;

  int base12 = args[12].dat->base_offset/sizeof(double);
  double* Residual1_B0_p = (double*)args[12].data_d;

  int base13 = args[13].dat->base_offset/sizeof(double);
  double* Residual2_B0_p = (double*)args[13].data_d;

  int base14 = args[14].dat->base_offset/sizeof(double);
  double* Residual3_B0_p = (double*)args[14].data_d;




  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_device(args, 16);
  ops_halo_exchanges(args,16,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[23].mpi_time += __t1-__t2;
  }

  int start_0 = start[0];
  int end_0 = end[0];
  int arg_idx_0 = arg_idx[0];
  int start_1 = start[1];
  int end_1 = end[1];
  int arg_idx_1 = arg_idx[1];
  if ((end[0]-start[0])>0 && (end[1]-start[1])>0) {
    block->instance->sycl_instance->queue->submit([&](cl::sycl::handler &cgh) {

      auto block0np0_sycl = (*block0np0_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto block0np1_sycl = (*block0np1_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto inv2Delta0block0_sycl = (*inv2Delta0block0_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto inv2Delta1block0_sycl = (*inv2Delta1block0_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto inv2Minf_sycl = (*inv2Minf_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto invDelta0block0_sycl = (*invDelta0block0_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto invDelta1block0_sycl = (*invDelta1block0_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto invPr_sycl = (*invPr_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto invRe_sycl = (*invRe_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto inv_gamma_m1_sycl = (*inv_gamma_m1_p).template get_access<cl::sycl::access::mode::read>(cgh);

      cgh.parallel_for<class opensbliblock00Kernel021_kernel>(cl::sycl::nd_range<2>(cl::sycl::range<2>(
           ((end[1]-start[1]-1)/block->instance->OPS_block_size_y+1)*block->instance->OPS_block_size_y,
            ((end[0]-start[0]-1)/block->instance->OPS_block_size_x+1)*block->instance->OPS_block_size_x
             ),cl::sycl::range<2>(
             block->instance->OPS_block_size_y,
      block->instance->OPS_block_size_x
             ))
      , [=](cl::sycl::nd_item<2> item
      ) [[intel::kernel_args_restrict]] {
        int n_y = item.get_global_id()[0]+start_1;
        int n_x = item.get_global_id()[1]+start_0;
        int idx[] = {arg_idx_0+n_x, arg_idx_1+n_y};
        const ACC<double> D11_B0(xdim0_opensbliblock00Kernel021, &D11_B0_p[0] + base0 + n_x*1 + n_y * xdim0_opensbliblock00Kernel021*1);
        const ACC<double> SD111_B0(xdim1_opensbliblock00Kernel021, &SD111_B0_p[0] + base1 + n_x*1 + n_y * xdim1_opensbliblock00Kernel021*1);
        const ACC<double> T_B0(xdim2_opensbliblock00Kernel021, &T_B0_p[0] + base2 + n_x*1 + n_y * xdim2_opensbliblock00Kernel021*1);
        const ACC<double> mu_B0(xdim3_opensbliblock00Kernel021, &mu_B0_p[0] + base3 + n_x*1 + n_y * xdim3_opensbliblock00Kernel021*1);
        const ACC<double> u0_B0(xdim4_opensbliblock00Kernel021, &u0_B0_p[0] + base4 + n_x*1 + n_y * xdim4_opensbliblock00Kernel021*1);
        const ACC<double> u1_B0(xdim5_opensbliblock00Kernel021, &u1_B0_p[0] + base5 + n_x*1 + n_y * xdim5_opensbliblock00Kernel021*1);
        const ACC<double> wk0_B0(xdim6_opensbliblock00Kernel021, &wk0_B0_p[0] + base6 + n_x*1 + n_y * xdim6_opensbliblock00Kernel021*1);
        const ACC<double> wk1_B0(xdim7_opensbliblock00Kernel021, &wk1_B0_p[0] + base7 + n_x*1 + n_y * xdim7_opensbliblock00Kernel021*1);
        const ACC<double> wk2_B0(xdim8_opensbliblock00Kernel021, &wk2_B0_p[0] + base8 + n_x*1 + n_y * xdim8_opensbliblock00Kernel021*1);
        const ACC<double> wk3_B0(xdim9_opensbliblock00Kernel021, &wk3_B0_p[0] + base9 + n_x*1 + n_y * xdim9_opensbliblock00Kernel021*1);
        const ACC<double> wk4_B0(xdim10_opensbliblock00Kernel021, &wk4_B0_p[0] + base10 + n_x*1 + n_y * xdim10_opensbliblock00Kernel021*1);
        const ACC<double> wk5_B0(xdim11_opensbliblock00Kernel021, &wk5_B0_p[0] + base11 + n_x*1 + n_y * xdim11_opensbliblock00Kernel021*1);
        ACC<double> Residual1_B0(xdim12_opensbliblock00Kernel021, &Residual1_B0_p[0] + base12 + n_x*1 + n_y * xdim12_opensbliblock00Kernel021*1);
        ACC<double> Residual2_B0(xdim13_opensbliblock00Kernel021, &Residual2_B0_p[0] + base13 + n_x*1 + n_y * xdim13_opensbliblock00Kernel021*1);
        ACC<double> Residual3_B0(xdim14_opensbliblock00Kernel021, &Residual3_B0_p[0] + base14 + n_x*1 + n_y * xdim14_opensbliblock00Kernel021*1);
        //USER CODE
        if (n_x < end_0 && n_y < end_1) {
          
   double d1_mu_dx = 0.0;
   double d1_mu_dy = 0.0;
   double d1_wk0_dy = 0.0;
   double d1_wk1_dy = 0.0;
   double d2_T_dx = 0.0;
   double d2_T_dy = 0.0;
   double d2_u0_dx = 0.0;
   double d2_u0_dy = 0.0;
   double d2_u1_dx = 0.0;
   double d2_u1_dy = 0.0;
   if (idx[0] == 0){

       d1_mu_dx = (3.0*mu_B0(1,0) + 0.333333333333333*mu_B0(3,0) - 1.5*mu_B0(2,0) -
            1.83333333333333*mu_B0(0,0))*invDelta0block0_sycl[0];

   }

   else if (idx[0] == 1){

       d1_mu_dx = (0.0394168524399447*mu_B0(2,0) + 0.00571369039775442*mu_B0(4,0) + 0.719443173328855*mu_B0(1,0) -
            0.322484932882161*mu_B0(0,0) - 0.0658051057710389*mu_B0(3,0) -
            0.376283677513354*mu_B0(-1,0))*invDelta0block0_sycl[0];

   }

   else if (idx[0] == 2){

       d1_mu_dx = (0.197184333887745*mu_B0(0,0) + 0.521455851089587*mu_B0(1,0) + 0.113446470384241*mu_B0(-2,0) -
            0.00412637789557492*mu_B0(3,0) - 0.0367146847001261*mu_B0(2,0) -
            0.791245592765872*mu_B0(-1,0))*invDelta0block0_sycl[0];

   }

   else if (idx[0] == 3){

       d1_mu_dx = (0.0451033223343881*mu_B0(0,0) + 0.652141084861241*mu_B0(1,0) + 0.121937153224065*mu_B0(-2,0) -
            0.00932597985049999*mu_B0(-3,0) - 0.727822147724592*mu_B0(-1,0) -
            0.082033432844602*mu_B0(2,0))*invDelta0block0_sycl[0];

   }

   else if (idx[0] == -1 + block0np0_sycl[0]){

       d1_mu_dx = (1.5*mu_B0(-2,0) + 1.83333333333333*mu_B0(0,0) - 3.0*mu_B0(-1,0) -
            0.333333333333333*mu_B0(-3,0))*invDelta0block0_sycl[0];

   }

   else if (idx[0] == -2 + block0np0_sycl[0]){

       d1_mu_dx = (0.322484932882161*mu_B0(0,0) + 0.0658051057710389*mu_B0(-3,0) + 0.376283677513354*mu_B0(1,0) -
            0.0394168524399447*mu_B0(-2,0) - 0.00571369039775442*mu_B0(-4,0) -
            0.719443173328855*mu_B0(-1,0))*invDelta0block0_sycl[0];

   }

   else if (idx[0] == -3 + block0np0_sycl[0]){

       d1_mu_dx = (0.00412637789557492*mu_B0(-3,0) + 0.0367146847001261*mu_B0(-2,0) + 0.791245592765872*mu_B0(1,0) -
            0.197184333887745*mu_B0(0,0) - 0.521455851089587*mu_B0(-1,0) -
            0.113446470384241*mu_B0(2,0))*invDelta0block0_sycl[0];

   }

   else if (idx[0] == -4 + block0np0_sycl[0]){

       d1_mu_dx = (0.00932597985049999*mu_B0(3,0) + 0.727822147724592*mu_B0(1,0) + 0.082033432844602*mu_B0(-2,0) -
            0.0451033223343881*mu_B0(0,0) - 0.652141084861241*mu_B0(-1,0) -
            0.121937153224065*mu_B0(2,0))*invDelta0block0_sycl[0];

   }

   else{

       d1_mu_dx = (-(2.0/3.0)*mu_B0(-1,0) - (1.0/12.0)*mu_B0(2,0) + ((1.0/12.0))*mu_B0(-2,0) +
            ((2.0/3.0))*mu_B0(1,0))*invDelta0block0_sycl[0];

   }

   if (idx[0] == 0){

       d2_T_dx = (-(26.0/3.0)*T_B0(1,0) - (14.0/3.0)*T_B0(3,0) + ((11.0/12.0))*T_B0(4,0) + ((19.0/2.0))*T_B0(2,0) +
            ((35.0/12.0))*T_B0(0,0))*inv2Delta0block0_sycl[0];

       d2_u0_dx = (-(26.0/3.0)*u0_B0(1,0) - (14.0/3.0)*u0_B0(3,0) + ((11.0/12.0))*u0_B0(4,0) + ((19.0/2.0))*u0_B0(2,0) +
            ((35.0/12.0))*u0_B0(0,0))*inv2Delta0block0_sycl[0];

       d2_u1_dx = (-(26.0/3.0)*u1_B0(1,0) - (14.0/3.0)*u1_B0(3,0) + ((11.0/12.0))*u1_B0(4,0) + ((19.0/2.0))*u1_B0(2,0) +
            ((35.0/12.0))*u1_B0(0,0))*inv2Delta0block0_sycl[0];

   }

   else if (idx[0] == 1){

       d2_T_dx = (((1.0/2.0))*T_B0(1,0) - (5.0/3.0)*T_B0(0,0) - (1.0/12.0)*T_B0(3,0) + ((1.0/3.0))*T_B0(2,0) +
            ((11.0/12.0))*T_B0(-1,0))*inv2Delta0block0_sycl[0];

       d2_u0_dx = (((1.0/2.0))*u0_B0(1,0) - (5.0/3.0)*u0_B0(0,0) - (1.0/12.0)*u0_B0(3,0) + ((1.0/3.0))*u0_B0(2,0) +
            ((11.0/12.0))*u0_B0(-1,0))*inv2Delta0block0_sycl[0];

       d2_u1_dx = (((1.0/2.0))*u1_B0(1,0) - (5.0/3.0)*u1_B0(0,0) - (1.0/12.0)*u1_B0(3,0) + ((1.0/3.0))*u1_B0(2,0) +
            ((11.0/12.0))*u1_B0(-1,0))*inv2Delta0block0_sycl[0];

   }

   else if (idx[0] == -1 + block0np0_sycl[0]){

       d2_T_dx = (-(26.0/3.0)*T_B0(-1,0) - (14.0/3.0)*T_B0(-3,0) + ((11.0/12.0))*T_B0(-4,0) + ((19.0/2.0))*T_B0(-2,0) +
            ((35.0/12.0))*T_B0(0,0))*inv2Delta0block0_sycl[0];

       d2_u0_dx = (-(26.0/3.0)*u0_B0(-1,0) - (14.0/3.0)*u0_B0(-3,0) + ((11.0/12.0))*u0_B0(-4,0) +
            ((19.0/2.0))*u0_B0(-2,0) + ((35.0/12.0))*u0_B0(0,0))*inv2Delta0block0_sycl[0];

       d2_u1_dx = (-(26.0/3.0)*u1_B0(-1,0) - (14.0/3.0)*u1_B0(-3,0) + ((11.0/12.0))*u1_B0(-4,0) +
            ((19.0/2.0))*u1_B0(-2,0) + ((35.0/12.0))*u1_B0(0,0))*inv2Delta0block0_sycl[0];

   }

   else if (idx[0] == -2 + block0np0_sycl[0]){

       d2_T_dx = (((1.0/2.0))*T_B0(-1,0) - (5.0/3.0)*T_B0(0,0) - (1.0/12.0)*T_B0(-3,0) + ((1.0/3.0))*T_B0(-2,0) +
            ((11.0/12.0))*T_B0(1,0))*inv2Delta0block0_sycl[0];

       d2_u0_dx = (((1.0/2.0))*u0_B0(-1,0) - (5.0/3.0)*u0_B0(0,0) - (1.0/12.0)*u0_B0(-3,0) + ((1.0/3.0))*u0_B0(-2,0) +
            ((11.0/12.0))*u0_B0(1,0))*inv2Delta0block0_sycl[0];

       d2_u1_dx = (((1.0/2.0))*u1_B0(-1,0) - (5.0/3.0)*u1_B0(0,0) - (1.0/12.0)*u1_B0(-3,0) + ((1.0/3.0))*u1_B0(-2,0) +
            ((11.0/12.0))*u1_B0(1,0))*inv2Delta0block0_sycl[0];

   }

   else{

       d2_T_dx = (-(5.0/2.0)*T_B0(0,0) - (1.0/12.0)*T_B0(-2,0) - (1.0/12.0)*T_B0(2,0) + ((4.0/3.0))*T_B0(1,0) +
            ((4.0/3.0))*T_B0(-1,0))*inv2Delta0block0_sycl[0];

       d2_u0_dx = (-(5.0/2.0)*u0_B0(0,0) - (1.0/12.0)*u0_B0(-2,0) - (1.0/12.0)*u0_B0(2,0) + ((4.0/3.0))*u0_B0(1,0) +
            ((4.0/3.0))*u0_B0(-1,0))*inv2Delta0block0_sycl[0];

       d2_u1_dx = (-(5.0/2.0)*u1_B0(0,0) - (1.0/12.0)*u1_B0(-2,0) - (1.0/12.0)*u1_B0(2,0) + ((4.0/3.0))*u1_B0(1,0) +
            ((4.0/3.0))*u1_B0(-1,0))*inv2Delta0block0_sycl[0];

   }

   if (idx[1] == 0){

       d1_mu_dy = (3.0*mu_B0(0,1) + 0.333333333333333*mu_B0(0,3) - 1.5*mu_B0(0,2) -
            1.83333333333333*mu_B0(0,0))*invDelta1block0_sycl[0];

       d1_wk0_dy = (3.0*wk0_B0(0,1) + 0.333333333333333*wk0_B0(0,3) - 1.5*wk0_B0(0,2) -
            1.83333333333333*wk0_B0(0,0))*invDelta1block0_sycl[0];

       d1_wk1_dy = (3.0*wk1_B0(0,1) + 0.333333333333333*wk1_B0(0,3) - 1.5*wk1_B0(0,2) -
            1.83333333333333*wk1_B0(0,0))*invDelta1block0_sycl[0];

   }

   else if (idx[1] == 1){

       d1_mu_dy = (0.0394168524399447*mu_B0(0,2) + 0.00571369039775442*mu_B0(0,4) + 0.719443173328855*mu_B0(0,1) -
            0.322484932882161*mu_B0(0,0) - 0.0658051057710389*mu_B0(0,3) -
            0.376283677513354*mu_B0(0,-1))*invDelta1block0_sycl[0];

       d1_wk0_dy = (0.0394168524399447*wk0_B0(0,2) + 0.00571369039775442*wk0_B0(0,4) + 0.719443173328855*wk0_B0(0,1) -
            0.322484932882161*wk0_B0(0,0) - 0.0658051057710389*wk0_B0(0,3) -
            0.376283677513354*wk0_B0(0,-1))*invDelta1block0_sycl[0];

       d1_wk1_dy = (0.0394168524399447*wk1_B0(0,2) + 0.00571369039775442*wk1_B0(0,4) + 0.719443173328855*wk1_B0(0,1) -
            0.322484932882161*wk1_B0(0,0) - 0.0658051057710389*wk1_B0(0,3) -
            0.376283677513354*wk1_B0(0,-1))*invDelta1block0_sycl[0];

   }

   else if (idx[1] == 2){

       d1_mu_dy = (0.197184333887745*mu_B0(0,0) + 0.521455851089587*mu_B0(0,1) + 0.113446470384241*mu_B0(0,-2) -
            0.00412637789557492*mu_B0(0,3) - 0.0367146847001261*mu_B0(0,2) -
            0.791245592765872*mu_B0(0,-1))*invDelta1block0_sycl[0];

       d1_wk0_dy = (0.197184333887745*wk0_B0(0,0) + 0.521455851089587*wk0_B0(0,1) + 0.113446470384241*wk0_B0(0,-2) -
            0.00412637789557492*wk0_B0(0,3) - 0.0367146847001261*wk0_B0(0,2) -
            0.791245592765872*wk0_B0(0,-1))*invDelta1block0_sycl[0];

       d1_wk1_dy = (0.197184333887745*wk1_B0(0,0) + 0.521455851089587*wk1_B0(0,1) + 0.113446470384241*wk1_B0(0,-2) -
            0.00412637789557492*wk1_B0(0,3) - 0.0367146847001261*wk1_B0(0,2) -
            0.791245592765872*wk1_B0(0,-1))*invDelta1block0_sycl[0];

   }

   else if (idx[1] == 3){

       d1_mu_dy = (0.0451033223343881*mu_B0(0,0) + 0.652141084861241*mu_B0(0,1) + 0.121937153224065*mu_B0(0,-2) -
            0.00932597985049999*mu_B0(0,-3) - 0.727822147724592*mu_B0(0,-1) -
            0.082033432844602*mu_B0(0,2))*invDelta1block0_sycl[0];

       d1_wk0_dy = (0.0451033223343881*wk0_B0(0,0) + 0.652141084861241*wk0_B0(0,1) + 0.121937153224065*wk0_B0(0,-2) -
            0.00932597985049999*wk0_B0(0,-3) - 0.727822147724592*wk0_B0(0,-1) -
            0.082033432844602*wk0_B0(0,2))*invDelta1block0_sycl[0];

       d1_wk1_dy = (0.0451033223343881*wk1_B0(0,0) + 0.652141084861241*wk1_B0(0,1) + 0.121937153224065*wk1_B0(0,-2) -
            0.00932597985049999*wk1_B0(0,-3) - 0.727822147724592*wk1_B0(0,-1) -
            0.082033432844602*wk1_B0(0,2))*invDelta1block0_sycl[0];

   }

   else if (idx[1] == -1 + block0np1_sycl[0]){

       d1_mu_dy = (1.5*mu_B0(0,-2) + 1.83333333333333*mu_B0(0,0) - 3.0*mu_B0(0,-1) -
            0.333333333333333*mu_B0(0,-3))*invDelta1block0_sycl[0];

       d1_wk0_dy = (1.5*wk0_B0(0,-2) + 1.83333333333333*wk0_B0(0,0) - 3.0*wk0_B0(0,-1) -
            0.333333333333333*wk0_B0(0,-3))*invDelta1block0_sycl[0];

       d1_wk1_dy = (1.5*wk1_B0(0,-2) + 1.83333333333333*wk1_B0(0,0) - 3.0*wk1_B0(0,-1) -
            0.333333333333333*wk1_B0(0,-3))*invDelta1block0_sycl[0];

   }

   else if (idx[1] == -2 + block0np1_sycl[0]){

       d1_mu_dy = (0.322484932882161*mu_B0(0,0) + 0.0658051057710389*mu_B0(0,-3) + 0.376283677513354*mu_B0(0,1) -
            0.0394168524399447*mu_B0(0,-2) - 0.00571369039775442*mu_B0(0,-4) -
            0.719443173328855*mu_B0(0,-1))*invDelta1block0_sycl[0];

       d1_wk0_dy = (0.322484932882161*wk0_B0(0,0) + 0.0658051057710389*wk0_B0(0,-3) + 0.376283677513354*wk0_B0(0,1) -
            0.0394168524399447*wk0_B0(0,-2) - 0.00571369039775442*wk0_B0(0,-4) -
            0.719443173328855*wk0_B0(0,-1))*invDelta1block0_sycl[0];

       d1_wk1_dy = (0.322484932882161*wk1_B0(0,0) + 0.0658051057710389*wk1_B0(0,-3) + 0.376283677513354*wk1_B0(0,1) -
            0.0394168524399447*wk1_B0(0,-2) - 0.00571369039775442*wk1_B0(0,-4) -
            0.719443173328855*wk1_B0(0,-1))*invDelta1block0_sycl[0];

   }

   else if (idx[1] == -3 + block0np1_sycl[0]){

       d1_mu_dy = (0.00412637789557492*mu_B0(0,-3) + 0.0367146847001261*mu_B0(0,-2) + 0.791245592765872*mu_B0(0,1) -
            0.197184333887745*mu_B0(0,0) - 0.521455851089587*mu_B0(0,-1) -
            0.113446470384241*mu_B0(0,2))*invDelta1block0_sycl[0];

       d1_wk0_dy = (0.00412637789557492*wk0_B0(0,-3) + 0.0367146847001261*wk0_B0(0,-2) + 0.791245592765872*wk0_B0(0,1) -
            0.197184333887745*wk0_B0(0,0) - 0.521455851089587*wk0_B0(0,-1) -
            0.113446470384241*wk0_B0(0,2))*invDelta1block0_sycl[0];

       d1_wk1_dy = (0.00412637789557492*wk1_B0(0,-3) + 0.0367146847001261*wk1_B0(0,-2) + 0.791245592765872*wk1_B0(0,1) -
            0.197184333887745*wk1_B0(0,0) - 0.521455851089587*wk1_B0(0,-1) -
            0.113446470384241*wk1_B0(0,2))*invDelta1block0_sycl[0];

   }

   else if (idx[1] == -4 + block0np1_sycl[0]){

       d1_mu_dy = (0.00932597985049999*mu_B0(0,3) + 0.727822147724592*mu_B0(0,1) + 0.082033432844602*mu_B0(0,-2) -
            0.0451033223343881*mu_B0(0,0) - 0.652141084861241*mu_B0(0,-1) -
            0.121937153224065*mu_B0(0,2))*invDelta1block0_sycl[0];

       d1_wk0_dy = (0.00932597985049999*wk0_B0(0,3) + 0.727822147724592*wk0_B0(0,1) + 0.082033432844602*wk0_B0(0,-2) -
            0.0451033223343881*wk0_B0(0,0) - 0.652141084861241*wk0_B0(0,-1) -
            0.121937153224065*wk0_B0(0,2))*invDelta1block0_sycl[0];

       d1_wk1_dy = (0.00932597985049999*wk1_B0(0,3) + 0.727822147724592*wk1_B0(0,1) + 0.082033432844602*wk1_B0(0,-2) -
            0.0451033223343881*wk1_B0(0,0) - 0.652141084861241*wk1_B0(0,-1) -
            0.121937153224065*wk1_B0(0,2))*invDelta1block0_sycl[0];

   }

   else{

       d1_mu_dy = (-(2.0/3.0)*mu_B0(0,-1) - (1.0/12.0)*mu_B0(0,2) + ((1.0/12.0))*mu_B0(0,-2) +
            ((2.0/3.0))*mu_B0(0,1))*invDelta1block0_sycl[0];

       d1_wk0_dy = (-(2.0/3.0)*wk0_B0(0,-1) - (1.0/12.0)*wk0_B0(0,2) + ((1.0/12.0))*wk0_B0(0,-2) +
            ((2.0/3.0))*wk0_B0(0,1))*invDelta1block0_sycl[0];

       d1_wk1_dy = (-(2.0/3.0)*wk1_B0(0,-1) - (1.0/12.0)*wk1_B0(0,2) + ((1.0/12.0))*wk1_B0(0,-2) +
            ((2.0/3.0))*wk1_B0(0,1))*invDelta1block0_sycl[0];

   }

   if (idx[1] == 0){

       d2_T_dy = (-(26.0/3.0)*T_B0(0,1) - (14.0/3.0)*T_B0(0,3) + ((11.0/12.0))*T_B0(0,4) + ((19.0/2.0))*T_B0(0,2) +
            ((35.0/12.0))*T_B0(0,0))*inv2Delta1block0_sycl[0];

       d2_u0_dy = (-(26.0/3.0)*u0_B0(0,1) - (14.0/3.0)*u0_B0(0,3) + ((11.0/12.0))*u0_B0(0,4) + ((19.0/2.0))*u0_B0(0,2) +
            ((35.0/12.0))*u0_B0(0,0))*inv2Delta1block0_sycl[0];

       d2_u1_dy = (-(26.0/3.0)*u1_B0(0,1) - (14.0/3.0)*u1_B0(0,3) + ((11.0/12.0))*u1_B0(0,4) + ((19.0/2.0))*u1_B0(0,2) +
            ((35.0/12.0))*u1_B0(0,0))*inv2Delta1block0_sycl[0];

   }

   else if (idx[1] == 1){

       d2_T_dy = (((1.0/2.0))*T_B0(0,1) - (5.0/3.0)*T_B0(0,0) - (1.0/12.0)*T_B0(0,3) + ((1.0/3.0))*T_B0(0,2) +
            ((11.0/12.0))*T_B0(0,-1))*inv2Delta1block0_sycl[0];

       d2_u0_dy = (((1.0/2.0))*u0_B0(0,1) - (5.0/3.0)*u0_B0(0,0) - (1.0/12.0)*u0_B0(0,3) + ((1.0/3.0))*u0_B0(0,2) +
            ((11.0/12.0))*u0_B0(0,-1))*inv2Delta1block0_sycl[0];

       d2_u1_dy = (((1.0/2.0))*u1_B0(0,1) - (5.0/3.0)*u1_B0(0,0) - (1.0/12.0)*u1_B0(0,3) + ((1.0/3.0))*u1_B0(0,2) +
            ((11.0/12.0))*u1_B0(0,-1))*inv2Delta1block0_sycl[0];

   }

   else if (idx[1] == -1 + block0np1_sycl[0]){

       d2_T_dy = (-(26.0/3.0)*T_B0(0,-1) - (14.0/3.0)*T_B0(0,-3) + ((11.0/12.0))*T_B0(0,-4) + ((19.0/2.0))*T_B0(0,-2) +
            ((35.0/12.0))*T_B0(0,0))*inv2Delta1block0_sycl[0];

       d2_u0_dy = (-(26.0/3.0)*u0_B0(0,-1) - (14.0/3.0)*u0_B0(0,-3) + ((11.0/12.0))*u0_B0(0,-4) +
            ((19.0/2.0))*u0_B0(0,-2) + ((35.0/12.0))*u0_B0(0,0))*inv2Delta1block0_sycl[0];

       d2_u1_dy = (-(26.0/3.0)*u1_B0(0,-1) - (14.0/3.0)*u1_B0(0,-3) + ((11.0/12.0))*u1_B0(0,-4) +
            ((19.0/2.0))*u1_B0(0,-2) + ((35.0/12.0))*u1_B0(0,0))*inv2Delta1block0_sycl[0];

   }

   else if (idx[1] == -2 + block0np1_sycl[0]){

       d2_T_dy = (((1.0/2.0))*T_B0(0,-1) - (5.0/3.0)*T_B0(0,0) - (1.0/12.0)*T_B0(0,-3) + ((1.0/3.0))*T_B0(0,-2) +
            ((11.0/12.0))*T_B0(0,1))*inv2Delta1block0_sycl[0];

       d2_u0_dy = (((1.0/2.0))*u0_B0(0,-1) - (5.0/3.0)*u0_B0(0,0) - (1.0/12.0)*u0_B0(0,-3) + ((1.0/3.0))*u0_B0(0,-2) +
            ((11.0/12.0))*u0_B0(0,1))*inv2Delta1block0_sycl[0];

       d2_u1_dy = (((1.0/2.0))*u1_B0(0,-1) - (5.0/3.0)*u1_B0(0,0) - (1.0/12.0)*u1_B0(0,-3) + ((1.0/3.0))*u1_B0(0,-2) +
            ((11.0/12.0))*u1_B0(0,1))*inv2Delta1block0_sycl[0];

   }

   else{

       d2_T_dy = (-(5.0/2.0)*T_B0(0,0) - (1.0/12.0)*T_B0(0,-2) - (1.0/12.0)*T_B0(0,2) + ((4.0/3.0))*T_B0(0,1) +
            ((4.0/3.0))*T_B0(0,-1))*inv2Delta1block0_sycl[0];

       d2_u0_dy = (-(5.0/2.0)*u0_B0(0,0) - (1.0/12.0)*u0_B0(0,-2) - (1.0/12.0)*u0_B0(0,2) + ((4.0/3.0))*u0_B0(0,1) +
            ((4.0/3.0))*u0_B0(0,-1))*inv2Delta1block0_sycl[0];

       d2_u1_dy = (-(5.0/2.0)*u1_B0(0,0) - (1.0/12.0)*u1_B0(0,-2) - (1.0/12.0)*u1_B0(0,2) + ((4.0/3.0))*u1_B0(0,1) +
            ((4.0/3.0))*u1_B0(0,-1))*inv2Delta1block0_sycl[0];

   }

    Residual1_B0(0,0) = -(2.0/3.0)*(-2*wk0_B0(0,0) + D11_B0(0,0)*wk4_B0(0,0))*invRe_sycl[0]*d1_mu_dx + ((1.0/3.0))*(4*d2_u0_dx +
      D11_B0(0,0)*d1_wk1_dy + 3*(D11_B0(0,0)*D11_B0(0,0))*d2_u0_dy +
      3*D11_B0(0,0)*wk3_B0(0,0)*SD111_B0(0,0))*invRe_sycl[0]*mu_B0(0,0) + (D11_B0(0,0)*wk3_B0(0,0) +
      wk1_B0(0,0))*invRe_sycl[0]*D11_B0(0,0)*d1_mu_dy + Residual1_B0(0,0);

    Residual2_B0(0,0) = (D11_B0(0,0)*wk3_B0(0,0) + wk1_B0(0,0))*invRe_sycl[0]*d1_mu_dx + ((1.0/3.0))*(3*d2_u1_dx +
      D11_B0(0,0)*d1_wk0_dy + 4*(D11_B0(0,0)*D11_B0(0,0))*d2_u1_dy +
      4*D11_B0(0,0)*wk4_B0(0,0)*SD111_B0(0,0))*invRe_sycl[0]*mu_B0(0,0) + ((2.0/3.0))*(-wk0_B0(0,0) +
      2*D11_B0(0,0)*wk4_B0(0,0))*invRe_sycl[0]*D11_B0(0,0)*d1_mu_dy + Residual2_B0(0,0);

    Residual3_B0(0,0) = (D11_B0(0,0)*wk3_B0(0,0) + wk1_B0(0,0))*invRe_sycl[0]*mu_B0(0,0)*wk1_B0(0,0) + (D11_B0(0,0)*wk3_B0(0,0)
      + wk1_B0(0,0))*invRe_sycl[0]*u1_B0(0,0)*d1_mu_dx - (2.0/3.0)*(-2*wk0_B0(0,0) +
      D11_B0(0,0)*wk4_B0(0,0))*invRe_sycl[0]*mu_B0(0,0)*wk0_B0(0,0) - (2.0/3.0)*(-2*wk0_B0(0,0) +
      D11_B0(0,0)*wk4_B0(0,0))*invRe_sycl[0]*u0_B0(0,0)*d1_mu_dx + ((1.0/3.0))*(3*d2_u1_dx + D11_B0(0,0)*d1_wk0_dy +
      4*(D11_B0(0,0)*D11_B0(0,0))*d2_u1_dy + 4*D11_B0(0,0)*wk4_B0(0,0)*SD111_B0(0,0))*invRe_sycl[0]*mu_B0(0,0)*u1_B0(0,0) +
      ((1.0/3.0))*(4*d2_u0_dx + D11_B0(0,0)*d1_wk1_dy + 3*(D11_B0(0,0)*D11_B0(0,0))*d2_u0_dy +
      3*D11_B0(0,0)*wk3_B0(0,0)*SD111_B0(0,0))*invRe_sycl[0]*mu_B0(0,0)*u0_B0(0,0) + (D11_B0(0,0)*wk3_B0(0,0) +
      wk1_B0(0,0))*invRe_sycl[0]*mu_B0(0,0)*D11_B0(0,0)*wk3_B0(0,0) + (D11_B0(0,0)*wk3_B0(0,0) +
      wk1_B0(0,0))*invRe_sycl[0]*u0_B0(0,0)*D11_B0(0,0)*d1_mu_dy + ((2.0/3.0))*(-wk0_B0(0,0) +
      2*D11_B0(0,0)*wk4_B0(0,0))*invRe_sycl[0]*mu_B0(0,0)*D11_B0(0,0)*wk4_B0(0,0) + ((2.0/3.0))*(-wk0_B0(0,0) +
      2*D11_B0(0,0)*wk4_B0(0,0))*invRe_sycl[0]*u1_B0(0,0)*D11_B0(0,0)*d1_mu_dy + ((D11_B0(0,0)*D11_B0(0,0))*d2_T_dy +
      D11_B0(0,0)*wk5_B0(0,0)*SD111_B0(0,0) + d2_T_dx)*invPr_sycl[0]*invRe_sycl[0]*inv2Minf_sycl[0]*inv_gamma_m1_sycl[0]*mu_B0(0,0) +
      invPr_sycl[0]*invRe_sycl[0]*inv2Minf_sycl[0]*inv_gamma_m1_sycl[0]*wk2_B0(0,0)*d1_mu_dx +
      (D11_B0(0,0)*D11_B0(0,0))*invPr_sycl[0]*invRe_sycl[0]*inv2Minf_sycl[0]*inv_gamma_m1_sycl[0]*wk5_B0(0,0)*d1_mu_dy + Residual3_B0(0,0);


        }
      });
    });
  }
  if (block->instance->OPS_diags > 1) {
    block->instance->sycl_instance->queue->wait();
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[23].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 16);
  ops_set_halo_dirtybit3(&args[12],range);
  ops_set_halo_dirtybit3(&args[13],range);
  ops_set_halo_dirtybit3(&args[14],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[23].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[23].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[23].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[23].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[23].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[23].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[23].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[23].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[23].transfer += ops_compute_transfer(dim, start, end, &arg7);
    block->instance->OPS_kernels[23].transfer += ops_compute_transfer(dim, start, end, &arg8);
    block->instance->OPS_kernels[23].transfer += ops_compute_transfer(dim, start, end, &arg9);
    block->instance->OPS_kernels[23].transfer += ops_compute_transfer(dim, start, end, &arg10);
    block->instance->OPS_kernels[23].transfer += ops_compute_transfer(dim, start, end, &arg11);
    block->instance->OPS_kernels[23].transfer += ops_compute_transfer(dim, start, end, &arg12);
    block->instance->OPS_kernels[23].transfer += ops_compute_transfer(dim, start, end, &arg13);
    block->instance->OPS_kernels[23].transfer += ops_compute_transfer(dim, start, end, &arg14);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel021(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11,
 ops_arg arg12, ops_arg arg13, ops_arg arg14, ops_arg arg15) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)calloc(1,sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 1;
  desc->index = 23;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 23;
  for ( int i=0; i<4; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 16;
  desc->args = (ops_arg*)ops_malloc(16*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg2.dat->index;
  desc->args[3] = arg3;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg3.dat->index;
  desc->args[4] = arg4;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg4.dat->index;
  desc->args[5] = arg5;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg5.dat->index;
  desc->args[6] = arg6;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg6.dat->index;
  desc->args[7] = arg7;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg7.dat->index;
  desc->args[8] = arg8;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg8.dat->index;
  desc->args[9] = arg9;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg9.dat->index;
  desc->args[10] = arg10;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg10.dat->index;
  desc->args[11] = arg11;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg11.dat->index;
  desc->args[12] = arg12;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg12.dat->index;
  desc->args[13] = arg13;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg13.dat->index;
  desc->args[14] = arg14;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg14.dat->index;
  desc->args[15] = arg15;
  desc->function = ops_par_loop_opensbliblock00Kernel021_execute;
  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,23,"opensbliblock00Kernel021");
  }
  ops_enqueue_kernel(desc);
}
#endif
