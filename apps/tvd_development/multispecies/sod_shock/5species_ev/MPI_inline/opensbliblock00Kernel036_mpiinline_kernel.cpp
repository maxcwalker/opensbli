//
// auto-generated by ops.py
//

extern int xdim0_opensbliblock00Kernel036;
int xdim0_opensbliblock00Kernel036_h = -1;
extern int xdim1_opensbliblock00Kernel036;
int xdim1_opensbliblock00Kernel036_h = -1;
extern int xdim2_opensbliblock00Kernel036;
int xdim2_opensbliblock00Kernel036_h = -1;
extern int xdim3_opensbliblock00Kernel036;
int xdim3_opensbliblock00Kernel036_h = -1;
extern int xdim4_opensbliblock00Kernel036;
int xdim4_opensbliblock00Kernel036_h = -1;
extern int xdim5_opensbliblock00Kernel036;
int xdim5_opensbliblock00Kernel036_h = -1;
extern int xdim6_opensbliblock00Kernel036;
int xdim6_opensbliblock00Kernel036_h = -1;
extern int xdim7_opensbliblock00Kernel036;
int xdim7_opensbliblock00Kernel036_h = -1;
extern int xdim8_opensbliblock00Kernel036;
int xdim8_opensbliblock00Kernel036_h = -1;
extern int xdim9_opensbliblock00Kernel036;
int xdim9_opensbliblock00Kernel036_h = -1;
extern int xdim10_opensbliblock00Kernel036;
int xdim10_opensbliblock00Kernel036_h = -1;
extern int xdim11_opensbliblock00Kernel036;
int xdim11_opensbliblock00Kernel036_h = -1;
extern int xdim12_opensbliblock00Kernel036;
int xdim12_opensbliblock00Kernel036_h = -1;
extern int xdim13_opensbliblock00Kernel036;
int xdim13_opensbliblock00Kernel036_h = -1;
extern int xdim14_opensbliblock00Kernel036;
int xdim14_opensbliblock00Kernel036_h = -1;
extern int xdim15_opensbliblock00Kernel036;
int xdim15_opensbliblock00Kernel036_h = -1;
extern int xdim16_opensbliblock00Kernel036;
int xdim16_opensbliblock00Kernel036_h = -1;
extern int xdim17_opensbliblock00Kernel036;
int xdim17_opensbliblock00Kernel036_h = -1;
extern int xdim18_opensbliblock00Kernel036;
int xdim18_opensbliblock00Kernel036_h = -1;
extern int xdim19_opensbliblock00Kernel036;
int xdim19_opensbliblock00Kernel036_h = -1;
extern int xdim20_opensbliblock00Kernel036;
int xdim20_opensbliblock00Kernel036_h = -1;
extern int xdim21_opensbliblock00Kernel036;
int xdim21_opensbliblock00Kernel036_h = -1;
extern int xdim22_opensbliblock00Kernel036;
int xdim22_opensbliblock00Kernel036_h = -1;
extern int xdim23_opensbliblock00Kernel036;
int xdim23_opensbliblock00Kernel036_h = -1;
extern int xdim24_opensbliblock00Kernel036;
int xdim24_opensbliblock00Kernel036_h = -1;
extern int xdim25_opensbliblock00Kernel036;
int xdim25_opensbliblock00Kernel036_h = -1;
extern int xdim26_opensbliblock00Kernel036;
int xdim26_opensbliblock00Kernel036_h = -1;
extern int xdim27_opensbliblock00Kernel036;
int xdim27_opensbliblock00Kernel036_h = -1;
extern int xdim28_opensbliblock00Kernel036;
int xdim28_opensbliblock00Kernel036_h = -1;
extern int xdim29_opensbliblock00Kernel036;
int xdim29_opensbliblock00Kernel036_h = -1;
extern int xdim30_opensbliblock00Kernel036;
int xdim30_opensbliblock00Kernel036_h = -1;
extern int xdim31_opensbliblock00Kernel036;
int xdim31_opensbliblock00Kernel036_h = -1;
extern int xdim32_opensbliblock00Kernel036;
int xdim32_opensbliblock00Kernel036_h = -1;
extern int xdim33_opensbliblock00Kernel036;
int xdim33_opensbliblock00Kernel036_h = -1;
extern int xdim34_opensbliblock00Kernel036;
int xdim34_opensbliblock00Kernel036_h = -1;
extern int xdim35_opensbliblock00Kernel036;
int xdim35_opensbliblock00Kernel036_h = -1;
extern int xdim36_opensbliblock00Kernel036;
int xdim36_opensbliblock00Kernel036_h = -1;
extern int xdim37_opensbliblock00Kernel036;
int xdim37_opensbliblock00Kernel036_h = -1;
extern int xdim38_opensbliblock00Kernel036;
int xdim38_opensbliblock00Kernel036_h = -1;
extern int xdim39_opensbliblock00Kernel036;
int xdim39_opensbliblock00Kernel036_h = -1;
extern int xdim40_opensbliblock00Kernel036;
int xdim40_opensbliblock00Kernel036_h = -1;
extern int xdim41_opensbliblock00Kernel036;
int xdim41_opensbliblock00Kernel036_h = -1;
extern int xdim42_opensbliblock00Kernel036;
int xdim42_opensbliblock00Kernel036_h = -1;
extern int xdim43_opensbliblock00Kernel036;
int xdim43_opensbliblock00Kernel036_h = -1;
extern int xdim44_opensbliblock00Kernel036;
int xdim44_opensbliblock00Kernel036_h = -1;
extern int xdim45_opensbliblock00Kernel036;
int xdim45_opensbliblock00Kernel036_h = -1;
extern int xdim46_opensbliblock00Kernel036;
int xdim46_opensbliblock00Kernel036_h = -1;
extern int xdim47_opensbliblock00Kernel036;
int xdim47_opensbliblock00Kernel036_h = -1;
extern int xdim48_opensbliblock00Kernel036;
int xdim48_opensbliblock00Kernel036_h = -1;
extern int xdim49_opensbliblock00Kernel036;
int xdim49_opensbliblock00Kernel036_h = -1;
extern int xdim50_opensbliblock00Kernel036;
int xdim50_opensbliblock00Kernel036_h = -1;
extern int xdim51_opensbliblock00Kernel036;
int xdim51_opensbliblock00Kernel036_h = -1;
extern int xdim52_opensbliblock00Kernel036;
int xdim52_opensbliblock00Kernel036_h = -1;
extern int xdim53_opensbliblock00Kernel036;
int xdim53_opensbliblock00Kernel036_h = -1;
extern int xdim54_opensbliblock00Kernel036;
int xdim54_opensbliblock00Kernel036_h = -1;

#ifdef __cplusplus
extern "C" {
#endif
void opensbliblock00Kernel036_c_wrapper(
  double *p_a0,
  double *p_a1,
  double *p_a2,
  double *p_a3,
  double *p_a4,
  double *p_a5,
  double *p_a6,
  double *p_a7,
  double *p_a8,
  double *p_a9,
  double *p_a10,
  double *p_a11,
  double *p_a12,
  double *p_a13,
  double *p_a14,
  double *p_a15,
  double *p_a16,
  double *p_a17,
  double *p_a18,
  double *p_a19,
  double *p_a20,
  double *p_a21,
  double *p_a22,
  double *p_a23,
  double *p_a24,
  double *p_a25,
  double *p_a26,
  double *p_a27,
  double *p_a28,
  double *p_a29,
  double *p_a30,
  double *p_a31,
  double *p_a32,
  double *p_a33,
  double *p_a34,
  double *p_a35,
  double *p_a36,
  double *p_a37,
  double *p_a38,
  double *p_a39,
  double *p_a40,
  double *p_a41,
  double *p_a42,
  double *p_a43,
  double *p_a44,
  double *p_a45,
  double *p_a46,
  double *p_a47,
  double *p_a48,
  double *p_a49,
  double *p_a50,
  double *p_a51,
  double *p_a52,
  double *p_a53,
  double *p_a54,
  int *p_a55,
  int arg_idx0,
  int x_size);

#ifdef __cplusplus
}
#endif

// host stub function
void ops_par_loop_opensbliblock00Kernel036(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11,
 ops_arg arg12, ops_arg arg13, ops_arg arg14, ops_arg arg15,
 ops_arg arg16, ops_arg arg17, ops_arg arg18, ops_arg arg19,
 ops_arg arg20, ops_arg arg21, ops_arg arg22, ops_arg arg23,
 ops_arg arg24, ops_arg arg25, ops_arg arg26, ops_arg arg27,
 ops_arg arg28, ops_arg arg29, ops_arg arg30, ops_arg arg31,
 ops_arg arg32, ops_arg arg33, ops_arg arg34, ops_arg arg35,
 ops_arg arg36, ops_arg arg37, ops_arg arg38, ops_arg arg39,
 ops_arg arg40, ops_arg arg41, ops_arg arg42, ops_arg arg43,
 ops_arg arg44, ops_arg arg45, ops_arg arg46, ops_arg arg47,
 ops_arg arg48, ops_arg arg49, ops_arg arg50, ops_arg arg51,
 ops_arg arg52, ops_arg arg53, ops_arg arg54, ops_arg arg55) {

  ops_arg args[56] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55};


  #ifdef CHECKPOINTING
  if (!ops_checkpointing_before(args,56,range,43)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,43,"opensbliblock00Kernel036");
    block->instance->OPS_kernels[43].count++;
  }

  //compute localy allocated range for the sub-block
  int start[1];
  int end[1];
  int arg_idx[1];

  #ifdef OPS_MPI
  if (compute_ranges(args, 56,block, range, start, end, arg_idx) < 0) return;
  #else
  for ( int n=0; n<1; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
    arg_idx[n] = start[n];
  }
  #endif

  int x_size = MAX(0,end[0]-start[0]);

  int xdim0 = args[0].dat->size[0];
  int xdim1 = args[1].dat->size[0];
  int xdim2 = args[2].dat->size[0];
  int xdim3 = args[3].dat->size[0];
  int xdim4 = args[4].dat->size[0];
  int xdim5 = args[5].dat->size[0];
  int xdim6 = args[6].dat->size[0];
  int xdim7 = args[7].dat->size[0];
  int xdim8 = args[8].dat->size[0];
  int xdim9 = args[9].dat->size[0];
  int xdim10 = args[10].dat->size[0];
  int xdim11 = args[11].dat->size[0];
  int xdim12 = args[12].dat->size[0];
  int xdim13 = args[13].dat->size[0];
  int xdim14 = args[14].dat->size[0];
  int xdim15 = args[15].dat->size[0];
  int xdim16 = args[16].dat->size[0];
  int xdim17 = args[17].dat->size[0];
  int xdim18 = args[18].dat->size[0];
  int xdim19 = args[19].dat->size[0];
  int xdim20 = args[20].dat->size[0];
  int xdim21 = args[21].dat->size[0];
  int xdim22 = args[22].dat->size[0];
  int xdim23 = args[23].dat->size[0];
  int xdim24 = args[24].dat->size[0];
  int xdim25 = args[25].dat->size[0];
  int xdim26 = args[26].dat->size[0];
  int xdim27 = args[27].dat->size[0];
  int xdim28 = args[28].dat->size[0];
  int xdim29 = args[29].dat->size[0];
  int xdim30 = args[30].dat->size[0];
  int xdim31 = args[31].dat->size[0];
  int xdim32 = args[32].dat->size[0];
  int xdim33 = args[33].dat->size[0];
  int xdim34 = args[34].dat->size[0];
  int xdim35 = args[35].dat->size[0];
  int xdim36 = args[36].dat->size[0];
  int xdim37 = args[37].dat->size[0];
  int xdim38 = args[38].dat->size[0];
  int xdim39 = args[39].dat->size[0];
  int xdim40 = args[40].dat->size[0];
  int xdim41 = args[41].dat->size[0];
  int xdim42 = args[42].dat->size[0];
  int xdim43 = args[43].dat->size[0];
  int xdim44 = args[44].dat->size[0];
  int xdim45 = args[45].dat->size[0];
  int xdim46 = args[46].dat->size[0];
  int xdim47 = args[47].dat->size[0];
  int xdim48 = args[48].dat->size[0];
  int xdim49 = args[49].dat->size[0];
  int xdim50 = args[50].dat->size[0];
  int xdim51 = args[51].dat->size[0];
  int xdim52 = args[52].dat->size[0];
  int xdim53 = args[53].dat->size[0];
  int xdim54 = args[54].dat->size[0];

  //Timing
  double t1,t2,c1,c2;
  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&c2,&t2);
  }

  if (xdim0 != xdim0_opensbliblock00Kernel036_h || xdim1 != xdim1_opensbliblock00Kernel036_h || xdim2 != xdim2_opensbliblock00Kernel036_h || xdim3 != xdim3_opensbliblock00Kernel036_h || xdim4 != xdim4_opensbliblock00Kernel036_h || xdim5 != xdim5_opensbliblock00Kernel036_h || xdim6 != xdim6_opensbliblock00Kernel036_h || xdim7 != xdim7_opensbliblock00Kernel036_h || xdim8 != xdim8_opensbliblock00Kernel036_h || xdim9 != xdim9_opensbliblock00Kernel036_h || xdim10 != xdim10_opensbliblock00Kernel036_h || xdim11 != xdim11_opensbliblock00Kernel036_h || xdim12 != xdim12_opensbliblock00Kernel036_h || xdim13 != xdim13_opensbliblock00Kernel036_h || xdim14 != xdim14_opensbliblock00Kernel036_h || xdim15 != xdim15_opensbliblock00Kernel036_h || xdim16 != xdim16_opensbliblock00Kernel036_h || xdim17 != xdim17_opensbliblock00Kernel036_h || xdim18 != xdim18_opensbliblock00Kernel036_h || xdim19 != xdim19_opensbliblock00Kernel036_h || xdim20 != xdim20_opensbliblock00Kernel036_h || xdim21 != xdim21_opensbliblock00Kernel036_h || xdim22 != xdim22_opensbliblock00Kernel036_h || xdim23 != xdim23_opensbliblock00Kernel036_h || xdim24 != xdim24_opensbliblock00Kernel036_h || xdim25 != xdim25_opensbliblock00Kernel036_h || xdim26 != xdim26_opensbliblock00Kernel036_h || xdim27 != xdim27_opensbliblock00Kernel036_h || xdim28 != xdim28_opensbliblock00Kernel036_h || xdim29 != xdim29_opensbliblock00Kernel036_h || xdim30 != xdim30_opensbliblock00Kernel036_h || xdim31 != xdim31_opensbliblock00Kernel036_h || xdim32 != xdim32_opensbliblock00Kernel036_h || xdim33 != xdim33_opensbliblock00Kernel036_h || xdim34 != xdim34_opensbliblock00Kernel036_h || xdim35 != xdim35_opensbliblock00Kernel036_h || xdim36 != xdim36_opensbliblock00Kernel036_h || xdim37 != xdim37_opensbliblock00Kernel036_h || xdim38 != xdim38_opensbliblock00Kernel036_h || xdim39 != xdim39_opensbliblock00Kernel036_h || xdim40 != xdim40_opensbliblock00Kernel036_h || xdim41 != xdim41_opensbliblock00Kernel036_h || xdim42 != xdim42_opensbliblock00Kernel036_h || xdim43 != xdim43_opensbliblock00Kernel036_h || xdim44 != xdim44_opensbliblock00Kernel036_h || xdim45 != xdim45_opensbliblock00Kernel036_h || xdim46 != xdim46_opensbliblock00Kernel036_h || xdim47 != xdim47_opensbliblock00Kernel036_h || xdim48 != xdim48_opensbliblock00Kernel036_h || xdim49 != xdim49_opensbliblock00Kernel036_h || xdim50 != xdim50_opensbliblock00Kernel036_h || xdim51 != xdim51_opensbliblock00Kernel036_h || xdim52 != xdim52_opensbliblock00Kernel036_h || xdim53 != xdim53_opensbliblock00Kernel036_h || xdim54 != xdim54_opensbliblock00Kernel036_h) {
    xdim0_opensbliblock00Kernel036 = xdim0;
    xdim0_opensbliblock00Kernel036_h = xdim0;
    xdim1_opensbliblock00Kernel036 = xdim1;
    xdim1_opensbliblock00Kernel036_h = xdim1;
    xdim2_opensbliblock00Kernel036 = xdim2;
    xdim2_opensbliblock00Kernel036_h = xdim2;
    xdim3_opensbliblock00Kernel036 = xdim3;
    xdim3_opensbliblock00Kernel036_h = xdim3;
    xdim4_opensbliblock00Kernel036 = xdim4;
    xdim4_opensbliblock00Kernel036_h = xdim4;
    xdim5_opensbliblock00Kernel036 = xdim5;
    xdim5_opensbliblock00Kernel036_h = xdim5;
    xdim6_opensbliblock00Kernel036 = xdim6;
    xdim6_opensbliblock00Kernel036_h = xdim6;
    xdim7_opensbliblock00Kernel036 = xdim7;
    xdim7_opensbliblock00Kernel036_h = xdim7;
    xdim8_opensbliblock00Kernel036 = xdim8;
    xdim8_opensbliblock00Kernel036_h = xdim8;
    xdim9_opensbliblock00Kernel036 = xdim9;
    xdim9_opensbliblock00Kernel036_h = xdim9;
    xdim10_opensbliblock00Kernel036 = xdim10;
    xdim10_opensbliblock00Kernel036_h = xdim10;
    xdim11_opensbliblock00Kernel036 = xdim11;
    xdim11_opensbliblock00Kernel036_h = xdim11;
    xdim12_opensbliblock00Kernel036 = xdim12;
    xdim12_opensbliblock00Kernel036_h = xdim12;
    xdim13_opensbliblock00Kernel036 = xdim13;
    xdim13_opensbliblock00Kernel036_h = xdim13;
    xdim14_opensbliblock00Kernel036 = xdim14;
    xdim14_opensbliblock00Kernel036_h = xdim14;
    xdim15_opensbliblock00Kernel036 = xdim15;
    xdim15_opensbliblock00Kernel036_h = xdim15;
    xdim16_opensbliblock00Kernel036 = xdim16;
    xdim16_opensbliblock00Kernel036_h = xdim16;
    xdim17_opensbliblock00Kernel036 = xdim17;
    xdim17_opensbliblock00Kernel036_h = xdim17;
    xdim18_opensbliblock00Kernel036 = xdim18;
    xdim18_opensbliblock00Kernel036_h = xdim18;
    xdim19_opensbliblock00Kernel036 = xdim19;
    xdim19_opensbliblock00Kernel036_h = xdim19;
    xdim20_opensbliblock00Kernel036 = xdim20;
    xdim20_opensbliblock00Kernel036_h = xdim20;
    xdim21_opensbliblock00Kernel036 = xdim21;
    xdim21_opensbliblock00Kernel036_h = xdim21;
    xdim22_opensbliblock00Kernel036 = xdim22;
    xdim22_opensbliblock00Kernel036_h = xdim22;
    xdim23_opensbliblock00Kernel036 = xdim23;
    xdim23_opensbliblock00Kernel036_h = xdim23;
    xdim24_opensbliblock00Kernel036 = xdim24;
    xdim24_opensbliblock00Kernel036_h = xdim24;
    xdim25_opensbliblock00Kernel036 = xdim25;
    xdim25_opensbliblock00Kernel036_h = xdim25;
    xdim26_opensbliblock00Kernel036 = xdim26;
    xdim26_opensbliblock00Kernel036_h = xdim26;
    xdim27_opensbliblock00Kernel036 = xdim27;
    xdim27_opensbliblock00Kernel036_h = xdim27;
    xdim28_opensbliblock00Kernel036 = xdim28;
    xdim28_opensbliblock00Kernel036_h = xdim28;
    xdim29_opensbliblock00Kernel036 = xdim29;
    xdim29_opensbliblock00Kernel036_h = xdim29;
    xdim30_opensbliblock00Kernel036 = xdim30;
    xdim30_opensbliblock00Kernel036_h = xdim30;
    xdim31_opensbliblock00Kernel036 = xdim31;
    xdim31_opensbliblock00Kernel036_h = xdim31;
    xdim32_opensbliblock00Kernel036 = xdim32;
    xdim32_opensbliblock00Kernel036_h = xdim32;
    xdim33_opensbliblock00Kernel036 = xdim33;
    xdim33_opensbliblock00Kernel036_h = xdim33;
    xdim34_opensbliblock00Kernel036 = xdim34;
    xdim34_opensbliblock00Kernel036_h = xdim34;
    xdim35_opensbliblock00Kernel036 = xdim35;
    xdim35_opensbliblock00Kernel036_h = xdim35;
    xdim36_opensbliblock00Kernel036 = xdim36;
    xdim36_opensbliblock00Kernel036_h = xdim36;
    xdim37_opensbliblock00Kernel036 = xdim37;
    xdim37_opensbliblock00Kernel036_h = xdim37;
    xdim38_opensbliblock00Kernel036 = xdim38;
    xdim38_opensbliblock00Kernel036_h = xdim38;
    xdim39_opensbliblock00Kernel036 = xdim39;
    xdim39_opensbliblock00Kernel036_h = xdim39;
    xdim40_opensbliblock00Kernel036 = xdim40;
    xdim40_opensbliblock00Kernel036_h = xdim40;
    xdim41_opensbliblock00Kernel036 = xdim41;
    xdim41_opensbliblock00Kernel036_h = xdim41;
    xdim42_opensbliblock00Kernel036 = xdim42;
    xdim42_opensbliblock00Kernel036_h = xdim42;
    xdim43_opensbliblock00Kernel036 = xdim43;
    xdim43_opensbliblock00Kernel036_h = xdim43;
    xdim44_opensbliblock00Kernel036 = xdim44;
    xdim44_opensbliblock00Kernel036_h = xdim44;
    xdim45_opensbliblock00Kernel036 = xdim45;
    xdim45_opensbliblock00Kernel036_h = xdim45;
    xdim46_opensbliblock00Kernel036 = xdim46;
    xdim46_opensbliblock00Kernel036_h = xdim46;
    xdim47_opensbliblock00Kernel036 = xdim47;
    xdim47_opensbliblock00Kernel036_h = xdim47;
    xdim48_opensbliblock00Kernel036 = xdim48;
    xdim48_opensbliblock00Kernel036_h = xdim48;
    xdim49_opensbliblock00Kernel036 = xdim49;
    xdim49_opensbliblock00Kernel036_h = xdim49;
    xdim50_opensbliblock00Kernel036 = xdim50;
    xdim50_opensbliblock00Kernel036_h = xdim50;
    xdim51_opensbliblock00Kernel036 = xdim51;
    xdim51_opensbliblock00Kernel036_h = xdim51;
    xdim52_opensbliblock00Kernel036 = xdim52;
    xdim52_opensbliblock00Kernel036_h = xdim52;
    xdim53_opensbliblock00Kernel036 = xdim53;
    xdim53_opensbliblock00Kernel036_h = xdim53;
    xdim54_opensbliblock00Kernel036 = xdim54;
    xdim54_opensbliblock00Kernel036_h = xdim54;
  }



  //set up initial pointers and exchange halos if necessary
  long long int base0 = args[0].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[0].dat->type_size : args[0].dat->elem_size) * start[0] * args[0].stencil->stride[0];
  double *p_a0 = (double *)(args[0].data + base0);

  long long int base1 = args[1].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[1].dat->type_size : args[1].dat->elem_size) * start[0] * args[1].stencil->stride[0];
  double *p_a1 = (double *)(args[1].data + base1);

  long long int base2 = args[2].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[2].dat->type_size : args[2].dat->elem_size) * start[0] * args[2].stencil->stride[0];
  double *p_a2 = (double *)(args[2].data + base2);

  long long int base3 = args[3].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[3].dat->type_size : args[3].dat->elem_size) * start[0] * args[3].stencil->stride[0];
  double *p_a3 = (double *)(args[3].data + base3);

  long long int base4 = args[4].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[4].dat->type_size : args[4].dat->elem_size) * start[0] * args[4].stencil->stride[0];
  double *p_a4 = (double *)(args[4].data + base4);

  long long int base5 = args[5].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[5].dat->type_size : args[5].dat->elem_size) * start[0] * args[5].stencil->stride[0];
  double *p_a5 = (double *)(args[5].data + base5);

  long long int base6 = args[6].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[6].dat->type_size : args[6].dat->elem_size) * start[0] * args[6].stencil->stride[0];
  double *p_a6 = (double *)(args[6].data + base6);

  long long int base7 = args[7].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[7].dat->type_size : args[7].dat->elem_size) * start[0] * args[7].stencil->stride[0];
  double *p_a7 = (double *)(args[7].data + base7);

  long long int base8 = args[8].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[8].dat->type_size : args[8].dat->elem_size) * start[0] * args[8].stencil->stride[0];
  double *p_a8 = (double *)(args[8].data + base8);

  long long int base9 = args[9].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[9].dat->type_size : args[9].dat->elem_size) * start[0] * args[9].stencil->stride[0];
  double *p_a9 = (double *)(args[9].data + base9);

  long long int base10 = args[10].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[10].dat->type_size : args[10].dat->elem_size) * start[0] * args[10].stencil->stride[0];
  double *p_a10 = (double *)(args[10].data + base10);

  long long int base11 = args[11].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[11].dat->type_size : args[11].dat->elem_size) * start[0] * args[11].stencil->stride[0];
  double *p_a11 = (double *)(args[11].data + base11);

  long long int base12 = args[12].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[12].dat->type_size : args[12].dat->elem_size) * start[0] * args[12].stencil->stride[0];
  double *p_a12 = (double *)(args[12].data + base12);

  long long int base13 = args[13].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[13].dat->type_size : args[13].dat->elem_size) * start[0] * args[13].stencil->stride[0];
  double *p_a13 = (double *)(args[13].data + base13);

  long long int base14 = args[14].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[14].dat->type_size : args[14].dat->elem_size) * start[0] * args[14].stencil->stride[0];
  double *p_a14 = (double *)(args[14].data + base14);

  long long int base15 = args[15].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[15].dat->type_size : args[15].dat->elem_size) * start[0] * args[15].stencil->stride[0];
  double *p_a15 = (double *)(args[15].data + base15);

  long long int base16 = args[16].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[16].dat->type_size : args[16].dat->elem_size) * start[0] * args[16].stencil->stride[0];
  double *p_a16 = (double *)(args[16].data + base16);

  long long int base17 = args[17].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[17].dat->type_size : args[17].dat->elem_size) * start[0] * args[17].stencil->stride[0];
  double *p_a17 = (double *)(args[17].data + base17);

  long long int base18 = args[18].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[18].dat->type_size : args[18].dat->elem_size) * start[0] * args[18].stencil->stride[0];
  double *p_a18 = (double *)(args[18].data + base18);

  long long int base19 = args[19].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[19].dat->type_size : args[19].dat->elem_size) * start[0] * args[19].stencil->stride[0];
  double *p_a19 = (double *)(args[19].data + base19);

  long long int base20 = args[20].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[20].dat->type_size : args[20].dat->elem_size) * start[0] * args[20].stencil->stride[0];
  double *p_a20 = (double *)(args[20].data + base20);

  long long int base21 = args[21].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[21].dat->type_size : args[21].dat->elem_size) * start[0] * args[21].stencil->stride[0];
  double *p_a21 = (double *)(args[21].data + base21);

  long long int base22 = args[22].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[22].dat->type_size : args[22].dat->elem_size) * start[0] * args[22].stencil->stride[0];
  double *p_a22 = (double *)(args[22].data + base22);

  long long int base23 = args[23].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[23].dat->type_size : args[23].dat->elem_size) * start[0] * args[23].stencil->stride[0];
  double *p_a23 = (double *)(args[23].data + base23);

  long long int base24 = args[24].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[24].dat->type_size : args[24].dat->elem_size) * start[0] * args[24].stencil->stride[0];
  double *p_a24 = (double *)(args[24].data + base24);

  long long int base25 = args[25].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[25].dat->type_size : args[25].dat->elem_size) * start[0] * args[25].stencil->stride[0];
  double *p_a25 = (double *)(args[25].data + base25);

  long long int base26 = args[26].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[26].dat->type_size : args[26].dat->elem_size) * start[0] * args[26].stencil->stride[0];
  double *p_a26 = (double *)(args[26].data + base26);

  long long int base27 = args[27].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[27].dat->type_size : args[27].dat->elem_size) * start[0] * args[27].stencil->stride[0];
  double *p_a27 = (double *)(args[27].data + base27);

  long long int base28 = args[28].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[28].dat->type_size : args[28].dat->elem_size) * start[0] * args[28].stencil->stride[0];
  double *p_a28 = (double *)(args[28].data + base28);

  long long int base29 = args[29].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[29].dat->type_size : args[29].dat->elem_size) * start[0] * args[29].stencil->stride[0];
  double *p_a29 = (double *)(args[29].data + base29);

  long long int base30 = args[30].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[30].dat->type_size : args[30].dat->elem_size) * start[0] * args[30].stencil->stride[0];
  double *p_a30 = (double *)(args[30].data + base30);

  long long int base31 = args[31].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[31].dat->type_size : args[31].dat->elem_size) * start[0] * args[31].stencil->stride[0];
  double *p_a31 = (double *)(args[31].data + base31);

  long long int base32 = args[32].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[32].dat->type_size : args[32].dat->elem_size) * start[0] * args[32].stencil->stride[0];
  double *p_a32 = (double *)(args[32].data + base32);

  long long int base33 = args[33].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[33].dat->type_size : args[33].dat->elem_size) * start[0] * args[33].stencil->stride[0];
  double *p_a33 = (double *)(args[33].data + base33);

  long long int base34 = args[34].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[34].dat->type_size : args[34].dat->elem_size) * start[0] * args[34].stencil->stride[0];
  double *p_a34 = (double *)(args[34].data + base34);

  long long int base35 = args[35].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[35].dat->type_size : args[35].dat->elem_size) * start[0] * args[35].stencil->stride[0];
  double *p_a35 = (double *)(args[35].data + base35);

  long long int base36 = args[36].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[36].dat->type_size : args[36].dat->elem_size) * start[0] * args[36].stencil->stride[0];
  double *p_a36 = (double *)(args[36].data + base36);

  long long int base37 = args[37].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[37].dat->type_size : args[37].dat->elem_size) * start[0] * args[37].stencil->stride[0];
  double *p_a37 = (double *)(args[37].data + base37);

  long long int base38 = args[38].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[38].dat->type_size : args[38].dat->elem_size) * start[0] * args[38].stencil->stride[0];
  double *p_a38 = (double *)(args[38].data + base38);

  long long int base39 = args[39].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[39].dat->type_size : args[39].dat->elem_size) * start[0] * args[39].stencil->stride[0];
  double *p_a39 = (double *)(args[39].data + base39);

  long long int base40 = args[40].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[40].dat->type_size : args[40].dat->elem_size) * start[0] * args[40].stencil->stride[0];
  double *p_a40 = (double *)(args[40].data + base40);

  long long int base41 = args[41].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[41].dat->type_size : args[41].dat->elem_size) * start[0] * args[41].stencil->stride[0];
  double *p_a41 = (double *)(args[41].data + base41);

  long long int base42 = args[42].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[42].dat->type_size : args[42].dat->elem_size) * start[0] * args[42].stencil->stride[0];
  double *p_a42 = (double *)(args[42].data + base42);

  long long int base43 = args[43].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[43].dat->type_size : args[43].dat->elem_size) * start[0] * args[43].stencil->stride[0];
  double *p_a43 = (double *)(args[43].data + base43);

  long long int base44 = args[44].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[44].dat->type_size : args[44].dat->elem_size) * start[0] * args[44].stencil->stride[0];
  double *p_a44 = (double *)(args[44].data + base44);

  long long int base45 = args[45].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[45].dat->type_size : args[45].dat->elem_size) * start[0] * args[45].stencil->stride[0];
  double *p_a45 = (double *)(args[45].data + base45);

  long long int base46 = args[46].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[46].dat->type_size : args[46].dat->elem_size) * start[0] * args[46].stencil->stride[0];
  double *p_a46 = (double *)(args[46].data + base46);

  long long int base47 = args[47].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[47].dat->type_size : args[47].dat->elem_size) * start[0] * args[47].stencil->stride[0];
  double *p_a47 = (double *)(args[47].data + base47);

  long long int base48 = args[48].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[48].dat->type_size : args[48].dat->elem_size) * start[0] * args[48].stencil->stride[0];
  double *p_a48 = (double *)(args[48].data + base48);

  long long int base49 = args[49].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[49].dat->type_size : args[49].dat->elem_size) * start[0] * args[49].stencil->stride[0];
  double *p_a49 = (double *)(args[49].data + base49);

  long long int base50 = args[50].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[50].dat->type_size : args[50].dat->elem_size) * start[0] * args[50].stencil->stride[0];
  double *p_a50 = (double *)(args[50].data + base50);

  long long int base51 = args[51].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[51].dat->type_size : args[51].dat->elem_size) * start[0] * args[51].stencil->stride[0];
  double *p_a51 = (double *)(args[51].data + base51);

  long long int base52 = args[52].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[52].dat->type_size : args[52].dat->elem_size) * start[0] * args[52].stencil->stride[0];
  double *p_a52 = (double *)(args[52].data + base52);

  long long int base53 = args[53].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[53].dat->type_size : args[53].dat->elem_size) * start[0] * args[53].stencil->stride[0];
  double *p_a53 = (double *)(args[53].data + base53);

  long long int base54 = args[54].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[54].dat->type_size : args[54].dat->elem_size) * start[0] * args[54].stencil->stride[0];
  double *p_a54 = (double *)(args[54].data + base54);

  int *p_a55 = NULL;



  ops_H_D_exchanges_host(args, 56);
  ops_halo_exchanges(args,56,range);

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&c1,&t1);
    block->instance->OPS_kernels[43].mpi_time += t1-t2;
  }

  opensbliblock00Kernel036_c_wrapper(
    p_a0,
    p_a1,
    p_a2,
    p_a3,
    p_a4,
    p_a5,
    p_a6,
    p_a7,
    p_a8,
    p_a9,
    p_a10,
    p_a11,
    p_a12,
    p_a13,
    p_a14,
    p_a15,
    p_a16,
    p_a17,
    p_a18,
    p_a19,
    p_a20,
    p_a21,
    p_a22,
    p_a23,
    p_a24,
    p_a25,
    p_a26,
    p_a27,
    p_a28,
    p_a29,
    p_a30,
    p_a31,
    p_a32,
    p_a33,
    p_a34,
    p_a35,
    p_a36,
    p_a37,
    p_a38,
    p_a39,
    p_a40,
    p_a41,
    p_a42,
    p_a43,
    p_a44,
    p_a45,
    p_a46,
    p_a47,
    p_a48,
    p_a49,
    p_a50,
    p_a51,
    p_a52,
    p_a53,
    p_a54,
    p_a55,
    arg_idx[0],
    x_size);

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[43].time += t2-t1;
  }
  ops_set_dirtybit_host(args, 56);
  ops_set_halo_dirtybit3(&args[47],range);
  ops_set_halo_dirtybit3(&args[48],range);
  ops_set_halo_dirtybit3(&args[49],range);
  ops_set_halo_dirtybit3(&args[50],range);
  ops_set_halo_dirtybit3(&args[51],range);
  ops_set_halo_dirtybit3(&args[52],range);
  ops_set_halo_dirtybit3(&args[53],range);
  ops_set_halo_dirtybit3(&args[54],range);

  //Update kernel record
  if (block->instance->OPS_diags > 1) {
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg7);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg8);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg9);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg10);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg11);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg12);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg13);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg14);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg15);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg16);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg17);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg18);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg19);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg20);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg21);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg22);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg23);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg24);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg25);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg26);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg27);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg28);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg29);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg30);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg31);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg32);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg33);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg34);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg35);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg36);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg37);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg38);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg39);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg40);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg41);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg42);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg43);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg44);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg45);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg46);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg47);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg48);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg49);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg50);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg51);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg52);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg53);
    block->instance->OPS_kernels[43].transfer += ops_compute_transfer(dim, start, end, &arg54);
  }
}
