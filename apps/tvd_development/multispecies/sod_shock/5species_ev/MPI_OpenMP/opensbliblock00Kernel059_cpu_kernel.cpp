//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel059(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9) {
#else
void ops_par_loop_opensbliblock00Kernel059_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  ops_arg arg9 = desc->args[9];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[10] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,10,range,0)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,0,"opensbliblock00Kernel059");
    block->instance->OPS_kernels[0].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "opensbliblock00Kernel059");
  #endif


  //compute locally allocated range for the sub-block
  int start[1];
  int end[1];
  int arg_idx[1];
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<1; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 10,block, range, start, end, arg_idx) < 0) return;
  #endif


  #if defined(OPS_MPI)
  #if defined(OPS_LAZY)
  sub_block_list sb = OPS_sub_block_list[block->index];
  arg_idx[0] = sb->decomp_disp[0];
  #else
  arg_idx[0] -= start[0];
  #endif
  #else //OPS_MPI
  arg_idx[0] = 0;
  #endif //OPS_MPI

  //initialize global variable with the dimension of dats

  //set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset;
  double * __restrict__ rhoE_B0_p = (double *)(args[0].data + base0);

  int base1 = args[1].dat->base_offset;
  double * __restrict__ rhoN2_B0_p = (double *)(args[1].data + base1);

  int base2 = args[2].dat->base_offset;
  double * __restrict__ rhoNO_B0_p = (double *)(args[2].data + base2);

  int base3 = args[3].dat->base_offset;
  double * __restrict__ rhoN_B0_p = (double *)(args[3].data + base3);

  int base4 = args[4].dat->base_offset;
  double * __restrict__ rhoO2_B0_p = (double *)(args[4].data + base4);

  int base5 = args[5].dat->base_offset;
  double * __restrict__ rhoO_B0_p = (double *)(args[5].data + base5);

  int base6 = args[6].dat->base_offset;
  double * __restrict__ rhoev_B0_p = (double *)(args[6].data + base6);

  int base7 = args[7].dat->base_offset;
  double * __restrict__ rhou0_B0_p = (double *)(args[7].data + base7);

  int base8 = args[8].dat->base_offset;
  double * __restrict__ x0_B0_p = (double *)(args[8].data + base8);




  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_host(args, 10);
  ops_halo_exchanges(args,10,range);
  ops_H_D_exchanges_host(args, 10);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[0].mpi_time += __t1-__t2;
  }

  #pragma omp parallel for
  for ( int n_x=start[0]; n_x<end[0]; n_x++ ){
    int idx[] = {arg_idx[0]+n_x};
    ACC<double> rhoE_B0(rhoE_B0_p + n_x*1);
    ACC<double> rhoN2_B0(rhoN2_B0_p + n_x*1);
    ACC<double> rhoNO_B0(rhoNO_B0_p + n_x*1);
    ACC<double> rhoN_B0(rhoN_B0_p + n_x*1);
    ACC<double> rhoO2_B0(rhoO2_B0_p + n_x*1);
    ACC<double> rhoO_B0(rhoO_B0_p + n_x*1);
    ACC<double> rhoev_B0(rhoev_B0_p + n_x*1);
    ACC<double> rhou0_B0(rhou0_B0_p + n_x*1);
    ACC<double> x0_B0(x0_B0_p + n_x*1);
    
   double T0 = 0.0;
   double Tvl = 0.0;
   double evN2l = 0.0;
   double evNOl = 0.0;
   double evO2l = 0.0;
   double p0 = 0.0;
   double rho = 0.0;
   double rho0 = 0.0;
   double rhoN0 = 0.0;
   double rhoN20 = 0.0;
   double rhoNO0 = 0.0;
   double rhoO0 = 0.0;
   double rhoO20 = 0.0;
   double u0 = 0.0;
   double yN0 = 0.0;
   double yN20 = 0.0;
   double yNO0 = 0.0;
   double yO0 = 0.0;
   double yO20 = 0.0;
   x0_B0(0) = Delta0block0*idx[0];

   T0 = ((x0_B0(0) < 0.5) ? (
   9000
)
: (
   300
));

   p0 = ((x0_B0(0) < 0.5) ? (
   1975837.5
)
: (
   101325
));

   u0 = 0.0;

   yO20 = ((x0_B0(0) < 0.5) ? (
   0.001261
)
: (
   0.2347
));

   yN20 = ((x0_B0(0) < 0.5) ? (
   0.487304
)
: (
   0.7653
));

   yO0 = ((x0_B0(0) < 0.5) ? (
   0.223284
)
: (
   0.0
));

   yN0 = ((x0_B0(0) < 0.5) ? (
   0.262766
)
: (
   0.0
));

   yNO0 = ((x0_B0(0) < 0.5) ? (
   0.025386
)
: (
   0.0
));

    rho0 = 0.120274707431774*p0/((31.25*yO20 + 62.5*yO0 + 33.3333333333333*yNO0 + 35.7142857142857*yN20 +
      71.4285714285714*yN0)*T0);

   rhoO20 = rho0*yO20;

   rhoN20 = rho0*yN20;

   rhoO0 = rho0*yO0;

   rhoN0 = rho0*yN0;

   rhoNO0 = rho0*yNO0;

   rho0 = rhoN0 + rhoN20 + rhoNO0 + rhoO0 + rhoO20;

    Tvl = p0/(296.939285714286*rhoN20 + 593.878571428571*rhoN0 + 259.821875*rhoO20 + 519.64375*rhoO0 +
      277.143333333333*rhoNO0);

   evO2l = 8.3143*thetavO2/(-0.032 + 0.032*exp(thetavO2/Tvl));

   evN2l = 8.3143*thetavN2/(-0.028 + 0.028*exp(thetavN2/Tvl));

   evNOl = 8.3143*thetavNO/(-0.03 + 0.03*exp(thetavNO/Tvl));

   rhoO2_B0(0) = rho0*yO20;

   rhoN2_B0(0) = rho0*yN20;

   rhoO_B0(0) = rho0*yO0;

   rhoN_B0(0) = rho0*yN0;

   rhoNO_B0(0) = rho0*yNO0;

   rhou0_B0(0) = rho*u0;

   rhoev_B0(0) = evN2l*rhoN20 + evNOl*rhoNO0 + evO2l*rhoO20;

    rhoE_B0(0) = evN2l*rhoN20 + evNOl*rhoNO0 + evO2l*rhoO20 + 0.5*(u0*u0)*rho + 62.5*dhf0O*rhoO0 +
      33.3333333333333*dhf0NO*rhoNO0 + 71.4285714285714*dhf0N*rhoN0 + (93.75*rhoO0 + 78.125*rhoO20 +
      83.3333333333333*rhoNO0 + 107.142857142857*rhoN0 + 89.2857142857143*rhoN20)*p0/(31.25*rhoO20 + 62.5*rhoO0 +
      33.3333333333333*rhoNO0 + 35.7142857142857*rhoN20 + 71.4285714285714*rhoN0);


  }
  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[0].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_host(args, 10);
  ops_set_halo_dirtybit3(&args[0],range);
  ops_set_halo_dirtybit3(&args[1],range);
  ops_set_halo_dirtybit3(&args[2],range);
  ops_set_halo_dirtybit3(&args[3],range);
  ops_set_halo_dirtybit3(&args[4],range);
  ops_set_halo_dirtybit3(&args[5],range);
  ops_set_halo_dirtybit3(&args[6],range);
  ops_set_halo_dirtybit3(&args[7],range);
  ops_set_halo_dirtybit3(&args[8],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[0].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg7);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg8);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel059(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9) {
  ops_arg args[10] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9 };

  //create kernel descriptor and pass it to ops_enqueue_kernel
  create_kerneldesc_and_enque(name, args, 10, 0, dim, 0, range, block, ops_par_loop_opensbliblock00Kernel059_execute);
}
#endif
