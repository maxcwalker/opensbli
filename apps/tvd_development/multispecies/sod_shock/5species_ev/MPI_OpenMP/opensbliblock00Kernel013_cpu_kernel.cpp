//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel013(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11,
 ops_arg arg12, ops_arg arg13, ops_arg arg14, ops_arg arg15,
 ops_arg arg16, ops_arg arg17, ops_arg arg18, ops_arg arg19,
 ops_arg arg20, ops_arg arg21, ops_arg arg22, ops_arg arg23,
 ops_arg arg24, ops_arg arg25, ops_arg arg26, ops_arg arg27,
 ops_arg arg28, ops_arg arg29, ops_arg arg30, ops_arg arg31,
 ops_arg arg32, ops_arg arg33) {
#else
void ops_par_loop_opensbliblock00Kernel013_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  ops_arg arg9 = desc->args[9];
  ops_arg arg10 = desc->args[10];
  ops_arg arg11 = desc->args[11];
  ops_arg arg12 = desc->args[12];
  ops_arg arg13 = desc->args[13];
  ops_arg arg14 = desc->args[14];
  ops_arg arg15 = desc->args[15];
  ops_arg arg16 = desc->args[16];
  ops_arg arg17 = desc->args[17];
  ops_arg arg18 = desc->args[18];
  ops_arg arg19 = desc->args[19];
  ops_arg arg20 = desc->args[20];
  ops_arg arg21 = desc->args[21];
  ops_arg arg22 = desc->args[22];
  ops_arg arg23 = desc->args[23];
  ops_arg arg24 = desc->args[24];
  ops_arg arg25 = desc->args[25];
  ops_arg arg26 = desc->args[26];
  ops_arg arg27 = desc->args[27];
  ops_arg arg28 = desc->args[28];
  ops_arg arg29 = desc->args[29];
  ops_arg arg30 = desc->args[30];
  ops_arg arg31 = desc->args[31];
  ops_arg arg32 = desc->args[32];
  ops_arg arg33 = desc->args[33];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[34] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,34,range,13)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,13,"opensbliblock00Kernel013");
    block->instance->OPS_kernels[13].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "opensbliblock00Kernel013");
  #endif


  //compute locally allocated range for the sub-block
  int start[1];
  int end[1];
  int arg_idx[1];
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<1; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 34,block, range, start, end, arg_idx) < 0) return;
  #endif


  #if defined(OPS_MPI)
  #if defined(OPS_LAZY)
  sub_block_list sb = OPS_sub_block_list[block->index];
  arg_idx[0] = sb->decomp_disp[0];
  #else
  arg_idx[0] -= start[0];
  #endif
  #else //OPS_MPI
  arg_idx[0] = 0;
  #endif //OPS_MPI

  //initialize global variable with the dimension of dats

  //set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset;
  double * __restrict__ T_B0_p = (double *)(args[0].data + base0);

  int base1 = args[1].dat->base_offset;
  double * __restrict__ evN2_B0_p = (double *)(args[1].data + base1);

  int base2 = args[2].dat->base_offset;
  double * __restrict__ evNO_B0_p = (double *)(args[2].data + base2);

  int base3 = args[3].dat->base_offset;
  double * __restrict__ evO2_B0_p = (double *)(args[3].data + base3);

  int base4 = args[4].dat->base_offset;
  double * __restrict__ eveqN2_B0_p = (double *)(args[4].data + base4);

  int base5 = args[5].dat->base_offset;
  double * __restrict__ eveqNO_B0_p = (double *)(args[5].data + base5);

  int base6 = args[6].dat->base_offset;
  double * __restrict__ eveqO2_B0_p = (double *)(args[6].data + base6);

  int base7 = args[7].dat->base_offset;
  double * __restrict__ p_B0_p = (double *)(args[7].data + base7);

  int base8 = args[8].dat->base_offset;
  double * __restrict__ ptauN2_B0_p = (double *)(args[8].data + base8);

  int base9 = args[9].dat->base_offset;
  double * __restrict__ ptauNO_B0_p = (double *)(args[9].data + base9);

  int base10 = args[10].dat->base_offset;
  double * __restrict__ ptauO2_B0_p = (double *)(args[10].data + base10);

  int base11 = args[11].dat->base_offset;
  double * __restrict__ rhoE_B0_p = (double *)(args[11].data + base11);

  int base12 = args[12].dat->base_offset;
  double * __restrict__ rhoN2_B0_p = (double *)(args[12].data + base12);

  int base13 = args[13].dat->base_offset;
  double * __restrict__ rhoNO_B0_p = (double *)(args[13].data + base13);

  int base14 = args[14].dat->base_offset;
  double * __restrict__ rhoN_B0_p = (double *)(args[14].data + base14);

  int base15 = args[15].dat->base_offset;
  double * __restrict__ rhoO2_B0_p = (double *)(args[15].data + base15);

  int base16 = args[16].dat->base_offset;
  double * __restrict__ rhoO_B0_p = (double *)(args[16].data + base16);

  int base17 = args[17].dat->base_offset;
  double * __restrict__ rhoev_B0_p = (double *)(args[17].data + base17);

  int base18 = args[18].dat->base_offset;
  double * __restrict__ rhou0_B0_p = (double *)(args[18].data + base18);

  int base19 = args[19].dat->base_offset;
  double * __restrict__ u0_B0_p = (double *)(args[19].data + base19);

  int base20 = args[20].dat->base_offset;
  double * __restrict__ wdotN2_B0_p = (double *)(args[20].data + base20);

  int base21 = args[21].dat->base_offset;
  double * __restrict__ wdotNO_B0_p = (double *)(args[21].data + base21);

  int base22 = args[22].dat->base_offset;
  double * __restrict__ wdotN_B0_p = (double *)(args[22].data + base22);

  int base23 = args[23].dat->base_offset;
  double * __restrict__ wdotO2_B0_p = (double *)(args[23].data + base23);

  int base24 = args[24].dat->base_offset;
  double * __restrict__ wdotO_B0_p = (double *)(args[24].data + base24);

  int base25 = args[25].dat->base_offset;
  double * __restrict__ Residual0_B0_p = (double *)(args[25].data + base25);

  int base26 = args[26].dat->base_offset;
  double * __restrict__ Residual1_B0_p = (double *)(args[26].data + base26);

  int base27 = args[27].dat->base_offset;
  double * __restrict__ Residual2_B0_p = (double *)(args[27].data + base27);

  int base28 = args[28].dat->base_offset;
  double * __restrict__ Residual3_B0_p = (double *)(args[28].data + base28);

  int base29 = args[29].dat->base_offset;
  double * __restrict__ Residual4_B0_p = (double *)(args[29].data + base29);

  int base30 = args[30].dat->base_offset;
  double * __restrict__ Residual5_B0_p = (double *)(args[30].data + base30);

  int base31 = args[31].dat->base_offset;
  double * __restrict__ Residual6_B0_p = (double *)(args[31].data + base31);

  int base32 = args[32].dat->base_offset;
  double * __restrict__ Residual7_B0_p = (double *)(args[32].data + base32);




  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_host(args, 34);
  ops_halo_exchanges(args,34,range);
  ops_H_D_exchanges_host(args, 34);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[13].mpi_time += __t1-__t2;
  }

  #pragma omp parallel for
  for ( int n_x=start[0]; n_x<end[0]; n_x++ ){
    int idx[] = {arg_idx[0]+n_x};
    const ACC<double> T_B0(T_B0_p + n_x*1);
    const ACC<double> evN2_B0(evN2_B0_p + n_x*1);
    const ACC<double> evNO_B0(evNO_B0_p + n_x*1);
    const ACC<double> evO2_B0(evO2_B0_p + n_x*1);
    const ACC<double> eveqN2_B0(eveqN2_B0_p + n_x*1);
    const ACC<double> eveqNO_B0(eveqNO_B0_p + n_x*1);
    const ACC<double> eveqO2_B0(eveqO2_B0_p + n_x*1);
    const ACC<double> p_B0(p_B0_p + n_x*1);
    const ACC<double> ptauN2_B0(ptauN2_B0_p + n_x*1);
    const ACC<double> ptauNO_B0(ptauNO_B0_p + n_x*1);
    const ACC<double> ptauO2_B0(ptauO2_B0_p + n_x*1);
    const ACC<double> rhoE_B0(rhoE_B0_p + n_x*1);
    const ACC<double> rhoN2_B0(rhoN2_B0_p + n_x*1);
    const ACC<double> rhoNO_B0(rhoNO_B0_p + n_x*1);
    const ACC<double> rhoN_B0(rhoN_B0_p + n_x*1);
    const ACC<double> rhoO2_B0(rhoO2_B0_p + n_x*1);
    const ACC<double> rhoO_B0(rhoO_B0_p + n_x*1);
    const ACC<double> rhoev_B0(rhoev_B0_p + n_x*1);
    const ACC<double> rhou0_B0(rhou0_B0_p + n_x*1);
    const ACC<double> u0_B0(u0_B0_p + n_x*1);
    const ACC<double> wdotN2_B0(wdotN2_B0_p + n_x*1);
    const ACC<double> wdotNO_B0(wdotNO_B0_p + n_x*1);
    const ACC<double> wdotN_B0(wdotN_B0_p + n_x*1);
    const ACC<double> wdotO2_B0(wdotO2_B0_p + n_x*1);
    const ACC<double> wdotO_B0(wdotO_B0_p + n_x*1);
    ACC<double> Residual0_B0(Residual0_B0_p + n_x*1);
    ACC<double> Residual1_B0(Residual1_B0_p + n_x*1);
    ACC<double> Residual2_B0(Residual2_B0_p + n_x*1);
    ACC<double> Residual3_B0(Residual3_B0_p + n_x*1);
    ACC<double> Residual4_B0(Residual4_B0_p + n_x*1);
    ACC<double> Residual5_B0(Residual5_B0_p + n_x*1);
    ACC<double> Residual6_B0(Residual6_B0_p + n_x*1);
    ACC<double> Residual7_B0(Residual7_B0_p + n_x*1);
    
   double d1_prhoEu0_dx = 0.0;
   double d1_prhou0u0_dx = 0.0;
   double d1_rhoN2u0_dx = 0.0;
   double d1_rhoNOu0_dx = 0.0;
   double d1_rhoNu0_dx = 0.0;
   double d1_rhoO2u0_dx = 0.0;
   double d1_rhoOu0_dx = 0.0;
   double d1_rhoevu0_dx = 0.0;
   double d2_T_dx = 0.0;
   if (idx[0] == 0){

       d1_prhoEu0_dx = (3.0*(p_B0(1) + rhoE_B0(1))*u0_B0(1) + 0.333333333333333*(p_B0(3) + rhoE_B0(3))*u0_B0(3) -
            1.5*(p_B0(2) + rhoE_B0(2))*u0_B0(2) - 1.83333333333333*(p_B0(0) + rhoE_B0(0))*u0_B0(0))*invDelta0block0;

       d1_prhou0u0_dx = (3.0*p_B0(1) + 0.333333333333333*p_B0(3) - 1.5*p_B0(2) - 1.83333333333333*p_B0(0) +
            3.0*u0_B0(1)*rhou0_B0(1) + 0.333333333333333*u0_B0(3)*rhou0_B0(3) - 1.5*u0_B0(2)*rhou0_B0(2) -
            1.83333333333333*u0_B0(0)*rhou0_B0(0))*invDelta0block0;

       d1_rhoN2u0_dx = (3.0*u0_B0(1)*rhoN2_B0(1) + 0.333333333333333*u0_B0(3)*rhoN2_B0(3) - 1.5*u0_B0(2)*rhoN2_B0(2) -
            1.83333333333333*u0_B0(0)*rhoN2_B0(0))*invDelta0block0;

       d1_rhoNOu0_dx = (3.0*u0_B0(1)*rhoNO_B0(1) + 0.333333333333333*u0_B0(3)*rhoNO_B0(3) - 1.5*u0_B0(2)*rhoNO_B0(2) -
            1.83333333333333*u0_B0(0)*rhoNO_B0(0))*invDelta0block0;

       d1_rhoNu0_dx = (3.0*u0_B0(1)*rhoN_B0(1) + 0.333333333333333*u0_B0(3)*rhoN_B0(3) - 1.5*u0_B0(2)*rhoN_B0(2) -
            1.83333333333333*u0_B0(0)*rhoN_B0(0))*invDelta0block0;

       d1_rhoO2u0_dx = (3.0*u0_B0(1)*rhoO2_B0(1) + 0.333333333333333*u0_B0(3)*rhoO2_B0(3) - 1.5*u0_B0(2)*rhoO2_B0(2) -
            1.83333333333333*u0_B0(0)*rhoO2_B0(0))*invDelta0block0;

       d1_rhoOu0_dx = (3.0*u0_B0(1)*rhoO_B0(1) + 0.333333333333333*u0_B0(3)*rhoO_B0(3) - 1.5*u0_B0(2)*rhoO_B0(2) -
            1.83333333333333*u0_B0(0)*rhoO_B0(0))*invDelta0block0;

       d1_rhoevu0_dx = (3.0*u0_B0(1)*rhoev_B0(1) + 0.333333333333333*u0_B0(3)*rhoev_B0(3) - 1.5*u0_B0(2)*rhoev_B0(2) -
            1.83333333333333*u0_B0(0)*rhoev_B0(0))*invDelta0block0;

   }

   else if (idx[0] == 1){

       d1_prhoEu0_dx = (0.0394168524399447*(p_B0(2) + rhoE_B0(2))*u0_B0(2) + 0.00571369039775442*(p_B0(4) +
            rhoE_B0(4))*u0_B0(4) + 0.719443173328855*(p_B0(1) + rhoE_B0(1))*u0_B0(1) - 0.322484932882161*(p_B0(0) +
            rhoE_B0(0))*u0_B0(0) - 0.0658051057710389*(p_B0(3) + rhoE_B0(3))*u0_B0(3) - 0.376283677513354*(p_B0(-1) +
            rhoE_B0(-1))*u0_B0(-1))*invDelta0block0;

       d1_prhou0u0_dx = (0.0394168524399447*p_B0(2) + 0.00571369039775442*p_B0(4) + 0.719443173328855*p_B0(1) -
            0.322484932882161*p_B0(0) - 0.0658051057710389*p_B0(3) - 0.376283677513354*p_B0(-1) +
            0.0394168524399447*u0_B0(2)*rhou0_B0(2) + 0.00571369039775442*u0_B0(4)*rhou0_B0(4) +
            0.719443173328855*u0_B0(1)*rhou0_B0(1) - 0.322484932882161*u0_B0(0)*rhou0_B0(0) -
            0.0658051057710389*u0_B0(3)*rhou0_B0(3) - 0.376283677513354*u0_B0(-1)*rhou0_B0(-1))*invDelta0block0;

       d1_rhoN2u0_dx = (0.0394168524399447*u0_B0(2)*rhoN2_B0(2) + 0.00571369039775442*u0_B0(4)*rhoN2_B0(4) +
            0.719443173328855*u0_B0(1)*rhoN2_B0(1) - 0.322484932882161*u0_B0(0)*rhoN2_B0(0) -
            0.0658051057710389*u0_B0(3)*rhoN2_B0(3) - 0.376283677513354*u0_B0(-1)*rhoN2_B0(-1))*invDelta0block0;

       d1_rhoNOu0_dx = (0.0394168524399447*u0_B0(2)*rhoNO_B0(2) + 0.00571369039775442*u0_B0(4)*rhoNO_B0(4) +
            0.719443173328855*u0_B0(1)*rhoNO_B0(1) - 0.322484932882161*u0_B0(0)*rhoNO_B0(0) -
            0.0658051057710389*u0_B0(3)*rhoNO_B0(3) - 0.376283677513354*u0_B0(-1)*rhoNO_B0(-1))*invDelta0block0;

       d1_rhoNu0_dx = (0.0394168524399447*u0_B0(2)*rhoN_B0(2) + 0.00571369039775442*u0_B0(4)*rhoN_B0(4) +
            0.719443173328855*u0_B0(1)*rhoN_B0(1) - 0.322484932882161*u0_B0(0)*rhoN_B0(0) -
            0.0658051057710389*u0_B0(3)*rhoN_B0(3) - 0.376283677513354*u0_B0(-1)*rhoN_B0(-1))*invDelta0block0;

       d1_rhoO2u0_dx = (0.0394168524399447*u0_B0(2)*rhoO2_B0(2) + 0.00571369039775442*u0_B0(4)*rhoO2_B0(4) +
            0.719443173328855*u0_B0(1)*rhoO2_B0(1) - 0.322484932882161*u0_B0(0)*rhoO2_B0(0) -
            0.0658051057710389*u0_B0(3)*rhoO2_B0(3) - 0.376283677513354*u0_B0(-1)*rhoO2_B0(-1))*invDelta0block0;

       d1_rhoOu0_dx = (0.0394168524399447*u0_B0(2)*rhoO_B0(2) + 0.00571369039775442*u0_B0(4)*rhoO_B0(4) +
            0.719443173328855*u0_B0(1)*rhoO_B0(1) - 0.322484932882161*u0_B0(0)*rhoO_B0(0) -
            0.0658051057710389*u0_B0(3)*rhoO_B0(3) - 0.376283677513354*u0_B0(-1)*rhoO_B0(-1))*invDelta0block0;

       d1_rhoevu0_dx = (0.0394168524399447*u0_B0(2)*rhoev_B0(2) + 0.00571369039775442*u0_B0(4)*rhoev_B0(4) +
            0.719443173328855*u0_B0(1)*rhoev_B0(1) - 0.322484932882161*u0_B0(0)*rhoev_B0(0) -
            0.0658051057710389*u0_B0(3)*rhoev_B0(3) - 0.376283677513354*u0_B0(-1)*rhoev_B0(-1))*invDelta0block0;

   }

   else if (idx[0] == 2){

       d1_prhoEu0_dx = (0.197184333887745*(p_B0(0) + rhoE_B0(0))*u0_B0(0) + 0.521455851089587*(p_B0(1) +
            rhoE_B0(1))*u0_B0(1) + 0.113446470384241*(p_B0(-2) + rhoE_B0(-2))*u0_B0(-2) - 0.00412637789557492*(p_B0(3) +
            rhoE_B0(3))*u0_B0(3) - 0.0367146847001261*(p_B0(2) + rhoE_B0(2))*u0_B0(2) - 0.791245592765872*(p_B0(-1) +
            rhoE_B0(-1))*u0_B0(-1))*invDelta0block0;

       d1_prhou0u0_dx = (0.197184333887745*p_B0(0) + 0.521455851089587*p_B0(1) + 0.113446470384241*p_B0(-2) -
            0.00412637789557492*p_B0(3) - 0.0367146847001261*p_B0(2) - 0.791245592765872*p_B0(-1) +
            0.197184333887745*u0_B0(0)*rhou0_B0(0) + 0.521455851089587*u0_B0(1)*rhou0_B0(1) +
            0.113446470384241*u0_B0(-2)*rhou0_B0(-2) - 0.00412637789557492*u0_B0(3)*rhou0_B0(3) -
            0.0367146847001261*u0_B0(2)*rhou0_B0(2) - 0.791245592765872*u0_B0(-1)*rhou0_B0(-1))*invDelta0block0;

       d1_rhoN2u0_dx = (0.197184333887745*u0_B0(0)*rhoN2_B0(0) + 0.521455851089587*u0_B0(1)*rhoN2_B0(1) +
            0.113446470384241*u0_B0(-2)*rhoN2_B0(-2) - 0.00412637789557492*u0_B0(3)*rhoN2_B0(3) -
            0.0367146847001261*u0_B0(2)*rhoN2_B0(2) - 0.791245592765872*u0_B0(-1)*rhoN2_B0(-1))*invDelta0block0;

       d1_rhoNOu0_dx = (0.197184333887745*u0_B0(0)*rhoNO_B0(0) + 0.521455851089587*u0_B0(1)*rhoNO_B0(1) +
            0.113446470384241*u0_B0(-2)*rhoNO_B0(-2) - 0.00412637789557492*u0_B0(3)*rhoNO_B0(3) -
            0.0367146847001261*u0_B0(2)*rhoNO_B0(2) - 0.791245592765872*u0_B0(-1)*rhoNO_B0(-1))*invDelta0block0;

       d1_rhoNu0_dx = (0.197184333887745*u0_B0(0)*rhoN_B0(0) + 0.521455851089587*u0_B0(1)*rhoN_B0(1) +
            0.113446470384241*u0_B0(-2)*rhoN_B0(-2) - 0.00412637789557492*u0_B0(3)*rhoN_B0(3) -
            0.0367146847001261*u0_B0(2)*rhoN_B0(2) - 0.791245592765872*u0_B0(-1)*rhoN_B0(-1))*invDelta0block0;

       d1_rhoO2u0_dx = (0.197184333887745*u0_B0(0)*rhoO2_B0(0) + 0.521455851089587*u0_B0(1)*rhoO2_B0(1) +
            0.113446470384241*u0_B0(-2)*rhoO2_B0(-2) - 0.00412637789557492*u0_B0(3)*rhoO2_B0(3) -
            0.0367146847001261*u0_B0(2)*rhoO2_B0(2) - 0.791245592765872*u0_B0(-1)*rhoO2_B0(-1))*invDelta0block0;

       d1_rhoOu0_dx = (0.197184333887745*u0_B0(0)*rhoO_B0(0) + 0.521455851089587*u0_B0(1)*rhoO_B0(1) +
            0.113446470384241*u0_B0(-2)*rhoO_B0(-2) - 0.00412637789557492*u0_B0(3)*rhoO_B0(3) -
            0.0367146847001261*u0_B0(2)*rhoO_B0(2) - 0.791245592765872*u0_B0(-1)*rhoO_B0(-1))*invDelta0block0;

       d1_rhoevu0_dx = (0.197184333887745*u0_B0(0)*rhoev_B0(0) + 0.521455851089587*u0_B0(1)*rhoev_B0(1) +
            0.113446470384241*u0_B0(-2)*rhoev_B0(-2) - 0.00412637789557492*u0_B0(3)*rhoev_B0(3) -
            0.0367146847001261*u0_B0(2)*rhoev_B0(2) - 0.791245592765872*u0_B0(-1)*rhoev_B0(-1))*invDelta0block0;

   }

   else if (idx[0] == 3){

       d1_prhoEu0_dx = (0.0451033223343881*(p_B0(0) + rhoE_B0(0))*u0_B0(0) + 0.652141084861241*(p_B0(1) +
            rhoE_B0(1))*u0_B0(1) + 0.121937153224065*(p_B0(-2) + rhoE_B0(-2))*u0_B0(-2) - 0.00932597985049999*(p_B0(-3)
            + rhoE_B0(-3))*u0_B0(-3) - 0.727822147724592*(p_B0(-1) + rhoE_B0(-1))*u0_B0(-1) - 0.082033432844602*(p_B0(2)
            + rhoE_B0(2))*u0_B0(2))*invDelta0block0;

       d1_prhou0u0_dx = (0.0451033223343881*p_B0(0) + 0.652141084861241*p_B0(1) + 0.121937153224065*p_B0(-2) -
            0.00932597985049999*p_B0(-3) - 0.727822147724592*p_B0(-1) - 0.082033432844602*p_B0(2) +
            0.0451033223343881*u0_B0(0)*rhou0_B0(0) + 0.652141084861241*u0_B0(1)*rhou0_B0(1) +
            0.121937153224065*u0_B0(-2)*rhou0_B0(-2) - 0.00932597985049999*u0_B0(-3)*rhou0_B0(-3) -
            0.727822147724592*u0_B0(-1)*rhou0_B0(-1) - 0.082033432844602*u0_B0(2)*rhou0_B0(2))*invDelta0block0;

       d1_rhoN2u0_dx = (0.0451033223343881*u0_B0(0)*rhoN2_B0(0) + 0.652141084861241*u0_B0(1)*rhoN2_B0(1) +
            0.121937153224065*u0_B0(-2)*rhoN2_B0(-2) - 0.00932597985049999*u0_B0(-3)*rhoN2_B0(-3) -
            0.727822147724592*u0_B0(-1)*rhoN2_B0(-1) - 0.082033432844602*u0_B0(2)*rhoN2_B0(2))*invDelta0block0;

       d1_rhoNOu0_dx = (0.0451033223343881*u0_B0(0)*rhoNO_B0(0) + 0.652141084861241*u0_B0(1)*rhoNO_B0(1) +
            0.121937153224065*u0_B0(-2)*rhoNO_B0(-2) - 0.00932597985049999*u0_B0(-3)*rhoNO_B0(-3) -
            0.727822147724592*u0_B0(-1)*rhoNO_B0(-1) - 0.082033432844602*u0_B0(2)*rhoNO_B0(2))*invDelta0block0;

       d1_rhoNu0_dx = (0.0451033223343881*u0_B0(0)*rhoN_B0(0) + 0.652141084861241*u0_B0(1)*rhoN_B0(1) +
            0.121937153224065*u0_B0(-2)*rhoN_B0(-2) - 0.00932597985049999*u0_B0(-3)*rhoN_B0(-3) -
            0.727822147724592*u0_B0(-1)*rhoN_B0(-1) - 0.082033432844602*u0_B0(2)*rhoN_B0(2))*invDelta0block0;

       d1_rhoO2u0_dx = (0.0451033223343881*u0_B0(0)*rhoO2_B0(0) + 0.652141084861241*u0_B0(1)*rhoO2_B0(1) +
            0.121937153224065*u0_B0(-2)*rhoO2_B0(-2) - 0.00932597985049999*u0_B0(-3)*rhoO2_B0(-3) -
            0.727822147724592*u0_B0(-1)*rhoO2_B0(-1) - 0.082033432844602*u0_B0(2)*rhoO2_B0(2))*invDelta0block0;

       d1_rhoOu0_dx = (0.0451033223343881*u0_B0(0)*rhoO_B0(0) + 0.652141084861241*u0_B0(1)*rhoO_B0(1) +
            0.121937153224065*u0_B0(-2)*rhoO_B0(-2) - 0.00932597985049999*u0_B0(-3)*rhoO_B0(-3) -
            0.727822147724592*u0_B0(-1)*rhoO_B0(-1) - 0.082033432844602*u0_B0(2)*rhoO_B0(2))*invDelta0block0;

       d1_rhoevu0_dx = (0.0451033223343881*u0_B0(0)*rhoev_B0(0) + 0.652141084861241*u0_B0(1)*rhoev_B0(1) +
            0.121937153224065*u0_B0(-2)*rhoev_B0(-2) - 0.00932597985049999*u0_B0(-3)*rhoev_B0(-3) -
            0.727822147724592*u0_B0(-1)*rhoev_B0(-1) - 0.082033432844602*u0_B0(2)*rhoev_B0(2))*invDelta0block0;

   }

   else if (idx[0] == -1 + block0np0){

       d1_prhoEu0_dx = (1.5*(p_B0(-2) + rhoE_B0(-2))*u0_B0(-2) + 1.83333333333333*(p_B0(0) + rhoE_B0(0))*u0_B0(0) -
            3.0*(p_B0(-1) + rhoE_B0(-1))*u0_B0(-1) - 0.333333333333333*(p_B0(-3) +
            rhoE_B0(-3))*u0_B0(-3))*invDelta0block0;

       d1_prhou0u0_dx = (1.5*p_B0(-2) + 1.83333333333333*p_B0(0) - 3.0*p_B0(-1) - 0.333333333333333*p_B0(-3) +
            1.5*u0_B0(-2)*rhou0_B0(-2) + 1.83333333333333*u0_B0(0)*rhou0_B0(0) - 3.0*u0_B0(-1)*rhou0_B0(-1) -
            0.333333333333333*u0_B0(-3)*rhou0_B0(-3))*invDelta0block0;

       d1_rhoN2u0_dx = (1.5*u0_B0(-2)*rhoN2_B0(-2) + 1.83333333333333*u0_B0(0)*rhoN2_B0(0) - 3.0*u0_B0(-1)*rhoN2_B0(-1)
            - 0.333333333333333*u0_B0(-3)*rhoN2_B0(-3))*invDelta0block0;

       d1_rhoNOu0_dx = (1.5*u0_B0(-2)*rhoNO_B0(-2) + 1.83333333333333*u0_B0(0)*rhoNO_B0(0) - 3.0*u0_B0(-1)*rhoNO_B0(-1)
            - 0.333333333333333*u0_B0(-3)*rhoNO_B0(-3))*invDelta0block0;

       d1_rhoNu0_dx = (1.5*u0_B0(-2)*rhoN_B0(-2) + 1.83333333333333*u0_B0(0)*rhoN_B0(0) - 3.0*u0_B0(-1)*rhoN_B0(-1) -
            0.333333333333333*u0_B0(-3)*rhoN_B0(-3))*invDelta0block0;

       d1_rhoO2u0_dx = (1.5*u0_B0(-2)*rhoO2_B0(-2) + 1.83333333333333*u0_B0(0)*rhoO2_B0(0) - 3.0*u0_B0(-1)*rhoO2_B0(-1)
            - 0.333333333333333*u0_B0(-3)*rhoO2_B0(-3))*invDelta0block0;

       d1_rhoOu0_dx = (1.5*u0_B0(-2)*rhoO_B0(-2) + 1.83333333333333*u0_B0(0)*rhoO_B0(0) - 3.0*u0_B0(-1)*rhoO_B0(-1) -
            0.333333333333333*u0_B0(-3)*rhoO_B0(-3))*invDelta0block0;

       d1_rhoevu0_dx = (1.5*u0_B0(-2)*rhoev_B0(-2) + 1.83333333333333*u0_B0(0)*rhoev_B0(0) - 3.0*u0_B0(-1)*rhoev_B0(-1)
            - 0.333333333333333*u0_B0(-3)*rhoev_B0(-3))*invDelta0block0;

   }

   else if (idx[0] == -2 + block0np0){

       d1_prhoEu0_dx = (0.322484932882161*(p_B0(0) + rhoE_B0(0))*u0_B0(0) + 0.0658051057710389*(p_B0(-3) +
            rhoE_B0(-3))*u0_B0(-3) + 0.376283677513354*(p_B0(1) + rhoE_B0(1))*u0_B0(1) - 0.0394168524399447*(p_B0(-2) +
            rhoE_B0(-2))*u0_B0(-2) - 0.00571369039775442*(p_B0(-4) + rhoE_B0(-4))*u0_B0(-4) -
            0.719443173328855*(p_B0(-1) + rhoE_B0(-1))*u0_B0(-1))*invDelta0block0;

       d1_prhou0u0_dx = (0.322484932882161*p_B0(0) + 0.0658051057710389*p_B0(-3) + 0.376283677513354*p_B0(1) -
            0.0394168524399447*p_B0(-2) - 0.00571369039775442*p_B0(-4) - 0.719443173328855*p_B0(-1) +
            0.322484932882161*u0_B0(0)*rhou0_B0(0) + 0.0658051057710389*u0_B0(-3)*rhou0_B0(-3) +
            0.376283677513354*u0_B0(1)*rhou0_B0(1) - 0.0394168524399447*u0_B0(-2)*rhou0_B0(-2) -
            0.00571369039775442*u0_B0(-4)*rhou0_B0(-4) - 0.719443173328855*u0_B0(-1)*rhou0_B0(-1))*invDelta0block0;

       d1_rhoN2u0_dx = (0.322484932882161*u0_B0(0)*rhoN2_B0(0) + 0.0658051057710389*u0_B0(-3)*rhoN2_B0(-3) +
            0.376283677513354*u0_B0(1)*rhoN2_B0(1) - 0.0394168524399447*u0_B0(-2)*rhoN2_B0(-2) -
            0.00571369039775442*u0_B0(-4)*rhoN2_B0(-4) - 0.719443173328855*u0_B0(-1)*rhoN2_B0(-1))*invDelta0block0;

       d1_rhoNOu0_dx = (0.322484932882161*u0_B0(0)*rhoNO_B0(0) + 0.0658051057710389*u0_B0(-3)*rhoNO_B0(-3) +
            0.376283677513354*u0_B0(1)*rhoNO_B0(1) - 0.0394168524399447*u0_B0(-2)*rhoNO_B0(-2) -
            0.00571369039775442*u0_B0(-4)*rhoNO_B0(-4) - 0.719443173328855*u0_B0(-1)*rhoNO_B0(-1))*invDelta0block0;

       d1_rhoNu0_dx = (0.322484932882161*u0_B0(0)*rhoN_B0(0) + 0.0658051057710389*u0_B0(-3)*rhoN_B0(-3) +
            0.376283677513354*u0_B0(1)*rhoN_B0(1) - 0.0394168524399447*u0_B0(-2)*rhoN_B0(-2) -
            0.00571369039775442*u0_B0(-4)*rhoN_B0(-4) - 0.719443173328855*u0_B0(-1)*rhoN_B0(-1))*invDelta0block0;

       d1_rhoO2u0_dx = (0.322484932882161*u0_B0(0)*rhoO2_B0(0) + 0.0658051057710389*u0_B0(-3)*rhoO2_B0(-3) +
            0.376283677513354*u0_B0(1)*rhoO2_B0(1) - 0.0394168524399447*u0_B0(-2)*rhoO2_B0(-2) -
            0.00571369039775442*u0_B0(-4)*rhoO2_B0(-4) - 0.719443173328855*u0_B0(-1)*rhoO2_B0(-1))*invDelta0block0;

       d1_rhoOu0_dx = (0.322484932882161*u0_B0(0)*rhoO_B0(0) + 0.0658051057710389*u0_B0(-3)*rhoO_B0(-3) +
            0.376283677513354*u0_B0(1)*rhoO_B0(1) - 0.0394168524399447*u0_B0(-2)*rhoO_B0(-2) -
            0.00571369039775442*u0_B0(-4)*rhoO_B0(-4) - 0.719443173328855*u0_B0(-1)*rhoO_B0(-1))*invDelta0block0;

       d1_rhoevu0_dx = (0.322484932882161*u0_B0(0)*rhoev_B0(0) + 0.0658051057710389*u0_B0(-3)*rhoev_B0(-3) +
            0.376283677513354*u0_B0(1)*rhoev_B0(1) - 0.0394168524399447*u0_B0(-2)*rhoev_B0(-2) -
            0.00571369039775442*u0_B0(-4)*rhoev_B0(-4) - 0.719443173328855*u0_B0(-1)*rhoev_B0(-1))*invDelta0block0;

   }

   else if (idx[0] == -3 + block0np0){

       d1_prhoEu0_dx = (0.00412637789557492*(p_B0(-3) + rhoE_B0(-3))*u0_B0(-3) + 0.0367146847001261*(p_B0(-2) +
            rhoE_B0(-2))*u0_B0(-2) + 0.791245592765872*(p_B0(1) + rhoE_B0(1))*u0_B0(1) - 0.197184333887745*(p_B0(0) +
            rhoE_B0(0))*u0_B0(0) - 0.521455851089587*(p_B0(-1) + rhoE_B0(-1))*u0_B0(-1) - 0.113446470384241*(p_B0(2) +
            rhoE_B0(2))*u0_B0(2))*invDelta0block0;

       d1_prhou0u0_dx = (0.00412637789557492*p_B0(-3) + 0.0367146847001261*p_B0(-2) + 0.791245592765872*p_B0(1) -
            0.197184333887745*p_B0(0) - 0.521455851089587*p_B0(-1) - 0.113446470384241*p_B0(2) +
            0.00412637789557492*u0_B0(-3)*rhou0_B0(-3) + 0.0367146847001261*u0_B0(-2)*rhou0_B0(-2) +
            0.791245592765872*u0_B0(1)*rhou0_B0(1) - 0.197184333887745*u0_B0(0)*rhou0_B0(0) -
            0.521455851089587*u0_B0(-1)*rhou0_B0(-1) - 0.113446470384241*u0_B0(2)*rhou0_B0(2))*invDelta0block0;

       d1_rhoN2u0_dx = (0.00412637789557492*u0_B0(-3)*rhoN2_B0(-3) + 0.0367146847001261*u0_B0(-2)*rhoN2_B0(-2) +
            0.791245592765872*u0_B0(1)*rhoN2_B0(1) - 0.197184333887745*u0_B0(0)*rhoN2_B0(0) -
            0.521455851089587*u0_B0(-1)*rhoN2_B0(-1) - 0.113446470384241*u0_B0(2)*rhoN2_B0(2))*invDelta0block0;

       d1_rhoNOu0_dx = (0.00412637789557492*u0_B0(-3)*rhoNO_B0(-3) + 0.0367146847001261*u0_B0(-2)*rhoNO_B0(-2) +
            0.791245592765872*u0_B0(1)*rhoNO_B0(1) - 0.197184333887745*u0_B0(0)*rhoNO_B0(0) -
            0.521455851089587*u0_B0(-1)*rhoNO_B0(-1) - 0.113446470384241*u0_B0(2)*rhoNO_B0(2))*invDelta0block0;

       d1_rhoNu0_dx = (0.00412637789557492*u0_B0(-3)*rhoN_B0(-3) + 0.0367146847001261*u0_B0(-2)*rhoN_B0(-2) +
            0.791245592765872*u0_B0(1)*rhoN_B0(1) - 0.197184333887745*u0_B0(0)*rhoN_B0(0) -
            0.521455851089587*u0_B0(-1)*rhoN_B0(-1) - 0.113446470384241*u0_B0(2)*rhoN_B0(2))*invDelta0block0;

       d1_rhoO2u0_dx = (0.00412637789557492*u0_B0(-3)*rhoO2_B0(-3) + 0.0367146847001261*u0_B0(-2)*rhoO2_B0(-2) +
            0.791245592765872*u0_B0(1)*rhoO2_B0(1) - 0.197184333887745*u0_B0(0)*rhoO2_B0(0) -
            0.521455851089587*u0_B0(-1)*rhoO2_B0(-1) - 0.113446470384241*u0_B0(2)*rhoO2_B0(2))*invDelta0block0;

       d1_rhoOu0_dx = (0.00412637789557492*u0_B0(-3)*rhoO_B0(-3) + 0.0367146847001261*u0_B0(-2)*rhoO_B0(-2) +
            0.791245592765872*u0_B0(1)*rhoO_B0(1) - 0.197184333887745*u0_B0(0)*rhoO_B0(0) -
            0.521455851089587*u0_B0(-1)*rhoO_B0(-1) - 0.113446470384241*u0_B0(2)*rhoO_B0(2))*invDelta0block0;

       d1_rhoevu0_dx = (0.00412637789557492*u0_B0(-3)*rhoev_B0(-3) + 0.0367146847001261*u0_B0(-2)*rhoev_B0(-2) +
            0.791245592765872*u0_B0(1)*rhoev_B0(1) - 0.197184333887745*u0_B0(0)*rhoev_B0(0) -
            0.521455851089587*u0_B0(-1)*rhoev_B0(-1) - 0.113446470384241*u0_B0(2)*rhoev_B0(2))*invDelta0block0;

   }

   else if (idx[0] == -4 + block0np0){

       d1_prhoEu0_dx = (0.00932597985049999*(p_B0(3) + rhoE_B0(3))*u0_B0(3) + 0.727822147724592*(p_B0(1) +
            rhoE_B0(1))*u0_B0(1) + 0.082033432844602*(p_B0(-2) + rhoE_B0(-2))*u0_B0(-2) - 0.0451033223343881*(p_B0(0) +
            rhoE_B0(0))*u0_B0(0) - 0.652141084861241*(p_B0(-1) + rhoE_B0(-1))*u0_B0(-1) - 0.121937153224065*(p_B0(2) +
            rhoE_B0(2))*u0_B0(2))*invDelta0block0;

       d1_prhou0u0_dx = (0.00932597985049999*p_B0(3) + 0.727822147724592*p_B0(1) + 0.082033432844602*p_B0(-2) -
            0.0451033223343881*p_B0(0) - 0.652141084861241*p_B0(-1) - 0.121937153224065*p_B0(2) +
            0.00932597985049999*u0_B0(3)*rhou0_B0(3) + 0.727822147724592*u0_B0(1)*rhou0_B0(1) +
            0.082033432844602*u0_B0(-2)*rhou0_B0(-2) - 0.0451033223343881*u0_B0(0)*rhou0_B0(0) -
            0.652141084861241*u0_B0(-1)*rhou0_B0(-1) - 0.121937153224065*u0_B0(2)*rhou0_B0(2))*invDelta0block0;

       d1_rhoN2u0_dx = (0.00932597985049999*u0_B0(3)*rhoN2_B0(3) + 0.727822147724592*u0_B0(1)*rhoN2_B0(1) +
            0.082033432844602*u0_B0(-2)*rhoN2_B0(-2) - 0.0451033223343881*u0_B0(0)*rhoN2_B0(0) -
            0.652141084861241*u0_B0(-1)*rhoN2_B0(-1) - 0.121937153224065*u0_B0(2)*rhoN2_B0(2))*invDelta0block0;

       d1_rhoNOu0_dx = (0.00932597985049999*u0_B0(3)*rhoNO_B0(3) + 0.727822147724592*u0_B0(1)*rhoNO_B0(1) +
            0.082033432844602*u0_B0(-2)*rhoNO_B0(-2) - 0.0451033223343881*u0_B0(0)*rhoNO_B0(0) -
            0.652141084861241*u0_B0(-1)*rhoNO_B0(-1) - 0.121937153224065*u0_B0(2)*rhoNO_B0(2))*invDelta0block0;

       d1_rhoNu0_dx = (0.00932597985049999*u0_B0(3)*rhoN_B0(3) + 0.727822147724592*u0_B0(1)*rhoN_B0(1) +
            0.082033432844602*u0_B0(-2)*rhoN_B0(-2) - 0.0451033223343881*u0_B0(0)*rhoN_B0(0) -
            0.652141084861241*u0_B0(-1)*rhoN_B0(-1) - 0.121937153224065*u0_B0(2)*rhoN_B0(2))*invDelta0block0;

       d1_rhoO2u0_dx = (0.00932597985049999*u0_B0(3)*rhoO2_B0(3) + 0.727822147724592*u0_B0(1)*rhoO2_B0(1) +
            0.082033432844602*u0_B0(-2)*rhoO2_B0(-2) - 0.0451033223343881*u0_B0(0)*rhoO2_B0(0) -
            0.652141084861241*u0_B0(-1)*rhoO2_B0(-1) - 0.121937153224065*u0_B0(2)*rhoO2_B0(2))*invDelta0block0;

       d1_rhoOu0_dx = (0.00932597985049999*u0_B0(3)*rhoO_B0(3) + 0.727822147724592*u0_B0(1)*rhoO_B0(1) +
            0.082033432844602*u0_B0(-2)*rhoO_B0(-2) - 0.0451033223343881*u0_B0(0)*rhoO_B0(0) -
            0.652141084861241*u0_B0(-1)*rhoO_B0(-1) - 0.121937153224065*u0_B0(2)*rhoO_B0(2))*invDelta0block0;

       d1_rhoevu0_dx = (0.00932597985049999*u0_B0(3)*rhoev_B0(3) + 0.727822147724592*u0_B0(1)*rhoev_B0(1) +
            0.082033432844602*u0_B0(-2)*rhoev_B0(-2) - 0.0451033223343881*u0_B0(0)*rhoev_B0(0) -
            0.652141084861241*u0_B0(-1)*rhoev_B0(-1) - 0.121937153224065*u0_B0(2)*rhoev_B0(2))*invDelta0block0;

   }

   else{

       d1_prhoEu0_dx = (-(2.0/3.0)*(p_B0(-1) + rhoE_B0(-1))*u0_B0(-1) - (1.0/12.0)*(p_B0(2) + rhoE_B0(2))*u0_B0(2) +
            ((1.0/12.0))*(p_B0(-2) + rhoE_B0(-2))*u0_B0(-2) + ((2.0/3.0))*(p_B0(1) +
            rhoE_B0(1))*u0_B0(1))*invDelta0block0;

       d1_prhou0u0_dx = (-(2.0/3.0)*p_B0(-1) - (1.0/12.0)*p_B0(2) + ((1.0/12.0))*p_B0(-2) + ((2.0/3.0))*p_B0(1) -
            (2.0/3.0)*u0_B0(-1)*rhou0_B0(-1) - (1.0/12.0)*u0_B0(2)*rhou0_B0(2) + ((1.0/12.0))*u0_B0(-2)*rhou0_B0(-2) +
            ((2.0/3.0))*u0_B0(1)*rhou0_B0(1))*invDelta0block0;

       d1_rhoN2u0_dx = (-(2.0/3.0)*u0_B0(-1)*rhoN2_B0(-1) - (1.0/12.0)*u0_B0(2)*rhoN2_B0(2) +
            ((1.0/12.0))*u0_B0(-2)*rhoN2_B0(-2) + ((2.0/3.0))*u0_B0(1)*rhoN2_B0(1))*invDelta0block0;

       d1_rhoNOu0_dx = (-(2.0/3.0)*u0_B0(-1)*rhoNO_B0(-1) - (1.0/12.0)*u0_B0(2)*rhoNO_B0(2) +
            ((1.0/12.0))*u0_B0(-2)*rhoNO_B0(-2) + ((2.0/3.0))*u0_B0(1)*rhoNO_B0(1))*invDelta0block0;

       d1_rhoNu0_dx = (-(2.0/3.0)*u0_B0(-1)*rhoN_B0(-1) - (1.0/12.0)*u0_B0(2)*rhoN_B0(2) +
            ((1.0/12.0))*u0_B0(-2)*rhoN_B0(-2) + ((2.0/3.0))*u0_B0(1)*rhoN_B0(1))*invDelta0block0;

       d1_rhoO2u0_dx = (-(2.0/3.0)*u0_B0(-1)*rhoO2_B0(-1) - (1.0/12.0)*u0_B0(2)*rhoO2_B0(2) +
            ((1.0/12.0))*u0_B0(-2)*rhoO2_B0(-2) + ((2.0/3.0))*u0_B0(1)*rhoO2_B0(1))*invDelta0block0;

       d1_rhoOu0_dx = (-(2.0/3.0)*u0_B0(-1)*rhoO_B0(-1) - (1.0/12.0)*u0_B0(2)*rhoO_B0(2) +
            ((1.0/12.0))*u0_B0(-2)*rhoO_B0(-2) + ((2.0/3.0))*u0_B0(1)*rhoO_B0(1))*invDelta0block0;

       d1_rhoevu0_dx = (-(2.0/3.0)*u0_B0(-1)*rhoev_B0(-1) - (1.0/12.0)*u0_B0(2)*rhoev_B0(2) +
            ((1.0/12.0))*u0_B0(-2)*rhoev_B0(-2) + ((2.0/3.0))*u0_B0(1)*rhoev_B0(1))*invDelta0block0;

   }

   if (idx[0] == 0){

       d2_T_dx = (-(26.0/3.0)*T_B0(1) - (14.0/3.0)*T_B0(3) + ((11.0/12.0))*T_B0(4) + ((19.0/2.0))*T_B0(2) +
            ((35.0/12.0))*T_B0(0))*inv2Delta0block0;

   }

   else if (idx[0] == 1){

       d2_T_dx = (((1.0/2.0))*T_B0(1) - (5.0/3.0)*T_B0(0) - (1.0/12.0)*T_B0(3) + ((1.0/3.0))*T_B0(2) +
            ((11.0/12.0))*T_B0(-1))*inv2Delta0block0;

   }

   else if (idx[0] == -1 + block0np0){

       d2_T_dx = (-(26.0/3.0)*T_B0(-1) - (14.0/3.0)*T_B0(-3) + ((11.0/12.0))*T_B0(-4) + ((19.0/2.0))*T_B0(-2) +
            ((35.0/12.0))*T_B0(0))*inv2Delta0block0;

   }

   else if (idx[0] == -2 + block0np0){

       d2_T_dx = (((1.0/2.0))*T_B0(-1) - (5.0/3.0)*T_B0(0) - (1.0/12.0)*T_B0(-3) + ((1.0/3.0))*T_B0(-2) +
            ((11.0/12.0))*T_B0(1))*inv2Delta0block0;

   }

   else{

       d2_T_dx = (-(5.0/2.0)*T_B0(0) - (1.0/12.0)*T_B0(-2) - (1.0/12.0)*T_B0(2) + ((4.0/3.0))*T_B0(1) +
            ((4.0/3.0))*T_B0(-1))*inv2Delta0block0;

   }

   Residual0_B0(0) = -d1_rhoNu0_dx + wdotN_B0(0);

   Residual1_B0(0) = -d1_rhoN2u0_dx + wdotN2_B0(0);

   Residual2_B0(0) = -d1_rhoOu0_dx + wdotO_B0(0);

   Residual3_B0(0) = -d1_rhoO2u0_dx + wdotO2_B0(0);

   Residual4_B0(0) = -d1_rhoNOu0_dx + wdotNO_B0(0);

   Residual5_B0(0) = -d1_prhou0u0_dx;

    Residual6_B0(0) = -d1_rhoevu0_dx + evN2_B0(0)*wdotN2_B0(0) + evNO_B0(0)*wdotNO_B0(0) + evO2_B0(0)*wdotO2_B0(0) +
      9.86923266716013e-6*(invMN2*rhoN2_B0(0)/ptauN2_B0(0) + invMNO*rhoNO_B0(0)/ptauNO_B0(0) +
      invMO2*rhoO2_B0(0)/ptauO2_B0(0))*(-rhoev_B0(0) + rhoN2_B0(0)*eveqN2_B0(0) + rhoNO_B0(0)*eveqNO_B0(0) +
      rhoO2_B0(0)*eveqO2_B0(0))*Lref*invuref*p_B0(0)/(invMN2*rhoN2_B0(0) + invMNO*rhoNO_B0(0) + invMO2*rhoO2_B0(0));

   Residual7_B0(0) = -d1_prhoEu0_dx + kappa*d2_T_dx;


  }
  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[13].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_host(args, 34);
  ops_set_halo_dirtybit3(&args[25],range);
  ops_set_halo_dirtybit3(&args[26],range);
  ops_set_halo_dirtybit3(&args[27],range);
  ops_set_halo_dirtybit3(&args[28],range);
  ops_set_halo_dirtybit3(&args[29],range);
  ops_set_halo_dirtybit3(&args[30],range);
  ops_set_halo_dirtybit3(&args[31],range);
  ops_set_halo_dirtybit3(&args[32],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[13].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg7);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg8);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg9);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg10);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg11);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg12);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg13);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg14);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg15);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg16);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg17);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg18);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg19);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg20);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg21);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg22);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg23);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg24);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg25);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg26);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg27);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg28);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg29);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg30);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg31);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg32);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel013(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11,
 ops_arg arg12, ops_arg arg13, ops_arg arg14, ops_arg arg15,
 ops_arg arg16, ops_arg arg17, ops_arg arg18, ops_arg arg19,
 ops_arg arg20, ops_arg arg21, ops_arg arg22, ops_arg arg23,
 ops_arg arg24, ops_arg arg25, ops_arg arg26, ops_arg arg27,
 ops_arg arg28, ops_arg arg29, ops_arg arg30, ops_arg arg31,
 ops_arg arg32, ops_arg arg33) {
  ops_arg args[34] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33 };

  //create kernel descriptor and pass it to ops_enqueue_kernel
  create_kerneldesc_and_enque(name, args, 34, 13, dim, 0, range, block, ops_par_loop_opensbliblock00Kernel013_execute);
}
#endif
