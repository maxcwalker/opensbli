//
// auto-generated by ops.py
//
__constant__ int dims_opensbliblock00Kernel029 [26][1];
static int dims_opensbliblock00Kernel029_h [26][1] = {{0}};

//user function
__device__

 void opensbliblock00Kernel029_gpu(const ACC<double> &Residual0_B0,
  const ACC<double> &Residual1_B0,
  const ACC<double>
&Residual2_B0,
  const ACC<double> &Residual3_B0,
  const ACC<double> &Residual4_B0,
  const ACC<double> &Residual5_B0,
  const
ACC<double> &Residual6_B0,
  const ACC<double> &Residual7_B0,
  ACC<double> &rhoE_B0,
  ACC<double> &rhoE_RKold_B0,
  ACC<double> &rhoN2_B0,
  ACC<double> &rhoN2_RKold_B0,
  ACC<double> &rhoNO_B0,
  ACC<double> &rhoNO_RKold_B0,
  ACC<double>
&rhoN_B0,
  ACC<double> &rhoN_RKold_B0,
  ACC<double> &rhoO2_B0,
  ACC<double> &rhoO2_RKold_B0,
  ACC<double> &rhoO_B0,
  ACC<double> &rhoO_RKold_B0,
  ACC<double> &rhoev_B0,
  ACC<double> &rhoev_RKold_B0,
  ACC<double> &rhou0_B0,
  ACC<double>
&rhou0_RKold_B0,
  const double *rkA,
  const double *rkB)
{
   rhoN_RKold_B0(0) = rkA[0]*rhoN_RKold_B0(0) + dt*Residual0_B0(0);

   rhoN_B0(0) = rkB[0]*rhoN_RKold_B0(0) + rhoN_B0(0);

   rhoN2_RKold_B0(0) = rkA[0]*rhoN2_RKold_B0(0) + dt*Residual1_B0(0);

   rhoN2_B0(0) = rkB[0]*rhoN2_RKold_B0(0) + rhoN2_B0(0);

   rhoO_RKold_B0(0) = rkA[0]*rhoO_RKold_B0(0) + dt*Residual2_B0(0);

   rhoO_B0(0) = rkB[0]*rhoO_RKold_B0(0) + rhoO_B0(0);

   rhoO2_RKold_B0(0) = rkA[0]*rhoO2_RKold_B0(0) + dt*Residual3_B0(0);

   rhoO2_B0(0) = rkB[0]*rhoO2_RKold_B0(0) + rhoO2_B0(0);

   rhoNO_RKold_B0(0) = rkA[0]*rhoNO_RKold_B0(0) + dt*Residual4_B0(0);

   rhoNO_B0(0) = rkB[0]*rhoNO_RKold_B0(0) + rhoNO_B0(0);

   rhou0_RKold_B0(0) = rkA[0]*rhou0_RKold_B0(0) + dt*Residual5_B0(0);

   rhou0_B0(0) = rkB[0]*rhou0_RKold_B0(0) + rhou0_B0(0);

   rhoev_RKold_B0(0) = rkA[0]*rhoev_RKold_B0(0) + dt*Residual6_B0(0);

   rhoev_B0(0) = rkB[0]*rhoev_RKold_B0(0) + rhoev_B0(0);

   rhoE_RKold_B0(0) = rkA[0]*rhoE_RKold_B0(0) + dt*Residual7_B0(0);

   rhoE_B0(0) = rkB[0]*rhoE_RKold_B0(0) + rhoE_B0(0);

}



__global__ void ops_opensbliblock00Kernel029(
double* __restrict arg0,
double* __restrict arg1,
double* __restrict arg2,
double* __restrict arg3,
double* __restrict arg4,
double* __restrict arg5,
double* __restrict arg6,
double* __restrict arg7,
double* __restrict arg8,
double* __restrict arg9,
double* __restrict arg10,
double* __restrict arg11,
double* __restrict arg12,
double* __restrict arg13,
double* __restrict arg14,
double* __restrict arg15,
double* __restrict arg16,
double* __restrict arg17,
double* __restrict arg18,
double* __restrict arg19,
double* __restrict arg20,
double* __restrict arg21,
double* __restrict arg22,
double* __restrict arg23,
const double arg24,
const double arg25,
int size0 ){


  int idx_x = blockDim.x * blockIdx.x + threadIdx.x;

  arg0 += idx_x * 1*1;
  arg1 += idx_x * 1*1;
  arg2 += idx_x * 1*1;
  arg3 += idx_x * 1*1;
  arg4 += idx_x * 1*1;
  arg5 += idx_x * 1*1;
  arg6 += idx_x * 1*1;
  arg7 += idx_x * 1*1;
  arg8 += idx_x * 1*1;
  arg9 += idx_x * 1*1;
  arg10 += idx_x * 1*1;
  arg11 += idx_x * 1*1;
  arg12 += idx_x * 1*1;
  arg13 += idx_x * 1*1;
  arg14 += idx_x * 1*1;
  arg15 += idx_x * 1*1;
  arg16 += idx_x * 1*1;
  arg17 += idx_x * 1*1;
  arg18 += idx_x * 1*1;
  arg19 += idx_x * 1*1;
  arg20 += idx_x * 1*1;
  arg21 += idx_x * 1*1;
  arg22 += idx_x * 1*1;
  arg23 += idx_x * 1*1;

  if (idx_x < size0) {
    const ACC<double> argp0(arg0);
    const ACC<double> argp1(arg1);
    const ACC<double> argp2(arg2);
    const ACC<double> argp3(arg3);
    const ACC<double> argp4(arg4);
    const ACC<double> argp5(arg5);
    const ACC<double> argp6(arg6);
    const ACC<double> argp7(arg7);
    ACC<double> argp8(arg8);
    ACC<double> argp9(arg9);
    ACC<double> argp10(arg10);
    ACC<double> argp11(arg11);
    ACC<double> argp12(arg12);
    ACC<double> argp13(arg13);
    ACC<double> argp14(arg14);
    ACC<double> argp15(arg15);
    ACC<double> argp16(arg16);
    ACC<double> argp17(arg17);
    ACC<double> argp18(arg18);
    ACC<double> argp19(arg19);
    ACC<double> argp20(arg20);
    ACC<double> argp21(arg21);
    ACC<double> argp22(arg22);
    ACC<double> argp23(arg23);
    opensbliblock00Kernel029_gpu(
     argp0, argp1, argp2, argp3, argp4,
     argp5, argp6, argp7, argp8, argp9,
     argp10, argp11, argp12, argp13, argp14,
     argp15, argp16, argp17, argp18, argp19,
     argp20, argp21, argp22, argp23, &arg24,
     &arg25);
  }

}

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel029(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11,
 ops_arg arg12, ops_arg arg13, ops_arg arg14, ops_arg arg15,
 ops_arg arg16, ops_arg arg17, ops_arg arg18, ops_arg arg19,
 ops_arg arg20, ops_arg arg21, ops_arg arg22, ops_arg arg23,
 ops_arg arg24, ops_arg arg25) {
#else
void ops_par_loop_opensbliblock00Kernel029_execute(ops_kernel_descriptor *desc) {
  int dim = desc->dim;
  #if OPS_MPI
  ops_block block = desc->block;
  #endif
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  ops_arg arg9 = desc->args[9];
  ops_arg arg10 = desc->args[10];
  ops_arg arg11 = desc->args[11];
  ops_arg arg12 = desc->args[12];
  ops_arg arg13 = desc->args[13];
  ops_arg arg14 = desc->args[14];
  ops_arg arg15 = desc->args[15];
  ops_arg arg16 = desc->args[16];
  ops_arg arg17 = desc->args[17];
  ops_arg arg18 = desc->args[18];
  ops_arg arg19 = desc->args[19];
  ops_arg arg20 = desc->args[20];
  ops_arg arg21 = desc->args[21];
  ops_arg arg22 = desc->args[22];
  ops_arg arg23 = desc->args[23];
  ops_arg arg24 = desc->args[24];
  ops_arg arg25 = desc->args[25];
  #endif

  //Timing
  double t1,t2,c1,c2;

  ops_arg args[26] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25};


  #if CHECKPOINTING && !OPS_LAZY
  if (!ops_checkpointing_before(args,26,range,14)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,14,"opensbliblock00Kernel029");
    block->instance->OPS_kernels[14].count++;
    ops_timers_core(&c1,&t1);
  }

  //compute locally allocated range for the sub-block
  int start[1];
  int end[1];

  #ifdef OPS_MPI
  int arg_idx[1];
  #endif
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<1; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 26,block, range, start, end, arg_idx) < 0) return;
  #endif

  int xdim0 = args[0].dat->size[0];
  int xdim1 = args[1].dat->size[0];
  int xdim2 = args[2].dat->size[0];
  int xdim3 = args[3].dat->size[0];
  int xdim4 = args[4].dat->size[0];
  int xdim5 = args[5].dat->size[0];
  int xdim6 = args[6].dat->size[0];
  int xdim7 = args[7].dat->size[0];
  int xdim8 = args[8].dat->size[0];
  int xdim9 = args[9].dat->size[0];
  int xdim10 = args[10].dat->size[0];
  int xdim11 = args[11].dat->size[0];
  int xdim12 = args[12].dat->size[0];
  int xdim13 = args[13].dat->size[0];
  int xdim14 = args[14].dat->size[0];
  int xdim15 = args[15].dat->size[0];
  int xdim16 = args[16].dat->size[0];
  int xdim17 = args[17].dat->size[0];
  int xdim18 = args[18].dat->size[0];
  int xdim19 = args[19].dat->size[0];
  int xdim20 = args[20].dat->size[0];
  int xdim21 = args[21].dat->size[0];
  int xdim22 = args[22].dat->size[0];
  int xdim23 = args[23].dat->size[0];

  if (xdim0 != dims_opensbliblock00Kernel029_h[0][0] || xdim1 != dims_opensbliblock00Kernel029_h[1][0] || xdim2 != dims_opensbliblock00Kernel029_h[2][0] || xdim3 != dims_opensbliblock00Kernel029_h[3][0] || xdim4 != dims_opensbliblock00Kernel029_h[4][0] || xdim5 != dims_opensbliblock00Kernel029_h[5][0] || xdim6 != dims_opensbliblock00Kernel029_h[6][0] || xdim7 != dims_opensbliblock00Kernel029_h[7][0] || xdim8 != dims_opensbliblock00Kernel029_h[8][0] || xdim9 != dims_opensbliblock00Kernel029_h[9][0] || xdim10 != dims_opensbliblock00Kernel029_h[10][0] || xdim11 != dims_opensbliblock00Kernel029_h[11][0] || xdim12 != dims_opensbliblock00Kernel029_h[12][0] || xdim13 != dims_opensbliblock00Kernel029_h[13][0] || xdim14 != dims_opensbliblock00Kernel029_h[14][0] || xdim15 != dims_opensbliblock00Kernel029_h[15][0] || xdim16 != dims_opensbliblock00Kernel029_h[16][0] || xdim17 != dims_opensbliblock00Kernel029_h[17][0] || xdim18 != dims_opensbliblock00Kernel029_h[18][0] || xdim19 != dims_opensbliblock00Kernel029_h[19][0] || xdim20 != dims_opensbliblock00Kernel029_h[20][0] || xdim21 != dims_opensbliblock00Kernel029_h[21][0] || xdim22 != dims_opensbliblock00Kernel029_h[22][0] || xdim23 != dims_opensbliblock00Kernel029_h[23][0]) {
    dims_opensbliblock00Kernel029_h[0][0] = xdim0;
    dims_opensbliblock00Kernel029_h[1][0] = xdim1;
    dims_opensbliblock00Kernel029_h[2][0] = xdim2;
    dims_opensbliblock00Kernel029_h[3][0] = xdim3;
    dims_opensbliblock00Kernel029_h[4][0] = xdim4;
    dims_opensbliblock00Kernel029_h[5][0] = xdim5;
    dims_opensbliblock00Kernel029_h[6][0] = xdim6;
    dims_opensbliblock00Kernel029_h[7][0] = xdim7;
    dims_opensbliblock00Kernel029_h[8][0] = xdim8;
    dims_opensbliblock00Kernel029_h[9][0] = xdim9;
    dims_opensbliblock00Kernel029_h[10][0] = xdim10;
    dims_opensbliblock00Kernel029_h[11][0] = xdim11;
    dims_opensbliblock00Kernel029_h[12][0] = xdim12;
    dims_opensbliblock00Kernel029_h[13][0] = xdim13;
    dims_opensbliblock00Kernel029_h[14][0] = xdim14;
    dims_opensbliblock00Kernel029_h[15][0] = xdim15;
    dims_opensbliblock00Kernel029_h[16][0] = xdim16;
    dims_opensbliblock00Kernel029_h[17][0] = xdim17;
    dims_opensbliblock00Kernel029_h[18][0] = xdim18;
    dims_opensbliblock00Kernel029_h[19][0] = xdim19;
    dims_opensbliblock00Kernel029_h[20][0] = xdim20;
    dims_opensbliblock00Kernel029_h[21][0] = xdim21;
    dims_opensbliblock00Kernel029_h[22][0] = xdim22;
    dims_opensbliblock00Kernel029_h[23][0] = xdim23;
    cutilSafeCall(block->instance->ostream(), cudaMemcpyToSymbol( dims_opensbliblock00Kernel029, dims_opensbliblock00Kernel029_h, sizeof(dims_opensbliblock00Kernel029)));
  }



  int x_size = MAX(0,end[0]-start[0]);

  dim3 grid( (x_size-1)/block->instance->OPS_block_size_x+ 1, 1, 1);
  dim3 tblock(block->instance->OPS_block_size_x,1,1);



  long long int dat0 = (block->instance->OPS_soa ? args[0].dat->type_size : args[0].dat->elem_size);
  long long int dat1 = (block->instance->OPS_soa ? args[1].dat->type_size : args[1].dat->elem_size);
  long long int dat2 = (block->instance->OPS_soa ? args[2].dat->type_size : args[2].dat->elem_size);
  long long int dat3 = (block->instance->OPS_soa ? args[3].dat->type_size : args[3].dat->elem_size);
  long long int dat4 = (block->instance->OPS_soa ? args[4].dat->type_size : args[4].dat->elem_size);
  long long int dat5 = (block->instance->OPS_soa ? args[5].dat->type_size : args[5].dat->elem_size);
  long long int dat6 = (block->instance->OPS_soa ? args[6].dat->type_size : args[6].dat->elem_size);
  long long int dat7 = (block->instance->OPS_soa ? args[7].dat->type_size : args[7].dat->elem_size);
  long long int dat8 = (block->instance->OPS_soa ? args[8].dat->type_size : args[8].dat->elem_size);
  long long int dat9 = (block->instance->OPS_soa ? args[9].dat->type_size : args[9].dat->elem_size);
  long long int dat10 = (block->instance->OPS_soa ? args[10].dat->type_size : args[10].dat->elem_size);
  long long int dat11 = (block->instance->OPS_soa ? args[11].dat->type_size : args[11].dat->elem_size);
  long long int dat12 = (block->instance->OPS_soa ? args[12].dat->type_size : args[12].dat->elem_size);
  long long int dat13 = (block->instance->OPS_soa ? args[13].dat->type_size : args[13].dat->elem_size);
  long long int dat14 = (block->instance->OPS_soa ? args[14].dat->type_size : args[14].dat->elem_size);
  long long int dat15 = (block->instance->OPS_soa ? args[15].dat->type_size : args[15].dat->elem_size);
  long long int dat16 = (block->instance->OPS_soa ? args[16].dat->type_size : args[16].dat->elem_size);
  long long int dat17 = (block->instance->OPS_soa ? args[17].dat->type_size : args[17].dat->elem_size);
  long long int dat18 = (block->instance->OPS_soa ? args[18].dat->type_size : args[18].dat->elem_size);
  long long int dat19 = (block->instance->OPS_soa ? args[19].dat->type_size : args[19].dat->elem_size);
  long long int dat20 = (block->instance->OPS_soa ? args[20].dat->type_size : args[20].dat->elem_size);
  long long int dat21 = (block->instance->OPS_soa ? args[21].dat->type_size : args[21].dat->elem_size);
  long long int dat22 = (block->instance->OPS_soa ? args[22].dat->type_size : args[22].dat->elem_size);
  long long int dat23 = (block->instance->OPS_soa ? args[23].dat->type_size : args[23].dat->elem_size);

  char *p_a[26];

  //set up initial pointers
  long long int base0 = args[0].dat->base_offset + 
           dat0 * 1 * (start[0] * args[0].stencil->stride[0]);
  p_a[0] = (char *)args[0].data_d + base0;

  long long int base1 = args[1].dat->base_offset + 
           dat1 * 1 * (start[0] * args[1].stencil->stride[0]);
  p_a[1] = (char *)args[1].data_d + base1;

  long long int base2 = args[2].dat->base_offset + 
           dat2 * 1 * (start[0] * args[2].stencil->stride[0]);
  p_a[2] = (char *)args[2].data_d + base2;

  long long int base3 = args[3].dat->base_offset + 
           dat3 * 1 * (start[0] * args[3].stencil->stride[0]);
  p_a[3] = (char *)args[3].data_d + base3;

  long long int base4 = args[4].dat->base_offset + 
           dat4 * 1 * (start[0] * args[4].stencil->stride[0]);
  p_a[4] = (char *)args[4].data_d + base4;

  long long int base5 = args[5].dat->base_offset + 
           dat5 * 1 * (start[0] * args[5].stencil->stride[0]);
  p_a[5] = (char *)args[5].data_d + base5;

  long long int base6 = args[6].dat->base_offset + 
           dat6 * 1 * (start[0] * args[6].stencil->stride[0]);
  p_a[6] = (char *)args[6].data_d + base6;

  long long int base7 = args[7].dat->base_offset + 
           dat7 * 1 * (start[0] * args[7].stencil->stride[0]);
  p_a[7] = (char *)args[7].data_d + base7;

  long long int base8 = args[8].dat->base_offset + 
           dat8 * 1 * (start[0] * args[8].stencil->stride[0]);
  p_a[8] = (char *)args[8].data_d + base8;

  long long int base9 = args[9].dat->base_offset + 
           dat9 * 1 * (start[0] * args[9].stencil->stride[0]);
  p_a[9] = (char *)args[9].data_d + base9;

  long long int base10 = args[10].dat->base_offset + 
           dat10 * 1 * (start[0] * args[10].stencil->stride[0]);
  p_a[10] = (char *)args[10].data_d + base10;

  long long int base11 = args[11].dat->base_offset + 
           dat11 * 1 * (start[0] * args[11].stencil->stride[0]);
  p_a[11] = (char *)args[11].data_d + base11;

  long long int base12 = args[12].dat->base_offset + 
           dat12 * 1 * (start[0] * args[12].stencil->stride[0]);
  p_a[12] = (char *)args[12].data_d + base12;

  long long int base13 = args[13].dat->base_offset + 
           dat13 * 1 * (start[0] * args[13].stencil->stride[0]);
  p_a[13] = (char *)args[13].data_d + base13;

  long long int base14 = args[14].dat->base_offset + 
           dat14 * 1 * (start[0] * args[14].stencil->stride[0]);
  p_a[14] = (char *)args[14].data_d + base14;

  long long int base15 = args[15].dat->base_offset + 
           dat15 * 1 * (start[0] * args[15].stencil->stride[0]);
  p_a[15] = (char *)args[15].data_d + base15;

  long long int base16 = args[16].dat->base_offset + 
           dat16 * 1 * (start[0] * args[16].stencil->stride[0]);
  p_a[16] = (char *)args[16].data_d + base16;

  long long int base17 = args[17].dat->base_offset + 
           dat17 * 1 * (start[0] * args[17].stencil->stride[0]);
  p_a[17] = (char *)args[17].data_d + base17;

  long long int base18 = args[18].dat->base_offset + 
           dat18 * 1 * (start[0] * args[18].stencil->stride[0]);
  p_a[18] = (char *)args[18].data_d + base18;

  long long int base19 = args[19].dat->base_offset + 
           dat19 * 1 * (start[0] * args[19].stencil->stride[0]);
  p_a[19] = (char *)args[19].data_d + base19;

  long long int base20 = args[20].dat->base_offset + 
           dat20 * 1 * (start[0] * args[20].stencil->stride[0]);
  p_a[20] = (char *)args[20].data_d + base20;

  long long int base21 = args[21].dat->base_offset + 
           dat21 * 1 * (start[0] * args[21].stencil->stride[0]);
  p_a[21] = (char *)args[21].data_d + base21;

  long long int base22 = args[22].dat->base_offset + 
           dat22 * 1 * (start[0] * args[22].stencil->stride[0]);
  p_a[22] = (char *)args[22].data_d + base22;

  long long int base23 = args[23].dat->base_offset + 
           dat23 * 1 * (start[0] * args[23].stencil->stride[0]);
  p_a[23] = (char *)args[23].data_d + base23;


  #ifndef OPS_LAZY
  ops_H_D_exchanges_device(args, 26);
  ops_halo_exchanges(args,26,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[14].mpi_time += t2-t1;
  }


  //call kernel wrapper function, passing in pointers to data
  if (x_size > 0)
    ops_opensbliblock00Kernel029<<<grid, tblock >>> ( 
     (double *)p_a[0], (double *)p_a[1],
     (double *)p_a[2], (double *)p_a[3],
     (double *)p_a[4], (double *)p_a[5],
     (double *)p_a[6], (double *)p_a[7],
     (double *)p_a[8], (double *)p_a[9],
     (double *)p_a[10], (double *)p_a[11],
     (double *)p_a[12], (double *)p_a[13],
     (double *)p_a[14], (double *)p_a[15],
     (double *)p_a[16], (double *)p_a[17],
     (double *)p_a[18], (double *)p_a[19],
     (double *)p_a[20], (double *)p_a[21],
     (double *)p_a[22], (double *)p_a[23],
     *(double *)arg24.data, *(double *)arg25.data,
    x_size);

  cutilSafeCall(block->instance->ostream(), cudaGetLastError());

  if (block->instance->OPS_diags>1) {
    cutilSafeCall(block->instance->ostream(), cudaDeviceSynchronize());
    ops_timers_core(&c1,&t1);
    block->instance->OPS_kernels[14].time += t1-t2;
  }

  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 26);
  ops_set_halo_dirtybit3(&args[8],range);
  ops_set_halo_dirtybit3(&args[9],range);
  ops_set_halo_dirtybit3(&args[10],range);
  ops_set_halo_dirtybit3(&args[11],range);
  ops_set_halo_dirtybit3(&args[12],range);
  ops_set_halo_dirtybit3(&args[13],range);
  ops_set_halo_dirtybit3(&args[14],range);
  ops_set_halo_dirtybit3(&args[15],range);
  ops_set_halo_dirtybit3(&args[16],range);
  ops_set_halo_dirtybit3(&args[17],range);
  ops_set_halo_dirtybit3(&args[18],range);
  ops_set_halo_dirtybit3(&args[19],range);
  ops_set_halo_dirtybit3(&args[20],range);
  ops_set_halo_dirtybit3(&args[21],range);
  ops_set_halo_dirtybit3(&args[22],range);
  ops_set_halo_dirtybit3(&args[23],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[14].mpi_time += t2-t1;
    block->instance->OPS_kernels[14].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[14].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[14].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[14].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[14].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[14].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[14].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[14].transfer += ops_compute_transfer(dim, start, end, &arg7);
    block->instance->OPS_kernels[14].transfer += ops_compute_transfer(dim, start, end, &arg8);
    block->instance->OPS_kernels[14].transfer += ops_compute_transfer(dim, start, end, &arg9);
    block->instance->OPS_kernels[14].transfer += ops_compute_transfer(dim, start, end, &arg10);
    block->instance->OPS_kernels[14].transfer += ops_compute_transfer(dim, start, end, &arg11);
    block->instance->OPS_kernels[14].transfer += ops_compute_transfer(dim, start, end, &arg12);
    block->instance->OPS_kernels[14].transfer += ops_compute_transfer(dim, start, end, &arg13);
    block->instance->OPS_kernels[14].transfer += ops_compute_transfer(dim, start, end, &arg14);
    block->instance->OPS_kernels[14].transfer += ops_compute_transfer(dim, start, end, &arg15);
    block->instance->OPS_kernels[14].transfer += ops_compute_transfer(dim, start, end, &arg16);
    block->instance->OPS_kernels[14].transfer += ops_compute_transfer(dim, start, end, &arg17);
    block->instance->OPS_kernels[14].transfer += ops_compute_transfer(dim, start, end, &arg18);
    block->instance->OPS_kernels[14].transfer += ops_compute_transfer(dim, start, end, &arg19);
    block->instance->OPS_kernels[14].transfer += ops_compute_transfer(dim, start, end, &arg20);
    block->instance->OPS_kernels[14].transfer += ops_compute_transfer(dim, start, end, &arg21);
    block->instance->OPS_kernels[14].transfer += ops_compute_transfer(dim, start, end, &arg22);
    block->instance->OPS_kernels[14].transfer += ops_compute_transfer(dim, start, end, &arg23);
  }
}

#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel029(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11,
 ops_arg arg12, ops_arg arg13, ops_arg arg14, ops_arg arg15,
 ops_arg arg16, ops_arg arg17, ops_arg arg18, ops_arg arg19,
 ops_arg arg20, ops_arg arg21, ops_arg arg22, ops_arg arg23,
 ops_arg arg24, ops_arg arg25) {
  ops_arg args[26] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25 };

  //create kernel descriptor and pass it to ops_enqueue_kernel
  create_kerneldesc_and_enque(name, args, 26, 14, dim, 1, range, block, ops_par_loop_opensbliblock00Kernel029_execute);
}
#endif
