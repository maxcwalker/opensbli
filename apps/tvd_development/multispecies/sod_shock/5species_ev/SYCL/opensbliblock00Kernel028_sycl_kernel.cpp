//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel028(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9) {
#else
void ops_par_loop_opensbliblock00Kernel028_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  ops_arg arg9 = desc->args[9];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[10] = { arg0, arg1, arg2, arg3, arg4,
 arg5, arg6, arg7, arg8, arg9};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,10,range,0)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,0,"opensbliblock00Kernel028");
    block->instance->OPS_kernels[0].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "opensbliblock00Kernel028");
  #endif


  //compute locally allocated range for the sub-block
  int start[1];
  int end[1];
  int arg_idx[1];
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<1; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 10,block, range, start, end, arg_idx) < 0) return;
  #endif

  #if defined(OPS_MPI)
  #if defined(OPS_LAZY)
  sub_block_list sb = OPS_sub_block_list[block->index];
  arg_idx[0] = sb->decomp_disp[0];
  #else
  arg_idx[0] -= start[0];
  #endif
  #else //OPS_MPI
  arg_idx[0] = 0;
  #endif //OPS_MPI

  //initialize global variable with the dimension of dats

  //set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset/sizeof(double);
  double* rhoE_B0_p = (double*)args[0].data_d;

  int base1 = args[1].dat->base_offset/sizeof(double);
  double* rhoN2_B0_p = (double*)args[1].data_d;

  int base2 = args[2].dat->base_offset/sizeof(double);
  double* rhoNO_B0_p = (double*)args[2].data_d;

  int base3 = args[3].dat->base_offset/sizeof(double);
  double* rhoN_B0_p = (double*)args[3].data_d;

  int base4 = args[4].dat->base_offset/sizeof(double);
  double* rhoO2_B0_p = (double*)args[4].data_d;

  int base5 = args[5].dat->base_offset/sizeof(double);
  double* rhoO_B0_p = (double*)args[5].data_d;

  int base6 = args[6].dat->base_offset/sizeof(double);
  double* rhoev_B0_p = (double*)args[6].data_d;

  int base7 = args[7].dat->base_offset/sizeof(double);
  double* rhou0_B0_p = (double*)args[7].data_d;

  int base8 = args[8].dat->base_offset/sizeof(double);
  double* x0_B0_p = (double*)args[8].data_d;




  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_device(args, 10);
  ops_halo_exchanges(args,10,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[0].mpi_time += __t1-__t2;
  }

  int start_0 = start[0];
  int end_0 = end[0];
  int arg_idx_0 = arg_idx[0];
  if ((end[0]-start[0])>0) {
    block->instance->sycl_instance->queue->submit([&](cl::sycl::handler &cgh) {

      auto Delta0block0_sycl = (*Delta0block0_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto MN_sycl = (*MN_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto MN2_sycl = (*MN2_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto MNO_sycl = (*MNO_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto MO_sycl = (*MO_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto MO2_sycl = (*MO2_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto Rhat_sycl = (*Rhat_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto thetavN2_sycl = (*thetavN2_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto thetavNO_sycl = (*thetavNO_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto thetavO2_sycl = (*thetavO2_p).template get_access<cl::sycl::access::mode::read>(cgh);

      cgh.parallel_for<class opensbliblock00Kernel028_kernel>(cl::sycl::nd_range<1>(cl::sycl::range<1>(
            ((end[0]-start[0]-1)/block->instance->OPS_block_size_x+1)*block->instance->OPS_block_size_x
             ),cl::sycl::range<1>(
      block->instance->OPS_block_size_x
             ))
      , [=](cl::sycl::nd_item<1> item
      ) [[intel::kernel_args_restrict]] {
        int n_x = item.get_global_id(0)+start_0;
        int idx[] = {arg_idx_0+n_x};
        ACC<double> rhoE_B0(&rhoE_B0_p[0] + base0 + n_x*1);
        ACC<double> rhoN2_B0(&rhoN2_B0_p[0] + base1 + n_x*1);
        ACC<double> rhoNO_B0(&rhoNO_B0_p[0] + base2 + n_x*1);
        ACC<double> rhoN_B0(&rhoN_B0_p[0] + base3 + n_x*1);
        ACC<double> rhoO2_B0(&rhoO2_B0_p[0] + base4 + n_x*1);
        ACC<double> rhoO_B0(&rhoO_B0_p[0] + base5 + n_x*1);
        ACC<double> rhoev_B0(&rhoev_B0_p[0] + base6 + n_x*1);
        ACC<double> rhou0_B0(&rhou0_B0_p[0] + base7 + n_x*1);
        ACC<double> x0_B0(&x0_B0_p[0] + base8 + n_x*1);
        //USER CODE
        if (n_x < end_0) {
          
   double T0 = 0.0;
   double cN = 0.0;
   double cN2 = 0.0;
   double cNO = 0.0;
   double cO = 0.0;
   double cO2 = 0.0;
   double evN2 = 0.0;
   double evNO = 0.0;
   double evO2 = 0.0;
   double p0 = 0.0;
   double r = 0.0;
   double u0 = 0.0;
   x0_B0(0) = Delta0block0_sycl[0]*idx[0];

   u0 = 0.0;

   p0 = ((x0_B0(0) < 0.5) ? (
   1.0
)
: (
   0.051282
));

   T0 = ((x0_B0(0) < 0.5) ? (
   1.0
)
: (
   0.033333
));

   cN = ((x0_B0(0) < 0.5) ? (
   0.6984386275169115
)
: (
   0.0
));

   cN2 = ((x0_B0(0) < 0.5) ? (
   0.06607169490642878
)
: (
   0.7653
));

   cO = ((x0_B0(0) < 0.5) ? (
   0.2342744649144739
)
: (
   0.0
));

   cO2 = ((x0_B0(0) < 0.5) ? (
   2.663297558683734e-5
)
: (
   0.2347
));

   cNO = ((x0_B0(0) < 0.5) ? (
   0.001188579686599012
)
: (
   6.178621075754453e-19
));

   r = p0/(Rhat_sycl[0]*T0*(cN/MN_sycl[0] + cN2/MN2_sycl[0] + cNO/MNO_sycl[0] + cO/MO_sycl[0] + cO2/MO2_sycl[0]));

   rhoN_B0(0) = cN*r;

   rhoN2_B0(0) = cN2*r;

   rhoO_B0(0) = cO*r;

   rhoO2_B0(0) = cO2*r;

   rhoNO_B0(0) = cNO*r;

   rhou0_B0(0) = r*u0;

   evN2 = Rhat_sycl[0]*thetavN2_sycl[0]/(MN2_sycl[0]*(-1.0 + cl::sycl::exp(thetavN2_sycl[0]/T0)));

   evO2 = Rhat_sycl[0]*thetavO2_sycl[0]/(MN2_sycl[0]*(-1.0 + cl::sycl::exp(thetavN2_sycl[0]/T0)));

   evNO = Rhat_sycl[0]*thetavNO_sycl[0]/(MN2_sycl[0]*(-1.0 + cl::sycl::exp(thetavN2_sycl[0]/T0)));

   rhoev_B0(0) = (cN2*evN2*r + cNO*evNO*r + cO2*evO2*r)*(cN*r + cN2*r + cNO*r + cO*r + cO2*r)/(cN2*r + cNO*r + cO2*r);

    rhoE_B0(0) = (u0*u0)*(0.5*cN*r/MN_sycl[0] + 0.5*cN2*r/MN2_sycl[0] + 0.5*cNO*r/MNO_sycl[0] + 0.5*cO*r/MO_sycl[0] + 0.5*cO2*r/MO2_sycl[0]) + cN2*evN2*r +
      cNO*evNO*r + cO2*evO2*r + p0*(1.5*cN*r/MN_sycl[0] + 1.5*cO*r/MO_sycl[0] + 2.5*cN2*r/MN2_sycl[0] + 2.5*cNO*r/MNO_sycl[0] + 2.5*cO2*r/MO2_sycl[0])/(cN*r/MN_sycl[0]
      + cN2*r/MN2_sycl[0] + cNO*r/MNO_sycl[0] + cO*r/MO_sycl[0] + cO2*r/MO2_sycl[0]);


        }
      });
    });
  }
  if (block->instance->OPS_diags > 1) {
    block->instance->sycl_instance->queue->wait();
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[0].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 10);
  ops_set_halo_dirtybit3(&args[0],range);
  ops_set_halo_dirtybit3(&args[1],range);
  ops_set_halo_dirtybit3(&args[2],range);
  ops_set_halo_dirtybit3(&args[3],range);
  ops_set_halo_dirtybit3(&args[4],range);
  ops_set_halo_dirtybit3(&args[5],range);
  ops_set_halo_dirtybit3(&args[6],range);
  ops_set_halo_dirtybit3(&args[7],range);
  ops_set_halo_dirtybit3(&args[8],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[0].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg7);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg8);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel028(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)calloc(1,sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 1;
  desc->index = 0;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 0;
  for ( int i=0; i<2; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 10;
  desc->args = (ops_arg*)ops_malloc(10*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg2.dat->index;
  desc->args[3] = arg3;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg3.dat->index;
  desc->args[4] = arg4;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg4.dat->index;
  desc->args[5] = arg5;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg5.dat->index;
  desc->args[6] = arg6;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg6.dat->index;
  desc->args[7] = arg7;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg7.dat->index;
  desc->args[8] = arg8;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg8.dat->index;
  desc->args[9] = arg9;
  desc->function = ops_par_loop_opensbliblock00Kernel028_execute;
  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,0,"opensbliblock00Kernel028");
  }
  ops_enqueue_kernel(desc);
}
#endif
