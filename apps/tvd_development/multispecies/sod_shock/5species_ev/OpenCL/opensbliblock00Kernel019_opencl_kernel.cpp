//
// auto-generated by ops.py
//

    #ifdef OCL_FMA_SWITCH_ON
    #define OCL_FMA 1
    #else
    #define OCL_FMA 0
    #endif


    static bool isbuilt_opensbliblock00Kernel019 = false;

    void buildOpenCLKernels_opensbliblock00Kernel019(OPS_instance *instance, int xdim0, int xdim1, int xdim2, int xdim3, int xdim4, int xdim5, int xdim6, int xdim7, int xdim8, int xdim9, int xdim10, int xdim11, int xdim12, int xdim13, int xdim14, int xdim15, int xdim16, int xdim17, int xdim18, int xdim19, int xdim20, int xdim21, int xdim22, int xdim23, int xdim24, int xdim25, int xdim26, int xdim27, int xdim28, int xdim29, int xdim30, int xdim31, int xdim32) {

      //int ocl_fma = OCL_FMA;
      if(!isbuilt_opensbliblock00Kernel019) {
        buildOpenCLKernels(instance);
        //clSafeCall( clUnloadCompiler() );
        cl_int ret;
        char* source_filename[1] = {(char*)"./OpenCL/opensbliblock00Kernel019.cl"};

        // Load the kernel source code into the array source_str
        FILE *fid;
        char *source_str[1] = {NULL};
        size_t source_size[1];

        for(int i=0; i<1; i++) {
          fid = fopen(source_filename[i], "r");
          if (!fid) {
            OPSException e(OPS_RUNTIME_ERROR, "Can't open the kernel source file: ");
            e << source_filename[i] << "\n";
            throw e;
          }

          source_str[i] = (char*)malloc(4*0x1000000);
          source_size[i] = fread(source_str[i], 1, 4*0x1000000, fid);
          if(source_size[i] != 4*0x1000000) {
            if (ferror(fid)) {
              OPSException e(OPS_RUNTIME_ERROR, "Error while reading kernel source file ");
              e << source_filename[i] << "\n";
              throw e;
            }
            if (feof(fid))
              instance->ostream() << "Kernel source file "<< source_filename[i] <<" succesfully read.\n";
          }
          fclose(fid);
        }

        instance->ostream() <<"Compiling opensbliblock00Kernel019 "<<OCL_FMA<<" source -- start \n";

          // Create a program from the source
          instance->opencl_instance->OPS_opencl_core.program = clCreateProgramWithSource(instance->opencl_instance->OPS_opencl_core.context, 1, (const char **) &source_str, (const size_t *) &source_size, &ret);
          clSafeCall( ret );

          // Build the program
          char buildOpts[512*34];
          char* pPath = NULL;
          pPath = getenv ("OPS_INSTALL_PATH");
          if (pPath!=NULL)
            if(OCL_FMA)
              sprintf(buildOpts,"-cl-mad-enable -DOCL_FMA -I%s/include -DOPS_WARPSIZE=%d  -Dxdim0_opensbliblock00Kernel019=%d  -Dxdim1_opensbliblock00Kernel019=%d  -Dxdim2_opensbliblock00Kernel019=%d  -Dxdim3_opensbliblock00Kernel019=%d  -Dxdim4_opensbliblock00Kernel019=%d  -Dxdim5_opensbliblock00Kernel019=%d  -Dxdim6_opensbliblock00Kernel019=%d  -Dxdim7_opensbliblock00Kernel019=%d  -Dxdim8_opensbliblock00Kernel019=%d  -Dxdim9_opensbliblock00Kernel019=%d  -Dxdim10_opensbliblock00Kernel019=%d  -Dxdim11_opensbliblock00Kernel019=%d  -Dxdim12_opensbliblock00Kernel019=%d  -Dxdim13_opensbliblock00Kernel019=%d  -Dxdim14_opensbliblock00Kernel019=%d  -Dxdim15_opensbliblock00Kernel019=%d  -Dxdim16_opensbliblock00Kernel019=%d  -Dxdim17_opensbliblock00Kernel019=%d  -Dxdim18_opensbliblock00Kernel019=%d  -Dxdim19_opensbliblock00Kernel019=%d  -Dxdim20_opensbliblock00Kernel019=%d  -Dxdim21_opensbliblock00Kernel019=%d  -Dxdim22_opensbliblock00Kernel019=%d  -Dxdim23_opensbliblock00Kernel019=%d  -Dxdim24_opensbliblock00Kernel019=%d  -Dxdim25_opensbliblock00Kernel019=%d  -Dxdim26_opensbliblock00Kernel019=%d  -Dxdim27_opensbliblock00Kernel019=%d  -Dxdim28_opensbliblock00Kernel019=%d  -Dxdim29_opensbliblock00Kernel019=%d  -Dxdim30_opensbliblock00Kernel019=%d  -Dxdim31_opensbliblock00Kernel019=%d  -Dxdim32_opensbliblock00Kernel019=%d ", pPath, 32,xdim0,xdim1,xdim2,xdim3,xdim4,xdim5,xdim6,xdim7,xdim8,xdim9,xdim10,xdim11,xdim12,xdim13,xdim14,xdim15,xdim16,xdim17,xdim18,xdim19,xdim20,xdim21,xdim22,xdim23,xdim24,xdim25,xdim26,xdim27,xdim28,xdim29,xdim30,xdim31,xdim32);
            else
              sprintf(buildOpts,"-cl-mad-enable -I%s/include -DOPS_WARPSIZE=%d  -Dxdim0_opensbliblock00Kernel019=%d  -Dxdim1_opensbliblock00Kernel019=%d  -Dxdim2_opensbliblock00Kernel019=%d  -Dxdim3_opensbliblock00Kernel019=%d  -Dxdim4_opensbliblock00Kernel019=%d  -Dxdim5_opensbliblock00Kernel019=%d  -Dxdim6_opensbliblock00Kernel019=%d  -Dxdim7_opensbliblock00Kernel019=%d  -Dxdim8_opensbliblock00Kernel019=%d  -Dxdim9_opensbliblock00Kernel019=%d  -Dxdim10_opensbliblock00Kernel019=%d  -Dxdim11_opensbliblock00Kernel019=%d  -Dxdim12_opensbliblock00Kernel019=%d  -Dxdim13_opensbliblock00Kernel019=%d  -Dxdim14_opensbliblock00Kernel019=%d  -Dxdim15_opensbliblock00Kernel019=%d  -Dxdim16_opensbliblock00Kernel019=%d  -Dxdim17_opensbliblock00Kernel019=%d  -Dxdim18_opensbliblock00Kernel019=%d  -Dxdim19_opensbliblock00Kernel019=%d  -Dxdim20_opensbliblock00Kernel019=%d  -Dxdim21_opensbliblock00Kernel019=%d  -Dxdim22_opensbliblock00Kernel019=%d  -Dxdim23_opensbliblock00Kernel019=%d  -Dxdim24_opensbliblock00Kernel019=%d  -Dxdim25_opensbliblock00Kernel019=%d  -Dxdim26_opensbliblock00Kernel019=%d  -Dxdim27_opensbliblock00Kernel019=%d  -Dxdim28_opensbliblock00Kernel019=%d  -Dxdim29_opensbliblock00Kernel019=%d  -Dxdim30_opensbliblock00Kernel019=%d  -Dxdim31_opensbliblock00Kernel019=%d  -Dxdim32_opensbliblock00Kernel019=%d ", pPath, 32,xdim0,xdim1,xdim2,xdim3,xdim4,xdim5,xdim6,xdim7,xdim8,xdim9,xdim10,xdim11,xdim12,xdim13,xdim14,xdim15,xdim16,xdim17,xdim18,xdim19,xdim20,xdim21,xdim22,xdim23,xdim24,xdim25,xdim26,xdim27,xdim28,xdim29,xdim30,xdim31,xdim32);
          else {
            sprintf((char*)"Incorrect OPS_INSTALL_PATH %s\n",pPath);
            exit(EXIT_FAILURE);
          }

          #ifdef OPS_SOA
          sprintf(buildOpts, "%s -DOPS_SOA", buildOpts);
          #endif
          sprintf(buildOpts, "%s -I%s/c/include", buildOpts, pPath);
          ret = clBuildProgram(instance->opencl_instance->OPS_opencl_core.program, 1, &instance->opencl_instance->OPS_opencl_core.device_id, buildOpts, NULL, NULL);

          if(ret != CL_SUCCESS) {
            char* build_log;
            size_t log_size;
            clSafeCall( clGetProgramBuildInfo(instance->opencl_instance->OPS_opencl_core.program, instance->opencl_instance->OPS_opencl_core.device_id, CL_PROGRAM_BUILD_LOG, 0, NULL, &log_size) );
            build_log = (char*) malloc(log_size+1);
            clSafeCall( clGetProgramBuildInfo(instance->opencl_instance->OPS_opencl_core.program, instance->opencl_instance->OPS_opencl_core.device_id, CL_PROGRAM_BUILD_LOG, log_size, build_log, NULL) );
            build_log[log_size] = '\0';
            instance->ostream() << "=============== OpenCL Program Build Info ================\n\n" << build_log;
            instance->ostream() << "\n========================================================= \n";
            free(build_log);
            exit(EXIT_FAILURE);
          }
          instance->ostream() << "compiling opensbliblock00Kernel019 -- done\n";

        // Create the OpenCL kernel
        instance->opencl_instance->OPS_opencl_core.kernel[13] = clCreateKernel(instance->opencl_instance->OPS_opencl_core.program, "ops_opensbliblock00Kernel019", &ret);
        clSafeCall( ret );

        isbuilt_opensbliblock00Kernel019 = true;
        free(source_str[0]);
      }

    }

    
// host stub function
void ops_par_loop_opensbliblock00Kernel019(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11,
 ops_arg arg12, ops_arg arg13, ops_arg arg14, ops_arg arg15,
 ops_arg arg16, ops_arg arg17, ops_arg arg18, ops_arg arg19,
 ops_arg arg20, ops_arg arg21, ops_arg arg22, ops_arg arg23,
 ops_arg arg24, ops_arg arg25, ops_arg arg26, ops_arg arg27,
 ops_arg arg28, ops_arg arg29, ops_arg arg30, ops_arg arg31,
 ops_arg arg32, ops_arg arg33) {

  //Timing
  double t1,t2,c1,c2;

  ops_arg args[34] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33};


  #ifdef CHECKPOINTING
  if (!ops_checkpointing_before(args,34,range,13)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,13,"opensbliblock00Kernel019");
    block->instance->OPS_kernels[13].count++;
    ops_timers_core(&c1,&t1);
  }

  //compute locally allocated range for the sub-block
  int start[1];
  int end[1];
  #ifdef OPS_MPI
  sub_block_list sb = OPS_sub_block_list[block->index];
  if (!sb->owned) return;
  for ( int n=0; n<1; n++ ){
    start[n] = sb->decomp_disp[n];end[n] = sb->decomp_disp[n]+sb->decomp_size[n];
    if (start[n] >= range[2*n]) {
      start[n] = 0;
    }
    else {
      start[n] = range[2*n] - start[n];
    }
    if (sb->id_m[n]==MPI_PROC_NULL && range[2*n] < 0) start[n] = range[2*n];
    if (end[n] >= range[2*n+1]) {
      end[n] = range[2*n+1] - sb->decomp_disp[n];
    }
    else {
      end[n] = sb->decomp_size[n];
    }
    if (sb->id_p[n]==MPI_PROC_NULL && (range[2*n+1] > sb->decomp_disp[n]+sb->decomp_size[n]))
      end[n] += (range[2*n+1]-sb->decomp_disp[n]-sb->decomp_size[n]);
  }
  #else
  for ( int n=0; n<1; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #endif

  int x_size = MAX(0,end[0]-start[0]);

  int arg_idx[1];
  #ifdef OPS_MPI
  arg_idx[0] = sb->decomp_disp[0]+start[0];
  #else
  arg_idx[0] = start[0];
  #endif

  int xdim0 = args[0].dat->size[0];
  int xdim1 = args[1].dat->size[0];
  int xdim2 = args[2].dat->size[0];
  int xdim3 = args[3].dat->size[0];
  int xdim4 = args[4].dat->size[0];
  int xdim5 = args[5].dat->size[0];
  int xdim6 = args[6].dat->size[0];
  int xdim7 = args[7].dat->size[0];
  int xdim8 = args[8].dat->size[0];
  int xdim9 = args[9].dat->size[0];
  int xdim10 = args[10].dat->size[0];
  int xdim11 = args[11].dat->size[0];
  int xdim12 = args[12].dat->size[0];
  int xdim13 = args[13].dat->size[0];
  int xdim14 = args[14].dat->size[0];
  int xdim15 = args[15].dat->size[0];
  int xdim16 = args[16].dat->size[0];
  int xdim17 = args[17].dat->size[0];
  int xdim18 = args[18].dat->size[0];
  int xdim19 = args[19].dat->size[0];
  int xdim20 = args[20].dat->size[0];
  int xdim21 = args[21].dat->size[0];
  int xdim22 = args[22].dat->size[0];
  int xdim23 = args[23].dat->size[0];
  int xdim24 = args[24].dat->size[0];
  int xdim25 = args[25].dat->size[0];
  int xdim26 = args[26].dat->size[0];
  int xdim27 = args[27].dat->size[0];
  int xdim28 = args[28].dat->size[0];
  int xdim29 = args[29].dat->size[0];
  int xdim30 = args[30].dat->size[0];
  int xdim31 = args[31].dat->size[0];
  int xdim32 = args[32].dat->size[0];

  //build opencl kernel if not already built

  buildOpenCLKernels_opensbliblock00Kernel019(block->instance,
  xdim0,xdim1,xdim2,xdim3,xdim4,xdim5,xdim6,xdim7,xdim8,xdim9,xdim10,xdim11,xdim12,xdim13,xdim14,xdim15,xdim16,xdim17,xdim18,xdim19,xdim20,xdim21,xdim22,xdim23,xdim24,xdim25,xdim26,xdim27,xdim28,xdim29,xdim30,xdim31,xdim32);

  //set up OpenCL thread blocks
  size_t globalWorkSize[3] = {static_cast<size_t>(((x_size-1)/block->instance->OPS_block_size_x+ 1)*block->instance->OPS_block_size_x), static_cast<size_t>(1), static_cast<size_t>(1)};
  size_t localWorkSize[3] =  {static_cast<size_t>(block->instance->OPS_block_size_x),static_cast<size_t>(1),static_cast<size_t>(1)};






  //set up initial pointers
  int d_m[OPS_MAX_DIM];
  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[0].dat->d_m[d] + OPS_sub_dat_list[args[0].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[0].dat->d_m[d];
  #endif
  int base0 = 1 *1*
  (start[0] * args[0].stencil->stride[0] - args[0].dat->base[0] - d_m[0]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[1].dat->d_m[d] + OPS_sub_dat_list[args[1].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[1].dat->d_m[d];
  #endif
  int base1 = 1 *1*
  (start[0] * args[1].stencil->stride[0] - args[1].dat->base[0] - d_m[0]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[2].dat->d_m[d] + OPS_sub_dat_list[args[2].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[2].dat->d_m[d];
  #endif
  int base2 = 1 *1*
  (start[0] * args[2].stencil->stride[0] - args[2].dat->base[0] - d_m[0]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[3].dat->d_m[d] + OPS_sub_dat_list[args[3].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[3].dat->d_m[d];
  #endif
  int base3 = 1 *1*
  (start[0] * args[3].stencil->stride[0] - args[3].dat->base[0] - d_m[0]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[4].dat->d_m[d] + OPS_sub_dat_list[args[4].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[4].dat->d_m[d];
  #endif
  int base4 = 1 *1*
  (start[0] * args[4].stencil->stride[0] - args[4].dat->base[0] - d_m[0]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[5].dat->d_m[d] + OPS_sub_dat_list[args[5].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[5].dat->d_m[d];
  #endif
  int base5 = 1 *1*
  (start[0] * args[5].stencil->stride[0] - args[5].dat->base[0] - d_m[0]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[6].dat->d_m[d] + OPS_sub_dat_list[args[6].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[6].dat->d_m[d];
  #endif
  int base6 = 1 *1*
  (start[0] * args[6].stencil->stride[0] - args[6].dat->base[0] - d_m[0]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[7].dat->d_m[d] + OPS_sub_dat_list[args[7].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[7].dat->d_m[d];
  #endif
  int base7 = 1 *1*
  (start[0] * args[7].stencil->stride[0] - args[7].dat->base[0] - d_m[0]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[8].dat->d_m[d] + OPS_sub_dat_list[args[8].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[8].dat->d_m[d];
  #endif
  int base8 = 1 *1*
  (start[0] * args[8].stencil->stride[0] - args[8].dat->base[0] - d_m[0]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[9].dat->d_m[d] + OPS_sub_dat_list[args[9].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[9].dat->d_m[d];
  #endif
  int base9 = 1 *1*
  (start[0] * args[9].stencil->stride[0] - args[9].dat->base[0] - d_m[0]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[10].dat->d_m[d] + OPS_sub_dat_list[args[10].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[10].dat->d_m[d];
  #endif
  int base10 = 1 *1*
  (start[0] * args[10].stencil->stride[0] - args[10].dat->base[0] - d_m[0]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[11].dat->d_m[d] + OPS_sub_dat_list[args[11].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[11].dat->d_m[d];
  #endif
  int base11 = 1 *1*
  (start[0] * args[11].stencil->stride[0] - args[11].dat->base[0] - d_m[0]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[12].dat->d_m[d] + OPS_sub_dat_list[args[12].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[12].dat->d_m[d];
  #endif
  int base12 = 1 *1*
  (start[0] * args[12].stencil->stride[0] - args[12].dat->base[0] - d_m[0]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[13].dat->d_m[d] + OPS_sub_dat_list[args[13].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[13].dat->d_m[d];
  #endif
  int base13 = 1 *1*
  (start[0] * args[13].stencil->stride[0] - args[13].dat->base[0] - d_m[0]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[14].dat->d_m[d] + OPS_sub_dat_list[args[14].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[14].dat->d_m[d];
  #endif
  int base14 = 1 *1*
  (start[0] * args[14].stencil->stride[0] - args[14].dat->base[0] - d_m[0]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[15].dat->d_m[d] + OPS_sub_dat_list[args[15].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[15].dat->d_m[d];
  #endif
  int base15 = 1 *1*
  (start[0] * args[15].stencil->stride[0] - args[15].dat->base[0] - d_m[0]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[16].dat->d_m[d] + OPS_sub_dat_list[args[16].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[16].dat->d_m[d];
  #endif
  int base16 = 1 *1*
  (start[0] * args[16].stencil->stride[0] - args[16].dat->base[0] - d_m[0]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[17].dat->d_m[d] + OPS_sub_dat_list[args[17].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[17].dat->d_m[d];
  #endif
  int base17 = 1 *1*
  (start[0] * args[17].stencil->stride[0] - args[17].dat->base[0] - d_m[0]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[18].dat->d_m[d] + OPS_sub_dat_list[args[18].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[18].dat->d_m[d];
  #endif
  int base18 = 1 *1*
  (start[0] * args[18].stencil->stride[0] - args[18].dat->base[0] - d_m[0]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[19].dat->d_m[d] + OPS_sub_dat_list[args[19].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[19].dat->d_m[d];
  #endif
  int base19 = 1 *1*
  (start[0] * args[19].stencil->stride[0] - args[19].dat->base[0] - d_m[0]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[20].dat->d_m[d] + OPS_sub_dat_list[args[20].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[20].dat->d_m[d];
  #endif
  int base20 = 1 *1*
  (start[0] * args[20].stencil->stride[0] - args[20].dat->base[0] - d_m[0]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[21].dat->d_m[d] + OPS_sub_dat_list[args[21].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[21].dat->d_m[d];
  #endif
  int base21 = 1 *1*
  (start[0] * args[21].stencil->stride[0] - args[21].dat->base[0] - d_m[0]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[22].dat->d_m[d] + OPS_sub_dat_list[args[22].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[22].dat->d_m[d];
  #endif
  int base22 = 1 *1*
  (start[0] * args[22].stencil->stride[0] - args[22].dat->base[0] - d_m[0]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[23].dat->d_m[d] + OPS_sub_dat_list[args[23].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[23].dat->d_m[d];
  #endif
  int base23 = 1 *1*
  (start[0] * args[23].stencil->stride[0] - args[23].dat->base[0] - d_m[0]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[24].dat->d_m[d] + OPS_sub_dat_list[args[24].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[24].dat->d_m[d];
  #endif
  int base24 = 1 *1*
  (start[0] * args[24].stencil->stride[0] - args[24].dat->base[0] - d_m[0]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[25].dat->d_m[d] + OPS_sub_dat_list[args[25].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[25].dat->d_m[d];
  #endif
  int base25 = 1 *1*
  (start[0] * args[25].stencil->stride[0] - args[25].dat->base[0] - d_m[0]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[26].dat->d_m[d] + OPS_sub_dat_list[args[26].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[26].dat->d_m[d];
  #endif
  int base26 = 1 *1*
  (start[0] * args[26].stencil->stride[0] - args[26].dat->base[0] - d_m[0]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[27].dat->d_m[d] + OPS_sub_dat_list[args[27].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[27].dat->d_m[d];
  #endif
  int base27 = 1 *1*
  (start[0] * args[27].stencil->stride[0] - args[27].dat->base[0] - d_m[0]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[28].dat->d_m[d] + OPS_sub_dat_list[args[28].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[28].dat->d_m[d];
  #endif
  int base28 = 1 *1*
  (start[0] * args[28].stencil->stride[0] - args[28].dat->base[0] - d_m[0]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[29].dat->d_m[d] + OPS_sub_dat_list[args[29].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[29].dat->d_m[d];
  #endif
  int base29 = 1 *1*
  (start[0] * args[29].stencil->stride[0] - args[29].dat->base[0] - d_m[0]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[30].dat->d_m[d] + OPS_sub_dat_list[args[30].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[30].dat->d_m[d];
  #endif
  int base30 = 1 *1*
  (start[0] * args[30].stencil->stride[0] - args[30].dat->base[0] - d_m[0]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[31].dat->d_m[d] + OPS_sub_dat_list[args[31].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[31].dat->d_m[d];
  #endif
  int base31 = 1 *1*
  (start[0] * args[31].stencil->stride[0] - args[31].dat->base[0] - d_m[0]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[32].dat->d_m[d] + OPS_sub_dat_list[args[32].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[32].dat->d_m[d];
  #endif
  int base32 = 1 *1*
  (start[0] * args[32].stencil->stride[0] - args[32].dat->base[0] - d_m[0]);


  ops_H_D_exchanges_device(args, 34);
  ops_halo_exchanges(args,34,range);
  ops_H_D_exchanges_device(args, 34);

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[13].mpi_time += t2-t1;
  }

  if (globalWorkSize[0]>0 && globalWorkSize[1]>0 && globalWorkSize[2]>0) {

    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 0, sizeof(cl_mem), (void*) &arg0.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 1, sizeof(cl_mem), (void*) &arg1.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 2, sizeof(cl_mem), (void*) &arg2.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 3, sizeof(cl_mem), (void*) &arg3.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 4, sizeof(cl_mem), (void*) &arg4.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 5, sizeof(cl_mem), (void*) &arg5.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 6, sizeof(cl_mem), (void*) &arg6.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 7, sizeof(cl_mem), (void*) &arg7.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 8, sizeof(cl_mem), (void*) &arg8.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 9, sizeof(cl_mem), (void*) &arg9.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 10, sizeof(cl_mem), (void*) &arg10.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 11, sizeof(cl_mem), (void*) &arg11.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 12, sizeof(cl_mem), (void*) &arg12.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 13, sizeof(cl_mem), (void*) &arg13.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 14, sizeof(cl_mem), (void*) &arg14.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 15, sizeof(cl_mem), (void*) &arg15.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 16, sizeof(cl_mem), (void*) &arg16.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 17, sizeof(cl_mem), (void*) &arg17.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 18, sizeof(cl_mem), (void*) &arg18.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 19, sizeof(cl_mem), (void*) &arg19.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 20, sizeof(cl_mem), (void*) &arg20.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 21, sizeof(cl_mem), (void*) &arg21.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 22, sizeof(cl_mem), (void*) &arg22.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 23, sizeof(cl_mem), (void*) &arg23.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 24, sizeof(cl_mem), (void*) &arg24.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 25, sizeof(cl_mem), (void*) &arg25.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 26, sizeof(cl_mem), (void*) &arg26.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 27, sizeof(cl_mem), (void*) &arg27.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 28, sizeof(cl_mem), (void*) &arg28.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 29, sizeof(cl_mem), (void*) &arg29.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 30, sizeof(cl_mem), (void*) &arg30.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 31, sizeof(cl_mem), (void*) &arg31.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 32, sizeof(cl_mem), (void*) &arg32.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 33, sizeof(cl_int), (void*) &block0np0 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 34, sizeof(cl_double), (void*) &inv2Delta0block0 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 35, sizeof(cl_double), (void*) &invDelta0block0 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 36, sizeof(cl_double), (void*) &invMN2 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 37, sizeof(cl_double), (void*) &invMNO ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 38, sizeof(cl_double), (void*) &invMO2 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 39, sizeof(cl_double), (void*) &kappa ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 40, sizeof(cl_int), (void*) &base0 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 41, sizeof(cl_int), (void*) &base1 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 42, sizeof(cl_int), (void*) &base2 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 43, sizeof(cl_int), (void*) &base3 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 44, sizeof(cl_int), (void*) &base4 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 45, sizeof(cl_int), (void*) &base5 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 46, sizeof(cl_int), (void*) &base6 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 47, sizeof(cl_int), (void*) &base7 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 48, sizeof(cl_int), (void*) &base8 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 49, sizeof(cl_int), (void*) &base9 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 50, sizeof(cl_int), (void*) &base10 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 51, sizeof(cl_int), (void*) &base11 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 52, sizeof(cl_int), (void*) &base12 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 53, sizeof(cl_int), (void*) &base13 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 54, sizeof(cl_int), (void*) &base14 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 55, sizeof(cl_int), (void*) &base15 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 56, sizeof(cl_int), (void*) &base16 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 57, sizeof(cl_int), (void*) &base17 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 58, sizeof(cl_int), (void*) &base18 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 59, sizeof(cl_int), (void*) &base19 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 60, sizeof(cl_int), (void*) &base20 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 61, sizeof(cl_int), (void*) &base21 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 62, sizeof(cl_int), (void*) &base22 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 63, sizeof(cl_int), (void*) &base23 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 64, sizeof(cl_int), (void*) &base24 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 65, sizeof(cl_int), (void*) &base25 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 66, sizeof(cl_int), (void*) &base26 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 67, sizeof(cl_int), (void*) &base27 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 68, sizeof(cl_int), (void*) &base28 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 69, sizeof(cl_int), (void*) &base29 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 70, sizeof(cl_int), (void*) &base30 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 71, sizeof(cl_int), (void*) &base31 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 72, sizeof(cl_int), (void*) &base32 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 73, sizeof(cl_int), (void*) &arg_idx[0] ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[13], 74, sizeof(cl_int), (void*) &x_size ));

    //call/enqueue opencl kernel wrapper function
    clSafeCall( clEnqueueNDRangeKernel(block->instance->opencl_instance->OPS_opencl_core.command_queue, block->instance->opencl_instance->OPS_opencl_core.kernel[13], 3, NULL, globalWorkSize, localWorkSize, 0, NULL, NULL) );
  }
  if (block->instance->OPS_diags>1) {
    clSafeCall( clFinish(block->instance->opencl_instance->OPS_opencl_core.command_queue) );
  }

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&c1,&t1);
    block->instance->OPS_kernels[13].time += t1-t2;
  }

  ops_set_dirtybit_device(args, 34);
  ops_set_halo_dirtybit3(&args[25],range);
  ops_set_halo_dirtybit3(&args[26],range);
  ops_set_halo_dirtybit3(&args[27],range);
  ops_set_halo_dirtybit3(&args[28],range);
  ops_set_halo_dirtybit3(&args[29],range);
  ops_set_halo_dirtybit3(&args[30],range);
  ops_set_halo_dirtybit3(&args[31],range);
  ops_set_halo_dirtybit3(&args[32],range);

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[13].mpi_time += t2-t1;
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg7);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg8);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg9);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg10);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg11);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg12);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg13);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg14);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg15);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg16);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg17);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg18);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg19);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg20);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg21);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg22);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg23);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg24);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg25);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg26);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg27);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg28);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg29);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg30);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg31);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg32);
  }
}
