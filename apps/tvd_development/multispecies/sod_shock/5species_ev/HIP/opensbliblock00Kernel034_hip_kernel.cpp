//
// auto-generated by ops.py
//
__constant__ int dims_opensbliblock00Kernel034 [34][1];
static int dims_opensbliblock00Kernel034_h [34][1] = {{0}};

//user function
__device__

 void opensbliblock00Kernel034_gpu(const ACC<double> &evN2_B0,
  const ACC<double> &evNO_B0,
  const ACC<double> &evO2_B0,
  const
ACC<double> &eveqN2_B0,
  const ACC<double> &eveqNO_B0,
  const ACC<double> &eveqO2_B0,
  const ACC<double> &p_B0,
  const
ACC<double> &ptauN2_B0,
  const ACC<double> &ptauNO_B0,
  const ACC<double> &ptauO2_B0,
  const ACC<double> &rhoE_B0,
  const
ACC<double> &rhoN2_B0,
  const ACC<double> &rhoNO_B0,
  const ACC<double> &rhoN_B0,
  const ACC<double> &rhoO2_B0,
  const
ACC<double> &rhoO_B0,
  const ACC<double> &rhoev_B0,
  const ACC<double> &rhou0_B0,
  const ACC<double> &u0_B0,
  const
ACC<double> &wdotN2_B0,
  const ACC<double> &wdotNO_B0,
  const ACC<double> &wdotN_B0,
  const ACC<double> &wdotO2_B0,
  const
ACC<double> &wdotO_B0,
  const ACC<double> &wk0_B0,
  ACC<double> &Residual0_B0,
  ACC<double> &Residual1_B0,
  ACC<double>
&Residual2_B0,
  ACC<double> &Residual3_B0,
  ACC<double> &Residual4_B0,
  ACC<double> &Residual5_B0,
  ACC<double>
&Residual6_B0,
  ACC<double> &Residual7_B0,
  const int *idx)
{
   double d1_p_dx = 0.0;
   double d1_pu0_dx = 0.0;
   double d1_rhoE_dx = 0.0;
   double d1_rhoEu0_dx = 0.0;
   double d1_rhoN2_dx = 0.0;
   double d1_rhoN2u0_dx = 0.0;
   double d1_rhoNO_dx = 0.0;
   double d1_rhoNOu0_dx = 0.0;
   double d1_rhoN_dx = 0.0;
   double d1_rhoNu0_dx = 0.0;
   double d1_rhoO2_dx = 0.0;
   double d1_rhoO2u0_dx = 0.0;
   double d1_rhoO_dx = 0.0;
   double d1_rhoOu0_dx = 0.0;
   double d1_rhoev_dx = 0.0;
   double d1_rhoevu0_dx = 0.0;
   double d1_rhou0_dx = 0.0;
   double d1_rhou0u0_dx = 0.0;
   if (idx[0] == 0){

      d1_p_dx = (3.0*p_B0(1) + 0.333333333333333*p_B0(3) - 1.5*p_B0(2) - 1.83333333333333*p_B0(0))*invDelta0block0;

       d1_pu0_dx = (3.0*p_B0(1)*u0_B0(1) + 0.333333333333333*p_B0(3)*u0_B0(3) - 1.5*p_B0(2)*u0_B0(2) -
            1.83333333333333*p_B0(0)*u0_B0(0))*invDelta0block0;

       d1_rhoE_dx = (3.0*rhoE_B0(1) + 0.333333333333333*rhoE_B0(3) - 1.5*rhoE_B0(2) -
            1.83333333333333*rhoE_B0(0))*invDelta0block0;

       d1_rhoEu0_dx = (3.0*u0_B0(1)*rhoE_B0(1) + 0.333333333333333*u0_B0(3)*rhoE_B0(3) - 1.5*u0_B0(2)*rhoE_B0(2) -
            1.83333333333333*u0_B0(0)*rhoE_B0(0))*invDelta0block0;

       d1_rhoN2_dx = (3.0*rhoN2_B0(1) + 0.333333333333333*rhoN2_B0(3) - 1.5*rhoN2_B0(2) -
            1.83333333333333*rhoN2_B0(0))*invDelta0block0;

       d1_rhoN2u0_dx = (3.0*u0_B0(1)*rhoN2_B0(1) + 0.333333333333333*u0_B0(3)*rhoN2_B0(3) - 1.5*u0_B0(2)*rhoN2_B0(2) -
            1.83333333333333*u0_B0(0)*rhoN2_B0(0))*invDelta0block0;

       d1_rhoNO_dx = (3.0*rhoNO_B0(1) + 0.333333333333333*rhoNO_B0(3) - 1.5*rhoNO_B0(2) -
            1.83333333333333*rhoNO_B0(0))*invDelta0block0;

       d1_rhoNOu0_dx = (3.0*u0_B0(1)*rhoNO_B0(1) + 0.333333333333333*u0_B0(3)*rhoNO_B0(3) - 1.5*u0_B0(2)*rhoNO_B0(2) -
            1.83333333333333*u0_B0(0)*rhoNO_B0(0))*invDelta0block0;

       d1_rhoN_dx = (3.0*rhoN_B0(1) + 0.333333333333333*rhoN_B0(3) - 1.5*rhoN_B0(2) -
            1.83333333333333*rhoN_B0(0))*invDelta0block0;

       d1_rhoNu0_dx = (3.0*u0_B0(1)*rhoN_B0(1) + 0.333333333333333*u0_B0(3)*rhoN_B0(3) - 1.5*u0_B0(2)*rhoN_B0(2) -
            1.83333333333333*u0_B0(0)*rhoN_B0(0))*invDelta0block0;

       d1_rhoO2_dx = (3.0*rhoO2_B0(1) + 0.333333333333333*rhoO2_B0(3) - 1.5*rhoO2_B0(2) -
            1.83333333333333*rhoO2_B0(0))*invDelta0block0;

       d1_rhoO2u0_dx = (3.0*u0_B0(1)*rhoO2_B0(1) + 0.333333333333333*u0_B0(3)*rhoO2_B0(3) - 1.5*u0_B0(2)*rhoO2_B0(2) -
            1.83333333333333*u0_B0(0)*rhoO2_B0(0))*invDelta0block0;

       d1_rhoO_dx = (3.0*rhoO_B0(1) + 0.333333333333333*rhoO_B0(3) - 1.5*rhoO_B0(2) -
            1.83333333333333*rhoO_B0(0))*invDelta0block0;

       d1_rhoOu0_dx = (3.0*u0_B0(1)*rhoO_B0(1) + 0.333333333333333*u0_B0(3)*rhoO_B0(3) - 1.5*u0_B0(2)*rhoO_B0(2) -
            1.83333333333333*u0_B0(0)*rhoO_B0(0))*invDelta0block0;

       d1_rhoev_dx = (3.0*rhoev_B0(1) + 0.333333333333333*rhoev_B0(3) - 1.5*rhoev_B0(2) -
            1.83333333333333*rhoev_B0(0))*invDelta0block0;

       d1_rhoevu0_dx = (3.0*u0_B0(1)*rhoev_B0(1) + 0.333333333333333*u0_B0(3)*rhoev_B0(3) - 1.5*u0_B0(2)*rhoev_B0(2) -
            1.83333333333333*u0_B0(0)*rhoev_B0(0))*invDelta0block0;

       d1_rhou0_dx = (3.0*rhou0_B0(1) + 0.333333333333333*rhou0_B0(3) - 1.5*rhou0_B0(2) -
            1.83333333333333*rhou0_B0(0))*invDelta0block0;

       d1_rhou0u0_dx = (3.0*u0_B0(1)*rhou0_B0(1) + 0.333333333333333*u0_B0(3)*rhou0_B0(3) - 1.5*u0_B0(2)*rhou0_B0(2) -
            1.83333333333333*u0_B0(0)*rhou0_B0(0))*invDelta0block0;

   }

   else if (idx[0] == 1){

       d1_p_dx = (0.0394168524399447*p_B0(2) + 0.00571369039775442*p_B0(4) + 0.719443173328855*p_B0(1) -
            0.322484932882161*p_B0(0) - 0.0658051057710389*p_B0(3) - 0.376283677513354*p_B0(-1))*invDelta0block0;

       d1_pu0_dx = (0.0394168524399447*p_B0(2)*u0_B0(2) + 0.00571369039775442*p_B0(4)*u0_B0(4) +
            0.719443173328855*p_B0(1)*u0_B0(1) - 0.322484932882161*p_B0(0)*u0_B0(0) -
            0.0658051057710389*p_B0(3)*u0_B0(3) - 0.376283677513354*p_B0(-1)*u0_B0(-1))*invDelta0block0;

       d1_rhoE_dx = (0.0394168524399447*rhoE_B0(2) + 0.00571369039775442*rhoE_B0(4) + 0.719443173328855*rhoE_B0(1) -
            0.322484932882161*rhoE_B0(0) - 0.0658051057710389*rhoE_B0(3) -
            0.376283677513354*rhoE_B0(-1))*invDelta0block0;

       d1_rhoEu0_dx = (0.0394168524399447*u0_B0(2)*rhoE_B0(2) + 0.00571369039775442*u0_B0(4)*rhoE_B0(4) +
            0.719443173328855*u0_B0(1)*rhoE_B0(1) - 0.322484932882161*u0_B0(0)*rhoE_B0(0) -
            0.0658051057710389*u0_B0(3)*rhoE_B0(3) - 0.376283677513354*u0_B0(-1)*rhoE_B0(-1))*invDelta0block0;

       d1_rhoN2_dx = (0.0394168524399447*rhoN2_B0(2) + 0.00571369039775442*rhoN2_B0(4) + 0.719443173328855*rhoN2_B0(1) -
            0.322484932882161*rhoN2_B0(0) - 0.0658051057710389*rhoN2_B0(3) -
            0.376283677513354*rhoN2_B0(-1))*invDelta0block0;

       d1_rhoN2u0_dx = (0.0394168524399447*u0_B0(2)*rhoN2_B0(2) + 0.00571369039775442*u0_B0(4)*rhoN2_B0(4) +
            0.719443173328855*u0_B0(1)*rhoN2_B0(1) - 0.322484932882161*u0_B0(0)*rhoN2_B0(0) -
            0.0658051057710389*u0_B0(3)*rhoN2_B0(3) - 0.376283677513354*u0_B0(-1)*rhoN2_B0(-1))*invDelta0block0;

       d1_rhoNO_dx = (0.0394168524399447*rhoNO_B0(2) + 0.00571369039775442*rhoNO_B0(4) + 0.719443173328855*rhoNO_B0(1) -
            0.322484932882161*rhoNO_B0(0) - 0.0658051057710389*rhoNO_B0(3) -
            0.376283677513354*rhoNO_B0(-1))*invDelta0block0;

       d1_rhoNOu0_dx = (0.0394168524399447*u0_B0(2)*rhoNO_B0(2) + 0.00571369039775442*u0_B0(4)*rhoNO_B0(4) +
            0.719443173328855*u0_B0(1)*rhoNO_B0(1) - 0.322484932882161*u0_B0(0)*rhoNO_B0(0) -
            0.0658051057710389*u0_B0(3)*rhoNO_B0(3) - 0.376283677513354*u0_B0(-1)*rhoNO_B0(-1))*invDelta0block0;

       d1_rhoN_dx = (0.0394168524399447*rhoN_B0(2) + 0.00571369039775442*rhoN_B0(4) + 0.719443173328855*rhoN_B0(1) -
            0.322484932882161*rhoN_B0(0) - 0.0658051057710389*rhoN_B0(3) -
            0.376283677513354*rhoN_B0(-1))*invDelta0block0;

       d1_rhoNu0_dx = (0.0394168524399447*u0_B0(2)*rhoN_B0(2) + 0.00571369039775442*u0_B0(4)*rhoN_B0(4) +
            0.719443173328855*u0_B0(1)*rhoN_B0(1) - 0.322484932882161*u0_B0(0)*rhoN_B0(0) -
            0.0658051057710389*u0_B0(3)*rhoN_B0(3) - 0.376283677513354*u0_B0(-1)*rhoN_B0(-1))*invDelta0block0;

       d1_rhoO2_dx = (0.0394168524399447*rhoO2_B0(2) + 0.00571369039775442*rhoO2_B0(4) + 0.719443173328855*rhoO2_B0(1) -
            0.322484932882161*rhoO2_B0(0) - 0.0658051057710389*rhoO2_B0(3) -
            0.376283677513354*rhoO2_B0(-1))*invDelta0block0;

       d1_rhoO2u0_dx = (0.0394168524399447*u0_B0(2)*rhoO2_B0(2) + 0.00571369039775442*u0_B0(4)*rhoO2_B0(4) +
            0.719443173328855*u0_B0(1)*rhoO2_B0(1) - 0.322484932882161*u0_B0(0)*rhoO2_B0(0) -
            0.0658051057710389*u0_B0(3)*rhoO2_B0(3) - 0.376283677513354*u0_B0(-1)*rhoO2_B0(-1))*invDelta0block0;

       d1_rhoO_dx = (0.0394168524399447*rhoO_B0(2) + 0.00571369039775442*rhoO_B0(4) + 0.719443173328855*rhoO_B0(1) -
            0.322484932882161*rhoO_B0(0) - 0.0658051057710389*rhoO_B0(3) -
            0.376283677513354*rhoO_B0(-1))*invDelta0block0;

       d1_rhoOu0_dx = (0.0394168524399447*u0_B0(2)*rhoO_B0(2) + 0.00571369039775442*u0_B0(4)*rhoO_B0(4) +
            0.719443173328855*u0_B0(1)*rhoO_B0(1) - 0.322484932882161*u0_B0(0)*rhoO_B0(0) -
            0.0658051057710389*u0_B0(3)*rhoO_B0(3) - 0.376283677513354*u0_B0(-1)*rhoO_B0(-1))*invDelta0block0;

       d1_rhoev_dx = (0.0394168524399447*rhoev_B0(2) + 0.00571369039775442*rhoev_B0(4) + 0.719443173328855*rhoev_B0(1) -
            0.322484932882161*rhoev_B0(0) - 0.0658051057710389*rhoev_B0(3) -
            0.376283677513354*rhoev_B0(-1))*invDelta0block0;

       d1_rhoevu0_dx = (0.0394168524399447*u0_B0(2)*rhoev_B0(2) + 0.00571369039775442*u0_B0(4)*rhoev_B0(4) +
            0.719443173328855*u0_B0(1)*rhoev_B0(1) - 0.322484932882161*u0_B0(0)*rhoev_B0(0) -
            0.0658051057710389*u0_B0(3)*rhoev_B0(3) - 0.376283677513354*u0_B0(-1)*rhoev_B0(-1))*invDelta0block0;

       d1_rhou0_dx = (0.0394168524399447*rhou0_B0(2) + 0.00571369039775442*rhou0_B0(4) + 0.719443173328855*rhou0_B0(1) -
            0.322484932882161*rhou0_B0(0) - 0.0658051057710389*rhou0_B0(3) -
            0.376283677513354*rhou0_B0(-1))*invDelta0block0;

       d1_rhou0u0_dx = (0.0394168524399447*u0_B0(2)*rhou0_B0(2) + 0.00571369039775442*u0_B0(4)*rhou0_B0(4) +
            0.719443173328855*u0_B0(1)*rhou0_B0(1) - 0.322484932882161*u0_B0(0)*rhou0_B0(0) -
            0.0658051057710389*u0_B0(3)*rhou0_B0(3) - 0.376283677513354*u0_B0(-1)*rhou0_B0(-1))*invDelta0block0;

   }

   else if (idx[0] == 2){

       d1_p_dx = (0.197184333887745*p_B0(0) + 0.521455851089587*p_B0(1) + 0.113446470384241*p_B0(-2) -
            0.00412637789557492*p_B0(3) - 0.0367146847001261*p_B0(2) - 0.791245592765872*p_B0(-1))*invDelta0block0;

       d1_pu0_dx = (0.197184333887745*p_B0(0)*u0_B0(0) + 0.521455851089587*p_B0(1)*u0_B0(1) +
            0.113446470384241*p_B0(-2)*u0_B0(-2) - 0.00412637789557492*p_B0(3)*u0_B0(3) -
            0.0367146847001261*p_B0(2)*u0_B0(2) - 0.791245592765872*p_B0(-1)*u0_B0(-1))*invDelta0block0;

       d1_rhoE_dx = (0.197184333887745*rhoE_B0(0) + 0.521455851089587*rhoE_B0(1) + 0.113446470384241*rhoE_B0(-2) -
            0.00412637789557492*rhoE_B0(3) - 0.0367146847001261*rhoE_B0(2) -
            0.791245592765872*rhoE_B0(-1))*invDelta0block0;

       d1_rhoEu0_dx = (0.197184333887745*u0_B0(0)*rhoE_B0(0) + 0.521455851089587*u0_B0(1)*rhoE_B0(1) +
            0.113446470384241*u0_B0(-2)*rhoE_B0(-2) - 0.00412637789557492*u0_B0(3)*rhoE_B0(3) -
            0.0367146847001261*u0_B0(2)*rhoE_B0(2) - 0.791245592765872*u0_B0(-1)*rhoE_B0(-1))*invDelta0block0;

       d1_rhoN2_dx = (0.197184333887745*rhoN2_B0(0) + 0.521455851089587*rhoN2_B0(1) + 0.113446470384241*rhoN2_B0(-2) -
            0.00412637789557492*rhoN2_B0(3) - 0.0367146847001261*rhoN2_B0(2) -
            0.791245592765872*rhoN2_B0(-1))*invDelta0block0;

       d1_rhoN2u0_dx = (0.197184333887745*u0_B0(0)*rhoN2_B0(0) + 0.521455851089587*u0_B0(1)*rhoN2_B0(1) +
            0.113446470384241*u0_B0(-2)*rhoN2_B0(-2) - 0.00412637789557492*u0_B0(3)*rhoN2_B0(3) -
            0.0367146847001261*u0_B0(2)*rhoN2_B0(2) - 0.791245592765872*u0_B0(-1)*rhoN2_B0(-1))*invDelta0block0;

       d1_rhoNO_dx = (0.197184333887745*rhoNO_B0(0) + 0.521455851089587*rhoNO_B0(1) + 0.113446470384241*rhoNO_B0(-2) -
            0.00412637789557492*rhoNO_B0(3) - 0.0367146847001261*rhoNO_B0(2) -
            0.791245592765872*rhoNO_B0(-1))*invDelta0block0;

       d1_rhoNOu0_dx = (0.197184333887745*u0_B0(0)*rhoNO_B0(0) + 0.521455851089587*u0_B0(1)*rhoNO_B0(1) +
            0.113446470384241*u0_B0(-2)*rhoNO_B0(-2) - 0.00412637789557492*u0_B0(3)*rhoNO_B0(3) -
            0.0367146847001261*u0_B0(2)*rhoNO_B0(2) - 0.791245592765872*u0_B0(-1)*rhoNO_B0(-1))*invDelta0block0;

       d1_rhoN_dx = (0.197184333887745*rhoN_B0(0) + 0.521455851089587*rhoN_B0(1) + 0.113446470384241*rhoN_B0(-2) -
            0.00412637789557492*rhoN_B0(3) - 0.0367146847001261*rhoN_B0(2) -
            0.791245592765872*rhoN_B0(-1))*invDelta0block0;

       d1_rhoNu0_dx = (0.197184333887745*u0_B0(0)*rhoN_B0(0) + 0.521455851089587*u0_B0(1)*rhoN_B0(1) +
            0.113446470384241*u0_B0(-2)*rhoN_B0(-2) - 0.00412637789557492*u0_B0(3)*rhoN_B0(3) -
            0.0367146847001261*u0_B0(2)*rhoN_B0(2) - 0.791245592765872*u0_B0(-1)*rhoN_B0(-1))*invDelta0block0;

       d1_rhoO2_dx = (0.197184333887745*rhoO2_B0(0) + 0.521455851089587*rhoO2_B0(1) + 0.113446470384241*rhoO2_B0(-2) -
            0.00412637789557492*rhoO2_B0(3) - 0.0367146847001261*rhoO2_B0(2) -
            0.791245592765872*rhoO2_B0(-1))*invDelta0block0;

       d1_rhoO2u0_dx = (0.197184333887745*u0_B0(0)*rhoO2_B0(0) + 0.521455851089587*u0_B0(1)*rhoO2_B0(1) +
            0.113446470384241*u0_B0(-2)*rhoO2_B0(-2) - 0.00412637789557492*u0_B0(3)*rhoO2_B0(3) -
            0.0367146847001261*u0_B0(2)*rhoO2_B0(2) - 0.791245592765872*u0_B0(-1)*rhoO2_B0(-1))*invDelta0block0;

       d1_rhoO_dx = (0.197184333887745*rhoO_B0(0) + 0.521455851089587*rhoO_B0(1) + 0.113446470384241*rhoO_B0(-2) -
            0.00412637789557492*rhoO_B0(3) - 0.0367146847001261*rhoO_B0(2) -
            0.791245592765872*rhoO_B0(-1))*invDelta0block0;

       d1_rhoOu0_dx = (0.197184333887745*u0_B0(0)*rhoO_B0(0) + 0.521455851089587*u0_B0(1)*rhoO_B0(1) +
            0.113446470384241*u0_B0(-2)*rhoO_B0(-2) - 0.00412637789557492*u0_B0(3)*rhoO_B0(3) -
            0.0367146847001261*u0_B0(2)*rhoO_B0(2) - 0.791245592765872*u0_B0(-1)*rhoO_B0(-1))*invDelta0block0;

       d1_rhoev_dx = (0.197184333887745*rhoev_B0(0) + 0.521455851089587*rhoev_B0(1) + 0.113446470384241*rhoev_B0(-2) -
            0.00412637789557492*rhoev_B0(3) - 0.0367146847001261*rhoev_B0(2) -
            0.791245592765872*rhoev_B0(-1))*invDelta0block0;

       d1_rhoevu0_dx = (0.197184333887745*u0_B0(0)*rhoev_B0(0) + 0.521455851089587*u0_B0(1)*rhoev_B0(1) +
            0.113446470384241*u0_B0(-2)*rhoev_B0(-2) - 0.00412637789557492*u0_B0(3)*rhoev_B0(3) -
            0.0367146847001261*u0_B0(2)*rhoev_B0(2) - 0.791245592765872*u0_B0(-1)*rhoev_B0(-1))*invDelta0block0;

       d1_rhou0_dx = (0.197184333887745*rhou0_B0(0) + 0.521455851089587*rhou0_B0(1) + 0.113446470384241*rhou0_B0(-2) -
            0.00412637789557492*rhou0_B0(3) - 0.0367146847001261*rhou0_B0(2) -
            0.791245592765872*rhou0_B0(-1))*invDelta0block0;

       d1_rhou0u0_dx = (0.197184333887745*u0_B0(0)*rhou0_B0(0) + 0.521455851089587*u0_B0(1)*rhou0_B0(1) +
            0.113446470384241*u0_B0(-2)*rhou0_B0(-2) - 0.00412637789557492*u0_B0(3)*rhou0_B0(3) -
            0.0367146847001261*u0_B0(2)*rhou0_B0(2) - 0.791245592765872*u0_B0(-1)*rhou0_B0(-1))*invDelta0block0;

   }

   else if (idx[0] == 3){

       d1_p_dx = (0.0451033223343881*p_B0(0) + 0.652141084861241*p_B0(1) + 0.121937153224065*p_B0(-2) -
            0.00932597985049999*p_B0(-3) - 0.727822147724592*p_B0(-1) - 0.082033432844602*p_B0(2))*invDelta0block0;

       d1_pu0_dx = (0.0451033223343881*p_B0(0)*u0_B0(0) + 0.652141084861241*p_B0(1)*u0_B0(1) +
            0.121937153224065*p_B0(-2)*u0_B0(-2) - 0.00932597985049999*p_B0(-3)*u0_B0(-3) -
            0.727822147724592*p_B0(-1)*u0_B0(-1) - 0.082033432844602*p_B0(2)*u0_B0(2))*invDelta0block0;

       d1_rhoE_dx = (0.0451033223343881*rhoE_B0(0) + 0.652141084861241*rhoE_B0(1) + 0.121937153224065*rhoE_B0(-2) -
            0.00932597985049999*rhoE_B0(-3) - 0.727822147724592*rhoE_B0(-1) -
            0.082033432844602*rhoE_B0(2))*invDelta0block0;

       d1_rhoEu0_dx = (0.0451033223343881*u0_B0(0)*rhoE_B0(0) + 0.652141084861241*u0_B0(1)*rhoE_B0(1) +
            0.121937153224065*u0_B0(-2)*rhoE_B0(-2) - 0.00932597985049999*u0_B0(-3)*rhoE_B0(-3) -
            0.727822147724592*u0_B0(-1)*rhoE_B0(-1) - 0.082033432844602*u0_B0(2)*rhoE_B0(2))*invDelta0block0;

       d1_rhoN2_dx = (0.0451033223343881*rhoN2_B0(0) + 0.652141084861241*rhoN2_B0(1) + 0.121937153224065*rhoN2_B0(-2) -
            0.00932597985049999*rhoN2_B0(-3) - 0.727822147724592*rhoN2_B0(-1) -
            0.082033432844602*rhoN2_B0(2))*invDelta0block0;

       d1_rhoN2u0_dx = (0.0451033223343881*u0_B0(0)*rhoN2_B0(0) + 0.652141084861241*u0_B0(1)*rhoN2_B0(1) +
            0.121937153224065*u0_B0(-2)*rhoN2_B0(-2) - 0.00932597985049999*u0_B0(-3)*rhoN2_B0(-3) -
            0.727822147724592*u0_B0(-1)*rhoN2_B0(-1) - 0.082033432844602*u0_B0(2)*rhoN2_B0(2))*invDelta0block0;

       d1_rhoNO_dx = (0.0451033223343881*rhoNO_B0(0) + 0.652141084861241*rhoNO_B0(1) + 0.121937153224065*rhoNO_B0(-2) -
            0.00932597985049999*rhoNO_B0(-3) - 0.727822147724592*rhoNO_B0(-1) -
            0.082033432844602*rhoNO_B0(2))*invDelta0block0;

       d1_rhoNOu0_dx = (0.0451033223343881*u0_B0(0)*rhoNO_B0(0) + 0.652141084861241*u0_B0(1)*rhoNO_B0(1) +
            0.121937153224065*u0_B0(-2)*rhoNO_B0(-2) - 0.00932597985049999*u0_B0(-3)*rhoNO_B0(-3) -
            0.727822147724592*u0_B0(-1)*rhoNO_B0(-1) - 0.082033432844602*u0_B0(2)*rhoNO_B0(2))*invDelta0block0;

       d1_rhoN_dx = (0.0451033223343881*rhoN_B0(0) + 0.652141084861241*rhoN_B0(1) + 0.121937153224065*rhoN_B0(-2) -
            0.00932597985049999*rhoN_B0(-3) - 0.727822147724592*rhoN_B0(-1) -
            0.082033432844602*rhoN_B0(2))*invDelta0block0;

       d1_rhoNu0_dx = (0.0451033223343881*u0_B0(0)*rhoN_B0(0) + 0.652141084861241*u0_B0(1)*rhoN_B0(1) +
            0.121937153224065*u0_B0(-2)*rhoN_B0(-2) - 0.00932597985049999*u0_B0(-3)*rhoN_B0(-3) -
            0.727822147724592*u0_B0(-1)*rhoN_B0(-1) - 0.082033432844602*u0_B0(2)*rhoN_B0(2))*invDelta0block0;

       d1_rhoO2_dx = (0.0451033223343881*rhoO2_B0(0) + 0.652141084861241*rhoO2_B0(1) + 0.121937153224065*rhoO2_B0(-2) -
            0.00932597985049999*rhoO2_B0(-3) - 0.727822147724592*rhoO2_B0(-1) -
            0.082033432844602*rhoO2_B0(2))*invDelta0block0;

       d1_rhoO2u0_dx = (0.0451033223343881*u0_B0(0)*rhoO2_B0(0) + 0.652141084861241*u0_B0(1)*rhoO2_B0(1) +
            0.121937153224065*u0_B0(-2)*rhoO2_B0(-2) - 0.00932597985049999*u0_B0(-3)*rhoO2_B0(-3) -
            0.727822147724592*u0_B0(-1)*rhoO2_B0(-1) - 0.082033432844602*u0_B0(2)*rhoO2_B0(2))*invDelta0block0;

       d1_rhoO_dx = (0.0451033223343881*rhoO_B0(0) + 0.652141084861241*rhoO_B0(1) + 0.121937153224065*rhoO_B0(-2) -
            0.00932597985049999*rhoO_B0(-3) - 0.727822147724592*rhoO_B0(-1) -
            0.082033432844602*rhoO_B0(2))*invDelta0block0;

       d1_rhoOu0_dx = (0.0451033223343881*u0_B0(0)*rhoO_B0(0) + 0.652141084861241*u0_B0(1)*rhoO_B0(1) +
            0.121937153224065*u0_B0(-2)*rhoO_B0(-2) - 0.00932597985049999*u0_B0(-3)*rhoO_B0(-3) -
            0.727822147724592*u0_B0(-1)*rhoO_B0(-1) - 0.082033432844602*u0_B0(2)*rhoO_B0(2))*invDelta0block0;

       d1_rhoev_dx = (0.0451033223343881*rhoev_B0(0) + 0.652141084861241*rhoev_B0(1) + 0.121937153224065*rhoev_B0(-2) -
            0.00932597985049999*rhoev_B0(-3) - 0.727822147724592*rhoev_B0(-1) -
            0.082033432844602*rhoev_B0(2))*invDelta0block0;

       d1_rhoevu0_dx = (0.0451033223343881*u0_B0(0)*rhoev_B0(0) + 0.652141084861241*u0_B0(1)*rhoev_B0(1) +
            0.121937153224065*u0_B0(-2)*rhoev_B0(-2) - 0.00932597985049999*u0_B0(-3)*rhoev_B0(-3) -
            0.727822147724592*u0_B0(-1)*rhoev_B0(-1) - 0.082033432844602*u0_B0(2)*rhoev_B0(2))*invDelta0block0;

       d1_rhou0_dx = (0.0451033223343881*rhou0_B0(0) + 0.652141084861241*rhou0_B0(1) + 0.121937153224065*rhou0_B0(-2) -
            0.00932597985049999*rhou0_B0(-3) - 0.727822147724592*rhou0_B0(-1) -
            0.082033432844602*rhou0_B0(2))*invDelta0block0;

       d1_rhou0u0_dx = (0.0451033223343881*u0_B0(0)*rhou0_B0(0) + 0.652141084861241*u0_B0(1)*rhou0_B0(1) +
            0.121937153224065*u0_B0(-2)*rhou0_B0(-2) - 0.00932597985049999*u0_B0(-3)*rhou0_B0(-3) -
            0.727822147724592*u0_B0(-1)*rhou0_B0(-1) - 0.082033432844602*u0_B0(2)*rhou0_B0(2))*invDelta0block0;

   }

   else if (idx[0] == -1 + block0np0){

      d1_p_dx = (1.5*p_B0(-2) + 1.83333333333333*p_B0(0) - 3.0*p_B0(-1) - 0.333333333333333*p_B0(-3))*invDelta0block0;

       d1_pu0_dx = (1.5*p_B0(-2)*u0_B0(-2) + 1.83333333333333*p_B0(0)*u0_B0(0) - 3.0*p_B0(-1)*u0_B0(-1) -
            0.333333333333333*p_B0(-3)*u0_B0(-3))*invDelta0block0;

       d1_rhoE_dx = (1.5*rhoE_B0(-2) + 1.83333333333333*rhoE_B0(0) - 3.0*rhoE_B0(-1) -
            0.333333333333333*rhoE_B0(-3))*invDelta0block0;

       d1_rhoEu0_dx = (1.5*u0_B0(-2)*rhoE_B0(-2) + 1.83333333333333*u0_B0(0)*rhoE_B0(0) - 3.0*u0_B0(-1)*rhoE_B0(-1) -
            0.333333333333333*u0_B0(-3)*rhoE_B0(-3))*invDelta0block0;

       d1_rhoN2_dx = (1.5*rhoN2_B0(-2) + 1.83333333333333*rhoN2_B0(0) - 3.0*rhoN2_B0(-1) -
            0.333333333333333*rhoN2_B0(-3))*invDelta0block0;

       d1_rhoN2u0_dx = (1.5*u0_B0(-2)*rhoN2_B0(-2) + 1.83333333333333*u0_B0(0)*rhoN2_B0(0) - 3.0*u0_B0(-1)*rhoN2_B0(-1)
            - 0.333333333333333*u0_B0(-3)*rhoN2_B0(-3))*invDelta0block0;

       d1_rhoNO_dx = (1.5*rhoNO_B0(-2) + 1.83333333333333*rhoNO_B0(0) - 3.0*rhoNO_B0(-1) -
            0.333333333333333*rhoNO_B0(-3))*invDelta0block0;

       d1_rhoNOu0_dx = (1.5*u0_B0(-2)*rhoNO_B0(-2) + 1.83333333333333*u0_B0(0)*rhoNO_B0(0) - 3.0*u0_B0(-1)*rhoNO_B0(-1)
            - 0.333333333333333*u0_B0(-3)*rhoNO_B0(-3))*invDelta0block0;

       d1_rhoN_dx = (1.5*rhoN_B0(-2) + 1.83333333333333*rhoN_B0(0) - 3.0*rhoN_B0(-1) -
            0.333333333333333*rhoN_B0(-3))*invDelta0block0;

       d1_rhoNu0_dx = (1.5*u0_B0(-2)*rhoN_B0(-2) + 1.83333333333333*u0_B0(0)*rhoN_B0(0) - 3.0*u0_B0(-1)*rhoN_B0(-1) -
            0.333333333333333*u0_B0(-3)*rhoN_B0(-3))*invDelta0block0;

       d1_rhoO2_dx = (1.5*rhoO2_B0(-2) + 1.83333333333333*rhoO2_B0(0) - 3.0*rhoO2_B0(-1) -
            0.333333333333333*rhoO2_B0(-3))*invDelta0block0;

       d1_rhoO2u0_dx = (1.5*u0_B0(-2)*rhoO2_B0(-2) + 1.83333333333333*u0_B0(0)*rhoO2_B0(0) - 3.0*u0_B0(-1)*rhoO2_B0(-1)
            - 0.333333333333333*u0_B0(-3)*rhoO2_B0(-3))*invDelta0block0;

       d1_rhoO_dx = (1.5*rhoO_B0(-2) + 1.83333333333333*rhoO_B0(0) - 3.0*rhoO_B0(-1) -
            0.333333333333333*rhoO_B0(-3))*invDelta0block0;

       d1_rhoOu0_dx = (1.5*u0_B0(-2)*rhoO_B0(-2) + 1.83333333333333*u0_B0(0)*rhoO_B0(0) - 3.0*u0_B0(-1)*rhoO_B0(-1) -
            0.333333333333333*u0_B0(-3)*rhoO_B0(-3))*invDelta0block0;

       d1_rhoev_dx = (1.5*rhoev_B0(-2) + 1.83333333333333*rhoev_B0(0) - 3.0*rhoev_B0(-1) -
            0.333333333333333*rhoev_B0(-3))*invDelta0block0;

       d1_rhoevu0_dx = (1.5*u0_B0(-2)*rhoev_B0(-2) + 1.83333333333333*u0_B0(0)*rhoev_B0(0) - 3.0*u0_B0(-1)*rhoev_B0(-1)
            - 0.333333333333333*u0_B0(-3)*rhoev_B0(-3))*invDelta0block0;

       d1_rhou0_dx = (1.5*rhou0_B0(-2) + 1.83333333333333*rhou0_B0(0) - 3.0*rhou0_B0(-1) -
            0.333333333333333*rhou0_B0(-3))*invDelta0block0;

       d1_rhou0u0_dx = (1.5*u0_B0(-2)*rhou0_B0(-2) + 1.83333333333333*u0_B0(0)*rhou0_B0(0) - 3.0*u0_B0(-1)*rhou0_B0(-1)
            - 0.333333333333333*u0_B0(-3)*rhou0_B0(-3))*invDelta0block0;

   }

   else if (idx[0] == -2 + block0np0){

       d1_p_dx = (0.322484932882161*p_B0(0) + 0.0658051057710389*p_B0(-3) + 0.376283677513354*p_B0(1) -
            0.0394168524399447*p_B0(-2) - 0.00571369039775442*p_B0(-4) - 0.719443173328855*p_B0(-1))*invDelta0block0;

       d1_pu0_dx = (0.322484932882161*p_B0(0)*u0_B0(0) + 0.0658051057710389*p_B0(-3)*u0_B0(-3) +
            0.376283677513354*p_B0(1)*u0_B0(1) - 0.0394168524399447*p_B0(-2)*u0_B0(-2) -
            0.00571369039775442*p_B0(-4)*u0_B0(-4) - 0.719443173328855*p_B0(-1)*u0_B0(-1))*invDelta0block0;

       d1_rhoE_dx = (0.322484932882161*rhoE_B0(0) + 0.0658051057710389*rhoE_B0(-3) + 0.376283677513354*rhoE_B0(1) -
            0.0394168524399447*rhoE_B0(-2) - 0.00571369039775442*rhoE_B0(-4) -
            0.719443173328855*rhoE_B0(-1))*invDelta0block0;

       d1_rhoEu0_dx = (0.322484932882161*u0_B0(0)*rhoE_B0(0) + 0.0658051057710389*u0_B0(-3)*rhoE_B0(-3) +
            0.376283677513354*u0_B0(1)*rhoE_B0(1) - 0.0394168524399447*u0_B0(-2)*rhoE_B0(-2) -
            0.00571369039775442*u0_B0(-4)*rhoE_B0(-4) - 0.719443173328855*u0_B0(-1)*rhoE_B0(-1))*invDelta0block0;

       d1_rhoN2_dx = (0.322484932882161*rhoN2_B0(0) + 0.0658051057710389*rhoN2_B0(-3) + 0.376283677513354*rhoN2_B0(1) -
            0.0394168524399447*rhoN2_B0(-2) - 0.00571369039775442*rhoN2_B0(-4) -
            0.719443173328855*rhoN2_B0(-1))*invDelta0block0;

       d1_rhoN2u0_dx = (0.322484932882161*u0_B0(0)*rhoN2_B0(0) + 0.0658051057710389*u0_B0(-3)*rhoN2_B0(-3) +
            0.376283677513354*u0_B0(1)*rhoN2_B0(1) - 0.0394168524399447*u0_B0(-2)*rhoN2_B0(-2) -
            0.00571369039775442*u0_B0(-4)*rhoN2_B0(-4) - 0.719443173328855*u0_B0(-1)*rhoN2_B0(-1))*invDelta0block0;

       d1_rhoNO_dx = (0.322484932882161*rhoNO_B0(0) + 0.0658051057710389*rhoNO_B0(-3) + 0.376283677513354*rhoNO_B0(1) -
            0.0394168524399447*rhoNO_B0(-2) - 0.00571369039775442*rhoNO_B0(-4) -
            0.719443173328855*rhoNO_B0(-1))*invDelta0block0;

       d1_rhoNOu0_dx = (0.322484932882161*u0_B0(0)*rhoNO_B0(0) + 0.0658051057710389*u0_B0(-3)*rhoNO_B0(-3) +
            0.376283677513354*u0_B0(1)*rhoNO_B0(1) - 0.0394168524399447*u0_B0(-2)*rhoNO_B0(-2) -
            0.00571369039775442*u0_B0(-4)*rhoNO_B0(-4) - 0.719443173328855*u0_B0(-1)*rhoNO_B0(-1))*invDelta0block0;

       d1_rhoN_dx = (0.322484932882161*rhoN_B0(0) + 0.0658051057710389*rhoN_B0(-3) + 0.376283677513354*rhoN_B0(1) -
            0.0394168524399447*rhoN_B0(-2) - 0.00571369039775442*rhoN_B0(-4) -
            0.719443173328855*rhoN_B0(-1))*invDelta0block0;

       d1_rhoNu0_dx = (0.322484932882161*u0_B0(0)*rhoN_B0(0) + 0.0658051057710389*u0_B0(-3)*rhoN_B0(-3) +
            0.376283677513354*u0_B0(1)*rhoN_B0(1) - 0.0394168524399447*u0_B0(-2)*rhoN_B0(-2) -
            0.00571369039775442*u0_B0(-4)*rhoN_B0(-4) - 0.719443173328855*u0_B0(-1)*rhoN_B0(-1))*invDelta0block0;

       d1_rhoO2_dx = (0.322484932882161*rhoO2_B0(0) + 0.0658051057710389*rhoO2_B0(-3) + 0.376283677513354*rhoO2_B0(1) -
            0.0394168524399447*rhoO2_B0(-2) - 0.00571369039775442*rhoO2_B0(-4) -
            0.719443173328855*rhoO2_B0(-1))*invDelta0block0;

       d1_rhoO2u0_dx = (0.322484932882161*u0_B0(0)*rhoO2_B0(0) + 0.0658051057710389*u0_B0(-3)*rhoO2_B0(-3) +
            0.376283677513354*u0_B0(1)*rhoO2_B0(1) - 0.0394168524399447*u0_B0(-2)*rhoO2_B0(-2) -
            0.00571369039775442*u0_B0(-4)*rhoO2_B0(-4) - 0.719443173328855*u0_B0(-1)*rhoO2_B0(-1))*invDelta0block0;

       d1_rhoO_dx = (0.322484932882161*rhoO_B0(0) + 0.0658051057710389*rhoO_B0(-3) + 0.376283677513354*rhoO_B0(1) -
            0.0394168524399447*rhoO_B0(-2) - 0.00571369039775442*rhoO_B0(-4) -
            0.719443173328855*rhoO_B0(-1))*invDelta0block0;

       d1_rhoOu0_dx = (0.322484932882161*u0_B0(0)*rhoO_B0(0) + 0.0658051057710389*u0_B0(-3)*rhoO_B0(-3) +
            0.376283677513354*u0_B0(1)*rhoO_B0(1) - 0.0394168524399447*u0_B0(-2)*rhoO_B0(-2) -
            0.00571369039775442*u0_B0(-4)*rhoO_B0(-4) - 0.719443173328855*u0_B0(-1)*rhoO_B0(-1))*invDelta0block0;

       d1_rhoev_dx = (0.322484932882161*rhoev_B0(0) + 0.0658051057710389*rhoev_B0(-3) + 0.376283677513354*rhoev_B0(1) -
            0.0394168524399447*rhoev_B0(-2) - 0.00571369039775442*rhoev_B0(-4) -
            0.719443173328855*rhoev_B0(-1))*invDelta0block0;

       d1_rhoevu0_dx = (0.322484932882161*u0_B0(0)*rhoev_B0(0) + 0.0658051057710389*u0_B0(-3)*rhoev_B0(-3) +
            0.376283677513354*u0_B0(1)*rhoev_B0(1) - 0.0394168524399447*u0_B0(-2)*rhoev_B0(-2) -
            0.00571369039775442*u0_B0(-4)*rhoev_B0(-4) - 0.719443173328855*u0_B0(-1)*rhoev_B0(-1))*invDelta0block0;

       d1_rhou0_dx = (0.322484932882161*rhou0_B0(0) + 0.0658051057710389*rhou0_B0(-3) + 0.376283677513354*rhou0_B0(1) -
            0.0394168524399447*rhou0_B0(-2) - 0.00571369039775442*rhou0_B0(-4) -
            0.719443173328855*rhou0_B0(-1))*invDelta0block0;

       d1_rhou0u0_dx = (0.322484932882161*u0_B0(0)*rhou0_B0(0) + 0.0658051057710389*u0_B0(-3)*rhou0_B0(-3) +
            0.376283677513354*u0_B0(1)*rhou0_B0(1) - 0.0394168524399447*u0_B0(-2)*rhou0_B0(-2) -
            0.00571369039775442*u0_B0(-4)*rhou0_B0(-4) - 0.719443173328855*u0_B0(-1)*rhou0_B0(-1))*invDelta0block0;

   }

   else if (idx[0] == -3 + block0np0){

       d1_p_dx = (0.00412637789557492*p_B0(-3) + 0.0367146847001261*p_B0(-2) + 0.791245592765872*p_B0(1) -
            0.197184333887745*p_B0(0) - 0.521455851089587*p_B0(-1) - 0.113446470384241*p_B0(2))*invDelta0block0;

       d1_pu0_dx = (0.00412637789557492*p_B0(-3)*u0_B0(-3) + 0.0367146847001261*p_B0(-2)*u0_B0(-2) +
            0.791245592765872*p_B0(1)*u0_B0(1) - 0.197184333887745*p_B0(0)*u0_B0(0) -
            0.521455851089587*p_B0(-1)*u0_B0(-1) - 0.113446470384241*p_B0(2)*u0_B0(2))*invDelta0block0;

       d1_rhoE_dx = (0.00412637789557492*rhoE_B0(-3) + 0.0367146847001261*rhoE_B0(-2) + 0.791245592765872*rhoE_B0(1) -
            0.197184333887745*rhoE_B0(0) - 0.521455851089587*rhoE_B0(-1) -
            0.113446470384241*rhoE_B0(2))*invDelta0block0;

       d1_rhoEu0_dx = (0.00412637789557492*u0_B0(-3)*rhoE_B0(-3) + 0.0367146847001261*u0_B0(-2)*rhoE_B0(-2) +
            0.791245592765872*u0_B0(1)*rhoE_B0(1) - 0.197184333887745*u0_B0(0)*rhoE_B0(0) -
            0.521455851089587*u0_B0(-1)*rhoE_B0(-1) - 0.113446470384241*u0_B0(2)*rhoE_B0(2))*invDelta0block0;

       d1_rhoN2_dx = (0.00412637789557492*rhoN2_B0(-3) + 0.0367146847001261*rhoN2_B0(-2) + 0.791245592765872*rhoN2_B0(1)
            - 0.197184333887745*rhoN2_B0(0) - 0.521455851089587*rhoN2_B0(-1) -
            0.113446470384241*rhoN2_B0(2))*invDelta0block0;

       d1_rhoN2u0_dx = (0.00412637789557492*u0_B0(-3)*rhoN2_B0(-3) + 0.0367146847001261*u0_B0(-2)*rhoN2_B0(-2) +
            0.791245592765872*u0_B0(1)*rhoN2_B0(1) - 0.197184333887745*u0_B0(0)*rhoN2_B0(0) -
            0.521455851089587*u0_B0(-1)*rhoN2_B0(-1) - 0.113446470384241*u0_B0(2)*rhoN2_B0(2))*invDelta0block0;

       d1_rhoNO_dx = (0.00412637789557492*rhoNO_B0(-3) + 0.0367146847001261*rhoNO_B0(-2) + 0.791245592765872*rhoNO_B0(1)
            - 0.197184333887745*rhoNO_B0(0) - 0.521455851089587*rhoNO_B0(-1) -
            0.113446470384241*rhoNO_B0(2))*invDelta0block0;

       d1_rhoNOu0_dx = (0.00412637789557492*u0_B0(-3)*rhoNO_B0(-3) + 0.0367146847001261*u0_B0(-2)*rhoNO_B0(-2) +
            0.791245592765872*u0_B0(1)*rhoNO_B0(1) - 0.197184333887745*u0_B0(0)*rhoNO_B0(0) -
            0.521455851089587*u0_B0(-1)*rhoNO_B0(-1) - 0.113446470384241*u0_B0(2)*rhoNO_B0(2))*invDelta0block0;

       d1_rhoN_dx = (0.00412637789557492*rhoN_B0(-3) + 0.0367146847001261*rhoN_B0(-2) + 0.791245592765872*rhoN_B0(1) -
            0.197184333887745*rhoN_B0(0) - 0.521455851089587*rhoN_B0(-1) -
            0.113446470384241*rhoN_B0(2))*invDelta0block0;

       d1_rhoNu0_dx = (0.00412637789557492*u0_B0(-3)*rhoN_B0(-3) + 0.0367146847001261*u0_B0(-2)*rhoN_B0(-2) +
            0.791245592765872*u0_B0(1)*rhoN_B0(1) - 0.197184333887745*u0_B0(0)*rhoN_B0(0) -
            0.521455851089587*u0_B0(-1)*rhoN_B0(-1) - 0.113446470384241*u0_B0(2)*rhoN_B0(2))*invDelta0block0;

       d1_rhoO2_dx = (0.00412637789557492*rhoO2_B0(-3) + 0.0367146847001261*rhoO2_B0(-2) + 0.791245592765872*rhoO2_B0(1)
            - 0.197184333887745*rhoO2_B0(0) - 0.521455851089587*rhoO2_B0(-1) -
            0.113446470384241*rhoO2_B0(2))*invDelta0block0;

       d1_rhoO2u0_dx = (0.00412637789557492*u0_B0(-3)*rhoO2_B0(-3) + 0.0367146847001261*u0_B0(-2)*rhoO2_B0(-2) +
            0.791245592765872*u0_B0(1)*rhoO2_B0(1) - 0.197184333887745*u0_B0(0)*rhoO2_B0(0) -
            0.521455851089587*u0_B0(-1)*rhoO2_B0(-1) - 0.113446470384241*u0_B0(2)*rhoO2_B0(2))*invDelta0block0;

       d1_rhoO_dx = (0.00412637789557492*rhoO_B0(-3) + 0.0367146847001261*rhoO_B0(-2) + 0.791245592765872*rhoO_B0(1) -
            0.197184333887745*rhoO_B0(0) - 0.521455851089587*rhoO_B0(-1) -
            0.113446470384241*rhoO_B0(2))*invDelta0block0;

       d1_rhoOu0_dx = (0.00412637789557492*u0_B0(-3)*rhoO_B0(-3) + 0.0367146847001261*u0_B0(-2)*rhoO_B0(-2) +
            0.791245592765872*u0_B0(1)*rhoO_B0(1) - 0.197184333887745*u0_B0(0)*rhoO_B0(0) -
            0.521455851089587*u0_B0(-1)*rhoO_B0(-1) - 0.113446470384241*u0_B0(2)*rhoO_B0(2))*invDelta0block0;

       d1_rhoev_dx = (0.00412637789557492*rhoev_B0(-3) + 0.0367146847001261*rhoev_B0(-2) + 0.791245592765872*rhoev_B0(1)
            - 0.197184333887745*rhoev_B0(0) - 0.521455851089587*rhoev_B0(-1) -
            0.113446470384241*rhoev_B0(2))*invDelta0block0;

       d1_rhoevu0_dx = (0.00412637789557492*u0_B0(-3)*rhoev_B0(-3) + 0.0367146847001261*u0_B0(-2)*rhoev_B0(-2) +
            0.791245592765872*u0_B0(1)*rhoev_B0(1) - 0.197184333887745*u0_B0(0)*rhoev_B0(0) -
            0.521455851089587*u0_B0(-1)*rhoev_B0(-1) - 0.113446470384241*u0_B0(2)*rhoev_B0(2))*invDelta0block0;

       d1_rhou0_dx = (0.00412637789557492*rhou0_B0(-3) + 0.0367146847001261*rhou0_B0(-2) + 0.791245592765872*rhou0_B0(1)
            - 0.197184333887745*rhou0_B0(0) - 0.521455851089587*rhou0_B0(-1) -
            0.113446470384241*rhou0_B0(2))*invDelta0block0;

       d1_rhou0u0_dx = (0.00412637789557492*u0_B0(-3)*rhou0_B0(-3) + 0.0367146847001261*u0_B0(-2)*rhou0_B0(-2) +
            0.791245592765872*u0_B0(1)*rhou0_B0(1) - 0.197184333887745*u0_B0(0)*rhou0_B0(0) -
            0.521455851089587*u0_B0(-1)*rhou0_B0(-1) - 0.113446470384241*u0_B0(2)*rhou0_B0(2))*invDelta0block0;

   }

   else if (idx[0] == -4 + block0np0){

       d1_p_dx = (0.00932597985049999*p_B0(3) + 0.727822147724592*p_B0(1) + 0.082033432844602*p_B0(-2) -
            0.0451033223343881*p_B0(0) - 0.652141084861241*p_B0(-1) - 0.121937153224065*p_B0(2))*invDelta0block0;

       d1_pu0_dx = (0.00932597985049999*p_B0(3)*u0_B0(3) + 0.727822147724592*p_B0(1)*u0_B0(1) +
            0.082033432844602*p_B0(-2)*u0_B0(-2) - 0.0451033223343881*p_B0(0)*u0_B0(0) -
            0.652141084861241*p_B0(-1)*u0_B0(-1) - 0.121937153224065*p_B0(2)*u0_B0(2))*invDelta0block0;

       d1_rhoE_dx = (0.00932597985049999*rhoE_B0(3) + 0.727822147724592*rhoE_B0(1) + 0.082033432844602*rhoE_B0(-2) -
            0.0451033223343881*rhoE_B0(0) - 0.652141084861241*rhoE_B0(-1) -
            0.121937153224065*rhoE_B0(2))*invDelta0block0;

       d1_rhoEu0_dx = (0.00932597985049999*u0_B0(3)*rhoE_B0(3) + 0.727822147724592*u0_B0(1)*rhoE_B0(1) +
            0.082033432844602*u0_B0(-2)*rhoE_B0(-2) - 0.0451033223343881*u0_B0(0)*rhoE_B0(0) -
            0.652141084861241*u0_B0(-1)*rhoE_B0(-1) - 0.121937153224065*u0_B0(2)*rhoE_B0(2))*invDelta0block0;

       d1_rhoN2_dx = (0.00932597985049999*rhoN2_B0(3) + 0.727822147724592*rhoN2_B0(1) + 0.082033432844602*rhoN2_B0(-2) -
            0.0451033223343881*rhoN2_B0(0) - 0.652141084861241*rhoN2_B0(-1) -
            0.121937153224065*rhoN2_B0(2))*invDelta0block0;

       d1_rhoN2u0_dx = (0.00932597985049999*u0_B0(3)*rhoN2_B0(3) + 0.727822147724592*u0_B0(1)*rhoN2_B0(1) +
            0.082033432844602*u0_B0(-2)*rhoN2_B0(-2) - 0.0451033223343881*u0_B0(0)*rhoN2_B0(0) -
            0.652141084861241*u0_B0(-1)*rhoN2_B0(-1) - 0.121937153224065*u0_B0(2)*rhoN2_B0(2))*invDelta0block0;

       d1_rhoNO_dx = (0.00932597985049999*rhoNO_B0(3) + 0.727822147724592*rhoNO_B0(1) + 0.082033432844602*rhoNO_B0(-2) -
            0.0451033223343881*rhoNO_B0(0) - 0.652141084861241*rhoNO_B0(-1) -
            0.121937153224065*rhoNO_B0(2))*invDelta0block0;

       d1_rhoNOu0_dx = (0.00932597985049999*u0_B0(3)*rhoNO_B0(3) + 0.727822147724592*u0_B0(1)*rhoNO_B0(1) +
            0.082033432844602*u0_B0(-2)*rhoNO_B0(-2) - 0.0451033223343881*u0_B0(0)*rhoNO_B0(0) -
            0.652141084861241*u0_B0(-1)*rhoNO_B0(-1) - 0.121937153224065*u0_B0(2)*rhoNO_B0(2))*invDelta0block0;

       d1_rhoN_dx = (0.00932597985049999*rhoN_B0(3) + 0.727822147724592*rhoN_B0(1) + 0.082033432844602*rhoN_B0(-2) -
            0.0451033223343881*rhoN_B0(0) - 0.652141084861241*rhoN_B0(-1) -
            0.121937153224065*rhoN_B0(2))*invDelta0block0;

       d1_rhoNu0_dx = (0.00932597985049999*u0_B0(3)*rhoN_B0(3) + 0.727822147724592*u0_B0(1)*rhoN_B0(1) +
            0.082033432844602*u0_B0(-2)*rhoN_B0(-2) - 0.0451033223343881*u0_B0(0)*rhoN_B0(0) -
            0.652141084861241*u0_B0(-1)*rhoN_B0(-1) - 0.121937153224065*u0_B0(2)*rhoN_B0(2))*invDelta0block0;

       d1_rhoO2_dx = (0.00932597985049999*rhoO2_B0(3) + 0.727822147724592*rhoO2_B0(1) + 0.082033432844602*rhoO2_B0(-2) -
            0.0451033223343881*rhoO2_B0(0) - 0.652141084861241*rhoO2_B0(-1) -
            0.121937153224065*rhoO2_B0(2))*invDelta0block0;

       d1_rhoO2u0_dx = (0.00932597985049999*u0_B0(3)*rhoO2_B0(3) + 0.727822147724592*u0_B0(1)*rhoO2_B0(1) +
            0.082033432844602*u0_B0(-2)*rhoO2_B0(-2) - 0.0451033223343881*u0_B0(0)*rhoO2_B0(0) -
            0.652141084861241*u0_B0(-1)*rhoO2_B0(-1) - 0.121937153224065*u0_B0(2)*rhoO2_B0(2))*invDelta0block0;

       d1_rhoO_dx = (0.00932597985049999*rhoO_B0(3) + 0.727822147724592*rhoO_B0(1) + 0.082033432844602*rhoO_B0(-2) -
            0.0451033223343881*rhoO_B0(0) - 0.652141084861241*rhoO_B0(-1) -
            0.121937153224065*rhoO_B0(2))*invDelta0block0;

       d1_rhoOu0_dx = (0.00932597985049999*u0_B0(3)*rhoO_B0(3) + 0.727822147724592*u0_B0(1)*rhoO_B0(1) +
            0.082033432844602*u0_B0(-2)*rhoO_B0(-2) - 0.0451033223343881*u0_B0(0)*rhoO_B0(0) -
            0.652141084861241*u0_B0(-1)*rhoO_B0(-1) - 0.121937153224065*u0_B0(2)*rhoO_B0(2))*invDelta0block0;

       d1_rhoev_dx = (0.00932597985049999*rhoev_B0(3) + 0.727822147724592*rhoev_B0(1) + 0.082033432844602*rhoev_B0(-2) -
            0.0451033223343881*rhoev_B0(0) - 0.652141084861241*rhoev_B0(-1) -
            0.121937153224065*rhoev_B0(2))*invDelta0block0;

       d1_rhoevu0_dx = (0.00932597985049999*u0_B0(3)*rhoev_B0(3) + 0.727822147724592*u0_B0(1)*rhoev_B0(1) +
            0.082033432844602*u0_B0(-2)*rhoev_B0(-2) - 0.0451033223343881*u0_B0(0)*rhoev_B0(0) -
            0.652141084861241*u0_B0(-1)*rhoev_B0(-1) - 0.121937153224065*u0_B0(2)*rhoev_B0(2))*invDelta0block0;

       d1_rhou0_dx = (0.00932597985049999*rhou0_B0(3) + 0.727822147724592*rhou0_B0(1) + 0.082033432844602*rhou0_B0(-2) -
            0.0451033223343881*rhou0_B0(0) - 0.652141084861241*rhou0_B0(-1) -
            0.121937153224065*rhou0_B0(2))*invDelta0block0;

       d1_rhou0u0_dx = (0.00932597985049999*u0_B0(3)*rhou0_B0(3) + 0.727822147724592*u0_B0(1)*rhou0_B0(1) +
            0.082033432844602*u0_B0(-2)*rhou0_B0(-2) - 0.0451033223343881*u0_B0(0)*rhou0_B0(0) -
            0.652141084861241*u0_B0(-1)*rhou0_B0(-1) - 0.121937153224065*u0_B0(2)*rhou0_B0(2))*invDelta0block0;

   }

   else{

       d1_p_dx = (-(2.0/3.0)*p_B0(-1) - (1.0/12.0)*p_B0(2) + ((1.0/12.0))*p_B0(-2) +
            ((2.0/3.0))*p_B0(1))*invDelta0block0;

       d1_pu0_dx = (-(2.0/3.0)*p_B0(-1)*u0_B0(-1) - (1.0/12.0)*p_B0(2)*u0_B0(2) + ((1.0/12.0))*p_B0(-2)*u0_B0(-2) +
            ((2.0/3.0))*p_B0(1)*u0_B0(1))*invDelta0block0;

       d1_rhoE_dx = (-(2.0/3.0)*rhoE_B0(-1) - (1.0/12.0)*rhoE_B0(2) + ((1.0/12.0))*rhoE_B0(-2) +
            ((2.0/3.0))*rhoE_B0(1))*invDelta0block0;

       d1_rhoEu0_dx = (-(2.0/3.0)*u0_B0(-1)*rhoE_B0(-1) - (1.0/12.0)*u0_B0(2)*rhoE_B0(2) +
            ((1.0/12.0))*u0_B0(-2)*rhoE_B0(-2) + ((2.0/3.0))*u0_B0(1)*rhoE_B0(1))*invDelta0block0;

       d1_rhoN2_dx = (-(2.0/3.0)*rhoN2_B0(-1) - (1.0/12.0)*rhoN2_B0(2) + ((1.0/12.0))*rhoN2_B0(-2) +
            ((2.0/3.0))*rhoN2_B0(1))*invDelta0block0;

       d1_rhoN2u0_dx = (-(2.0/3.0)*u0_B0(-1)*rhoN2_B0(-1) - (1.0/12.0)*u0_B0(2)*rhoN2_B0(2) +
            ((1.0/12.0))*u0_B0(-2)*rhoN2_B0(-2) + ((2.0/3.0))*u0_B0(1)*rhoN2_B0(1))*invDelta0block0;

       d1_rhoNO_dx = (-(2.0/3.0)*rhoNO_B0(-1) - (1.0/12.0)*rhoNO_B0(2) + ((1.0/12.0))*rhoNO_B0(-2) +
            ((2.0/3.0))*rhoNO_B0(1))*invDelta0block0;

       d1_rhoNOu0_dx = (-(2.0/3.0)*u0_B0(-1)*rhoNO_B0(-1) - (1.0/12.0)*u0_B0(2)*rhoNO_B0(2) +
            ((1.0/12.0))*u0_B0(-2)*rhoNO_B0(-2) + ((2.0/3.0))*u0_B0(1)*rhoNO_B0(1))*invDelta0block0;

       d1_rhoN_dx = (-(2.0/3.0)*rhoN_B0(-1) - (1.0/12.0)*rhoN_B0(2) + ((1.0/12.0))*rhoN_B0(-2) +
            ((2.0/3.0))*rhoN_B0(1))*invDelta0block0;

       d1_rhoNu0_dx = (-(2.0/3.0)*u0_B0(-1)*rhoN_B0(-1) - (1.0/12.0)*u0_B0(2)*rhoN_B0(2) +
            ((1.0/12.0))*u0_B0(-2)*rhoN_B0(-2) + ((2.0/3.0))*u0_B0(1)*rhoN_B0(1))*invDelta0block0;

       d1_rhoO2_dx = (-(2.0/3.0)*rhoO2_B0(-1) - (1.0/12.0)*rhoO2_B0(2) + ((1.0/12.0))*rhoO2_B0(-2) +
            ((2.0/3.0))*rhoO2_B0(1))*invDelta0block0;

       d1_rhoO2u0_dx = (-(2.0/3.0)*u0_B0(-1)*rhoO2_B0(-1) - (1.0/12.0)*u0_B0(2)*rhoO2_B0(2) +
            ((1.0/12.0))*u0_B0(-2)*rhoO2_B0(-2) + ((2.0/3.0))*u0_B0(1)*rhoO2_B0(1))*invDelta0block0;

       d1_rhoO_dx = (-(2.0/3.0)*rhoO_B0(-1) - (1.0/12.0)*rhoO_B0(2) + ((1.0/12.0))*rhoO_B0(-2) +
            ((2.0/3.0))*rhoO_B0(1))*invDelta0block0;

       d1_rhoOu0_dx = (-(2.0/3.0)*u0_B0(-1)*rhoO_B0(-1) - (1.0/12.0)*u0_B0(2)*rhoO_B0(2) +
            ((1.0/12.0))*u0_B0(-2)*rhoO_B0(-2) + ((2.0/3.0))*u0_B0(1)*rhoO_B0(1))*invDelta0block0;

       d1_rhoev_dx = (-(2.0/3.0)*rhoev_B0(-1) - (1.0/12.0)*rhoev_B0(2) + ((1.0/12.0))*rhoev_B0(-2) +
            ((2.0/3.0))*rhoev_B0(1))*invDelta0block0;

       d1_rhoevu0_dx = (-(2.0/3.0)*u0_B0(-1)*rhoev_B0(-1) - (1.0/12.0)*u0_B0(2)*rhoev_B0(2) +
            ((1.0/12.0))*u0_B0(-2)*rhoev_B0(-2) + ((2.0/3.0))*u0_B0(1)*rhoev_B0(1))*invDelta0block0;

       d1_rhou0_dx = (-(2.0/3.0)*rhou0_B0(-1) - (1.0/12.0)*rhou0_B0(2) + ((1.0/12.0))*rhou0_B0(-2) +
            ((2.0/3.0))*rhou0_B0(1))*invDelta0block0;

       d1_rhou0u0_dx = (-(2.0/3.0)*u0_B0(-1)*rhou0_B0(-1) - (1.0/12.0)*u0_B0(2)*rhou0_B0(2) +
            ((1.0/12.0))*u0_B0(-2)*rhou0_B0(-2) + ((2.0/3.0))*u0_B0(1)*rhou0_B0(1))*invDelta0block0;

   }

    Residual0_B0(0) = -(1.0/2.0)*d1_rhoOu0_dx - (1.0/2.0)*u0_B0(0)*d1_rhoO_dx - (1.0/2.0)*wk0_B0(0)*rhoO_B0(0) +
      wdotO_B0(0);

    Residual1_B0(0) = -(1.0/2.0)*d1_rhoO2u0_dx - (1.0/2.0)*u0_B0(0)*d1_rhoO2_dx - (1.0/2.0)*wk0_B0(0)*rhoO2_B0(0) +
      wdotO2_B0(0);

    Residual2_B0(0) = -(1.0/2.0)*d1_rhoNu0_dx - (1.0/2.0)*u0_B0(0)*d1_rhoN_dx - (1.0/2.0)*wk0_B0(0)*rhoN_B0(0) +
      wdotN_B0(0);

    Residual3_B0(0) = -(1.0/2.0)*d1_rhoN2u0_dx - (1.0/2.0)*u0_B0(0)*d1_rhoN2_dx - (1.0/2.0)*wk0_B0(0)*rhoN2_B0(0) +
      wdotN2_B0(0);

    Residual4_B0(0) = -(1.0/2.0)*d1_rhoNOu0_dx - (1.0/2.0)*u0_B0(0)*d1_rhoNO_dx - (1.0/2.0)*wk0_B0(0)*rhoNO_B0(0) +
      wdotNO_B0(0);

    Residual5_B0(0) = -d1_p_dx - (1.0/2.0)*d1_rhou0u0_dx - (1.0/2.0)*u0_B0(0)*d1_rhou0_dx -
      (1.0/2.0)*wk0_B0(0)*rhou0_B0(0);

    Residual6_B0(0) = -(1.0/2.0)*d1_rhoevu0_dx + evN2_B0(0)*wdotN2_B0(0) + evNO_B0(0)*wdotNO_B0(0) +
      evO2_B0(0)*wdotO2_B0(0) - (1.0/2.0)*u0_B0(0)*d1_rhoev_dx - (1.0/2.0)*wk0_B0(0)*rhoev_B0(0) +
      9.86923266716013e-5*(invMN2*rhoN2_B0(0)/ptauN2_B0(0) + invMNO*rhoNO_B0(0)/ptauNO_B0(0) +
      invMO2*rhoO2_B0(0)/ptauO2_B0(0))*(-rhoev_B0(0) + rhoN2_B0(0)*eveqN2_B0(0) + rhoNO_B0(0)*eveqNO_B0(0) +
      rhoO2_B0(0)*eveqO2_B0(0))*p_B0(0)/(invMN2*rhoN2_B0(0) + invMNO*rhoNO_B0(0) + invMO2*rhoO2_B0(0));

    Residual7_B0(0) = -d1_pu0_dx - (1.0/2.0)*d1_rhoEu0_dx - (1.0/2.0)*u0_B0(0)*d1_rhoE_dx -
      (1.0/2.0)*wk0_B0(0)*rhoE_B0(0);

}



__global__ void ops_opensbliblock00Kernel034(
double* __restrict arg0,
double* __restrict arg1,
double* __restrict arg2,
double* __restrict arg3,
double* __restrict arg4,
double* __restrict arg5,
double* __restrict arg6,
double* __restrict arg7,
double* __restrict arg8,
double* __restrict arg9,
double* __restrict arg10,
double* __restrict arg11,
double* __restrict arg12,
double* __restrict arg13,
double* __restrict arg14,
double* __restrict arg15,
double* __restrict arg16,
double* __restrict arg17,
double* __restrict arg18,
double* __restrict arg19,
double* __restrict arg20,
double* __restrict arg21,
double* __restrict arg22,
double* __restrict arg23,
double* __restrict arg24,
double* __restrict arg25,
double* __restrict arg26,
double* __restrict arg27,
double* __restrict arg28,
double* __restrict arg29,
double* __restrict arg30,
double* __restrict arg31,
double* __restrict arg32,
int arg_idx0,
int size0 ){


  int idx_x = blockDim.x * blockIdx.x + threadIdx.x;

  int arg_idx[1];
  arg_idx[0] = arg_idx0+idx_x;
  arg0 += idx_x * 1*1;
  arg1 += idx_x * 1*1;
  arg2 += idx_x * 1*1;
  arg3 += idx_x * 1*1;
  arg4 += idx_x * 1*1;
  arg5 += idx_x * 1*1;
  arg6 += idx_x * 1*1;
  arg7 += idx_x * 1*1;
  arg8 += idx_x * 1*1;
  arg9 += idx_x * 1*1;
  arg10 += idx_x * 1*1;
  arg11 += idx_x * 1*1;
  arg12 += idx_x * 1*1;
  arg13 += idx_x * 1*1;
  arg14 += idx_x * 1*1;
  arg15 += idx_x * 1*1;
  arg16 += idx_x * 1*1;
  arg17 += idx_x * 1*1;
  arg18 += idx_x * 1*1;
  arg19 += idx_x * 1*1;
  arg20 += idx_x * 1*1;
  arg21 += idx_x * 1*1;
  arg22 += idx_x * 1*1;
  arg23 += idx_x * 1*1;
  arg24 += idx_x * 1*1;
  arg25 += idx_x * 1*1;
  arg26 += idx_x * 1*1;
  arg27 += idx_x * 1*1;
  arg28 += idx_x * 1*1;
  arg29 += idx_x * 1*1;
  arg30 += idx_x * 1*1;
  arg31 += idx_x * 1*1;
  arg32 += idx_x * 1*1;

  if (idx_x < size0) {
    const ACC<double> argp0(arg0);
    const ACC<double> argp1(arg1);
    const ACC<double> argp2(arg2);
    const ACC<double> argp3(arg3);
    const ACC<double> argp4(arg4);
    const ACC<double> argp5(arg5);
    const ACC<double> argp6(arg6);
    const ACC<double> argp7(arg7);
    const ACC<double> argp8(arg8);
    const ACC<double> argp9(arg9);
    const ACC<double> argp10(arg10);
    const ACC<double> argp11(arg11);
    const ACC<double> argp12(arg12);
    const ACC<double> argp13(arg13);
    const ACC<double> argp14(arg14);
    const ACC<double> argp15(arg15);
    const ACC<double> argp16(arg16);
    const ACC<double> argp17(arg17);
    const ACC<double> argp18(arg18);
    const ACC<double> argp19(arg19);
    const ACC<double> argp20(arg20);
    const ACC<double> argp21(arg21);
    const ACC<double> argp22(arg22);
    const ACC<double> argp23(arg23);
    const ACC<double> argp24(arg24);
    ACC<double> argp25(arg25);
    ACC<double> argp26(arg26);
    ACC<double> argp27(arg27);
    ACC<double> argp28(arg28);
    ACC<double> argp29(arg29);
    ACC<double> argp30(arg30);
    ACC<double> argp31(arg31);
    ACC<double> argp32(arg32);
    opensbliblock00Kernel034_gpu(
     argp0, argp1, argp2, argp3, argp4,
     argp5, argp6, argp7, argp8, argp9,
     argp10, argp11, argp12, argp13, argp14,
     argp15, argp16, argp17, argp18, argp19,
     argp20, argp21, argp22, argp23, argp24,
     argp25, argp26, argp27, argp28, argp29,
     argp30, argp31, argp32, arg_idx);
  }

}

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel034(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11,
 ops_arg arg12, ops_arg arg13, ops_arg arg14, ops_arg arg15,
 ops_arg arg16, ops_arg arg17, ops_arg arg18, ops_arg arg19,
 ops_arg arg20, ops_arg arg21, ops_arg arg22, ops_arg arg23,
 ops_arg arg24, ops_arg arg25, ops_arg arg26, ops_arg arg27,
 ops_arg arg28, ops_arg arg29, ops_arg arg30, ops_arg arg31,
 ops_arg arg32, ops_arg arg33) {
#else
void ops_par_loop_opensbliblock00Kernel034_execute(ops_kernel_descriptor *desc) {
  int dim = desc->dim;
  #if OPS_MPI
  ops_block block = desc->block;
  #endif
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  ops_arg arg9 = desc->args[9];
  ops_arg arg10 = desc->args[10];
  ops_arg arg11 = desc->args[11];
  ops_arg arg12 = desc->args[12];
  ops_arg arg13 = desc->args[13];
  ops_arg arg14 = desc->args[14];
  ops_arg arg15 = desc->args[15];
  ops_arg arg16 = desc->args[16];
  ops_arg arg17 = desc->args[17];
  ops_arg arg18 = desc->args[18];
  ops_arg arg19 = desc->args[19];
  ops_arg arg20 = desc->args[20];
  ops_arg arg21 = desc->args[21];
  ops_arg arg22 = desc->args[22];
  ops_arg arg23 = desc->args[23];
  ops_arg arg24 = desc->args[24];
  ops_arg arg25 = desc->args[25];
  ops_arg arg26 = desc->args[26];
  ops_arg arg27 = desc->args[27];
  ops_arg arg28 = desc->args[28];
  ops_arg arg29 = desc->args[29];
  ops_arg arg30 = desc->args[30];
  ops_arg arg31 = desc->args[31];
  ops_arg arg32 = desc->args[32];
  ops_arg arg33 = desc->args[33];
  #endif

  //Timing
  double t1,t2,c1,c2;

  ops_arg args[34] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33};


  #if CHECKPOINTING && !OPS_LAZY
  if (!ops_checkpointing_before(args,34,range,25)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,25,"opensbliblock00Kernel034");
    block->instance->OPS_kernels[25].count++;
    ops_timers_core(&c1,&t1);
  }

  //compute locally allocated range for the sub-block
  int start[1];
  int end[1];

  int arg_idx[1];
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<1; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 34,block, range, start, end, arg_idx) < 0) return;
  #endif

  #if defined(OPS_MPI)
  #if defined(OPS_LAZY)
  sub_block_list sb = OPS_sub_block_list[block->index];
  arg_idx[0] = sb->decomp_disp[0]+start[0];
  #endif
  #else //OPS_MPI
  arg_idx[0] = start[0];
  #endif //OPS_MPI
  int xdim0 = args[0].dat->size[0];
  int xdim1 = args[1].dat->size[0];
  int xdim2 = args[2].dat->size[0];
  int xdim3 = args[3].dat->size[0];
  int xdim4 = args[4].dat->size[0];
  int xdim5 = args[5].dat->size[0];
  int xdim6 = args[6].dat->size[0];
  int xdim7 = args[7].dat->size[0];
  int xdim8 = args[8].dat->size[0];
  int xdim9 = args[9].dat->size[0];
  int xdim10 = args[10].dat->size[0];
  int xdim11 = args[11].dat->size[0];
  int xdim12 = args[12].dat->size[0];
  int xdim13 = args[13].dat->size[0];
  int xdim14 = args[14].dat->size[0];
  int xdim15 = args[15].dat->size[0];
  int xdim16 = args[16].dat->size[0];
  int xdim17 = args[17].dat->size[0];
  int xdim18 = args[18].dat->size[0];
  int xdim19 = args[19].dat->size[0];
  int xdim20 = args[20].dat->size[0];
  int xdim21 = args[21].dat->size[0];
  int xdim22 = args[22].dat->size[0];
  int xdim23 = args[23].dat->size[0];
  int xdim24 = args[24].dat->size[0];
  int xdim25 = args[25].dat->size[0];
  int xdim26 = args[26].dat->size[0];
  int xdim27 = args[27].dat->size[0];
  int xdim28 = args[28].dat->size[0];
  int xdim29 = args[29].dat->size[0];
  int xdim30 = args[30].dat->size[0];
  int xdim31 = args[31].dat->size[0];
  int xdim32 = args[32].dat->size[0];

  if (xdim0 != dims_opensbliblock00Kernel034_h[0][0] || xdim1 != dims_opensbliblock00Kernel034_h[1][0] || xdim2 != dims_opensbliblock00Kernel034_h[2][0] || xdim3 != dims_opensbliblock00Kernel034_h[3][0] || xdim4 != dims_opensbliblock00Kernel034_h[4][0] || xdim5 != dims_opensbliblock00Kernel034_h[5][0] || xdim6 != dims_opensbliblock00Kernel034_h[6][0] || xdim7 != dims_opensbliblock00Kernel034_h[7][0] || xdim8 != dims_opensbliblock00Kernel034_h[8][0] || xdim9 != dims_opensbliblock00Kernel034_h[9][0] || xdim10 != dims_opensbliblock00Kernel034_h[10][0] || xdim11 != dims_opensbliblock00Kernel034_h[11][0] || xdim12 != dims_opensbliblock00Kernel034_h[12][0] || xdim13 != dims_opensbliblock00Kernel034_h[13][0] || xdim14 != dims_opensbliblock00Kernel034_h[14][0] || xdim15 != dims_opensbliblock00Kernel034_h[15][0] || xdim16 != dims_opensbliblock00Kernel034_h[16][0] || xdim17 != dims_opensbliblock00Kernel034_h[17][0] || xdim18 != dims_opensbliblock00Kernel034_h[18][0] || xdim19 != dims_opensbliblock00Kernel034_h[19][0] || xdim20 != dims_opensbliblock00Kernel034_h[20][0] || xdim21 != dims_opensbliblock00Kernel034_h[21][0] || xdim22 != dims_opensbliblock00Kernel034_h[22][0] || xdim23 != dims_opensbliblock00Kernel034_h[23][0] || xdim24 != dims_opensbliblock00Kernel034_h[24][0] || xdim25 != dims_opensbliblock00Kernel034_h[25][0] || xdim26 != dims_opensbliblock00Kernel034_h[26][0] || xdim27 != dims_opensbliblock00Kernel034_h[27][0] || xdim28 != dims_opensbliblock00Kernel034_h[28][0] || xdim29 != dims_opensbliblock00Kernel034_h[29][0] || xdim30 != dims_opensbliblock00Kernel034_h[30][0] || xdim31 != dims_opensbliblock00Kernel034_h[31][0] || xdim32 != dims_opensbliblock00Kernel034_h[32][0]) {
    dims_opensbliblock00Kernel034_h[0][0] = xdim0;
    dims_opensbliblock00Kernel034_h[1][0] = xdim1;
    dims_opensbliblock00Kernel034_h[2][0] = xdim2;
    dims_opensbliblock00Kernel034_h[3][0] = xdim3;
    dims_opensbliblock00Kernel034_h[4][0] = xdim4;
    dims_opensbliblock00Kernel034_h[5][0] = xdim5;
    dims_opensbliblock00Kernel034_h[6][0] = xdim6;
    dims_opensbliblock00Kernel034_h[7][0] = xdim7;
    dims_opensbliblock00Kernel034_h[8][0] = xdim8;
    dims_opensbliblock00Kernel034_h[9][0] = xdim9;
    dims_opensbliblock00Kernel034_h[10][0] = xdim10;
    dims_opensbliblock00Kernel034_h[11][0] = xdim11;
    dims_opensbliblock00Kernel034_h[12][0] = xdim12;
    dims_opensbliblock00Kernel034_h[13][0] = xdim13;
    dims_opensbliblock00Kernel034_h[14][0] = xdim14;
    dims_opensbliblock00Kernel034_h[15][0] = xdim15;
    dims_opensbliblock00Kernel034_h[16][0] = xdim16;
    dims_opensbliblock00Kernel034_h[17][0] = xdim17;
    dims_opensbliblock00Kernel034_h[18][0] = xdim18;
    dims_opensbliblock00Kernel034_h[19][0] = xdim19;
    dims_opensbliblock00Kernel034_h[20][0] = xdim20;
    dims_opensbliblock00Kernel034_h[21][0] = xdim21;
    dims_opensbliblock00Kernel034_h[22][0] = xdim22;
    dims_opensbliblock00Kernel034_h[23][0] = xdim23;
    dims_opensbliblock00Kernel034_h[24][0] = xdim24;
    dims_opensbliblock00Kernel034_h[25][0] = xdim25;
    dims_opensbliblock00Kernel034_h[26][0] = xdim26;
    dims_opensbliblock00Kernel034_h[27][0] = xdim27;
    dims_opensbliblock00Kernel034_h[28][0] = xdim28;
    dims_opensbliblock00Kernel034_h[29][0] = xdim29;
    dims_opensbliblock00Kernel034_h[30][0] = xdim30;
    dims_opensbliblock00Kernel034_h[31][0] = xdim31;
    dims_opensbliblock00Kernel034_h[32][0] = xdim32;
    hipSafeCall(block->instance->ostream(), hipMemcpyToSymbol( dims_opensbliblock00Kernel034, dims_opensbliblock00Kernel034_h, sizeof(dims_opensbliblock00Kernel034)));
  }



  int x_size = MAX(0,end[0]-start[0]);

  dim3 grid( (x_size-1)/block->instance->OPS_block_size_x+ 1, 1, 1);
  dim3 tblock(block->instance->OPS_block_size_x,1,1);



  long long int dat0 = (block->instance->OPS_soa ? args[0].dat->type_size : args[0].dat->elem_size);
  long long int dat1 = (block->instance->OPS_soa ? args[1].dat->type_size : args[1].dat->elem_size);
  long long int dat2 = (block->instance->OPS_soa ? args[2].dat->type_size : args[2].dat->elem_size);
  long long int dat3 = (block->instance->OPS_soa ? args[3].dat->type_size : args[3].dat->elem_size);
  long long int dat4 = (block->instance->OPS_soa ? args[4].dat->type_size : args[4].dat->elem_size);
  long long int dat5 = (block->instance->OPS_soa ? args[5].dat->type_size : args[5].dat->elem_size);
  long long int dat6 = (block->instance->OPS_soa ? args[6].dat->type_size : args[6].dat->elem_size);
  long long int dat7 = (block->instance->OPS_soa ? args[7].dat->type_size : args[7].dat->elem_size);
  long long int dat8 = (block->instance->OPS_soa ? args[8].dat->type_size : args[8].dat->elem_size);
  long long int dat9 = (block->instance->OPS_soa ? args[9].dat->type_size : args[9].dat->elem_size);
  long long int dat10 = (block->instance->OPS_soa ? args[10].dat->type_size : args[10].dat->elem_size);
  long long int dat11 = (block->instance->OPS_soa ? args[11].dat->type_size : args[11].dat->elem_size);
  long long int dat12 = (block->instance->OPS_soa ? args[12].dat->type_size : args[12].dat->elem_size);
  long long int dat13 = (block->instance->OPS_soa ? args[13].dat->type_size : args[13].dat->elem_size);
  long long int dat14 = (block->instance->OPS_soa ? args[14].dat->type_size : args[14].dat->elem_size);
  long long int dat15 = (block->instance->OPS_soa ? args[15].dat->type_size : args[15].dat->elem_size);
  long long int dat16 = (block->instance->OPS_soa ? args[16].dat->type_size : args[16].dat->elem_size);
  long long int dat17 = (block->instance->OPS_soa ? args[17].dat->type_size : args[17].dat->elem_size);
  long long int dat18 = (block->instance->OPS_soa ? args[18].dat->type_size : args[18].dat->elem_size);
  long long int dat19 = (block->instance->OPS_soa ? args[19].dat->type_size : args[19].dat->elem_size);
  long long int dat20 = (block->instance->OPS_soa ? args[20].dat->type_size : args[20].dat->elem_size);
  long long int dat21 = (block->instance->OPS_soa ? args[21].dat->type_size : args[21].dat->elem_size);
  long long int dat22 = (block->instance->OPS_soa ? args[22].dat->type_size : args[22].dat->elem_size);
  long long int dat23 = (block->instance->OPS_soa ? args[23].dat->type_size : args[23].dat->elem_size);
  long long int dat24 = (block->instance->OPS_soa ? args[24].dat->type_size : args[24].dat->elem_size);
  long long int dat25 = (block->instance->OPS_soa ? args[25].dat->type_size : args[25].dat->elem_size);
  long long int dat26 = (block->instance->OPS_soa ? args[26].dat->type_size : args[26].dat->elem_size);
  long long int dat27 = (block->instance->OPS_soa ? args[27].dat->type_size : args[27].dat->elem_size);
  long long int dat28 = (block->instance->OPS_soa ? args[28].dat->type_size : args[28].dat->elem_size);
  long long int dat29 = (block->instance->OPS_soa ? args[29].dat->type_size : args[29].dat->elem_size);
  long long int dat30 = (block->instance->OPS_soa ? args[30].dat->type_size : args[30].dat->elem_size);
  long long int dat31 = (block->instance->OPS_soa ? args[31].dat->type_size : args[31].dat->elem_size);
  long long int dat32 = (block->instance->OPS_soa ? args[32].dat->type_size : args[32].dat->elem_size);

  char *p_a[34];

  //set up initial pointers
  long long int base0 = args[0].dat->base_offset + 
           dat0 * 1 * (start[0] * args[0].stencil->stride[0]);
  p_a[0] = (char *)args[0].data_d + base0;

  long long int base1 = args[1].dat->base_offset + 
           dat1 * 1 * (start[0] * args[1].stencil->stride[0]);
  p_a[1] = (char *)args[1].data_d + base1;

  long long int base2 = args[2].dat->base_offset + 
           dat2 * 1 * (start[0] * args[2].stencil->stride[0]);
  p_a[2] = (char *)args[2].data_d + base2;

  long long int base3 = args[3].dat->base_offset + 
           dat3 * 1 * (start[0] * args[3].stencil->stride[0]);
  p_a[3] = (char *)args[3].data_d + base3;

  long long int base4 = args[4].dat->base_offset + 
           dat4 * 1 * (start[0] * args[4].stencil->stride[0]);
  p_a[4] = (char *)args[4].data_d + base4;

  long long int base5 = args[5].dat->base_offset + 
           dat5 * 1 * (start[0] * args[5].stencil->stride[0]);
  p_a[5] = (char *)args[5].data_d + base5;

  long long int base6 = args[6].dat->base_offset + 
           dat6 * 1 * (start[0] * args[6].stencil->stride[0]);
  p_a[6] = (char *)args[6].data_d + base6;

  long long int base7 = args[7].dat->base_offset + 
           dat7 * 1 * (start[0] * args[7].stencil->stride[0]);
  p_a[7] = (char *)args[7].data_d + base7;

  long long int base8 = args[8].dat->base_offset + 
           dat8 * 1 * (start[0] * args[8].stencil->stride[0]);
  p_a[8] = (char *)args[8].data_d + base8;

  long long int base9 = args[9].dat->base_offset + 
           dat9 * 1 * (start[0] * args[9].stencil->stride[0]);
  p_a[9] = (char *)args[9].data_d + base9;

  long long int base10 = args[10].dat->base_offset + 
           dat10 * 1 * (start[0] * args[10].stencil->stride[0]);
  p_a[10] = (char *)args[10].data_d + base10;

  long long int base11 = args[11].dat->base_offset + 
           dat11 * 1 * (start[0] * args[11].stencil->stride[0]);
  p_a[11] = (char *)args[11].data_d + base11;

  long long int base12 = args[12].dat->base_offset + 
           dat12 * 1 * (start[0] * args[12].stencil->stride[0]);
  p_a[12] = (char *)args[12].data_d + base12;

  long long int base13 = args[13].dat->base_offset + 
           dat13 * 1 * (start[0] * args[13].stencil->stride[0]);
  p_a[13] = (char *)args[13].data_d + base13;

  long long int base14 = args[14].dat->base_offset + 
           dat14 * 1 * (start[0] * args[14].stencil->stride[0]);
  p_a[14] = (char *)args[14].data_d + base14;

  long long int base15 = args[15].dat->base_offset + 
           dat15 * 1 * (start[0] * args[15].stencil->stride[0]);
  p_a[15] = (char *)args[15].data_d + base15;

  long long int base16 = args[16].dat->base_offset + 
           dat16 * 1 * (start[0] * args[16].stencil->stride[0]);
  p_a[16] = (char *)args[16].data_d + base16;

  long long int base17 = args[17].dat->base_offset + 
           dat17 * 1 * (start[0] * args[17].stencil->stride[0]);
  p_a[17] = (char *)args[17].data_d + base17;

  long long int base18 = args[18].dat->base_offset + 
           dat18 * 1 * (start[0] * args[18].stencil->stride[0]);
  p_a[18] = (char *)args[18].data_d + base18;

  long long int base19 = args[19].dat->base_offset + 
           dat19 * 1 * (start[0] * args[19].stencil->stride[0]);
  p_a[19] = (char *)args[19].data_d + base19;

  long long int base20 = args[20].dat->base_offset + 
           dat20 * 1 * (start[0] * args[20].stencil->stride[0]);
  p_a[20] = (char *)args[20].data_d + base20;

  long long int base21 = args[21].dat->base_offset + 
           dat21 * 1 * (start[0] * args[21].stencil->stride[0]);
  p_a[21] = (char *)args[21].data_d + base21;

  long long int base22 = args[22].dat->base_offset + 
           dat22 * 1 * (start[0] * args[22].stencil->stride[0]);
  p_a[22] = (char *)args[22].data_d + base22;

  long long int base23 = args[23].dat->base_offset + 
           dat23 * 1 * (start[0] * args[23].stencil->stride[0]);
  p_a[23] = (char *)args[23].data_d + base23;

  long long int base24 = args[24].dat->base_offset + 
           dat24 * 1 * (start[0] * args[24].stencil->stride[0]);
  p_a[24] = (char *)args[24].data_d + base24;

  long long int base25 = args[25].dat->base_offset + 
           dat25 * 1 * (start[0] * args[25].stencil->stride[0]);
  p_a[25] = (char *)args[25].data_d + base25;

  long long int base26 = args[26].dat->base_offset + 
           dat26 * 1 * (start[0] * args[26].stencil->stride[0]);
  p_a[26] = (char *)args[26].data_d + base26;

  long long int base27 = args[27].dat->base_offset + 
           dat27 * 1 * (start[0] * args[27].stencil->stride[0]);
  p_a[27] = (char *)args[27].data_d + base27;

  long long int base28 = args[28].dat->base_offset + 
           dat28 * 1 * (start[0] * args[28].stencil->stride[0]);
  p_a[28] = (char *)args[28].data_d + base28;

  long long int base29 = args[29].dat->base_offset + 
           dat29 * 1 * (start[0] * args[29].stencil->stride[0]);
  p_a[29] = (char *)args[29].data_d + base29;

  long long int base30 = args[30].dat->base_offset + 
           dat30 * 1 * (start[0] * args[30].stencil->stride[0]);
  p_a[30] = (char *)args[30].data_d + base30;

  long long int base31 = args[31].dat->base_offset + 
           dat31 * 1 * (start[0] * args[31].stencil->stride[0]);
  p_a[31] = (char *)args[31].data_d + base31;

  long long int base32 = args[32].dat->base_offset + 
           dat32 * 1 * (start[0] * args[32].stencil->stride[0]);
  p_a[32] = (char *)args[32].data_d + base32;


  #ifndef OPS_LAZY
  ops_H_D_exchanges_device(args, 34);
  ops_halo_exchanges(args,34,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[25].mpi_time += t2-t1;
  }


  //call kernel wrapper function, passing in pointers to data
  if (x_size > 0)
    ops_opensbliblock00Kernel034<<<grid, tblock >>> ( 
     (double *)p_a[0], (double *)p_a[1],
     (double *)p_a[2], (double *)p_a[3],
     (double *)p_a[4], (double *)p_a[5],
     (double *)p_a[6], (double *)p_a[7],
     (double *)p_a[8], (double *)p_a[9],
     (double *)p_a[10], (double *)p_a[11],
     (double *)p_a[12], (double *)p_a[13],
     (double *)p_a[14], (double *)p_a[15],
     (double *)p_a[16], (double *)p_a[17],
     (double *)p_a[18], (double *)p_a[19],
     (double *)p_a[20], (double *)p_a[21],
     (double *)p_a[22], (double *)p_a[23],
     (double *)p_a[24], (double *)p_a[25],
     (double *)p_a[26], (double *)p_a[27],
     (double *)p_a[28], (double *)p_a[29],
     (double *)p_a[30], (double *)p_a[31],
     (double *)p_a[32], arg_idx[0],
    x_size);

  hipSafeCall(block->instance->ostream(), hipGetLastError());

  if (block->instance->OPS_diags>1) {
    hipSafeCall(block->instance->ostream(), hipDeviceSynchronize());
    ops_timers_core(&c1,&t1);
    block->instance->OPS_kernels[25].time += t1-t2;
  }

  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 34);
  ops_set_halo_dirtybit3(&args[25],range);
  ops_set_halo_dirtybit3(&args[26],range);
  ops_set_halo_dirtybit3(&args[27],range);
  ops_set_halo_dirtybit3(&args[28],range);
  ops_set_halo_dirtybit3(&args[29],range);
  ops_set_halo_dirtybit3(&args[30],range);
  ops_set_halo_dirtybit3(&args[31],range);
  ops_set_halo_dirtybit3(&args[32],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[25].mpi_time += t2-t1;
    block->instance->OPS_kernels[25].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[25].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[25].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[25].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[25].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[25].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[25].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[25].transfer += ops_compute_transfer(dim, start, end, &arg7);
    block->instance->OPS_kernels[25].transfer += ops_compute_transfer(dim, start, end, &arg8);
    block->instance->OPS_kernels[25].transfer += ops_compute_transfer(dim, start, end, &arg9);
    block->instance->OPS_kernels[25].transfer += ops_compute_transfer(dim, start, end, &arg10);
    block->instance->OPS_kernels[25].transfer += ops_compute_transfer(dim, start, end, &arg11);
    block->instance->OPS_kernels[25].transfer += ops_compute_transfer(dim, start, end, &arg12);
    block->instance->OPS_kernels[25].transfer += ops_compute_transfer(dim, start, end, &arg13);
    block->instance->OPS_kernels[25].transfer += ops_compute_transfer(dim, start, end, &arg14);
    block->instance->OPS_kernels[25].transfer += ops_compute_transfer(dim, start, end, &arg15);
    block->instance->OPS_kernels[25].transfer += ops_compute_transfer(dim, start, end, &arg16);
    block->instance->OPS_kernels[25].transfer += ops_compute_transfer(dim, start, end, &arg17);
    block->instance->OPS_kernels[25].transfer += ops_compute_transfer(dim, start, end, &arg18);
    block->instance->OPS_kernels[25].transfer += ops_compute_transfer(dim, start, end, &arg19);
    block->instance->OPS_kernels[25].transfer += ops_compute_transfer(dim, start, end, &arg20);
    block->instance->OPS_kernels[25].transfer += ops_compute_transfer(dim, start, end, &arg21);
    block->instance->OPS_kernels[25].transfer += ops_compute_transfer(dim, start, end, &arg22);
    block->instance->OPS_kernels[25].transfer += ops_compute_transfer(dim, start, end, &arg23);
    block->instance->OPS_kernels[25].transfer += ops_compute_transfer(dim, start, end, &arg24);
    block->instance->OPS_kernels[25].transfer += ops_compute_transfer(dim, start, end, &arg25);
    block->instance->OPS_kernels[25].transfer += ops_compute_transfer(dim, start, end, &arg26);
    block->instance->OPS_kernels[25].transfer += ops_compute_transfer(dim, start, end, &arg27);
    block->instance->OPS_kernels[25].transfer += ops_compute_transfer(dim, start, end, &arg28);
    block->instance->OPS_kernels[25].transfer += ops_compute_transfer(dim, start, end, &arg29);
    block->instance->OPS_kernels[25].transfer += ops_compute_transfer(dim, start, end, &arg30);
    block->instance->OPS_kernels[25].transfer += ops_compute_transfer(dim, start, end, &arg31);
    block->instance->OPS_kernels[25].transfer += ops_compute_transfer(dim, start, end, &arg32);
  }
}

#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel034(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11,
 ops_arg arg12, ops_arg arg13, ops_arg arg14, ops_arg arg15,
 ops_arg arg16, ops_arg arg17, ops_arg arg18, ops_arg arg19,
 ops_arg arg20, ops_arg arg21, ops_arg arg22, ops_arg arg23,
 ops_arg arg24, ops_arg arg25, ops_arg arg26, ops_arg arg27,
 ops_arg arg28, ops_arg arg29, ops_arg arg30, ops_arg arg31,
 ops_arg arg32, ops_arg arg33) {
  ops_arg args[34] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33 };

  //create kernel descriptor and pass it to ops_enqueue_kernel
  create_kerneldesc_and_enque(name, args, 34, 25, dim, 1, range, block, ops_par_loop_opensbliblock00Kernel034_execute);
}
#endif
