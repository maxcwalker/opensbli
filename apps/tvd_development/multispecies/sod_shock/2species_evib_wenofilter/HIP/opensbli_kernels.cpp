//
// auto-generated by ops.py
//
//header
#define OPS_API 2
#define OPS_1D
#include "ops_lib_core.h"

#include "ops_hip_rt_support.h"
#include "ops_hip_reduction.h"


#ifdef OPS_MPI
#include "ops_mpi_core.h"
#endif
// global constants
__constant__ double Delta0block0;
__constant__ int HDF5_timing;
__constant__ double Lref;
__constant__ double MN;
__constant__ double MN2;
__constant__ double Rhat;
__constant__ double Tref;
__constant__ int block0np0;
__constant__ double cN;
__constant__ double cN2;
__constant__ double dt;
__constant__ double gama;
__constant__ double gamma_m1;
__constant__ double inv2Delta0block0;
__constant__ double inv2gamma_m1;
__constant__ double inv2uref;
__constant__ double invDelta0block0;
__constant__ double invMN;
__constant__ double invMN2;
__constant__ double invRhat;
__constant__ double invTref;
__constant__ double inv_rfact0_block0;
__constant__ double invgama;
__constant__ double invgamma_m1;
__constant__ double invuref;
__constant__ double kappa;
__constant__ int niter;
__constant__ double shock_filter_control;
__constant__ double simulation_time;
__constant__ int start_iter;
__constant__ double thetavN2;
__constant__ double uref;

void ops_init_backend() {}

void ops_decl_const_char(OPS_instance *instance, int dim, char const *type,
int size, char *dat, char const *name){
  ops_execute(instance);
  if (!strcmp(name,"Delta0block0")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(Delta0block0), dat, dim*size));
  }
  else
  if (!strcmp(name,"HDF5_timing")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(HDF5_timing), dat, dim*size));
  }
  else
  if (!strcmp(name,"Lref")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(Lref), dat, dim*size));
  }
  else
  if (!strcmp(name,"MN")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(MN), dat, dim*size));
  }
  else
  if (!strcmp(name,"MN2")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(MN2), dat, dim*size));
  }
  else
  if (!strcmp(name,"Rhat")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(Rhat), dat, dim*size));
  }
  else
  if (!strcmp(name,"Tref")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(Tref), dat, dim*size));
  }
  else
  if (!strcmp(name,"block0np0")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(block0np0), dat, dim*size));
  }
  else
  if (!strcmp(name,"cN")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(cN), dat, dim*size));
  }
  else
  if (!strcmp(name,"cN2")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(cN2), dat, dim*size));
  }
  else
  if (!strcmp(name,"dt")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(dt), dat, dim*size));
  }
  else
  if (!strcmp(name,"gama")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(gama), dat, dim*size));
  }
  else
  if (!strcmp(name,"gamma_m1")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(gamma_m1), dat, dim*size));
  }
  else
  if (!strcmp(name,"inv2Delta0block0")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(inv2Delta0block0), dat, dim*size));
  }
  else
  if (!strcmp(name,"inv2gamma_m1")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(inv2gamma_m1), dat, dim*size));
  }
  else
  if (!strcmp(name,"inv2uref")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(inv2uref), dat, dim*size));
  }
  else
  if (!strcmp(name,"invDelta0block0")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(invDelta0block0), dat, dim*size));
  }
  else
  if (!strcmp(name,"invMN")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(invMN), dat, dim*size));
  }
  else
  if (!strcmp(name,"invMN2")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(invMN2), dat, dim*size));
  }
  else
  if (!strcmp(name,"invRhat")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(invRhat), dat, dim*size));
  }
  else
  if (!strcmp(name,"invTref")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(invTref), dat, dim*size));
  }
  else
  if (!strcmp(name,"inv_rfact0_block0")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(inv_rfact0_block0), dat, dim*size));
  }
  else
  if (!strcmp(name,"invgama")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(invgama), dat, dim*size));
  }
  else
  if (!strcmp(name,"invgamma_m1")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(invgamma_m1), dat, dim*size));
  }
  else
  if (!strcmp(name,"invuref")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(invuref), dat, dim*size));
  }
  else
  if (!strcmp(name,"kappa")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(kappa), dat, dim*size));
  }
  else
  if (!strcmp(name,"niter")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(niter), dat, dim*size));
  }
  else
  if (!strcmp(name,"shock_filter_control")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(shock_filter_control), dat, dim*size));
  }
  else
  if (!strcmp(name,"simulation_time")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(simulation_time), dat, dim*size));
  }
  else
  if (!strcmp(name,"start_iter")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(start_iter), dat, dim*size));
  }
  else
  if (!strcmp(name,"thetavN2")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(thetavN2), dat, dim*size));
  }
  else
  if (!strcmp(name,"uref")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(uref), dat, dim*size));
  }
  else
  {
    throw OPSException(OPS_RUNTIME_ERROR, "error: unknown const name");
  }
}


//user kernel files
#include "opensbliblock00Kernel021_hip_kernel.cpp"
#include "opensbliblock00Kernel019_hip_kernel.cpp"
#include "opensbliblock00Kernel020_hip_kernel.cpp"
#include "opensbliblock00Kernel009_hip_kernel.cpp"
#include "opensbliblock00Kernel011_hip_kernel.cpp"
#include "opensbliblock00Kernel008_hip_kernel.cpp"
#include "opensbliblock00Kernel017_hip_kernel.cpp"
#include "opensbliblock00Kernel018_hip_kernel.cpp"
#include "opensbliblock00Kernel006_hip_kernel.cpp"
#include "opensbliblock00Kernel016_hip_kernel.cpp"
#include "opensbliblock00Kernel022_hip_kernel.cpp"
#include "opensbliblock00Kernel002_hip_kernel.cpp"
#include "opensbliblock00Kernel003_hip_kernel.cpp"
#include "opensbliblock00Kernel004_hip_kernel.cpp"
#include "opensbliblock00Kernel005_hip_kernel.cpp"
