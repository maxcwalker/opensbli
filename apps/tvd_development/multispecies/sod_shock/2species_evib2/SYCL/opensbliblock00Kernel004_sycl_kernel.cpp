//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel004(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11,
 ops_arg arg12) {
#else
void ops_par_loop_opensbliblock00Kernel004_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  ops_arg arg9 = desc->args[9];
  ops_arg arg10 = desc->args[10];
  ops_arg arg11 = desc->args[11];
  ops_arg arg12 = desc->args[12];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[13] = { arg0, arg1, arg2, arg3, arg4,
 arg5, arg6, arg7, arg8, arg9,
 arg10, arg11, arg12};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,13,range,13)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,13,"opensbliblock00Kernel004");
    block->instance->OPS_kernels[13].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "opensbliblock00Kernel004");
  #endif


  //compute locally allocated range for the sub-block
  int start[1];
  int end[1];
  #if defined(OPS_MPI) && !defined(OPS_LAZY)
  int arg_idx[1];
  #endif
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<1; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 13,block, range, start, end, arg_idx) < 0) return;
  #endif


  //initialize global variable with the dimension of dats

  //set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset/sizeof(double);
  double* a_B0_p = (double*)args[0].data_d;

  int base1 = args[1].dat->base_offset/sizeof(double);
  double* ev_B0_p = (double*)args[1].data_d;

  int base2 = args[2].dat->base_offset/sizeof(double);
  double* rhoE_B0_p = (double*)args[2].data_d;

  int base3 = args[3].dat->base_offset/sizeof(double);
  double* rhoN2_B0_p = (double*)args[3].data_d;

  int base4 = args[4].dat->base_offset/sizeof(double);
  double* rhoN_B0_p = (double*)args[4].data_d;

  int base5 = args[5].dat->base_offset/sizeof(double);
  double* rhoev_B0_p = (double*)args[5].data_d;

  int base6 = args[6].dat->base_offset/sizeof(double);
  double* rhou0_B0_p = (double*)args[6].data_d;

  int base7 = args[7].dat->base_offset/sizeof(double);
  double* u0_B0_p = (double*)args[7].data_d;

  int base8 = args[8].dat->base_offset/sizeof(double);
  double* wk0_B0_p = (double*)args[8].data_d;

  int base9 = args[9].dat->base_offset/sizeof(double);
  double* wk1_B0_p = (double*)args[9].data_d;

  int base10 = args[10].dat->base_offset/sizeof(double);
  double* wk2_B0_p = (double*)args[10].data_d;

  int base11 = args[11].dat->base_offset/sizeof(double);
  double* wk3_B0_p = (double*)args[11].data_d;

  int base12 = args[12].dat->base_offset/sizeof(double);
  double* wk4_B0_p = (double*)args[12].data_d;



  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_device(args, 13);
  ops_halo_exchanges(args,13,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[13].mpi_time += __t1-__t2;
  }

  int start_0 = start[0];
  int end_0 = end[0];
  if ((end[0]-start[0])>0) {
    block->instance->sycl_instance->queue->submit([&](cl::sycl::handler &cgh) {

      auto delta_TVD_sycl = (*delta_TVD_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto eps_TVD_sycl = (*eps_TVD_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto gama_sycl = (*gama_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto gamma_m1_sycl = (*gamma_m1_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto invdelta_TVD_sycl = (*invdelta_TVD_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto invgamma_m1_sycl = (*invgamma_m1_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto kappa_TVD_sycl = (*kappa_TVD_p).template get_access<cl::sycl::access::mode::read>(cgh);

      cgh.parallel_for<class opensbliblock00Kernel004_kernel>(cl::sycl::nd_range<1>(cl::sycl::range<1>(
            ((end[0]-start[0]-1)/block->instance->OPS_block_size_x+1)*block->instance->OPS_block_size_x
             ),cl::sycl::range<1>(
      block->instance->OPS_block_size_x
             ))
      , [=](cl::sycl::nd_item<1> item
      ) [[intel::kernel_args_restrict]] {
        int n_x = item.get_global_id(0)+start_0;
        const ACC<double> a_B0(&a_B0_p[0] + base0 + n_x*1);
        const ACC<double> ev_B0(&ev_B0_p[0] + base1 + n_x*1);
        const ACC<double> rhoE_B0(&rhoE_B0_p[0] + base2 + n_x*1);
        const ACC<double> rhoN2_B0(&rhoN2_B0_p[0] + base3 + n_x*1);
        const ACC<double> rhoN_B0(&rhoN_B0_p[0] + base4 + n_x*1);
        const ACC<double> rhoev_B0(&rhoev_B0_p[0] + base5 + n_x*1);
        const ACC<double> rhou0_B0(&rhou0_B0_p[0] + base6 + n_x*1);
        const ACC<double> u0_B0(&u0_B0_p[0] + base7 + n_x*1);
        ACC<double> wk0_B0(&wk0_B0_p[0] + base8 + n_x*1);
        ACC<double> wk1_B0(&wk1_B0_p[0] + base9 + n_x*1);
        ACC<double> wk2_B0(&wk2_B0_p[0] + base10 + n_x*1);
        ACC<double> wk3_B0(&wk3_B0_p[0] + base11 + n_x*1);
        ACC<double> wk4_B0(&wk4_B0_p[0] + base12 + n_x*1);
        //USER CODE
        if (n_x < end_0) {
          
   double AVG_0_0_LEV_00 = 0.0;
   double AVG_0_0_LEV_01 = 0.0;
   double AVG_0_0_LEV_02 = 0.0;
   double AVG_0_0_LEV_04 = 0.0;
   double AVG_0_0_LEV_10 = 0.0;
   double AVG_0_0_LEV_11 = 0.0;
   double AVG_0_0_LEV_12 = 0.0;
   double AVG_0_0_LEV_13 = 0.0;
   double AVG_0_0_LEV_14 = 0.0;
   double AVG_0_0_LEV_20 = 0.0;
   double AVG_0_0_LEV_21 = 0.0;
   double AVG_0_0_LEV_22 = 0.0;
   double AVG_0_0_LEV_24 = 0.0;
   double AVG_0_0_LEV_30 = 0.0;
   double AVG_0_0_LEV_31 = 0.0;
   double AVG_0_0_LEV_32 = 0.0;
   double AVG_0_0_LEV_34 = 0.0;
   double AVG_0_0_LEV_40 = 0.0;
   double AVG_0_0_LEV_41 = 0.0;
   double AVG_0_0_LEV_42 = 0.0;
   double AVG_0_0_LEV_44 = 0.0;
   double AVG_0_REV_00 = 0.0;
   double AVG_0_REV_02 = 0.0;
   double AVG_0_REV_03 = 0.0;
   double AVG_0_REV_04 = 0.0;
   double AVG_0_REV_10 = 0.0;
   double AVG_0_REV_13 = 0.0;
   double AVG_0_REV_14 = 0.0;
   double AVG_0_REV_22 = 0.0;
   double AVG_0_REV_23 = 0.0;
   double AVG_0_REV_24 = 0.0;
   double AVG_0_REV_31 = 0.0;
   double AVG_0_REV_33 = 0.0;
   double AVG_0_REV_34 = 0.0;
   double AVG_0_REV_42 = 0.0;
   double AVG_0_REV_43 = 0.0;
   double AVG_0_REV_44 = 0.0;
   double AVG_0_a = 0.0;
   double AVG_0_ev = 0.0;
   double AVG_0_rho = 0.0;
   double AVG_0_rhoN = 0.0;
   double AVG_0_rhoN2 = 0.0;
   double AVG_0_u0 = 0.0;
   double S = 0.0;
   double alpha_00 = 0.0;
   double alpha_01 = 0.0;
   double alpha_02 = 0.0;
   double alpha_10 = 0.0;
   double alpha_11 = 0.0;
   double alpha_12 = 0.0;
   double alpha_20 = 0.0;
   double alpha_21 = 0.0;
   double alpha_22 = 0.0;
   double alpha_30 = 0.0;
   double alpha_31 = 0.0;
   double alpha_32 = 0.0;
   double alpha_40 = 0.0;
   double alpha_41 = 0.0;
   double alpha_42 = 0.0;
   double g_00 = 0.0;
   double g_01 = 0.0;
   double g_10 = 0.0;
   double g_11 = 0.0;
   double g_20 = 0.0;
   double g_21 = 0.0;
   double g_30 = 0.0;
   double g_31 = 0.0;
   double g_40 = 0.0;
   double g_41 = 0.0;
   double gamma_0 = 0.0;
   double gamma_1 = 0.0;
   double gamma_2 = 0.0;
   double gamma_3 = 0.0;
   double gamma_4 = 0.0;
   double inv_AVG_a = 0.0;
   double inv_AVG_rho = 0.0;
   double phi_0 = 0.0;
   double phi_1 = 0.0;
   double phi_2 = 0.0;
   double phi_3 = 0.0;
   double phi_4 = 0.0;
   double phi_star_0 = 0.0;
   double phi_star_1 = 0.0;
   double phi_star_2 = 0.0;
   double phi_star_3 = 0.0;
   double phi_star_4 = 0.0;
   double sigma_0_0 = 0.0;
   double sigma_0_1 = 0.0;
   double sigma_0_2 = 0.0;
   double sigma_0_3 = 0.0;
   double sigma_0_4 = 0.0;
   double sigma_1_0 = 0.0;
   double sigma_1_1 = 0.0;
   double sigma_1_2 = 0.0;
   double sigma_1_3 = 0.0;
   double sigma_1_4 = 0.0;
   double t1 = 0.0;
   double t2 = 0.0;
   double theta_0 = 0.0;
   double theta_1 = 0.0;
   double theta_2 = 0.0;
   double theta_3 = 0.0;
   double theta_4 = 0.0;
   double theta_hat_00 = 0.0;
   double theta_hat_01 = 0.0;
   double theta_hat_10 = 0.0;
   double theta_hat_11 = 0.0;
   double theta_hat_20 = 0.0;
   double theta_hat_21 = 0.0;
   double theta_hat_30 = 0.0;
   double theta_hat_31 = 0.0;
   double theta_hat_40 = 0.0;
   double theta_hat_41 = 0.0;
   double ws_lambda_00 = 0.0;
   double ws_lambda_11 = 0.0;
   double ws_lambda_22 = 0.0;
   double ws_lambda_33 = 0.0;
   double ws_lambda_44 = 0.0;
   AVG_0_a = ((1.0/2.0))*(a_B0(0) + a_B0(-1));

   AVG_0_u0 = ((1.0/2.0))*(u0_B0(0) + u0_B0(-1));

   AVG_0_rhoN = ((1.0/2.0))*(rhoN_B0(0) + rhoN_B0(-1));

   AVG_0_ev = ((1.0/2.0))*(ev_B0(0) + ev_B0(-1));

   AVG_0_rhoN2 = ((1.0/2.0))*(rhoN2_B0(0) + rhoN2_B0(-1));

   inv_AVG_a = 1.0/(AVG_0_a);

   inv_AVG_rho = 1.0/(AVG_0_rho);

    AVG_0_0_LEV_00 = ((1.0/2.0))*(AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*gamma_m1_sycl[0]*AVG_0_rhoN/(AVG_0_rhoN +
      AVG_0_rhoN2);

    AVG_0_0_LEV_01 = ((1.0/2.0))*(-2*AVG_0_rhoN - 2*AVG_0_rhoN2 - (AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*AVG_0_rhoN +
      (AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*gama_sycl[0]*AVG_0_rhoN)/(AVG_0_rhoN + AVG_0_rhoN2);

   AVG_0_0_LEV_02 = -(inv_AVG_a*inv_AVG_a)*gamma_m1_sycl[0]*AVG_0_rhoN*AVG_0_u0/(AVG_0_rhoN + AVG_0_rhoN2);

   AVG_0_0_LEV_04 = (inv_AVG_a*inv_AVG_a)*gamma_m1_sycl[0]*AVG_0_rhoN/(AVG_0_rhoN + AVG_0_rhoN2);

   AVG_0_0_LEV_10 = -(1.0/2.0)*(AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*gamma_m1_sycl[0]*AVG_0_ev;

   AVG_0_0_LEV_11 = -(1.0/2.0)*(AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*gamma_m1_sycl[0]*AVG_0_ev;

   AVG_0_0_LEV_12 = (inv_AVG_a*inv_AVG_a)*gamma_m1_sycl[0]*AVG_0_ev*AVG_0_u0;

   AVG_0_0_LEV_13 = 1;

   AVG_0_0_LEV_14 = -(inv_AVG_a*inv_AVG_a)*gamma_m1_sycl[0]*AVG_0_ev;

    AVG_0_0_LEV_20 = -(1.0/2.0)*(-2 - (AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a) +
      (AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*gama_sycl[0]);

    AVG_0_0_LEV_21 = -(1.0/2.0)*(-2 - (AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a) +
      (AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*gama_sycl[0]);

   AVG_0_0_LEV_22 = (inv_AVG_a*inv_AVG_a)*gamma_m1_sycl[0]*AVG_0_u0;

   AVG_0_0_LEV_24 = -(inv_AVG_a*inv_AVG_a)*gamma_m1_sycl[0];

    AVG_0_0_LEV_30 = -(1.0/4.0)*(inv_AVG_a*inv_AVG_a)*(2*AVG_0_a - gama_sycl[0]*AVG_0_u0 +
      AVG_0_u0)*AVG_0_rhoN2*AVG_0_u0/(AVG_0_rhoN + AVG_0_rhoN2);

    AVG_0_0_LEV_31 = -(1.0/4.0)*(inv_AVG_a*inv_AVG_a)*(2*AVG_0_a - gama_sycl[0]*AVG_0_u0 +
      AVG_0_u0)*AVG_0_rhoN2*AVG_0_u0/(AVG_0_rhoN + AVG_0_rhoN2);

    AVG_0_0_LEV_32 = ((1.0/2.0))*(inv_AVG_a*inv_AVG_a)*(-gama_sycl[0]*AVG_0_u0 + AVG_0_a + AVG_0_u0)*AVG_0_rhoN2/(AVG_0_rhoN +
      AVG_0_rhoN2);

   AVG_0_0_LEV_34 = ((1.0/2.0))*(inv_AVG_a*inv_AVG_a)*gamma_m1_sycl[0]*AVG_0_rhoN2/(AVG_0_rhoN + AVG_0_rhoN2);

    AVG_0_0_LEV_40 = ((1.0/4.0))*(inv_AVG_a*inv_AVG_a)*(-AVG_0_u0 + 2*AVG_0_a +
      gama_sycl[0]*AVG_0_u0)*AVG_0_rhoN2*AVG_0_u0/(AVG_0_rhoN + AVG_0_rhoN2);

    AVG_0_0_LEV_41 = ((1.0/4.0))*(inv_AVG_a*inv_AVG_a)*(-AVG_0_u0 + 2*AVG_0_a +
      gama_sycl[0]*AVG_0_u0)*AVG_0_rhoN2*AVG_0_u0/(AVG_0_rhoN + AVG_0_rhoN2);

    AVG_0_0_LEV_42 = -(1.0/2.0)*(inv_AVG_a*inv_AVG_a)*(-AVG_0_u0 + gama_sycl[0]*AVG_0_u0 + AVG_0_a)*AVG_0_rhoN2/(AVG_0_rhoN +
      AVG_0_rhoN2);

   AVG_0_0_LEV_44 = ((1.0/2.0))*(inv_AVG_a*inv_AVG_a)*gamma_m1_sycl[0]*AVG_0_rhoN2/(AVG_0_rhoN + AVG_0_rhoN2);

    alpha_00 = (-rhoE_B0(-1) + rhoE_B0(0))*AVG_0_0_LEV_04 + (-rhoN_B0(-1) + rhoN_B0(0))*AVG_0_0_LEV_00 + (-rhoN2_B0(-1)
      + rhoN2_B0(0))*AVG_0_0_LEV_01 + (-rhou0_B0(-1) + rhou0_B0(0))*AVG_0_0_LEV_02;

    alpha_10 = (-rhoE_B0(-1) + rhoE_B0(0))*AVG_0_0_LEV_14 + (-rhoN_B0(-1) + rhoN_B0(0))*AVG_0_0_LEV_10 + (-rhoN2_B0(-1)
      + rhoN2_B0(0))*AVG_0_0_LEV_11 + (-rhoev_B0(-1) + rhoev_B0(0))*AVG_0_0_LEV_13 + (-rhou0_B0(-1) +
      rhou0_B0(0))*AVG_0_0_LEV_12;

    alpha_20 = (-rhoE_B0(-1) + rhoE_B0(0))*AVG_0_0_LEV_24 + (-rhoN_B0(-1) + rhoN_B0(0))*AVG_0_0_LEV_20 + (-rhoN2_B0(-1)
      + rhoN2_B0(0))*AVG_0_0_LEV_21 + (-rhou0_B0(-1) + rhou0_B0(0))*AVG_0_0_LEV_22;

    alpha_30 = (-rhoE_B0(-1) + rhoE_B0(0))*AVG_0_0_LEV_34 + (-rhoN_B0(-1) + rhoN_B0(0))*AVG_0_0_LEV_30 + (-rhoN2_B0(-1)
      + rhoN2_B0(0))*AVG_0_0_LEV_31 + (-rhou0_B0(-1) + rhou0_B0(0))*AVG_0_0_LEV_32;

    alpha_40 = (-rhoE_B0(-1) + rhoE_B0(0))*AVG_0_0_LEV_44 + (-rhoN_B0(-1) + rhoN_B0(0))*AVG_0_0_LEV_40 + (-rhoN2_B0(-1)
      + rhoN2_B0(0))*AVG_0_0_LEV_41 + (-rhou0_B0(-1) + rhou0_B0(0))*AVG_0_0_LEV_42;

   AVG_0_a = ((1.0/2.0))*(a_B0(0) + a_B0(1));

   AVG_0_u0 = ((1.0/2.0))*(u0_B0(0) + u0_B0(1));

   AVG_0_rhoN = ((1.0/2.0))*(rhoN_B0(0) + rhoN_B0(1));

   AVG_0_ev = ((1.0/2.0))*(ev_B0(0) + ev_B0(1));

   AVG_0_rhoN2 = ((1.0/2.0))*(rhoN2_B0(0) + rhoN2_B0(1));

   inv_AVG_a = 1.0/(AVG_0_a);

   inv_AVG_rho = 1.0/(AVG_0_rho);

    AVG_0_0_LEV_00 = ((1.0/2.0))*(AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*gamma_m1_sycl[0]*AVG_0_rhoN/(AVG_0_rhoN +
      AVG_0_rhoN2);

    AVG_0_0_LEV_01 = ((1.0/2.0))*(-2*AVG_0_rhoN - 2*AVG_0_rhoN2 - (AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*AVG_0_rhoN +
      (AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*gama_sycl[0]*AVG_0_rhoN)/(AVG_0_rhoN + AVG_0_rhoN2);

   AVG_0_0_LEV_02 = -(inv_AVG_a*inv_AVG_a)*gamma_m1_sycl[0]*AVG_0_rhoN*AVG_0_u0/(AVG_0_rhoN + AVG_0_rhoN2);

   AVG_0_0_LEV_04 = (inv_AVG_a*inv_AVG_a)*gamma_m1_sycl[0]*AVG_0_rhoN/(AVG_0_rhoN + AVG_0_rhoN2);

   AVG_0_0_LEV_10 = -(1.0/2.0)*(AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*gamma_m1_sycl[0]*AVG_0_ev;

   AVG_0_0_LEV_11 = -(1.0/2.0)*(AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*gamma_m1_sycl[0]*AVG_0_ev;

   AVG_0_0_LEV_12 = (inv_AVG_a*inv_AVG_a)*gamma_m1_sycl[0]*AVG_0_ev*AVG_0_u0;

   AVG_0_0_LEV_13 = 1;

   AVG_0_0_LEV_14 = -(inv_AVG_a*inv_AVG_a)*gamma_m1_sycl[0]*AVG_0_ev;

    AVG_0_0_LEV_20 = -(1.0/2.0)*(-2 - (AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a) +
      (AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*gama_sycl[0]);

    AVG_0_0_LEV_21 = -(1.0/2.0)*(-2 - (AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a) +
      (AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*gama_sycl[0]);

   AVG_0_0_LEV_22 = (inv_AVG_a*inv_AVG_a)*gamma_m1_sycl[0]*AVG_0_u0;

   AVG_0_0_LEV_24 = -(inv_AVG_a*inv_AVG_a)*gamma_m1_sycl[0];

    AVG_0_0_LEV_30 = -(1.0/4.0)*(inv_AVG_a*inv_AVG_a)*(2*AVG_0_a - gama_sycl[0]*AVG_0_u0 +
      AVG_0_u0)*AVG_0_rhoN2*AVG_0_u0/(AVG_0_rhoN + AVG_0_rhoN2);

    AVG_0_0_LEV_31 = -(1.0/4.0)*(inv_AVG_a*inv_AVG_a)*(2*AVG_0_a - gama_sycl[0]*AVG_0_u0 +
      AVG_0_u0)*AVG_0_rhoN2*AVG_0_u0/(AVG_0_rhoN + AVG_0_rhoN2);

    AVG_0_0_LEV_32 = ((1.0/2.0))*(inv_AVG_a*inv_AVG_a)*(-gama_sycl[0]*AVG_0_u0 + AVG_0_a + AVG_0_u0)*AVG_0_rhoN2/(AVG_0_rhoN +
      AVG_0_rhoN2);

   AVG_0_0_LEV_34 = ((1.0/2.0))*(inv_AVG_a*inv_AVG_a)*gamma_m1_sycl[0]*AVG_0_rhoN2/(AVG_0_rhoN + AVG_0_rhoN2);

    AVG_0_0_LEV_40 = ((1.0/4.0))*(inv_AVG_a*inv_AVG_a)*(-AVG_0_u0 + 2*AVG_0_a +
      gama_sycl[0]*AVG_0_u0)*AVG_0_rhoN2*AVG_0_u0/(AVG_0_rhoN + AVG_0_rhoN2);

    AVG_0_0_LEV_41 = ((1.0/4.0))*(inv_AVG_a*inv_AVG_a)*(-AVG_0_u0 + 2*AVG_0_a +
      gama_sycl[0]*AVG_0_u0)*AVG_0_rhoN2*AVG_0_u0/(AVG_0_rhoN + AVG_0_rhoN2);

    AVG_0_0_LEV_42 = -(1.0/2.0)*(inv_AVG_a*inv_AVG_a)*(-AVG_0_u0 + gama_sycl[0]*AVG_0_u0 + AVG_0_a)*AVG_0_rhoN2/(AVG_0_rhoN +
      AVG_0_rhoN2);

   AVG_0_0_LEV_44 = ((1.0/2.0))*(inv_AVG_a*inv_AVG_a)*gamma_m1_sycl[0]*AVG_0_rhoN2/(AVG_0_rhoN + AVG_0_rhoN2);

    alpha_01 = (-rhoE_B0(0) + rhoE_B0(1))*AVG_0_0_LEV_04 + (-rhoN_B0(0) + rhoN_B0(1))*AVG_0_0_LEV_00 + (-rhoN2_B0(0) +
      rhoN2_B0(1))*AVG_0_0_LEV_01 + (-rhou0_B0(0) + rhou0_B0(1))*AVG_0_0_LEV_02;

    alpha_11 = (-rhoE_B0(0) + rhoE_B0(1))*AVG_0_0_LEV_14 + (-rhoN_B0(0) + rhoN_B0(1))*AVG_0_0_LEV_10 + (-rhoN2_B0(0) +
      rhoN2_B0(1))*AVG_0_0_LEV_11 + (-rhoev_B0(0) + rhoev_B0(1))*AVG_0_0_LEV_13 + (-rhou0_B0(0) +
      rhou0_B0(1))*AVG_0_0_LEV_12;

    alpha_21 = (-rhoE_B0(0) + rhoE_B0(1))*AVG_0_0_LEV_24 + (-rhoN_B0(0) + rhoN_B0(1))*AVG_0_0_LEV_20 + (-rhoN2_B0(0) +
      rhoN2_B0(1))*AVG_0_0_LEV_21 + (-rhou0_B0(0) + rhou0_B0(1))*AVG_0_0_LEV_22;

    alpha_31 = (-rhoE_B0(0) + rhoE_B0(1))*AVG_0_0_LEV_34 + (-rhoN_B0(0) + rhoN_B0(1))*AVG_0_0_LEV_30 + (-rhoN2_B0(0) +
      rhoN2_B0(1))*AVG_0_0_LEV_31 + (-rhou0_B0(0) + rhou0_B0(1))*AVG_0_0_LEV_32;

    alpha_41 = (-rhoE_B0(0) + rhoE_B0(1))*AVG_0_0_LEV_44 + (-rhoN_B0(0) + rhoN_B0(1))*AVG_0_0_LEV_40 + (-rhoN2_B0(0) +
      rhoN2_B0(1))*AVG_0_0_LEV_41 + (-rhou0_B0(0) + rhou0_B0(1))*AVG_0_0_LEV_42;

   ws_lambda_00 = AVG_0_u0;

   ws_lambda_11 = AVG_0_u0;

   ws_lambda_22 = AVG_0_u0;

   ws_lambda_33 = AVG_0_a + AVG_0_u0;

   ws_lambda_44 = -AVG_0_a + AVG_0_u0;

   AVG_0_REV_00 = 1;

   AVG_0_REV_02 = 1;

   AVG_0_REV_03 = 1;

   AVG_0_REV_04 = 1;

   AVG_0_REV_10 = -1;

   AVG_0_REV_13 = AVG_0_rhoN/AVG_0_rhoN2;

   AVG_0_REV_14 = AVG_0_rhoN/AVG_0_rhoN2;

   AVG_0_REV_22 = AVG_0_u0;

   AVG_0_REV_23 = (AVG_0_a + AVG_0_u0)*(AVG_0_rhoN + AVG_0_rhoN2)/AVG_0_rhoN2;

   AVG_0_REV_24 = -(-AVG_0_u0 + AVG_0_a)*(AVG_0_rhoN + AVG_0_rhoN2)/AVG_0_rhoN2;

   AVG_0_REV_31 = 1;

   AVG_0_REV_33 = (AVG_0_rhoN + AVG_0_rhoN2)*AVG_0_ev/AVG_0_rhoN2;

   AVG_0_REV_34 = (AVG_0_rhoN + AVG_0_rhoN2)*AVG_0_ev/AVG_0_rhoN2;

   AVG_0_REV_42 = ((1.0/2.0))*(AVG_0_u0*AVG_0_u0);

    AVG_0_REV_43 = ((1.0/2.0))*(AVG_0_rhoN + AVG_0_rhoN2)*(-(AVG_0_u0*AVG_0_u0) + 2*(AVG_0_a*AVG_0_a) +
      (AVG_0_u0*AVG_0_u0)*gama_sycl[0] - 2*AVG_0_a*AVG_0_u0 + 2*gama_sycl[0]*AVG_0_a*AVG_0_u0)*invgamma_m1_sycl[0]/AVG_0_rhoN2;

    AVG_0_REV_44 = ((1.0/2.0))*(AVG_0_rhoN + AVG_0_rhoN2)*(-(AVG_0_u0*AVG_0_u0) + 2*(AVG_0_a*AVG_0_a) +
      (AVG_0_u0*AVG_0_u0)*gama_sycl[0] + 2*AVG_0_a*AVG_0_u0 - 2*gama_sycl[0]*AVG_0_a*AVG_0_u0)*invgamma_m1_sycl[0]/AVG_0_rhoN2;

   AVG_0_a = ((1.0/2.0))*(a_B0(1) + a_B0(2));

   AVG_0_u0 = ((1.0/2.0))*(u0_B0(1) + u0_B0(2));

   AVG_0_rhoN = ((1.0/2.0))*(rhoN_B0(1) + rhoN_B0(2));

   AVG_0_ev = ((1.0/2.0))*(ev_B0(1) + ev_B0(2));

   AVG_0_rhoN2 = ((1.0/2.0))*(rhoN2_B0(1) + rhoN2_B0(2));

   inv_AVG_a = 1.0/(AVG_0_a);

   inv_AVG_rho = 1.0/(AVG_0_rho);

    AVG_0_0_LEV_00 = ((1.0/2.0))*(AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*gamma_m1_sycl[0]*AVG_0_rhoN/(AVG_0_rhoN +
      AVG_0_rhoN2);

    AVG_0_0_LEV_01 = ((1.0/2.0))*(-2*AVG_0_rhoN - 2*AVG_0_rhoN2 - (AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*AVG_0_rhoN +
      (AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*gama_sycl[0]*AVG_0_rhoN)/(AVG_0_rhoN + AVG_0_rhoN2);

   AVG_0_0_LEV_02 = -(inv_AVG_a*inv_AVG_a)*gamma_m1_sycl[0]*AVG_0_rhoN*AVG_0_u0/(AVG_0_rhoN + AVG_0_rhoN2);

   AVG_0_0_LEV_04 = (inv_AVG_a*inv_AVG_a)*gamma_m1_sycl[0]*AVG_0_rhoN/(AVG_0_rhoN + AVG_0_rhoN2);

   AVG_0_0_LEV_10 = -(1.0/2.0)*(AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*gamma_m1_sycl[0]*AVG_0_ev;

   AVG_0_0_LEV_11 = -(1.0/2.0)*(AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*gamma_m1_sycl[0]*AVG_0_ev;

   AVG_0_0_LEV_12 = (inv_AVG_a*inv_AVG_a)*gamma_m1_sycl[0]*AVG_0_ev*AVG_0_u0;

   AVG_0_0_LEV_13 = 1;

   AVG_0_0_LEV_14 = -(inv_AVG_a*inv_AVG_a)*gamma_m1_sycl[0]*AVG_0_ev;

    AVG_0_0_LEV_20 = -(1.0/2.0)*(-2 - (AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a) +
      (AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*gama_sycl[0]);

    AVG_0_0_LEV_21 = -(1.0/2.0)*(-2 - (AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a) +
      (AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*gama_sycl[0]);

   AVG_0_0_LEV_22 = (inv_AVG_a*inv_AVG_a)*gamma_m1_sycl[0]*AVG_0_u0;

   AVG_0_0_LEV_24 = -(inv_AVG_a*inv_AVG_a)*gamma_m1_sycl[0];

    AVG_0_0_LEV_30 = -(1.0/4.0)*(inv_AVG_a*inv_AVG_a)*(2*AVG_0_a - gama_sycl[0]*AVG_0_u0 +
      AVG_0_u0)*AVG_0_rhoN2*AVG_0_u0/(AVG_0_rhoN + AVG_0_rhoN2);

    AVG_0_0_LEV_31 = -(1.0/4.0)*(inv_AVG_a*inv_AVG_a)*(2*AVG_0_a - gama_sycl[0]*AVG_0_u0 +
      AVG_0_u0)*AVG_0_rhoN2*AVG_0_u0/(AVG_0_rhoN + AVG_0_rhoN2);

    AVG_0_0_LEV_32 = ((1.0/2.0))*(inv_AVG_a*inv_AVG_a)*(-gama_sycl[0]*AVG_0_u0 + AVG_0_a + AVG_0_u0)*AVG_0_rhoN2/(AVG_0_rhoN +
      AVG_0_rhoN2);

   AVG_0_0_LEV_34 = ((1.0/2.0))*(inv_AVG_a*inv_AVG_a)*gamma_m1_sycl[0]*AVG_0_rhoN2/(AVG_0_rhoN + AVG_0_rhoN2);

    AVG_0_0_LEV_40 = ((1.0/4.0))*(inv_AVG_a*inv_AVG_a)*(-AVG_0_u0 + 2*AVG_0_a +
      gama_sycl[0]*AVG_0_u0)*AVG_0_rhoN2*AVG_0_u0/(AVG_0_rhoN + AVG_0_rhoN2);

    AVG_0_0_LEV_41 = ((1.0/4.0))*(inv_AVG_a*inv_AVG_a)*(-AVG_0_u0 + 2*AVG_0_a +
      gama_sycl[0]*AVG_0_u0)*AVG_0_rhoN2*AVG_0_u0/(AVG_0_rhoN + AVG_0_rhoN2);

    AVG_0_0_LEV_42 = -(1.0/2.0)*(inv_AVG_a*inv_AVG_a)*(-AVG_0_u0 + gama_sycl[0]*AVG_0_u0 + AVG_0_a)*AVG_0_rhoN2/(AVG_0_rhoN +
      AVG_0_rhoN2);

   AVG_0_0_LEV_44 = ((1.0/2.0))*(inv_AVG_a*inv_AVG_a)*gamma_m1_sycl[0]*AVG_0_rhoN2/(AVG_0_rhoN + AVG_0_rhoN2);

    alpha_02 = (-rhoE_B0(1) + rhoE_B0(2))*AVG_0_0_LEV_04 + (-rhoN_B0(1) + rhoN_B0(2))*AVG_0_0_LEV_00 + (-rhoN2_B0(1) +
      rhoN2_B0(2))*AVG_0_0_LEV_01 + (-rhou0_B0(1) + rhou0_B0(2))*AVG_0_0_LEV_02;

    alpha_12 = (-rhoE_B0(1) + rhoE_B0(2))*AVG_0_0_LEV_14 + (-rhoN_B0(1) + rhoN_B0(2))*AVG_0_0_LEV_10 + (-rhoN2_B0(1) +
      rhoN2_B0(2))*AVG_0_0_LEV_11 + (-rhoev_B0(1) + rhoev_B0(2))*AVG_0_0_LEV_13 + (-rhou0_B0(1) +
      rhou0_B0(2))*AVG_0_0_LEV_12;

    alpha_22 = (-rhoE_B0(1) + rhoE_B0(2))*AVG_0_0_LEV_24 + (-rhoN_B0(1) + rhoN_B0(2))*AVG_0_0_LEV_20 + (-rhoN2_B0(1) +
      rhoN2_B0(2))*AVG_0_0_LEV_21 + (-rhou0_B0(1) + rhou0_B0(2))*AVG_0_0_LEV_22;

    alpha_32 = (-rhoE_B0(1) + rhoE_B0(2))*AVG_0_0_LEV_34 + (-rhoN_B0(1) + rhoN_B0(2))*AVG_0_0_LEV_30 + (-rhoN2_B0(1) +
      rhoN2_B0(2))*AVG_0_0_LEV_31 + (-rhou0_B0(1) + rhou0_B0(2))*AVG_0_0_LEV_32;

    alpha_42 = (-rhoE_B0(1) + rhoE_B0(2))*AVG_0_0_LEV_44 + (-rhoN_B0(1) + rhoN_B0(2))*AVG_0_0_LEV_40 + (-rhoN2_B0(1) +
      rhoN2_B0(2))*AVG_0_0_LEV_41 + (-rhou0_B0(1) + rhou0_B0(2))*AVG_0_0_LEV_42;

    sigma_0_0 = ((cl::sycl::fabs(ws_lambda_00) >= delta_TVD_sycl[0]) ? (
   cl::sycl::fabs(ws_lambda_00)
)
: (

      ((1.0/2.0))*(1.0/(invdelta_TVD_sycl[0]*invdelta_TVD_sycl[0]) + (ws_lambda_00*ws_lambda_00))*invdelta_TVD_sycl[0]
));

    sigma_0_1 = ((cl::sycl::fabs(ws_lambda_11) >= delta_TVD_sycl[0]) ? (
   cl::sycl::fabs(ws_lambda_11)
)
: (

      ((1.0/2.0))*(1.0/(invdelta_TVD_sycl[0]*invdelta_TVD_sycl[0]) + (ws_lambda_11*ws_lambda_11))*invdelta_TVD_sycl[0]
));

    sigma_0_2 = ((cl::sycl::fabs(ws_lambda_22) >= delta_TVD_sycl[0]) ? (
   cl::sycl::fabs(ws_lambda_22)
)
: (

      ((1.0/2.0))*(1.0/(invdelta_TVD_sycl[0]*invdelta_TVD_sycl[0]) + (ws_lambda_22*ws_lambda_22))*invdelta_TVD_sycl[0]
));

    sigma_0_3 = ((cl::sycl::fabs(ws_lambda_33) >= delta_TVD_sycl[0]) ? (
   cl::sycl::fabs(ws_lambda_33)
)
: (

      ((1.0/2.0))*(1.0/(invdelta_TVD_sycl[0]*invdelta_TVD_sycl[0]) + (ws_lambda_33*ws_lambda_33))*invdelta_TVD_sycl[0]
));

    sigma_0_4 = ((cl::sycl::fabs(ws_lambda_44) >= delta_TVD_sycl[0]) ? (
   cl::sycl::fabs(ws_lambda_44)
)
: (

      ((1.0/2.0))*(1.0/(invdelta_TVD_sycl[0]*invdelta_TVD_sycl[0]) + (ws_lambda_44*ws_lambda_44))*invdelta_TVD_sycl[0]
));

   S = (alpha_01 > 0) ? 1 : ((alpha_01 < 0) ? -1 : 0);

   t1 = cl::sycl::fmax(0.0, cl::sycl::fmin(S*alpha_00, 2*cl::sycl::fabs(alpha_01)));

   t2 = cl::sycl::fmin(cl::sycl::fabs(alpha_01), 2*S*alpha_00);

   g_00 = S*cl::sycl::fmax(t1, t2);

   S = (alpha_11 > 0) ? 1 : ((alpha_11 < 0) ? -1 : 0);

   t1 = cl::sycl::fmax(0.0, cl::sycl::fmin(S*alpha_10, 2*cl::sycl::fabs(alpha_11)));

   t2 = cl::sycl::fmin(cl::sycl::fabs(alpha_11), 2*S*alpha_10);

   g_10 = S*cl::sycl::fmax(t1, t2);

   S = (alpha_21 > 0) ? 1 : ((alpha_21 < 0) ? -1 : 0);

   t1 = cl::sycl::fmax(0.0, cl::sycl::fmin(S*alpha_20, 2*cl::sycl::fabs(alpha_21)));

   t2 = cl::sycl::fmin(cl::sycl::fabs(alpha_21), 2*S*alpha_20);

   g_20 = S*cl::sycl::fmax(t1, t2);

   S = (alpha_31 > 0) ? 1 : ((alpha_31 < 0) ? -1 : 0);

   t1 = cl::sycl::fmax(0.0, cl::sycl::fmin(S*alpha_30, 2*cl::sycl::fabs(alpha_31)));

   t2 = cl::sycl::fmin(cl::sycl::fabs(alpha_31), 2*S*alpha_30);

   g_30 = S*cl::sycl::fmax(t1, t2);

   S = (alpha_41 > 0) ? 1 : ((alpha_41 < 0) ? -1 : 0);

   t1 = cl::sycl::fmax(0.0, cl::sycl::fmin(S*alpha_40, 2*cl::sycl::fabs(alpha_41)));

   t2 = cl::sycl::fmin(cl::sycl::fabs(alpha_41), 2*S*alpha_40);

   g_40 = S*cl::sycl::fmax(t1, t2);

   S = (alpha_02 > 0) ? 1 : ((alpha_02 < 0) ? -1 : 0);

   t1 = cl::sycl::fmax(0.0, cl::sycl::fmin(S*alpha_01, 2*cl::sycl::fabs(alpha_02)));

   t2 = cl::sycl::fmin(cl::sycl::fabs(alpha_02), 2*S*alpha_01);

   g_01 = S*cl::sycl::fmax(t1, t2);

   S = (alpha_12 > 0) ? 1 : ((alpha_12 < 0) ? -1 : 0);

   t1 = cl::sycl::fmax(0.0, cl::sycl::fmin(S*alpha_11, 2*cl::sycl::fabs(alpha_12)));

   t2 = cl::sycl::fmin(cl::sycl::fabs(alpha_12), 2*S*alpha_11);

   g_11 = S*cl::sycl::fmax(t1, t2);

   S = (alpha_22 > 0) ? 1 : ((alpha_22 < 0) ? -1 : 0);

   t1 = cl::sycl::fmax(0.0, cl::sycl::fmin(S*alpha_21, 2*cl::sycl::fabs(alpha_22)));

   t2 = cl::sycl::fmin(cl::sycl::fabs(alpha_22), 2*S*alpha_21);

   g_21 = S*cl::sycl::fmax(t1, t2);

   S = (alpha_32 > 0) ? 1 : ((alpha_32 < 0) ? -1 : 0);

   t1 = cl::sycl::fmax(0.0, cl::sycl::fmin(S*alpha_31, 2*cl::sycl::fabs(alpha_32)));

   t2 = cl::sycl::fmin(cl::sycl::fabs(alpha_32), 2*S*alpha_31);

   g_31 = S*cl::sycl::fmax(t1, t2);

   S = (alpha_42 > 0) ? 1 : ((alpha_42 < 0) ? -1 : 0);

   t1 = cl::sycl::fmax(0.0, cl::sycl::fmin(S*alpha_41, 2*cl::sycl::fabs(alpha_42)));

   t2 = cl::sycl::fmin(cl::sycl::fabs(alpha_42), 2*S*alpha_41);

   g_41 = S*cl::sycl::fmax(t1, t2);

   gamma_0 = ((alpha_01 == 0) ? (
   0
)
: (
   (-g_00 + g_01)*alpha_01*sigma_0_0/((alpha_01*alpha_01) + eps_TVD_sycl[0])
));

   gamma_1 = ((alpha_11 == 0) ? (
   0
)
: (
   (-g_10 + g_11)*alpha_11*sigma_0_1/((alpha_11*alpha_11) + eps_TVD_sycl[0])
));

   gamma_2 = ((alpha_21 == 0) ? (
   0
)
: (
   (-g_20 + g_21)*alpha_21*sigma_0_2/((alpha_21*alpha_21) + eps_TVD_sycl[0])
));

   gamma_3 = ((alpha_31 == 0) ? (
   0
)
: (
   (-g_30 + g_31)*alpha_31*sigma_0_3/((alpha_31*alpha_31) + eps_TVD_sycl[0])
));

   gamma_4 = ((alpha_41 == 0) ? (
   0
)
: (
   (-g_40 + g_41)*alpha_41*sigma_0_4/((alpha_41*alpha_41) + eps_TVD_sycl[0])
));

    sigma_1_0 = ((cl::sycl::fabs(gamma_0) >= delta_TVD_sycl[0]) ? (
   cl::sycl::fabs(gamma_0)
)
: (
   ((1.0/2.0))*(1.0/(invdelta_TVD_sycl[0]*invdelta_TVD_sycl[0])
      + (gamma_0*gamma_0))*invdelta_TVD_sycl[0]
));

    sigma_1_1 = ((cl::sycl::fabs(gamma_1) >= delta_TVD_sycl[0]) ? (
   cl::sycl::fabs(gamma_1)
)
: (
   ((1.0/2.0))*(1.0/(invdelta_TVD_sycl[0]*invdelta_TVD_sycl[0])
      + (gamma_1*gamma_1))*invdelta_TVD_sycl[0]
));

    sigma_1_2 = ((cl::sycl::fabs(gamma_2) >= delta_TVD_sycl[0]) ? (
   cl::sycl::fabs(gamma_2)
)
: (
   ((1.0/2.0))*(1.0/(invdelta_TVD_sycl[0]*invdelta_TVD_sycl[0])
      + (gamma_2*gamma_2))*invdelta_TVD_sycl[0]
));

    sigma_1_3 = ((cl::sycl::fabs(gamma_3) >= delta_TVD_sycl[0]) ? (
   cl::sycl::fabs(gamma_3)
)
: (
   ((1.0/2.0))*(1.0/(invdelta_TVD_sycl[0]*invdelta_TVD_sycl[0])
      + (gamma_3*gamma_3))*invdelta_TVD_sycl[0]
));

    sigma_1_4 = ((cl::sycl::fabs(gamma_4) >= delta_TVD_sycl[0]) ? (
   cl::sycl::fabs(gamma_4)
)
: (
   ((1.0/2.0))*(1.0/(invdelta_TVD_sycl[0]*invdelta_TVD_sycl[0])
      + (gamma_4*gamma_4))*invdelta_TVD_sycl[0]
));

   phi_0 = -cl::sycl::fabs(sigma_0_0 + sigma_1_0)*alpha_01 + 0.5*(g_00 + g_01)*sigma_0_0;

   phi_1 = -cl::sycl::fabs(sigma_0_1 + sigma_1_1)*alpha_11 + 0.5*(g_10 + g_11)*sigma_0_1;

   phi_2 = -cl::sycl::fabs(sigma_0_2 + sigma_1_2)*alpha_21 + 0.5*(g_20 + g_21)*sigma_0_2;

   phi_3 = -cl::sycl::fabs(sigma_0_3 + sigma_1_3)*alpha_31 + 0.5*(g_30 + g_31)*sigma_0_3;

   phi_4 = -cl::sycl::fabs(sigma_0_4 + sigma_1_4)*alpha_41 + 0.5*(g_40 + g_41)*sigma_0_4;

   t1 = -cl::sycl::fabs(alpha_00) + cl::sycl::fabs(alpha_01);

   t2 = cl::sycl::fabs(alpha_00) + cl::sycl::fabs(alpha_01) + eps_TVD_sycl[0];

   theta_hat_00 = (cl::sycl::fabs(t1/t2)*cl::sycl::fabs(t1/t2));

   t1 = -cl::sycl::fabs(alpha_10) + cl::sycl::fabs(alpha_11);

   t2 = cl::sycl::fabs(alpha_10) + cl::sycl::fabs(alpha_11) + eps_TVD_sycl[0];

   theta_hat_10 = (cl::sycl::fabs(t1/t2)*cl::sycl::fabs(t1/t2));

   t1 = -cl::sycl::fabs(alpha_20) + cl::sycl::fabs(alpha_21);

   t2 = cl::sycl::fabs(alpha_20) + cl::sycl::fabs(alpha_21) + eps_TVD_sycl[0];

   theta_hat_20 = (cl::sycl::fabs(t1/t2)*cl::sycl::fabs(t1/t2));

   t1 = -cl::sycl::fabs(alpha_30) + cl::sycl::fabs(alpha_31);

   t2 = cl::sycl::fabs(alpha_30) + cl::sycl::fabs(alpha_31) + eps_TVD_sycl[0];

   theta_hat_30 = (cl::sycl::fabs(t1/t2)*cl::sycl::fabs(t1/t2));

   t1 = -cl::sycl::fabs(alpha_40) + cl::sycl::fabs(alpha_41);

   t2 = cl::sycl::fabs(alpha_40) + cl::sycl::fabs(alpha_41) + eps_TVD_sycl[0];

   theta_hat_40 = (cl::sycl::fabs(t1/t2)*cl::sycl::fabs(t1/t2));

   t1 = -cl::sycl::fabs(alpha_01) + cl::sycl::fabs(alpha_02);

   t2 = cl::sycl::fabs(alpha_01) + cl::sycl::fabs(alpha_02) + eps_TVD_sycl[0];

   theta_hat_01 = (cl::sycl::fabs(t1/t2)*cl::sycl::fabs(t1/t2));

   t1 = -cl::sycl::fabs(alpha_11) + cl::sycl::fabs(alpha_12);

   t2 = cl::sycl::fabs(alpha_11) + cl::sycl::fabs(alpha_12) + eps_TVD_sycl[0];

   theta_hat_11 = (cl::sycl::fabs(t1/t2)*cl::sycl::fabs(t1/t2));

   t1 = -cl::sycl::fabs(alpha_21) + cl::sycl::fabs(alpha_22);

   t2 = cl::sycl::fabs(alpha_21) + cl::sycl::fabs(alpha_22) + eps_TVD_sycl[0];

   theta_hat_21 = (cl::sycl::fabs(t1/t2)*cl::sycl::fabs(t1/t2));

   t1 = -cl::sycl::fabs(alpha_31) + cl::sycl::fabs(alpha_32);

   t2 = cl::sycl::fabs(alpha_31) + cl::sycl::fabs(alpha_32) + eps_TVD_sycl[0];

   theta_hat_31 = (cl::sycl::fabs(t1/t2)*cl::sycl::fabs(t1/t2));

   t1 = -cl::sycl::fabs(alpha_41) + cl::sycl::fabs(alpha_42);

   t2 = cl::sycl::fabs(alpha_41) + cl::sycl::fabs(alpha_42) + eps_TVD_sycl[0];

   theta_hat_41 = (cl::sycl::fabs(t1/t2)*cl::sycl::fabs(t1/t2));

   theta_0 = cl::sycl::fmax(theta_hat_00, theta_hat_01);

   theta_1 = cl::sycl::fmax(theta_hat_10, theta_hat_11);

   theta_2 = cl::sycl::fmax(theta_hat_20, theta_hat_21);

   theta_3 = cl::sycl::fmax(theta_hat_30, theta_hat_31);

   theta_4 = cl::sycl::fmax(theta_hat_40, theta_hat_41);

   phi_star_0 = kappa_TVD_sycl[0]*phi_0*theta_0;

   phi_star_1 = kappa_TVD_sycl[0]*phi_1*theta_1;

   phi_star_2 = kappa_TVD_sycl[0]*phi_2*theta_2;

   phi_star_3 = kappa_TVD_sycl[0]*phi_3*theta_3;

   phi_star_4 = kappa_TVD_sycl[0]*phi_4*theta_4;

    wk0_B0(0) = 0.5*(AVG_0_REV_00*phi_star_0 + AVG_0_REV_02*phi_star_2 + AVG_0_REV_03*phi_star_3 +
      AVG_0_REV_04*phi_star_4);

   wk1_B0(0) = 0.5*(AVG_0_REV_10*phi_star_0 + AVG_0_REV_13*phi_star_3 + AVG_0_REV_14*phi_star_4);

   wk2_B0(0) = 0.5*(AVG_0_REV_22*phi_star_2 + AVG_0_REV_23*phi_star_3 + AVG_0_REV_24*phi_star_4);

   wk3_B0(0) = 0.5*(AVG_0_REV_31*phi_star_1 + AVG_0_REV_33*phi_star_3 + AVG_0_REV_34*phi_star_4);

   wk4_B0(0) = 0.5*(AVG_0_REV_42*phi_star_2 + AVG_0_REV_43*phi_star_3 + AVG_0_REV_44*phi_star_4);


        }
      });
    });
  }
  if (block->instance->OPS_diags > 1) {
    block->instance->sycl_instance->queue->wait();
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[13].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 13);
  ops_set_halo_dirtybit3(&args[8],range);
  ops_set_halo_dirtybit3(&args[9],range);
  ops_set_halo_dirtybit3(&args[10],range);
  ops_set_halo_dirtybit3(&args[11],range);
  ops_set_halo_dirtybit3(&args[12],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[13].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg7);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg8);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg9);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg10);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg11);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg12);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel004(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11,
 ops_arg arg12) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)calloc(1,sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 1;
  desc->index = 13;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 13;
  for ( int i=0; i<2; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 13;
  desc->args = (ops_arg*)ops_malloc(13*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg2.dat->index;
  desc->args[3] = arg3;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg3.dat->index;
  desc->args[4] = arg4;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg4.dat->index;
  desc->args[5] = arg5;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg5.dat->index;
  desc->args[6] = arg6;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg6.dat->index;
  desc->args[7] = arg7;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg7.dat->index;
  desc->args[8] = arg8;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg8.dat->index;
  desc->args[9] = arg9;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg9.dat->index;
  desc->args[10] = arg10;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg10.dat->index;
  desc->args[11] = arg11;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg11.dat->index;
  desc->args[12] = arg12;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg12.dat->index;
  desc->function = ops_par_loop_opensbliblock00Kernel004_execute;
  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,13,"opensbliblock00Kernel004");
  }
  ops_enqueue_kernel(desc);
}
#endif
