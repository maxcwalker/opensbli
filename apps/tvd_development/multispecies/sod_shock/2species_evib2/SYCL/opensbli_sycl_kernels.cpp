//
// auto-generated by ops.py
//
//header
#define OPS_1D
#define OPS_API 2
#include "ops_lib_core.h"
#ifdef OPS_MPI
#include "ops_mpi_core.h"
#include <limits>
#endif

#include "ops_sycl_rt_support.h"
#include "ops_sycl_reduction.h"
// global constants
cl::sycl::buffer<double,1> *Delta0block0_p=nullptr;
extern double Delta0block0;
cl::sycl::buffer<int,1> *HDF5_timing_p=nullptr;
extern int HDF5_timing;
cl::sycl::buffer<double,1> *Lref_p=nullptr;
extern double Lref;
cl::sycl::buffer<double,1> *MN_p=nullptr;
extern double MN;
cl::sycl::buffer<double,1> *MN2_p=nullptr;
extern double MN2;
cl::sycl::buffer<double,1> *Rhat_p=nullptr;
extern double Rhat;
cl::sycl::buffer<double,1> *Tref_p=nullptr;
extern double Tref;
cl::sycl::buffer<int,1> *block0np0_p=nullptr;
extern int block0np0;
cl::sycl::buffer<double,1> *cN_p=nullptr;
extern double cN;
cl::sycl::buffer<double,1> *cN2_p=nullptr;
extern double cN2;
cl::sycl::buffer<double,1> *delta_TVD_p=nullptr;
extern double delta_TVD;
cl::sycl::buffer<double,1> *dt_p=nullptr;
extern double dt;
cl::sycl::buffer<double,1> *eps_TVD_p=nullptr;
extern double eps_TVD;
cl::sycl::buffer<double,1> *gama_p=nullptr;
extern double gama;
cl::sycl::buffer<double,1> *gamma_m1_p=nullptr;
extern double gamma_m1;
cl::sycl::buffer<double,1> *inv2Delta0block0_p=nullptr;
extern double inv2Delta0block0;
cl::sycl::buffer<double,1> *inv2gamma_m1_p=nullptr;
extern double inv2gamma_m1;
cl::sycl::buffer<double,1> *inv2uref_p=nullptr;
extern double inv2uref;
cl::sycl::buffer<double,1> *invDelta0block0_p=nullptr;
extern double invDelta0block0;
cl::sycl::buffer<double,1> *invMN_p=nullptr;
extern double invMN;
cl::sycl::buffer<double,1> *invMN2_p=nullptr;
extern double invMN2;
cl::sycl::buffer<double,1> *invRhat_p=nullptr;
extern double invRhat;
cl::sycl::buffer<double,1> *invTref_p=nullptr;
extern double invTref;
cl::sycl::buffer<double,1> *invdelta_TVD_p=nullptr;
extern double invdelta_TVD;
cl::sycl::buffer<double,1> *invgama_p=nullptr;
extern double invgama;
cl::sycl::buffer<double,1> *invgamma_m1_p=nullptr;
extern double invgamma_m1;
cl::sycl::buffer<double,1> *invuref_p=nullptr;
extern double invuref;
cl::sycl::buffer<double,1> *kappa_p=nullptr;
extern double kappa;
cl::sycl::buffer<double,1> *kappa_TVD_p=nullptr;
extern double kappa_TVD;
cl::sycl::buffer<int,1> *niter_p=nullptr;
extern int niter;
cl::sycl::buffer<double,1> *simulation_time_p=nullptr;
extern double simulation_time;
cl::sycl::buffer<int,1> *start_iter_p=nullptr;
extern int start_iter;
cl::sycl::buffer<double,1> *thetavN2_p=nullptr;
extern double thetavN2;
cl::sycl::buffer<double,1> *uref_p=nullptr;
extern double uref;

void ops_init_backend() {}

void ops_decl_const_char(OPS_instance *instance, int dim, char const * type, int size, char * dat, char const * name ) {
  if (!strcmp(name,"Delta0block0")) {
    if (Delta0block0_p == nullptr) Delta0block0_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*Delta0block0_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"HDF5_timing")) {
    if (HDF5_timing_p == nullptr) HDF5_timing_p = new cl::sycl::buffer<int,1>(cl::sycl::range<1>(dim));
    auto accessor = (*HDF5_timing_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((int*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"Lref")) {
    if (Lref_p == nullptr) Lref_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*Lref_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"MN")) {
    if (MN_p == nullptr) MN_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*MN_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"MN2")) {
    if (MN2_p == nullptr) MN2_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*MN2_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"Rhat")) {
    if (Rhat_p == nullptr) Rhat_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*Rhat_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"Tref")) {
    if (Tref_p == nullptr) Tref_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*Tref_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"block0np0")) {
    if (block0np0_p == nullptr) block0np0_p = new cl::sycl::buffer<int,1>(cl::sycl::range<1>(dim));
    auto accessor = (*block0np0_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((int*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"cN")) {
    if (cN_p == nullptr) cN_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*cN_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"cN2")) {
    if (cN2_p == nullptr) cN2_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*cN2_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"delta_TVD")) {
    if (delta_TVD_p == nullptr) delta_TVD_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*delta_TVD_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"dt")) {
    if (dt_p == nullptr) dt_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*dt_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"eps_TVD")) {
    if (eps_TVD_p == nullptr) eps_TVD_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*eps_TVD_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"gama")) {
    if (gama_p == nullptr) gama_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*gama_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"gamma_m1")) {
    if (gamma_m1_p == nullptr) gamma_m1_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*gamma_m1_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"inv2Delta0block0")) {
    if (inv2Delta0block0_p == nullptr) inv2Delta0block0_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*inv2Delta0block0_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"inv2gamma_m1")) {
    if (inv2gamma_m1_p == nullptr) inv2gamma_m1_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*inv2gamma_m1_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"inv2uref")) {
    if (inv2uref_p == nullptr) inv2uref_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*inv2uref_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"invDelta0block0")) {
    if (invDelta0block0_p == nullptr) invDelta0block0_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*invDelta0block0_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"invMN")) {
    if (invMN_p == nullptr) invMN_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*invMN_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"invMN2")) {
    if (invMN2_p == nullptr) invMN2_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*invMN2_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"invRhat")) {
    if (invRhat_p == nullptr) invRhat_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*invRhat_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"invTref")) {
    if (invTref_p == nullptr) invTref_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*invTref_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"invdelta_TVD")) {
    if (invdelta_TVD_p == nullptr) invdelta_TVD_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*invdelta_TVD_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"invgama")) {
    if (invgama_p == nullptr) invgama_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*invgama_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"invgamma_m1")) {
    if (invgamma_m1_p == nullptr) invgamma_m1_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*invgamma_m1_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"invuref")) {
    if (invuref_p == nullptr) invuref_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*invuref_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"kappa")) {
    if (kappa_p == nullptr) kappa_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*kappa_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"kappa_TVD")) {
    if (kappa_TVD_p == nullptr) kappa_TVD_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*kappa_TVD_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"niter")) {
    if (niter_p == nullptr) niter_p = new cl::sycl::buffer<int,1>(cl::sycl::range<1>(dim));
    auto accessor = (*niter_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((int*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"simulation_time")) {
    if (simulation_time_p == nullptr) simulation_time_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*simulation_time_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"start_iter")) {
    if (start_iter_p == nullptr) start_iter_p = new cl::sycl::buffer<int,1>(cl::sycl::range<1>(dim));
    auto accessor = (*start_iter_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((int*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"thetavN2")) {
    if (thetavN2_p == nullptr) thetavN2_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*thetavN2_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"uref")) {
    if (uref_p == nullptr) uref_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*uref_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  {
    throw OPSException(OPS_RUNTIME_ERROR, "error: unknown const name");
  }
}

//user kernel files
#include "opensbliblock00Kernel021_sycl_kernel.cpp"
#include "opensbliblock00Kernel019_sycl_kernel.cpp"
#include "opensbliblock00Kernel020_sycl_kernel.cpp"
#include "opensbliblock00Kernel009_sycl_kernel.cpp"
#include "opensbliblock00Kernel011_sycl_kernel.cpp"
#include "opensbliblock00Kernel008_sycl_kernel.cpp"
#include "opensbliblock00Kernel017_sycl_kernel.cpp"
#include "opensbliblock00Kernel018_sycl_kernel.cpp"
#include "opensbliblock00Kernel006_sycl_kernel.cpp"
#include "opensbliblock00Kernel016_sycl_kernel.cpp"
#include "opensbliblock00Kernel022_sycl_kernel.cpp"
#include "opensbliblock00Kernel002_sycl_kernel.cpp"
#include "opensbliblock00Kernel003_sycl_kernel.cpp"
#include "opensbliblock00Kernel004_sycl_kernel.cpp"
#include "opensbliblock00Kernel005_sycl_kernel.cpp"
