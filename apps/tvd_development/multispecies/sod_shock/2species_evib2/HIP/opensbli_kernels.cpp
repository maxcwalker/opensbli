//
// auto-generated by ops.py//

//header
#include <hip/hip_runtime.h>
#define OPS_API 2
#define OPS_1D
#include "ops_lib_core.h"

#include "ops_hip_rt_support.h"
#include "ops_hip_reduction.h"


#ifdef OPS_MPI
#include "ops_mpi_core.h"
#endif
// global constants
#define Delta0block0 Delta0block0_OPSCONSTANT
__constant__ double Delta0block0;
#define HDF5_timing HDF5_timing_OPSCONSTANT
__constant__ int HDF5_timing;
#define Lref Lref_OPSCONSTANT
__constant__ double Lref;
#define MN MN_OPSCONSTANT
__constant__ double MN;
#define MN2 MN2_OPSCONSTANT
__constant__ double MN2;
#define Rhat Rhat_OPSCONSTANT
__constant__ double Rhat;
#define block0np0 block0np0_OPSCONSTANT
__constant__ int block0np0;
#define cN cN_OPSCONSTANT
__constant__ double cN;
#define cN2 cN2_OPSCONSTANT
__constant__ double cN2;
#define delta_TVD delta_TVD_OPSCONSTANT
__constant__ double delta_TVD;
#define dhN dhN_OPSCONSTANT
__constant__ double dhN;
#define dt dt_OPSCONSTANT
__constant__ double dt;
#define eps_TVD eps_TVD_OPSCONSTANT
__constant__ double eps_TVD;
#define gama gama_OPSCONSTANT
__constant__ double gama;
#define gamma_m1 gamma_m1_OPSCONSTANT
__constant__ double gamma_m1;
#define inv2Delta0block0 inv2Delta0block0_OPSCONSTANT
__constant__ double inv2Delta0block0;
#define inv2uref inv2uref_OPSCONSTANT
__constant__ double inv2uref;
#define invDelta0block0 invDelta0block0_OPSCONSTANT
__constant__ double invDelta0block0;
#define invMN invMN_OPSCONSTANT
__constant__ double invMN;
#define invMN2 invMN2_OPSCONSTANT
__constant__ double invMN2;
#define invRhat invRhat_OPSCONSTANT
__constant__ double invRhat;
#define invdelta_TVD invdelta_TVD_OPSCONSTANT
__constant__ double invdelta_TVD;
#define invgamma_m1 invgamma_m1_OPSCONSTANT
__constant__ double invgamma_m1;
#define invuref invuref_OPSCONSTANT
__constant__ double invuref;
#define kappa kappa_OPSCONSTANT
__constant__ double kappa;
#define kappa_TVD kappa_TVD_OPSCONSTANT
__constant__ double kappa_TVD;
#define niter niter_OPSCONSTANT
__constant__ int niter;
#define simulation_time simulation_time_OPSCONSTANT
__constant__ double simulation_time;
#define start_iter start_iter_OPSCONSTANT
__constant__ int start_iter;
#define thetavN2 thetavN2_OPSCONSTANT
__constant__ double thetavN2;
#define uref uref_OPSCONSTANT
__constant__ double uref;

void ops_init_backend() {}

//Dummy kernel to make sure constants are not optimized out
__global__ void ops_internal_this_is_stupid() {
((int*)&Delta0block0)[0]=0;
((int*)&HDF5_timing)[0]=0;
((int*)&Lref)[0]=0;
((int*)&MN)[0]=0;
((int*)&MN2)[0]=0;
((int*)&Rhat)[0]=0;
((int*)&block0np0)[0]=0;
((int*)&cN)[0]=0;
((int*)&cN2)[0]=0;
((int*)&delta_TVD)[0]=0;
((int*)&dhN)[0]=0;
((int*)&dt)[0]=0;
((int*)&eps_TVD)[0]=0;
((int*)&gama)[0]=0;
((int*)&gamma_m1)[0]=0;
((int*)&inv2Delta0block0)[0]=0;
((int*)&inv2uref)[0]=0;
((int*)&invDelta0block0)[0]=0;
((int*)&invMN)[0]=0;
((int*)&invMN2)[0]=0;
((int*)&invRhat)[0]=0;
((int*)&invdelta_TVD)[0]=0;
((int*)&invgamma_m1)[0]=0;
((int*)&invuref)[0]=0;
((int*)&kappa)[0]=0;
((int*)&kappa_TVD)[0]=0;
((int*)&niter)[0]=0;
((int*)&simulation_time)[0]=0;
((int*)&start_iter)[0]=0;
((int*)&thetavN2)[0]=0;
((int*)&uref)[0]=0;
}

void ops_decl_const_char(int dim, char const *type,
int size, char *dat, char const *name){
  ops_execute(OPS_instance::getOPSInstance());
  if (!strcmp(name,"Delta0block0")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(Delta0block0_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"HDF5_timing")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(HDF5_timing_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"Lref")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(Lref_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"MN")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(MN_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"MN2")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(MN2_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"Rhat")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(Rhat_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"block0np0")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(block0np0_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"cN")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(cN_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"cN2")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(cN2_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"delta_TVD")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(delta_TVD_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"dhN")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(dhN_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"dt")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(dt_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"eps_TVD")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(eps_TVD_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"gama")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(gama_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"gamma_m1")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(gamma_m1_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"inv2Delta0block0")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(inv2Delta0block0_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"inv2uref")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(inv2uref_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"invDelta0block0")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(invDelta0block0_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"invMN")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(invMN_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"invMN2")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(invMN2_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"invRhat")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(invRhat_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"invdelta_TVD")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(invdelta_TVD_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"invgamma_m1")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(invgamma_m1_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"invuref")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(invuref_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"kappa")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(kappa_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"kappa_TVD")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(kappa_TVD_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"niter")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(niter_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"simulation_time")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(simulation_time_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"start_iter")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(start_iter_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"thetavN2")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(thetavN2_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"uref")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(uref_OPSCONSTANT), dat, dim*size));
  }
  else
  {
    throw OPSException(OPS_RUNTIME_ERROR, "error: unknown const name");
  }
}


//user kernel files
#include "opensbliblock00Kernel021_hip_kernel.cpp"
#include "opensbliblock00Kernel019_hip_kernel.cpp"
#include "opensbliblock00Kernel020_hip_kernel.cpp"
#include "opensbliblock00Kernel009_hip_kernel.cpp"
#include "opensbliblock00Kernel011_hip_kernel.cpp"
#include "opensbliblock00Kernel010_hip_kernel.cpp"
#include "opensbliblock00Kernel017_hip_kernel.cpp"
#include "opensbliblock00Kernel018_hip_kernel.cpp"
#include "opensbliblock00Kernel006_hip_kernel.cpp"
#include "opensbliblock00Kernel016_hip_kernel.cpp"
#include "opensbliblock00Kernel022_hip_kernel.cpp"
#include "opensbliblock00Kernel002_hip_kernel.cpp"
#include "opensbliblock00Kernel003_hip_kernel.cpp"
#include "opensbliblock00Kernel004_hip_kernel.cpp"
#include "opensbliblock00Kernel005_hip_kernel.cpp"
