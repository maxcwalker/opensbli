//
// auto-generated by ops.py
//
__constant__ int dims_opensbliblock00Kernel004 [8][1];
static int dims_opensbliblock00Kernel004_h [8][1] = {{0}};

//user function
__device__

 void opensbliblock00Kernel004_gpu(const ACC<double> &a_B0,
  const ACC<double> &rhoE_B0,
  const ACC<double> &rho_B0,
  const
ACC<double> &rhou0_B0,
  const ACC<double> &u0_B0,
  ACC<double> &wk0_B0,
  ACC<double> &wk1_B0,
  ACC<double> &wk2_B0)
{
   double AVG_0_0_LEV_00 = 0.0;
   double AVG_0_0_LEV_01 = 0.0;
   double AVG_0_0_LEV_02 = 0.0;
   double AVG_0_0_LEV_10 = 0.0;
   double AVG_0_0_LEV_11 = 0.0;
   double AVG_0_0_LEV_12 = 0.0;
   double AVG_0_0_LEV_20 = 0.0;
   double AVG_0_0_LEV_21 = 0.0;
   double AVG_0_0_LEV_22 = 0.0;
   double AVG_0_REV_00 = 0.0;
   double AVG_0_REV_01 = 0.0;
   double AVG_0_REV_02 = 0.0;
   double AVG_0_REV_10 = 0.0;
   double AVG_0_REV_11 = 0.0;
   double AVG_0_REV_12 = 0.0;
   double AVG_0_REV_20 = 0.0;
   double AVG_0_REV_21 = 0.0;
   double AVG_0_REV_22 = 0.0;
   double AVG_0_a = 0.0;
   double AVG_0_rho = 0.0;
   double AVG_0_u0 = 0.0;
   double S = 0.0;
   double alpha_00 = 0.0;
   double alpha_01 = 0.0;
   double alpha_02 = 0.0;
   double alpha_10 = 0.0;
   double alpha_11 = 0.0;
   double alpha_12 = 0.0;
   double alpha_20 = 0.0;
   double alpha_21 = 0.0;
   double alpha_22 = 0.0;
   double g_00 = 0.0;
   double g_01 = 0.0;
   double g_10 = 0.0;
   double g_11 = 0.0;
   double g_20 = 0.0;
   double g_21 = 0.0;
   double gamma_0 = 0.0;
   double gamma_1 = 0.0;
   double gamma_2 = 0.0;
   double inv_AVG_a = 0.0;
   double inv_AVG_rho = 0.0;
   double phi_0 = 0.0;
   double phi_1 = 0.0;
   double phi_2 = 0.0;
   double phi_star_0 = 0.0;
   double phi_star_1 = 0.0;
   double phi_star_2 = 0.0;
   double sigma_0_0 = 0.0;
   double sigma_0_1 = 0.0;
   double sigma_0_2 = 0.0;
   double sigma_1_0 = 0.0;
   double sigma_1_1 = 0.0;
   double sigma_1_2 = 0.0;
   double t1 = 0.0;
   double t2 = 0.0;
   double theta_0 = 0.0;
   double theta_1 = 0.0;
   double theta_2 = 0.0;
   double theta_hat_00 = 0.0;
   double theta_hat_01 = 0.0;
   double theta_hat_10 = 0.0;
   double theta_hat_11 = 0.0;
   double theta_hat_20 = 0.0;
   double theta_hat_21 = 0.0;
   double ws_lambda_00 = 0.0;
   double ws_lambda_11 = 0.0;
   double ws_lambda_22 = 0.0;
   AVG_0_u0 = ((1.0/2.0))*(u0_B0(0) + u0_B0(-1));

   AVG_0_a = ((1.0/2.0))*(a_B0(0) + a_B0(-1));

   inv_AVG_a = 1.0/(AVG_0_a);

   inv_AVG_rho = 1.0/(AVG_0_rho);

    AVG_0_0_LEV_00 = ((1.0/4.0))*(2 - (inv_AVG_a*inv_AVG_a)*AVG_0_a*AVG_0_u0 +
      (inv_AVG_a*inv_AVG_a)*gama*AVG_0_a*AVG_0_u0)*AVG_0_u0*inv_AVG_a;

    AVG_0_0_LEV_01 = -(1.0/2.0)*(1 - (inv_AVG_a*inv_AVG_a)*AVG_0_a*AVG_0_u0 +
      (inv_AVG_a*inv_AVG_a)*gama*AVG_0_a*AVG_0_u0)*inv_AVG_a;

   AVG_0_0_LEV_02 = ((1.0/2.0))*(inv_AVG_a*inv_AVG_a)*gamma_m1;

    AVG_0_0_LEV_10 = -(1.0/2.0)*(-2 - (AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a) +
      (AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*gama);

   AVG_0_0_LEV_11 = (inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_0_u0;

   AVG_0_0_LEV_12 = -(inv_AVG_a*inv_AVG_a)*gamma_m1;

    AVG_0_0_LEV_20 = ((1.0/4.0))*(-2 - (inv_AVG_a*inv_AVG_a)*AVG_0_a*AVG_0_u0 +
      (inv_AVG_a*inv_AVG_a)*gama*AVG_0_a*AVG_0_u0)*AVG_0_u0*inv_AVG_a;

    AVG_0_0_LEV_21 = -(1.0/2.0)*(-1 - (inv_AVG_a*inv_AVG_a)*AVG_0_a*AVG_0_u0 +
      (inv_AVG_a*inv_AVG_a)*gama*AVG_0_a*AVG_0_u0)*inv_AVG_a;

   AVG_0_0_LEV_22 = ((1.0/2.0))*(inv_AVG_a*inv_AVG_a)*gamma_m1;

    alpha_00 = (-rho_B0(-1) + rho_B0(0))*AVG_0_0_LEV_00 + (-rhoE_B0(-1) + rhoE_B0(0))*AVG_0_0_LEV_02 + (-rhou0_B0(-1) +
      rhou0_B0(0))*AVG_0_0_LEV_01;

    alpha_10 = (-rho_B0(-1) + rho_B0(0))*AVG_0_0_LEV_10 + (-rhoE_B0(-1) + rhoE_B0(0))*AVG_0_0_LEV_12 + (-rhou0_B0(-1) +
      rhou0_B0(0))*AVG_0_0_LEV_11;

    alpha_20 = (-rho_B0(-1) + rho_B0(0))*AVG_0_0_LEV_20 + (-rhoE_B0(-1) + rhoE_B0(0))*AVG_0_0_LEV_22 + (-rhou0_B0(-1) +
      rhou0_B0(0))*AVG_0_0_LEV_21;

   AVG_0_u0 = ((1.0/2.0))*(u0_B0(0) + u0_B0(1));

   AVG_0_a = ((1.0/2.0))*(a_B0(0) + a_B0(1));

   inv_AVG_a = 1.0/(AVG_0_a);

   inv_AVG_rho = 1.0/(AVG_0_rho);

    AVG_0_0_LEV_00 = ((1.0/4.0))*(2 - (inv_AVG_a*inv_AVG_a)*AVG_0_a*AVG_0_u0 +
      (inv_AVG_a*inv_AVG_a)*gama*AVG_0_a*AVG_0_u0)*AVG_0_u0*inv_AVG_a;

    AVG_0_0_LEV_01 = -(1.0/2.0)*(1 - (inv_AVG_a*inv_AVG_a)*AVG_0_a*AVG_0_u0 +
      (inv_AVG_a*inv_AVG_a)*gama*AVG_0_a*AVG_0_u0)*inv_AVG_a;

   AVG_0_0_LEV_02 = ((1.0/2.0))*(inv_AVG_a*inv_AVG_a)*gamma_m1;

    AVG_0_0_LEV_10 = -(1.0/2.0)*(-2 - (AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a) +
      (AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*gama);

   AVG_0_0_LEV_11 = (inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_0_u0;

   AVG_0_0_LEV_12 = -(inv_AVG_a*inv_AVG_a)*gamma_m1;

    AVG_0_0_LEV_20 = ((1.0/4.0))*(-2 - (inv_AVG_a*inv_AVG_a)*AVG_0_a*AVG_0_u0 +
      (inv_AVG_a*inv_AVG_a)*gama*AVG_0_a*AVG_0_u0)*AVG_0_u0*inv_AVG_a;

    AVG_0_0_LEV_21 = -(1.0/2.0)*(-1 - (inv_AVG_a*inv_AVG_a)*AVG_0_a*AVG_0_u0 +
      (inv_AVG_a*inv_AVG_a)*gama*AVG_0_a*AVG_0_u0)*inv_AVG_a;

   AVG_0_0_LEV_22 = ((1.0/2.0))*(inv_AVG_a*inv_AVG_a)*gamma_m1;

    alpha_01 = (-rho_B0(0) + rho_B0(1))*AVG_0_0_LEV_00 + (-rhoE_B0(0) + rhoE_B0(1))*AVG_0_0_LEV_02 + (-rhou0_B0(0) +
      rhou0_B0(1))*AVG_0_0_LEV_01;

    alpha_11 = (-rho_B0(0) + rho_B0(1))*AVG_0_0_LEV_10 + (-rhoE_B0(0) + rhoE_B0(1))*AVG_0_0_LEV_12 + (-rhou0_B0(0) +
      rhou0_B0(1))*AVG_0_0_LEV_11;

    alpha_21 = (-rho_B0(0) + rho_B0(1))*AVG_0_0_LEV_20 + (-rhoE_B0(0) + rhoE_B0(1))*AVG_0_0_LEV_22 + (-rhou0_B0(0) +
      rhou0_B0(1))*AVG_0_0_LEV_21;

   ws_lambda_00 = -AVG_0_a + AVG_0_u0;

   ws_lambda_11 = AVG_0_u0;

   ws_lambda_22 = AVG_0_a + AVG_0_u0;

   AVG_0_REV_00 = 1;

   AVG_0_REV_01 = 1;

   AVG_0_REV_02 = 1;

   AVG_0_REV_10 = -AVG_0_a + AVG_0_u0;

   AVG_0_REV_11 = AVG_0_u0;

   AVG_0_REV_12 = AVG_0_a + AVG_0_u0;

   AVG_0_REV_20 = ((1.0/2.0))*(AVG_0_u0*AVG_0_u0) + (AVG_0_a*AVG_0_a)*invgamma_m1 - AVG_0_a*AVG_0_u0;

   AVG_0_REV_21 = ((1.0/2.0))*(AVG_0_u0*AVG_0_u0);

   AVG_0_REV_22 = ((1.0/2.0))*(AVG_0_u0*AVG_0_u0) + (AVG_0_a*AVG_0_a)*invgamma_m1 + AVG_0_a*AVG_0_u0;

   AVG_0_u0 = ((1.0/2.0))*(u0_B0(1) + u0_B0(2));

   AVG_0_a = ((1.0/2.0))*(a_B0(1) + a_B0(2));

   inv_AVG_a = 1.0/(AVG_0_a);

   inv_AVG_rho = 1.0/(AVG_0_rho);

    AVG_0_0_LEV_00 = ((1.0/4.0))*(2 - (inv_AVG_a*inv_AVG_a)*AVG_0_a*AVG_0_u0 +
      (inv_AVG_a*inv_AVG_a)*gama*AVG_0_a*AVG_0_u0)*AVG_0_u0*inv_AVG_a;

    AVG_0_0_LEV_01 = -(1.0/2.0)*(1 - (inv_AVG_a*inv_AVG_a)*AVG_0_a*AVG_0_u0 +
      (inv_AVG_a*inv_AVG_a)*gama*AVG_0_a*AVG_0_u0)*inv_AVG_a;

   AVG_0_0_LEV_02 = ((1.0/2.0))*(inv_AVG_a*inv_AVG_a)*gamma_m1;

    AVG_0_0_LEV_10 = -(1.0/2.0)*(-2 - (AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a) +
      (AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*gama);

   AVG_0_0_LEV_11 = (inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_0_u0;

   AVG_0_0_LEV_12 = -(inv_AVG_a*inv_AVG_a)*gamma_m1;

    AVG_0_0_LEV_20 = ((1.0/4.0))*(-2 - (inv_AVG_a*inv_AVG_a)*AVG_0_a*AVG_0_u0 +
      (inv_AVG_a*inv_AVG_a)*gama*AVG_0_a*AVG_0_u0)*AVG_0_u0*inv_AVG_a;

    AVG_0_0_LEV_21 = -(1.0/2.0)*(-1 - (inv_AVG_a*inv_AVG_a)*AVG_0_a*AVG_0_u0 +
      (inv_AVG_a*inv_AVG_a)*gama*AVG_0_a*AVG_0_u0)*inv_AVG_a;

   AVG_0_0_LEV_22 = ((1.0/2.0))*(inv_AVG_a*inv_AVG_a)*gamma_m1;

    alpha_02 = (-rho_B0(1) + rho_B0(2))*AVG_0_0_LEV_00 + (-rhoE_B0(1) + rhoE_B0(2))*AVG_0_0_LEV_02 + (-rhou0_B0(1) +
      rhou0_B0(2))*AVG_0_0_LEV_01;

    alpha_12 = (-rho_B0(1) + rho_B0(2))*AVG_0_0_LEV_10 + (-rhoE_B0(1) + rhoE_B0(2))*AVG_0_0_LEV_12 + (-rhou0_B0(1) +
      rhou0_B0(2))*AVG_0_0_LEV_11;

    alpha_22 = (-rho_B0(1) + rho_B0(2))*AVG_0_0_LEV_20 + (-rhoE_B0(1) + rhoE_B0(2))*AVG_0_0_LEV_22 + (-rhou0_B0(1) +
      rhou0_B0(2))*AVG_0_0_LEV_21;

    sigma_0_0 = ((fabs(ws_lambda_00) >= delta_TVD) ? (
   fabs(ws_lambda_00)
)
: (

      ((1.0/2.0))*(1.0/(invdelta_TVD*invdelta_TVD) + (ws_lambda_00*ws_lambda_00))*invdelta_TVD
));

    sigma_0_1 = ((fabs(ws_lambda_11) >= delta_TVD) ? (
   fabs(ws_lambda_11)
)
: (

      ((1.0/2.0))*(1.0/(invdelta_TVD*invdelta_TVD) + (ws_lambda_11*ws_lambda_11))*invdelta_TVD
));

    sigma_0_2 = ((fabs(ws_lambda_22) >= delta_TVD) ? (
   fabs(ws_lambda_22)
)
: (

      ((1.0/2.0))*(1.0/(invdelta_TVD*invdelta_TVD) + (ws_lambda_22*ws_lambda_22))*invdelta_TVD
));

   S = (alpha_01 > 0) ? 1 : ((alpha_01 < 0) ? -1 : 0);

   t1 = fmax(0.0, fmin(S*alpha_00, 2*fabs(alpha_01)));

   t2 = fmin(fabs(alpha_01), 2*S*alpha_00);

   g_00 = S*fmax(t1, t2);

   S = (alpha_11 > 0) ? 1 : ((alpha_11 < 0) ? -1 : 0);

   t1 = fmax(0.0, fmin(S*alpha_10, 2*fabs(alpha_11)));

   t2 = fmin(fabs(alpha_11), 2*S*alpha_10);

   g_10 = S*fmax(t1, t2);

   S = (alpha_21 > 0) ? 1 : ((alpha_21 < 0) ? -1 : 0);

   t1 = fmax(0.0, fmin(S*alpha_20, 2*fabs(alpha_21)));

   t2 = fmin(fabs(alpha_21), 2*S*alpha_20);

   g_20 = S*fmax(t1, t2);

   S = (alpha_02 > 0) ? 1 : ((alpha_02 < 0) ? -1 : 0);

   t1 = fmax(0.0, fmin(S*alpha_01, 2*fabs(alpha_02)));

   t2 = fmin(fabs(alpha_02), 2*S*alpha_01);

   g_01 = S*fmax(t1, t2);

   S = (alpha_12 > 0) ? 1 : ((alpha_12 < 0) ? -1 : 0);

   t1 = fmax(0.0, fmin(S*alpha_11, 2*fabs(alpha_12)));

   t2 = fmin(fabs(alpha_12), 2*S*alpha_11);

   g_11 = S*fmax(t1, t2);

   S = (alpha_22 > 0) ? 1 : ((alpha_22 < 0) ? -1 : 0);

   t1 = fmax(0.0, fmin(S*alpha_21, 2*fabs(alpha_22)));

   t2 = fmin(fabs(alpha_22), 2*S*alpha_21);

   g_21 = S*fmax(t1, t2);

   gamma_0 = ((alpha_01 == 0) ? (
   0
)
: (
   (-g_00 + g_01)*alpha_01*sigma_0_0/((alpha_01*alpha_01) + eps_TVD)
));

   gamma_1 = ((alpha_11 == 0) ? (
   0
)
: (
   (-g_10 + g_11)*alpha_11*sigma_0_1/((alpha_11*alpha_11) + eps_TVD)
));

   gamma_2 = ((alpha_21 == 0) ? (
   0
)
: (
   (-g_20 + g_21)*alpha_21*sigma_0_2/((alpha_21*alpha_21) + eps_TVD)
));

    sigma_1_0 = ((fabs(gamma_0) >= delta_TVD) ? (
   fabs(gamma_0)
)
: (
   ((1.0/2.0))*(1.0/(invdelta_TVD*invdelta_TVD)
      + (gamma_0*gamma_0))*invdelta_TVD
));

    sigma_1_1 = ((fabs(gamma_1) >= delta_TVD) ? (
   fabs(gamma_1)
)
: (
   ((1.0/2.0))*(1.0/(invdelta_TVD*invdelta_TVD)
      + (gamma_1*gamma_1))*invdelta_TVD
));

    sigma_1_2 = ((fabs(gamma_2) >= delta_TVD) ? (
   fabs(gamma_2)
)
: (
   ((1.0/2.0))*(1.0/(invdelta_TVD*invdelta_TVD)
      + (gamma_2*gamma_2))*invdelta_TVD
));

   phi_0 = -fabs(sigma_0_0 + sigma_1_0)*alpha_01 + 0.5*(g_00 + g_01)*sigma_0_0;

   phi_1 = -fabs(sigma_0_1 + sigma_1_1)*alpha_11 + 0.5*(g_10 + g_11)*sigma_0_1;

   phi_2 = -fabs(sigma_0_2 + sigma_1_2)*alpha_21 + 0.5*(g_20 + g_21)*sigma_0_2;

   t1 = -fabs(alpha_00) + fabs(alpha_01);

   t2 = fabs(alpha_00) + fabs(alpha_01) + eps_TVD;

   theta_hat_00 = (fabs(t1/t2)*fabs(t1/t2));

   t1 = -fabs(alpha_10) + fabs(alpha_11);

   t2 = fabs(alpha_10) + fabs(alpha_11) + eps_TVD;

   theta_hat_10 = (fabs(t1/t2)*fabs(t1/t2));

   t1 = -fabs(alpha_20) + fabs(alpha_21);

   t2 = fabs(alpha_20) + fabs(alpha_21) + eps_TVD;

   theta_hat_20 = (fabs(t1/t2)*fabs(t1/t2));

   t1 = -fabs(alpha_01) + fabs(alpha_02);

   t2 = fabs(alpha_01) + fabs(alpha_02) + eps_TVD;

   theta_hat_01 = (fabs(t1/t2)*fabs(t1/t2));

   t1 = -fabs(alpha_11) + fabs(alpha_12);

   t2 = fabs(alpha_11) + fabs(alpha_12) + eps_TVD;

   theta_hat_11 = (fabs(t1/t2)*fabs(t1/t2));

   t1 = -fabs(alpha_21) + fabs(alpha_22);

   t2 = fabs(alpha_21) + fabs(alpha_22) + eps_TVD;

   theta_hat_21 = (fabs(t1/t2)*fabs(t1/t2));

   theta_0 = fmax(theta_hat_00, theta_hat_01);

   theta_1 = fmax(theta_hat_10, theta_hat_11);

   theta_2 = fmax(theta_hat_20, theta_hat_21);

   phi_star_0 = kappa_TVD*phi_0*theta_0;

   phi_star_1 = kappa_TVD*phi_1*theta_1;

   phi_star_2 = kappa_TVD*phi_2*theta_2;

   wk0_B0(0) = 0.5*(AVG_0_REV_00*phi_star_0 + AVG_0_REV_01*phi_star_1 + AVG_0_REV_02*phi_star_2);

   wk1_B0(0) = 0.5*(AVG_0_REV_10*phi_star_0 + AVG_0_REV_11*phi_star_1 + AVG_0_REV_12*phi_star_2);

   wk2_B0(0) = 0.5*(AVG_0_REV_20*phi_star_0 + AVG_0_REV_21*phi_star_1 + AVG_0_REV_22*phi_star_2);

}



__global__ void ops_opensbliblock00Kernel004(
double* __restrict arg0,
double* __restrict arg1,
double* __restrict arg2,
double* __restrict arg3,
double* __restrict arg4,
double* __restrict arg5,
double* __restrict arg6,
double* __restrict arg7,
int size0 ){

  //Make sure constants are not optimized out
  if (size0==-1) dims_opensbliblock00Kernel004[0][0]=0;


  int idx_x = hipBlockDim_x * hipBlockIdx_x + hipThreadIdx_x;

  arg0 += idx_x * 1*1;
  arg1 += idx_x * 1*1;
  arg2 += idx_x * 1*1;
  arg3 += idx_x * 1*1;
  arg4 += idx_x * 1*1;
  arg5 += idx_x * 1*1;
  arg6 += idx_x * 1*1;
  arg7 += idx_x * 1*1;

  if (idx_x < size0) {
    const ACC<double> argp0(arg0);
    const ACC<double> argp1(arg1);
    const ACC<double> argp2(arg2);
    const ACC<double> argp3(arg3);
    const ACC<double> argp4(arg4);
    ACC<double> argp5(arg5);
    ACC<double> argp6(arg6);
    ACC<double> argp7(arg7);
    opensbliblock00Kernel004_gpu(argp0, argp1, argp2, argp3,
                   argp4, argp5, argp6, argp7);
  }

}

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel004(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7) {
#else
void ops_par_loop_opensbliblock00Kernel004_execute(ops_kernel_descriptor *desc) {
  int dim = desc->dim;
  #if OPS_MPI
  ops_block block = desc->block;
  #endif
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  #endif

  //Timing
  double t1,t2,c1,c2;

  ops_arg args[8] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7};


  #if CHECKPOINTING && !OPS_LAZY
  if (!ops_checkpointing_before(args,8,range,13)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,13,"opensbliblock00Kernel004");
    block->instance->OPS_kernels[13].count++;
    ops_timers_core(&c1,&t1);
  }

  //compute locally allocated range for the sub-block
  int start[1];
  int end[1];
  #if OPS_MPI && !OPS_LAZY
  sub_block_list sb = OPS_sub_block_list[block->index];
  #endif //OPS_MPI

  #ifdef OPS_MPI
  int arg_idx[1];
  #endif
  #ifdef OPS_MPI
  if (compute_ranges(args, 8,block, range, start, end, arg_idx) < 0) return;
  #else //OPS_MPI
  for ( int n=0; n<1; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #endif
  int xdim0 = args[0].dat->size[0];
  int xdim1 = args[1].dat->size[0];
  int xdim2 = args[2].dat->size[0];
  int xdim3 = args[3].dat->size[0];
  int xdim4 = args[4].dat->size[0];
  int xdim5 = args[5].dat->size[0];
  int xdim6 = args[6].dat->size[0];
  int xdim7 = args[7].dat->size[0];

  if (xdim0 != dims_opensbliblock00Kernel004_h[0][0] || xdim1 != dims_opensbliblock00Kernel004_h[1][0] || xdim2 != dims_opensbliblock00Kernel004_h[2][0] || xdim3 != dims_opensbliblock00Kernel004_h[3][0] || xdim4 != dims_opensbliblock00Kernel004_h[4][0] || xdim5 != dims_opensbliblock00Kernel004_h[5][0] || xdim6 != dims_opensbliblock00Kernel004_h[6][0] || xdim7 != dims_opensbliblock00Kernel004_h[7][0]) {
    dims_opensbliblock00Kernel004_h[0][0] = xdim0;
    dims_opensbliblock00Kernel004_h[1][0] = xdim1;
    dims_opensbliblock00Kernel004_h[2][0] = xdim2;
    dims_opensbliblock00Kernel004_h[3][0] = xdim3;
    dims_opensbliblock00Kernel004_h[4][0] = xdim4;
    dims_opensbliblock00Kernel004_h[5][0] = xdim5;
    dims_opensbliblock00Kernel004_h[6][0] = xdim6;
    dims_opensbliblock00Kernel004_h[7][0] = xdim7;
    hipSafeCall(block->instance->ostream(), hipMemcpyToSymbol(HIP_SYMBOL(dims_opensbliblock00Kernel004), dims_opensbliblock00Kernel004_h, sizeof(dims_opensbliblock00Kernel004)));
  }



  int x_size = MAX(0,end[0]-start[0]);

  dim3 grid( (x_size-1)/block->instance->OPS_block_size_x+ 1, 1, 1);
  dim3 tblock(block->instance->OPS_block_size_x,1,1);



  long long int dat0 = (block->instance->OPS_soa ? args[0].dat->type_size : args[0].dat->elem_size);
  long long int dat1 = (block->instance->OPS_soa ? args[1].dat->type_size : args[1].dat->elem_size);
  long long int dat2 = (block->instance->OPS_soa ? args[2].dat->type_size : args[2].dat->elem_size);
  long long int dat3 = (block->instance->OPS_soa ? args[3].dat->type_size : args[3].dat->elem_size);
  long long int dat4 = (block->instance->OPS_soa ? args[4].dat->type_size : args[4].dat->elem_size);
  long long int dat5 = (block->instance->OPS_soa ? args[5].dat->type_size : args[5].dat->elem_size);
  long long int dat6 = (block->instance->OPS_soa ? args[6].dat->type_size : args[6].dat->elem_size);
  long long int dat7 = (block->instance->OPS_soa ? args[7].dat->type_size : args[7].dat->elem_size);

  char *p_a[8];

  //set up initial pointers
  long long int base0 = args[0].dat->base_offset + 
           dat0 * 1 * (start[0] * args[0].stencil->stride[0]);
  p_a[0] = (char *)args[0].data_d + base0;

  long long int base1 = args[1].dat->base_offset + 
           dat1 * 1 * (start[0] * args[1].stencil->stride[0]);
  p_a[1] = (char *)args[1].data_d + base1;

  long long int base2 = args[2].dat->base_offset + 
           dat2 * 1 * (start[0] * args[2].stencil->stride[0]);
  p_a[2] = (char *)args[2].data_d + base2;

  long long int base3 = args[3].dat->base_offset + 
           dat3 * 1 * (start[0] * args[3].stencil->stride[0]);
  p_a[3] = (char *)args[3].data_d + base3;

  long long int base4 = args[4].dat->base_offset + 
           dat4 * 1 * (start[0] * args[4].stencil->stride[0]);
  p_a[4] = (char *)args[4].data_d + base4;

  long long int base5 = args[5].dat->base_offset + 
           dat5 * 1 * (start[0] * args[5].stencil->stride[0]);
  p_a[5] = (char *)args[5].data_d + base5;

  long long int base6 = args[6].dat->base_offset + 
           dat6 * 1 * (start[0] * args[6].stencil->stride[0]);
  p_a[6] = (char *)args[6].data_d + base6;

  long long int base7 = args[7].dat->base_offset + 
           dat7 * 1 * (start[0] * args[7].stencil->stride[0]);
  p_a[7] = (char *)args[7].data_d + base7;


  #ifndef OPS_LAZY
  ops_H_D_exchanges_device(args, 8);
  ops_halo_exchanges(args,8,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[13].mpi_time += t2-t1;
  }


  //call kernel wrapper function, passing in pointers to data
  if (x_size > 0)
    hipLaunchKernelGGL(ops_opensbliblock00Kernel004,grid ,tblock ,0 ,0 , (double *)p_a[0], (double *)p_a[1],
         (double *)p_a[2], (double *)p_a[3],
         (double *)p_a[4], (double *)p_a[5],
         (double *)p_a[6], (double *)p_a[7],x_size);

  hipSafeCall(block->instance->ostream(), hipGetLastError());

  if (block->instance->OPS_diags>1) {
    hipSafeCall(block->instance->ostream(), hipDeviceSynchronize());
    ops_timers_core(&c1,&t1);
    block->instance->OPS_kernels[13].time += t1-t2;
  }

  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 8);
  ops_set_halo_dirtybit3(&args[5],range);
  ops_set_halo_dirtybit3(&args[6],range);
  ops_set_halo_dirtybit3(&args[7],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[13].mpi_time += t2-t1;
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[13].transfer += ops_compute_transfer(dim, start, end, &arg7);
  }
}

#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel004(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3, ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)calloc(1,sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 1;
  desc->index = 13;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 13;
  for ( int i=0; i<2; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 8;
  desc->args = (ops_arg*)malloc(8*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg2.dat->index;
  desc->args[3] = arg3;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg3.dat->index;
  desc->args[4] = arg4;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg4.dat->index;
  desc->args[5] = arg5;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg5.dat->index;
  desc->args[6] = arg6;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg6.dat->index;
  desc->args[7] = arg7;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg7.dat->index;
  desc->function = ops_par_loop_opensbliblock00Kernel004_execute;
  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,13,"opensbliblock00Kernel004");
  }
  ops_enqueue_kernel(desc);
}
#endif
