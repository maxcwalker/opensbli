//
// auto-generated by ops.py
//

#include "./MPI_inline/opensbli_common.h"


void ops_init_backend() {}

void ops_decl_const_char2(int dim, char const *type,
int size, char *dat, char const *name){
  if (!strcmp(name,"Delta0block0")) {
    Delta0block0 = *(double*)dat;
  }
  else
  if (!strcmp(name,"HDF5_timing")) {
    HDF5_timing = *(int*)dat;
  }
  else
  if (!strcmp(name,"Lref")) {
    Lref = *(double*)dat;
  }
  else
  if (!strcmp(name,"MN")) {
    MN = *(double*)dat;
  }
  else
  if (!strcmp(name,"MN2")) {
    MN2 = *(double*)dat;
  }
  else
  if (!strcmp(name,"Rhat")) {
    Rhat = *(double*)dat;
  }
  else
  if (!strcmp(name,"block0np0")) {
    block0np0 = *(int*)dat;
  }
  else
  if (!strcmp(name,"cN")) {
    cN = *(double*)dat;
  }
  else
  if (!strcmp(name,"cN2")) {
    cN2 = *(double*)dat;
  }
  else
  if (!strcmp(name,"delta_TVD")) {
    delta_TVD = *(double*)dat;
  }
  else
  if (!strcmp(name,"dhN")) {
    dhN = *(double*)dat;
  }
  else
  if (!strcmp(name,"dt")) {
    dt = *(double*)dat;
  }
  else
  if (!strcmp(name,"eps_TVD")) {
    eps_TVD = *(double*)dat;
  }
  else
  if (!strcmp(name,"gama")) {
    gama = *(double*)dat;
  }
  else
  if (!strcmp(name,"gamma_m1")) {
    gamma_m1 = *(double*)dat;
  }
  else
  if (!strcmp(name,"inv2Delta0block0")) {
    inv2Delta0block0 = *(double*)dat;
  }
  else
  if (!strcmp(name,"inv2uref")) {
    inv2uref = *(double*)dat;
  }
  else
  if (!strcmp(name,"invDelta0block0")) {
    invDelta0block0 = *(double*)dat;
  }
  else
  if (!strcmp(name,"invMN")) {
    invMN = *(double*)dat;
  }
  else
  if (!strcmp(name,"invMN2")) {
    invMN2 = *(double*)dat;
  }
  else
  if (!strcmp(name,"invRhat")) {
    invRhat = *(double*)dat;
  }
  else
  if (!strcmp(name,"invdelta_TVD")) {
    invdelta_TVD = *(double*)dat;
  }
  else
  if (!strcmp(name,"invgamma_m1")) {
    invgamma_m1 = *(double*)dat;
  }
  else
  if (!strcmp(name,"invuref")) {
    invuref = *(double*)dat;
  }
  else
  if (!strcmp(name,"kappa")) {
    kappa = *(double*)dat;
  }
  else
  if (!strcmp(name,"kappa_TVD")) {
    kappa_TVD = *(double*)dat;
  }
  else
  if (!strcmp(name,"niter")) {
    niter = *(int*)dat;
  }
  else
  if (!strcmp(name,"simulation_time")) {
    simulation_time = *(double*)dat;
  }
  else
  if (!strcmp(name,"start_iter")) {
    start_iter = *(int*)dat;
  }
  else
  if (!strcmp(name,"thetavN2")) {
    thetavN2 = *(double*)dat;
  }
  else
  if (!strcmp(name,"uref")) {
    uref = *(double*)dat;
  }
  else
  {
    throw OPSException(OPS_RUNTIME_ERROR, "error: unknown const name");
  }
}

//user kernel files
#include "opensbliblock00Kernel021_mpiinline_kernel.cpp"
#include "opensbliblock00Kernel019_mpiinline_kernel.cpp"
#include "opensbliblock00Kernel020_mpiinline_kernel.cpp"
#include "opensbliblock00Kernel009_mpiinline_kernel.cpp"
#include "opensbliblock00Kernel011_mpiinline_kernel.cpp"
#include "opensbliblock00Kernel010_mpiinline_kernel.cpp"
#include "opensbliblock00Kernel017_mpiinline_kernel.cpp"
#include "opensbliblock00Kernel018_mpiinline_kernel.cpp"
#include "opensbliblock00Kernel006_mpiinline_kernel.cpp"
#include "opensbliblock00Kernel016_mpiinline_kernel.cpp"
#include "opensbliblock00Kernel022_mpiinline_kernel.cpp"
#include "opensbliblock00Kernel002_mpiinline_kernel.cpp"
#include "opensbliblock00Kernel003_mpiinline_kernel.cpp"
#include "opensbliblock00Kernel004_mpiinline_kernel.cpp"
#include "opensbliblock00Kernel005_mpiinline_kernel.cpp"
