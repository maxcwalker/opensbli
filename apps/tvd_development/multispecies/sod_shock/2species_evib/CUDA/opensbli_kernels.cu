//
// auto-generated by ops.py
//
//header
#define OPS_API 2
#define OPS_1D
#include "ops_lib_core.h"

#include "ops_cuda_rt_support.h"
#include "ops_cuda_reduction.h"

#include <cuComplex.h>

#ifdef OPS_MPI
#include "ops_mpi_core.h"
#endif
// global constants
__constant__ double Delta0block0;
__constant__ int HDF5_timing;
__constant__ double Lref;
__constant__ double MN;
__constant__ double MN2;
__constant__ double Re;
__constant__ double Rhat;
__constant__ int block0np0;
__constant__ double cN;
__constant__ double cN2;
__constant__ double delta_TVD;
__constant__ double dhN;
__constant__ double dt;
__constant__ double eps_TVD;
__constant__ double gama;
__constant__ double gamma_m1;
__constant__ double inv2Delta0block0;
__constant__ double inv2gamma_m1;
__constant__ double inv2uref;
__constant__ double invDelta0block0;
__constant__ double invMN;
__constant__ double invMN2;
__constant__ double invRe;
__constant__ double invRhat;
__constant__ double invdelta_TVD;
__constant__ double invgama;
__constant__ double invgamma_m1;
__constant__ double invuref;
__constant__ double kappa;
__constant__ double kappa_TVD;
__constant__ int niter;
__constant__ double simulation_time;
__constant__ int start_iter;
__constant__ double thetavN2;
__constant__ double uref;

void ops_init_backend() {}

void ops_decl_const_char(OPS_instance *instance, int dim, char const *type,
int size, char *dat, char const *name){
  ops_execute(instance);
  if (!strcmp(name,"Delta0block0")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(Delta0block0, dat, dim*size));
  }
  else
  if (!strcmp(name,"HDF5_timing")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(HDF5_timing, dat, dim*size));
  }
  else
  if (!strcmp(name,"Lref")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(Lref, dat, dim*size));
  }
  else
  if (!strcmp(name,"MN")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(MN, dat, dim*size));
  }
  else
  if (!strcmp(name,"MN2")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(MN2, dat, dim*size));
  }
  else
  if (!strcmp(name,"Re")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(Re, dat, dim*size));
  }
  else
  if (!strcmp(name,"Rhat")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(Rhat, dat, dim*size));
  }
  else
  if (!strcmp(name,"block0np0")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(block0np0, dat, dim*size));
  }
  else
  if (!strcmp(name,"cN")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(cN, dat, dim*size));
  }
  else
  if (!strcmp(name,"cN2")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(cN2, dat, dim*size));
  }
  else
  if (!strcmp(name,"delta_TVD")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(delta_TVD, dat, dim*size));
  }
  else
  if (!strcmp(name,"dhN")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(dhN, dat, dim*size));
  }
  else
  if (!strcmp(name,"dt")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(dt, dat, dim*size));
  }
  else
  if (!strcmp(name,"eps_TVD")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(eps_TVD, dat, dim*size));
  }
  else
  if (!strcmp(name,"gama")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(gama, dat, dim*size));
  }
  else
  if (!strcmp(name,"gamma_m1")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(gamma_m1, dat, dim*size));
  }
  else
  if (!strcmp(name,"inv2Delta0block0")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(inv2Delta0block0, dat, dim*size));
  }
  else
  if (!strcmp(name,"inv2gamma_m1")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(inv2gamma_m1, dat, dim*size));
  }
  else
  if (!strcmp(name,"inv2uref")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(inv2uref, dat, dim*size));
  }
  else
  if (!strcmp(name,"invDelta0block0")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(invDelta0block0, dat, dim*size));
  }
  else
  if (!strcmp(name,"invMN")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(invMN, dat, dim*size));
  }
  else
  if (!strcmp(name,"invMN2")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(invMN2, dat, dim*size));
  }
  else
  if (!strcmp(name,"invRe")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(invRe, dat, dim*size));
  }
  else
  if (!strcmp(name,"invRhat")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(invRhat, dat, dim*size));
  }
  else
  if (!strcmp(name,"invdelta_TVD")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(invdelta_TVD, dat, dim*size));
  }
  else
  if (!strcmp(name,"invgama")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(invgama, dat, dim*size));
  }
  else
  if (!strcmp(name,"invgamma_m1")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(invgamma_m1, dat, dim*size));
  }
  else
  if (!strcmp(name,"invuref")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(invuref, dat, dim*size));
  }
  else
  if (!strcmp(name,"kappa")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(kappa, dat, dim*size));
  }
  else
  if (!strcmp(name,"kappa_TVD")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(kappa_TVD, dat, dim*size));
  }
  else
  if (!strcmp(name,"niter")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(niter, dat, dim*size));
  }
  else
  if (!strcmp(name,"simulation_time")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(simulation_time, dat, dim*size));
  }
  else
  if (!strcmp(name,"start_iter")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(start_iter, dat, dim*size));
  }
  else
  if (!strcmp(name,"thetavN2")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(thetavN2, dat, dim*size));
  }
  else
  if (!strcmp(name,"uref")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(uref, dat, dim*size));
  }
  else
  {
    throw OPSException(OPS_RUNTIME_ERROR, "error: unknown const name");
  }
}


//user kernel files
#include "opensbliblock00Kernel022_cuda_kernel.cu"
#include "opensbliblock00Kernel020_cuda_kernel.cu"
#include "opensbliblock00Kernel021_cuda_kernel.cu"
#include "opensbliblock00Kernel009_cuda_kernel.cu"
#include "opensbliblock00Kernel015_cuda_kernel.cu"
#include "opensbliblock00Kernel008_cuda_kernel.cu"
#include "opensbliblock00Kernel018_cuda_kernel.cu"
#include "opensbliblock00Kernel019_cuda_kernel.cu"
#include "opensbliblock00Kernel006_cuda_kernel.cu"
#include "opensbliblock00Kernel016_cuda_kernel.cu"
#include "opensbliblock00Kernel017_cuda_kernel.cu"
#include "opensbliblock00Kernel023_cuda_kernel.cu"
#include "opensbliblock00Kernel002_cuda_kernel.cu"
#include "opensbliblock00Kernel003_cuda_kernel.cu"
#include "opensbliblock00Kernel004_cuda_kernel.cu"
#include "opensbliblock00Kernel005_cuda_kernel.cu"
