//
// auto-generated by ops.py
//
__constant__ int dims_opensbliblock00Kernel043 [8][1];
static int dims_opensbliblock00Kernel043_h [8][1] = {{0}};

//user function
__device__

 void opensbliblock00Kernel043_gpu(ACC<double> &rhoE_B0,
  ACC<double> &rhoN2_B0,
  ACC<double> &rhoNO_B0,
  ACC<double> &rhoN_B0,
  ACC<double> &rhoO2_B0,
  ACC<double> &rhoO_B0,
  ACC<double> &rhoev_B0,
  ACC<double> &rhou0_B0)
{
   double T = 0.0;
   double Tv = 0.0;
   double cN = 0.0;
   double cN2 = 0.0;
   double cNO = 0.0;
   double cO = 0.0;
   double cO2 = 0.0;
   double evN2 = 0.0;
   double evNO = 0.0;
   double evO2 = 0.0;
   double p0 = 0.0;
   double rhoref = 0.0;
   double u0 = 0.0;
   T = 3000;

   u0 = 0.0;

   p0 = 10000.0000000000;

   cN2 = 0.0693020000000000;

   cN = 0.145363000000000;

   cO2 = 2.50000000000000e-5;

   cO = 0.745802000000000;

   cNO = 0.0395080000000000;

   rhoref = 2.19339508222495e-6;

   rhoN2_B0(0) = cN2*rhoref;

   rhoN_B0(0) = cN*rhoref;

   rhoO2_B0(0) = cO2*rhoref;

   rhoO_B0(0) = cO*rhoref;

   rhoNO_B0(0) = cNO*rhoref;

   rhou0_B0(0) = u0*(cN*rhoref + cN2*rhoref + cNO*rhoref + cO*rhoref + cO2*rhoref);

   Tv = p0/(Rhat*(cN*rhoref/MN + cN2*rhoref/MN2 + cNO*rhoref/MNO + cO*rhoref/MO + cO2*rhoref/MO2));

   evO2 = Rhat*thetavO2/(MO2*(-1.0 + exp(thetavO2/Tv)));

   evN2 = Rhat*thetavN2/(MN2*(-1.0 + exp(thetavN2/Tv)));

   evNO = Rhat*thetavNO/(MNO*(-1.0 + exp(thetavNO/Tv)));

    rhoev_B0(0) = (cN2*evN2*rhoref + cNO*evNO*rhoref + cO2*evO2*rhoref)*(cN*rhoref + cN2*rhoref + cNO*rhoref + cO*rhoref
      + cO2*rhoref)/(cN2*rhoref + cNO*rhoref + cO2*rhoref);

    rhoE_B0(0) = (u0*u0)*(0.5*cN*rhoref + 0.5*cN2*rhoref + 0.5*cNO*rhoref + 0.5*cO*rhoref + 0.5*cO2*rhoref) +
      cN2*evN2*rhoref + cNO*evNO*rhoref + cO2*evO2*rhoref + p0*(1.5*cN*rhoref/MN + 1.5*cO*rhoref/MO + 2.5*cN2*rhoref/MN2
      + 2.5*cNO*rhoref/MNO + 2.5*cO2*rhoref/MO2)/(cN*rhoref/MN + cN2*rhoref/MN2 + cNO*rhoref/MNO + cO*rhoref/MO +
      cO2*rhoref/MO2) + 4186800.0*cN*dhN*rhoref/MN + 4186800.0*cNO*dhNO*rhoref/MNO + 4186800.0*cO*dhO*rhoref/MO;

}



__global__ void ops_opensbliblock00Kernel043(
double* __restrict arg0,
double* __restrict arg1,
double* __restrict arg2,
double* __restrict arg3,
double* __restrict arg4,
double* __restrict arg5,
double* __restrict arg6,
double* __restrict arg7,
int size0 ){


  int idx_x = blockDim.x * blockIdx.x + threadIdx.x;

  arg0 += idx_x * 1*1;
  arg1 += idx_x * 1*1;
  arg2 += idx_x * 1*1;
  arg3 += idx_x * 1*1;
  arg4 += idx_x * 1*1;
  arg5 += idx_x * 1*1;
  arg6 += idx_x * 1*1;
  arg7 += idx_x * 1*1;

  if (idx_x < size0) {
    ACC<double> argp0(arg0);
    ACC<double> argp1(arg1);
    ACC<double> argp2(arg2);
    ACC<double> argp3(arg3);
    ACC<double> argp4(arg4);
    ACC<double> argp5(arg5);
    ACC<double> argp6(arg6);
    ACC<double> argp7(arg7);
    opensbliblock00Kernel043_gpu(
     argp0, argp1, argp2, argp3, argp4,
     argp5, argp6, argp7);
  }

}

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel043(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7) {
#else
void ops_par_loop_opensbliblock00Kernel043_execute(ops_kernel_descriptor *desc) {
  int dim = desc->dim;
  #if OPS_MPI
  ops_block block = desc->block;
  #endif
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  #endif

  //Timing
  double t1,t2,c1,c2;

  ops_arg args[8] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7};


  #if CHECKPOINTING && !OPS_LAZY
  if (!ops_checkpointing_before(args,8,range,2)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,2,"opensbliblock00Kernel043");
    block->instance->OPS_kernels[2].count++;
    ops_timers_core(&c1,&t1);
  }

  //compute locally allocated range for the sub-block
  int start[1];
  int end[1];

  #ifdef OPS_MPI
  int arg_idx[1];
  #endif
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<1; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 8,block, range, start, end, arg_idx) < 0) return;
  #endif

  int xdim0 = args[0].dat->size[0];
  int xdim1 = args[1].dat->size[0];
  int xdim2 = args[2].dat->size[0];
  int xdim3 = args[3].dat->size[0];
  int xdim4 = args[4].dat->size[0];
  int xdim5 = args[5].dat->size[0];
  int xdim6 = args[6].dat->size[0];
  int xdim7 = args[7].dat->size[0];

  if (xdim0 != dims_opensbliblock00Kernel043_h[0][0] || xdim1 != dims_opensbliblock00Kernel043_h[1][0] || xdim2 != dims_opensbliblock00Kernel043_h[2][0] || xdim3 != dims_opensbliblock00Kernel043_h[3][0] || xdim4 != dims_opensbliblock00Kernel043_h[4][0] || xdim5 != dims_opensbliblock00Kernel043_h[5][0] || xdim6 != dims_opensbliblock00Kernel043_h[6][0] || xdim7 != dims_opensbliblock00Kernel043_h[7][0]) {
    dims_opensbliblock00Kernel043_h[0][0] = xdim0;
    dims_opensbliblock00Kernel043_h[1][0] = xdim1;
    dims_opensbliblock00Kernel043_h[2][0] = xdim2;
    dims_opensbliblock00Kernel043_h[3][0] = xdim3;
    dims_opensbliblock00Kernel043_h[4][0] = xdim4;
    dims_opensbliblock00Kernel043_h[5][0] = xdim5;
    dims_opensbliblock00Kernel043_h[6][0] = xdim6;
    dims_opensbliblock00Kernel043_h[7][0] = xdim7;
    cutilSafeCall(block->instance->ostream(), cudaMemcpyToSymbol( dims_opensbliblock00Kernel043, dims_opensbliblock00Kernel043_h, sizeof(dims_opensbliblock00Kernel043)));
  }



  int x_size = MAX(0,end[0]-start[0]);

  dim3 grid( (x_size-1)/block->instance->OPS_block_size_x+ 1, 1, 1);
  dim3 tblock(block->instance->OPS_block_size_x,1,1);



  long long int dat0 = (block->instance->OPS_soa ? args[0].dat->type_size : args[0].dat->elem_size);
  long long int dat1 = (block->instance->OPS_soa ? args[1].dat->type_size : args[1].dat->elem_size);
  long long int dat2 = (block->instance->OPS_soa ? args[2].dat->type_size : args[2].dat->elem_size);
  long long int dat3 = (block->instance->OPS_soa ? args[3].dat->type_size : args[3].dat->elem_size);
  long long int dat4 = (block->instance->OPS_soa ? args[4].dat->type_size : args[4].dat->elem_size);
  long long int dat5 = (block->instance->OPS_soa ? args[5].dat->type_size : args[5].dat->elem_size);
  long long int dat6 = (block->instance->OPS_soa ? args[6].dat->type_size : args[6].dat->elem_size);
  long long int dat7 = (block->instance->OPS_soa ? args[7].dat->type_size : args[7].dat->elem_size);

  char *p_a[8];

  //set up initial pointers
  long long int base0 = args[0].dat->base_offset + 
           dat0 * 1 * (start[0] * args[0].stencil->stride[0]);
  p_a[0] = (char *)args[0].data_d + base0;

  long long int base1 = args[1].dat->base_offset + 
           dat1 * 1 * (start[0] * args[1].stencil->stride[0]);
  p_a[1] = (char *)args[1].data_d + base1;

  long long int base2 = args[2].dat->base_offset + 
           dat2 * 1 * (start[0] * args[2].stencil->stride[0]);
  p_a[2] = (char *)args[2].data_d + base2;

  long long int base3 = args[3].dat->base_offset + 
           dat3 * 1 * (start[0] * args[3].stencil->stride[0]);
  p_a[3] = (char *)args[3].data_d + base3;

  long long int base4 = args[4].dat->base_offset + 
           dat4 * 1 * (start[0] * args[4].stencil->stride[0]);
  p_a[4] = (char *)args[4].data_d + base4;

  long long int base5 = args[5].dat->base_offset + 
           dat5 * 1 * (start[0] * args[5].stencil->stride[0]);
  p_a[5] = (char *)args[5].data_d + base5;

  long long int base6 = args[6].dat->base_offset + 
           dat6 * 1 * (start[0] * args[6].stencil->stride[0]);
  p_a[6] = (char *)args[6].data_d + base6;

  long long int base7 = args[7].dat->base_offset + 
           dat7 * 1 * (start[0] * args[7].stencil->stride[0]);
  p_a[7] = (char *)args[7].data_d + base7;


  #ifndef OPS_LAZY
  ops_H_D_exchanges_device(args, 8);
  ops_halo_exchanges(args,8,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[2].mpi_time += t2-t1;
  }


  //call kernel wrapper function, passing in pointers to data
  if (x_size > 0)
    ops_opensbliblock00Kernel043<<<grid, tblock >>> ( 
     (double *)p_a[0], (double *)p_a[1],
     (double *)p_a[2], (double *)p_a[3],
     (double *)p_a[4], (double *)p_a[5],
     (double *)p_a[6], (double *)p_a[7],
    x_size);

  cutilSafeCall(block->instance->ostream(), cudaGetLastError());

  if (block->instance->OPS_diags>1) {
    cutilSafeCall(block->instance->ostream(), cudaDeviceSynchronize());
    ops_timers_core(&c1,&t1);
    block->instance->OPS_kernels[2].time += t1-t2;
  }

  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 8);
  ops_set_halo_dirtybit3(&args[0],range);
  ops_set_halo_dirtybit3(&args[1],range);
  ops_set_halo_dirtybit3(&args[2],range);
  ops_set_halo_dirtybit3(&args[3],range);
  ops_set_halo_dirtybit3(&args[4],range);
  ops_set_halo_dirtybit3(&args[5],range);
  ops_set_halo_dirtybit3(&args[6],range);
  ops_set_halo_dirtybit3(&args[7],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[2].mpi_time += t2-t1;
    block->instance->OPS_kernels[2].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[2].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[2].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[2].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[2].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[2].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[2].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[2].transfer += ops_compute_transfer(dim, start, end, &arg7);
  }
}

#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel043(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7) {
  ops_arg args[8] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 };

  //create kernel descriptor and pass it to ops_enqueue_kernel
  create_kerneldesc_and_enque(name, args, 8, 2, dim, 1, range, block, ops_par_loop_opensbliblock00Kernel043_execute);
}
#endif
