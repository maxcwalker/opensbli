//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel035(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11,
 ops_arg arg12, ops_arg arg13, ops_arg arg14, ops_arg arg15,
 ops_arg arg16, ops_arg arg17, ops_arg arg18, ops_arg arg19,
 ops_arg arg20, ops_arg arg21, ops_arg arg22, ops_arg arg23,
 ops_arg arg24, ops_arg arg25, ops_arg arg26, ops_arg arg27) {
#else
void ops_par_loop_opensbliblock00Kernel035_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  ops_arg arg9 = desc->args[9];
  ops_arg arg10 = desc->args[10];
  ops_arg arg11 = desc->args[11];
  ops_arg arg12 = desc->args[12];
  ops_arg arg13 = desc->args[13];
  ops_arg arg14 = desc->args[14];
  ops_arg arg15 = desc->args[15];
  ops_arg arg16 = desc->args[16];
  ops_arg arg17 = desc->args[17];
  ops_arg arg18 = desc->args[18];
  ops_arg arg19 = desc->args[19];
  ops_arg arg20 = desc->args[20];
  ops_arg arg21 = desc->args[21];
  ops_arg arg22 = desc->args[22];
  ops_arg arg23 = desc->args[23];
  ops_arg arg24 = desc->args[24];
  ops_arg arg25 = desc->args[25];
  ops_arg arg26 = desc->args[26];
  ops_arg arg27 = desc->args[27];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[28] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,28,range,26)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,26,"opensbliblock00Kernel035");
    block->instance->OPS_kernels[26].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "opensbliblock00Kernel035");
  #endif


  //compute locally allocated range for the sub-block
  int start[1];
  int end[1];
  int arg_idx[1];
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<1; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 28,block, range, start, end, arg_idx) < 0) return;
  #endif


  #if defined(OPS_MPI)
  #if defined(OPS_LAZY)
  sub_block_list sb = OPS_sub_block_list[block->index];
  arg_idx[0] = sb->decomp_disp[0];
  #else
  arg_idx[0] -= start[0];
  #endif
  #else //OPS_MPI
  arg_idx[0] = 0;
  #endif //OPS_MPI

  //initialize global variable with the dimension of dats

  //set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset;
  double * __restrict__ T_B0_p = (double *)(args[0].data + base0);

  int base1 = args[1].dat->base_offset;
  double * __restrict__ Tv_B0_p = (double *)(args[1].data + base1);

  int base2 = args[2].dat->base_offset;
  double * __restrict__ YN2_B0_p = (double *)(args[2].data + base2);

  int base3 = args[3].dat->base_offset;
  double * __restrict__ YNO_B0_p = (double *)(args[3].data + base3);

  int base4 = args[4].dat->base_offset;
  double * __restrict__ YN_B0_p = (double *)(args[4].data + base4);

  int base5 = args[5].dat->base_offset;
  double * __restrict__ YO_B0_p = (double *)(args[5].data + base5);

  int base6 = args[6].dat->base_offset;
  double * __restrict__ evN2_B0_p = (double *)(args[6].data + base6);

  int base7 = args[7].dat->base_offset;
  double * __restrict__ evNO_B0_p = (double *)(args[7].data + base7);

  int base8 = args[8].dat->base_offset;
  double * __restrict__ evO2_B0_p = (double *)(args[8].data + base8);

  int base9 = args[9].dat->base_offset;
  double * __restrict__ kappa_B0_p = (double *)(args[9].data + base9);

  int base10 = args[10].dat->base_offset;
  double * __restrict__ kappav_B0_p = (double *)(args[10].data + base10);

  int base11 = args[11].dat->base_offset;
  double * __restrict__ mu_B0_p = (double *)(args[11].data + base11);

  int base12 = args[12].dat->base_offset;
  double * __restrict__ u0_B0_p = (double *)(args[12].data + base12);

  int base13 = args[13].dat->base_offset;
  double * __restrict__ wk0_B0_p = (double *)(args[13].data + base13);

  int base14 = args[14].dat->base_offset;
  double * __restrict__ yN2_B0_p = (double *)(args[14].data + base14);

  int base15 = args[15].dat->base_offset;
  double * __restrict__ yNO_B0_p = (double *)(args[15].data + base15);

  int base16 = args[16].dat->base_offset;
  double * __restrict__ yN_B0_p = (double *)(args[16].data + base16);

  int base17 = args[17].dat->base_offset;
  double * __restrict__ yO2_B0_p = (double *)(args[17].data + base17);

  int base18 = args[18].dat->base_offset;
  double * __restrict__ yO_B0_p = (double *)(args[18].data + base18);

  int base19 = args[19].dat->base_offset;
  double * __restrict__ Residual0_B0_p = (double *)(args[19].data + base19);

  int base20 = args[20].dat->base_offset;
  double * __restrict__ Residual1_B0_p = (double *)(args[20].data + base20);

  int base21 = args[21].dat->base_offset;
  double * __restrict__ Residual2_B0_p = (double *)(args[21].data + base21);

  int base22 = args[22].dat->base_offset;
  double * __restrict__ Residual3_B0_p = (double *)(args[22].data + base22);

  int base23 = args[23].dat->base_offset;
  double * __restrict__ Residual4_B0_p = (double *)(args[23].data + base23);

  int base24 = args[24].dat->base_offset;
  double * __restrict__ Residual5_B0_p = (double *)(args[24].data + base24);

  int base25 = args[25].dat->base_offset;
  double * __restrict__ Residual6_B0_p = (double *)(args[25].data + base25);

  int base26 = args[26].dat->base_offset;
  double * __restrict__ Residual7_B0_p = (double *)(args[26].data + base26);




  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_host(args, 28);
  ops_halo_exchanges(args,28,range);
  ops_H_D_exchanges_host(args, 28);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[26].mpi_time += __t1-__t2;
  }

  #pragma omp parallel for
  for ( int n_x=start[0]; n_x<end[0]; n_x++ ){
    int idx[] = {arg_idx[0]+n_x};
    const ACC<double> T_B0(T_B0_p + n_x*1);
    const ACC<double> Tv_B0(Tv_B0_p + n_x*1);
    const ACC<double> YN2_B0(YN2_B0_p + n_x*1);
    const ACC<double> YNO_B0(YNO_B0_p + n_x*1);
    const ACC<double> YN_B0(YN_B0_p + n_x*1);
    const ACC<double> YO_B0(YO_B0_p + n_x*1);
    const ACC<double> evN2_B0(evN2_B0_p + n_x*1);
    const ACC<double> evNO_B0(evNO_B0_p + n_x*1);
    const ACC<double> evO2_B0(evO2_B0_p + n_x*1);
    const ACC<double> kappa_B0(kappa_B0_p + n_x*1);
    const ACC<double> kappav_B0(kappav_B0_p + n_x*1);
    const ACC<double> mu_B0(mu_B0_p + n_x*1);
    const ACC<double> u0_B0(u0_B0_p + n_x*1);
    const ACC<double> wk0_B0(wk0_B0_p + n_x*1);
    const ACC<double> yN2_B0(yN2_B0_p + n_x*1);
    const ACC<double> yNO_B0(yNO_B0_p + n_x*1);
    const ACC<double> yN_B0(yN_B0_p + n_x*1);
    const ACC<double> yO2_B0(yO2_B0_p + n_x*1);
    const ACC<double> yO_B0(yO_B0_p + n_x*1);
    ACC<double> Residual0_B0(Residual0_B0_p + n_x*1);
    ACC<double> Residual1_B0(Residual1_B0_p + n_x*1);
    ACC<double> Residual2_B0(Residual2_B0_p + n_x*1);
    ACC<double> Residual3_B0(Residual3_B0_p + n_x*1);
    ACC<double> Residual4_B0(Residual4_B0_p + n_x*1);
    ACC<double> Residual5_B0(Residual5_B0_p + n_x*1);
    ACC<double> Residual6_B0(Residual6_B0_p + n_x*1);
    ACC<double> Residual7_B0(Residual7_B0_p + n_x*1);
    
   double d1_T_dx = 0.0;
   double d1_Tv_dx = 0.0;
   double d1_YN2_dx = 0.0;
   double d1_YNO_dx = 0.0;
   double d1_YN_dx = 0.0;
   double d1_YO_dx = 0.0;
   double d1_evN2_dx = 0.0;
   double d1_evNO_dx = 0.0;
   double d1_evO2_dx = 0.0;
   double d1_kappa_dx = 0.0;
   double d1_kappav_dx = 0.0;
   double d1_mu_dx = 0.0;
   double d1_yN2_dx = 0.0;
   double d1_yNO_dx = 0.0;
   double d1_yN_dx = 0.0;
   double d1_yO2_dx = 0.0;
   double d1_yO_dx = 0.0;
   double d2_T_dx = 0.0;
   double d2_Tv_dx = 0.0;
   double d2_YN2_dx = 0.0;
   double d2_YNO_dx = 0.0;
   double d2_YN_dx = 0.0;
   double d2_YO_dx = 0.0;
   double d2_u0_dx = 0.0;
   double d2_yN2_dx = 0.0;
   double d2_yNO_dx = 0.0;
   double d2_yN_dx = 0.0;
   double d2_yO2_dx = 0.0;
   double d2_yO_dx = 0.0;
   if (idx[0] == 0){

      d1_T_dx = (3.0*T_B0(1) + 0.333333333333333*T_B0(3) - 1.5*T_B0(2) - 1.83333333333333*T_B0(0))*invDelta0block0;

       d1_Tv_dx = (3.0*Tv_B0(1) + 0.333333333333333*Tv_B0(3) - 1.5*Tv_B0(2) -
            1.83333333333333*Tv_B0(0))*invDelta0block0;

       d1_YN2_dx = (3.0*YN2_B0(1) + 0.333333333333333*YN2_B0(3) - 1.5*YN2_B0(2) -
            1.83333333333333*YN2_B0(0))*invDelta0block0;

       d1_YNO_dx = (3.0*YNO_B0(1) + 0.333333333333333*YNO_B0(3) - 1.5*YNO_B0(2) -
            1.83333333333333*YNO_B0(0))*invDelta0block0;

       d1_YN_dx = (3.0*YN_B0(1) + 0.333333333333333*YN_B0(3) - 1.5*YN_B0(2) -
            1.83333333333333*YN_B0(0))*invDelta0block0;

       d1_YO_dx = (3.0*YO_B0(1) + 0.333333333333333*YO_B0(3) - 1.5*YO_B0(2) -
            1.83333333333333*YO_B0(0))*invDelta0block0;

       d1_evN2_dx = (3.0*evN2_B0(1) + 0.333333333333333*evN2_B0(3) - 1.5*evN2_B0(2) -
            1.83333333333333*evN2_B0(0))*invDelta0block0;

       d1_evNO_dx = (3.0*evNO_B0(1) + 0.333333333333333*evNO_B0(3) - 1.5*evNO_B0(2) -
            1.83333333333333*evNO_B0(0))*invDelta0block0;

       d1_evO2_dx = (3.0*evO2_B0(1) + 0.333333333333333*evO2_B0(3) - 1.5*evO2_B0(2) -
            1.83333333333333*evO2_B0(0))*invDelta0block0;

       d1_kappa_dx = (3.0*kappa_B0(1) + 0.333333333333333*kappa_B0(3) - 1.5*kappa_B0(2) -
            1.83333333333333*kappa_B0(0))*invDelta0block0;

       d1_kappav_dx = (3.0*kappav_B0(1) + 0.333333333333333*kappav_B0(3) - 1.5*kappav_B0(2) -
            1.83333333333333*kappav_B0(0))*invDelta0block0;

       d1_mu_dx = (3.0*mu_B0(1) + 0.333333333333333*mu_B0(3) - 1.5*mu_B0(2) -
            1.83333333333333*mu_B0(0))*invDelta0block0;

       d1_yN2_dx = (3.0*yN2_B0(1) + 0.333333333333333*yN2_B0(3) - 1.5*yN2_B0(2) -
            1.83333333333333*yN2_B0(0))*invDelta0block0;

       d1_yNO_dx = (3.0*yNO_B0(1) + 0.333333333333333*yNO_B0(3) - 1.5*yNO_B0(2) -
            1.83333333333333*yNO_B0(0))*invDelta0block0;

       d1_yN_dx = (3.0*yN_B0(1) + 0.333333333333333*yN_B0(3) - 1.5*yN_B0(2) -
            1.83333333333333*yN_B0(0))*invDelta0block0;

       d1_yO2_dx = (3.0*yO2_B0(1) + 0.333333333333333*yO2_B0(3) - 1.5*yO2_B0(2) -
            1.83333333333333*yO2_B0(0))*invDelta0block0;

       d1_yO_dx = (3.0*yO_B0(1) + 0.333333333333333*yO_B0(3) - 1.5*yO_B0(2) -
            1.83333333333333*yO_B0(0))*invDelta0block0;

   }

   else if (idx[0] == 1){

       d1_T_dx = (0.0394168524399447*T_B0(2) + 0.00571369039775442*T_B0(4) + 0.719443173328855*T_B0(1) -
            0.322484932882161*T_B0(0) - 0.0658051057710389*T_B0(3) - 0.376283677513354*T_B0(-1))*invDelta0block0;

       d1_Tv_dx = (0.0394168524399447*Tv_B0(2) + 0.00571369039775442*Tv_B0(4) + 0.719443173328855*Tv_B0(1) -
            0.322484932882161*Tv_B0(0) - 0.0658051057710389*Tv_B0(3) - 0.376283677513354*Tv_B0(-1))*invDelta0block0;

       d1_YN2_dx = (0.0394168524399447*YN2_B0(2) + 0.00571369039775442*YN2_B0(4) + 0.719443173328855*YN2_B0(1) -
            0.322484932882161*YN2_B0(0) - 0.0658051057710389*YN2_B0(3) - 0.376283677513354*YN2_B0(-1))*invDelta0block0;

       d1_YNO_dx = (0.0394168524399447*YNO_B0(2) + 0.00571369039775442*YNO_B0(4) + 0.719443173328855*YNO_B0(1) -
            0.322484932882161*YNO_B0(0) - 0.0658051057710389*YNO_B0(3) - 0.376283677513354*YNO_B0(-1))*invDelta0block0;

       d1_YN_dx = (0.0394168524399447*YN_B0(2) + 0.00571369039775442*YN_B0(4) + 0.719443173328855*YN_B0(1) -
            0.322484932882161*YN_B0(0) - 0.0658051057710389*YN_B0(3) - 0.376283677513354*YN_B0(-1))*invDelta0block0;

       d1_YO_dx = (0.0394168524399447*YO_B0(2) + 0.00571369039775442*YO_B0(4) + 0.719443173328855*YO_B0(1) -
            0.322484932882161*YO_B0(0) - 0.0658051057710389*YO_B0(3) - 0.376283677513354*YO_B0(-1))*invDelta0block0;

       d1_evN2_dx = (0.0394168524399447*evN2_B0(2) + 0.00571369039775442*evN2_B0(4) + 0.719443173328855*evN2_B0(1) -
            0.322484932882161*evN2_B0(0) - 0.0658051057710389*evN2_B0(3) -
            0.376283677513354*evN2_B0(-1))*invDelta0block0;

       d1_evNO_dx = (0.0394168524399447*evNO_B0(2) + 0.00571369039775442*evNO_B0(4) + 0.719443173328855*evNO_B0(1) -
            0.322484932882161*evNO_B0(0) - 0.0658051057710389*evNO_B0(3) -
            0.376283677513354*evNO_B0(-1))*invDelta0block0;

       d1_evO2_dx = (0.0394168524399447*evO2_B0(2) + 0.00571369039775442*evO2_B0(4) + 0.719443173328855*evO2_B0(1) -
            0.322484932882161*evO2_B0(0) - 0.0658051057710389*evO2_B0(3) -
            0.376283677513354*evO2_B0(-1))*invDelta0block0;

       d1_kappa_dx = (0.0394168524399447*kappa_B0(2) + 0.00571369039775442*kappa_B0(4) + 0.719443173328855*kappa_B0(1) -
            0.322484932882161*kappa_B0(0) - 0.0658051057710389*kappa_B0(3) -
            0.376283677513354*kappa_B0(-1))*invDelta0block0;

       d1_kappav_dx = (0.0394168524399447*kappav_B0(2) + 0.00571369039775442*kappav_B0(4) +
            0.719443173328855*kappav_B0(1) - 0.322484932882161*kappav_B0(0) - 0.0658051057710389*kappav_B0(3) -
            0.376283677513354*kappav_B0(-1))*invDelta0block0;

       d1_mu_dx = (0.0394168524399447*mu_B0(2) + 0.00571369039775442*mu_B0(4) + 0.719443173328855*mu_B0(1) -
            0.322484932882161*mu_B0(0) - 0.0658051057710389*mu_B0(3) - 0.376283677513354*mu_B0(-1))*invDelta0block0;

       d1_yN2_dx = (0.0394168524399447*yN2_B0(2) + 0.00571369039775442*yN2_B0(4) + 0.719443173328855*yN2_B0(1) -
            0.322484932882161*yN2_B0(0) - 0.0658051057710389*yN2_B0(3) - 0.376283677513354*yN2_B0(-1))*invDelta0block0;

       d1_yNO_dx = (0.0394168524399447*yNO_B0(2) + 0.00571369039775442*yNO_B0(4) + 0.719443173328855*yNO_B0(1) -
            0.322484932882161*yNO_B0(0) - 0.0658051057710389*yNO_B0(3) - 0.376283677513354*yNO_B0(-1))*invDelta0block0;

       d1_yN_dx = (0.0394168524399447*yN_B0(2) + 0.00571369039775442*yN_B0(4) + 0.719443173328855*yN_B0(1) -
            0.322484932882161*yN_B0(0) - 0.0658051057710389*yN_B0(3) - 0.376283677513354*yN_B0(-1))*invDelta0block0;

       d1_yO2_dx = (0.0394168524399447*yO2_B0(2) + 0.00571369039775442*yO2_B0(4) + 0.719443173328855*yO2_B0(1) -
            0.322484932882161*yO2_B0(0) - 0.0658051057710389*yO2_B0(3) - 0.376283677513354*yO2_B0(-1))*invDelta0block0;

       d1_yO_dx = (0.0394168524399447*yO_B0(2) + 0.00571369039775442*yO_B0(4) + 0.719443173328855*yO_B0(1) -
            0.322484932882161*yO_B0(0) - 0.0658051057710389*yO_B0(3) - 0.376283677513354*yO_B0(-1))*invDelta0block0;

   }

   else if (idx[0] == 2){

       d1_T_dx = (0.197184333887745*T_B0(0) + 0.521455851089587*T_B0(1) + 0.113446470384241*T_B0(-2) -
            0.00412637789557492*T_B0(3) - 0.0367146847001261*T_B0(2) - 0.791245592765872*T_B0(-1))*invDelta0block0;

       d1_Tv_dx = (0.197184333887745*Tv_B0(0) + 0.521455851089587*Tv_B0(1) + 0.113446470384241*Tv_B0(-2) -
            0.00412637789557492*Tv_B0(3) - 0.0367146847001261*Tv_B0(2) - 0.791245592765872*Tv_B0(-1))*invDelta0block0;

       d1_YN2_dx = (0.197184333887745*YN2_B0(0) + 0.521455851089587*YN2_B0(1) + 0.113446470384241*YN2_B0(-2) -
            0.00412637789557492*YN2_B0(3) - 0.0367146847001261*YN2_B0(2) -
            0.791245592765872*YN2_B0(-1))*invDelta0block0;

       d1_YNO_dx = (0.197184333887745*YNO_B0(0) + 0.521455851089587*YNO_B0(1) + 0.113446470384241*YNO_B0(-2) -
            0.00412637789557492*YNO_B0(3) - 0.0367146847001261*YNO_B0(2) -
            0.791245592765872*YNO_B0(-1))*invDelta0block0;

       d1_YN_dx = (0.197184333887745*YN_B0(0) + 0.521455851089587*YN_B0(1) + 0.113446470384241*YN_B0(-2) -
            0.00412637789557492*YN_B0(3) - 0.0367146847001261*YN_B0(2) - 0.791245592765872*YN_B0(-1))*invDelta0block0;

       d1_YO_dx = (0.197184333887745*YO_B0(0) + 0.521455851089587*YO_B0(1) + 0.113446470384241*YO_B0(-2) -
            0.00412637789557492*YO_B0(3) - 0.0367146847001261*YO_B0(2) - 0.791245592765872*YO_B0(-1))*invDelta0block0;

       d1_evN2_dx = (0.197184333887745*evN2_B0(0) + 0.521455851089587*evN2_B0(1) + 0.113446470384241*evN2_B0(-2) -
            0.00412637789557492*evN2_B0(3) - 0.0367146847001261*evN2_B0(2) -
            0.791245592765872*evN2_B0(-1))*invDelta0block0;

       d1_evNO_dx = (0.197184333887745*evNO_B0(0) + 0.521455851089587*evNO_B0(1) + 0.113446470384241*evNO_B0(-2) -
            0.00412637789557492*evNO_B0(3) - 0.0367146847001261*evNO_B0(2) -
            0.791245592765872*evNO_B0(-1))*invDelta0block0;

       d1_evO2_dx = (0.197184333887745*evO2_B0(0) + 0.521455851089587*evO2_B0(1) + 0.113446470384241*evO2_B0(-2) -
            0.00412637789557492*evO2_B0(3) - 0.0367146847001261*evO2_B0(2) -
            0.791245592765872*evO2_B0(-1))*invDelta0block0;

       d1_kappa_dx = (0.197184333887745*kappa_B0(0) + 0.521455851089587*kappa_B0(1) + 0.113446470384241*kappa_B0(-2) -
            0.00412637789557492*kappa_B0(3) - 0.0367146847001261*kappa_B0(2) -
            0.791245592765872*kappa_B0(-1))*invDelta0block0;

       d1_kappav_dx = (0.197184333887745*kappav_B0(0) + 0.521455851089587*kappav_B0(1) + 0.113446470384241*kappav_B0(-2)
            - 0.00412637789557492*kappav_B0(3) - 0.0367146847001261*kappav_B0(2) -
            0.791245592765872*kappav_B0(-1))*invDelta0block0;

       d1_mu_dx = (0.197184333887745*mu_B0(0) + 0.521455851089587*mu_B0(1) + 0.113446470384241*mu_B0(-2) -
            0.00412637789557492*mu_B0(3) - 0.0367146847001261*mu_B0(2) - 0.791245592765872*mu_B0(-1))*invDelta0block0;

       d1_yN2_dx = (0.197184333887745*yN2_B0(0) + 0.521455851089587*yN2_B0(1) + 0.113446470384241*yN2_B0(-2) -
            0.00412637789557492*yN2_B0(3) - 0.0367146847001261*yN2_B0(2) -
            0.791245592765872*yN2_B0(-1))*invDelta0block0;

       d1_yNO_dx = (0.197184333887745*yNO_B0(0) + 0.521455851089587*yNO_B0(1) + 0.113446470384241*yNO_B0(-2) -
            0.00412637789557492*yNO_B0(3) - 0.0367146847001261*yNO_B0(2) -
            0.791245592765872*yNO_B0(-1))*invDelta0block0;

       d1_yN_dx = (0.197184333887745*yN_B0(0) + 0.521455851089587*yN_B0(1) + 0.113446470384241*yN_B0(-2) -
            0.00412637789557492*yN_B0(3) - 0.0367146847001261*yN_B0(2) - 0.791245592765872*yN_B0(-1))*invDelta0block0;

       d1_yO2_dx = (0.197184333887745*yO2_B0(0) + 0.521455851089587*yO2_B0(1) + 0.113446470384241*yO2_B0(-2) -
            0.00412637789557492*yO2_B0(3) - 0.0367146847001261*yO2_B0(2) -
            0.791245592765872*yO2_B0(-1))*invDelta0block0;

       d1_yO_dx = (0.197184333887745*yO_B0(0) + 0.521455851089587*yO_B0(1) + 0.113446470384241*yO_B0(-2) -
            0.00412637789557492*yO_B0(3) - 0.0367146847001261*yO_B0(2) - 0.791245592765872*yO_B0(-1))*invDelta0block0;

   }

   else if (idx[0] == 3){

       d1_T_dx = (0.0451033223343881*T_B0(0) + 0.652141084861241*T_B0(1) + 0.121937153224065*T_B0(-2) -
            0.00932597985049999*T_B0(-3) - 0.727822147724592*T_B0(-1) - 0.082033432844602*T_B0(2))*invDelta0block0;

       d1_Tv_dx = (0.0451033223343881*Tv_B0(0) + 0.652141084861241*Tv_B0(1) + 0.121937153224065*Tv_B0(-2) -
            0.00932597985049999*Tv_B0(-3) - 0.727822147724592*Tv_B0(-1) - 0.082033432844602*Tv_B0(2))*invDelta0block0;

       d1_YN2_dx = (0.0451033223343881*YN2_B0(0) + 0.652141084861241*YN2_B0(1) + 0.121937153224065*YN2_B0(-2) -
            0.00932597985049999*YN2_B0(-3) - 0.727822147724592*YN2_B0(-1) -
            0.082033432844602*YN2_B0(2))*invDelta0block0;

       d1_YNO_dx = (0.0451033223343881*YNO_B0(0) + 0.652141084861241*YNO_B0(1) + 0.121937153224065*YNO_B0(-2) -
            0.00932597985049999*YNO_B0(-3) - 0.727822147724592*YNO_B0(-1) -
            0.082033432844602*YNO_B0(2))*invDelta0block0;

       d1_YN_dx = (0.0451033223343881*YN_B0(0) + 0.652141084861241*YN_B0(1) + 0.121937153224065*YN_B0(-2) -
            0.00932597985049999*YN_B0(-3) - 0.727822147724592*YN_B0(-1) - 0.082033432844602*YN_B0(2))*invDelta0block0;

       d1_YO_dx = (0.0451033223343881*YO_B0(0) + 0.652141084861241*YO_B0(1) + 0.121937153224065*YO_B0(-2) -
            0.00932597985049999*YO_B0(-3) - 0.727822147724592*YO_B0(-1) - 0.082033432844602*YO_B0(2))*invDelta0block0;

       d1_evN2_dx = (0.0451033223343881*evN2_B0(0) + 0.652141084861241*evN2_B0(1) + 0.121937153224065*evN2_B0(-2) -
            0.00932597985049999*evN2_B0(-3) - 0.727822147724592*evN2_B0(-1) -
            0.082033432844602*evN2_B0(2))*invDelta0block0;

       d1_evNO_dx = (0.0451033223343881*evNO_B0(0) + 0.652141084861241*evNO_B0(1) + 0.121937153224065*evNO_B0(-2) -
            0.00932597985049999*evNO_B0(-3) - 0.727822147724592*evNO_B0(-1) -
            0.082033432844602*evNO_B0(2))*invDelta0block0;

       d1_evO2_dx = (0.0451033223343881*evO2_B0(0) + 0.652141084861241*evO2_B0(1) + 0.121937153224065*evO2_B0(-2) -
            0.00932597985049999*evO2_B0(-3) - 0.727822147724592*evO2_B0(-1) -
            0.082033432844602*evO2_B0(2))*invDelta0block0;

       d1_kappa_dx = (0.0451033223343881*kappa_B0(0) + 0.652141084861241*kappa_B0(1) + 0.121937153224065*kappa_B0(-2) -
            0.00932597985049999*kappa_B0(-3) - 0.727822147724592*kappa_B0(-1) -
            0.082033432844602*kappa_B0(2))*invDelta0block0;

       d1_kappav_dx = (0.0451033223343881*kappav_B0(0) + 0.652141084861241*kappav_B0(1) +
            0.121937153224065*kappav_B0(-2) - 0.00932597985049999*kappav_B0(-3) - 0.727822147724592*kappav_B0(-1) -
            0.082033432844602*kappav_B0(2))*invDelta0block0;

       d1_mu_dx = (0.0451033223343881*mu_B0(0) + 0.652141084861241*mu_B0(1) + 0.121937153224065*mu_B0(-2) -
            0.00932597985049999*mu_B0(-3) - 0.727822147724592*mu_B0(-1) - 0.082033432844602*mu_B0(2))*invDelta0block0;

       d1_yN2_dx = (0.0451033223343881*yN2_B0(0) + 0.652141084861241*yN2_B0(1) + 0.121937153224065*yN2_B0(-2) -
            0.00932597985049999*yN2_B0(-3) - 0.727822147724592*yN2_B0(-1) -
            0.082033432844602*yN2_B0(2))*invDelta0block0;

       d1_yNO_dx = (0.0451033223343881*yNO_B0(0) + 0.652141084861241*yNO_B0(1) + 0.121937153224065*yNO_B0(-2) -
            0.00932597985049999*yNO_B0(-3) - 0.727822147724592*yNO_B0(-1) -
            0.082033432844602*yNO_B0(2))*invDelta0block0;

       d1_yN_dx = (0.0451033223343881*yN_B0(0) + 0.652141084861241*yN_B0(1) + 0.121937153224065*yN_B0(-2) -
            0.00932597985049999*yN_B0(-3) - 0.727822147724592*yN_B0(-1) - 0.082033432844602*yN_B0(2))*invDelta0block0;

       d1_yO2_dx = (0.0451033223343881*yO2_B0(0) + 0.652141084861241*yO2_B0(1) + 0.121937153224065*yO2_B0(-2) -
            0.00932597985049999*yO2_B0(-3) - 0.727822147724592*yO2_B0(-1) -
            0.082033432844602*yO2_B0(2))*invDelta0block0;

       d1_yO_dx = (0.0451033223343881*yO_B0(0) + 0.652141084861241*yO_B0(1) + 0.121937153224065*yO_B0(-2) -
            0.00932597985049999*yO_B0(-3) - 0.727822147724592*yO_B0(-1) - 0.082033432844602*yO_B0(2))*invDelta0block0;

   }

   else if (idx[0] == -1 + block0np0){

      d1_T_dx = (1.5*T_B0(-2) + 1.83333333333333*T_B0(0) - 3.0*T_B0(-1) - 0.333333333333333*T_B0(-3))*invDelta0block0;

       d1_Tv_dx = (1.5*Tv_B0(-2) + 1.83333333333333*Tv_B0(0) - 3.0*Tv_B0(-1) -
            0.333333333333333*Tv_B0(-3))*invDelta0block0;

       d1_YN2_dx = (1.5*YN2_B0(-2) + 1.83333333333333*YN2_B0(0) - 3.0*YN2_B0(-1) -
            0.333333333333333*YN2_B0(-3))*invDelta0block0;

       d1_YNO_dx = (1.5*YNO_B0(-2) + 1.83333333333333*YNO_B0(0) - 3.0*YNO_B0(-1) -
            0.333333333333333*YNO_B0(-3))*invDelta0block0;

       d1_YN_dx = (1.5*YN_B0(-2) + 1.83333333333333*YN_B0(0) - 3.0*YN_B0(-1) -
            0.333333333333333*YN_B0(-3))*invDelta0block0;

       d1_YO_dx = (1.5*YO_B0(-2) + 1.83333333333333*YO_B0(0) - 3.0*YO_B0(-1) -
            0.333333333333333*YO_B0(-3))*invDelta0block0;

       d1_evN2_dx = (1.5*evN2_B0(-2) + 1.83333333333333*evN2_B0(0) - 3.0*evN2_B0(-1) -
            0.333333333333333*evN2_B0(-3))*invDelta0block0;

       d1_evNO_dx = (1.5*evNO_B0(-2) + 1.83333333333333*evNO_B0(0) - 3.0*evNO_B0(-1) -
            0.333333333333333*evNO_B0(-3))*invDelta0block0;

       d1_evO2_dx = (1.5*evO2_B0(-2) + 1.83333333333333*evO2_B0(0) - 3.0*evO2_B0(-1) -
            0.333333333333333*evO2_B0(-3))*invDelta0block0;

       d1_kappa_dx = (1.5*kappa_B0(-2) + 1.83333333333333*kappa_B0(0) - 3.0*kappa_B0(-1) -
            0.333333333333333*kappa_B0(-3))*invDelta0block0;

       d1_kappav_dx = (1.5*kappav_B0(-2) + 1.83333333333333*kappav_B0(0) - 3.0*kappav_B0(-1) -
            0.333333333333333*kappav_B0(-3))*invDelta0block0;

       d1_mu_dx = (1.5*mu_B0(-2) + 1.83333333333333*mu_B0(0) - 3.0*mu_B0(-1) -
            0.333333333333333*mu_B0(-3))*invDelta0block0;

       d1_yN2_dx = (1.5*yN2_B0(-2) + 1.83333333333333*yN2_B0(0) - 3.0*yN2_B0(-1) -
            0.333333333333333*yN2_B0(-3))*invDelta0block0;

       d1_yNO_dx = (1.5*yNO_B0(-2) + 1.83333333333333*yNO_B0(0) - 3.0*yNO_B0(-1) -
            0.333333333333333*yNO_B0(-3))*invDelta0block0;

       d1_yN_dx = (1.5*yN_B0(-2) + 1.83333333333333*yN_B0(0) - 3.0*yN_B0(-1) -
            0.333333333333333*yN_B0(-3))*invDelta0block0;

       d1_yO2_dx = (1.5*yO2_B0(-2) + 1.83333333333333*yO2_B0(0) - 3.0*yO2_B0(-1) -
            0.333333333333333*yO2_B0(-3))*invDelta0block0;

       d1_yO_dx = (1.5*yO_B0(-2) + 1.83333333333333*yO_B0(0) - 3.0*yO_B0(-1) -
            0.333333333333333*yO_B0(-3))*invDelta0block0;

   }

   else if (idx[0] == -2 + block0np0){

       d1_T_dx = (0.322484932882161*T_B0(0) + 0.0658051057710389*T_B0(-3) + 0.376283677513354*T_B0(1) -
            0.0394168524399447*T_B0(-2) - 0.00571369039775442*T_B0(-4) - 0.719443173328855*T_B0(-1))*invDelta0block0;

       d1_Tv_dx = (0.322484932882161*Tv_B0(0) + 0.0658051057710389*Tv_B0(-3) + 0.376283677513354*Tv_B0(1) -
            0.0394168524399447*Tv_B0(-2) - 0.00571369039775442*Tv_B0(-4) -
            0.719443173328855*Tv_B0(-1))*invDelta0block0;

       d1_YN2_dx = (0.322484932882161*YN2_B0(0) + 0.0658051057710389*YN2_B0(-3) + 0.376283677513354*YN2_B0(1) -
            0.0394168524399447*YN2_B0(-2) - 0.00571369039775442*YN2_B0(-4) -
            0.719443173328855*YN2_B0(-1))*invDelta0block0;

       d1_YNO_dx = (0.322484932882161*YNO_B0(0) + 0.0658051057710389*YNO_B0(-3) + 0.376283677513354*YNO_B0(1) -
            0.0394168524399447*YNO_B0(-2) - 0.00571369039775442*YNO_B0(-4) -
            0.719443173328855*YNO_B0(-1))*invDelta0block0;

       d1_YN_dx = (0.322484932882161*YN_B0(0) + 0.0658051057710389*YN_B0(-3) + 0.376283677513354*YN_B0(1) -
            0.0394168524399447*YN_B0(-2) - 0.00571369039775442*YN_B0(-4) -
            0.719443173328855*YN_B0(-1))*invDelta0block0;

       d1_YO_dx = (0.322484932882161*YO_B0(0) + 0.0658051057710389*YO_B0(-3) + 0.376283677513354*YO_B0(1) -
            0.0394168524399447*YO_B0(-2) - 0.00571369039775442*YO_B0(-4) -
            0.719443173328855*YO_B0(-1))*invDelta0block0;

       d1_evN2_dx = (0.322484932882161*evN2_B0(0) + 0.0658051057710389*evN2_B0(-3) + 0.376283677513354*evN2_B0(1) -
            0.0394168524399447*evN2_B0(-2) - 0.00571369039775442*evN2_B0(-4) -
            0.719443173328855*evN2_B0(-1))*invDelta0block0;

       d1_evNO_dx = (0.322484932882161*evNO_B0(0) + 0.0658051057710389*evNO_B0(-3) + 0.376283677513354*evNO_B0(1) -
            0.0394168524399447*evNO_B0(-2) - 0.00571369039775442*evNO_B0(-4) -
            0.719443173328855*evNO_B0(-1))*invDelta0block0;

       d1_evO2_dx = (0.322484932882161*evO2_B0(0) + 0.0658051057710389*evO2_B0(-3) + 0.376283677513354*evO2_B0(1) -
            0.0394168524399447*evO2_B0(-2) - 0.00571369039775442*evO2_B0(-4) -
            0.719443173328855*evO2_B0(-1))*invDelta0block0;

       d1_kappa_dx = (0.322484932882161*kappa_B0(0) + 0.0658051057710389*kappa_B0(-3) + 0.376283677513354*kappa_B0(1) -
            0.0394168524399447*kappa_B0(-2) - 0.00571369039775442*kappa_B0(-4) -
            0.719443173328855*kappa_B0(-1))*invDelta0block0;

       d1_kappav_dx = (0.322484932882161*kappav_B0(0) + 0.0658051057710389*kappav_B0(-3) +
            0.376283677513354*kappav_B0(1) - 0.0394168524399447*kappav_B0(-2) - 0.00571369039775442*kappav_B0(-4) -
            0.719443173328855*kappav_B0(-1))*invDelta0block0;

       d1_mu_dx = (0.322484932882161*mu_B0(0) + 0.0658051057710389*mu_B0(-3) + 0.376283677513354*mu_B0(1) -
            0.0394168524399447*mu_B0(-2) - 0.00571369039775442*mu_B0(-4) -
            0.719443173328855*mu_B0(-1))*invDelta0block0;

       d1_yN2_dx = (0.322484932882161*yN2_B0(0) + 0.0658051057710389*yN2_B0(-3) + 0.376283677513354*yN2_B0(1) -
            0.0394168524399447*yN2_B0(-2) - 0.00571369039775442*yN2_B0(-4) -
            0.719443173328855*yN2_B0(-1))*invDelta0block0;

       d1_yNO_dx = (0.322484932882161*yNO_B0(0) + 0.0658051057710389*yNO_B0(-3) + 0.376283677513354*yNO_B0(1) -
            0.0394168524399447*yNO_B0(-2) - 0.00571369039775442*yNO_B0(-4) -
            0.719443173328855*yNO_B0(-1))*invDelta0block0;

       d1_yN_dx = (0.322484932882161*yN_B0(0) + 0.0658051057710389*yN_B0(-3) + 0.376283677513354*yN_B0(1) -
            0.0394168524399447*yN_B0(-2) - 0.00571369039775442*yN_B0(-4) -
            0.719443173328855*yN_B0(-1))*invDelta0block0;

       d1_yO2_dx = (0.322484932882161*yO2_B0(0) + 0.0658051057710389*yO2_B0(-3) + 0.376283677513354*yO2_B0(1) -
            0.0394168524399447*yO2_B0(-2) - 0.00571369039775442*yO2_B0(-4) -
            0.719443173328855*yO2_B0(-1))*invDelta0block0;

       d1_yO_dx = (0.322484932882161*yO_B0(0) + 0.0658051057710389*yO_B0(-3) + 0.376283677513354*yO_B0(1) -
            0.0394168524399447*yO_B0(-2) - 0.00571369039775442*yO_B0(-4) -
            0.719443173328855*yO_B0(-1))*invDelta0block0;

   }

   else if (idx[0] == -3 + block0np0){

       d1_T_dx = (0.00412637789557492*T_B0(-3) + 0.0367146847001261*T_B0(-2) + 0.791245592765872*T_B0(1) -
            0.197184333887745*T_B0(0) - 0.521455851089587*T_B0(-1) - 0.113446470384241*T_B0(2))*invDelta0block0;

       d1_Tv_dx = (0.00412637789557492*Tv_B0(-3) + 0.0367146847001261*Tv_B0(-2) + 0.791245592765872*Tv_B0(1) -
            0.197184333887745*Tv_B0(0) - 0.521455851089587*Tv_B0(-1) - 0.113446470384241*Tv_B0(2))*invDelta0block0;

       d1_YN2_dx = (0.00412637789557492*YN2_B0(-3) + 0.0367146847001261*YN2_B0(-2) + 0.791245592765872*YN2_B0(1) -
            0.197184333887745*YN2_B0(0) - 0.521455851089587*YN2_B0(-1) - 0.113446470384241*YN2_B0(2))*invDelta0block0;

       d1_YNO_dx = (0.00412637789557492*YNO_B0(-3) + 0.0367146847001261*YNO_B0(-2) + 0.791245592765872*YNO_B0(1) -
            0.197184333887745*YNO_B0(0) - 0.521455851089587*YNO_B0(-1) - 0.113446470384241*YNO_B0(2))*invDelta0block0;

       d1_YN_dx = (0.00412637789557492*YN_B0(-3) + 0.0367146847001261*YN_B0(-2) + 0.791245592765872*YN_B0(1) -
            0.197184333887745*YN_B0(0) - 0.521455851089587*YN_B0(-1) - 0.113446470384241*YN_B0(2))*invDelta0block0;

       d1_YO_dx = (0.00412637789557492*YO_B0(-3) + 0.0367146847001261*YO_B0(-2) + 0.791245592765872*YO_B0(1) -
            0.197184333887745*YO_B0(0) - 0.521455851089587*YO_B0(-1) - 0.113446470384241*YO_B0(2))*invDelta0block0;

       d1_evN2_dx = (0.00412637789557492*evN2_B0(-3) + 0.0367146847001261*evN2_B0(-2) + 0.791245592765872*evN2_B0(1) -
            0.197184333887745*evN2_B0(0) - 0.521455851089587*evN2_B0(-1) -
            0.113446470384241*evN2_B0(2))*invDelta0block0;

       d1_evNO_dx = (0.00412637789557492*evNO_B0(-3) + 0.0367146847001261*evNO_B0(-2) + 0.791245592765872*evNO_B0(1) -
            0.197184333887745*evNO_B0(0) - 0.521455851089587*evNO_B0(-1) -
            0.113446470384241*evNO_B0(2))*invDelta0block0;

       d1_evO2_dx = (0.00412637789557492*evO2_B0(-3) + 0.0367146847001261*evO2_B0(-2) + 0.791245592765872*evO2_B0(1) -
            0.197184333887745*evO2_B0(0) - 0.521455851089587*evO2_B0(-1) -
            0.113446470384241*evO2_B0(2))*invDelta0block0;

       d1_kappa_dx = (0.00412637789557492*kappa_B0(-3) + 0.0367146847001261*kappa_B0(-2) + 0.791245592765872*kappa_B0(1)
            - 0.197184333887745*kappa_B0(0) - 0.521455851089587*kappa_B0(-1) -
            0.113446470384241*kappa_B0(2))*invDelta0block0;

       d1_kappav_dx = (0.00412637789557492*kappav_B0(-3) + 0.0367146847001261*kappav_B0(-2) +
            0.791245592765872*kappav_B0(1) - 0.197184333887745*kappav_B0(0) - 0.521455851089587*kappav_B0(-1) -
            0.113446470384241*kappav_B0(2))*invDelta0block0;

       d1_mu_dx = (0.00412637789557492*mu_B0(-3) + 0.0367146847001261*mu_B0(-2) + 0.791245592765872*mu_B0(1) -
            0.197184333887745*mu_B0(0) - 0.521455851089587*mu_B0(-1) - 0.113446470384241*mu_B0(2))*invDelta0block0;

       d1_yN2_dx = (0.00412637789557492*yN2_B0(-3) + 0.0367146847001261*yN2_B0(-2) + 0.791245592765872*yN2_B0(1) -
            0.197184333887745*yN2_B0(0) - 0.521455851089587*yN2_B0(-1) - 0.113446470384241*yN2_B0(2))*invDelta0block0;

       d1_yNO_dx = (0.00412637789557492*yNO_B0(-3) + 0.0367146847001261*yNO_B0(-2) + 0.791245592765872*yNO_B0(1) -
            0.197184333887745*yNO_B0(0) - 0.521455851089587*yNO_B0(-1) - 0.113446470384241*yNO_B0(2))*invDelta0block0;

       d1_yN_dx = (0.00412637789557492*yN_B0(-3) + 0.0367146847001261*yN_B0(-2) + 0.791245592765872*yN_B0(1) -
            0.197184333887745*yN_B0(0) - 0.521455851089587*yN_B0(-1) - 0.113446470384241*yN_B0(2))*invDelta0block0;

       d1_yO2_dx = (0.00412637789557492*yO2_B0(-3) + 0.0367146847001261*yO2_B0(-2) + 0.791245592765872*yO2_B0(1) -
            0.197184333887745*yO2_B0(0) - 0.521455851089587*yO2_B0(-1) - 0.113446470384241*yO2_B0(2))*invDelta0block0;

       d1_yO_dx = (0.00412637789557492*yO_B0(-3) + 0.0367146847001261*yO_B0(-2) + 0.791245592765872*yO_B0(1) -
            0.197184333887745*yO_B0(0) - 0.521455851089587*yO_B0(-1) - 0.113446470384241*yO_B0(2))*invDelta0block0;

   }

   else if (idx[0] == -4 + block0np0){

       d1_T_dx = (0.00932597985049999*T_B0(3) + 0.727822147724592*T_B0(1) + 0.082033432844602*T_B0(-2) -
            0.0451033223343881*T_B0(0) - 0.652141084861241*T_B0(-1) - 0.121937153224065*T_B0(2))*invDelta0block0;

       d1_Tv_dx = (0.00932597985049999*Tv_B0(3) + 0.727822147724592*Tv_B0(1) + 0.082033432844602*Tv_B0(-2) -
            0.0451033223343881*Tv_B0(0) - 0.652141084861241*Tv_B0(-1) - 0.121937153224065*Tv_B0(2))*invDelta0block0;

       d1_YN2_dx = (0.00932597985049999*YN2_B0(3) + 0.727822147724592*YN2_B0(1) + 0.082033432844602*YN2_B0(-2) -
            0.0451033223343881*YN2_B0(0) - 0.652141084861241*YN2_B0(-1) - 0.121937153224065*YN2_B0(2))*invDelta0block0;

       d1_YNO_dx = (0.00932597985049999*YNO_B0(3) + 0.727822147724592*YNO_B0(1) + 0.082033432844602*YNO_B0(-2) -
            0.0451033223343881*YNO_B0(0) - 0.652141084861241*YNO_B0(-1) - 0.121937153224065*YNO_B0(2))*invDelta0block0;

       d1_YN_dx = (0.00932597985049999*YN_B0(3) + 0.727822147724592*YN_B0(1) + 0.082033432844602*YN_B0(-2) -
            0.0451033223343881*YN_B0(0) - 0.652141084861241*YN_B0(-1) - 0.121937153224065*YN_B0(2))*invDelta0block0;

       d1_YO_dx = (0.00932597985049999*YO_B0(3) + 0.727822147724592*YO_B0(1) + 0.082033432844602*YO_B0(-2) -
            0.0451033223343881*YO_B0(0) - 0.652141084861241*YO_B0(-1) - 0.121937153224065*YO_B0(2))*invDelta0block0;

       d1_evN2_dx = (0.00932597985049999*evN2_B0(3) + 0.727822147724592*evN2_B0(1) + 0.082033432844602*evN2_B0(-2) -
            0.0451033223343881*evN2_B0(0) - 0.652141084861241*evN2_B0(-1) -
            0.121937153224065*evN2_B0(2))*invDelta0block0;

       d1_evNO_dx = (0.00932597985049999*evNO_B0(3) + 0.727822147724592*evNO_B0(1) + 0.082033432844602*evNO_B0(-2) -
            0.0451033223343881*evNO_B0(0) - 0.652141084861241*evNO_B0(-1) -
            0.121937153224065*evNO_B0(2))*invDelta0block0;

       d1_evO2_dx = (0.00932597985049999*evO2_B0(3) + 0.727822147724592*evO2_B0(1) + 0.082033432844602*evO2_B0(-2) -
            0.0451033223343881*evO2_B0(0) - 0.652141084861241*evO2_B0(-1) -
            0.121937153224065*evO2_B0(2))*invDelta0block0;

       d1_kappa_dx = (0.00932597985049999*kappa_B0(3) + 0.727822147724592*kappa_B0(1) + 0.082033432844602*kappa_B0(-2) -
            0.0451033223343881*kappa_B0(0) - 0.652141084861241*kappa_B0(-1) -
            0.121937153224065*kappa_B0(2))*invDelta0block0;

       d1_kappav_dx = (0.00932597985049999*kappav_B0(3) + 0.727822147724592*kappav_B0(1) +
            0.082033432844602*kappav_B0(-2) - 0.0451033223343881*kappav_B0(0) - 0.652141084861241*kappav_B0(-1) -
            0.121937153224065*kappav_B0(2))*invDelta0block0;

       d1_mu_dx = (0.00932597985049999*mu_B0(3) + 0.727822147724592*mu_B0(1) + 0.082033432844602*mu_B0(-2) -
            0.0451033223343881*mu_B0(0) - 0.652141084861241*mu_B0(-1) - 0.121937153224065*mu_B0(2))*invDelta0block0;

       d1_yN2_dx = (0.00932597985049999*yN2_B0(3) + 0.727822147724592*yN2_B0(1) + 0.082033432844602*yN2_B0(-2) -
            0.0451033223343881*yN2_B0(0) - 0.652141084861241*yN2_B0(-1) - 0.121937153224065*yN2_B0(2))*invDelta0block0;

       d1_yNO_dx = (0.00932597985049999*yNO_B0(3) + 0.727822147724592*yNO_B0(1) + 0.082033432844602*yNO_B0(-2) -
            0.0451033223343881*yNO_B0(0) - 0.652141084861241*yNO_B0(-1) - 0.121937153224065*yNO_B0(2))*invDelta0block0;

       d1_yN_dx = (0.00932597985049999*yN_B0(3) + 0.727822147724592*yN_B0(1) + 0.082033432844602*yN_B0(-2) -
            0.0451033223343881*yN_B0(0) - 0.652141084861241*yN_B0(-1) - 0.121937153224065*yN_B0(2))*invDelta0block0;

       d1_yO2_dx = (0.00932597985049999*yO2_B0(3) + 0.727822147724592*yO2_B0(1) + 0.082033432844602*yO2_B0(-2) -
            0.0451033223343881*yO2_B0(0) - 0.652141084861241*yO2_B0(-1) - 0.121937153224065*yO2_B0(2))*invDelta0block0;

       d1_yO_dx = (0.00932597985049999*yO_B0(3) + 0.727822147724592*yO_B0(1) + 0.082033432844602*yO_B0(-2) -
            0.0451033223343881*yO_B0(0) - 0.652141084861241*yO_B0(-1) - 0.121937153224065*yO_B0(2))*invDelta0block0;

   }

   else{

       d1_T_dx = (-(2.0/3.0)*T_B0(-1) - (1.0/12.0)*T_B0(2) + ((1.0/12.0))*T_B0(-2) +
            ((2.0/3.0))*T_B0(1))*invDelta0block0;

       d1_Tv_dx = (-(2.0/3.0)*Tv_B0(-1) - (1.0/12.0)*Tv_B0(2) + ((1.0/12.0))*Tv_B0(-2) +
            ((2.0/3.0))*Tv_B0(1))*invDelta0block0;

       d1_YN2_dx = (-(2.0/3.0)*YN2_B0(-1) - (1.0/12.0)*YN2_B0(2) + ((1.0/12.0))*YN2_B0(-2) +
            ((2.0/3.0))*YN2_B0(1))*invDelta0block0;

       d1_YNO_dx = (-(2.0/3.0)*YNO_B0(-1) - (1.0/12.0)*YNO_B0(2) + ((1.0/12.0))*YNO_B0(-2) +
            ((2.0/3.0))*YNO_B0(1))*invDelta0block0;

       d1_YN_dx = (-(2.0/3.0)*YN_B0(-1) - (1.0/12.0)*YN_B0(2) + ((1.0/12.0))*YN_B0(-2) +
            ((2.0/3.0))*YN_B0(1))*invDelta0block0;

       d1_YO_dx = (-(2.0/3.0)*YO_B0(-1) - (1.0/12.0)*YO_B0(2) + ((1.0/12.0))*YO_B0(-2) +
            ((2.0/3.0))*YO_B0(1))*invDelta0block0;

       d1_evN2_dx = (-(2.0/3.0)*evN2_B0(-1) - (1.0/12.0)*evN2_B0(2) + ((1.0/12.0))*evN2_B0(-2) +
            ((2.0/3.0))*evN2_B0(1))*invDelta0block0;

       d1_evNO_dx = (-(2.0/3.0)*evNO_B0(-1) - (1.0/12.0)*evNO_B0(2) + ((1.0/12.0))*evNO_B0(-2) +
            ((2.0/3.0))*evNO_B0(1))*invDelta0block0;

       d1_evO2_dx = (-(2.0/3.0)*evO2_B0(-1) - (1.0/12.0)*evO2_B0(2) + ((1.0/12.0))*evO2_B0(-2) +
            ((2.0/3.0))*evO2_B0(1))*invDelta0block0;

       d1_kappa_dx = (-(2.0/3.0)*kappa_B0(-1) - (1.0/12.0)*kappa_B0(2) + ((1.0/12.0))*kappa_B0(-2) +
            ((2.0/3.0))*kappa_B0(1))*invDelta0block0;

       d1_kappav_dx = (-(2.0/3.0)*kappav_B0(-1) - (1.0/12.0)*kappav_B0(2) + ((1.0/12.0))*kappav_B0(-2) +
            ((2.0/3.0))*kappav_B0(1))*invDelta0block0;

       d1_mu_dx = (-(2.0/3.0)*mu_B0(-1) - (1.0/12.0)*mu_B0(2) + ((1.0/12.0))*mu_B0(-2) +
            ((2.0/3.0))*mu_B0(1))*invDelta0block0;

       d1_yN2_dx = (-(2.0/3.0)*yN2_B0(-1) - (1.0/12.0)*yN2_B0(2) + ((1.0/12.0))*yN2_B0(-2) +
            ((2.0/3.0))*yN2_B0(1))*invDelta0block0;

       d1_yNO_dx = (-(2.0/3.0)*yNO_B0(-1) - (1.0/12.0)*yNO_B0(2) + ((1.0/12.0))*yNO_B0(-2) +
            ((2.0/3.0))*yNO_B0(1))*invDelta0block0;

       d1_yN_dx = (-(2.0/3.0)*yN_B0(-1) - (1.0/12.0)*yN_B0(2) + ((1.0/12.0))*yN_B0(-2) +
            ((2.0/3.0))*yN_B0(1))*invDelta0block0;

       d1_yO2_dx = (-(2.0/3.0)*yO2_B0(-1) - (1.0/12.0)*yO2_B0(2) + ((1.0/12.0))*yO2_B0(-2) +
            ((2.0/3.0))*yO2_B0(1))*invDelta0block0;

       d1_yO_dx = (-(2.0/3.0)*yO_B0(-1) - (1.0/12.0)*yO_B0(2) + ((1.0/12.0))*yO_B0(-2) +
            ((2.0/3.0))*yO_B0(1))*invDelta0block0;

   }

   if (idx[0] == 0){

       d2_T_dx = (-(26.0/3.0)*T_B0(1) - (14.0/3.0)*T_B0(3) + ((11.0/12.0))*T_B0(4) + ((19.0/2.0))*T_B0(2) +
            ((35.0/12.0))*T_B0(0))*inv2Delta0block0;

       d2_Tv_dx = (-(26.0/3.0)*Tv_B0(1) - (14.0/3.0)*Tv_B0(3) + ((11.0/12.0))*Tv_B0(4) + ((19.0/2.0))*Tv_B0(2) +
            ((35.0/12.0))*Tv_B0(0))*inv2Delta0block0;

       d2_YN2_dx = (-(26.0/3.0)*YN2_B0(1) - (14.0/3.0)*YN2_B0(3) + ((11.0/12.0))*YN2_B0(4) + ((19.0/2.0))*YN2_B0(2) +
            ((35.0/12.0))*YN2_B0(0))*inv2Delta0block0;

       d2_YNO_dx = (-(26.0/3.0)*YNO_B0(1) - (14.0/3.0)*YNO_B0(3) + ((11.0/12.0))*YNO_B0(4) + ((19.0/2.0))*YNO_B0(2) +
            ((35.0/12.0))*YNO_B0(0))*inv2Delta0block0;

       d2_YN_dx = (-(26.0/3.0)*YN_B0(1) - (14.0/3.0)*YN_B0(3) + ((11.0/12.0))*YN_B0(4) + ((19.0/2.0))*YN_B0(2) +
            ((35.0/12.0))*YN_B0(0))*inv2Delta0block0;

       d2_YO_dx = (-(26.0/3.0)*YO_B0(1) - (14.0/3.0)*YO_B0(3) + ((11.0/12.0))*YO_B0(4) + ((19.0/2.0))*YO_B0(2) +
            ((35.0/12.0))*YO_B0(0))*inv2Delta0block0;

       d2_u0_dx = (-(26.0/3.0)*u0_B0(1) - (14.0/3.0)*u0_B0(3) + ((11.0/12.0))*u0_B0(4) + ((19.0/2.0))*u0_B0(2) +
            ((35.0/12.0))*u0_B0(0))*inv2Delta0block0;

       d2_yN2_dx = (-(26.0/3.0)*yN2_B0(1) - (14.0/3.0)*yN2_B0(3) + ((11.0/12.0))*yN2_B0(4) + ((19.0/2.0))*yN2_B0(2) +
            ((35.0/12.0))*yN2_B0(0))*inv2Delta0block0;

       d2_yNO_dx = (-(26.0/3.0)*yNO_B0(1) - (14.0/3.0)*yNO_B0(3) + ((11.0/12.0))*yNO_B0(4) + ((19.0/2.0))*yNO_B0(2) +
            ((35.0/12.0))*yNO_B0(0))*inv2Delta0block0;

       d2_yN_dx = (-(26.0/3.0)*yN_B0(1) - (14.0/3.0)*yN_B0(3) + ((11.0/12.0))*yN_B0(4) + ((19.0/2.0))*yN_B0(2) +
            ((35.0/12.0))*yN_B0(0))*inv2Delta0block0;

       d2_yO2_dx = (-(26.0/3.0)*yO2_B0(1) - (14.0/3.0)*yO2_B0(3) + ((11.0/12.0))*yO2_B0(4) + ((19.0/2.0))*yO2_B0(2) +
            ((35.0/12.0))*yO2_B0(0))*inv2Delta0block0;

       d2_yO_dx = (-(26.0/3.0)*yO_B0(1) - (14.0/3.0)*yO_B0(3) + ((11.0/12.0))*yO_B0(4) + ((19.0/2.0))*yO_B0(2) +
            ((35.0/12.0))*yO_B0(0))*inv2Delta0block0;

   }

   else if (idx[0] == 1){

       d2_T_dx = (((1.0/2.0))*T_B0(1) - (5.0/3.0)*T_B0(0) - (1.0/12.0)*T_B0(3) + ((1.0/3.0))*T_B0(2) +
            ((11.0/12.0))*T_B0(-1))*inv2Delta0block0;

       d2_Tv_dx = (((1.0/2.0))*Tv_B0(1) - (5.0/3.0)*Tv_B0(0) - (1.0/12.0)*Tv_B0(3) + ((1.0/3.0))*Tv_B0(2) +
            ((11.0/12.0))*Tv_B0(-1))*inv2Delta0block0;

       d2_YN2_dx = (((1.0/2.0))*YN2_B0(1) - (5.0/3.0)*YN2_B0(0) - (1.0/12.0)*YN2_B0(3) + ((1.0/3.0))*YN2_B0(2) +
            ((11.0/12.0))*YN2_B0(-1))*inv2Delta0block0;

       d2_YNO_dx = (((1.0/2.0))*YNO_B0(1) - (5.0/3.0)*YNO_B0(0) - (1.0/12.0)*YNO_B0(3) + ((1.0/3.0))*YNO_B0(2) +
            ((11.0/12.0))*YNO_B0(-1))*inv2Delta0block0;

       d2_YN_dx = (((1.0/2.0))*YN_B0(1) - (5.0/3.0)*YN_B0(0) - (1.0/12.0)*YN_B0(3) + ((1.0/3.0))*YN_B0(2) +
            ((11.0/12.0))*YN_B0(-1))*inv2Delta0block0;

       d2_YO_dx = (((1.0/2.0))*YO_B0(1) - (5.0/3.0)*YO_B0(0) - (1.0/12.0)*YO_B0(3) + ((1.0/3.0))*YO_B0(2) +
            ((11.0/12.0))*YO_B0(-1))*inv2Delta0block0;

       d2_u0_dx = (((1.0/2.0))*u0_B0(1) - (5.0/3.0)*u0_B0(0) - (1.0/12.0)*u0_B0(3) + ((1.0/3.0))*u0_B0(2) +
            ((11.0/12.0))*u0_B0(-1))*inv2Delta0block0;

       d2_yN2_dx = (((1.0/2.0))*yN2_B0(1) - (5.0/3.0)*yN2_B0(0) - (1.0/12.0)*yN2_B0(3) + ((1.0/3.0))*yN2_B0(2) +
            ((11.0/12.0))*yN2_B0(-1))*inv2Delta0block0;

       d2_yNO_dx = (((1.0/2.0))*yNO_B0(1) - (5.0/3.0)*yNO_B0(0) - (1.0/12.0)*yNO_B0(3) + ((1.0/3.0))*yNO_B0(2) +
            ((11.0/12.0))*yNO_B0(-1))*inv2Delta0block0;

       d2_yN_dx = (((1.0/2.0))*yN_B0(1) - (5.0/3.0)*yN_B0(0) - (1.0/12.0)*yN_B0(3) + ((1.0/3.0))*yN_B0(2) +
            ((11.0/12.0))*yN_B0(-1))*inv2Delta0block0;

       d2_yO2_dx = (((1.0/2.0))*yO2_B0(1) - (5.0/3.0)*yO2_B0(0) - (1.0/12.0)*yO2_B0(3) + ((1.0/3.0))*yO2_B0(2) +
            ((11.0/12.0))*yO2_B0(-1))*inv2Delta0block0;

       d2_yO_dx = (((1.0/2.0))*yO_B0(1) - (5.0/3.0)*yO_B0(0) - (1.0/12.0)*yO_B0(3) + ((1.0/3.0))*yO_B0(2) +
            ((11.0/12.0))*yO_B0(-1))*inv2Delta0block0;

   }

   else if (idx[0] == -1 + block0np0){

       d2_T_dx = (-(26.0/3.0)*T_B0(-1) - (14.0/3.0)*T_B0(-3) + ((11.0/12.0))*T_B0(-4) + ((19.0/2.0))*T_B0(-2) +
            ((35.0/12.0))*T_B0(0))*inv2Delta0block0;

       d2_Tv_dx = (-(26.0/3.0)*Tv_B0(-1) - (14.0/3.0)*Tv_B0(-3) + ((11.0/12.0))*Tv_B0(-4) + ((19.0/2.0))*Tv_B0(-2) +
            ((35.0/12.0))*Tv_B0(0))*inv2Delta0block0;

       d2_YN2_dx = (-(26.0/3.0)*YN2_B0(-1) - (14.0/3.0)*YN2_B0(-3) + ((11.0/12.0))*YN2_B0(-4) + ((19.0/2.0))*YN2_B0(-2)
            + ((35.0/12.0))*YN2_B0(0))*inv2Delta0block0;

       d2_YNO_dx = (-(26.0/3.0)*YNO_B0(-1) - (14.0/3.0)*YNO_B0(-3) + ((11.0/12.0))*YNO_B0(-4) + ((19.0/2.0))*YNO_B0(-2)
            + ((35.0/12.0))*YNO_B0(0))*inv2Delta0block0;

       d2_YN_dx = (-(26.0/3.0)*YN_B0(-1) - (14.0/3.0)*YN_B0(-3) + ((11.0/12.0))*YN_B0(-4) + ((19.0/2.0))*YN_B0(-2) +
            ((35.0/12.0))*YN_B0(0))*inv2Delta0block0;

       d2_YO_dx = (-(26.0/3.0)*YO_B0(-1) - (14.0/3.0)*YO_B0(-3) + ((11.0/12.0))*YO_B0(-4) + ((19.0/2.0))*YO_B0(-2) +
            ((35.0/12.0))*YO_B0(0))*inv2Delta0block0;

       d2_u0_dx = (-(26.0/3.0)*u0_B0(-1) - (14.0/3.0)*u0_B0(-3) + ((11.0/12.0))*u0_B0(-4) + ((19.0/2.0))*u0_B0(-2) +
            ((35.0/12.0))*u0_B0(0))*inv2Delta0block0;

       d2_yN2_dx = (-(26.0/3.0)*yN2_B0(-1) - (14.0/3.0)*yN2_B0(-3) + ((11.0/12.0))*yN2_B0(-4) + ((19.0/2.0))*yN2_B0(-2)
            + ((35.0/12.0))*yN2_B0(0))*inv2Delta0block0;

       d2_yNO_dx = (-(26.0/3.0)*yNO_B0(-1) - (14.0/3.0)*yNO_B0(-3) + ((11.0/12.0))*yNO_B0(-4) + ((19.0/2.0))*yNO_B0(-2)
            + ((35.0/12.0))*yNO_B0(0))*inv2Delta0block0;

       d2_yN_dx = (-(26.0/3.0)*yN_B0(-1) - (14.0/3.0)*yN_B0(-3) + ((11.0/12.0))*yN_B0(-4) + ((19.0/2.0))*yN_B0(-2) +
            ((35.0/12.0))*yN_B0(0))*inv2Delta0block0;

       d2_yO2_dx = (-(26.0/3.0)*yO2_B0(-1) - (14.0/3.0)*yO2_B0(-3) + ((11.0/12.0))*yO2_B0(-4) + ((19.0/2.0))*yO2_B0(-2)
            + ((35.0/12.0))*yO2_B0(0))*inv2Delta0block0;

       d2_yO_dx = (-(26.0/3.0)*yO_B0(-1) - (14.0/3.0)*yO_B0(-3) + ((11.0/12.0))*yO_B0(-4) + ((19.0/2.0))*yO_B0(-2) +
            ((35.0/12.0))*yO_B0(0))*inv2Delta0block0;

   }

   else if (idx[0] == -2 + block0np0){

       d2_T_dx = (((1.0/2.0))*T_B0(-1) - (5.0/3.0)*T_B0(0) - (1.0/12.0)*T_B0(-3) + ((1.0/3.0))*T_B0(-2) +
            ((11.0/12.0))*T_B0(1))*inv2Delta0block0;

       d2_Tv_dx = (((1.0/2.0))*Tv_B0(-1) - (5.0/3.0)*Tv_B0(0) - (1.0/12.0)*Tv_B0(-3) + ((1.0/3.0))*Tv_B0(-2) +
            ((11.0/12.0))*Tv_B0(1))*inv2Delta0block0;

       d2_YN2_dx = (((1.0/2.0))*YN2_B0(-1) - (5.0/3.0)*YN2_B0(0) - (1.0/12.0)*YN2_B0(-3) + ((1.0/3.0))*YN2_B0(-2) +
            ((11.0/12.0))*YN2_B0(1))*inv2Delta0block0;

       d2_YNO_dx = (((1.0/2.0))*YNO_B0(-1) - (5.0/3.0)*YNO_B0(0) - (1.0/12.0)*YNO_B0(-3) + ((1.0/3.0))*YNO_B0(-2) +
            ((11.0/12.0))*YNO_B0(1))*inv2Delta0block0;

       d2_YN_dx = (((1.0/2.0))*YN_B0(-1) - (5.0/3.0)*YN_B0(0) - (1.0/12.0)*YN_B0(-3) + ((1.0/3.0))*YN_B0(-2) +
            ((11.0/12.0))*YN_B0(1))*inv2Delta0block0;

       d2_YO_dx = (((1.0/2.0))*YO_B0(-1) - (5.0/3.0)*YO_B0(0) - (1.0/12.0)*YO_B0(-3) + ((1.0/3.0))*YO_B0(-2) +
            ((11.0/12.0))*YO_B0(1))*inv2Delta0block0;

       d2_u0_dx = (((1.0/2.0))*u0_B0(-1) - (5.0/3.0)*u0_B0(0) - (1.0/12.0)*u0_B0(-3) + ((1.0/3.0))*u0_B0(-2) +
            ((11.0/12.0))*u0_B0(1))*inv2Delta0block0;

       d2_yN2_dx = (((1.0/2.0))*yN2_B0(-1) - (5.0/3.0)*yN2_B0(0) - (1.0/12.0)*yN2_B0(-3) + ((1.0/3.0))*yN2_B0(-2) +
            ((11.0/12.0))*yN2_B0(1))*inv2Delta0block0;

       d2_yNO_dx = (((1.0/2.0))*yNO_B0(-1) - (5.0/3.0)*yNO_B0(0) - (1.0/12.0)*yNO_B0(-3) + ((1.0/3.0))*yNO_B0(-2) +
            ((11.0/12.0))*yNO_B0(1))*inv2Delta0block0;

       d2_yN_dx = (((1.0/2.0))*yN_B0(-1) - (5.0/3.0)*yN_B0(0) - (1.0/12.0)*yN_B0(-3) + ((1.0/3.0))*yN_B0(-2) +
            ((11.0/12.0))*yN_B0(1))*inv2Delta0block0;

       d2_yO2_dx = (((1.0/2.0))*yO2_B0(-1) - (5.0/3.0)*yO2_B0(0) - (1.0/12.0)*yO2_B0(-3) + ((1.0/3.0))*yO2_B0(-2) +
            ((11.0/12.0))*yO2_B0(1))*inv2Delta0block0;

       d2_yO_dx = (((1.0/2.0))*yO_B0(-1) - (5.0/3.0)*yO_B0(0) - (1.0/12.0)*yO_B0(-3) + ((1.0/3.0))*yO_B0(-2) +
            ((11.0/12.0))*yO_B0(1))*inv2Delta0block0;

   }

   else{

       d2_T_dx = (-(5.0/2.0)*T_B0(0) - (1.0/12.0)*T_B0(-2) - (1.0/12.0)*T_B0(2) + ((4.0/3.0))*T_B0(1) +
            ((4.0/3.0))*T_B0(-1))*inv2Delta0block0;

       d2_Tv_dx = (-(5.0/2.0)*Tv_B0(0) - (1.0/12.0)*Tv_B0(-2) - (1.0/12.0)*Tv_B0(2) + ((4.0/3.0))*Tv_B0(1) +
            ((4.0/3.0))*Tv_B0(-1))*inv2Delta0block0;

       d2_YN2_dx = (-(5.0/2.0)*YN2_B0(0) - (1.0/12.0)*YN2_B0(-2) - (1.0/12.0)*YN2_B0(2) + ((4.0/3.0))*YN2_B0(1) +
            ((4.0/3.0))*YN2_B0(-1))*inv2Delta0block0;

       d2_YNO_dx = (-(5.0/2.0)*YNO_B0(0) - (1.0/12.0)*YNO_B0(-2) - (1.0/12.0)*YNO_B0(2) + ((4.0/3.0))*YNO_B0(1) +
            ((4.0/3.0))*YNO_B0(-1))*inv2Delta0block0;

       d2_YN_dx = (-(5.0/2.0)*YN_B0(0) - (1.0/12.0)*YN_B0(-2) - (1.0/12.0)*YN_B0(2) + ((4.0/3.0))*YN_B0(1) +
            ((4.0/3.0))*YN_B0(-1))*inv2Delta0block0;

       d2_YO_dx = (-(5.0/2.0)*YO_B0(0) - (1.0/12.0)*YO_B0(-2) - (1.0/12.0)*YO_B0(2) + ((4.0/3.0))*YO_B0(1) +
            ((4.0/3.0))*YO_B0(-1))*inv2Delta0block0;

       d2_u0_dx = (-(5.0/2.0)*u0_B0(0) - (1.0/12.0)*u0_B0(-2) - (1.0/12.0)*u0_B0(2) + ((4.0/3.0))*u0_B0(1) +
            ((4.0/3.0))*u0_B0(-1))*inv2Delta0block0;

       d2_yN2_dx = (-(5.0/2.0)*yN2_B0(0) - (1.0/12.0)*yN2_B0(-2) - (1.0/12.0)*yN2_B0(2) + ((4.0/3.0))*yN2_B0(1) +
            ((4.0/3.0))*yN2_B0(-1))*inv2Delta0block0;

       d2_yNO_dx = (-(5.0/2.0)*yNO_B0(0) - (1.0/12.0)*yNO_B0(-2) - (1.0/12.0)*yNO_B0(2) + ((4.0/3.0))*yNO_B0(1) +
            ((4.0/3.0))*yNO_B0(-1))*inv2Delta0block0;

       d2_yN_dx = (-(5.0/2.0)*yN_B0(0) - (1.0/12.0)*yN_B0(-2) - (1.0/12.0)*yN_B0(2) + ((4.0/3.0))*yN_B0(1) +
            ((4.0/3.0))*yN_B0(-1))*inv2Delta0block0;

       d2_yO2_dx = (-(5.0/2.0)*yO2_B0(0) - (1.0/12.0)*yO2_B0(-2) - (1.0/12.0)*yO2_B0(2) + ((4.0/3.0))*yO2_B0(1) +
            ((4.0/3.0))*yO2_B0(-1))*inv2Delta0block0;

       d2_yO_dx = (-(5.0/2.0)*yO_B0(0) - (1.0/12.0)*yO_B0(-2) - (1.0/12.0)*yO_B0(2) + ((4.0/3.0))*yO_B0(1) +
            ((4.0/3.0))*yO_B0(-1))*inv2Delta0block0;

   }

   Residual0_B0(0) = invRe*invSc*mu_B0(0)*d2_yO_dx + invRe*invSc*d1_mu_dx*d1_yO_dx + Residual0_B0(0);

   Residual1_B0(0) = invRe*invSc*mu_B0(0)*d2_yO2_dx + invRe*invSc*d1_mu_dx*d1_yO2_dx + Residual1_B0(0);

   Residual2_B0(0) = invRe*invSc*mu_B0(0)*d2_yN_dx + invRe*invSc*d1_mu_dx*d1_yN_dx + Residual2_B0(0);

   Residual3_B0(0) = invRe*invSc*mu_B0(0)*d2_yN2_dx + invRe*invSc*d1_mu_dx*d1_yN2_dx + Residual3_B0(0);

   Residual4_B0(0) = invRe*invSc*mu_B0(0)*d2_yNO_dx + invRe*invSc*d1_mu_dx*d1_yNO_dx + Residual4_B0(0);

   Residual5_B0(0) = ((4.0/3.0))*invRe*mu_B0(0)*d2_u0_dx + ((4.0/3.0))*invRe*wk0_B0(0)*d1_mu_dx + Residual5_B0(0);

    Residual6_B0(0) = invRe*kappav_B0(0)*d2_Tv_dx + invRe*d1_Tv_dx*d1_kappav_dx + (evN2_B0(0)*d1_yN2_dx +
      evNO_B0(0)*d1_yNO_dx + evO2_B0(0)*d1_yO2_dx)*invRe*invSc*d1_mu_dx + (evN2_B0(0)*d2_yN2_dx + evNO_B0(0)*d2_yNO_dx +
      evO2_B0(0)*d2_yO2_dx + d1_evN2_dx*d1_yN2_dx + d1_evNO_dx*d1_yNO_dx + d1_evO2_dx*d1_yO2_dx)*invRe*invSc*mu_B0(0) +
      Residual6_B0(0);

    Residual7_B0(0) = invRe*kappa_B0(0)*d2_T_dx + invRe*kappav_B0(0)*d2_Tv_dx + invRe*d1_T_dx*d1_kappa_dx +
      invRe*d1_Tv_dx*d1_kappav_dx + ((4.0/3.0))*(wk0_B0(0)*wk0_B0(0))*invRe*mu_B0(0) + (evN2_B0(0)*d1_yN2_dx +
      evNO_B0(0)*d1_yNO_dx + evO2_B0(0)*d1_yO2_dx)*invRe*invSc*d1_mu_dx + (evN2_B0(0)*d2_yN2_dx + evNO_B0(0)*d2_yNO_dx +
      evO2_B0(0)*d2_yO2_dx + d1_evN2_dx*d1_yN2_dx + d1_evNO_dx*d1_yNO_dx + d1_evO2_dx*d1_yO2_dx)*invRe*invSc*mu_B0(0) +
      ((4.0/3.0))*invRe*mu_B0(0)*u0_B0(0)*d2_u0_dx + ((4.0/3.0))*invRe*u0_B0(0)*wk0_B0(0)*d1_mu_dx +
      4186800.0*(dhN*invMN*d1_YN_dx + dhO*invMO*d1_YO_dx + dhNO*invMNO*d1_YNO_dx)*invRe*invSc*d1_mu_dx +
      4186800.0*(dhN*invMN*d2_YN_dx + dhO*invMO*d2_YO_dx + dhNO*invMNO*d2_YNO_dx)*invRe*invSc*mu_B0(0) +
      (2.5*invMN*d1_yN_dx + 2.5*invMO*d1_yO_dx + 3.5*invMN2*d1_YN2_dx + 3.5*invMNO*d1_YNO_dx +
      3.5*invMO2*d1_yO2_dx)*Rhat*invRe*invSc*T_B0(0)*d1_mu_dx + (2.5*invMN*d1_yN_dx + 2.5*invMO*d1_yO_dx +
      3.5*invMN2*d1_YN2_dx + 3.5*invMNO*d1_YNO_dx + 3.5*invMO2*d1_yO2_dx)*Rhat*invRe*invSc*mu_B0(0)*d1_T_dx +
      (2.5*invMN*d2_yN_dx + 2.5*invMO*d2_yO_dx + 3.5*invMN2*d2_YN2_dx + 3.5*invMNO*d2_YNO_dx +
      3.5*invMO2*d2_yO2_dx)*Rhat*invRe*invSc*T_B0(0)*mu_B0(0) + Residual7_B0(0);


  }
  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[26].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_host(args, 28);
  ops_set_halo_dirtybit3(&args[19],range);
  ops_set_halo_dirtybit3(&args[20],range);
  ops_set_halo_dirtybit3(&args[21],range);
  ops_set_halo_dirtybit3(&args[22],range);
  ops_set_halo_dirtybit3(&args[23],range);
  ops_set_halo_dirtybit3(&args[24],range);
  ops_set_halo_dirtybit3(&args[25],range);
  ops_set_halo_dirtybit3(&args[26],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[26].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[26].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[26].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[26].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[26].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[26].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[26].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[26].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[26].transfer += ops_compute_transfer(dim, start, end, &arg7);
    block->instance->OPS_kernels[26].transfer += ops_compute_transfer(dim, start, end, &arg8);
    block->instance->OPS_kernels[26].transfer += ops_compute_transfer(dim, start, end, &arg9);
    block->instance->OPS_kernels[26].transfer += ops_compute_transfer(dim, start, end, &arg10);
    block->instance->OPS_kernels[26].transfer += ops_compute_transfer(dim, start, end, &arg11);
    block->instance->OPS_kernels[26].transfer += ops_compute_transfer(dim, start, end, &arg12);
    block->instance->OPS_kernels[26].transfer += ops_compute_transfer(dim, start, end, &arg13);
    block->instance->OPS_kernels[26].transfer += ops_compute_transfer(dim, start, end, &arg14);
    block->instance->OPS_kernels[26].transfer += ops_compute_transfer(dim, start, end, &arg15);
    block->instance->OPS_kernels[26].transfer += ops_compute_transfer(dim, start, end, &arg16);
    block->instance->OPS_kernels[26].transfer += ops_compute_transfer(dim, start, end, &arg17);
    block->instance->OPS_kernels[26].transfer += ops_compute_transfer(dim, start, end, &arg18);
    block->instance->OPS_kernels[26].transfer += ops_compute_transfer(dim, start, end, &arg19);
    block->instance->OPS_kernels[26].transfer += ops_compute_transfer(dim, start, end, &arg20);
    block->instance->OPS_kernels[26].transfer += ops_compute_transfer(dim, start, end, &arg21);
    block->instance->OPS_kernels[26].transfer += ops_compute_transfer(dim, start, end, &arg22);
    block->instance->OPS_kernels[26].transfer += ops_compute_transfer(dim, start, end, &arg23);
    block->instance->OPS_kernels[26].transfer += ops_compute_transfer(dim, start, end, &arg24);
    block->instance->OPS_kernels[26].transfer += ops_compute_transfer(dim, start, end, &arg25);
    block->instance->OPS_kernels[26].transfer += ops_compute_transfer(dim, start, end, &arg26);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel035(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11,
 ops_arg arg12, ops_arg arg13, ops_arg arg14, ops_arg arg15,
 ops_arg arg16, ops_arg arg17, ops_arg arg18, ops_arg arg19,
 ops_arg arg20, ops_arg arg21, ops_arg arg22, ops_arg arg23,
 ops_arg arg24, ops_arg arg25, ops_arg arg26, ops_arg arg27) {
  ops_arg args[28] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27 };

  //create kernel descriptor and pass it to ops_enqueue_kernel
  create_kerneldesc_and_enque(name, args, 28, 26, dim, 0, range, block, ops_par_loop_opensbliblock00Kernel035_execute);
}
#endif
