//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel025(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10) {
#else
void ops_par_loop_opensbliblock00Kernel025_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  ops_arg arg9 = desc->args[9];
  ops_arg arg10 = desc->args[10];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[11] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,11,range,10)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,10,"opensbliblock00Kernel025");
    block->instance->OPS_kernels[10].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "opensbliblock00Kernel025");
  #endif


  //compute locally allocated range for the sub-block
  int start[1];
  int end[1];
  int arg_idx[1];
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<1; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 11,block, range, start, end, arg_idx) < 0) return;
  #endif


  #if defined(OPS_MPI)
  #if defined(OPS_LAZY)
  sub_block_list sb = OPS_sub_block_list[block->index];
  arg_idx[0] = sb->decomp_disp[0];
  #else
  arg_idx[0] -= start[0];
  #endif
  #else //OPS_MPI
  arg_idx[0] = 0;
  #endif //OPS_MPI

  //initialize global variable with the dimension of dats

  //set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset;
  double * __restrict__ T_B0_p = (double *)(args[0].data + base0);

  int base1 = args[1].dat->base_offset;
  double * __restrict__ YN2_B0_p = (double *)(args[1].data + base1);

  int base2 = args[2].dat->base_offset;
  double * __restrict__ YN_B0_p = (double *)(args[2].data + base2);

  int base3 = args[3].dat->base_offset;
  double * __restrict__ evN2_B0_p = (double *)(args[3].data + base3);

  int base4 = args[4].dat->base_offset;
  double * __restrict__ mu_B0_p = (double *)(args[4].data + base4);

  int base5 = args[5].dat->base_offset;
  double * __restrict__ yN2_B0_p = (double *)(args[5].data + base5);

  int base6 = args[6].dat->base_offset;
  double * __restrict__ yN_B0_p = (double *)(args[6].data + base6);

  int base7 = args[7].dat->base_offset;
  double * __restrict__ Residual0_B0_p = (double *)(args[7].data + base7);

  int base8 = args[8].dat->base_offset;
  double * __restrict__ Residual1_B0_p = (double *)(args[8].data + base8);

  int base9 = args[9].dat->base_offset;
  double * __restrict__ Residual4_B0_p = (double *)(args[9].data + base9);




  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_host(args, 11);
  ops_halo_exchanges(args,11,range);
  ops_H_D_exchanges_host(args, 11);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[10].mpi_time += __t1-__t2;
  }

  #pragma omp parallel for
  for ( int n_x=start[0]; n_x<end[0]; n_x++ ){
    int idx[] = {arg_idx[0]+n_x};
    const ACC<double> T_B0(T_B0_p + n_x*1);
    const ACC<double> YN2_B0(YN2_B0_p + n_x*1);
    const ACC<double> YN_B0(YN_B0_p + n_x*1);
    const ACC<double> evN2_B0(evN2_B0_p + n_x*1);
    const ACC<double> mu_B0(mu_B0_p + n_x*1);
    const ACC<double> yN2_B0(yN2_B0_p + n_x*1);
    const ACC<double> yN_B0(yN_B0_p + n_x*1);
    ACC<double> Residual0_B0(Residual0_B0_p + n_x*1);
    ACC<double> Residual1_B0(Residual1_B0_p + n_x*1);
    ACC<double> Residual4_B0(Residual4_B0_p + n_x*1);
    
   double d1_T_dx = 0.0;
   double d1_YN2_dx = 0.0;
   double d1_YN_dx = 0.0;
   double d1_evN2_dx = 0.0;
   double d1_mu_dx = 0.0;
   double d1_yN2_dx = 0.0;
   double d1_yN_dx = 0.0;
   double d2_T_dx = 0.0;
   double d2_YN2_dx = 0.0;
   double d2_YN_dx = 0.0;
   double d2_yN2_dx = 0.0;
   double d2_yN_dx = 0.0;
   if (idx[0] == 0){

      d1_T_dx = (3.0*T_B0(1) + 0.333333333333333*T_B0(3) - 1.5*T_B0(2) - 1.83333333333333*T_B0(0))*invDelta0block0;

       d1_YN2_dx = (3.0*YN2_B0(1) + 0.333333333333333*YN2_B0(3) - 1.5*YN2_B0(2) -
            1.83333333333333*YN2_B0(0))*invDelta0block0;

       d1_YN_dx = (3.0*YN_B0(1) + 0.333333333333333*YN_B0(3) - 1.5*YN_B0(2) -
            1.83333333333333*YN_B0(0))*invDelta0block0;

       d1_evN2_dx = (3.0*evN2_B0(1) + 0.333333333333333*evN2_B0(3) - 1.5*evN2_B0(2) -
            1.83333333333333*evN2_B0(0))*invDelta0block0;

       d1_mu_dx = (3.0*mu_B0(1) + 0.333333333333333*mu_B0(3) - 1.5*mu_B0(2) -
            1.83333333333333*mu_B0(0))*invDelta0block0;

       d1_yN2_dx = (3.0*yN2_B0(1) + 0.333333333333333*yN2_B0(3) - 1.5*yN2_B0(2) -
            1.83333333333333*yN2_B0(0))*invDelta0block0;

       d1_yN_dx = (3.0*yN_B0(1) + 0.333333333333333*yN_B0(3) - 1.5*yN_B0(2) -
            1.83333333333333*yN_B0(0))*invDelta0block0;

   }

   else if (idx[0] == 1){

       d1_T_dx = (0.0394168524399447*T_B0(2) + 0.00571369039775442*T_B0(4) + 0.719443173328855*T_B0(1) -
            0.322484932882161*T_B0(0) - 0.0658051057710389*T_B0(3) - 0.376283677513354*T_B0(-1))*invDelta0block0;

       d1_YN2_dx = (0.0394168524399447*YN2_B0(2) + 0.00571369039775442*YN2_B0(4) + 0.719443173328855*YN2_B0(1) -
            0.322484932882161*YN2_B0(0) - 0.0658051057710389*YN2_B0(3) - 0.376283677513354*YN2_B0(-1))*invDelta0block0;

       d1_YN_dx = (0.0394168524399447*YN_B0(2) + 0.00571369039775442*YN_B0(4) + 0.719443173328855*YN_B0(1) -
            0.322484932882161*YN_B0(0) - 0.0658051057710389*YN_B0(3) - 0.376283677513354*YN_B0(-1))*invDelta0block0;

       d1_evN2_dx = (0.0394168524399447*evN2_B0(2) + 0.00571369039775442*evN2_B0(4) + 0.719443173328855*evN2_B0(1) -
            0.322484932882161*evN2_B0(0) - 0.0658051057710389*evN2_B0(3) -
            0.376283677513354*evN2_B0(-1))*invDelta0block0;

       d1_mu_dx = (0.0394168524399447*mu_B0(2) + 0.00571369039775442*mu_B0(4) + 0.719443173328855*mu_B0(1) -
            0.322484932882161*mu_B0(0) - 0.0658051057710389*mu_B0(3) - 0.376283677513354*mu_B0(-1))*invDelta0block0;

       d1_yN2_dx = (0.0394168524399447*yN2_B0(2) + 0.00571369039775442*yN2_B0(4) + 0.719443173328855*yN2_B0(1) -
            0.322484932882161*yN2_B0(0) - 0.0658051057710389*yN2_B0(3) - 0.376283677513354*yN2_B0(-1))*invDelta0block0;

       d1_yN_dx = (0.0394168524399447*yN_B0(2) + 0.00571369039775442*yN_B0(4) + 0.719443173328855*yN_B0(1) -
            0.322484932882161*yN_B0(0) - 0.0658051057710389*yN_B0(3) - 0.376283677513354*yN_B0(-1))*invDelta0block0;

   }

   else if (idx[0] == 2){

       d1_T_dx = (0.197184333887745*T_B0(0) + 0.521455851089587*T_B0(1) + 0.113446470384241*T_B0(-2) -
            0.00412637789557492*T_B0(3) - 0.0367146847001261*T_B0(2) - 0.791245592765872*T_B0(-1))*invDelta0block0;

       d1_YN2_dx = (0.197184333887745*YN2_B0(0) + 0.521455851089587*YN2_B0(1) + 0.113446470384241*YN2_B0(-2) -
            0.00412637789557492*YN2_B0(3) - 0.0367146847001261*YN2_B0(2) -
            0.791245592765872*YN2_B0(-1))*invDelta0block0;

       d1_YN_dx = (0.197184333887745*YN_B0(0) + 0.521455851089587*YN_B0(1) + 0.113446470384241*YN_B0(-2) -
            0.00412637789557492*YN_B0(3) - 0.0367146847001261*YN_B0(2) - 0.791245592765872*YN_B0(-1))*invDelta0block0;

       d1_evN2_dx = (0.197184333887745*evN2_B0(0) + 0.521455851089587*evN2_B0(1) + 0.113446470384241*evN2_B0(-2) -
            0.00412637789557492*evN2_B0(3) - 0.0367146847001261*evN2_B0(2) -
            0.791245592765872*evN2_B0(-1))*invDelta0block0;

       d1_mu_dx = (0.197184333887745*mu_B0(0) + 0.521455851089587*mu_B0(1) + 0.113446470384241*mu_B0(-2) -
            0.00412637789557492*mu_B0(3) - 0.0367146847001261*mu_B0(2) - 0.791245592765872*mu_B0(-1))*invDelta0block0;

       d1_yN2_dx = (0.197184333887745*yN2_B0(0) + 0.521455851089587*yN2_B0(1) + 0.113446470384241*yN2_B0(-2) -
            0.00412637789557492*yN2_B0(3) - 0.0367146847001261*yN2_B0(2) -
            0.791245592765872*yN2_B0(-1))*invDelta0block0;

       d1_yN_dx = (0.197184333887745*yN_B0(0) + 0.521455851089587*yN_B0(1) + 0.113446470384241*yN_B0(-2) -
            0.00412637789557492*yN_B0(3) - 0.0367146847001261*yN_B0(2) - 0.791245592765872*yN_B0(-1))*invDelta0block0;

   }

   else if (idx[0] == 3){

       d1_T_dx = (0.0451033223343881*T_B0(0) + 0.652141084861241*T_B0(1) + 0.121937153224065*T_B0(-2) -
            0.00932597985049999*T_B0(-3) - 0.727822147724592*T_B0(-1) - 0.082033432844602*T_B0(2))*invDelta0block0;

       d1_YN2_dx = (0.0451033223343881*YN2_B0(0) + 0.652141084861241*YN2_B0(1) + 0.121937153224065*YN2_B0(-2) -
            0.00932597985049999*YN2_B0(-3) - 0.727822147724592*YN2_B0(-1) -
            0.082033432844602*YN2_B0(2))*invDelta0block0;

       d1_YN_dx = (0.0451033223343881*YN_B0(0) + 0.652141084861241*YN_B0(1) + 0.121937153224065*YN_B0(-2) -
            0.00932597985049999*YN_B0(-3) - 0.727822147724592*YN_B0(-1) - 0.082033432844602*YN_B0(2))*invDelta0block0;

       d1_evN2_dx = (0.0451033223343881*evN2_B0(0) + 0.652141084861241*evN2_B0(1) + 0.121937153224065*evN2_B0(-2) -
            0.00932597985049999*evN2_B0(-3) - 0.727822147724592*evN2_B0(-1) -
            0.082033432844602*evN2_B0(2))*invDelta0block0;

       d1_mu_dx = (0.0451033223343881*mu_B0(0) + 0.652141084861241*mu_B0(1) + 0.121937153224065*mu_B0(-2) -
            0.00932597985049999*mu_B0(-3) - 0.727822147724592*mu_B0(-1) - 0.082033432844602*mu_B0(2))*invDelta0block0;

       d1_yN2_dx = (0.0451033223343881*yN2_B0(0) + 0.652141084861241*yN2_B0(1) + 0.121937153224065*yN2_B0(-2) -
            0.00932597985049999*yN2_B0(-3) - 0.727822147724592*yN2_B0(-1) -
            0.082033432844602*yN2_B0(2))*invDelta0block0;

       d1_yN_dx = (0.0451033223343881*yN_B0(0) + 0.652141084861241*yN_B0(1) + 0.121937153224065*yN_B0(-2) -
            0.00932597985049999*yN_B0(-3) - 0.727822147724592*yN_B0(-1) - 0.082033432844602*yN_B0(2))*invDelta0block0;

   }

   else if (idx[0] == -1 + block0np0){

      d1_T_dx = (1.5*T_B0(-2) + 1.83333333333333*T_B0(0) - 3.0*T_B0(-1) - 0.333333333333333*T_B0(-3))*invDelta0block0;

       d1_YN2_dx = (1.5*YN2_B0(-2) + 1.83333333333333*YN2_B0(0) - 3.0*YN2_B0(-1) -
            0.333333333333333*YN2_B0(-3))*invDelta0block0;

       d1_YN_dx = (1.5*YN_B0(-2) + 1.83333333333333*YN_B0(0) - 3.0*YN_B0(-1) -
            0.333333333333333*YN_B0(-3))*invDelta0block0;

       d1_evN2_dx = (1.5*evN2_B0(-2) + 1.83333333333333*evN2_B0(0) - 3.0*evN2_B0(-1) -
            0.333333333333333*evN2_B0(-3))*invDelta0block0;

       d1_mu_dx = (1.5*mu_B0(-2) + 1.83333333333333*mu_B0(0) - 3.0*mu_B0(-1) -
            0.333333333333333*mu_B0(-3))*invDelta0block0;

       d1_yN2_dx = (1.5*yN2_B0(-2) + 1.83333333333333*yN2_B0(0) - 3.0*yN2_B0(-1) -
            0.333333333333333*yN2_B0(-3))*invDelta0block0;

       d1_yN_dx = (1.5*yN_B0(-2) + 1.83333333333333*yN_B0(0) - 3.0*yN_B0(-1) -
            0.333333333333333*yN_B0(-3))*invDelta0block0;

   }

   else if (idx[0] == -2 + block0np0){

       d1_T_dx = (0.322484932882161*T_B0(0) + 0.0658051057710389*T_B0(-3) + 0.376283677513354*T_B0(1) -
            0.0394168524399447*T_B0(-2) - 0.00571369039775442*T_B0(-4) - 0.719443173328855*T_B0(-1))*invDelta0block0;

       d1_YN2_dx = (0.322484932882161*YN2_B0(0) + 0.0658051057710389*YN2_B0(-3) + 0.376283677513354*YN2_B0(1) -
            0.0394168524399447*YN2_B0(-2) - 0.00571369039775442*YN2_B0(-4) -
            0.719443173328855*YN2_B0(-1))*invDelta0block0;

       d1_YN_dx = (0.322484932882161*YN_B0(0) + 0.0658051057710389*YN_B0(-3) + 0.376283677513354*YN_B0(1) -
            0.0394168524399447*YN_B0(-2) - 0.00571369039775442*YN_B0(-4) -
            0.719443173328855*YN_B0(-1))*invDelta0block0;

       d1_evN2_dx = (0.322484932882161*evN2_B0(0) + 0.0658051057710389*evN2_B0(-3) + 0.376283677513354*evN2_B0(1) -
            0.0394168524399447*evN2_B0(-2) - 0.00571369039775442*evN2_B0(-4) -
            0.719443173328855*evN2_B0(-1))*invDelta0block0;

       d1_mu_dx = (0.322484932882161*mu_B0(0) + 0.0658051057710389*mu_B0(-3) + 0.376283677513354*mu_B0(1) -
            0.0394168524399447*mu_B0(-2) - 0.00571369039775442*mu_B0(-4) -
            0.719443173328855*mu_B0(-1))*invDelta0block0;

       d1_yN2_dx = (0.322484932882161*yN2_B0(0) + 0.0658051057710389*yN2_B0(-3) + 0.376283677513354*yN2_B0(1) -
            0.0394168524399447*yN2_B0(-2) - 0.00571369039775442*yN2_B0(-4) -
            0.719443173328855*yN2_B0(-1))*invDelta0block0;

       d1_yN_dx = (0.322484932882161*yN_B0(0) + 0.0658051057710389*yN_B0(-3) + 0.376283677513354*yN_B0(1) -
            0.0394168524399447*yN_B0(-2) - 0.00571369039775442*yN_B0(-4) -
            0.719443173328855*yN_B0(-1))*invDelta0block0;

   }

   else if (idx[0] == -3 + block0np0){

       d1_T_dx = (0.00412637789557492*T_B0(-3) + 0.0367146847001261*T_B0(-2) + 0.791245592765872*T_B0(1) -
            0.197184333887745*T_B0(0) - 0.521455851089587*T_B0(-1) - 0.113446470384241*T_B0(2))*invDelta0block0;

       d1_YN2_dx = (0.00412637789557492*YN2_B0(-3) + 0.0367146847001261*YN2_B0(-2) + 0.791245592765872*YN2_B0(1) -
            0.197184333887745*YN2_B0(0) - 0.521455851089587*YN2_B0(-1) - 0.113446470384241*YN2_B0(2))*invDelta0block0;

       d1_YN_dx = (0.00412637789557492*YN_B0(-3) + 0.0367146847001261*YN_B0(-2) + 0.791245592765872*YN_B0(1) -
            0.197184333887745*YN_B0(0) - 0.521455851089587*YN_B0(-1) - 0.113446470384241*YN_B0(2))*invDelta0block0;

       d1_evN2_dx = (0.00412637789557492*evN2_B0(-3) + 0.0367146847001261*evN2_B0(-2) + 0.791245592765872*evN2_B0(1) -
            0.197184333887745*evN2_B0(0) - 0.521455851089587*evN2_B0(-1) -
            0.113446470384241*evN2_B0(2))*invDelta0block0;

       d1_mu_dx = (0.00412637789557492*mu_B0(-3) + 0.0367146847001261*mu_B0(-2) + 0.791245592765872*mu_B0(1) -
            0.197184333887745*mu_B0(0) - 0.521455851089587*mu_B0(-1) - 0.113446470384241*mu_B0(2))*invDelta0block0;

       d1_yN2_dx = (0.00412637789557492*yN2_B0(-3) + 0.0367146847001261*yN2_B0(-2) + 0.791245592765872*yN2_B0(1) -
            0.197184333887745*yN2_B0(0) - 0.521455851089587*yN2_B0(-1) - 0.113446470384241*yN2_B0(2))*invDelta0block0;

       d1_yN_dx = (0.00412637789557492*yN_B0(-3) + 0.0367146847001261*yN_B0(-2) + 0.791245592765872*yN_B0(1) -
            0.197184333887745*yN_B0(0) - 0.521455851089587*yN_B0(-1) - 0.113446470384241*yN_B0(2))*invDelta0block0;

   }

   else if (idx[0] == -4 + block0np0){

       d1_T_dx = (0.00932597985049999*T_B0(3) + 0.727822147724592*T_B0(1) + 0.082033432844602*T_B0(-2) -
            0.0451033223343881*T_B0(0) - 0.652141084861241*T_B0(-1) - 0.121937153224065*T_B0(2))*invDelta0block0;

       d1_YN2_dx = (0.00932597985049999*YN2_B0(3) + 0.727822147724592*YN2_B0(1) + 0.082033432844602*YN2_B0(-2) -
            0.0451033223343881*YN2_B0(0) - 0.652141084861241*YN2_B0(-1) - 0.121937153224065*YN2_B0(2))*invDelta0block0;

       d1_YN_dx = (0.00932597985049999*YN_B0(3) + 0.727822147724592*YN_B0(1) + 0.082033432844602*YN_B0(-2) -
            0.0451033223343881*YN_B0(0) - 0.652141084861241*YN_B0(-1) - 0.121937153224065*YN_B0(2))*invDelta0block0;

       d1_evN2_dx = (0.00932597985049999*evN2_B0(3) + 0.727822147724592*evN2_B0(1) + 0.082033432844602*evN2_B0(-2) -
            0.0451033223343881*evN2_B0(0) - 0.652141084861241*evN2_B0(-1) -
            0.121937153224065*evN2_B0(2))*invDelta0block0;

       d1_mu_dx = (0.00932597985049999*mu_B0(3) + 0.727822147724592*mu_B0(1) + 0.082033432844602*mu_B0(-2) -
            0.0451033223343881*mu_B0(0) - 0.652141084861241*mu_B0(-1) - 0.121937153224065*mu_B0(2))*invDelta0block0;

       d1_yN2_dx = (0.00932597985049999*yN2_B0(3) + 0.727822147724592*yN2_B0(1) + 0.082033432844602*yN2_B0(-2) -
            0.0451033223343881*yN2_B0(0) - 0.652141084861241*yN2_B0(-1) - 0.121937153224065*yN2_B0(2))*invDelta0block0;

       d1_yN_dx = (0.00932597985049999*yN_B0(3) + 0.727822147724592*yN_B0(1) + 0.082033432844602*yN_B0(-2) -
            0.0451033223343881*yN_B0(0) - 0.652141084861241*yN_B0(-1) - 0.121937153224065*yN_B0(2))*invDelta0block0;

   }

   else{

       d1_T_dx = (-(2.0/3.0)*T_B0(-1) - (1.0/12.0)*T_B0(2) + ((1.0/12.0))*T_B0(-2) +
            ((2.0/3.0))*T_B0(1))*invDelta0block0;

       d1_YN2_dx = (-(2.0/3.0)*YN2_B0(-1) - (1.0/12.0)*YN2_B0(2) + ((1.0/12.0))*YN2_B0(-2) +
            ((2.0/3.0))*YN2_B0(1))*invDelta0block0;

       d1_YN_dx = (-(2.0/3.0)*YN_B0(-1) - (1.0/12.0)*YN_B0(2) + ((1.0/12.0))*YN_B0(-2) +
            ((2.0/3.0))*YN_B0(1))*invDelta0block0;

       d1_evN2_dx = (-(2.0/3.0)*evN2_B0(-1) - (1.0/12.0)*evN2_B0(2) + ((1.0/12.0))*evN2_B0(-2) +
            ((2.0/3.0))*evN2_B0(1))*invDelta0block0;

       d1_mu_dx = (-(2.0/3.0)*mu_B0(-1) - (1.0/12.0)*mu_B0(2) + ((1.0/12.0))*mu_B0(-2) +
            ((2.0/3.0))*mu_B0(1))*invDelta0block0;

       d1_yN2_dx = (-(2.0/3.0)*yN2_B0(-1) - (1.0/12.0)*yN2_B0(2) + ((1.0/12.0))*yN2_B0(-2) +
            ((2.0/3.0))*yN2_B0(1))*invDelta0block0;

       d1_yN_dx = (-(2.0/3.0)*yN_B0(-1) - (1.0/12.0)*yN_B0(2) + ((1.0/12.0))*yN_B0(-2) +
            ((2.0/3.0))*yN_B0(1))*invDelta0block0;

   }

   if (idx[0] == 0){

       d2_T_dx = (-(26.0/3.0)*T_B0(1) - (14.0/3.0)*T_B0(3) + ((11.0/12.0))*T_B0(4) + ((19.0/2.0))*T_B0(2) +
            ((35.0/12.0))*T_B0(0))*inv2Delta0block0;

       d2_YN2_dx = (-(26.0/3.0)*YN2_B0(1) - (14.0/3.0)*YN2_B0(3) + ((11.0/12.0))*YN2_B0(4) + ((19.0/2.0))*YN2_B0(2) +
            ((35.0/12.0))*YN2_B0(0))*inv2Delta0block0;

       d2_YN_dx = (-(26.0/3.0)*YN_B0(1) - (14.0/3.0)*YN_B0(3) + ((11.0/12.0))*YN_B0(4) + ((19.0/2.0))*YN_B0(2) +
            ((35.0/12.0))*YN_B0(0))*inv2Delta0block0;

       d2_yN2_dx = (-(26.0/3.0)*yN2_B0(1) - (14.0/3.0)*yN2_B0(3) + ((11.0/12.0))*yN2_B0(4) + ((19.0/2.0))*yN2_B0(2) +
            ((35.0/12.0))*yN2_B0(0))*inv2Delta0block0;

       d2_yN_dx = (-(26.0/3.0)*yN_B0(1) - (14.0/3.0)*yN_B0(3) + ((11.0/12.0))*yN_B0(4) + ((19.0/2.0))*yN_B0(2) +
            ((35.0/12.0))*yN_B0(0))*inv2Delta0block0;

   }

   else if (idx[0] == 1){

       d2_T_dx = (((1.0/2.0))*T_B0(1) - (5.0/3.0)*T_B0(0) - (1.0/12.0)*T_B0(3) + ((1.0/3.0))*T_B0(2) +
            ((11.0/12.0))*T_B0(-1))*inv2Delta0block0;

       d2_YN2_dx = (((1.0/2.0))*YN2_B0(1) - (5.0/3.0)*YN2_B0(0) - (1.0/12.0)*YN2_B0(3) + ((1.0/3.0))*YN2_B0(2) +
            ((11.0/12.0))*YN2_B0(-1))*inv2Delta0block0;

       d2_YN_dx = (((1.0/2.0))*YN_B0(1) - (5.0/3.0)*YN_B0(0) - (1.0/12.0)*YN_B0(3) + ((1.0/3.0))*YN_B0(2) +
            ((11.0/12.0))*YN_B0(-1))*inv2Delta0block0;

       d2_yN2_dx = (((1.0/2.0))*yN2_B0(1) - (5.0/3.0)*yN2_B0(0) - (1.0/12.0)*yN2_B0(3) + ((1.0/3.0))*yN2_B0(2) +
            ((11.0/12.0))*yN2_B0(-1))*inv2Delta0block0;

       d2_yN_dx = (((1.0/2.0))*yN_B0(1) - (5.0/3.0)*yN_B0(0) - (1.0/12.0)*yN_B0(3) + ((1.0/3.0))*yN_B0(2) +
            ((11.0/12.0))*yN_B0(-1))*inv2Delta0block0;

   }

   else if (idx[0] == -1 + block0np0){

       d2_T_dx = (-(26.0/3.0)*T_B0(-1) - (14.0/3.0)*T_B0(-3) + ((11.0/12.0))*T_B0(-4) + ((19.0/2.0))*T_B0(-2) +
            ((35.0/12.0))*T_B0(0))*inv2Delta0block0;

       d2_YN2_dx = (-(26.0/3.0)*YN2_B0(-1) - (14.0/3.0)*YN2_B0(-3) + ((11.0/12.0))*YN2_B0(-4) + ((19.0/2.0))*YN2_B0(-2)
            + ((35.0/12.0))*YN2_B0(0))*inv2Delta0block0;

       d2_YN_dx = (-(26.0/3.0)*YN_B0(-1) - (14.0/3.0)*YN_B0(-3) + ((11.0/12.0))*YN_B0(-4) + ((19.0/2.0))*YN_B0(-2) +
            ((35.0/12.0))*YN_B0(0))*inv2Delta0block0;

       d2_yN2_dx = (-(26.0/3.0)*yN2_B0(-1) - (14.0/3.0)*yN2_B0(-3) + ((11.0/12.0))*yN2_B0(-4) + ((19.0/2.0))*yN2_B0(-2)
            + ((35.0/12.0))*yN2_B0(0))*inv2Delta0block0;

       d2_yN_dx = (-(26.0/3.0)*yN_B0(-1) - (14.0/3.0)*yN_B0(-3) + ((11.0/12.0))*yN_B0(-4) + ((19.0/2.0))*yN_B0(-2) +
            ((35.0/12.0))*yN_B0(0))*inv2Delta0block0;

   }

   else if (idx[0] == -2 + block0np0){

       d2_T_dx = (((1.0/2.0))*T_B0(-1) - (5.0/3.0)*T_B0(0) - (1.0/12.0)*T_B0(-3) + ((1.0/3.0))*T_B0(-2) +
            ((11.0/12.0))*T_B0(1))*inv2Delta0block0;

       d2_YN2_dx = (((1.0/2.0))*YN2_B0(-1) - (5.0/3.0)*YN2_B0(0) - (1.0/12.0)*YN2_B0(-3) + ((1.0/3.0))*YN2_B0(-2) +
            ((11.0/12.0))*YN2_B0(1))*inv2Delta0block0;

       d2_YN_dx = (((1.0/2.0))*YN_B0(-1) - (5.0/3.0)*YN_B0(0) - (1.0/12.0)*YN_B0(-3) + ((1.0/3.0))*YN_B0(-2) +
            ((11.0/12.0))*YN_B0(1))*inv2Delta0block0;

       d2_yN2_dx = (((1.0/2.0))*yN2_B0(-1) - (5.0/3.0)*yN2_B0(0) - (1.0/12.0)*yN2_B0(-3) + ((1.0/3.0))*yN2_B0(-2) +
            ((11.0/12.0))*yN2_B0(1))*inv2Delta0block0;

       d2_yN_dx = (((1.0/2.0))*yN_B0(-1) - (5.0/3.0)*yN_B0(0) - (1.0/12.0)*yN_B0(-3) + ((1.0/3.0))*yN_B0(-2) +
            ((11.0/12.0))*yN_B0(1))*inv2Delta0block0;

   }

   else{

       d2_T_dx = (-(5.0/2.0)*T_B0(0) - (1.0/12.0)*T_B0(-2) - (1.0/12.0)*T_B0(2) + ((4.0/3.0))*T_B0(1) +
            ((4.0/3.0))*T_B0(-1))*inv2Delta0block0;

       d2_YN2_dx = (-(5.0/2.0)*YN2_B0(0) - (1.0/12.0)*YN2_B0(-2) - (1.0/12.0)*YN2_B0(2) + ((4.0/3.0))*YN2_B0(1) +
            ((4.0/3.0))*YN2_B0(-1))*inv2Delta0block0;

       d2_YN_dx = (-(5.0/2.0)*YN_B0(0) - (1.0/12.0)*YN_B0(-2) - (1.0/12.0)*YN_B0(2) + ((4.0/3.0))*YN_B0(1) +
            ((4.0/3.0))*YN_B0(-1))*inv2Delta0block0;

       d2_yN2_dx = (-(5.0/2.0)*yN2_B0(0) - (1.0/12.0)*yN2_B0(-2) - (1.0/12.0)*yN2_B0(2) + ((4.0/3.0))*yN2_B0(1) +
            ((4.0/3.0))*yN2_B0(-1))*inv2Delta0block0;

       d2_yN_dx = (-(5.0/2.0)*yN_B0(0) - (1.0/12.0)*yN_B0(-2) - (1.0/12.0)*yN_B0(2) + ((4.0/3.0))*yN_B0(1) +
            ((4.0/3.0))*yN_B0(-1))*inv2Delta0block0;

   }

   Residual0_B0(0) = invRe*invSc*mu_B0(0)*d2_yN_dx + invRe*invSc*d1_mu_dx*d1_yN_dx + Residual0_B0(0);

   Residual1_B0(0) = invRe*invSc*mu_B0(0)*d2_yN2_dx + invRe*invSc*d1_mu_dx*d1_yN2_dx + Residual1_B0(0);

    Residual4_B0(0) = invRe*kappa*d2_T_dx + invRe*invSc*mu_B0(0)*evN2_B0(0)*d2_yN2_dx +
      invRe*invSc*mu_B0(0)*d1_evN2_dx*d1_yN2_dx + invRe*invSc*evN2_B0(0)*d1_mu_dx*d1_yN2_dx + (2.5*invMN*d1_yN_dx +
      3.5*invMN2*d1_YN2_dx)*Rhat*invRe*invSc*T_B0(0)*d1_mu_dx + (2.5*invMN*d1_yN_dx +
      3.5*invMN2*d1_YN2_dx)*Rhat*invRe*invSc*mu_B0(0)*d1_T_dx + (2.5*invMN*d2_yN_dx +
      3.5*invMN2*d2_YN2_dx)*Rhat*invRe*invSc*T_B0(0)*mu_B0(0) + 4186800.0*dhN*invMN*invRe*invSc*mu_B0(0)*d2_YN_dx +
      4186800.0*dhN*invMN*invRe*invSc*d1_YN_dx*d1_mu_dx + Residual4_B0(0);


  }
  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[10].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_host(args, 11);
  ops_set_halo_dirtybit3(&args[7],range);
  ops_set_halo_dirtybit3(&args[8],range);
  ops_set_halo_dirtybit3(&args[9],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[10].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[10].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[10].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[10].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[10].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[10].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[10].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[10].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[10].transfer += ops_compute_transfer(dim, start, end, &arg7);
    block->instance->OPS_kernels[10].transfer += ops_compute_transfer(dim, start, end, &arg8);
    block->instance->OPS_kernels[10].transfer += ops_compute_transfer(dim, start, end, &arg9);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel025(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10) {
  ops_arg args[11] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10 };

  //create kernel descriptor and pass it to ops_enqueue_kernel
  create_kerneldesc_and_enque(name, args, 11, 10, dim, 0, range, block, ops_par_loop_opensbliblock00Kernel025_execute);
}
#endif
