//
// auto-generated by ops.py
//
__constant__ int dims_opensbliblock00Kernel021 [9][1];
static int dims_opensbliblock00Kernel021_h [9][1] = {{0}};

//user function
__device__

 void opensbliblock00Kernel021_gpu(const ACC<double> &Sc_B0,
  const ACC<double> &T_B0,
  const ACC<double> &mu_B0,
  const
ACC<double> &yN2_B0,
  const ACC<double> &yN_B0,
  ACC<double> &Residual0_B0,
  ACC<double> &Residual1_B0,
  ACC<double>
&Residual4_B0,
  const int *idx)
{
   double d1_Sc_dx = 0.0;
   double d1_mu_dx = 0.0;
   double d1_yN2_dx = 0.0;
   double d1_yN_dx = 0.0;
   double d2_T_dx = 0.0;
   double d2_yN2_dx = 0.0;
   double d2_yN_dx = 0.0;
   if (idx[0] == 0){

       d1_Sc_dx = (3.0*Sc_B0(1) + 0.333333333333333*Sc_B0(3) - 1.5*Sc_B0(2) -
            1.83333333333333*Sc_B0(0))*invDelta0block0;

       d1_mu_dx = (3.0*mu_B0(1) + 0.333333333333333*mu_B0(3) - 1.5*mu_B0(2) -
            1.83333333333333*mu_B0(0))*invDelta0block0;

       d1_yN2_dx = (3.0*yN2_B0(1) + 0.333333333333333*yN2_B0(3) - 1.5*yN2_B0(2) -
            1.83333333333333*yN2_B0(0))*invDelta0block0;

       d1_yN_dx = (3.0*yN_B0(1) + 0.333333333333333*yN_B0(3) - 1.5*yN_B0(2) -
            1.83333333333333*yN_B0(0))*invDelta0block0;

   }

   else if (idx[0] == 1){

       d1_Sc_dx = (0.0394168524399447*Sc_B0(2) + 0.00571369039775442*Sc_B0(4) + 0.719443173328855*Sc_B0(1) -
            0.322484932882161*Sc_B0(0) - 0.0658051057710389*Sc_B0(3) - 0.376283677513354*Sc_B0(-1))*invDelta0block0;

       d1_mu_dx = (0.0394168524399447*mu_B0(2) + 0.00571369039775442*mu_B0(4) + 0.719443173328855*mu_B0(1) -
            0.322484932882161*mu_B0(0) - 0.0658051057710389*mu_B0(3) - 0.376283677513354*mu_B0(-1))*invDelta0block0;

       d1_yN2_dx = (0.0394168524399447*yN2_B0(2) + 0.00571369039775442*yN2_B0(4) + 0.719443173328855*yN2_B0(1) -
            0.322484932882161*yN2_B0(0) - 0.0658051057710389*yN2_B0(3) - 0.376283677513354*yN2_B0(-1))*invDelta0block0;

       d1_yN_dx = (0.0394168524399447*yN_B0(2) + 0.00571369039775442*yN_B0(4) + 0.719443173328855*yN_B0(1) -
            0.322484932882161*yN_B0(0) - 0.0658051057710389*yN_B0(3) - 0.376283677513354*yN_B0(-1))*invDelta0block0;

   }

   else if (idx[0] == 2){

       d1_Sc_dx = (0.197184333887745*Sc_B0(0) + 0.521455851089587*Sc_B0(1) + 0.113446470384241*Sc_B0(-2) -
            0.00412637789557492*Sc_B0(3) - 0.0367146847001261*Sc_B0(2) - 0.791245592765872*Sc_B0(-1))*invDelta0block0;

       d1_mu_dx = (0.197184333887745*mu_B0(0) + 0.521455851089587*mu_B0(1) + 0.113446470384241*mu_B0(-2) -
            0.00412637789557492*mu_B0(3) - 0.0367146847001261*mu_B0(2) - 0.791245592765872*mu_B0(-1))*invDelta0block0;

       d1_yN2_dx = (0.197184333887745*yN2_B0(0) + 0.521455851089587*yN2_B0(1) + 0.113446470384241*yN2_B0(-2) -
            0.00412637789557492*yN2_B0(3) - 0.0367146847001261*yN2_B0(2) -
            0.791245592765872*yN2_B0(-1))*invDelta0block0;

       d1_yN_dx = (0.197184333887745*yN_B0(0) + 0.521455851089587*yN_B0(1) + 0.113446470384241*yN_B0(-2) -
            0.00412637789557492*yN_B0(3) - 0.0367146847001261*yN_B0(2) - 0.791245592765872*yN_B0(-1))*invDelta0block0;

   }

   else if (idx[0] == 3){

       d1_Sc_dx = (0.0451033223343881*Sc_B0(0) + 0.652141084861241*Sc_B0(1) + 0.121937153224065*Sc_B0(-2) -
            0.00932597985049999*Sc_B0(-3) - 0.727822147724592*Sc_B0(-1) - 0.082033432844602*Sc_B0(2))*invDelta0block0;

       d1_mu_dx = (0.0451033223343881*mu_B0(0) + 0.652141084861241*mu_B0(1) + 0.121937153224065*mu_B0(-2) -
            0.00932597985049999*mu_B0(-3) - 0.727822147724592*mu_B0(-1) - 0.082033432844602*mu_B0(2))*invDelta0block0;

       d1_yN2_dx = (0.0451033223343881*yN2_B0(0) + 0.652141084861241*yN2_B0(1) + 0.121937153224065*yN2_B0(-2) -
            0.00932597985049999*yN2_B0(-3) - 0.727822147724592*yN2_B0(-1) -
            0.082033432844602*yN2_B0(2))*invDelta0block0;

       d1_yN_dx = (0.0451033223343881*yN_B0(0) + 0.652141084861241*yN_B0(1) + 0.121937153224065*yN_B0(-2) -
            0.00932597985049999*yN_B0(-3) - 0.727822147724592*yN_B0(-1) - 0.082033432844602*yN_B0(2))*invDelta0block0;

   }

   else if (idx[0] == -1 + block0np0){

       d1_Sc_dx = (1.5*Sc_B0(-2) + 1.83333333333333*Sc_B0(0) - 3.0*Sc_B0(-1) -
            0.333333333333333*Sc_B0(-3))*invDelta0block0;

       d1_mu_dx = (1.5*mu_B0(-2) + 1.83333333333333*mu_B0(0) - 3.0*mu_B0(-1) -
            0.333333333333333*mu_B0(-3))*invDelta0block0;

       d1_yN2_dx = (1.5*yN2_B0(-2) + 1.83333333333333*yN2_B0(0) - 3.0*yN2_B0(-1) -
            0.333333333333333*yN2_B0(-3))*invDelta0block0;

       d1_yN_dx = (1.5*yN_B0(-2) + 1.83333333333333*yN_B0(0) - 3.0*yN_B0(-1) -
            0.333333333333333*yN_B0(-3))*invDelta0block0;

   }

   else if (idx[0] == -2 + block0np0){

       d1_Sc_dx = (0.322484932882161*Sc_B0(0) + 0.0658051057710389*Sc_B0(-3) + 0.376283677513354*Sc_B0(1) -
            0.0394168524399447*Sc_B0(-2) - 0.00571369039775442*Sc_B0(-4) -
            0.719443173328855*Sc_B0(-1))*invDelta0block0;

       d1_mu_dx = (0.322484932882161*mu_B0(0) + 0.0658051057710389*mu_B0(-3) + 0.376283677513354*mu_B0(1) -
            0.0394168524399447*mu_B0(-2) - 0.00571369039775442*mu_B0(-4) -
            0.719443173328855*mu_B0(-1))*invDelta0block0;

       d1_yN2_dx = (0.322484932882161*yN2_B0(0) + 0.0658051057710389*yN2_B0(-3) + 0.376283677513354*yN2_B0(1) -
            0.0394168524399447*yN2_B0(-2) - 0.00571369039775442*yN2_B0(-4) -
            0.719443173328855*yN2_B0(-1))*invDelta0block0;

       d1_yN_dx = (0.322484932882161*yN_B0(0) + 0.0658051057710389*yN_B0(-3) + 0.376283677513354*yN_B0(1) -
            0.0394168524399447*yN_B0(-2) - 0.00571369039775442*yN_B0(-4) -
            0.719443173328855*yN_B0(-1))*invDelta0block0;

   }

   else if (idx[0] == -3 + block0np0){

       d1_Sc_dx = (0.00412637789557492*Sc_B0(-3) + 0.0367146847001261*Sc_B0(-2) + 0.791245592765872*Sc_B0(1) -
            0.197184333887745*Sc_B0(0) - 0.521455851089587*Sc_B0(-1) - 0.113446470384241*Sc_B0(2))*invDelta0block0;

       d1_mu_dx = (0.00412637789557492*mu_B0(-3) + 0.0367146847001261*mu_B0(-2) + 0.791245592765872*mu_B0(1) -
            0.197184333887745*mu_B0(0) - 0.521455851089587*mu_B0(-1) - 0.113446470384241*mu_B0(2))*invDelta0block0;

       d1_yN2_dx = (0.00412637789557492*yN2_B0(-3) + 0.0367146847001261*yN2_B0(-2) + 0.791245592765872*yN2_B0(1) -
            0.197184333887745*yN2_B0(0) - 0.521455851089587*yN2_B0(-1) - 0.113446470384241*yN2_B0(2))*invDelta0block0;

       d1_yN_dx = (0.00412637789557492*yN_B0(-3) + 0.0367146847001261*yN_B0(-2) + 0.791245592765872*yN_B0(1) -
            0.197184333887745*yN_B0(0) - 0.521455851089587*yN_B0(-1) - 0.113446470384241*yN_B0(2))*invDelta0block0;

   }

   else if (idx[0] == -4 + block0np0){

       d1_Sc_dx = (0.00932597985049999*Sc_B0(3) + 0.727822147724592*Sc_B0(1) + 0.082033432844602*Sc_B0(-2) -
            0.0451033223343881*Sc_B0(0) - 0.652141084861241*Sc_B0(-1) - 0.121937153224065*Sc_B0(2))*invDelta0block0;

       d1_mu_dx = (0.00932597985049999*mu_B0(3) + 0.727822147724592*mu_B0(1) + 0.082033432844602*mu_B0(-2) -
            0.0451033223343881*mu_B0(0) - 0.652141084861241*mu_B0(-1) - 0.121937153224065*mu_B0(2))*invDelta0block0;

       d1_yN2_dx = (0.00932597985049999*yN2_B0(3) + 0.727822147724592*yN2_B0(1) + 0.082033432844602*yN2_B0(-2) -
            0.0451033223343881*yN2_B0(0) - 0.652141084861241*yN2_B0(-1) - 0.121937153224065*yN2_B0(2))*invDelta0block0;

       d1_yN_dx = (0.00932597985049999*yN_B0(3) + 0.727822147724592*yN_B0(1) + 0.082033432844602*yN_B0(-2) -
            0.0451033223343881*yN_B0(0) - 0.652141084861241*yN_B0(-1) - 0.121937153224065*yN_B0(2))*invDelta0block0;

   }

   else{

       d1_Sc_dx = (-(2.0/3.0)*Sc_B0(-1) - (1.0/12.0)*Sc_B0(2) + ((1.0/12.0))*Sc_B0(-2) +
            ((2.0/3.0))*Sc_B0(1))*invDelta0block0;

       d1_mu_dx = (-(2.0/3.0)*mu_B0(-1) - (1.0/12.0)*mu_B0(2) + ((1.0/12.0))*mu_B0(-2) +
            ((2.0/3.0))*mu_B0(1))*invDelta0block0;

       d1_yN2_dx = (-(2.0/3.0)*yN2_B0(-1) - (1.0/12.0)*yN2_B0(2) + ((1.0/12.0))*yN2_B0(-2) +
            ((2.0/3.0))*yN2_B0(1))*invDelta0block0;

       d1_yN_dx = (-(2.0/3.0)*yN_B0(-1) - (1.0/12.0)*yN_B0(2) + ((1.0/12.0))*yN_B0(-2) +
            ((2.0/3.0))*yN_B0(1))*invDelta0block0;

   }

   if (idx[0] == 0){

       d2_T_dx = (-(26.0/3.0)*T_B0(1) - (14.0/3.0)*T_B0(3) + ((11.0/12.0))*T_B0(4) + ((19.0/2.0))*T_B0(2) +
            ((35.0/12.0))*T_B0(0))*inv2Delta0block0;

       d2_yN2_dx = (-(26.0/3.0)*yN2_B0(1) - (14.0/3.0)*yN2_B0(3) + ((11.0/12.0))*yN2_B0(4) + ((19.0/2.0))*yN2_B0(2) +
            ((35.0/12.0))*yN2_B0(0))*inv2Delta0block0;

       d2_yN_dx = (-(26.0/3.0)*yN_B0(1) - (14.0/3.0)*yN_B0(3) + ((11.0/12.0))*yN_B0(4) + ((19.0/2.0))*yN_B0(2) +
            ((35.0/12.0))*yN_B0(0))*inv2Delta0block0;

   }

   else if (idx[0] == 1){

       d2_T_dx = (((1.0/2.0))*T_B0(1) - (5.0/3.0)*T_B0(0) - (1.0/12.0)*T_B0(3) + ((1.0/3.0))*T_B0(2) +
            ((11.0/12.0))*T_B0(-1))*inv2Delta0block0;

       d2_yN2_dx = (((1.0/2.0))*yN2_B0(1) - (5.0/3.0)*yN2_B0(0) - (1.0/12.0)*yN2_B0(3) + ((1.0/3.0))*yN2_B0(2) +
            ((11.0/12.0))*yN2_B0(-1))*inv2Delta0block0;

       d2_yN_dx = (((1.0/2.0))*yN_B0(1) - (5.0/3.0)*yN_B0(0) - (1.0/12.0)*yN_B0(3) + ((1.0/3.0))*yN_B0(2) +
            ((11.0/12.0))*yN_B0(-1))*inv2Delta0block0;

   }

   else if (idx[0] == -1 + block0np0){

       d2_T_dx = (-(26.0/3.0)*T_B0(-1) - (14.0/3.0)*T_B0(-3) + ((11.0/12.0))*T_B0(-4) + ((19.0/2.0))*T_B0(-2) +
            ((35.0/12.0))*T_B0(0))*inv2Delta0block0;

       d2_yN2_dx = (-(26.0/3.0)*yN2_B0(-1) - (14.0/3.0)*yN2_B0(-3) + ((11.0/12.0))*yN2_B0(-4) + ((19.0/2.0))*yN2_B0(-2)
            + ((35.0/12.0))*yN2_B0(0))*inv2Delta0block0;

       d2_yN_dx = (-(26.0/3.0)*yN_B0(-1) - (14.0/3.0)*yN_B0(-3) + ((11.0/12.0))*yN_B0(-4) + ((19.0/2.0))*yN_B0(-2) +
            ((35.0/12.0))*yN_B0(0))*inv2Delta0block0;

   }

   else if (idx[0] == -2 + block0np0){

       d2_T_dx = (((1.0/2.0))*T_B0(-1) - (5.0/3.0)*T_B0(0) - (1.0/12.0)*T_B0(-3) + ((1.0/3.0))*T_B0(-2) +
            ((11.0/12.0))*T_B0(1))*inv2Delta0block0;

       d2_yN2_dx = (((1.0/2.0))*yN2_B0(-1) - (5.0/3.0)*yN2_B0(0) - (1.0/12.0)*yN2_B0(-3) + ((1.0/3.0))*yN2_B0(-2) +
            ((11.0/12.0))*yN2_B0(1))*inv2Delta0block0;

       d2_yN_dx = (((1.0/2.0))*yN_B0(-1) - (5.0/3.0)*yN_B0(0) - (1.0/12.0)*yN_B0(-3) + ((1.0/3.0))*yN_B0(-2) +
            ((11.0/12.0))*yN_B0(1))*inv2Delta0block0;

   }

   else{

       d2_T_dx = (-(5.0/2.0)*T_B0(0) - (1.0/12.0)*T_B0(-2) - (1.0/12.0)*T_B0(2) + ((4.0/3.0))*T_B0(1) +
            ((4.0/3.0))*T_B0(-1))*inv2Delta0block0;

       d2_yN2_dx = (-(5.0/2.0)*yN2_B0(0) - (1.0/12.0)*yN2_B0(-2) - (1.0/12.0)*yN2_B0(2) + ((4.0/3.0))*yN2_B0(1) +
            ((4.0/3.0))*yN2_B0(-1))*inv2Delta0block0;

       d2_yN_dx = (-(5.0/2.0)*yN_B0(0) - (1.0/12.0)*yN_B0(-2) - (1.0/12.0)*yN_B0(2) + ((4.0/3.0))*yN_B0(1) +
            ((4.0/3.0))*yN_B0(-1))*inv2Delta0block0;

   }

    Residual0_B0(0) = invRe*mu_B0(0)*d2_yN_dx/Sc_B0(0) + invRe*d1_mu_dx*d1_yN_dx/Sc_B0(0) -
      invRe*mu_B0(0)*d1_Sc_dx*d1_yN_dx/(Sc_B0(0)*Sc_B0(0)) + Residual0_B0(0);

    Residual1_B0(0) = invRe*mu_B0(0)*d2_yN2_dx/Sc_B0(0) + invRe*d1_mu_dx*d1_yN2_dx/Sc_B0(0) -
      invRe*mu_B0(0)*d1_Sc_dx*d1_yN2_dx/(Sc_B0(0)*Sc_B0(0)) + Residual1_B0(0);

   Residual4_B0(0) = invRe*kappa*d2_T_dx + Residual4_B0(0);

}



__global__ void ops_opensbliblock00Kernel021(
double* __restrict arg0,
double* __restrict arg1,
double* __restrict arg2,
double* __restrict arg3,
double* __restrict arg4,
double* __restrict arg5,
double* __restrict arg6,
double* __restrict arg7,
int arg_idx0,
int size0 ){


  int idx_x = blockDim.x * blockIdx.x + threadIdx.x;

  int arg_idx[1];
  arg_idx[0] = arg_idx0+idx_x;
  arg0 += idx_x * 1*1;
  arg1 += idx_x * 1*1;
  arg2 += idx_x * 1*1;
  arg3 += idx_x * 1*1;
  arg4 += idx_x * 1*1;
  arg5 += idx_x * 1*1;
  arg6 += idx_x * 1*1;
  arg7 += idx_x * 1*1;

  if (idx_x < size0) {
    const ACC<double> argp0(arg0);
    const ACC<double> argp1(arg1);
    const ACC<double> argp2(arg2);
    const ACC<double> argp3(arg3);
    const ACC<double> argp4(arg4);
    ACC<double> argp5(arg5);
    ACC<double> argp6(arg6);
    ACC<double> argp7(arg7);
    opensbliblock00Kernel021_gpu(
     argp0, argp1, argp2, argp3, argp4,
     argp5, argp6, argp7, arg_idx);
  }

}

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel021(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8) {
#else
void ops_par_loop_opensbliblock00Kernel021_execute(ops_kernel_descriptor *desc) {
  int dim = desc->dim;
  #if OPS_MPI
  ops_block block = desc->block;
  #endif
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  #endif

  //Timing
  double t1,t2,c1,c2;

  ops_arg args[9] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8};


  #if CHECKPOINTING && !OPS_LAZY
  if (!ops_checkpointing_before(args,9,range,10)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,10,"opensbliblock00Kernel021");
    block->instance->OPS_kernels[10].count++;
    ops_timers_core(&c1,&t1);
  }

  //compute locally allocated range for the sub-block
  int start[1];
  int end[1];

  int arg_idx[1];
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<1; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 9,block, range, start, end, arg_idx) < 0) return;
  #endif

  #if defined(OPS_MPI)
  #if defined(OPS_LAZY)
  sub_block_list sb = OPS_sub_block_list[block->index];
  arg_idx[0] = sb->decomp_disp[0]+start[0];
  #endif
  #else //OPS_MPI
  arg_idx[0] = start[0];
  #endif //OPS_MPI
  int xdim0 = args[0].dat->size[0];
  int xdim1 = args[1].dat->size[0];
  int xdim2 = args[2].dat->size[0];
  int xdim3 = args[3].dat->size[0];
  int xdim4 = args[4].dat->size[0];
  int xdim5 = args[5].dat->size[0];
  int xdim6 = args[6].dat->size[0];
  int xdim7 = args[7].dat->size[0];

  if (xdim0 != dims_opensbliblock00Kernel021_h[0][0] || xdim1 != dims_opensbliblock00Kernel021_h[1][0] || xdim2 != dims_opensbliblock00Kernel021_h[2][0] || xdim3 != dims_opensbliblock00Kernel021_h[3][0] || xdim4 != dims_opensbliblock00Kernel021_h[4][0] || xdim5 != dims_opensbliblock00Kernel021_h[5][0] || xdim6 != dims_opensbliblock00Kernel021_h[6][0] || xdim7 != dims_opensbliblock00Kernel021_h[7][0]) {
    dims_opensbliblock00Kernel021_h[0][0] = xdim0;
    dims_opensbliblock00Kernel021_h[1][0] = xdim1;
    dims_opensbliblock00Kernel021_h[2][0] = xdim2;
    dims_opensbliblock00Kernel021_h[3][0] = xdim3;
    dims_opensbliblock00Kernel021_h[4][0] = xdim4;
    dims_opensbliblock00Kernel021_h[5][0] = xdim5;
    dims_opensbliblock00Kernel021_h[6][0] = xdim6;
    dims_opensbliblock00Kernel021_h[7][0] = xdim7;
    cutilSafeCall(block->instance->ostream(), cudaMemcpyToSymbol( dims_opensbliblock00Kernel021, dims_opensbliblock00Kernel021_h, sizeof(dims_opensbliblock00Kernel021)));
  }



  int x_size = MAX(0,end[0]-start[0]);

  dim3 grid( (x_size-1)/block->instance->OPS_block_size_x+ 1, 1, 1);
  dim3 tblock(block->instance->OPS_block_size_x,1,1);



  long long int dat0 = (block->instance->OPS_soa ? args[0].dat->type_size : args[0].dat->elem_size);
  long long int dat1 = (block->instance->OPS_soa ? args[1].dat->type_size : args[1].dat->elem_size);
  long long int dat2 = (block->instance->OPS_soa ? args[2].dat->type_size : args[2].dat->elem_size);
  long long int dat3 = (block->instance->OPS_soa ? args[3].dat->type_size : args[3].dat->elem_size);
  long long int dat4 = (block->instance->OPS_soa ? args[4].dat->type_size : args[4].dat->elem_size);
  long long int dat5 = (block->instance->OPS_soa ? args[5].dat->type_size : args[5].dat->elem_size);
  long long int dat6 = (block->instance->OPS_soa ? args[6].dat->type_size : args[6].dat->elem_size);
  long long int dat7 = (block->instance->OPS_soa ? args[7].dat->type_size : args[7].dat->elem_size);

  char *p_a[9];

  //set up initial pointers
  long long int base0 = args[0].dat->base_offset + 
           dat0 * 1 * (start[0] * args[0].stencil->stride[0]);
  p_a[0] = (char *)args[0].data_d + base0;

  long long int base1 = args[1].dat->base_offset + 
           dat1 * 1 * (start[0] * args[1].stencil->stride[0]);
  p_a[1] = (char *)args[1].data_d + base1;

  long long int base2 = args[2].dat->base_offset + 
           dat2 * 1 * (start[0] * args[2].stencil->stride[0]);
  p_a[2] = (char *)args[2].data_d + base2;

  long long int base3 = args[3].dat->base_offset + 
           dat3 * 1 * (start[0] * args[3].stencil->stride[0]);
  p_a[3] = (char *)args[3].data_d + base3;

  long long int base4 = args[4].dat->base_offset + 
           dat4 * 1 * (start[0] * args[4].stencil->stride[0]);
  p_a[4] = (char *)args[4].data_d + base4;

  long long int base5 = args[5].dat->base_offset + 
           dat5 * 1 * (start[0] * args[5].stencil->stride[0]);
  p_a[5] = (char *)args[5].data_d + base5;

  long long int base6 = args[6].dat->base_offset + 
           dat6 * 1 * (start[0] * args[6].stencil->stride[0]);
  p_a[6] = (char *)args[6].data_d + base6;

  long long int base7 = args[7].dat->base_offset + 
           dat7 * 1 * (start[0] * args[7].stencil->stride[0]);
  p_a[7] = (char *)args[7].data_d + base7;


  #ifndef OPS_LAZY
  ops_H_D_exchanges_device(args, 9);
  ops_halo_exchanges(args,9,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[10].mpi_time += t2-t1;
  }


  //call kernel wrapper function, passing in pointers to data
  if (x_size > 0)
    ops_opensbliblock00Kernel021<<<grid, tblock >>> ( 
     (double *)p_a[0], (double *)p_a[1],
     (double *)p_a[2], (double *)p_a[3],
     (double *)p_a[4], (double *)p_a[5],
     (double *)p_a[6], (double *)p_a[7],
     arg_idx[0],
    x_size);

  cutilSafeCall(block->instance->ostream(), cudaGetLastError());

  if (block->instance->OPS_diags>1) {
    cutilSafeCall(block->instance->ostream(), cudaDeviceSynchronize());
    ops_timers_core(&c1,&t1);
    block->instance->OPS_kernels[10].time += t1-t2;
  }

  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 9);
  ops_set_halo_dirtybit3(&args[5],range);
  ops_set_halo_dirtybit3(&args[6],range);
  ops_set_halo_dirtybit3(&args[7],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[10].mpi_time += t2-t1;
    block->instance->OPS_kernels[10].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[10].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[10].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[10].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[10].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[10].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[10].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[10].transfer += ops_compute_transfer(dim, start, end, &arg7);
  }
}

#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel021(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8) {
  ops_arg args[9] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8 };

  //create kernel descriptor and pass it to ops_enqueue_kernel
  create_kerneldesc_and_enque(name, args, 9, 10, dim, 1, range, block, ops_par_loop_opensbliblock00Kernel021_execute);
}
#endif
