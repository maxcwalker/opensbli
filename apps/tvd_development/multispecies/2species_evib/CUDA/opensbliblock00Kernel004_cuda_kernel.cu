//
// auto-generated by ops.py
//
__constant__ int dims_opensbliblock00Kernel004 [13][1];
static int dims_opensbliblock00Kernel004_h [13][1] = {{0}};

//user function
__device__

 void opensbliblock00Kernel004_gpu(const ACC<double> &a_B0,
  const ACC<double> &ev_B0,
  const ACC<double> &rhoE_B0,
  const
ACC<double> &rhoN2_B0,
  const ACC<double> &rhoN_B0,
  const ACC<double> &rhoev_B0,
  const ACC<double> &rhou0_B0,
  const
ACC<double> &u0_B0,
  ACC<double> &wk0_B0,
  ACC<double> &wk1_B0,
  ACC<double> &wk2_B0,
  ACC<double> &wk3_B0,
  ACC<double>
&wk4_B0)
{
   double AVG_0_0_LEV_00 = 0.0;
   double AVG_0_0_LEV_01 = 0.0;
   double AVG_0_0_LEV_02 = 0.0;
   double AVG_0_0_LEV_03 = 0.0;
   double AVG_0_0_LEV_04 = 0.0;
   double AVG_0_0_LEV_10 = 0.0;
   double AVG_0_0_LEV_11 = 0.0;
   double AVG_0_0_LEV_13 = 0.0;
   double AVG_0_0_LEV_20 = 0.0;
   double AVG_0_0_LEV_21 = 0.0;
   double AVG_0_0_LEV_22 = 0.0;
   double AVG_0_0_LEV_23 = 0.0;
   double AVG_0_0_LEV_24 = 0.0;
   double AVG_0_0_LEV_30 = 0.0;
   double AVG_0_0_LEV_31 = 0.0;
   double AVG_0_0_LEV_32 = 0.0;
   double AVG_0_0_LEV_33 = 0.0;
   double AVG_0_0_LEV_34 = 0.0;
   double AVG_0_0_LEV_40 = 0.0;
   double AVG_0_0_LEV_41 = 0.0;
   double AVG_0_0_LEV_42 = 0.0;
   double AVG_0_0_LEV_43 = 0.0;
   double AVG_0_0_LEV_44 = 0.0;
   double AVG_0_REV_00 = 0.0;
   double AVG_0_REV_02 = 0.0;
   double AVG_0_REV_03 = 0.0;
   double AVG_0_REV_04 = 0.0;
   double AVG_0_REV_10 = 0.0;
   double AVG_0_REV_13 = 0.0;
   double AVG_0_REV_14 = 0.0;
   double AVG_0_REV_22 = 0.0;
   double AVG_0_REV_23 = 0.0;
   double AVG_0_REV_24 = 0.0;
   double AVG_0_REV_31 = 0.0;
   double AVG_0_REV_32 = 0.0;
   double AVG_0_REV_33 = 0.0;
   double AVG_0_REV_34 = 0.0;
   double AVG_0_REV_41 = 0.0;
   double AVG_0_REV_42 = 0.0;
   double AVG_0_REV_43 = 0.0;
   double AVG_0_REV_44 = 0.0;
   double AVG_0_a = 0.0;
   double AVG_0_ev = 0.0;
   double AVG_0_rho = 0.0;
   double AVG_0_rhoN = 0.0;
   double AVG_0_rhoN2 = 0.0;
   double AVG_0_u0 = 0.0;
   double S = 0.0;
   double alpha_00 = 0.0;
   double alpha_01 = 0.0;
   double alpha_02 = 0.0;
   double alpha_10 = 0.0;
   double alpha_11 = 0.0;
   double alpha_12 = 0.0;
   double alpha_20 = 0.0;
   double alpha_21 = 0.0;
   double alpha_22 = 0.0;
   double alpha_30 = 0.0;
   double alpha_31 = 0.0;
   double alpha_32 = 0.0;
   double alpha_40 = 0.0;
   double alpha_41 = 0.0;
   double alpha_42 = 0.0;
   double g_00 = 0.0;
   double g_01 = 0.0;
   double g_10 = 0.0;
   double g_11 = 0.0;
   double g_20 = 0.0;
   double g_21 = 0.0;
   double g_30 = 0.0;
   double g_31 = 0.0;
   double g_40 = 0.0;
   double g_41 = 0.0;
   double gamma_0 = 0.0;
   double gamma_1 = 0.0;
   double gamma_2 = 0.0;
   double gamma_3 = 0.0;
   double gamma_4 = 0.0;
   double inv_AVG_a = 0.0;
   double inv_AVG_rho = 0.0;
   double phi_0 = 0.0;
   double phi_1 = 0.0;
   double phi_2 = 0.0;
   double phi_3 = 0.0;
   double phi_4 = 0.0;
   double phi_star_0 = 0.0;
   double phi_star_1 = 0.0;
   double phi_star_2 = 0.0;
   double phi_star_3 = 0.0;
   double phi_star_4 = 0.0;
   double sigma_0_0 = 0.0;
   double sigma_0_1 = 0.0;
   double sigma_0_2 = 0.0;
   double sigma_0_3 = 0.0;
   double sigma_0_4 = 0.0;
   double sigma_1_0 = 0.0;
   double sigma_1_1 = 0.0;
   double sigma_1_2 = 0.0;
   double sigma_1_3 = 0.0;
   double sigma_1_4 = 0.0;
   double t1 = 0.0;
   double t2 = 0.0;
   double theta_0 = 0.0;
   double theta_1 = 0.0;
   double theta_2 = 0.0;
   double theta_3 = 0.0;
   double theta_4 = 0.0;
   double theta_hat_00 = 0.0;
   double theta_hat_01 = 0.0;
   double theta_hat_10 = 0.0;
   double theta_hat_11 = 0.0;
   double theta_hat_20 = 0.0;
   double theta_hat_21 = 0.0;
   double theta_hat_30 = 0.0;
   double theta_hat_31 = 0.0;
   double theta_hat_40 = 0.0;
   double theta_hat_41 = 0.0;
   double ws_lambda_00 = 0.0;
   double ws_lambda_11 = 0.0;
   double ws_lambda_22 = 0.0;
   double ws_lambda_33 = 0.0;
   double ws_lambda_44 = 0.0;
   AVG_0_ev = ((1.0/2.0))*(ev_B0(0) + ev_B0(-1));

   AVG_0_rhoN = ((1.0/2.0))*(rhoN_B0(0) + rhoN_B0(-1));

   AVG_0_a = ((1.0/2.0))*(a_B0(0) + a_B0(-1));

   AVG_0_u0 = ((1.0/2.0))*(u0_B0(0) + u0_B0(-1));

   AVG_0_rhoN2 = ((1.0/2.0))*(rhoN2_B0(0) + rhoN2_B0(-1));

   inv_AVG_a = 1.0/(AVG_0_a);

   inv_AVG_rho = 1.0/(AVG_0_rho);

   AVG_0_0_LEV_00 = -0.5*(AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_0_rhoN/(AVG_0_rhoN + AVG_0_rhoN2);

    AVG_0_0_LEV_01 = -1.0*(-1.0*AVG_0_rhoN - 1.0*AVG_0_rhoN2 - 0.5*(AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*AVG_0_rhoN
      + 0.5*(AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*gama*AVG_0_rhoN)/(AVG_0_rhoN + AVG_0_rhoN2);

   AVG_0_0_LEV_02 = 1.0*(inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_0_rhoN*AVG_0_u0/(AVG_0_rhoN + AVG_0_rhoN2);

   AVG_0_0_LEV_03 = 1.0*(inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_0_rhoN/(AVG_0_rhoN + AVG_0_rhoN2);

   AVG_0_0_LEV_04 = -1.0*(inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_0_rhoN/(AVG_0_rhoN + AVG_0_rhoN2);

   AVG_0_0_LEV_10 = -1.0*AVG_0_ev/(AVG_0_rhoN + AVG_0_rhoN2);

   AVG_0_0_LEV_11 = -1.0*AVG_0_ev/(AVG_0_rhoN + AVG_0_rhoN2);

   AVG_0_0_LEV_13 = 1.0/(AVG_0_rhoN + AVG_0_rhoN2);

    AVG_0_0_LEV_20 = 1.0*(-0.5 - 0.25*(AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a) +
      0.25*(AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*gama)/((AVG_0_rhoN + AVG_0_rhoN2)*inv_AVG_a);

    AVG_0_0_LEV_21 = 1.0*(-0.5 - 0.25*(AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a) +
      0.25*(AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*gama)/((AVG_0_rhoN + AVG_0_rhoN2)*inv_AVG_a);

   AVG_0_0_LEV_22 = -0.5*(-1.0 + 1.0*gama)*AVG_0_u0*inv_AVG_a/(AVG_0_rhoN + AVG_0_rhoN2);

   AVG_0_0_LEV_23 = -0.5*gamma_m1*inv_AVG_a/(AVG_0_rhoN + AVG_0_rhoN2);

   AVG_0_0_LEV_24 = 0.5*(-1.0 + 1.0*gama)*inv_AVG_a/(AVG_0_rhoN + AVG_0_rhoN2);

    AVG_0_0_LEV_30 = 1.0*(-0.125 + 0.125*gama)*(0.25*AVG_0_a - 0.125*AVG_0_u0 +
      0.125*gama*AVG_0_u0)*AVG_0_u0*inv_AVG_a/(AVG_0_rhoN + AVG_0_rhoN2);

    AVG_0_0_LEV_31 = 1.0*(-0.125 + 0.125*gama)*(0.25*AVG_0_a - 0.125*AVG_0_u0 +
      0.125*gama*AVG_0_u0)*AVG_0_u0*inv_AVG_a/(AVG_0_rhoN + AVG_0_rhoN2);

    AVG_0_0_LEV_32 = -0.25*(-1.0 + 1.0*gama)*(1.0*AVG_0_a - 1.0*AVG_0_u0 + 1.0*gama*AVG_0_u0)*inv_AVG_a/(AVG_0_rhoN +
      AVG_0_rhoN2);

   AVG_0_0_LEV_33 = -0.25*((-1.0 + 1.0*gama)*(-1.0 + 1.0*gama))*inv_AVG_a/(AVG_0_rhoN + AVG_0_rhoN2);

   AVG_0_0_LEV_34 = 0.25*((-1.0 + 1.0*gama)*(-1.0 + 1.0*gama))*inv_AVG_a/(AVG_0_rhoN + AVG_0_rhoN2);

    AVG_0_0_LEV_40 = -1.0*(-0.125 + 0.125*gama)*(0.125*AVG_0_u0 + 0.25*AVG_0_a -
      0.125*gama*AVG_0_u0)*AVG_0_u0*inv_AVG_a/(AVG_0_rhoN + AVG_0_rhoN2);

    AVG_0_0_LEV_41 = -1.0*(-0.125 + 0.125*gama)*(0.125*AVG_0_u0 + 0.25*AVG_0_a -
      0.125*gama*AVG_0_u0)*AVG_0_u0*inv_AVG_a/(AVG_0_rhoN + AVG_0_rhoN2);

    AVG_0_0_LEV_42 = 0.25*(-1.0 + 1.0*gama)*(1.0*AVG_0_a + 1.0*AVG_0_u0 - 1.0*gama*AVG_0_u0)*inv_AVG_a/(AVG_0_rhoN +
      AVG_0_rhoN2);

   AVG_0_0_LEV_43 = -0.25*((-1.0 + 1.0*gama)*(-1.0 + 1.0*gama))*inv_AVG_a/(AVG_0_rhoN + AVG_0_rhoN2);

   AVG_0_0_LEV_44 = 0.25*((-1.0 + 1.0*gama)*(-1.0 + 1.0*gama))*inv_AVG_a/(AVG_0_rhoN + AVG_0_rhoN2);

    alpha_00 = (-rhoE_B0(-1) + rhoE_B0(0))*AVG_0_0_LEV_04 + (-rhoN_B0(-1) + rhoN_B0(0))*AVG_0_0_LEV_00 + (-rhoN2_B0(-1)
      + rhoN2_B0(0))*AVG_0_0_LEV_01 + (-rhoev_B0(-1) + rhoev_B0(0))*AVG_0_0_LEV_03 + (-rhou0_B0(-1) +
      rhou0_B0(0))*AVG_0_0_LEV_02;

    alpha_10 = (-rhoN_B0(-1) + rhoN_B0(0))*AVG_0_0_LEV_10 + (-rhoN2_B0(-1) + rhoN2_B0(0))*AVG_0_0_LEV_11 +
      (-rhoev_B0(-1) + rhoev_B0(0))*AVG_0_0_LEV_13;

    alpha_20 = (-rhoE_B0(-1) + rhoE_B0(0))*AVG_0_0_LEV_24 + (-rhoN_B0(-1) + rhoN_B0(0))*AVG_0_0_LEV_20 + (-rhoN2_B0(-1)
      + rhoN2_B0(0))*AVG_0_0_LEV_21 + (-rhoev_B0(-1) + rhoev_B0(0))*AVG_0_0_LEV_23 + (-rhou0_B0(-1) +
      rhou0_B0(0))*AVG_0_0_LEV_22;

    alpha_30 = (-rhoE_B0(-1) + rhoE_B0(0))*AVG_0_0_LEV_34 + (-rhoN_B0(-1) + rhoN_B0(0))*AVG_0_0_LEV_30 + (-rhoN2_B0(-1)
      + rhoN2_B0(0))*AVG_0_0_LEV_31 + (-rhoev_B0(-1) + rhoev_B0(0))*AVG_0_0_LEV_33 + (-rhou0_B0(-1) +
      rhou0_B0(0))*AVG_0_0_LEV_32;

    alpha_40 = (-rhoE_B0(-1) + rhoE_B0(0))*AVG_0_0_LEV_44 + (-rhoN_B0(-1) + rhoN_B0(0))*AVG_0_0_LEV_40 + (-rhoN2_B0(-1)
      + rhoN2_B0(0))*AVG_0_0_LEV_41 + (-rhoev_B0(-1) + rhoev_B0(0))*AVG_0_0_LEV_43 + (-rhou0_B0(-1) +
      rhou0_B0(0))*AVG_0_0_LEV_42;

   AVG_0_ev = ((1.0/2.0))*(ev_B0(0) + ev_B0(1));

   AVG_0_rhoN = ((1.0/2.0))*(rhoN_B0(0) + rhoN_B0(1));

   AVG_0_a = ((1.0/2.0))*(a_B0(0) + a_B0(1));

   AVG_0_u0 = ((1.0/2.0))*(u0_B0(0) + u0_B0(1));

   AVG_0_rhoN2 = ((1.0/2.0))*(rhoN2_B0(0) + rhoN2_B0(1));

   inv_AVG_a = 1.0/(AVG_0_a);

   inv_AVG_rho = 1.0/(AVG_0_rho);

   AVG_0_0_LEV_00 = -0.5*(AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_0_rhoN/(AVG_0_rhoN + AVG_0_rhoN2);

    AVG_0_0_LEV_01 = -1.0*(-1.0*AVG_0_rhoN - 1.0*AVG_0_rhoN2 - 0.5*(AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*AVG_0_rhoN
      + 0.5*(AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*gama*AVG_0_rhoN)/(AVG_0_rhoN + AVG_0_rhoN2);

   AVG_0_0_LEV_02 = 1.0*(inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_0_rhoN*AVG_0_u0/(AVG_0_rhoN + AVG_0_rhoN2);

   AVG_0_0_LEV_03 = 1.0*(inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_0_rhoN/(AVG_0_rhoN + AVG_0_rhoN2);

   AVG_0_0_LEV_04 = -1.0*(inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_0_rhoN/(AVG_0_rhoN + AVG_0_rhoN2);

   AVG_0_0_LEV_10 = -1.0*AVG_0_ev/(AVG_0_rhoN + AVG_0_rhoN2);

   AVG_0_0_LEV_11 = -1.0*AVG_0_ev/(AVG_0_rhoN + AVG_0_rhoN2);

   AVG_0_0_LEV_13 = 1.0/(AVG_0_rhoN + AVG_0_rhoN2);

    AVG_0_0_LEV_20 = 1.0*(-0.5 - 0.25*(AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a) +
      0.25*(AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*gama)/((AVG_0_rhoN + AVG_0_rhoN2)*inv_AVG_a);

    AVG_0_0_LEV_21 = 1.0*(-0.5 - 0.25*(AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a) +
      0.25*(AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*gama)/((AVG_0_rhoN + AVG_0_rhoN2)*inv_AVG_a);

   AVG_0_0_LEV_22 = -0.5*(-1.0 + 1.0*gama)*AVG_0_u0*inv_AVG_a/(AVG_0_rhoN + AVG_0_rhoN2);

   AVG_0_0_LEV_23 = -0.5*gamma_m1*inv_AVG_a/(AVG_0_rhoN + AVG_0_rhoN2);

   AVG_0_0_LEV_24 = 0.5*(-1.0 + 1.0*gama)*inv_AVG_a/(AVG_0_rhoN + AVG_0_rhoN2);

    AVG_0_0_LEV_30 = 1.0*(-0.125 + 0.125*gama)*(0.25*AVG_0_a - 0.125*AVG_0_u0 +
      0.125*gama*AVG_0_u0)*AVG_0_u0*inv_AVG_a/(AVG_0_rhoN + AVG_0_rhoN2);

    AVG_0_0_LEV_31 = 1.0*(-0.125 + 0.125*gama)*(0.25*AVG_0_a - 0.125*AVG_0_u0 +
      0.125*gama*AVG_0_u0)*AVG_0_u0*inv_AVG_a/(AVG_0_rhoN + AVG_0_rhoN2);

    AVG_0_0_LEV_32 = -0.25*(-1.0 + 1.0*gama)*(1.0*AVG_0_a - 1.0*AVG_0_u0 + 1.0*gama*AVG_0_u0)*inv_AVG_a/(AVG_0_rhoN +
      AVG_0_rhoN2);

   AVG_0_0_LEV_33 = -0.25*((-1.0 + 1.0*gama)*(-1.0 + 1.0*gama))*inv_AVG_a/(AVG_0_rhoN + AVG_0_rhoN2);

   AVG_0_0_LEV_34 = 0.25*((-1.0 + 1.0*gama)*(-1.0 + 1.0*gama))*inv_AVG_a/(AVG_0_rhoN + AVG_0_rhoN2);

    AVG_0_0_LEV_40 = -1.0*(-0.125 + 0.125*gama)*(0.125*AVG_0_u0 + 0.25*AVG_0_a -
      0.125*gama*AVG_0_u0)*AVG_0_u0*inv_AVG_a/(AVG_0_rhoN + AVG_0_rhoN2);

    AVG_0_0_LEV_41 = -1.0*(-0.125 + 0.125*gama)*(0.125*AVG_0_u0 + 0.25*AVG_0_a -
      0.125*gama*AVG_0_u0)*AVG_0_u0*inv_AVG_a/(AVG_0_rhoN + AVG_0_rhoN2);

    AVG_0_0_LEV_42 = 0.25*(-1.0 + 1.0*gama)*(1.0*AVG_0_a + 1.0*AVG_0_u0 - 1.0*gama*AVG_0_u0)*inv_AVG_a/(AVG_0_rhoN +
      AVG_0_rhoN2);

   AVG_0_0_LEV_43 = -0.25*((-1.0 + 1.0*gama)*(-1.0 + 1.0*gama))*inv_AVG_a/(AVG_0_rhoN + AVG_0_rhoN2);

   AVG_0_0_LEV_44 = 0.25*((-1.0 + 1.0*gama)*(-1.0 + 1.0*gama))*inv_AVG_a/(AVG_0_rhoN + AVG_0_rhoN2);

    alpha_01 = (-rhoE_B0(0) + rhoE_B0(1))*AVG_0_0_LEV_04 + (-rhoN_B0(0) + rhoN_B0(1))*AVG_0_0_LEV_00 + (-rhoN2_B0(0) +
      rhoN2_B0(1))*AVG_0_0_LEV_01 + (-rhoev_B0(0) + rhoev_B0(1))*AVG_0_0_LEV_03 + (-rhou0_B0(0) +
      rhou0_B0(1))*AVG_0_0_LEV_02;

    alpha_11 = (-rhoN_B0(0) + rhoN_B0(1))*AVG_0_0_LEV_10 + (-rhoN2_B0(0) + rhoN2_B0(1))*AVG_0_0_LEV_11 + (-rhoev_B0(0) +
      rhoev_B0(1))*AVG_0_0_LEV_13;

    alpha_21 = (-rhoE_B0(0) + rhoE_B0(1))*AVG_0_0_LEV_24 + (-rhoN_B0(0) + rhoN_B0(1))*AVG_0_0_LEV_20 + (-rhoN2_B0(0) +
      rhoN2_B0(1))*AVG_0_0_LEV_21 + (-rhoev_B0(0) + rhoev_B0(1))*AVG_0_0_LEV_23 + (-rhou0_B0(0) +
      rhou0_B0(1))*AVG_0_0_LEV_22;

    alpha_31 = (-rhoE_B0(0) + rhoE_B0(1))*AVG_0_0_LEV_34 + (-rhoN_B0(0) + rhoN_B0(1))*AVG_0_0_LEV_30 + (-rhoN2_B0(0) +
      rhoN2_B0(1))*AVG_0_0_LEV_31 + (-rhoev_B0(0) + rhoev_B0(1))*AVG_0_0_LEV_33 + (-rhou0_B0(0) +
      rhou0_B0(1))*AVG_0_0_LEV_32;

    alpha_41 = (-rhoE_B0(0) + rhoE_B0(1))*AVG_0_0_LEV_44 + (-rhoN_B0(0) + rhoN_B0(1))*AVG_0_0_LEV_40 + (-rhoN2_B0(0) +
      rhoN2_B0(1))*AVG_0_0_LEV_41 + (-rhoev_B0(0) + rhoev_B0(1))*AVG_0_0_LEV_43 + (-rhou0_B0(0) +
      rhou0_B0(1))*AVG_0_0_LEV_42;

   ws_lambda_00 = AVG_0_u0;

   ws_lambda_11 = AVG_0_u0;

   ws_lambda_22 = AVG_0_u0;

   ws_lambda_33 = -AVG_0_a + AVG_0_u0;

   ws_lambda_44 = AVG_0_a + AVG_0_u0;

   AVG_0_REV_00 = -1.00000000000000;

   AVG_0_REV_02 = (-2.0*AVG_0_rhoN - 2.0*AVG_0_rhoN2)*inv_AVG_a;

   AVG_0_REV_03 = 2.0*invgamma_m1*AVG_0_rhoN2*inv_AVG_a;

   AVG_0_REV_04 = 2.0*invgamma_m1*AVG_0_rhoN2*inv_AVG_a;

   AVG_0_REV_10 = 1.00000000000000;

   AVG_0_REV_13 = 2.0*invgamma_m1*AVG_0_rhoN*inv_AVG_a;

   AVG_0_REV_14 = 2.0*invgamma_m1*AVG_0_rhoN*inv_AVG_a;

   AVG_0_REV_22 = -2.0*(AVG_0_rhoN + AVG_0_rhoN2)*AVG_0_u0*inv_AVG_a;

   AVG_0_REV_23 = 2.0*(-AVG_0_a + AVG_0_u0)*(AVG_0_rhoN + AVG_0_rhoN2)*invgamma_m1*inv_AVG_a;

   AVG_0_REV_24 = 2.0*(AVG_0_a + AVG_0_u0)*(AVG_0_rhoN + AVG_0_rhoN2)*invgamma_m1*inv_AVG_a;

   AVG_0_REV_31 = 1.0*AVG_0_rhoN + 1.0*AVG_0_rhoN2;

   AVG_0_REV_32 = -2.0*(AVG_0_rhoN + AVG_0_rhoN2)*AVG_0_ev*inv_AVG_a;

   AVG_0_REV_33 = 2.0*(AVG_0_rhoN + AVG_0_rhoN2)*invgamma_m1*AVG_0_ev*inv_AVG_a;

   AVG_0_REV_34 = 2.0*(AVG_0_rhoN + AVG_0_rhoN2)*invgamma_m1*AVG_0_ev*inv_AVG_a;

   AVG_0_REV_41 = 1.0*AVG_0_rhoN + 1.0*AVG_0_rhoN2;

   AVG_0_REV_42 = -2.0*(0.5*(AVG_0_u0*AVG_0_u0) + AVG_0_ev)*(AVG_0_rhoN + AVG_0_rhoN2)*inv_AVG_a;

    AVG_0_REV_43 = 2.0*(AVG_0_rhoN + AVG_0_rhoN2)*((AVG_0_a*AVG_0_a) + (AVG_0_a*AVG_0_a)*gamma_m1 +
      (0.5*(AVG_0_u0*AVG_0_u0) + AVG_0_ev)*gama*gamma_m1 -
      gama*gamma_m1*AVG_0_a*AVG_0_u0)*invgama*inv2gamma_m1*inv_AVG_a;

    AVG_0_REV_44 = 2.0*(AVG_0_rhoN + AVG_0_rhoN2)*((AVG_0_a*AVG_0_a) + (AVG_0_a*AVG_0_a)*gamma_m1 +
      (0.5*(AVG_0_u0*AVG_0_u0) + AVG_0_ev)*gama*gamma_m1 +
      gama*gamma_m1*AVG_0_a*AVG_0_u0)*invgama*inv2gamma_m1*inv_AVG_a;

   AVG_0_ev = ((1.0/2.0))*(ev_B0(1) + ev_B0(2));

   AVG_0_rhoN = ((1.0/2.0))*(rhoN_B0(1) + rhoN_B0(2));

   AVG_0_a = ((1.0/2.0))*(a_B0(1) + a_B0(2));

   AVG_0_u0 = ((1.0/2.0))*(u0_B0(1) + u0_B0(2));

   AVG_0_rhoN2 = ((1.0/2.0))*(rhoN2_B0(1) + rhoN2_B0(2));

   inv_AVG_a = 1.0/(AVG_0_a);

   inv_AVG_rho = 1.0/(AVG_0_rho);

   AVG_0_0_LEV_00 = -0.5*(AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_0_rhoN/(AVG_0_rhoN + AVG_0_rhoN2);

    AVG_0_0_LEV_01 = -1.0*(-1.0*AVG_0_rhoN - 1.0*AVG_0_rhoN2 - 0.5*(AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*AVG_0_rhoN
      + 0.5*(AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*gama*AVG_0_rhoN)/(AVG_0_rhoN + AVG_0_rhoN2);

   AVG_0_0_LEV_02 = 1.0*(inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_0_rhoN*AVG_0_u0/(AVG_0_rhoN + AVG_0_rhoN2);

   AVG_0_0_LEV_03 = 1.0*(inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_0_rhoN/(AVG_0_rhoN + AVG_0_rhoN2);

   AVG_0_0_LEV_04 = -1.0*(inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_0_rhoN/(AVG_0_rhoN + AVG_0_rhoN2);

   AVG_0_0_LEV_10 = -1.0*AVG_0_ev/(AVG_0_rhoN + AVG_0_rhoN2);

   AVG_0_0_LEV_11 = -1.0*AVG_0_ev/(AVG_0_rhoN + AVG_0_rhoN2);

   AVG_0_0_LEV_13 = 1.0/(AVG_0_rhoN + AVG_0_rhoN2);

    AVG_0_0_LEV_20 = 1.0*(-0.5 - 0.25*(AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a) +
      0.25*(AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*gama)/((AVG_0_rhoN + AVG_0_rhoN2)*inv_AVG_a);

    AVG_0_0_LEV_21 = 1.0*(-0.5 - 0.25*(AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a) +
      0.25*(AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*gama)/((AVG_0_rhoN + AVG_0_rhoN2)*inv_AVG_a);

   AVG_0_0_LEV_22 = -0.5*(-1.0 + 1.0*gama)*AVG_0_u0*inv_AVG_a/(AVG_0_rhoN + AVG_0_rhoN2);

   AVG_0_0_LEV_23 = -0.5*gamma_m1*inv_AVG_a/(AVG_0_rhoN + AVG_0_rhoN2);

   AVG_0_0_LEV_24 = 0.5*(-1.0 + 1.0*gama)*inv_AVG_a/(AVG_0_rhoN + AVG_0_rhoN2);

    AVG_0_0_LEV_30 = 1.0*(-0.125 + 0.125*gama)*(0.25*AVG_0_a - 0.125*AVG_0_u0 +
      0.125*gama*AVG_0_u0)*AVG_0_u0*inv_AVG_a/(AVG_0_rhoN + AVG_0_rhoN2);

    AVG_0_0_LEV_31 = 1.0*(-0.125 + 0.125*gama)*(0.25*AVG_0_a - 0.125*AVG_0_u0 +
      0.125*gama*AVG_0_u0)*AVG_0_u0*inv_AVG_a/(AVG_0_rhoN + AVG_0_rhoN2);

    AVG_0_0_LEV_32 = -0.25*(-1.0 + 1.0*gama)*(1.0*AVG_0_a - 1.0*AVG_0_u0 + 1.0*gama*AVG_0_u0)*inv_AVG_a/(AVG_0_rhoN +
      AVG_0_rhoN2);

   AVG_0_0_LEV_33 = -0.25*((-1.0 + 1.0*gama)*(-1.0 + 1.0*gama))*inv_AVG_a/(AVG_0_rhoN + AVG_0_rhoN2);

   AVG_0_0_LEV_34 = 0.25*((-1.0 + 1.0*gama)*(-1.0 + 1.0*gama))*inv_AVG_a/(AVG_0_rhoN + AVG_0_rhoN2);

    AVG_0_0_LEV_40 = -1.0*(-0.125 + 0.125*gama)*(0.125*AVG_0_u0 + 0.25*AVG_0_a -
      0.125*gama*AVG_0_u0)*AVG_0_u0*inv_AVG_a/(AVG_0_rhoN + AVG_0_rhoN2);

    AVG_0_0_LEV_41 = -1.0*(-0.125 + 0.125*gama)*(0.125*AVG_0_u0 + 0.25*AVG_0_a -
      0.125*gama*AVG_0_u0)*AVG_0_u0*inv_AVG_a/(AVG_0_rhoN + AVG_0_rhoN2);

    AVG_0_0_LEV_42 = 0.25*(-1.0 + 1.0*gama)*(1.0*AVG_0_a + 1.0*AVG_0_u0 - 1.0*gama*AVG_0_u0)*inv_AVG_a/(AVG_0_rhoN +
      AVG_0_rhoN2);

   AVG_0_0_LEV_43 = -0.25*((-1.0 + 1.0*gama)*(-1.0 + 1.0*gama))*inv_AVG_a/(AVG_0_rhoN + AVG_0_rhoN2);

   AVG_0_0_LEV_44 = 0.25*((-1.0 + 1.0*gama)*(-1.0 + 1.0*gama))*inv_AVG_a/(AVG_0_rhoN + AVG_0_rhoN2);

    alpha_02 = (-rhoE_B0(1) + rhoE_B0(2))*AVG_0_0_LEV_04 + (-rhoN_B0(1) + rhoN_B0(2))*AVG_0_0_LEV_00 + (-rhoN2_B0(1) +
      rhoN2_B0(2))*AVG_0_0_LEV_01 + (-rhoev_B0(1) + rhoev_B0(2))*AVG_0_0_LEV_03 + (-rhou0_B0(1) +
      rhou0_B0(2))*AVG_0_0_LEV_02;

    alpha_12 = (-rhoN_B0(1) + rhoN_B0(2))*AVG_0_0_LEV_10 + (-rhoN2_B0(1) + rhoN2_B0(2))*AVG_0_0_LEV_11 + (-rhoev_B0(1) +
      rhoev_B0(2))*AVG_0_0_LEV_13;

    alpha_22 = (-rhoE_B0(1) + rhoE_B0(2))*AVG_0_0_LEV_24 + (-rhoN_B0(1) + rhoN_B0(2))*AVG_0_0_LEV_20 + (-rhoN2_B0(1) +
      rhoN2_B0(2))*AVG_0_0_LEV_21 + (-rhoev_B0(1) + rhoev_B0(2))*AVG_0_0_LEV_23 + (-rhou0_B0(1) +
      rhou0_B0(2))*AVG_0_0_LEV_22;

    alpha_32 = (-rhoE_B0(1) + rhoE_B0(2))*AVG_0_0_LEV_34 + (-rhoN_B0(1) + rhoN_B0(2))*AVG_0_0_LEV_30 + (-rhoN2_B0(1) +
      rhoN2_B0(2))*AVG_0_0_LEV_31 + (-rhoev_B0(1) + rhoev_B0(2))*AVG_0_0_LEV_33 + (-rhou0_B0(1) +
      rhou0_B0(2))*AVG_0_0_LEV_32;

    alpha_42 = (-rhoE_B0(1) + rhoE_B0(2))*AVG_0_0_LEV_44 + (-rhoN_B0(1) + rhoN_B0(2))*AVG_0_0_LEV_40 + (-rhoN2_B0(1) +
      rhoN2_B0(2))*AVG_0_0_LEV_41 + (-rhoev_B0(1) + rhoev_B0(2))*AVG_0_0_LEV_43 + (-rhou0_B0(1) +
      rhou0_B0(2))*AVG_0_0_LEV_42;

    sigma_0_0 = ((fabs(ws_lambda_00) >= delta_TVD) ? (
   fabs(ws_lambda_00)
)
: (

      ((1.0/2.0))*(1.0/(invdelta_TVD*invdelta_TVD) + (ws_lambda_00*ws_lambda_00))*invdelta_TVD
));

    sigma_0_1 = ((fabs(ws_lambda_11) >= delta_TVD) ? (
   fabs(ws_lambda_11)
)
: (

      ((1.0/2.0))*(1.0/(invdelta_TVD*invdelta_TVD) + (ws_lambda_11*ws_lambda_11))*invdelta_TVD
));

    sigma_0_2 = ((fabs(ws_lambda_22) >= delta_TVD) ? (
   fabs(ws_lambda_22)
)
: (

      ((1.0/2.0))*(1.0/(invdelta_TVD*invdelta_TVD) + (ws_lambda_22*ws_lambda_22))*invdelta_TVD
));

    sigma_0_3 = ((fabs(ws_lambda_33) >= delta_TVD) ? (
   fabs(ws_lambda_33)
)
: (

      ((1.0/2.0))*(1.0/(invdelta_TVD*invdelta_TVD) + (ws_lambda_33*ws_lambda_33))*invdelta_TVD
));

    sigma_0_4 = ((fabs(ws_lambda_44) >= delta_TVD) ? (
   fabs(ws_lambda_44)
)
: (

      ((1.0/2.0))*(1.0/(invdelta_TVD*invdelta_TVD) + (ws_lambda_44*ws_lambda_44))*invdelta_TVD
));

   S = (alpha_01 > 0) ? 1 : ((alpha_01 < 0) ? -1 : 0);

   t1 = fmax(0.0, fmin(S*alpha_00, 2*fabs(alpha_01)));

   t2 = fmin(fabs(alpha_01), 2*S*alpha_00);

   g_00 = S*fmax(t1, t2);

   S = (alpha_11 > 0) ? 1 : ((alpha_11 < 0) ? -1 : 0);

   t1 = fmax(0.0, fmin(S*alpha_10, 2*fabs(alpha_11)));

   t2 = fmin(fabs(alpha_11), 2*S*alpha_10);

   g_10 = S*fmax(t1, t2);

   S = (alpha_21 > 0) ? 1 : ((alpha_21 < 0) ? -1 : 0);

   t1 = fmax(0.0, fmin(S*alpha_20, 2*fabs(alpha_21)));

   t2 = fmin(fabs(alpha_21), 2*S*alpha_20);

   g_20 = S*fmax(t1, t2);

   S = (alpha_31 > 0) ? 1 : ((alpha_31 < 0) ? -1 : 0);

   t1 = fmax(0.0, fmin(S*alpha_30, 2*fabs(alpha_31)));

   t2 = fmin(fabs(alpha_31), 2*S*alpha_30);

   g_30 = S*fmax(t1, t2);

   S = (alpha_41 > 0) ? 1 : ((alpha_41 < 0) ? -1 : 0);

   t1 = fmax(0.0, fmin(S*alpha_40, 2*fabs(alpha_41)));

   t2 = fmin(fabs(alpha_41), 2*S*alpha_40);

   g_40 = S*fmax(t1, t2);

   S = (alpha_02 > 0) ? 1 : ((alpha_02 < 0) ? -1 : 0);

   t1 = fmax(0.0, fmin(S*alpha_01, 2*fabs(alpha_02)));

   t2 = fmin(fabs(alpha_02), 2*S*alpha_01);

   g_01 = S*fmax(t1, t2);

   S = (alpha_12 > 0) ? 1 : ((alpha_12 < 0) ? -1 : 0);

   t1 = fmax(0.0, fmin(S*alpha_11, 2*fabs(alpha_12)));

   t2 = fmin(fabs(alpha_12), 2*S*alpha_11);

   g_11 = S*fmax(t1, t2);

   S = (alpha_22 > 0) ? 1 : ((alpha_22 < 0) ? -1 : 0);

   t1 = fmax(0.0, fmin(S*alpha_21, 2*fabs(alpha_22)));

   t2 = fmin(fabs(alpha_22), 2*S*alpha_21);

   g_21 = S*fmax(t1, t2);

   S = (alpha_32 > 0) ? 1 : ((alpha_32 < 0) ? -1 : 0);

   t1 = fmax(0.0, fmin(S*alpha_31, 2*fabs(alpha_32)));

   t2 = fmin(fabs(alpha_32), 2*S*alpha_31);

   g_31 = S*fmax(t1, t2);

   S = (alpha_42 > 0) ? 1 : ((alpha_42 < 0) ? -1 : 0);

   t1 = fmax(0.0, fmin(S*alpha_41, 2*fabs(alpha_42)));

   t2 = fmin(fabs(alpha_42), 2*S*alpha_41);

   g_41 = S*fmax(t1, t2);

   gamma_0 = ((alpha_01 == 0) ? (
   0
)
: (
   (-g_00 + g_01)*alpha_01*sigma_0_0/((alpha_01*alpha_01) + eps_TVD)
));

   gamma_1 = ((alpha_11 == 0) ? (
   0
)
: (
   (-g_10 + g_11)*alpha_11*sigma_0_1/((alpha_11*alpha_11) + eps_TVD)
));

   gamma_2 = ((alpha_21 == 0) ? (
   0
)
: (
   (-g_20 + g_21)*alpha_21*sigma_0_2/((alpha_21*alpha_21) + eps_TVD)
));

   gamma_3 = ((alpha_31 == 0) ? (
   0
)
: (
   (-g_30 + g_31)*alpha_31*sigma_0_3/((alpha_31*alpha_31) + eps_TVD)
));

   gamma_4 = ((alpha_41 == 0) ? (
   0
)
: (
   (-g_40 + g_41)*alpha_41*sigma_0_4/((alpha_41*alpha_41) + eps_TVD)
));

    sigma_1_0 = ((fabs(gamma_0) >= delta_TVD) ? (
   fabs(gamma_0)
)
: (
   ((1.0/2.0))*(1.0/(invdelta_TVD*invdelta_TVD)
      + (gamma_0*gamma_0))*invdelta_TVD
));

    sigma_1_1 = ((fabs(gamma_1) >= delta_TVD) ? (
   fabs(gamma_1)
)
: (
   ((1.0/2.0))*(1.0/(invdelta_TVD*invdelta_TVD)
      + (gamma_1*gamma_1))*invdelta_TVD
));

    sigma_1_2 = ((fabs(gamma_2) >= delta_TVD) ? (
   fabs(gamma_2)
)
: (
   ((1.0/2.0))*(1.0/(invdelta_TVD*invdelta_TVD)
      + (gamma_2*gamma_2))*invdelta_TVD
));

    sigma_1_3 = ((fabs(gamma_3) >= delta_TVD) ? (
   fabs(gamma_3)
)
: (
   ((1.0/2.0))*(1.0/(invdelta_TVD*invdelta_TVD)
      + (gamma_3*gamma_3))*invdelta_TVD
));

    sigma_1_4 = ((fabs(gamma_4) >= delta_TVD) ? (
   fabs(gamma_4)
)
: (
   ((1.0/2.0))*(1.0/(invdelta_TVD*invdelta_TVD)
      + (gamma_4*gamma_4))*invdelta_TVD
));

   phi_0 = -fabs(sigma_0_0 + sigma_1_0)*alpha_01 + 0.5*(g_00 + g_01)*sigma_0_0;

   phi_1 = -fabs(sigma_0_1 + sigma_1_1)*alpha_11 + 0.5*(g_10 + g_11)*sigma_0_1;

   phi_2 = -fabs(sigma_0_2 + sigma_1_2)*alpha_21 + 0.5*(g_20 + g_21)*sigma_0_2;

   phi_3 = -fabs(sigma_0_3 + sigma_1_3)*alpha_31 + 0.5*(g_30 + g_31)*sigma_0_3;

   phi_4 = -fabs(sigma_0_4 + sigma_1_4)*alpha_41 + 0.5*(g_40 + g_41)*sigma_0_4;

   t1 = -fabs(alpha_00) + fabs(alpha_01);

   t2 = fabs(alpha_00) + fabs(alpha_01) + eps_TVD;

   theta_hat_00 = (fabs(t1/t2)*fabs(t1/t2));

   t1 = -fabs(alpha_10) + fabs(alpha_11);

   t2 = fabs(alpha_10) + fabs(alpha_11) + eps_TVD;

   theta_hat_10 = (fabs(t1/t2)*fabs(t1/t2));

   t1 = -fabs(alpha_20) + fabs(alpha_21);

   t2 = fabs(alpha_20) + fabs(alpha_21) + eps_TVD;

   theta_hat_20 = (fabs(t1/t2)*fabs(t1/t2));

   t1 = -fabs(alpha_30) + fabs(alpha_31);

   t2 = fabs(alpha_30) + fabs(alpha_31) + eps_TVD;

   theta_hat_30 = (fabs(t1/t2)*fabs(t1/t2));

   t1 = -fabs(alpha_40) + fabs(alpha_41);

   t2 = fabs(alpha_40) + fabs(alpha_41) + eps_TVD;

   theta_hat_40 = (fabs(t1/t2)*fabs(t1/t2));

   t1 = -fabs(alpha_01) + fabs(alpha_02);

   t2 = fabs(alpha_01) + fabs(alpha_02) + eps_TVD;

   theta_hat_01 = (fabs(t1/t2)*fabs(t1/t2));

   t1 = -fabs(alpha_11) + fabs(alpha_12);

   t2 = fabs(alpha_11) + fabs(alpha_12) + eps_TVD;

   theta_hat_11 = (fabs(t1/t2)*fabs(t1/t2));

   t1 = -fabs(alpha_21) + fabs(alpha_22);

   t2 = fabs(alpha_21) + fabs(alpha_22) + eps_TVD;

   theta_hat_21 = (fabs(t1/t2)*fabs(t1/t2));

   t1 = -fabs(alpha_31) + fabs(alpha_32);

   t2 = fabs(alpha_31) + fabs(alpha_32) + eps_TVD;

   theta_hat_31 = (fabs(t1/t2)*fabs(t1/t2));

   t1 = -fabs(alpha_41) + fabs(alpha_42);

   t2 = fabs(alpha_41) + fabs(alpha_42) + eps_TVD;

   theta_hat_41 = (fabs(t1/t2)*fabs(t1/t2));

   theta_0 = fmax(theta_hat_00, theta_hat_01);

   theta_1 = fmax(theta_hat_10, theta_hat_11);

   theta_2 = fmax(theta_hat_20, theta_hat_21);

   theta_3 = fmax(theta_hat_30, theta_hat_31);

   theta_4 = fmax(theta_hat_40, theta_hat_41);

   phi_star_0 = kappa_TVD*phi_0*theta_0;

   phi_star_1 = kappa_TVD*phi_1*theta_1;

   phi_star_2 = kappa_TVD*phi_2*theta_2;

   phi_star_3 = kappa_TVD*phi_3*theta_3;

   phi_star_4 = kappa_TVD*phi_4*theta_4;

    wk0_B0(0) = 0.5*(AVG_0_REV_00*phi_star_0 + AVG_0_REV_02*phi_star_2 + AVG_0_REV_03*phi_star_3 +
      AVG_0_REV_04*phi_star_4);

   wk1_B0(0) = 0.5*(AVG_0_REV_10*phi_star_0 + AVG_0_REV_13*phi_star_3 + AVG_0_REV_14*phi_star_4);

   wk2_B0(0) = 0.5*(AVG_0_REV_22*phi_star_2 + AVG_0_REV_23*phi_star_3 + AVG_0_REV_24*phi_star_4);

    wk3_B0(0) = 0.5*(AVG_0_REV_31*phi_star_1 + AVG_0_REV_32*phi_star_2 + AVG_0_REV_33*phi_star_3 +
      AVG_0_REV_34*phi_star_4);

    wk4_B0(0) = 0.5*(AVG_0_REV_41*phi_star_1 + AVG_0_REV_42*phi_star_2 + AVG_0_REV_43*phi_star_3 +
      AVG_0_REV_44*phi_star_4);

}



__global__ void ops_opensbliblock00Kernel004(
double* __restrict arg0,
double* __restrict arg1,
double* __restrict arg2,
double* __restrict arg3,
double* __restrict arg4,
double* __restrict arg5,
double* __restrict arg6,
double* __restrict arg7,
double* __restrict arg8,
double* __restrict arg9,
double* __restrict arg10,
double* __restrict arg11,
double* __restrict arg12,
int size0 ){


  int idx_x = blockDim.x * blockIdx.x + threadIdx.x;

  arg0 += idx_x * 1*1;
  arg1 += idx_x * 1*1;
  arg2 += idx_x * 1*1;
  arg3 += idx_x * 1*1;
  arg4 += idx_x * 1*1;
  arg5 += idx_x * 1*1;
  arg6 += idx_x * 1*1;
  arg7 += idx_x * 1*1;
  arg8 += idx_x * 1*1;
  arg9 += idx_x * 1*1;
  arg10 += idx_x * 1*1;
  arg11 += idx_x * 1*1;
  arg12 += idx_x * 1*1;

  if (idx_x < size0) {
    const ACC<double> argp0(arg0);
    const ACC<double> argp1(arg1);
    const ACC<double> argp2(arg2);
    const ACC<double> argp3(arg3);
    const ACC<double> argp4(arg4);
    const ACC<double> argp5(arg5);
    const ACC<double> argp6(arg6);
    const ACC<double> argp7(arg7);
    ACC<double> argp8(arg8);
    ACC<double> argp9(arg9);
    ACC<double> argp10(arg10);
    ACC<double> argp11(arg11);
    ACC<double> argp12(arg12);
    opensbliblock00Kernel004_gpu(
     argp0, argp1, argp2, argp3, argp4,
     argp5, argp6, argp7, argp8, argp9,
     argp10, argp11, argp12);
  }

}

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel004(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11,
 ops_arg arg12) {
#else
void ops_par_loop_opensbliblock00Kernel004_execute(ops_kernel_descriptor *desc) {
  int dim = desc->dim;
  #if OPS_MPI
  ops_block block = desc->block;
  #endif
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  ops_arg arg9 = desc->args[9];
  ops_arg arg10 = desc->args[10];
  ops_arg arg11 = desc->args[11];
  ops_arg arg12 = desc->args[12];
  #endif

  //Timing
  double t1,t2,c1,c2;

  ops_arg args[13] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12};


  #if CHECKPOINTING && !OPS_LAZY
  if (!ops_checkpointing_before(args,13,range,15)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,15,"opensbliblock00Kernel004");
    block->instance->OPS_kernels[15].count++;
    ops_timers_core(&c1,&t1);
  }

  //compute locally allocated range for the sub-block
  int start[1];
  int end[1];

  #ifdef OPS_MPI
  int arg_idx[1];
  #endif
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<1; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 13,block, range, start, end, arg_idx) < 0) return;
  #endif

  int xdim0 = args[0].dat->size[0];
  int xdim1 = args[1].dat->size[0];
  int xdim2 = args[2].dat->size[0];
  int xdim3 = args[3].dat->size[0];
  int xdim4 = args[4].dat->size[0];
  int xdim5 = args[5].dat->size[0];
  int xdim6 = args[6].dat->size[0];
  int xdim7 = args[7].dat->size[0];
  int xdim8 = args[8].dat->size[0];
  int xdim9 = args[9].dat->size[0];
  int xdim10 = args[10].dat->size[0];
  int xdim11 = args[11].dat->size[0];
  int xdim12 = args[12].dat->size[0];

  if (xdim0 != dims_opensbliblock00Kernel004_h[0][0] || xdim1 != dims_opensbliblock00Kernel004_h[1][0] || xdim2 != dims_opensbliblock00Kernel004_h[2][0] || xdim3 != dims_opensbliblock00Kernel004_h[3][0] || xdim4 != dims_opensbliblock00Kernel004_h[4][0] || xdim5 != dims_opensbliblock00Kernel004_h[5][0] || xdim6 != dims_opensbliblock00Kernel004_h[6][0] || xdim7 != dims_opensbliblock00Kernel004_h[7][0] || xdim8 != dims_opensbliblock00Kernel004_h[8][0] || xdim9 != dims_opensbliblock00Kernel004_h[9][0] || xdim10 != dims_opensbliblock00Kernel004_h[10][0] || xdim11 != dims_opensbliblock00Kernel004_h[11][0] || xdim12 != dims_opensbliblock00Kernel004_h[12][0]) {
    dims_opensbliblock00Kernel004_h[0][0] = xdim0;
    dims_opensbliblock00Kernel004_h[1][0] = xdim1;
    dims_opensbliblock00Kernel004_h[2][0] = xdim2;
    dims_opensbliblock00Kernel004_h[3][0] = xdim3;
    dims_opensbliblock00Kernel004_h[4][0] = xdim4;
    dims_opensbliblock00Kernel004_h[5][0] = xdim5;
    dims_opensbliblock00Kernel004_h[6][0] = xdim6;
    dims_opensbliblock00Kernel004_h[7][0] = xdim7;
    dims_opensbliblock00Kernel004_h[8][0] = xdim8;
    dims_opensbliblock00Kernel004_h[9][0] = xdim9;
    dims_opensbliblock00Kernel004_h[10][0] = xdim10;
    dims_opensbliblock00Kernel004_h[11][0] = xdim11;
    dims_opensbliblock00Kernel004_h[12][0] = xdim12;
    cutilSafeCall(block->instance->ostream(), cudaMemcpyToSymbol( dims_opensbliblock00Kernel004, dims_opensbliblock00Kernel004_h, sizeof(dims_opensbliblock00Kernel004)));
  }



  int x_size = MAX(0,end[0]-start[0]);

  dim3 grid( (x_size-1)/block->instance->OPS_block_size_x+ 1, 1, 1);
  dim3 tblock(block->instance->OPS_block_size_x,1,1);



  long long int dat0 = (block->instance->OPS_soa ? args[0].dat->type_size : args[0].dat->elem_size);
  long long int dat1 = (block->instance->OPS_soa ? args[1].dat->type_size : args[1].dat->elem_size);
  long long int dat2 = (block->instance->OPS_soa ? args[2].dat->type_size : args[2].dat->elem_size);
  long long int dat3 = (block->instance->OPS_soa ? args[3].dat->type_size : args[3].dat->elem_size);
  long long int dat4 = (block->instance->OPS_soa ? args[4].dat->type_size : args[4].dat->elem_size);
  long long int dat5 = (block->instance->OPS_soa ? args[5].dat->type_size : args[5].dat->elem_size);
  long long int dat6 = (block->instance->OPS_soa ? args[6].dat->type_size : args[6].dat->elem_size);
  long long int dat7 = (block->instance->OPS_soa ? args[7].dat->type_size : args[7].dat->elem_size);
  long long int dat8 = (block->instance->OPS_soa ? args[8].dat->type_size : args[8].dat->elem_size);
  long long int dat9 = (block->instance->OPS_soa ? args[9].dat->type_size : args[9].dat->elem_size);
  long long int dat10 = (block->instance->OPS_soa ? args[10].dat->type_size : args[10].dat->elem_size);
  long long int dat11 = (block->instance->OPS_soa ? args[11].dat->type_size : args[11].dat->elem_size);
  long long int dat12 = (block->instance->OPS_soa ? args[12].dat->type_size : args[12].dat->elem_size);

  char *p_a[13];

  //set up initial pointers
  long long int base0 = args[0].dat->base_offset + 
           dat0 * 1 * (start[0] * args[0].stencil->stride[0]);
  p_a[0] = (char *)args[0].data_d + base0;

  long long int base1 = args[1].dat->base_offset + 
           dat1 * 1 * (start[0] * args[1].stencil->stride[0]);
  p_a[1] = (char *)args[1].data_d + base1;

  long long int base2 = args[2].dat->base_offset + 
           dat2 * 1 * (start[0] * args[2].stencil->stride[0]);
  p_a[2] = (char *)args[2].data_d + base2;

  long long int base3 = args[3].dat->base_offset + 
           dat3 * 1 * (start[0] * args[3].stencil->stride[0]);
  p_a[3] = (char *)args[3].data_d + base3;

  long long int base4 = args[4].dat->base_offset + 
           dat4 * 1 * (start[0] * args[4].stencil->stride[0]);
  p_a[4] = (char *)args[4].data_d + base4;

  long long int base5 = args[5].dat->base_offset + 
           dat5 * 1 * (start[0] * args[5].stencil->stride[0]);
  p_a[5] = (char *)args[5].data_d + base5;

  long long int base6 = args[6].dat->base_offset + 
           dat6 * 1 * (start[0] * args[6].stencil->stride[0]);
  p_a[6] = (char *)args[6].data_d + base6;

  long long int base7 = args[7].dat->base_offset + 
           dat7 * 1 * (start[0] * args[7].stencil->stride[0]);
  p_a[7] = (char *)args[7].data_d + base7;

  long long int base8 = args[8].dat->base_offset + 
           dat8 * 1 * (start[0] * args[8].stencil->stride[0]);
  p_a[8] = (char *)args[8].data_d + base8;

  long long int base9 = args[9].dat->base_offset + 
           dat9 * 1 * (start[0] * args[9].stencil->stride[0]);
  p_a[9] = (char *)args[9].data_d + base9;

  long long int base10 = args[10].dat->base_offset + 
           dat10 * 1 * (start[0] * args[10].stencil->stride[0]);
  p_a[10] = (char *)args[10].data_d + base10;

  long long int base11 = args[11].dat->base_offset + 
           dat11 * 1 * (start[0] * args[11].stencil->stride[0]);
  p_a[11] = (char *)args[11].data_d + base11;

  long long int base12 = args[12].dat->base_offset + 
           dat12 * 1 * (start[0] * args[12].stencil->stride[0]);
  p_a[12] = (char *)args[12].data_d + base12;


  #ifndef OPS_LAZY
  ops_H_D_exchanges_device(args, 13);
  ops_halo_exchanges(args,13,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[15].mpi_time += t2-t1;
  }


  //call kernel wrapper function, passing in pointers to data
  if (x_size > 0)
    ops_opensbliblock00Kernel004<<<grid, tblock >>> ( 
     (double *)p_a[0], (double *)p_a[1],
     (double *)p_a[2], (double *)p_a[3],
     (double *)p_a[4], (double *)p_a[5],
     (double *)p_a[6], (double *)p_a[7],
     (double *)p_a[8], (double *)p_a[9],
     (double *)p_a[10], (double *)p_a[11],
     (double *)p_a[12],
    x_size);

  cutilSafeCall(block->instance->ostream(), cudaGetLastError());

  if (block->instance->OPS_diags>1) {
    cutilSafeCall(block->instance->ostream(), cudaDeviceSynchronize());
    ops_timers_core(&c1,&t1);
    block->instance->OPS_kernels[15].time += t1-t2;
  }

  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 13);
  ops_set_halo_dirtybit3(&args[8],range);
  ops_set_halo_dirtybit3(&args[9],range);
  ops_set_halo_dirtybit3(&args[10],range);
  ops_set_halo_dirtybit3(&args[11],range);
  ops_set_halo_dirtybit3(&args[12],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[15].mpi_time += t2-t1;
    block->instance->OPS_kernels[15].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[15].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[15].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[15].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[15].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[15].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[15].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[15].transfer += ops_compute_transfer(dim, start, end, &arg7);
    block->instance->OPS_kernels[15].transfer += ops_compute_transfer(dim, start, end, &arg8);
    block->instance->OPS_kernels[15].transfer += ops_compute_transfer(dim, start, end, &arg9);
    block->instance->OPS_kernels[15].transfer += ops_compute_transfer(dim, start, end, &arg10);
    block->instance->OPS_kernels[15].transfer += ops_compute_transfer(dim, start, end, &arg11);
    block->instance->OPS_kernels[15].transfer += ops_compute_transfer(dim, start, end, &arg12);
  }
}

#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel004(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11,
 ops_arg arg12) {
  ops_arg args[13] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12 };

  //create kernel descriptor and pass it to ops_enqueue_kernel
  create_kerneldesc_and_enque(name, args, 13, 15, dim, 1, range, block, ops_par_loop_opensbliblock00Kernel004_execute);
}
#endif
