//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel012(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9) {
#else
void ops_par_loop_opensbliblock00Kernel012_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  ops_arg arg9 = desc->args[9];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[10] = { arg0, arg1, arg2, arg3, arg4,
 arg5, arg6, arg7, arg8, arg9};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,10,range,6)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,6,"opensbliblock00Kernel012");
    block->instance->OPS_kernels[6].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "opensbliblock00Kernel012");
  #endif


  //compute locally allocated range for the sub-block
  int start[1];
  int end[1];
  int arg_idx[1];
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<1; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 10,block, range, start, end, arg_idx) < 0) return;
  #endif

  #if defined(OPS_MPI)
  #if defined(OPS_LAZY)
  sub_block_list sb = OPS_sub_block_list[block->index];
  arg_idx[0] = sb->decomp_disp[0];
  #else
  arg_idx[0] -= start[0];
  #endif
  #else //OPS_MPI
  arg_idx[0] = 0;
  #endif //OPS_MPI

  //initialize global variable with the dimension of dats

  //set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset/sizeof(double);
  double* p_B0_p = (double*)args[0].data_d;

  int base1 = args[1].dat->base_offset/sizeof(double);
  double* rhoE_B0_p = (double*)args[1].data_d;

  int base2 = args[2].dat->base_offset/sizeof(double);
  double* rho_B0_p = (double*)args[2].data_d;

  int base3 = args[3].dat->base_offset/sizeof(double);
  double* rhou0_B0_p = (double*)args[3].data_d;

  int base4 = args[4].dat->base_offset/sizeof(double);
  double* u0_B0_p = (double*)args[4].data_d;

  int base5 = args[5].dat->base_offset/sizeof(double);
  double* wk0_B0_p = (double*)args[5].data_d;

  int base6 = args[6].dat->base_offset/sizeof(double);
  double* Residual0_B0_p = (double*)args[6].data_d;

  int base7 = args[7].dat->base_offset/sizeof(double);
  double* Residual1_B0_p = (double*)args[7].data_d;

  int base8 = args[8].dat->base_offset/sizeof(double);
  double* Residual2_B0_p = (double*)args[8].data_d;




  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_device(args, 10);
  ops_halo_exchanges(args,10,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[6].mpi_time += __t1-__t2;
  }

  int start_0 = start[0];
  int end_0 = end[0];
  int arg_idx_0 = arg_idx[0];
  if ((end[0]-start[0])>0) {
    block->instance->sycl_instance->queue->submit([&](cl::sycl::handler &cgh) {

      auto block0np0_sycl = (*block0np0_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto invDelta0block0_sycl = (*invDelta0block0_p).template get_access<cl::sycl::access::mode::read>(cgh);

      cgh.parallel_for<class opensbliblock00Kernel012_kernel>(cl::sycl::nd_range<1>(cl::sycl::range<1>(
            ((end[0]-start[0]-1)/block->instance->OPS_block_size_x+1)*block->instance->OPS_block_size_x
             ),cl::sycl::range<1>(
      block->instance->OPS_block_size_x
             ))
      , [=](cl::sycl::nd_item<1> item
      ) [[intel::kernel_args_restrict]] {
        int n_x = item.get_global_id(0)+start_0;
        int idx[] = {arg_idx_0+n_x};
        const ACC<double> p_B0(&p_B0_p[0] + base0 + n_x*1);
        const ACC<double> rhoE_B0(&rhoE_B0_p[0] + base1 + n_x*1);
        const ACC<double> rho_B0(&rho_B0_p[0] + base2 + n_x*1);
        const ACC<double> rhou0_B0(&rhou0_B0_p[0] + base3 + n_x*1);
        const ACC<double> u0_B0(&u0_B0_p[0] + base4 + n_x*1);
        const ACC<double> wk0_B0(&wk0_B0_p[0] + base5 + n_x*1);
        ACC<double> Residual0_B0(&Residual0_B0_p[0] + base6 + n_x*1);
        ACC<double> Residual1_B0(&Residual1_B0_p[0] + base7 + n_x*1);
        ACC<double> Residual2_B0(&Residual2_B0_p[0] + base8 + n_x*1);
        //USER CODE
        if (n_x < end_0) {
          
   double d1_inv_rhoErho_dx = 0.0;
   double d1_p_dx = 0.0;
   double d1_pu0_dx = 0.0;
   double d1_rhoEu0_dx = 0.0;
   double d1_rhou0_dx = 0.0;
   double d1_rhou0u0_dx = 0.0;
   if (idx[0] == 0){

      d1_p_dx = (3.0*p_B0(1) + 0.333333333333333*p_B0(3) - 1.5*p_B0(2) - 1.83333333333333*p_B0(0))*invDelta0block0_sycl[0];

       d1_pu0_dx = (3.0*p_B0(1)*u0_B0(1) + 0.333333333333333*p_B0(3)*u0_B0(3) - 1.5*p_B0(2)*u0_B0(2) -
            1.83333333333333*p_B0(0)*u0_B0(0))*invDelta0block0_sycl[0];

       d1_rhoEu0_dx = (3.0*u0_B0(1)*rhoE_B0(1) + 0.333333333333333*u0_B0(3)*rhoE_B0(3) - 1.5*u0_B0(2)*rhoE_B0(2) -
            1.83333333333333*u0_B0(0)*rhoE_B0(0))*invDelta0block0_sycl[0];

       d1_inv_rhoErho_dx = (3.0*rhoE_B0(1)/rho_B0(1) + 0.333333333333333*rhoE_B0(3)/rho_B0(3) - 1.5*rhoE_B0(2)/rho_B0(2)
            - 1.83333333333333*rhoE_B0(0)/rho_B0(0))*invDelta0block0_sycl[0];

       d1_rhou0_dx = (3.0*rhou0_B0(1) + 0.333333333333333*rhou0_B0(3) - 1.5*rhou0_B0(2) -
            1.83333333333333*rhou0_B0(0))*invDelta0block0_sycl[0];

       d1_rhou0u0_dx = (3.0*u0_B0(1)*rhou0_B0(1) + 0.333333333333333*u0_B0(3)*rhou0_B0(3) - 1.5*u0_B0(2)*rhou0_B0(2) -
            1.83333333333333*u0_B0(0)*rhou0_B0(0))*invDelta0block0_sycl[0];

   }

   else if (idx[0] == 1){

       d1_p_dx = (0.0394168524399447*p_B0(2) + 0.00571369039775442*p_B0(4) + 0.719443173328855*p_B0(1) -
            0.322484932882161*p_B0(0) - 0.0658051057710389*p_B0(3) - 0.376283677513354*p_B0(-1))*invDelta0block0_sycl[0];

       d1_pu0_dx = (0.0394168524399447*p_B0(2)*u0_B0(2) + 0.00571369039775442*p_B0(4)*u0_B0(4) +
            0.719443173328855*p_B0(1)*u0_B0(1) - 0.322484932882161*p_B0(0)*u0_B0(0) -
            0.0658051057710389*p_B0(3)*u0_B0(3) - 0.376283677513354*p_B0(-1)*u0_B0(-1))*invDelta0block0_sycl[0];

       d1_rhoEu0_dx = (0.0394168524399447*u0_B0(2)*rhoE_B0(2) + 0.00571369039775442*u0_B0(4)*rhoE_B0(4) +
            0.719443173328855*u0_B0(1)*rhoE_B0(1) - 0.322484932882161*u0_B0(0)*rhoE_B0(0) -
            0.0658051057710389*u0_B0(3)*rhoE_B0(3) - 0.376283677513354*u0_B0(-1)*rhoE_B0(-1))*invDelta0block0_sycl[0];

       d1_inv_rhoErho_dx = (0.0394168524399447*rhoE_B0(2)/rho_B0(2) + 0.00571369039775442*rhoE_B0(4)/rho_B0(4) +
            0.719443173328855*rhoE_B0(1)/rho_B0(1) - 0.322484932882161*rhoE_B0(0)/rho_B0(0) -
            0.0658051057710389*rhoE_B0(3)/rho_B0(3) - 0.376283677513354*rhoE_B0(-1)/rho_B0(-1))*invDelta0block0_sycl[0];

       d1_rhou0_dx = (0.0394168524399447*rhou0_B0(2) + 0.00571369039775442*rhou0_B0(4) + 0.719443173328855*rhou0_B0(1) -
            0.322484932882161*rhou0_B0(0) - 0.0658051057710389*rhou0_B0(3) -
            0.376283677513354*rhou0_B0(-1))*invDelta0block0_sycl[0];

       d1_rhou0u0_dx = (0.0394168524399447*u0_B0(2)*rhou0_B0(2) + 0.00571369039775442*u0_B0(4)*rhou0_B0(4) +
            0.719443173328855*u0_B0(1)*rhou0_B0(1) - 0.322484932882161*u0_B0(0)*rhou0_B0(0) -
            0.0658051057710389*u0_B0(3)*rhou0_B0(3) - 0.376283677513354*u0_B0(-1)*rhou0_B0(-1))*invDelta0block0_sycl[0];

   }

   else if (idx[0] == 2){

       d1_p_dx = (0.197184333887745*p_B0(0) + 0.521455851089587*p_B0(1) + 0.113446470384241*p_B0(-2) -
            0.00412637789557492*p_B0(3) - 0.0367146847001261*p_B0(2) - 0.791245592765872*p_B0(-1))*invDelta0block0_sycl[0];

       d1_pu0_dx = (0.197184333887745*p_B0(0)*u0_B0(0) + 0.521455851089587*p_B0(1)*u0_B0(1) +
            0.113446470384241*p_B0(-2)*u0_B0(-2) - 0.00412637789557492*p_B0(3)*u0_B0(3) -
            0.0367146847001261*p_B0(2)*u0_B0(2) - 0.791245592765872*p_B0(-1)*u0_B0(-1))*invDelta0block0_sycl[0];

       d1_rhoEu0_dx = (0.197184333887745*u0_B0(0)*rhoE_B0(0) + 0.521455851089587*u0_B0(1)*rhoE_B0(1) +
            0.113446470384241*u0_B0(-2)*rhoE_B0(-2) - 0.00412637789557492*u0_B0(3)*rhoE_B0(3) -
            0.0367146847001261*u0_B0(2)*rhoE_B0(2) - 0.791245592765872*u0_B0(-1)*rhoE_B0(-1))*invDelta0block0_sycl[0];

       d1_inv_rhoErho_dx = (0.197184333887745*rhoE_B0(0)/rho_B0(0) + 0.521455851089587*rhoE_B0(1)/rho_B0(1) +
            0.113446470384241*rhoE_B0(-2)/rho_B0(-2) - 0.00412637789557492*rhoE_B0(3)/rho_B0(3) -
            0.0367146847001261*rhoE_B0(2)/rho_B0(2) - 0.791245592765872*rhoE_B0(-1)/rho_B0(-1))*invDelta0block0_sycl[0];

       d1_rhou0_dx = (0.197184333887745*rhou0_B0(0) + 0.521455851089587*rhou0_B0(1) + 0.113446470384241*rhou0_B0(-2) -
            0.00412637789557492*rhou0_B0(3) - 0.0367146847001261*rhou0_B0(2) -
            0.791245592765872*rhou0_B0(-1))*invDelta0block0_sycl[0];

       d1_rhou0u0_dx = (0.197184333887745*u0_B0(0)*rhou0_B0(0) + 0.521455851089587*u0_B0(1)*rhou0_B0(1) +
            0.113446470384241*u0_B0(-2)*rhou0_B0(-2) - 0.00412637789557492*u0_B0(3)*rhou0_B0(3) -
            0.0367146847001261*u0_B0(2)*rhou0_B0(2) - 0.791245592765872*u0_B0(-1)*rhou0_B0(-1))*invDelta0block0_sycl[0];

   }

   else if (idx[0] == 3){

       d1_p_dx = (0.0451033223343881*p_B0(0) + 0.652141084861241*p_B0(1) + 0.121937153224065*p_B0(-2) -
            0.00932597985049999*p_B0(-3) - 0.727822147724592*p_B0(-1) - 0.082033432844602*p_B0(2))*invDelta0block0_sycl[0];

       d1_pu0_dx = (0.0451033223343881*p_B0(0)*u0_B0(0) + 0.652141084861241*p_B0(1)*u0_B0(1) +
            0.121937153224065*p_B0(-2)*u0_B0(-2) - 0.00932597985049999*p_B0(-3)*u0_B0(-3) -
            0.727822147724592*p_B0(-1)*u0_B0(-1) - 0.082033432844602*p_B0(2)*u0_B0(2))*invDelta0block0_sycl[0];

       d1_rhoEu0_dx = (0.0451033223343881*u0_B0(0)*rhoE_B0(0) + 0.652141084861241*u0_B0(1)*rhoE_B0(1) +
            0.121937153224065*u0_B0(-2)*rhoE_B0(-2) - 0.00932597985049999*u0_B0(-3)*rhoE_B0(-3) -
            0.727822147724592*u0_B0(-1)*rhoE_B0(-1) - 0.082033432844602*u0_B0(2)*rhoE_B0(2))*invDelta0block0_sycl[0];

       d1_inv_rhoErho_dx = (0.0451033223343881*rhoE_B0(0)/rho_B0(0) + 0.652141084861241*rhoE_B0(1)/rho_B0(1) +
            0.121937153224065*rhoE_B0(-2)/rho_B0(-2) - 0.00932597985049999*rhoE_B0(-3)/rho_B0(-3) -
            0.727822147724592*rhoE_B0(-1)/rho_B0(-1) - 0.082033432844602*rhoE_B0(2)/rho_B0(2))*invDelta0block0_sycl[0];

       d1_rhou0_dx = (0.0451033223343881*rhou0_B0(0) + 0.652141084861241*rhou0_B0(1) + 0.121937153224065*rhou0_B0(-2) -
            0.00932597985049999*rhou0_B0(-3) - 0.727822147724592*rhou0_B0(-1) -
            0.082033432844602*rhou0_B0(2))*invDelta0block0_sycl[0];

       d1_rhou0u0_dx = (0.0451033223343881*u0_B0(0)*rhou0_B0(0) + 0.652141084861241*u0_B0(1)*rhou0_B0(1) +
            0.121937153224065*u0_B0(-2)*rhou0_B0(-2) - 0.00932597985049999*u0_B0(-3)*rhou0_B0(-3) -
            0.727822147724592*u0_B0(-1)*rhou0_B0(-1) - 0.082033432844602*u0_B0(2)*rhou0_B0(2))*invDelta0block0_sycl[0];

   }

   else if (idx[0] == -1 + block0np0_sycl[0]){

      d1_p_dx = (1.5*p_B0(-2) + 1.83333333333333*p_B0(0) - 3.0*p_B0(-1) - 0.333333333333333*p_B0(-3))*invDelta0block0_sycl[0];

       d1_pu0_dx = (1.5*p_B0(-2)*u0_B0(-2) + 1.83333333333333*p_B0(0)*u0_B0(0) - 3.0*p_B0(-1)*u0_B0(-1) -
            0.333333333333333*p_B0(-3)*u0_B0(-3))*invDelta0block0_sycl[0];

       d1_rhoEu0_dx = (1.5*u0_B0(-2)*rhoE_B0(-2) + 1.83333333333333*u0_B0(0)*rhoE_B0(0) - 3.0*u0_B0(-1)*rhoE_B0(-1) -
            0.333333333333333*u0_B0(-3)*rhoE_B0(-3))*invDelta0block0_sycl[0];

       d1_inv_rhoErho_dx = (1.5*rhoE_B0(-2)/rho_B0(-2) + 1.83333333333333*rhoE_B0(0)/rho_B0(0) -
            3.0*rhoE_B0(-1)/rho_B0(-1) - 0.333333333333333*rhoE_B0(-3)/rho_B0(-3))*invDelta0block0_sycl[0];

       d1_rhou0_dx = (1.5*rhou0_B0(-2) + 1.83333333333333*rhou0_B0(0) - 3.0*rhou0_B0(-1) -
            0.333333333333333*rhou0_B0(-3))*invDelta0block0_sycl[0];

       d1_rhou0u0_dx = (1.5*u0_B0(-2)*rhou0_B0(-2) + 1.83333333333333*u0_B0(0)*rhou0_B0(0) - 3.0*u0_B0(-1)*rhou0_B0(-1)
            - 0.333333333333333*u0_B0(-3)*rhou0_B0(-3))*invDelta0block0_sycl[0];

   }

   else if (idx[0] == -2 + block0np0_sycl[0]){

       d1_p_dx = (0.322484932882161*p_B0(0) + 0.0658051057710389*p_B0(-3) + 0.376283677513354*p_B0(1) -
            0.0394168524399447*p_B0(-2) - 0.00571369039775442*p_B0(-4) - 0.719443173328855*p_B0(-1))*invDelta0block0_sycl[0];

       d1_pu0_dx = (0.322484932882161*p_B0(0)*u0_B0(0) + 0.0658051057710389*p_B0(-3)*u0_B0(-3) +
            0.376283677513354*p_B0(1)*u0_B0(1) - 0.0394168524399447*p_B0(-2)*u0_B0(-2) -
            0.00571369039775442*p_B0(-4)*u0_B0(-4) - 0.719443173328855*p_B0(-1)*u0_B0(-1))*invDelta0block0_sycl[0];

       d1_rhoEu0_dx = (0.322484932882161*u0_B0(0)*rhoE_B0(0) + 0.0658051057710389*u0_B0(-3)*rhoE_B0(-3) +
            0.376283677513354*u0_B0(1)*rhoE_B0(1) - 0.0394168524399447*u0_B0(-2)*rhoE_B0(-2) -
            0.00571369039775442*u0_B0(-4)*rhoE_B0(-4) - 0.719443173328855*u0_B0(-1)*rhoE_B0(-1))*invDelta0block0_sycl[0];

       d1_inv_rhoErho_dx = (0.322484932882161*rhoE_B0(0)/rho_B0(0) + 0.0658051057710389*rhoE_B0(-3)/rho_B0(-3) +
            0.376283677513354*rhoE_B0(1)/rho_B0(1) - 0.0394168524399447*rhoE_B0(-2)/rho_B0(-2) -
            0.00571369039775442*rhoE_B0(-4)/rho_B0(-4) - 0.719443173328855*rhoE_B0(-1)/rho_B0(-1))*invDelta0block0_sycl[0];

       d1_rhou0_dx = (0.322484932882161*rhou0_B0(0) + 0.0658051057710389*rhou0_B0(-3) + 0.376283677513354*rhou0_B0(1) -
            0.0394168524399447*rhou0_B0(-2) - 0.00571369039775442*rhou0_B0(-4) -
            0.719443173328855*rhou0_B0(-1))*invDelta0block0_sycl[0];

       d1_rhou0u0_dx = (0.322484932882161*u0_B0(0)*rhou0_B0(0) + 0.0658051057710389*u0_B0(-3)*rhou0_B0(-3) +
            0.376283677513354*u0_B0(1)*rhou0_B0(1) - 0.0394168524399447*u0_B0(-2)*rhou0_B0(-2) -
            0.00571369039775442*u0_B0(-4)*rhou0_B0(-4) - 0.719443173328855*u0_B0(-1)*rhou0_B0(-1))*invDelta0block0_sycl[0];

   }

   else if (idx[0] == -3 + block0np0_sycl[0]){

       d1_p_dx = (0.00412637789557492*p_B0(-3) + 0.0367146847001261*p_B0(-2) + 0.791245592765872*p_B0(1) -
            0.197184333887745*p_B0(0) - 0.521455851089587*p_B0(-1) - 0.113446470384241*p_B0(2))*invDelta0block0_sycl[0];

       d1_pu0_dx = (0.00412637789557492*p_B0(-3)*u0_B0(-3) + 0.0367146847001261*p_B0(-2)*u0_B0(-2) +
            0.791245592765872*p_B0(1)*u0_B0(1) - 0.197184333887745*p_B0(0)*u0_B0(0) -
            0.521455851089587*p_B0(-1)*u0_B0(-1) - 0.113446470384241*p_B0(2)*u0_B0(2))*invDelta0block0_sycl[0];

       d1_rhoEu0_dx = (0.00412637789557492*u0_B0(-3)*rhoE_B0(-3) + 0.0367146847001261*u0_B0(-2)*rhoE_B0(-2) +
            0.791245592765872*u0_B0(1)*rhoE_B0(1) - 0.197184333887745*u0_B0(0)*rhoE_B0(0) -
            0.521455851089587*u0_B0(-1)*rhoE_B0(-1) - 0.113446470384241*u0_B0(2)*rhoE_B0(2))*invDelta0block0_sycl[0];

       d1_inv_rhoErho_dx = (0.00412637789557492*rhoE_B0(-3)/rho_B0(-3) + 0.0367146847001261*rhoE_B0(-2)/rho_B0(-2) +
            0.791245592765872*rhoE_B0(1)/rho_B0(1) - 0.197184333887745*rhoE_B0(0)/rho_B0(0) -
            0.521455851089587*rhoE_B0(-1)/rho_B0(-1) - 0.113446470384241*rhoE_B0(2)/rho_B0(2))*invDelta0block0_sycl[0];

       d1_rhou0_dx = (0.00412637789557492*rhou0_B0(-3) + 0.0367146847001261*rhou0_B0(-2) + 0.791245592765872*rhou0_B0(1)
            - 0.197184333887745*rhou0_B0(0) - 0.521455851089587*rhou0_B0(-1) -
            0.113446470384241*rhou0_B0(2))*invDelta0block0_sycl[0];

       d1_rhou0u0_dx = (0.00412637789557492*u0_B0(-3)*rhou0_B0(-3) + 0.0367146847001261*u0_B0(-2)*rhou0_B0(-2) +
            0.791245592765872*u0_B0(1)*rhou0_B0(1) - 0.197184333887745*u0_B0(0)*rhou0_B0(0) -
            0.521455851089587*u0_B0(-1)*rhou0_B0(-1) - 0.113446470384241*u0_B0(2)*rhou0_B0(2))*invDelta0block0_sycl[0];

   }

   else if (idx[0] == -4 + block0np0_sycl[0]){

       d1_p_dx = (0.00932597985049999*p_B0(3) + 0.727822147724592*p_B0(1) + 0.082033432844602*p_B0(-2) -
            0.0451033223343881*p_B0(0) - 0.652141084861241*p_B0(-1) - 0.121937153224065*p_B0(2))*invDelta0block0_sycl[0];

       d1_pu0_dx = (0.00932597985049999*p_B0(3)*u0_B0(3) + 0.727822147724592*p_B0(1)*u0_B0(1) +
            0.082033432844602*p_B0(-2)*u0_B0(-2) - 0.0451033223343881*p_B0(0)*u0_B0(0) -
            0.652141084861241*p_B0(-1)*u0_B0(-1) - 0.121937153224065*p_B0(2)*u0_B0(2))*invDelta0block0_sycl[0];

       d1_rhoEu0_dx = (0.00932597985049999*u0_B0(3)*rhoE_B0(3) + 0.727822147724592*u0_B0(1)*rhoE_B0(1) +
            0.082033432844602*u0_B0(-2)*rhoE_B0(-2) - 0.0451033223343881*u0_B0(0)*rhoE_B0(0) -
            0.652141084861241*u0_B0(-1)*rhoE_B0(-1) - 0.121937153224065*u0_B0(2)*rhoE_B0(2))*invDelta0block0_sycl[0];

       d1_inv_rhoErho_dx = (0.00932597985049999*rhoE_B0(3)/rho_B0(3) + 0.727822147724592*rhoE_B0(1)/rho_B0(1) +
            0.082033432844602*rhoE_B0(-2)/rho_B0(-2) - 0.0451033223343881*rhoE_B0(0)/rho_B0(0) -
            0.652141084861241*rhoE_B0(-1)/rho_B0(-1) - 0.121937153224065*rhoE_B0(2)/rho_B0(2))*invDelta0block0_sycl[0];

       d1_rhou0_dx = (0.00932597985049999*rhou0_B0(3) + 0.727822147724592*rhou0_B0(1) + 0.082033432844602*rhou0_B0(-2) -
            0.0451033223343881*rhou0_B0(0) - 0.652141084861241*rhou0_B0(-1) -
            0.121937153224065*rhou0_B0(2))*invDelta0block0_sycl[0];

       d1_rhou0u0_dx = (0.00932597985049999*u0_B0(3)*rhou0_B0(3) + 0.727822147724592*u0_B0(1)*rhou0_B0(1) +
            0.082033432844602*u0_B0(-2)*rhou0_B0(-2) - 0.0451033223343881*u0_B0(0)*rhou0_B0(0) -
            0.652141084861241*u0_B0(-1)*rhou0_B0(-1) - 0.121937153224065*u0_B0(2)*rhou0_B0(2))*invDelta0block0_sycl[0];

   }

   else{

       d1_p_dx = (-(2.0/3.0)*p_B0(-1) - (1.0/12.0)*p_B0(2) + ((1.0/12.0))*p_B0(-2) +
            ((2.0/3.0))*p_B0(1))*invDelta0block0_sycl[0];

       d1_pu0_dx = (-(2.0/3.0)*p_B0(-1)*u0_B0(-1) - (1.0/12.0)*p_B0(2)*u0_B0(2) + ((1.0/12.0))*p_B0(-2)*u0_B0(-2) +
            ((2.0/3.0))*p_B0(1)*u0_B0(1))*invDelta0block0_sycl[0];

       d1_rhoEu0_dx = (-(2.0/3.0)*u0_B0(-1)*rhoE_B0(-1) - (1.0/12.0)*u0_B0(2)*rhoE_B0(2) +
            ((1.0/12.0))*u0_B0(-2)*rhoE_B0(-2) + ((2.0/3.0))*u0_B0(1)*rhoE_B0(1))*invDelta0block0_sycl[0];

       d1_inv_rhoErho_dx = (-(2.0/3.0)*rhoE_B0(-1)/rho_B0(-1) - (1.0/12.0)*rhoE_B0(2)/rho_B0(2) +
            ((1.0/12.0))*rhoE_B0(-2)/rho_B0(-2) + ((2.0/3.0))*rhoE_B0(1)/rho_B0(1))*invDelta0block0_sycl[0];

       d1_rhou0_dx = (-(2.0/3.0)*rhou0_B0(-1) - (1.0/12.0)*rhou0_B0(2) + ((1.0/12.0))*rhou0_B0(-2) +
            ((2.0/3.0))*rhou0_B0(1))*invDelta0block0_sycl[0];

       d1_rhou0u0_dx = (-(2.0/3.0)*u0_B0(-1)*rhou0_B0(-1) - (1.0/12.0)*u0_B0(2)*rhou0_B0(2) +
            ((1.0/12.0))*u0_B0(-2)*rhou0_B0(-2) + ((2.0/3.0))*u0_B0(1)*rhou0_B0(1))*invDelta0block0_sycl[0];

   }

   Residual0_B0(0) = -d1_rhou0_dx;

    Residual1_B0(0) = -d1_p_dx - (1.0/2.0)*d1_rhou0u0_dx - (1.0/2.0)*u0_B0(0)*d1_rhou0_dx -
      (1.0/2.0)*wk0_B0(0)*rhou0_B0(0);

    Residual2_B0(0) = -d1_pu0_dx - (1.0/2.0)*d1_rhoEu0_dx - (1.0/2.0)*rhou0_B0(0)*d1_inv_rhoErho_dx -
      (1.0/2.0)*rhoE_B0(0)*d1_rhou0_dx/rho_B0(0);


        }
      });
    });
  }
  if (block->instance->OPS_diags > 1) {
    block->instance->sycl_instance->queue->wait();
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[6].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 10);
  ops_set_halo_dirtybit3(&args[6],range);
  ops_set_halo_dirtybit3(&args[7],range);
  ops_set_halo_dirtybit3(&args[8],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[6].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[6].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[6].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[6].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[6].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[6].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[6].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[6].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[6].transfer += ops_compute_transfer(dim, start, end, &arg7);
    block->instance->OPS_kernels[6].transfer += ops_compute_transfer(dim, start, end, &arg8);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel012(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)calloc(1,sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 1;
  desc->index = 6;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 6;
  for ( int i=0; i<2; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 10;
  desc->args = (ops_arg*)ops_malloc(10*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg2.dat->index;
  desc->args[3] = arg3;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg3.dat->index;
  desc->args[4] = arg4;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg4.dat->index;
  desc->args[5] = arg5;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg5.dat->index;
  desc->args[6] = arg6;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg6.dat->index;
  desc->args[7] = arg7;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg7.dat->index;
  desc->args[8] = arg8;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg8.dat->index;
  desc->args[9] = arg9;
  desc->function = ops_par_loop_opensbliblock00Kernel012_execute;
  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,6,"opensbliblock00Kernel012");
  }
  ops_enqueue_kernel(desc);
}
#endif
