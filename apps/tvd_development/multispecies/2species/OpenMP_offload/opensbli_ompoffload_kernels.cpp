//
// auto-generated by ops.py
//
//header
#define OPS_1D
#define OPS_API 2
#include "ops_lib_core.h"
#ifdef OPS_MPI
#include "ops_mpi_core.h"
#endif

// global constants
extern double Delta0block0;
extern int HDF5_timing;
extern int block0np0;
extern double delta_TVD;
extern double dt;
extern double eps_TVD;
extern double gama;
extern double gamma_m1;
extern double inv2gamma_m1;
extern double invDelta0block0;
extern double invdelta_TVD;
extern double invgama;
extern double invgamma_m1;
extern double kappa_TVD;
extern int niter;
extern double simulation_time;
extern int start_iter;
extern int write_output_file;

void ops_init_backend() {}

void ops_decl_const_char(OPS_instance *instance, int dim, char const *type,
int size, char *dat, char const *name){
  ops_execute(instance);
  if (!strcmp(name,"Delta0block0")) {
    #pragma omp target enter data map(to:Delta0block0)
  }
  else
  if (!strcmp(name,"HDF5_timing")) {
    #pragma omp target enter data map(to:HDF5_timing)
  }
  else
  if (!strcmp(name,"block0np0")) {
    #pragma omp target enter data map(to:block0np0)
  }
  else
  if (!strcmp(name,"delta_TVD")) {
    #pragma omp target enter data map(to:delta_TVD)
  }
  else
  if (!strcmp(name,"dt")) {
    #pragma omp target enter data map(to:dt)
  }
  else
  if (!strcmp(name,"eps_TVD")) {
    #pragma omp target enter data map(to:eps_TVD)
  }
  else
  if (!strcmp(name,"gama")) {
    #pragma omp target enter data map(to:gama)
  }
  else
  if (!strcmp(name,"gamma_m1")) {
    #pragma omp target enter data map(to:gamma_m1)
  }
  else
  if (!strcmp(name,"inv2gamma_m1")) {
    #pragma omp target enter data map(to:inv2gamma_m1)
  }
  else
  if (!strcmp(name,"invDelta0block0")) {
    #pragma omp target enter data map(to:invDelta0block0)
  }
  else
  if (!strcmp(name,"invdelta_TVD")) {
    #pragma omp target enter data map(to:invdelta_TVD)
  }
  else
  if (!strcmp(name,"invgama")) {
    #pragma omp target enter data map(to:invgama)
  }
  else
  if (!strcmp(name,"invgamma_m1")) {
    #pragma omp target enter data map(to:invgamma_m1)
  }
  else
  if (!strcmp(name,"kappa_TVD")) {
    #pragma omp target enter data map(to:kappa_TVD)
  }
  else
  if (!strcmp(name,"niter")) {
    #pragma omp target enter data map(to:niter)
  }
  else
  if (!strcmp(name,"simulation_time")) {
    #pragma omp target enter data map(to:simulation_time)
  }
  else
  if (!strcmp(name,"start_iter")) {
    #pragma omp target enter data map(to:start_iter)
  }
  else
  if (!strcmp(name,"write_output_file")) {
    #pragma omp target enter data map(to:write_output_file)
  }
  else
  {
    throw OPSException(OPS_RUNTIME_ERROR, "error: unknown const name");
  }
}

//user kernel files
#include "opensbliblock00Kernel016_ompoffload_kernel.cpp"
#include "opensbliblock00Kernel014_ompoffload_kernel.cpp"
#include "opensbliblock00Kernel015_ompoffload_kernel.cpp"
#include "opensbliblock00Kernel006_ompoffload_kernel.cpp"
#include "opensbliblock00Kernel013_ompoffload_kernel.cpp"
#include "opensbliblock00Kernel017_ompoffload_kernel.cpp"
#include "opensbliblock00Kernel002_ompoffload_kernel.cpp"
#include "opensbliblock00Kernel003_ompoffload_kernel.cpp"
#include "opensbliblock00Kernel004_ompoffload_kernel.cpp"
#include "opensbliblock00Kernel005_ompoffload_kernel.cpp"
