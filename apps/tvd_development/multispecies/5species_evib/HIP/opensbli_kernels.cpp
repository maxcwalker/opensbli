//
// auto-generated by ops.py
//
//header
#define OPS_API 2
#define OPS_1D
#include "ops_lib_core.h"

#include "ops_hip_rt_support.h"
#include "ops_hip_reduction.h"


#ifdef OPS_MPI
#include "ops_mpi_core.h"
#endif
// global constants
__constant__ double Delta0block0;
__constant__ int HDF5_timing;
__constant__ double MN;
__constant__ double MN2;
__constant__ double MNO;
__constant__ double MO;
__constant__ double MO2;
__constant__ double Re;
__constant__ double Rhat;
__constant__ double Sc;
__constant__ int block0np0;
__constant__ double cN;
__constant__ double cN2;
__constant__ double cNO;
__constant__ double cO;
__constant__ double cO2;
__constant__ double delta_TVD;
__constant__ double dhN;
__constant__ double dhNO;
__constant__ double dhO;
__constant__ double dt;
__constant__ double eps_TVD;
__constant__ double gama;
__constant__ double gamma_m1;
__constant__ double inv2Delta0block0;
__constant__ double invDelta0block0;
__constant__ double invMN;
__constant__ double invMN2;
__constant__ double invMNO;
__constant__ double invMO;
__constant__ double invMO2;
__constant__ double invRe;
__constant__ double invRhat;
__constant__ double invSc;
__constant__ double invdelta_TVD;
__constant__ double kappa_TVD;
__constant__ int niter;
__constant__ double simulation_time;
__constant__ int start_iter;
__constant__ double thetavN2;
__constant__ double thetavNO;
__constant__ double thetavO2;
__constant__ int write_output_file;

void ops_init_backend() {}

void ops_decl_const_char(OPS_instance *instance, int dim, char const *type,
int size, char *dat, char const *name){
  ops_execute(instance);
  if (!strcmp(name,"Delta0block0")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(Delta0block0), dat, dim*size));
  }
  else
  if (!strcmp(name,"HDF5_timing")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(HDF5_timing), dat, dim*size));
  }
  else
  if (!strcmp(name,"MN")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(MN), dat, dim*size));
  }
  else
  if (!strcmp(name,"MN2")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(MN2), dat, dim*size));
  }
  else
  if (!strcmp(name,"MNO")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(MNO), dat, dim*size));
  }
  else
  if (!strcmp(name,"MO")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(MO), dat, dim*size));
  }
  else
  if (!strcmp(name,"MO2")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(MO2), dat, dim*size));
  }
  else
  if (!strcmp(name,"Re")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(Re), dat, dim*size));
  }
  else
  if (!strcmp(name,"Rhat")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(Rhat), dat, dim*size));
  }
  else
  if (!strcmp(name,"Sc")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(Sc), dat, dim*size));
  }
  else
  if (!strcmp(name,"block0np0")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(block0np0), dat, dim*size));
  }
  else
  if (!strcmp(name,"cN")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(cN), dat, dim*size));
  }
  else
  if (!strcmp(name,"cN2")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(cN2), dat, dim*size));
  }
  else
  if (!strcmp(name,"cNO")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(cNO), dat, dim*size));
  }
  else
  if (!strcmp(name,"cO")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(cO), dat, dim*size));
  }
  else
  if (!strcmp(name,"cO2")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(cO2), dat, dim*size));
  }
  else
  if (!strcmp(name,"delta_TVD")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(delta_TVD), dat, dim*size));
  }
  else
  if (!strcmp(name,"dhN")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(dhN), dat, dim*size));
  }
  else
  if (!strcmp(name,"dhNO")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(dhNO), dat, dim*size));
  }
  else
  if (!strcmp(name,"dhO")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(dhO), dat, dim*size));
  }
  else
  if (!strcmp(name,"dt")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(dt), dat, dim*size));
  }
  else
  if (!strcmp(name,"eps_TVD")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(eps_TVD), dat, dim*size));
  }
  else
  if (!strcmp(name,"gama")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(gama), dat, dim*size));
  }
  else
  if (!strcmp(name,"gamma_m1")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(gamma_m1), dat, dim*size));
  }
  else
  if (!strcmp(name,"inv2Delta0block0")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(inv2Delta0block0), dat, dim*size));
  }
  else
  if (!strcmp(name,"invDelta0block0")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(invDelta0block0), dat, dim*size));
  }
  else
  if (!strcmp(name,"invMN")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(invMN), dat, dim*size));
  }
  else
  if (!strcmp(name,"invMN2")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(invMN2), dat, dim*size));
  }
  else
  if (!strcmp(name,"invMNO")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(invMNO), dat, dim*size));
  }
  else
  if (!strcmp(name,"invMO")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(invMO), dat, dim*size));
  }
  else
  if (!strcmp(name,"invMO2")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(invMO2), dat, dim*size));
  }
  else
  if (!strcmp(name,"invRe")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(invRe), dat, dim*size));
  }
  else
  if (!strcmp(name,"invRhat")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(invRhat), dat, dim*size));
  }
  else
  if (!strcmp(name,"invSc")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(invSc), dat, dim*size));
  }
  else
  if (!strcmp(name,"invdelta_TVD")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(invdelta_TVD), dat, dim*size));
  }
  else
  if (!strcmp(name,"kappa_TVD")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(kappa_TVD), dat, dim*size));
  }
  else
  if (!strcmp(name,"niter")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(niter), dat, dim*size));
  }
  else
  if (!strcmp(name,"simulation_time")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(simulation_time), dat, dim*size));
  }
  else
  if (!strcmp(name,"start_iter")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(start_iter), dat, dim*size));
  }
  else
  if (!strcmp(name,"thetavN2")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(thetavN2), dat, dim*size));
  }
  else
  if (!strcmp(name,"thetavNO")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(thetavNO), dat, dim*size));
  }
  else
  if (!strcmp(name,"thetavO2")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(thetavO2), dat, dim*size));
  }
  else
  if (!strcmp(name,"write_output_file")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(write_output_file), dat, dim*size));
  }
  else
  {
    throw OPSException(OPS_RUNTIME_ERROR, "error: unknown const name");
  }
}


//user kernel files
#include "opensbliblock00Kernel044_hip_kernel.cpp"
#include "opensbliblock00Kernel042_hip_kernel.cpp"
#include "opensbliblock00Kernel043_hip_kernel.cpp"
#include "opensbliblock00Kernel007_hip_kernel.cpp"
#include "opensbliblock00Kernel018_hip_kernel.cpp"
#include "opensbliblock00Kernel029_hip_kernel.cpp"
#include "opensbliblock00Kernel030_hip_kernel.cpp"
#include "opensbliblock00Kernel031_hip_kernel.cpp"
#include "opensbliblock00Kernel032_hip_kernel.cpp"
#include "opensbliblock00Kernel033_hip_kernel.cpp"
#include "opensbliblock00Kernel017_hip_kernel.cpp"
#include "opensbliblock00Kernel023_hip_kernel.cpp"
#include "opensbliblock00Kernel024_hip_kernel.cpp"
#include "opensbliblock00Kernel025_hip_kernel.cpp"
#include "opensbliblock00Kernel008_hip_kernel.cpp"
#include "opensbliblock00Kernel026_hip_kernel.cpp"
#include "opensbliblock00Kernel027_hip_kernel.cpp"
#include "opensbliblock00Kernel028_hip_kernel.cpp"
#include "opensbliblock00Kernel036_hip_kernel.cpp"
#include "opensbliblock00Kernel037_hip_kernel.cpp"
#include "opensbliblock00Kernel038_hip_kernel.cpp"
#include "opensbliblock00Kernel039_hip_kernel.cpp"
#include "opensbliblock00Kernel040_hip_kernel.cpp"
#include "opensbliblock00Kernel041_hip_kernel.cpp"
#include "opensbliblock00Kernel006_hip_kernel.cpp"
#include "opensbliblock00Kernel034_hip_kernel.cpp"
#include "opensbliblock00Kernel035_hip_kernel.cpp"
#include "opensbliblock00Kernel045_hip_kernel.cpp"
#include "opensbliblock00Kernel002_hip_kernel.cpp"
#include "opensbliblock00Kernel003_hip_kernel.cpp"
#include "opensbliblock00Kernel004_hip_kernel.cpp"
#include "opensbliblock00Kernel005_hip_kernel.cpp"
