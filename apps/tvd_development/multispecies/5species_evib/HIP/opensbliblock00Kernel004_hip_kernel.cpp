//
// auto-generated by ops.py
//
__constant__ int dims_opensbliblock00Kernel004 [19][1];
static int dims_opensbliblock00Kernel004_h [19][1] = {{0}};

//user function
__device__

 void opensbliblock00Kernel004_gpu(const ACC<double> &af_B0,
  const ACC<double> &gamaf_B0,
  const ACC<double> &rhoE_B0,
  const
ACC<double> &rhoN2_B0,
  const ACC<double> &rhoNO_B0,
  const ACC<double> &rhoN_B0,
  const ACC<double> &rhoO2_B0,
  const
ACC<double> &rhoO_B0,
  const ACC<double> &rhoev_B0,
  const ACC<double> &rhou0_B0,
  const ACC<double> &u0_B0,
  ACC<double>
&wk0_B0,
  ACC<double> &wk1_B0,
  ACC<double> &wk2_B0,
  ACC<double> &wk3_B0,
  ACC<double> &wk4_B0,
  ACC<double> &wk5_B0,
  ACC<double> &wk6_B0,
  ACC<double> &wk7_B0)
{
   double AVG_0_0_LEV_00 = 0.0;
   double AVG_0_0_LEV_01 = 0.0;
   double AVG_0_0_LEV_02 = 0.0;
   double AVG_0_0_LEV_03 = 0.0;
   double AVG_0_0_LEV_04 = 0.0;
   double AVG_0_0_LEV_07 = 0.0;
   double AVG_0_0_LEV_10 = 0.0;
   double AVG_0_0_LEV_11 = 0.0;
   double AVG_0_0_LEV_12 = 0.0;
   double AVG_0_0_LEV_13 = 0.0;
   double AVG_0_0_LEV_14 = 0.0;
   double AVG_0_0_LEV_17 = 0.0;
   double AVG_0_0_LEV_20 = 0.0;
   double AVG_0_0_LEV_21 = 0.0;
   double AVG_0_0_LEV_22 = 0.0;
   double AVG_0_0_LEV_23 = 0.0;
   double AVG_0_0_LEV_24 = 0.0;
   double AVG_0_0_LEV_27 = 0.0;
   double AVG_0_0_LEV_30 = 0.0;
   double AVG_0_0_LEV_31 = 0.0;
   double AVG_0_0_LEV_32 = 0.0;
   double AVG_0_0_LEV_33 = 0.0;
   double AVG_0_0_LEV_34 = 0.0;
   double AVG_0_0_LEV_37 = 0.0;
   double AVG_0_0_LEV_46 = 0.0;
   double AVG_0_0_LEV_50 = 0.0;
   double AVG_0_0_LEV_51 = 0.0;
   double AVG_0_0_LEV_52 = 0.0;
   double AVG_0_0_LEV_53 = 0.0;
   double AVG_0_0_LEV_54 = 0.0;
   double AVG_0_0_LEV_57 = 0.0;
   double AVG_0_0_LEV_60 = 0.0;
   double AVG_0_0_LEV_61 = 0.0;
   double AVG_0_0_LEV_62 = 0.0;
   double AVG_0_0_LEV_63 = 0.0;
   double AVG_0_0_LEV_64 = 0.0;
   double AVG_0_0_LEV_65 = 0.0;
   double AVG_0_0_LEV_67 = 0.0;
   double AVG_0_0_LEV_70 = 0.0;
   double AVG_0_0_LEV_71 = 0.0;
   double AVG_0_0_LEV_72 = 0.0;
   double AVG_0_0_LEV_73 = 0.0;
   double AVG_0_0_LEV_74 = 0.0;
   double AVG_0_0_LEV_75 = 0.0;
   double AVG_0_0_LEV_77 = 0.0;
   double AVG_0_REV_00 = 0.0;
   double AVG_0_REV_01 = 0.0;
   double AVG_0_REV_02 = 0.0;
   double AVG_0_REV_03 = 0.0;
   double AVG_0_REV_05 = 0.0;
   double AVG_0_REV_06 = 0.0;
   double AVG_0_REV_07 = 0.0;
   double AVG_0_REV_10 = 0.0;
   double AVG_0_REV_16 = 0.0;
   double AVG_0_REV_17 = 0.0;
   double AVG_0_REV_21 = 0.0;
   double AVG_0_REV_26 = 0.0;
   double AVG_0_REV_27 = 0.0;
   double AVG_0_REV_32 = 0.0;
   double AVG_0_REV_36 = 0.0;
   double AVG_0_REV_37 = 0.0;
   double AVG_0_REV_43 = 0.0;
   double AVG_0_REV_46 = 0.0;
   double AVG_0_REV_47 = 0.0;
   double AVG_0_REV_56 = 0.0;
   double AVG_0_REV_57 = 0.0;
   double AVG_0_REV_64 = 0.0;
   double AVG_0_REV_75 = 0.0;
   double AVG_0_REV_76 = 0.0;
   double AVG_0_REV_77 = 0.0;
   double AVG_0_a = 0.0;
   double AVG_0_af = 0.0;
   double AVG_0_gamaf = 0.0;
   double AVG_0_rho = 0.0;
   double AVG_0_rhoN = 0.0;
   double AVG_0_rhoN2 = 0.0;
   double AVG_0_rhoNO = 0.0;
   double AVG_0_rhoO = 0.0;
   double AVG_0_rhoO2 = 0.0;
   double AVG_0_u0 = 0.0;
   double S = 0.0;
   double alpha_00 = 0.0;
   double alpha_01 = 0.0;
   double alpha_02 = 0.0;
   double alpha_10 = 0.0;
   double alpha_11 = 0.0;
   double alpha_12 = 0.0;
   double alpha_20 = 0.0;
   double alpha_21 = 0.0;
   double alpha_22 = 0.0;
   double alpha_30 = 0.0;
   double alpha_31 = 0.0;
   double alpha_32 = 0.0;
   double alpha_40 = 0.0;
   double alpha_41 = 0.0;
   double alpha_42 = 0.0;
   double alpha_50 = 0.0;
   double alpha_51 = 0.0;
   double alpha_52 = 0.0;
   double alpha_60 = 0.0;
   double alpha_61 = 0.0;
   double alpha_62 = 0.0;
   double alpha_70 = 0.0;
   double alpha_71 = 0.0;
   double alpha_72 = 0.0;
   double g_00 = 0.0;
   double g_01 = 0.0;
   double g_10 = 0.0;
   double g_11 = 0.0;
   double g_20 = 0.0;
   double g_21 = 0.0;
   double g_30 = 0.0;
   double g_31 = 0.0;
   double g_40 = 0.0;
   double g_41 = 0.0;
   double g_50 = 0.0;
   double g_51 = 0.0;
   double g_60 = 0.0;
   double g_61 = 0.0;
   double g_70 = 0.0;
   double g_71 = 0.0;
   double gamma_0 = 0.0;
   double gamma_1 = 0.0;
   double gamma_2 = 0.0;
   double gamma_3 = 0.0;
   double gamma_4 = 0.0;
   double gamma_5 = 0.0;
   double gamma_6 = 0.0;
   double gamma_7 = 0.0;
   double inv_AVG_a = 0.0;
   double inv_AVG_rho = 0.0;
   double phi_0 = 0.0;
   double phi_1 = 0.0;
   double phi_2 = 0.0;
   double phi_3 = 0.0;
   double phi_4 = 0.0;
   double phi_5 = 0.0;
   double phi_6 = 0.0;
   double phi_7 = 0.0;
   double phi_star_0 = 0.0;
   double phi_star_1 = 0.0;
   double phi_star_2 = 0.0;
   double phi_star_3 = 0.0;
   double phi_star_4 = 0.0;
   double phi_star_5 = 0.0;
   double phi_star_6 = 0.0;
   double phi_star_7 = 0.0;
   double sigma_0_0 = 0.0;
   double sigma_0_1 = 0.0;
   double sigma_0_2 = 0.0;
   double sigma_0_3 = 0.0;
   double sigma_0_4 = 0.0;
   double sigma_0_5 = 0.0;
   double sigma_0_6 = 0.0;
   double sigma_0_7 = 0.0;
   double sigma_1_0 = 0.0;
   double sigma_1_1 = 0.0;
   double sigma_1_2 = 0.0;
   double sigma_1_3 = 0.0;
   double sigma_1_4 = 0.0;
   double sigma_1_5 = 0.0;
   double sigma_1_6 = 0.0;
   double sigma_1_7 = 0.0;
   double t1 = 0.0;
   double t2 = 0.0;
   double theta_0 = 0.0;
   double theta_1 = 0.0;
   double theta_2 = 0.0;
   double theta_3 = 0.0;
   double theta_4 = 0.0;
   double theta_5 = 0.0;
   double theta_6 = 0.0;
   double theta_7 = 0.0;
   double theta_hat_00 = 0.0;
   double theta_hat_01 = 0.0;
   double theta_hat_10 = 0.0;
   double theta_hat_11 = 0.0;
   double theta_hat_20 = 0.0;
   double theta_hat_21 = 0.0;
   double theta_hat_30 = 0.0;
   double theta_hat_31 = 0.0;
   double theta_hat_40 = 0.0;
   double theta_hat_41 = 0.0;
   double theta_hat_50 = 0.0;
   double theta_hat_51 = 0.0;
   double theta_hat_60 = 0.0;
   double theta_hat_61 = 0.0;
   double theta_hat_70 = 0.0;
   double theta_hat_71 = 0.0;
   double ws_lambda_00 = 0.0;
   double ws_lambda_11 = 0.0;
   double ws_lambda_22 = 0.0;
   double ws_lambda_33 = 0.0;
   double ws_lambda_44 = 0.0;
   double ws_lambda_55 = 0.0;
   double ws_lambda_66 = 0.0;
   double ws_lambda_77 = 0.0;
   AVG_0_rhoN = ((1.0/2.0))*(rhoN_B0(0) + rhoN_B0(-1));

   AVG_0_rhoO = ((1.0/2.0))*(rhoO_B0(0) + rhoO_B0(-1));

   AVG_0_u0 = ((1.0/2.0))*(u0_B0(0) + u0_B0(-1));

   AVG_0_rhoNO = ((1.0/2.0))*(rhoNO_B0(0) + rhoNO_B0(-1));

   AVG_0_gamaf = ((1.0/2.0))*(gamaf_B0(0) + gamaf_B0(-1));

   AVG_0_rhoO2 = ((1.0/2.0))*(rhoO2_B0(0) + rhoO2_B0(-1));

   AVG_0_af = ((1.0/2.0))*(af_B0(0) + af_B0(-1));

   AVG_0_rhoN2 = ((1.0/2.0))*(rhoN2_B0(0) + rhoN2_B0(-1));

   inv_AVG_a = 1.0/(AVG_0_a);

   inv_AVG_rho = 1.0/(AVG_0_rho);

   AVG_0_0_LEV_00 = AVG_0_rhoO2/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)*AVG_0_gamaf);

    AVG_0_0_LEV_01 = -(-AVG_0_rhoO2 + AVG_0_gamaf*AVG_0_rhoN + AVG_0_gamaf*AVG_0_rhoN2 + AVG_0_gamaf*AVG_0_rhoNO +
      AVG_0_gamaf*AVG_0_rhoO + AVG_0_gamaf*AVG_0_rhoO2)/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO +
      AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_02 = AVG_0_rhoO2/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_03 = AVG_0_rhoO2/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_04 = AVG_0_rhoO2/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_07 = 2*AVG_0_rhoO2/(AVG_0_af*AVG_0_gamaf);

   AVG_0_0_LEV_10 = AVG_0_rhoNO/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_11 = AVG_0_rhoNO/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)*AVG_0_gamaf);

    AVG_0_0_LEV_12 = -(-AVG_0_rhoNO + AVG_0_gamaf*AVG_0_rhoN + AVG_0_gamaf*AVG_0_rhoN2 + AVG_0_gamaf*AVG_0_rhoNO +
      AVG_0_gamaf*AVG_0_rhoO + AVG_0_gamaf*AVG_0_rhoO2)/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO +
      AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_13 = AVG_0_rhoNO/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_14 = AVG_0_rhoNO/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_17 = 2*AVG_0_rhoNO/(AVG_0_af*AVG_0_gamaf);

   AVG_0_0_LEV_20 = AVG_0_rhoN2/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_21 = AVG_0_rhoN2/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_22 = AVG_0_rhoN2/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)*AVG_0_gamaf);

    AVG_0_0_LEV_23 = -(-AVG_0_rhoN2 + AVG_0_gamaf*AVG_0_rhoN + AVG_0_gamaf*AVG_0_rhoN2 + AVG_0_gamaf*AVG_0_rhoNO +
      AVG_0_gamaf*AVG_0_rhoO + AVG_0_gamaf*AVG_0_rhoO2)/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO +
      AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_24 = AVG_0_rhoN2/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_27 = 2*AVG_0_rhoN2/(AVG_0_af*AVG_0_gamaf);

   AVG_0_0_LEV_30 = AVG_0_rhoN/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_31 = AVG_0_rhoN/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_32 = AVG_0_rhoN/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_33 = AVG_0_rhoN/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)*AVG_0_gamaf);

    AVG_0_0_LEV_34 = -(-AVG_0_rhoN + AVG_0_gamaf*AVG_0_rhoN + AVG_0_gamaf*AVG_0_rhoN2 + AVG_0_gamaf*AVG_0_rhoNO +
      AVG_0_gamaf*AVG_0_rhoO + AVG_0_gamaf*AVG_0_rhoO2)/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO +
      AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_37 = 2*AVG_0_rhoN/(AVG_0_af*AVG_0_gamaf);

   AVG_0_0_LEV_46 = 1;

   AVG_0_0_LEV_50 = (-1 + AVG_0_gamaf)/AVG_0_gamaf;

   AVG_0_0_LEV_51 = (-1 + AVG_0_gamaf)/AVG_0_gamaf;

   AVG_0_0_LEV_52 = (-1 + AVG_0_gamaf)/AVG_0_gamaf;

   AVG_0_0_LEV_53 = (-1 + AVG_0_gamaf)/AVG_0_gamaf;

   AVG_0_0_LEV_54 = (-1 + AVG_0_gamaf)/AVG_0_gamaf;

   AVG_0_0_LEV_57 = -2*(AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)/(AVG_0_af*AVG_0_gamaf);

    AVG_0_0_LEV_60 = ((1.0/2.0))*AVG_0_rhoO/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO +
      AVG_0_rhoO2)*AVG_0_gamaf);

    AVG_0_0_LEV_61 = ((1.0/2.0))*AVG_0_rhoO/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO +
      AVG_0_rhoO2)*AVG_0_gamaf);

    AVG_0_0_LEV_62 = ((1.0/2.0))*AVG_0_rhoO/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO +
      AVG_0_rhoO2)*AVG_0_gamaf);

    AVG_0_0_LEV_63 = ((1.0/2.0))*AVG_0_rhoO/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO +
      AVG_0_rhoO2)*AVG_0_gamaf);

    AVG_0_0_LEV_64 = ((1.0/2.0))*AVG_0_rhoO/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO +
      AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_65 = ((1.0/2.0))*AVG_0_rhoO/AVG_0_af;

   AVG_0_0_LEV_67 = AVG_0_rhoO/(AVG_0_af*AVG_0_gamaf);

    AVG_0_0_LEV_70 = ((1.0/2.0))*AVG_0_rhoO/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO +
      AVG_0_rhoO2)*AVG_0_gamaf);

    AVG_0_0_LEV_71 = ((1.0/2.0))*AVG_0_rhoO/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO +
      AVG_0_rhoO2)*AVG_0_gamaf);

    AVG_0_0_LEV_72 = ((1.0/2.0))*AVG_0_rhoO/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO +
      AVG_0_rhoO2)*AVG_0_gamaf);

    AVG_0_0_LEV_73 = ((1.0/2.0))*AVG_0_rhoO/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO +
      AVG_0_rhoO2)*AVG_0_gamaf);

    AVG_0_0_LEV_74 = ((1.0/2.0))*AVG_0_rhoO/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO +
      AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_75 = -(1.0/2.0)*AVG_0_rhoO/AVG_0_af;

   AVG_0_0_LEV_77 = AVG_0_rhoO/(AVG_0_af*AVG_0_gamaf);

    alpha_00 = (-rhoE_B0(-1) + rhoE_B0(0))*AVG_0_0_LEV_07 + (-rhoN_B0(-1) + rhoN_B0(0))*AVG_0_0_LEV_02 + (-rhoO_B0(-1) +
      rhoO_B0(0))*AVG_0_0_LEV_00 + (-rhoN2_B0(-1) + rhoN2_B0(0))*AVG_0_0_LEV_03 + (-rhoNO_B0(-1) +
      rhoNO_B0(0))*AVG_0_0_LEV_04 + (-rhoO2_B0(-1) + rhoO2_B0(0))*AVG_0_0_LEV_01;

    alpha_10 = (-rhoE_B0(-1) + rhoE_B0(0))*AVG_0_0_LEV_17 + (-rhoN_B0(-1) + rhoN_B0(0))*AVG_0_0_LEV_12 + (-rhoO_B0(-1) +
      rhoO_B0(0))*AVG_0_0_LEV_10 + (-rhoN2_B0(-1) + rhoN2_B0(0))*AVG_0_0_LEV_13 + (-rhoNO_B0(-1) +
      rhoNO_B0(0))*AVG_0_0_LEV_14 + (-rhoO2_B0(-1) + rhoO2_B0(0))*AVG_0_0_LEV_11;

    alpha_20 = (-rhoE_B0(-1) + rhoE_B0(0))*AVG_0_0_LEV_27 + (-rhoN_B0(-1) + rhoN_B0(0))*AVG_0_0_LEV_22 + (-rhoO_B0(-1) +
      rhoO_B0(0))*AVG_0_0_LEV_20 + (-rhoN2_B0(-1) + rhoN2_B0(0))*AVG_0_0_LEV_23 + (-rhoNO_B0(-1) +
      rhoNO_B0(0))*AVG_0_0_LEV_24 + (-rhoO2_B0(-1) + rhoO2_B0(0))*AVG_0_0_LEV_21;

    alpha_30 = (-rhoE_B0(-1) + rhoE_B0(0))*AVG_0_0_LEV_37 + (-rhoN_B0(-1) + rhoN_B0(0))*AVG_0_0_LEV_32 + (-rhoO_B0(-1) +
      rhoO_B0(0))*AVG_0_0_LEV_30 + (-rhoN2_B0(-1) + rhoN2_B0(0))*AVG_0_0_LEV_33 + (-rhoNO_B0(-1) +
      rhoNO_B0(0))*AVG_0_0_LEV_34 + (-rhoO2_B0(-1) + rhoO2_B0(0))*AVG_0_0_LEV_31;

   alpha_40 = (-rhoev_B0(-1) + rhoev_B0(0))*AVG_0_0_LEV_46;

    alpha_50 = (-rhoE_B0(-1) + rhoE_B0(0))*AVG_0_0_LEV_57 + (-rhoN_B0(-1) + rhoN_B0(0))*AVG_0_0_LEV_52 + (-rhoO_B0(-1) +
      rhoO_B0(0))*AVG_0_0_LEV_50 + (-rhoN2_B0(-1) + rhoN2_B0(0))*AVG_0_0_LEV_53 + (-rhoNO_B0(-1) +
      rhoNO_B0(0))*AVG_0_0_LEV_54 + (-rhoO2_B0(-1) + rhoO2_B0(0))*AVG_0_0_LEV_51;

    alpha_60 = (-rhoE_B0(-1) + rhoE_B0(0))*AVG_0_0_LEV_67 + (-rhoN_B0(-1) + rhoN_B0(0))*AVG_0_0_LEV_62 + (-rhoO_B0(-1) +
      rhoO_B0(0))*AVG_0_0_LEV_60 + (-rhoN2_B0(-1) + rhoN2_B0(0))*AVG_0_0_LEV_63 + (-rhoNO_B0(-1) +
      rhoNO_B0(0))*AVG_0_0_LEV_64 + (-rhoO2_B0(-1) + rhoO2_B0(0))*AVG_0_0_LEV_61 + (-rhou0_B0(-1) +
      rhou0_B0(0))*AVG_0_0_LEV_65;

    alpha_70 = (-rhoE_B0(-1) + rhoE_B0(0))*AVG_0_0_LEV_77 + (-rhoN_B0(-1) + rhoN_B0(0))*AVG_0_0_LEV_72 + (-rhoO_B0(-1) +
      rhoO_B0(0))*AVG_0_0_LEV_70 + (-rhoN2_B0(-1) + rhoN2_B0(0))*AVG_0_0_LEV_73 + (-rhoNO_B0(-1) +
      rhoNO_B0(0))*AVG_0_0_LEV_74 + (-rhoO2_B0(-1) + rhoO2_B0(0))*AVG_0_0_LEV_71 + (-rhou0_B0(-1) +
      rhou0_B0(0))*AVG_0_0_LEV_75;

   AVG_0_rhoN = ((1.0/2.0))*(rhoN_B0(0) + rhoN_B0(1));

   AVG_0_rhoO = ((1.0/2.0))*(rhoO_B0(0) + rhoO_B0(1));

   AVG_0_u0 = ((1.0/2.0))*(u0_B0(0) + u0_B0(1));

   AVG_0_rhoNO = ((1.0/2.0))*(rhoNO_B0(0) + rhoNO_B0(1));

   AVG_0_gamaf = ((1.0/2.0))*(gamaf_B0(0) + gamaf_B0(1));

   AVG_0_rhoO2 = ((1.0/2.0))*(rhoO2_B0(0) + rhoO2_B0(1));

   AVG_0_af = ((1.0/2.0))*(af_B0(0) + af_B0(1));

   AVG_0_rhoN2 = ((1.0/2.0))*(rhoN2_B0(0) + rhoN2_B0(1));

   inv_AVG_a = 1.0/(AVG_0_a);

   inv_AVG_rho = 1.0/(AVG_0_rho);

   AVG_0_0_LEV_00 = AVG_0_rhoO2/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)*AVG_0_gamaf);

    AVG_0_0_LEV_01 = -(-AVG_0_rhoO2 + AVG_0_gamaf*AVG_0_rhoN + AVG_0_gamaf*AVG_0_rhoN2 + AVG_0_gamaf*AVG_0_rhoNO +
      AVG_0_gamaf*AVG_0_rhoO + AVG_0_gamaf*AVG_0_rhoO2)/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO +
      AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_02 = AVG_0_rhoO2/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_03 = AVG_0_rhoO2/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_04 = AVG_0_rhoO2/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_07 = 2*AVG_0_rhoO2/(AVG_0_af*AVG_0_gamaf);

   AVG_0_0_LEV_10 = AVG_0_rhoNO/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_11 = AVG_0_rhoNO/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)*AVG_0_gamaf);

    AVG_0_0_LEV_12 = -(-AVG_0_rhoNO + AVG_0_gamaf*AVG_0_rhoN + AVG_0_gamaf*AVG_0_rhoN2 + AVG_0_gamaf*AVG_0_rhoNO +
      AVG_0_gamaf*AVG_0_rhoO + AVG_0_gamaf*AVG_0_rhoO2)/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO +
      AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_13 = AVG_0_rhoNO/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_14 = AVG_0_rhoNO/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_17 = 2*AVG_0_rhoNO/(AVG_0_af*AVG_0_gamaf);

   AVG_0_0_LEV_20 = AVG_0_rhoN2/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_21 = AVG_0_rhoN2/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_22 = AVG_0_rhoN2/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)*AVG_0_gamaf);

    AVG_0_0_LEV_23 = -(-AVG_0_rhoN2 + AVG_0_gamaf*AVG_0_rhoN + AVG_0_gamaf*AVG_0_rhoN2 + AVG_0_gamaf*AVG_0_rhoNO +
      AVG_0_gamaf*AVG_0_rhoO + AVG_0_gamaf*AVG_0_rhoO2)/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO +
      AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_24 = AVG_0_rhoN2/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_27 = 2*AVG_0_rhoN2/(AVG_0_af*AVG_0_gamaf);

   AVG_0_0_LEV_30 = AVG_0_rhoN/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_31 = AVG_0_rhoN/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_32 = AVG_0_rhoN/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_33 = AVG_0_rhoN/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)*AVG_0_gamaf);

    AVG_0_0_LEV_34 = -(-AVG_0_rhoN + AVG_0_gamaf*AVG_0_rhoN + AVG_0_gamaf*AVG_0_rhoN2 + AVG_0_gamaf*AVG_0_rhoNO +
      AVG_0_gamaf*AVG_0_rhoO + AVG_0_gamaf*AVG_0_rhoO2)/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO +
      AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_37 = 2*AVG_0_rhoN/(AVG_0_af*AVG_0_gamaf);

   AVG_0_0_LEV_46 = 1;

   AVG_0_0_LEV_50 = (-1 + AVG_0_gamaf)/AVG_0_gamaf;

   AVG_0_0_LEV_51 = (-1 + AVG_0_gamaf)/AVG_0_gamaf;

   AVG_0_0_LEV_52 = (-1 + AVG_0_gamaf)/AVG_0_gamaf;

   AVG_0_0_LEV_53 = (-1 + AVG_0_gamaf)/AVG_0_gamaf;

   AVG_0_0_LEV_54 = (-1 + AVG_0_gamaf)/AVG_0_gamaf;

   AVG_0_0_LEV_57 = -2*(AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)/(AVG_0_af*AVG_0_gamaf);

    AVG_0_0_LEV_60 = ((1.0/2.0))*AVG_0_rhoO/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO +
      AVG_0_rhoO2)*AVG_0_gamaf);

    AVG_0_0_LEV_61 = ((1.0/2.0))*AVG_0_rhoO/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO +
      AVG_0_rhoO2)*AVG_0_gamaf);

    AVG_0_0_LEV_62 = ((1.0/2.0))*AVG_0_rhoO/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO +
      AVG_0_rhoO2)*AVG_0_gamaf);

    AVG_0_0_LEV_63 = ((1.0/2.0))*AVG_0_rhoO/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO +
      AVG_0_rhoO2)*AVG_0_gamaf);

    AVG_0_0_LEV_64 = ((1.0/2.0))*AVG_0_rhoO/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO +
      AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_65 = ((1.0/2.0))*AVG_0_rhoO/AVG_0_af;

   AVG_0_0_LEV_67 = AVG_0_rhoO/(AVG_0_af*AVG_0_gamaf);

    AVG_0_0_LEV_70 = ((1.0/2.0))*AVG_0_rhoO/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO +
      AVG_0_rhoO2)*AVG_0_gamaf);

    AVG_0_0_LEV_71 = ((1.0/2.0))*AVG_0_rhoO/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO +
      AVG_0_rhoO2)*AVG_0_gamaf);

    AVG_0_0_LEV_72 = ((1.0/2.0))*AVG_0_rhoO/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO +
      AVG_0_rhoO2)*AVG_0_gamaf);

    AVG_0_0_LEV_73 = ((1.0/2.0))*AVG_0_rhoO/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO +
      AVG_0_rhoO2)*AVG_0_gamaf);

    AVG_0_0_LEV_74 = ((1.0/2.0))*AVG_0_rhoO/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO +
      AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_75 = -(1.0/2.0)*AVG_0_rhoO/AVG_0_af;

   AVG_0_0_LEV_77 = AVG_0_rhoO/(AVG_0_af*AVG_0_gamaf);

    alpha_01 = (-rhoE_B0(0) + rhoE_B0(1))*AVG_0_0_LEV_07 + (-rhoN_B0(0) + rhoN_B0(1))*AVG_0_0_LEV_02 + (-rhoO_B0(0) +
      rhoO_B0(1))*AVG_0_0_LEV_00 + (-rhoN2_B0(0) + rhoN2_B0(1))*AVG_0_0_LEV_03 + (-rhoNO_B0(0) +
      rhoNO_B0(1))*AVG_0_0_LEV_04 + (-rhoO2_B0(0) + rhoO2_B0(1))*AVG_0_0_LEV_01;

    alpha_11 = (-rhoE_B0(0) + rhoE_B0(1))*AVG_0_0_LEV_17 + (-rhoN_B0(0) + rhoN_B0(1))*AVG_0_0_LEV_12 + (-rhoO_B0(0) +
      rhoO_B0(1))*AVG_0_0_LEV_10 + (-rhoN2_B0(0) + rhoN2_B0(1))*AVG_0_0_LEV_13 + (-rhoNO_B0(0) +
      rhoNO_B0(1))*AVG_0_0_LEV_14 + (-rhoO2_B0(0) + rhoO2_B0(1))*AVG_0_0_LEV_11;

    alpha_21 = (-rhoE_B0(0) + rhoE_B0(1))*AVG_0_0_LEV_27 + (-rhoN_B0(0) + rhoN_B0(1))*AVG_0_0_LEV_22 + (-rhoO_B0(0) +
      rhoO_B0(1))*AVG_0_0_LEV_20 + (-rhoN2_B0(0) + rhoN2_B0(1))*AVG_0_0_LEV_23 + (-rhoNO_B0(0) +
      rhoNO_B0(1))*AVG_0_0_LEV_24 + (-rhoO2_B0(0) + rhoO2_B0(1))*AVG_0_0_LEV_21;

    alpha_31 = (-rhoE_B0(0) + rhoE_B0(1))*AVG_0_0_LEV_37 + (-rhoN_B0(0) + rhoN_B0(1))*AVG_0_0_LEV_32 + (-rhoO_B0(0) +
      rhoO_B0(1))*AVG_0_0_LEV_30 + (-rhoN2_B0(0) + rhoN2_B0(1))*AVG_0_0_LEV_33 + (-rhoNO_B0(0) +
      rhoNO_B0(1))*AVG_0_0_LEV_34 + (-rhoO2_B0(0) + rhoO2_B0(1))*AVG_0_0_LEV_31;

   alpha_41 = (-rhoev_B0(0) + rhoev_B0(1))*AVG_0_0_LEV_46;

    alpha_51 = (-rhoE_B0(0) + rhoE_B0(1))*AVG_0_0_LEV_57 + (-rhoN_B0(0) + rhoN_B0(1))*AVG_0_0_LEV_52 + (-rhoO_B0(0) +
      rhoO_B0(1))*AVG_0_0_LEV_50 + (-rhoN2_B0(0) + rhoN2_B0(1))*AVG_0_0_LEV_53 + (-rhoNO_B0(0) +
      rhoNO_B0(1))*AVG_0_0_LEV_54 + (-rhoO2_B0(0) + rhoO2_B0(1))*AVG_0_0_LEV_51;

    alpha_61 = (-rhoE_B0(0) + rhoE_B0(1))*AVG_0_0_LEV_67 + (-rhoN_B0(0) + rhoN_B0(1))*AVG_0_0_LEV_62 + (-rhoO_B0(0) +
      rhoO_B0(1))*AVG_0_0_LEV_60 + (-rhoN2_B0(0) + rhoN2_B0(1))*AVG_0_0_LEV_63 + (-rhoNO_B0(0) +
      rhoNO_B0(1))*AVG_0_0_LEV_64 + (-rhoO2_B0(0) + rhoO2_B0(1))*AVG_0_0_LEV_61 + (-rhou0_B0(0) +
      rhou0_B0(1))*AVG_0_0_LEV_65;

    alpha_71 = (-rhoE_B0(0) + rhoE_B0(1))*AVG_0_0_LEV_77 + (-rhoN_B0(0) + rhoN_B0(1))*AVG_0_0_LEV_72 + (-rhoO_B0(0) +
      rhoO_B0(1))*AVG_0_0_LEV_70 + (-rhoN2_B0(0) + rhoN2_B0(1))*AVG_0_0_LEV_73 + (-rhoNO_B0(0) +
      rhoNO_B0(1))*AVG_0_0_LEV_74 + (-rhoO2_B0(0) + rhoO2_B0(1))*AVG_0_0_LEV_71 + (-rhou0_B0(0) +
      rhou0_B0(1))*AVG_0_0_LEV_75;

   ws_lambda_00 = AVG_0_u0;

   ws_lambda_11 = AVG_0_u0;

   ws_lambda_22 = AVG_0_u0;

   ws_lambda_33 = AVG_0_u0;

   ws_lambda_44 = AVG_0_u0;

   ws_lambda_55 = AVG_0_u0;

   ws_lambda_66 = AVG_0_af + AVG_0_u0;

   ws_lambda_77 = -AVG_0_af + AVG_0_u0;

   AVG_0_REV_00 = 1;

   AVG_0_REV_01 = 1;

   AVG_0_REV_02 = 1;

   AVG_0_REV_03 = 1;

   AVG_0_REV_05 = 1;

   AVG_0_REV_06 = 1;

   AVG_0_REV_07 = 1;

   AVG_0_REV_10 = -1;

   AVG_0_REV_16 = AVG_0_rhoO2/AVG_0_rhoO;

   AVG_0_REV_17 = AVG_0_rhoO2/AVG_0_rhoO;

   AVG_0_REV_21 = -1;

   AVG_0_REV_26 = AVG_0_rhoNO/AVG_0_rhoO;

   AVG_0_REV_27 = AVG_0_rhoNO/AVG_0_rhoO;

   AVG_0_REV_32 = -1;

   AVG_0_REV_36 = AVG_0_rhoN2/AVG_0_rhoO;

   AVG_0_REV_37 = AVG_0_rhoN2/AVG_0_rhoO;

   AVG_0_REV_43 = -1;

   AVG_0_REV_46 = AVG_0_rhoN/AVG_0_rhoO;

   AVG_0_REV_47 = AVG_0_rhoN/AVG_0_rhoO;

   AVG_0_REV_56 = AVG_0_af/AVG_0_rhoO;

   AVG_0_REV_57 = -AVG_0_af/AVG_0_rhoO;

   AVG_0_REV_64 = 1;

   AVG_0_REV_75 = -(1.0/2.0)*AVG_0_af/(AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2);

   AVG_0_REV_76 = ((1.0/2.0))*(-1 + AVG_0_gamaf)*AVG_0_af/AVG_0_rhoO;

   AVG_0_REV_77 = ((1.0/2.0))*(-1 + AVG_0_gamaf)*AVG_0_af/AVG_0_rhoO;

   AVG_0_rhoN = ((1.0/2.0))*(rhoN_B0(1) + rhoN_B0(2));

   AVG_0_rhoO = ((1.0/2.0))*(rhoO_B0(1) + rhoO_B0(2));

   AVG_0_u0 = ((1.0/2.0))*(u0_B0(1) + u0_B0(2));

   AVG_0_rhoNO = ((1.0/2.0))*(rhoNO_B0(1) + rhoNO_B0(2));

   AVG_0_gamaf = ((1.0/2.0))*(gamaf_B0(1) + gamaf_B0(2));

   AVG_0_rhoO2 = ((1.0/2.0))*(rhoO2_B0(1) + rhoO2_B0(2));

   AVG_0_af = ((1.0/2.0))*(af_B0(1) + af_B0(2));

   AVG_0_rhoN2 = ((1.0/2.0))*(rhoN2_B0(1) + rhoN2_B0(2));

   inv_AVG_a = 1.0/(AVG_0_a);

   inv_AVG_rho = 1.0/(AVG_0_rho);

   AVG_0_0_LEV_00 = AVG_0_rhoO2/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)*AVG_0_gamaf);

    AVG_0_0_LEV_01 = -(-AVG_0_rhoO2 + AVG_0_gamaf*AVG_0_rhoN + AVG_0_gamaf*AVG_0_rhoN2 + AVG_0_gamaf*AVG_0_rhoNO +
      AVG_0_gamaf*AVG_0_rhoO + AVG_0_gamaf*AVG_0_rhoO2)/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO +
      AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_02 = AVG_0_rhoO2/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_03 = AVG_0_rhoO2/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_04 = AVG_0_rhoO2/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_07 = 2*AVG_0_rhoO2/(AVG_0_af*AVG_0_gamaf);

   AVG_0_0_LEV_10 = AVG_0_rhoNO/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_11 = AVG_0_rhoNO/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)*AVG_0_gamaf);

    AVG_0_0_LEV_12 = -(-AVG_0_rhoNO + AVG_0_gamaf*AVG_0_rhoN + AVG_0_gamaf*AVG_0_rhoN2 + AVG_0_gamaf*AVG_0_rhoNO +
      AVG_0_gamaf*AVG_0_rhoO + AVG_0_gamaf*AVG_0_rhoO2)/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO +
      AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_13 = AVG_0_rhoNO/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_14 = AVG_0_rhoNO/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_17 = 2*AVG_0_rhoNO/(AVG_0_af*AVG_0_gamaf);

   AVG_0_0_LEV_20 = AVG_0_rhoN2/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_21 = AVG_0_rhoN2/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_22 = AVG_0_rhoN2/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)*AVG_0_gamaf);

    AVG_0_0_LEV_23 = -(-AVG_0_rhoN2 + AVG_0_gamaf*AVG_0_rhoN + AVG_0_gamaf*AVG_0_rhoN2 + AVG_0_gamaf*AVG_0_rhoNO +
      AVG_0_gamaf*AVG_0_rhoO + AVG_0_gamaf*AVG_0_rhoO2)/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO +
      AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_24 = AVG_0_rhoN2/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_27 = 2*AVG_0_rhoN2/(AVG_0_af*AVG_0_gamaf);

   AVG_0_0_LEV_30 = AVG_0_rhoN/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_31 = AVG_0_rhoN/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_32 = AVG_0_rhoN/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_33 = AVG_0_rhoN/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)*AVG_0_gamaf);

    AVG_0_0_LEV_34 = -(-AVG_0_rhoN + AVG_0_gamaf*AVG_0_rhoN + AVG_0_gamaf*AVG_0_rhoN2 + AVG_0_gamaf*AVG_0_rhoNO +
      AVG_0_gamaf*AVG_0_rhoO + AVG_0_gamaf*AVG_0_rhoO2)/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO +
      AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_37 = 2*AVG_0_rhoN/(AVG_0_af*AVG_0_gamaf);

   AVG_0_0_LEV_46 = 1;

   AVG_0_0_LEV_50 = (-1 + AVG_0_gamaf)/AVG_0_gamaf;

   AVG_0_0_LEV_51 = (-1 + AVG_0_gamaf)/AVG_0_gamaf;

   AVG_0_0_LEV_52 = (-1 + AVG_0_gamaf)/AVG_0_gamaf;

   AVG_0_0_LEV_53 = (-1 + AVG_0_gamaf)/AVG_0_gamaf;

   AVG_0_0_LEV_54 = (-1 + AVG_0_gamaf)/AVG_0_gamaf;

   AVG_0_0_LEV_57 = -2*(AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO + AVG_0_rhoO2)/(AVG_0_af*AVG_0_gamaf);

    AVG_0_0_LEV_60 = ((1.0/2.0))*AVG_0_rhoO/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO +
      AVG_0_rhoO2)*AVG_0_gamaf);

    AVG_0_0_LEV_61 = ((1.0/2.0))*AVG_0_rhoO/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO +
      AVG_0_rhoO2)*AVG_0_gamaf);

    AVG_0_0_LEV_62 = ((1.0/2.0))*AVG_0_rhoO/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO +
      AVG_0_rhoO2)*AVG_0_gamaf);

    AVG_0_0_LEV_63 = ((1.0/2.0))*AVG_0_rhoO/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO +
      AVG_0_rhoO2)*AVG_0_gamaf);

    AVG_0_0_LEV_64 = ((1.0/2.0))*AVG_0_rhoO/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO +
      AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_65 = ((1.0/2.0))*AVG_0_rhoO/AVG_0_af;

   AVG_0_0_LEV_67 = AVG_0_rhoO/(AVG_0_af*AVG_0_gamaf);

    AVG_0_0_LEV_70 = ((1.0/2.0))*AVG_0_rhoO/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO +
      AVG_0_rhoO2)*AVG_0_gamaf);

    AVG_0_0_LEV_71 = ((1.0/2.0))*AVG_0_rhoO/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO +
      AVG_0_rhoO2)*AVG_0_gamaf);

    AVG_0_0_LEV_72 = ((1.0/2.0))*AVG_0_rhoO/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO +
      AVG_0_rhoO2)*AVG_0_gamaf);

    AVG_0_0_LEV_73 = ((1.0/2.0))*AVG_0_rhoO/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO +
      AVG_0_rhoO2)*AVG_0_gamaf);

    AVG_0_0_LEV_74 = ((1.0/2.0))*AVG_0_rhoO/((AVG_0_rhoN + AVG_0_rhoN2 + AVG_0_rhoNO + AVG_0_rhoO +
      AVG_0_rhoO2)*AVG_0_gamaf);

   AVG_0_0_LEV_75 = -(1.0/2.0)*AVG_0_rhoO/AVG_0_af;

   AVG_0_0_LEV_77 = AVG_0_rhoO/(AVG_0_af*AVG_0_gamaf);

    alpha_02 = (-rhoE_B0(1) + rhoE_B0(2))*AVG_0_0_LEV_07 + (-rhoN_B0(1) + rhoN_B0(2))*AVG_0_0_LEV_02 + (-rhoO_B0(1) +
      rhoO_B0(2))*AVG_0_0_LEV_00 + (-rhoN2_B0(1) + rhoN2_B0(2))*AVG_0_0_LEV_03 + (-rhoNO_B0(1) +
      rhoNO_B0(2))*AVG_0_0_LEV_04 + (-rhoO2_B0(1) + rhoO2_B0(2))*AVG_0_0_LEV_01;

    alpha_12 = (-rhoE_B0(1) + rhoE_B0(2))*AVG_0_0_LEV_17 + (-rhoN_B0(1) + rhoN_B0(2))*AVG_0_0_LEV_12 + (-rhoO_B0(1) +
      rhoO_B0(2))*AVG_0_0_LEV_10 + (-rhoN2_B0(1) + rhoN2_B0(2))*AVG_0_0_LEV_13 + (-rhoNO_B0(1) +
      rhoNO_B0(2))*AVG_0_0_LEV_14 + (-rhoO2_B0(1) + rhoO2_B0(2))*AVG_0_0_LEV_11;

    alpha_22 = (-rhoE_B0(1) + rhoE_B0(2))*AVG_0_0_LEV_27 + (-rhoN_B0(1) + rhoN_B0(2))*AVG_0_0_LEV_22 + (-rhoO_B0(1) +
      rhoO_B0(2))*AVG_0_0_LEV_20 + (-rhoN2_B0(1) + rhoN2_B0(2))*AVG_0_0_LEV_23 + (-rhoNO_B0(1) +
      rhoNO_B0(2))*AVG_0_0_LEV_24 + (-rhoO2_B0(1) + rhoO2_B0(2))*AVG_0_0_LEV_21;

    alpha_32 = (-rhoE_B0(1) + rhoE_B0(2))*AVG_0_0_LEV_37 + (-rhoN_B0(1) + rhoN_B0(2))*AVG_0_0_LEV_32 + (-rhoO_B0(1) +
      rhoO_B0(2))*AVG_0_0_LEV_30 + (-rhoN2_B0(1) + rhoN2_B0(2))*AVG_0_0_LEV_33 + (-rhoNO_B0(1) +
      rhoNO_B0(2))*AVG_0_0_LEV_34 + (-rhoO2_B0(1) + rhoO2_B0(2))*AVG_0_0_LEV_31;

   alpha_42 = (-rhoev_B0(1) + rhoev_B0(2))*AVG_0_0_LEV_46;

    alpha_52 = (-rhoE_B0(1) + rhoE_B0(2))*AVG_0_0_LEV_57 + (-rhoN_B0(1) + rhoN_B0(2))*AVG_0_0_LEV_52 + (-rhoO_B0(1) +
      rhoO_B0(2))*AVG_0_0_LEV_50 + (-rhoN2_B0(1) + rhoN2_B0(2))*AVG_0_0_LEV_53 + (-rhoNO_B0(1) +
      rhoNO_B0(2))*AVG_0_0_LEV_54 + (-rhoO2_B0(1) + rhoO2_B0(2))*AVG_0_0_LEV_51;

    alpha_62 = (-rhoE_B0(1) + rhoE_B0(2))*AVG_0_0_LEV_67 + (-rhoN_B0(1) + rhoN_B0(2))*AVG_0_0_LEV_62 + (-rhoO_B0(1) +
      rhoO_B0(2))*AVG_0_0_LEV_60 + (-rhoN2_B0(1) + rhoN2_B0(2))*AVG_0_0_LEV_63 + (-rhoNO_B0(1) +
      rhoNO_B0(2))*AVG_0_0_LEV_64 + (-rhoO2_B0(1) + rhoO2_B0(2))*AVG_0_0_LEV_61 + (-rhou0_B0(1) +
      rhou0_B0(2))*AVG_0_0_LEV_65;

    alpha_72 = (-rhoE_B0(1) + rhoE_B0(2))*AVG_0_0_LEV_77 + (-rhoN_B0(1) + rhoN_B0(2))*AVG_0_0_LEV_72 + (-rhoO_B0(1) +
      rhoO_B0(2))*AVG_0_0_LEV_70 + (-rhoN2_B0(1) + rhoN2_B0(2))*AVG_0_0_LEV_73 + (-rhoNO_B0(1) +
      rhoNO_B0(2))*AVG_0_0_LEV_74 + (-rhoO2_B0(1) + rhoO2_B0(2))*AVG_0_0_LEV_71 + (-rhou0_B0(1) +
      rhou0_B0(2))*AVG_0_0_LEV_75;

    sigma_0_0 = ((fabs(ws_lambda_00) >= delta_TVD) ? (
   fabs(ws_lambda_00)
)
: (

      ((1.0/2.0))*(1.0/(invdelta_TVD*invdelta_TVD) + (ws_lambda_00*ws_lambda_00))*invdelta_TVD
));

    sigma_0_1 = ((fabs(ws_lambda_11) >= delta_TVD) ? (
   fabs(ws_lambda_11)
)
: (

      ((1.0/2.0))*(1.0/(invdelta_TVD*invdelta_TVD) + (ws_lambda_11*ws_lambda_11))*invdelta_TVD
));

    sigma_0_2 = ((fabs(ws_lambda_22) >= delta_TVD) ? (
   fabs(ws_lambda_22)
)
: (

      ((1.0/2.0))*(1.0/(invdelta_TVD*invdelta_TVD) + (ws_lambda_22*ws_lambda_22))*invdelta_TVD
));

    sigma_0_3 = ((fabs(ws_lambda_33) >= delta_TVD) ? (
   fabs(ws_lambda_33)
)
: (

      ((1.0/2.0))*(1.0/(invdelta_TVD*invdelta_TVD) + (ws_lambda_33*ws_lambda_33))*invdelta_TVD
));

    sigma_0_4 = ((fabs(ws_lambda_44) >= delta_TVD) ? (
   fabs(ws_lambda_44)
)
: (

      ((1.0/2.0))*(1.0/(invdelta_TVD*invdelta_TVD) + (ws_lambda_44*ws_lambda_44))*invdelta_TVD
));

    sigma_0_5 = ((fabs(ws_lambda_55) >= delta_TVD) ? (
   fabs(ws_lambda_55)
)
: (

      ((1.0/2.0))*(1.0/(invdelta_TVD*invdelta_TVD) + (ws_lambda_55*ws_lambda_55))*invdelta_TVD
));

    sigma_0_6 = ((fabs(ws_lambda_66) >= delta_TVD) ? (
   fabs(ws_lambda_66)
)
: (

      ((1.0/2.0))*(1.0/(invdelta_TVD*invdelta_TVD) + (ws_lambda_66*ws_lambda_66))*invdelta_TVD
));

    sigma_0_7 = ((fabs(ws_lambda_77) >= delta_TVD) ? (
   fabs(ws_lambda_77)
)
: (

      ((1.0/2.0))*(1.0/(invdelta_TVD*invdelta_TVD) + (ws_lambda_77*ws_lambda_77))*invdelta_TVD
));

   S = (alpha_01 > 0) ? 1 : ((alpha_01 < 0) ? -1 : 0);

   t1 = fmax(0.0, fmin(S*alpha_00, 2*fabs(alpha_01)));

   t2 = fmin(fabs(alpha_01), 2*S*alpha_00);

   g_00 = S*fmax(t1, t2);

   S = (alpha_11 > 0) ? 1 : ((alpha_11 < 0) ? -1 : 0);

   t1 = fmax(0.0, fmin(S*alpha_10, 2*fabs(alpha_11)));

   t2 = fmin(fabs(alpha_11), 2*S*alpha_10);

   g_10 = S*fmax(t1, t2);

   S = (alpha_21 > 0) ? 1 : ((alpha_21 < 0) ? -1 : 0);

   t1 = fmax(0.0, fmin(S*alpha_20, 2*fabs(alpha_21)));

   t2 = fmin(fabs(alpha_21), 2*S*alpha_20);

   g_20 = S*fmax(t1, t2);

   S = (alpha_31 > 0) ? 1 : ((alpha_31 < 0) ? -1 : 0);

   t1 = fmax(0.0, fmin(S*alpha_30, 2*fabs(alpha_31)));

   t2 = fmin(fabs(alpha_31), 2*S*alpha_30);

   g_30 = S*fmax(t1, t2);

   S = (alpha_41 > 0) ? 1 : ((alpha_41 < 0) ? -1 : 0);

   t1 = fmax(0.0, fmin(S*alpha_40, 2*fabs(alpha_41)));

   t2 = fmin(fabs(alpha_41), 2*S*alpha_40);

   g_40 = S*fmax(t1, t2);

   S = (alpha_51 > 0) ? 1 : ((alpha_51 < 0) ? -1 : 0);

   t1 = fmax(0.0, fmin(S*alpha_50, 2*fabs(alpha_51)));

   t2 = fmin(fabs(alpha_51), 2*S*alpha_50);

   g_50 = S*fmax(t1, t2);

   S = (alpha_61 > 0) ? 1 : ((alpha_61 < 0) ? -1 : 0);

   t1 = fmax(0.0, fmin(S*alpha_60, 2*fabs(alpha_61)));

   t2 = fmin(fabs(alpha_61), 2*S*alpha_60);

   g_60 = S*fmax(t1, t2);

   S = (alpha_71 > 0) ? 1 : ((alpha_71 < 0) ? -1 : 0);

   t1 = fmax(0.0, fmin(S*alpha_70, 2*fabs(alpha_71)));

   t2 = fmin(fabs(alpha_71), 2*S*alpha_70);

   g_70 = S*fmax(t1, t2);

   S = (alpha_02 > 0) ? 1 : ((alpha_02 < 0) ? -1 : 0);

   t1 = fmax(0.0, fmin(S*alpha_01, 2*fabs(alpha_02)));

   t2 = fmin(fabs(alpha_02), 2*S*alpha_01);

   g_01 = S*fmax(t1, t2);

   S = (alpha_12 > 0) ? 1 : ((alpha_12 < 0) ? -1 : 0);

   t1 = fmax(0.0, fmin(S*alpha_11, 2*fabs(alpha_12)));

   t2 = fmin(fabs(alpha_12), 2*S*alpha_11);

   g_11 = S*fmax(t1, t2);

   S = (alpha_22 > 0) ? 1 : ((alpha_22 < 0) ? -1 : 0);

   t1 = fmax(0.0, fmin(S*alpha_21, 2*fabs(alpha_22)));

   t2 = fmin(fabs(alpha_22), 2*S*alpha_21);

   g_21 = S*fmax(t1, t2);

   S = (alpha_32 > 0) ? 1 : ((alpha_32 < 0) ? -1 : 0);

   t1 = fmax(0.0, fmin(S*alpha_31, 2*fabs(alpha_32)));

   t2 = fmin(fabs(alpha_32), 2*S*alpha_31);

   g_31 = S*fmax(t1, t2);

   S = (alpha_42 > 0) ? 1 : ((alpha_42 < 0) ? -1 : 0);

   t1 = fmax(0.0, fmin(S*alpha_41, 2*fabs(alpha_42)));

   t2 = fmin(fabs(alpha_42), 2*S*alpha_41);

   g_41 = S*fmax(t1, t2);

   S = (alpha_52 > 0) ? 1 : ((alpha_52 < 0) ? -1 : 0);

   t1 = fmax(0.0, fmin(S*alpha_51, 2*fabs(alpha_52)));

   t2 = fmin(fabs(alpha_52), 2*S*alpha_51);

   g_51 = S*fmax(t1, t2);

   S = (alpha_62 > 0) ? 1 : ((alpha_62 < 0) ? -1 : 0);

   t1 = fmax(0.0, fmin(S*alpha_61, 2*fabs(alpha_62)));

   t2 = fmin(fabs(alpha_62), 2*S*alpha_61);

   g_61 = S*fmax(t1, t2);

   S = (alpha_72 > 0) ? 1 : ((alpha_72 < 0) ? -1 : 0);

   t1 = fmax(0.0, fmin(S*alpha_71, 2*fabs(alpha_72)));

   t2 = fmin(fabs(alpha_72), 2*S*alpha_71);

   g_71 = S*fmax(t1, t2);

   gamma_0 = ((alpha_01 == 0) ? (
   0
)
: (
   (-g_00 + g_01)*alpha_01*sigma_0_0/((alpha_01*alpha_01) + eps_TVD)
));

   gamma_1 = ((alpha_11 == 0) ? (
   0
)
: (
   (-g_10 + g_11)*alpha_11*sigma_0_1/((alpha_11*alpha_11) + eps_TVD)
));

   gamma_2 = ((alpha_21 == 0) ? (
   0
)
: (
   (-g_20 + g_21)*alpha_21*sigma_0_2/((alpha_21*alpha_21) + eps_TVD)
));

   gamma_3 = ((alpha_31 == 0) ? (
   0
)
: (
   (-g_30 + g_31)*alpha_31*sigma_0_3/((alpha_31*alpha_31) + eps_TVD)
));

   gamma_4 = ((alpha_41 == 0) ? (
   0
)
: (
   (-g_40 + g_41)*alpha_41*sigma_0_4/((alpha_41*alpha_41) + eps_TVD)
));

   gamma_5 = ((alpha_51 == 0) ? (
   0
)
: (
   (-g_50 + g_51)*alpha_51*sigma_0_5/((alpha_51*alpha_51) + eps_TVD)
));

   gamma_6 = ((alpha_61 == 0) ? (
   0
)
: (
   (-g_60 + g_61)*alpha_61*sigma_0_6/((alpha_61*alpha_61) + eps_TVD)
));

   gamma_7 = ((alpha_71 == 0) ? (
   0
)
: (
   (-g_70 + g_71)*alpha_71*sigma_0_7/((alpha_71*alpha_71) + eps_TVD)
));

    sigma_1_0 = ((fabs(gamma_0) >= delta_TVD) ? (
   fabs(gamma_0)
)
: (
   ((1.0/2.0))*(1.0/(invdelta_TVD*invdelta_TVD)
      + (gamma_0*gamma_0))*invdelta_TVD
));

    sigma_1_1 = ((fabs(gamma_1) >= delta_TVD) ? (
   fabs(gamma_1)
)
: (
   ((1.0/2.0))*(1.0/(invdelta_TVD*invdelta_TVD)
      + (gamma_1*gamma_1))*invdelta_TVD
));

    sigma_1_2 = ((fabs(gamma_2) >= delta_TVD) ? (
   fabs(gamma_2)
)
: (
   ((1.0/2.0))*(1.0/(invdelta_TVD*invdelta_TVD)
      + (gamma_2*gamma_2))*invdelta_TVD
));

    sigma_1_3 = ((fabs(gamma_3) >= delta_TVD) ? (
   fabs(gamma_3)
)
: (
   ((1.0/2.0))*(1.0/(invdelta_TVD*invdelta_TVD)
      + (gamma_3*gamma_3))*invdelta_TVD
));

    sigma_1_4 = ((fabs(gamma_4) >= delta_TVD) ? (
   fabs(gamma_4)
)
: (
   ((1.0/2.0))*(1.0/(invdelta_TVD*invdelta_TVD)
      + (gamma_4*gamma_4))*invdelta_TVD
));

    sigma_1_5 = ((fabs(gamma_5) >= delta_TVD) ? (
   fabs(gamma_5)
)
: (
   ((1.0/2.0))*(1.0/(invdelta_TVD*invdelta_TVD)
      + (gamma_5*gamma_5))*invdelta_TVD
));

    sigma_1_6 = ((fabs(gamma_6) >= delta_TVD) ? (
   fabs(gamma_6)
)
: (
   ((1.0/2.0))*(1.0/(invdelta_TVD*invdelta_TVD)
      + (gamma_6*gamma_6))*invdelta_TVD
));

    sigma_1_7 = ((fabs(gamma_7) >= delta_TVD) ? (
   fabs(gamma_7)
)
: (
   ((1.0/2.0))*(1.0/(invdelta_TVD*invdelta_TVD)
      + (gamma_7*gamma_7))*invdelta_TVD
));

   phi_0 = -fabs(sigma_0_0 + sigma_1_0)*alpha_01 + 0.5*(g_00 + g_01)*sigma_0_0;

   phi_1 = -fabs(sigma_0_1 + sigma_1_1)*alpha_11 + 0.5*(g_10 + g_11)*sigma_0_1;

   phi_2 = -fabs(sigma_0_2 + sigma_1_2)*alpha_21 + 0.5*(g_20 + g_21)*sigma_0_2;

   phi_3 = -fabs(sigma_0_3 + sigma_1_3)*alpha_31 + 0.5*(g_30 + g_31)*sigma_0_3;

   phi_4 = -fabs(sigma_0_4 + sigma_1_4)*alpha_41 + 0.5*(g_40 + g_41)*sigma_0_4;

   phi_5 = -fabs(sigma_0_5 + sigma_1_5)*alpha_51 + 0.5*(g_50 + g_51)*sigma_0_5;

   phi_6 = -fabs(sigma_0_6 + sigma_1_6)*alpha_61 + 0.5*(g_60 + g_61)*sigma_0_6;

   phi_7 = -fabs(sigma_0_7 + sigma_1_7)*alpha_71 + 0.5*(g_70 + g_71)*sigma_0_7;

   t1 = -fabs(alpha_00) + fabs(alpha_01);

   t2 = fabs(alpha_00) + fabs(alpha_01) + eps_TVD;

   theta_hat_00 = (fabs(t1/t2)*fabs(t1/t2));

   t1 = -fabs(alpha_10) + fabs(alpha_11);

   t2 = fabs(alpha_10) + fabs(alpha_11) + eps_TVD;

   theta_hat_10 = (fabs(t1/t2)*fabs(t1/t2));

   t1 = -fabs(alpha_20) + fabs(alpha_21);

   t2 = fabs(alpha_20) + fabs(alpha_21) + eps_TVD;

   theta_hat_20 = (fabs(t1/t2)*fabs(t1/t2));

   t1 = -fabs(alpha_30) + fabs(alpha_31);

   t2 = fabs(alpha_30) + fabs(alpha_31) + eps_TVD;

   theta_hat_30 = (fabs(t1/t2)*fabs(t1/t2));

   t1 = -fabs(alpha_40) + fabs(alpha_41);

   t2 = fabs(alpha_40) + fabs(alpha_41) + eps_TVD;

   theta_hat_40 = (fabs(t1/t2)*fabs(t1/t2));

   t1 = -fabs(alpha_50) + fabs(alpha_51);

   t2 = fabs(alpha_50) + fabs(alpha_51) + eps_TVD;

   theta_hat_50 = (fabs(t1/t2)*fabs(t1/t2));

   t1 = -fabs(alpha_60) + fabs(alpha_61);

   t2 = fabs(alpha_60) + fabs(alpha_61) + eps_TVD;

   theta_hat_60 = (fabs(t1/t2)*fabs(t1/t2));

   t1 = -fabs(alpha_70) + fabs(alpha_71);

   t2 = fabs(alpha_70) + fabs(alpha_71) + eps_TVD;

   theta_hat_70 = (fabs(t1/t2)*fabs(t1/t2));

   t1 = -fabs(alpha_01) + fabs(alpha_02);

   t2 = fabs(alpha_01) + fabs(alpha_02) + eps_TVD;

   theta_hat_01 = (fabs(t1/t2)*fabs(t1/t2));

   t1 = -fabs(alpha_11) + fabs(alpha_12);

   t2 = fabs(alpha_11) + fabs(alpha_12) + eps_TVD;

   theta_hat_11 = (fabs(t1/t2)*fabs(t1/t2));

   t1 = -fabs(alpha_21) + fabs(alpha_22);

   t2 = fabs(alpha_21) + fabs(alpha_22) + eps_TVD;

   theta_hat_21 = (fabs(t1/t2)*fabs(t1/t2));

   t1 = -fabs(alpha_31) + fabs(alpha_32);

   t2 = fabs(alpha_31) + fabs(alpha_32) + eps_TVD;

   theta_hat_31 = (fabs(t1/t2)*fabs(t1/t2));

   t1 = -fabs(alpha_41) + fabs(alpha_42);

   t2 = fabs(alpha_41) + fabs(alpha_42) + eps_TVD;

   theta_hat_41 = (fabs(t1/t2)*fabs(t1/t2));

   t1 = -fabs(alpha_51) + fabs(alpha_52);

   t2 = fabs(alpha_51) + fabs(alpha_52) + eps_TVD;

   theta_hat_51 = (fabs(t1/t2)*fabs(t1/t2));

   t1 = -fabs(alpha_61) + fabs(alpha_62);

   t2 = fabs(alpha_61) + fabs(alpha_62) + eps_TVD;

   theta_hat_61 = (fabs(t1/t2)*fabs(t1/t2));

   t1 = -fabs(alpha_71) + fabs(alpha_72);

   t2 = fabs(alpha_71) + fabs(alpha_72) + eps_TVD;

   theta_hat_71 = (fabs(t1/t2)*fabs(t1/t2));

   theta_0 = fmax(theta_hat_00, theta_hat_01);

   theta_1 = fmax(theta_hat_10, theta_hat_11);

   theta_2 = fmax(theta_hat_20, theta_hat_21);

   theta_3 = fmax(theta_hat_30, theta_hat_31);

   theta_4 = fmax(theta_hat_40, theta_hat_41);

   theta_5 = fmax(theta_hat_50, theta_hat_51);

   theta_6 = fmax(theta_hat_60, theta_hat_61);

   theta_7 = fmax(theta_hat_70, theta_hat_71);

   phi_star_0 = kappa_TVD*phi_0*theta_0;

   phi_star_1 = kappa_TVD*phi_1*theta_1;

   phi_star_2 = kappa_TVD*phi_2*theta_2;

   phi_star_3 = kappa_TVD*phi_3*theta_3;

   phi_star_4 = kappa_TVD*phi_4*theta_4;

   phi_star_5 = kappa_TVD*phi_5*theta_5;

   phi_star_6 = kappa_TVD*phi_6*theta_6;

   phi_star_7 = kappa_TVD*phi_7*theta_7;

    wk0_B0(0) = 0.5*(AVG_0_REV_00*phi_star_0 + AVG_0_REV_01*phi_star_1 + AVG_0_REV_02*phi_star_2 +
      AVG_0_REV_03*phi_star_3 + AVG_0_REV_05*phi_star_5 + AVG_0_REV_06*phi_star_6 + AVG_0_REV_07*phi_star_7);

   wk1_B0(0) = 0.5*(AVG_0_REV_10*phi_star_0 + AVG_0_REV_16*phi_star_6 + AVG_0_REV_17*phi_star_7);

   wk2_B0(0) = 0.5*(AVG_0_REV_21*phi_star_1 + AVG_0_REV_26*phi_star_6 + AVG_0_REV_27*phi_star_7);

   wk3_B0(0) = 0.5*(AVG_0_REV_32*phi_star_2 + AVG_0_REV_36*phi_star_6 + AVG_0_REV_37*phi_star_7);

   wk4_B0(0) = 0.5*(AVG_0_REV_43*phi_star_3 + AVG_0_REV_46*phi_star_6 + AVG_0_REV_47*phi_star_7);

   wk5_B0(0) = 0.5*(AVG_0_REV_56*phi_star_6 + AVG_0_REV_57*phi_star_7);

   wk6_B0(0) = 0.5*AVG_0_REV_64*phi_star_4;

   wk7_B0(0) = 0.5*(AVG_0_REV_75*phi_star_5 + AVG_0_REV_76*phi_star_6 + AVG_0_REV_77*phi_star_7);

}



__global__ void ops_opensbliblock00Kernel004(
double* __restrict arg0,
double* __restrict arg1,
double* __restrict arg2,
double* __restrict arg3,
double* __restrict arg4,
double* __restrict arg5,
double* __restrict arg6,
double* __restrict arg7,
double* __restrict arg8,
double* __restrict arg9,
double* __restrict arg10,
double* __restrict arg11,
double* __restrict arg12,
double* __restrict arg13,
double* __restrict arg14,
double* __restrict arg15,
double* __restrict arg16,
double* __restrict arg17,
double* __restrict arg18,
int size0 ){


  int idx_x = blockDim.x * blockIdx.x + threadIdx.x;

  arg0 += idx_x * 1*1;
  arg1 += idx_x * 1*1;
  arg2 += idx_x * 1*1;
  arg3 += idx_x * 1*1;
  arg4 += idx_x * 1*1;
  arg5 += idx_x * 1*1;
  arg6 += idx_x * 1*1;
  arg7 += idx_x * 1*1;
  arg8 += idx_x * 1*1;
  arg9 += idx_x * 1*1;
  arg10 += idx_x * 1*1;
  arg11 += idx_x * 1*1;
  arg12 += idx_x * 1*1;
  arg13 += idx_x * 1*1;
  arg14 += idx_x * 1*1;
  arg15 += idx_x * 1*1;
  arg16 += idx_x * 1*1;
  arg17 += idx_x * 1*1;
  arg18 += idx_x * 1*1;

  if (idx_x < size0) {
    const ACC<double> argp0(arg0);
    const ACC<double> argp1(arg1);
    const ACC<double> argp2(arg2);
    const ACC<double> argp3(arg3);
    const ACC<double> argp4(arg4);
    const ACC<double> argp5(arg5);
    const ACC<double> argp6(arg6);
    const ACC<double> argp7(arg7);
    const ACC<double> argp8(arg8);
    const ACC<double> argp9(arg9);
    const ACC<double> argp10(arg10);
    ACC<double> argp11(arg11);
    ACC<double> argp12(arg12);
    ACC<double> argp13(arg13);
    ACC<double> argp14(arg14);
    ACC<double> argp15(arg15);
    ACC<double> argp16(arg16);
    ACC<double> argp17(arg17);
    ACC<double> argp18(arg18);
    opensbliblock00Kernel004_gpu(
     argp0, argp1, argp2, argp3, argp4,
     argp5, argp6, argp7, argp8, argp9,
     argp10, argp11, argp12, argp13, argp14,
     argp15, argp16, argp17, argp18);
  }

}

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel004(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11,
 ops_arg arg12, ops_arg arg13, ops_arg arg14, ops_arg arg15,
 ops_arg arg16, ops_arg arg17, ops_arg arg18) {
#else
void ops_par_loop_opensbliblock00Kernel004_execute(ops_kernel_descriptor *desc) {
  int dim = desc->dim;
  #if OPS_MPI
  ops_block block = desc->block;
  #endif
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  ops_arg arg9 = desc->args[9];
  ops_arg arg10 = desc->args[10];
  ops_arg arg11 = desc->args[11];
  ops_arg arg12 = desc->args[12];
  ops_arg arg13 = desc->args[13];
  ops_arg arg14 = desc->args[14];
  ops_arg arg15 = desc->args[15];
  ops_arg arg16 = desc->args[16];
  ops_arg arg17 = desc->args[17];
  ops_arg arg18 = desc->args[18];
  #endif

  //Timing
  double t1,t2,c1,c2;

  ops_arg args[19] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18};


  #if CHECKPOINTING && !OPS_LAZY
  if (!ops_checkpointing_before(args,19,range,30)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,30,"opensbliblock00Kernel004");
    block->instance->OPS_kernels[30].count++;
    ops_timers_core(&c1,&t1);
  }

  //compute locally allocated range for the sub-block
  int start[1];
  int end[1];

  #ifdef OPS_MPI
  int arg_idx[1];
  #endif
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<1; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 19,block, range, start, end, arg_idx) < 0) return;
  #endif

  int xdim0 = args[0].dat->size[0];
  int xdim1 = args[1].dat->size[0];
  int xdim2 = args[2].dat->size[0];
  int xdim3 = args[3].dat->size[0];
  int xdim4 = args[4].dat->size[0];
  int xdim5 = args[5].dat->size[0];
  int xdim6 = args[6].dat->size[0];
  int xdim7 = args[7].dat->size[0];
  int xdim8 = args[8].dat->size[0];
  int xdim9 = args[9].dat->size[0];
  int xdim10 = args[10].dat->size[0];
  int xdim11 = args[11].dat->size[0];
  int xdim12 = args[12].dat->size[0];
  int xdim13 = args[13].dat->size[0];
  int xdim14 = args[14].dat->size[0];
  int xdim15 = args[15].dat->size[0];
  int xdim16 = args[16].dat->size[0];
  int xdim17 = args[17].dat->size[0];
  int xdim18 = args[18].dat->size[0];

  if (xdim0 != dims_opensbliblock00Kernel004_h[0][0] || xdim1 != dims_opensbliblock00Kernel004_h[1][0] || xdim2 != dims_opensbliblock00Kernel004_h[2][0] || xdim3 != dims_opensbliblock00Kernel004_h[3][0] || xdim4 != dims_opensbliblock00Kernel004_h[4][0] || xdim5 != dims_opensbliblock00Kernel004_h[5][0] || xdim6 != dims_opensbliblock00Kernel004_h[6][0] || xdim7 != dims_opensbliblock00Kernel004_h[7][0] || xdim8 != dims_opensbliblock00Kernel004_h[8][0] || xdim9 != dims_opensbliblock00Kernel004_h[9][0] || xdim10 != dims_opensbliblock00Kernel004_h[10][0] || xdim11 != dims_opensbliblock00Kernel004_h[11][0] || xdim12 != dims_opensbliblock00Kernel004_h[12][0] || xdim13 != dims_opensbliblock00Kernel004_h[13][0] || xdim14 != dims_opensbliblock00Kernel004_h[14][0] || xdim15 != dims_opensbliblock00Kernel004_h[15][0] || xdim16 != dims_opensbliblock00Kernel004_h[16][0] || xdim17 != dims_opensbliblock00Kernel004_h[17][0] || xdim18 != dims_opensbliblock00Kernel004_h[18][0]) {
    dims_opensbliblock00Kernel004_h[0][0] = xdim0;
    dims_opensbliblock00Kernel004_h[1][0] = xdim1;
    dims_opensbliblock00Kernel004_h[2][0] = xdim2;
    dims_opensbliblock00Kernel004_h[3][0] = xdim3;
    dims_opensbliblock00Kernel004_h[4][0] = xdim4;
    dims_opensbliblock00Kernel004_h[5][0] = xdim5;
    dims_opensbliblock00Kernel004_h[6][0] = xdim6;
    dims_opensbliblock00Kernel004_h[7][0] = xdim7;
    dims_opensbliblock00Kernel004_h[8][0] = xdim8;
    dims_opensbliblock00Kernel004_h[9][0] = xdim9;
    dims_opensbliblock00Kernel004_h[10][0] = xdim10;
    dims_opensbliblock00Kernel004_h[11][0] = xdim11;
    dims_opensbliblock00Kernel004_h[12][0] = xdim12;
    dims_opensbliblock00Kernel004_h[13][0] = xdim13;
    dims_opensbliblock00Kernel004_h[14][0] = xdim14;
    dims_opensbliblock00Kernel004_h[15][0] = xdim15;
    dims_opensbliblock00Kernel004_h[16][0] = xdim16;
    dims_opensbliblock00Kernel004_h[17][0] = xdim17;
    dims_opensbliblock00Kernel004_h[18][0] = xdim18;
    hipSafeCall(block->instance->ostream(), hipMemcpyToSymbol( dims_opensbliblock00Kernel004, dims_opensbliblock00Kernel004_h, sizeof(dims_opensbliblock00Kernel004)));
  }



  int x_size = MAX(0,end[0]-start[0]);

  dim3 grid( (x_size-1)/block->instance->OPS_block_size_x+ 1, 1, 1);
  dim3 tblock(block->instance->OPS_block_size_x,1,1);



  long long int dat0 = (block->instance->OPS_soa ? args[0].dat->type_size : args[0].dat->elem_size);
  long long int dat1 = (block->instance->OPS_soa ? args[1].dat->type_size : args[1].dat->elem_size);
  long long int dat2 = (block->instance->OPS_soa ? args[2].dat->type_size : args[2].dat->elem_size);
  long long int dat3 = (block->instance->OPS_soa ? args[3].dat->type_size : args[3].dat->elem_size);
  long long int dat4 = (block->instance->OPS_soa ? args[4].dat->type_size : args[4].dat->elem_size);
  long long int dat5 = (block->instance->OPS_soa ? args[5].dat->type_size : args[5].dat->elem_size);
  long long int dat6 = (block->instance->OPS_soa ? args[6].dat->type_size : args[6].dat->elem_size);
  long long int dat7 = (block->instance->OPS_soa ? args[7].dat->type_size : args[7].dat->elem_size);
  long long int dat8 = (block->instance->OPS_soa ? args[8].dat->type_size : args[8].dat->elem_size);
  long long int dat9 = (block->instance->OPS_soa ? args[9].dat->type_size : args[9].dat->elem_size);
  long long int dat10 = (block->instance->OPS_soa ? args[10].dat->type_size : args[10].dat->elem_size);
  long long int dat11 = (block->instance->OPS_soa ? args[11].dat->type_size : args[11].dat->elem_size);
  long long int dat12 = (block->instance->OPS_soa ? args[12].dat->type_size : args[12].dat->elem_size);
  long long int dat13 = (block->instance->OPS_soa ? args[13].dat->type_size : args[13].dat->elem_size);
  long long int dat14 = (block->instance->OPS_soa ? args[14].dat->type_size : args[14].dat->elem_size);
  long long int dat15 = (block->instance->OPS_soa ? args[15].dat->type_size : args[15].dat->elem_size);
  long long int dat16 = (block->instance->OPS_soa ? args[16].dat->type_size : args[16].dat->elem_size);
  long long int dat17 = (block->instance->OPS_soa ? args[17].dat->type_size : args[17].dat->elem_size);
  long long int dat18 = (block->instance->OPS_soa ? args[18].dat->type_size : args[18].dat->elem_size);

  char *p_a[19];

  //set up initial pointers
  long long int base0 = args[0].dat->base_offset + 
           dat0 * 1 * (start[0] * args[0].stencil->stride[0]);
  p_a[0] = (char *)args[0].data_d + base0;

  long long int base1 = args[1].dat->base_offset + 
           dat1 * 1 * (start[0] * args[1].stencil->stride[0]);
  p_a[1] = (char *)args[1].data_d + base1;

  long long int base2 = args[2].dat->base_offset + 
           dat2 * 1 * (start[0] * args[2].stencil->stride[0]);
  p_a[2] = (char *)args[2].data_d + base2;

  long long int base3 = args[3].dat->base_offset + 
           dat3 * 1 * (start[0] * args[3].stencil->stride[0]);
  p_a[3] = (char *)args[3].data_d + base3;

  long long int base4 = args[4].dat->base_offset + 
           dat4 * 1 * (start[0] * args[4].stencil->stride[0]);
  p_a[4] = (char *)args[4].data_d + base4;

  long long int base5 = args[5].dat->base_offset + 
           dat5 * 1 * (start[0] * args[5].stencil->stride[0]);
  p_a[5] = (char *)args[5].data_d + base5;

  long long int base6 = args[6].dat->base_offset + 
           dat6 * 1 * (start[0] * args[6].stencil->stride[0]);
  p_a[6] = (char *)args[6].data_d + base6;

  long long int base7 = args[7].dat->base_offset + 
           dat7 * 1 * (start[0] * args[7].stencil->stride[0]);
  p_a[7] = (char *)args[7].data_d + base7;

  long long int base8 = args[8].dat->base_offset + 
           dat8 * 1 * (start[0] * args[8].stencil->stride[0]);
  p_a[8] = (char *)args[8].data_d + base8;

  long long int base9 = args[9].dat->base_offset + 
           dat9 * 1 * (start[0] * args[9].stencil->stride[0]);
  p_a[9] = (char *)args[9].data_d + base9;

  long long int base10 = args[10].dat->base_offset + 
           dat10 * 1 * (start[0] * args[10].stencil->stride[0]);
  p_a[10] = (char *)args[10].data_d + base10;

  long long int base11 = args[11].dat->base_offset + 
           dat11 * 1 * (start[0] * args[11].stencil->stride[0]);
  p_a[11] = (char *)args[11].data_d + base11;

  long long int base12 = args[12].dat->base_offset + 
           dat12 * 1 * (start[0] * args[12].stencil->stride[0]);
  p_a[12] = (char *)args[12].data_d + base12;

  long long int base13 = args[13].dat->base_offset + 
           dat13 * 1 * (start[0] * args[13].stencil->stride[0]);
  p_a[13] = (char *)args[13].data_d + base13;

  long long int base14 = args[14].dat->base_offset + 
           dat14 * 1 * (start[0] * args[14].stencil->stride[0]);
  p_a[14] = (char *)args[14].data_d + base14;

  long long int base15 = args[15].dat->base_offset + 
           dat15 * 1 * (start[0] * args[15].stencil->stride[0]);
  p_a[15] = (char *)args[15].data_d + base15;

  long long int base16 = args[16].dat->base_offset + 
           dat16 * 1 * (start[0] * args[16].stencil->stride[0]);
  p_a[16] = (char *)args[16].data_d + base16;

  long long int base17 = args[17].dat->base_offset + 
           dat17 * 1 * (start[0] * args[17].stencil->stride[0]);
  p_a[17] = (char *)args[17].data_d + base17;

  long long int base18 = args[18].dat->base_offset + 
           dat18 * 1 * (start[0] * args[18].stencil->stride[0]);
  p_a[18] = (char *)args[18].data_d + base18;


  #ifndef OPS_LAZY
  ops_H_D_exchanges_device(args, 19);
  ops_halo_exchanges(args,19,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[30].mpi_time += t2-t1;
  }


  //call kernel wrapper function, passing in pointers to data
  if (x_size > 0)
    ops_opensbliblock00Kernel004<<<grid, tblock >>> ( 
     (double *)p_a[0], (double *)p_a[1],
     (double *)p_a[2], (double *)p_a[3],
     (double *)p_a[4], (double *)p_a[5],
     (double *)p_a[6], (double *)p_a[7],
     (double *)p_a[8], (double *)p_a[9],
     (double *)p_a[10], (double *)p_a[11],
     (double *)p_a[12], (double *)p_a[13],
     (double *)p_a[14], (double *)p_a[15],
     (double *)p_a[16], (double *)p_a[17],
     (double *)p_a[18],
    x_size);

  hipSafeCall(block->instance->ostream(), hipGetLastError());

  if (block->instance->OPS_diags>1) {
    hipSafeCall(block->instance->ostream(), hipDeviceSynchronize());
    ops_timers_core(&c1,&t1);
    block->instance->OPS_kernels[30].time += t1-t2;
  }

  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 19);
  ops_set_halo_dirtybit3(&args[11],range);
  ops_set_halo_dirtybit3(&args[12],range);
  ops_set_halo_dirtybit3(&args[13],range);
  ops_set_halo_dirtybit3(&args[14],range);
  ops_set_halo_dirtybit3(&args[15],range);
  ops_set_halo_dirtybit3(&args[16],range);
  ops_set_halo_dirtybit3(&args[17],range);
  ops_set_halo_dirtybit3(&args[18],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[30].mpi_time += t2-t1;
    block->instance->OPS_kernels[30].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[30].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[30].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[30].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[30].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[30].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[30].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[30].transfer += ops_compute_transfer(dim, start, end, &arg7);
    block->instance->OPS_kernels[30].transfer += ops_compute_transfer(dim, start, end, &arg8);
    block->instance->OPS_kernels[30].transfer += ops_compute_transfer(dim, start, end, &arg9);
    block->instance->OPS_kernels[30].transfer += ops_compute_transfer(dim, start, end, &arg10);
    block->instance->OPS_kernels[30].transfer += ops_compute_transfer(dim, start, end, &arg11);
    block->instance->OPS_kernels[30].transfer += ops_compute_transfer(dim, start, end, &arg12);
    block->instance->OPS_kernels[30].transfer += ops_compute_transfer(dim, start, end, &arg13);
    block->instance->OPS_kernels[30].transfer += ops_compute_transfer(dim, start, end, &arg14);
    block->instance->OPS_kernels[30].transfer += ops_compute_transfer(dim, start, end, &arg15);
    block->instance->OPS_kernels[30].transfer += ops_compute_transfer(dim, start, end, &arg16);
    block->instance->OPS_kernels[30].transfer += ops_compute_transfer(dim, start, end, &arg17);
    block->instance->OPS_kernels[30].transfer += ops_compute_transfer(dim, start, end, &arg18);
  }
}

#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel004(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11,
 ops_arg arg12, ops_arg arg13, ops_arg arg14, ops_arg arg15,
 ops_arg arg16, ops_arg arg17, ops_arg arg18) {
  ops_arg args[19] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18 };

  //create kernel descriptor and pass it to ops_enqueue_kernel
  create_kerneldesc_and_enque(name, args, 19, 30, dim, 1, range, block, ops_par_loop_opensbliblock00Kernel004_execute);
}
#endif
