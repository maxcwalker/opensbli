//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel067(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8) {
#else
void ops_par_loop_opensbliblock00Kernel067_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[9] = { arg0, arg1, arg2, arg3, arg4,
 arg5, arg6, arg7, arg8};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,9,range,0)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,0,"opensbliblock00Kernel067");
    block->instance->OPS_kernels[0].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "opensbliblock00Kernel067");
  #endif


  //compute locally allocated range for the sub-block
  int start[3];
  int end[3];
  int arg_idx[3];
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<3; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 9,block, range, start, end, arg_idx) < 0) return;
  #endif

  #if defined(OPS_MPI)
  #if defined(OPS_LAZY)
  sub_block_list sb = OPS_sub_block_list[block->index];
  arg_idx[0] = sb->decomp_disp[0];
  arg_idx[1] = sb->decomp_disp[1];
  arg_idx[2] = sb->decomp_disp[2];
  #else
  arg_idx[0] -= start[0];
  arg_idx[1] -= start[1];
  arg_idx[2] -= start[2];
  #endif
  #else //OPS_MPI
  arg_idx[0] = 0;
  arg_idx[1] = 0;
  arg_idx[2] = 0;
  #endif //OPS_MPI

  //initialize global variable with the dimension of dats
  int xdim0_opensbliblock00Kernel067 = args[0].dat->size[0];
  int ydim0_opensbliblock00Kernel067 = args[0].dat->size[1];
  int xdim1_opensbliblock00Kernel067 = args[1].dat->size[0];
  int ydim1_opensbliblock00Kernel067 = args[1].dat->size[1];
  int xdim2_opensbliblock00Kernel067 = args[2].dat->size[0];
  int ydim2_opensbliblock00Kernel067 = args[2].dat->size[1];
  int xdim3_opensbliblock00Kernel067 = args[3].dat->size[0];
  int ydim3_opensbliblock00Kernel067 = args[3].dat->size[1];
  int xdim4_opensbliblock00Kernel067 = args[4].dat->size[0];
  int ydim4_opensbliblock00Kernel067 = args[4].dat->size[1];
  int xdim5_opensbliblock00Kernel067 = args[5].dat->size[0];
  int ydim5_opensbliblock00Kernel067 = args[5].dat->size[1];
  int xdim6_opensbliblock00Kernel067 = args[6].dat->size[0];
  int ydim6_opensbliblock00Kernel067 = args[6].dat->size[1];
  int xdim7_opensbliblock00Kernel067 = args[7].dat->size[0];
  int ydim7_opensbliblock00Kernel067 = args[7].dat->size[1];

  //set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset/sizeof(double);
  double* rhoE_B0_p = (double*)args[0].data_d;

  int base1 = args[1].dat->base_offset/sizeof(double);
  double* rho_B0_p = (double*)args[1].data_d;

  int base2 = args[2].dat->base_offset/sizeof(double);
  double* rhou0_B0_p = (double*)args[2].data_d;

  int base3 = args[3].dat->base_offset/sizeof(double);
  double* rhou1_B0_p = (double*)args[3].data_d;

  int base4 = args[4].dat->base_offset/sizeof(double);
  double* rhou2_B0_p = (double*)args[4].data_d;

  int base5 = args[5].dat->base_offset/sizeof(double);
  double* x0_B0_p = (double*)args[5].data_d;

  int base6 = args[6].dat->base_offset/sizeof(double);
  double* x2_B0_p = (double*)args[6].data_d;

  int base7 = args[7].dat->base_offset/sizeof(double);
  double* x1_B0_p = (double*)args[7].data_d;




  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_device(args, 9);
  ops_halo_exchanges(args,9,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[0].mpi_time += __t1-__t2;
  }

  int start_0 = start[0];
  int end_0 = end[0];
  int arg_idx_0 = arg_idx[0];
  int start_1 = start[1];
  int end_1 = end[1];
  int arg_idx_1 = arg_idx[1];
  int start_2 = start[2];
  int end_2 = end[2];
  int arg_idx_2 = arg_idx[2];
  if ((end[0]-start[0])>0 && (end[1]-start[1])>0 && (end[2]-start[2])>0) {
    block->instance->sycl_instance->queue->submit([&](cl::sycl::handler &cgh) {

      auto Delta0block0_sycl = (*Delta0block0_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto Delta1block0_sycl = (*Delta1block0_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto Delta2block0_sycl = (*Delta2block0_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto H_sycl = (*H_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto L_sycl = (*L_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto b_sycl = (*b_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto inv2Minf_sycl = (*inv2Minf_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto inv2a_sycl = (*inv2a_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto invH_sycl = (*invH_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto inv_gamma_m1_sycl = (*inv_gamma_m1_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto invgama_sycl = (*invgama_p).template get_access<cl::sycl::access::mode::read>(cgh);

      cgh.parallel_for<class opensbliblock00Kernel067_kernel>(cl::sycl::nd_range<3>(cl::sycl::range<3>(
           ((end[2]-start[2]-1)/block->instance->OPS_block_size_z+1)*block->instance->OPS_block_size_z,
           ((end[1]-start[1]-1)/block->instance->OPS_block_size_y+1)*block->instance->OPS_block_size_y,
            ((end[0]-start[0]-1)/block->instance->OPS_block_size_x+1)*block->instance->OPS_block_size_x
             ),cl::sycl::range<3>(
             block->instance->OPS_block_size_z,
             block->instance->OPS_block_size_y,
      block->instance->OPS_block_size_x
             ))
      , [=](cl::sycl::nd_item<3> item
      ) [[intel::kernel_args_restrict]] {
        int n_z = item.get_global_id(0)+start_2;
        int n_y = item.get_global_id(1)+start_1;
        int n_x = item.get_global_id(2)+start_0;
        int idx[] = {arg_idx_0+n_x, arg_idx_1+n_y, arg_idx_2+n_z};
        ACC<double> rhoE_B0(xdim0_opensbliblock00Kernel067, ydim0_opensbliblock00Kernel067, &rhoE_B0_p[0] + base0 + n_x*1 + n_y * xdim0_opensbliblock00Kernel067*1 + n_z * xdim0_opensbliblock00Kernel067 * ydim0_opensbliblock00Kernel067*1);
        ACC<double> rho_B0(xdim1_opensbliblock00Kernel067, ydim1_opensbliblock00Kernel067, &rho_B0_p[0] + base1 + n_x*1 + n_y * xdim1_opensbliblock00Kernel067*1 + n_z * xdim1_opensbliblock00Kernel067 * ydim1_opensbliblock00Kernel067*1);
        ACC<double> rhou0_B0(xdim2_opensbliblock00Kernel067, ydim2_opensbliblock00Kernel067, &rhou0_B0_p[0] + base2 + n_x*1 + n_y * xdim2_opensbliblock00Kernel067*1 + n_z * xdim2_opensbliblock00Kernel067 * ydim2_opensbliblock00Kernel067*1);
        ACC<double> rhou1_B0(xdim3_opensbliblock00Kernel067, ydim3_opensbliblock00Kernel067, &rhou1_B0_p[0] + base3 + n_x*1 + n_y * xdim3_opensbliblock00Kernel067*1 + n_z * xdim3_opensbliblock00Kernel067 * ydim3_opensbliblock00Kernel067*1);
        ACC<double> rhou2_B0(xdim4_opensbliblock00Kernel067, ydim4_opensbliblock00Kernel067, &rhou2_B0_p[0] + base4 + n_x*1 + n_y * xdim4_opensbliblock00Kernel067*1 + n_z * xdim4_opensbliblock00Kernel067 * ydim4_opensbliblock00Kernel067*1);
        ACC<double> x0_B0(xdim5_opensbliblock00Kernel067, ydim5_opensbliblock00Kernel067, &x0_B0_p[0] + base5 + n_x*1 + n_y * xdim5_opensbliblock00Kernel067*1 + n_z * xdim5_opensbliblock00Kernel067 * ydim5_opensbliblock00Kernel067*1);
        ACC<double> x2_B0(xdim6_opensbliblock00Kernel067, ydim6_opensbliblock00Kernel067, &x2_B0_p[0] + base6 + n_x*1 + n_y * xdim6_opensbliblock00Kernel067*1 + n_z * xdim6_opensbliblock00Kernel067 * ydim6_opensbliblock00Kernel067*1);
        ACC<double> x1_B0(xdim7_opensbliblock00Kernel067, ydim7_opensbliblock00Kernel067, &x1_B0_p[0] + base7 + n_x*1 + n_y * xdim7_opensbliblock00Kernel067*1 + n_z * xdim7_opensbliblock00Kernel067 * ydim7_opensbliblock00Kernel067*1);
        //USER CODE
        if (n_x < end_0 && n_y < end_1 && n_z < end_2) {
          
   double T = 0.0;
   double rho = 0.0;
   double rhou0 = 0.0;
   double rhou1 = 0.0;
   x0_B0(0,0,0) = Delta0block0_sycl[0]*idx[0];

    x1_B0(0,0,0) = ((1.0/20.0))*H_sycl[0]*cl::sycl::exp(-((-(1.0/2.0)*L_sycl[0] + Delta0block0_sycl[0]*idx[0])*(-(1.0/2.0)*L_sycl[0] +
      Delta0block0_sycl[0]*idx[0]))*inv2a_sycl[0]) + (-(1.0/20.0)*H_sycl[0]*cl::sycl::exp(-((-(1.0/2.0)*L_sycl[0] + Delta0block0_sycl[0]*idx[0])*(-(1.0/2.0)*L_sycl[0] +
      Delta0block0_sycl[0]*idx[0]))*inv2a_sycl[0]) + H_sycl[0])*sinh(b_sycl[0]*invH_sycl[0]*Delta1block0_sycl[0]*idx[1])/sinh(b_sycl[0]);

   x2_B0(0,0,0) = Delta2block0_sycl[0]*idx[2];

    rhou0 = ((x1_B0(0,0,0) < 3.48234823482348) ? (
   -7.16901884479071e-7 +
      0.132330019067462*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) + 7.58876233696216e-18*pow(x1_B0(0,0,0), 41) +
      4.55870467231989*pow(x1_B0(0,0,0), 7) + 1.81852010726443e-11*pow(x1_B0(0,0,0), 29) +
      1.15944676973326e-7*pow(x1_B0(0,0,0), 23) +
      1.13841496320904*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) +
      1.77703856621355e-8*pow(x1_B0(0,0,0), 24) + 0.000585482924484675*pow(x1_B0(0,0,0), 16) +
      3.83472440565574e-20*pow(x1_B0(0,0,0), 46) + 0.0900126669900142*pow(x1_B0(0,0,0), 12) +
      5.41831776898627e-12*pow(x1_B0(0,0,0), 31) + 9.52742943592143e-13*pow(x1_B0(0,0,0), 32) +
      4.94030837501905e-16*pow(x1_B0(0,0,0), 38) + 1.64147382356208e-11*pow(x1_B0(0,0,0), 30) +
      4.80571633386606e-22*pow(x1_B0(0,0,0), 48) + 1.57307434770882e-20*pow(x1_B0(0,0,0), 47) +
      2.60277902655405e-16*pow(x1_B0(0,0,0), 39) + 0.0380256680961085*pow(x1_B0(0,0,0), 11) +
      7.01673941173182e-17*pow(x1_B0(0,0,0), 40) + 3.06847060817251e-7*pow(x1_B0(0,0,0), 22) +
      0.000165559672235226*pow(x1_B0(0,0,0), 17) + 3.18314111646636*pow(x1_B0(0,0,0), 9) +
      0.424976939216291*x1_B0(0,0,0) + 2.08907909148039e-22*pow(x1_B0(0,0,0), 50) -
      5.37355911673118e-16*pow(x1_B0(0,0,0), 37) -
      2.80971782065867*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) -
      0.00798671195861096*pow(x1_B0(0,0,0), 14) - 1.10146183459807*pow(x1_B0(0,0,0), 10) -
      1.53996520681919e-5*pow(x1_B0(0,0,0), 19) - 1.89138506141206e-18*pow(x1_B0(0,0,0), 43) -
      1.78316348256655e-21*pow(x1_B0(0,0,0), 49) - 8.61259630154345e-15*pow(x1_B0(0,0,0), 36) -
      2.48106354303833e-9*pow(x1_B0(0,0,0), 26) - 7.67407392641094e-10*pow(x1_B0(0,0,0), 27) -
      2.91756381194012e-18*pow(x1_B0(0,0,0), 42) - 9.57378018177313e-14*pow(x1_B0(0,0,0), 34) -
      6.57806628956079e-6*pow(x1_B0(0,0,0), 18) - 0.000465623932916325*pow(x1_B0(0,0,0), 15) -
      2.64290862820152e-20*pow(x1_B0(0,0,0), 45) - 4.13712066272098e-6*pow(x1_B0(0,0,0), 20) -
      0.00457510839299148*(x1_B0(0,0,0)*x1_B0(0,0,0)) - 5.08794748909751e-19*pow(x1_B0(0,0,0), 44) -
      4.83251482627233*pow(x1_B0(0,0,0), 8) - 0.308741718059045*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) -
      3.82278769199402e-14*pow(x1_B0(0,0,0), 35) - 3.9008805832799e-14*pow(x1_B0(0,0,0), 33) -
      2.67274753236602e-9*pow(x1_B0(0,0,0), 25) - 8.55441712372834e-8*pow(x1_B0(0,0,0), 21) -
      0.00601458740925835*pow(x1_B0(0,0,0), 13) - 1.08190587921225e-10*pow(x1_B0(0,0,0), 28)
)
: (

      0.999999414236104
));

    rhou1 = ((x1_B0(0,0,0) < 3.48234823482348) ? (
   -3.60879915833043e-8 + 6.75635329277998e-24*pow(x1_B0(0,0,0), 48)
      + 0.0232856312375012*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) +
      5.18410885389215e-8*pow(x1_B0(0,0,0), 18) + 0.00111047910794611*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) +
      8.11519177452915e-14*pow(x1_B0(0,0,0), 29) + 1.15274644424269e-14*pow(x1_B0(0,0,0), 32) +
      3.46162105351581e-22*pow(x1_B0(0,0,0), 46) + 0.00116966799776863*pow(x1_B0(0,0,0), 12) +
      1.5176219051782e-13*pow(x1_B0(0,0,0), 30) + 1.53371798467986e-22*pow(x1_B0(0,0,0), 47) +
      9.53183917440141e-20*pow(x1_B0(0,0,0), 41) + 3.92566306371756e-6*x1_B0(0,0,0) +
      2.43134485485195e-10*pow(x1_B0(0,0,0), 24) + 0.00109183343724283*(x1_B0(0,0,0)*x1_B0(0,0,0)) +
      2.13281622230568e-6*pow(x1_B0(0,0,0), 17) + 3.95690680738724e-18*pow(x1_B0(0,0,0), 38) +
      1.93478377981967e-24*pow(x1_B0(0,0,0), 50) + 2.63742257133245e-16*pow(x1_B0(0,0,0), 33) +
      0.0788365358094612*pow(x1_B0(0,0,0), 7) + 1.27627912138185e-9*pow(x1_B0(0,0,0), 23) +
      2.47596798938386e-18*pow(x1_B0(0,0,0), 39) + 0.0458998998764617*pow(x1_B0(0,0,0), 9) +
      2.77055632825066e-9*pow(x1_B0(0,0,0), 22) + 5.95947137044201e-6*pow(x1_B0(0,0,0), 16) +
      7.24215317116674e-19*pow(x1_B0(0,0,0), 40) + 5.66956825818676e-14*pow(x1_B0(0,0,0), 31) -
      0.0529706697986188*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) -
      3.76582695003965e-22*pow(x1_B0(0,0,0), 45) - 9.65230358255829e-5*pow(x1_B0(0,0,0), 14) -
      2.28121746551901e-20*pow(x1_B0(0,0,0), 42) - 8.39984832938816e-12*pow(x1_B0(0,0,0), 27) -
      0.0765291541097216*pow(x1_B0(0,0,0), 8) - 1.69733958857738e-23*pow(x1_B0(0,0,0), 49) -
      1.56123353067161e-7*pow(x1_B0(0,0,0), 19) - 1.06176362740562e-5*pow(x1_B0(0,0,0), 15) -
      9.43901072413914e-17*pow(x1_B0(0,0,0), 36) - 0.0139555644338072*pow(x1_B0(0,0,0), 10) -
      8.32490605199546e-16*pow(x1_B0(0,0,0), 34) - 3.81569657068598e-9*pow(x1_B0(0,0,0), 21) -
      0.000134811202383551*pow(x1_B0(0,0,0), 11) - 1.78205491625194e-20*pow(x1_B0(0,0,0), 43) -
      9.15965307411535e-18*pow(x1_B0(0,0,0), 37) - 1.08151838048533e-11*pow(x1_B0(0,0,0), 25) -
      5.15080639113782e-21*pow(x1_B0(0,0,0), 44) -
      0.00621096658919804*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) - 1.46473385171802e-12*pow(x1_B0(0,0,0),
      28) - 2.35994274958015e-11*pow(x1_B0(0,0,0), 26) - 3.79134373823516e-16*pow(x1_B0(0,0,0), 35) -
      5.08977144453388e-8*pow(x1_B0(0,0,0), 20) - 1.49921038225164e-5*pow(x1_B0(0,0,0), 13)
)
: (

      0.00561595053060212
));

    T = ((x1_B0(0,0,0) < 3.48234823482348) ? (
   1.66999795228452 + 1.64205797547923e-14*pow(x1_B0(0,0,0), 34) +
      6.2122494055161e-20*pow(x1_B0(0,0,0), 44) + 1.94548472663644e-24*pow(x1_B0(0,0,0), 48) +
      2.51008844907711e-22*pow(x1_B0(0,0,0), 49) + 7.42425031439977e-11*pow(x1_B0(0,0,0), 27) +
      0.659736127038312*pow(x1_B0(0,0,0), 7) +
      0.353524164761256*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) +
      0.0236472385559141*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) + 0.000414378560717424*pow(x1_B0(0,0,0), 14) +
      6.67552642777726e-12*pow(x1_B0(0,0,0), 24) + 8.23750606221188e-16*pow(x1_B0(0,0,0), 36) +
      9.09430225452774e-10*pow(x1_B0(0,0,0), 25) + 1.94823705986589e-6*pow(x1_B0(0,0,0), 19) +
      0.0320939068554245*pow(x1_B0(0,0,0), 10) + 0.00406454670844886*x1_B0(0,0,0) +
      2.74114536935213e-19*pow(x1_B0(0,0,0), 43) + 0.00248717168769525*pow(x1_B0(0,0,0), 13) +
      5.75195402026422e-19*pow(x1_B0(0,0,0), 42) + 5.24404888175377e-6*pow(x1_B0(0,0,0), 18) +
      4.98509573139837e-15*pow(x1_B0(0,0,0), 35) + 3.64795435328661e-10*pow(x1_B0(0,0,0), 26) +
      1.94551154505098e-7*pow(x1_B0(0,0,0), 20) + 7.63792315493835e-13*pow(x1_B0(0,0,0), 28) +
      0.112308971042097*pow(x1_B0(0,0,0), 9) + 2.69723519397777e-14*pow(x1_B0(0,0,0), 33) -
      0.292586821024265*(x1_B0(0,0,0)*x1_B0(0,0,0)) - 3.10848318665859e-23*pow(x1_B0(0,0,0), 50) -
      5.80715575424225e-12*pow(x1_B0(0,0,0), 29) - 7.30718827968948e-5*pow(x1_B0(0,0,0), 16) -
      5.47183005764786e-14*pow(x1_B0(0,0,0), 32) -
      0.134562715167545*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) - 3.71811379621461e-17*pow(x1_B0(0,0,0),
      39) - 2.53787882392558e-12*pow(x1_B0(0,0,0), 30) - 3.27874304953259e-19*pow(x1_B0(0,0,0), 41) -
      0.0015138465065646*pow(x1_B0(0,0,0), 12) - 5.663086682463e-17*pow(x1_B0(0,0,0), 37) -
      3.92459595484269e-6*pow(x1_B0(0,0,0), 17) -
      0.584868739710682*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) -
      8.15482493821592e-18*pow(x1_B0(0,0,0), 40) - 2.10294963488714e-21*pow(x1_B0(0,0,0), 47) -
      2.83664094116239e-22*pow(x1_B0(0,0,0), 45) - 6.11410055272483e-13*pow(x1_B0(0,0,0), 31) -
      0.000164130718336587*pow(x1_B0(0,0,0), 15) - 1.09773793354119e-8*pow(x1_B0(0,0,0), 23) -
      0.0240987600174859*pow(x1_B0(0,0,0), 11) - 9.64718035025494e-8*pow(x1_B0(0,0,0), 21) -
      0.426917537857915*pow(x1_B0(0,0,0), 8) - 5.09586179023263e-8*pow(x1_B0(0,0,0), 22) -
      9.51210230566968e-17*pow(x1_B0(0,0,0), 38) - 6.02140302455952e-21*pow(x1_B0(0,0,0), 46)
)
: (

      1.00000058218165
));

   rho = 1.0/T;

   rho_B0(0,0,0) = rho;

   rhou0_B0(0,0,0) = rhou0;

   rhou1_B0(0,0,0) = rhou1;

   rhoE_B0(0,0,0) = (0.5*(rhou0*rhou0) + 0.5*(rhou1*rhou1))/rho + invgama_sycl[0]*inv2Minf_sycl[0]*inv_gamma_m1_sycl[0]*T*rho;

   rhou2_B0(0,0,0) = 0.0;


        }
      });
    });
  }
  if (block->instance->OPS_diags > 1) {
    block->instance->sycl_instance->queue->wait();
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[0].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 9);
  ops_set_halo_dirtybit3(&args[0],range);
  ops_set_halo_dirtybit3(&args[1],range);
  ops_set_halo_dirtybit3(&args[2],range);
  ops_set_halo_dirtybit3(&args[3],range);
  ops_set_halo_dirtybit3(&args[4],range);
  ops_set_halo_dirtybit3(&args[5],range);
  ops_set_halo_dirtybit3(&args[6],range);
  ops_set_halo_dirtybit3(&args[7],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[0].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg7);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel067(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)calloc(1,sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 1;
  desc->index = 0;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 0;
  for ( int i=0; i<6; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 9;
  desc->args = (ops_arg*)ops_malloc(9*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg2.dat->index;
  desc->args[3] = arg3;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg3.dat->index;
  desc->args[4] = arg4;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg4.dat->index;
  desc->args[5] = arg5;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg5.dat->index;
  desc->args[6] = arg6;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg6.dat->index;
  desc->args[7] = arg7;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg7.dat->index;
  desc->args[8] = arg8;
  desc->function = ops_par_loop_opensbliblock00Kernel067_execute;
  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,0,"opensbliblock00Kernel067");
  }
  ops_enqueue_kernel(desc);
}
#endif
