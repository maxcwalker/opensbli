//
// auto-generated by ops.py
//
__constant__ int dims_opensbliblock00Kernel067 [9][2];
static int dims_opensbliblock00Kernel067_h [9][2] = {{0}};

//user function
__device__

 void opensbliblock00Kernel067_gpu(ACC<double> &rhoE_B0,
  ACC<double> &rho_B0,
  ACC<double> &rhou0_B0,
  ACC<double> &rhou1_B0,
  ACC<double> &rhou2_B0,
  ACC<double> &x0_B0,
  ACC<double> &x2_B0,
  ACC<double> &x1_B0,
  const int *idx)
{
   double T = 0.0;
   double rho = 0.0;
   double rhou0 = 0.0;
   double rhou1 = 0.0;
   x0_B0(0,0,0) = Delta0block0*idx[0];

    x1_B0(0,0,0) = ((1.0/20.0))*H*exp(-((-(1.0/2.0)*L + Delta0block0*idx[0])*(-(1.0/2.0)*L +
      Delta0block0*idx[0]))*inv2a) + (-(1.0/20.0)*H*exp(-((-(1.0/2.0)*L + Delta0block0*idx[0])*(-(1.0/2.0)*L +
      Delta0block0*idx[0]))*inv2a) + H)*sinh(b*invH*Delta1block0*idx[1])/sinh(b);

   x2_B0(0,0,0) = Delta2block0*idx[2];

    rhou0 = ((x1_B0(0,0,0) < 3.48234823482348) ? (
   -7.16901884479071e-7 +
      0.132330019067462*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) + 7.58876233696216e-18*pow(x1_B0(0,0,0), 41) +
      4.55870467231989*pow(x1_B0(0,0,0), 7) + 1.81852010726443e-11*pow(x1_B0(0,0,0), 29) +
      1.15944676973326e-7*pow(x1_B0(0,0,0), 23) +
      1.13841496320904*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) +
      1.77703856621355e-8*pow(x1_B0(0,0,0), 24) + 0.000585482924484675*pow(x1_B0(0,0,0), 16) +
      3.83472440565574e-20*pow(x1_B0(0,0,0), 46) + 0.0900126669900142*pow(x1_B0(0,0,0), 12) +
      5.41831776898627e-12*pow(x1_B0(0,0,0), 31) + 9.52742943592143e-13*pow(x1_B0(0,0,0), 32) +
      4.94030837501905e-16*pow(x1_B0(0,0,0), 38) + 1.64147382356208e-11*pow(x1_B0(0,0,0), 30) +
      4.80571633386606e-22*pow(x1_B0(0,0,0), 48) + 1.57307434770882e-20*pow(x1_B0(0,0,0), 47) +
      2.60277902655405e-16*pow(x1_B0(0,0,0), 39) + 0.0380256680961085*pow(x1_B0(0,0,0), 11) +
      7.01673941173182e-17*pow(x1_B0(0,0,0), 40) + 3.06847060817251e-7*pow(x1_B0(0,0,0), 22) +
      0.000165559672235226*pow(x1_B0(0,0,0), 17) + 3.18314111646636*pow(x1_B0(0,0,0), 9) +
      0.424976939216291*x1_B0(0,0,0) + 2.08907909148039e-22*pow(x1_B0(0,0,0), 50) -
      5.37355911673118e-16*pow(x1_B0(0,0,0), 37) -
      2.80971782065867*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) -
      0.00798671195861096*pow(x1_B0(0,0,0), 14) - 1.10146183459807*pow(x1_B0(0,0,0), 10) -
      1.53996520681919e-5*pow(x1_B0(0,0,0), 19) - 1.89138506141206e-18*pow(x1_B0(0,0,0), 43) -
      1.78316348256655e-21*pow(x1_B0(0,0,0), 49) - 8.61259630154345e-15*pow(x1_B0(0,0,0), 36) -
      2.48106354303833e-9*pow(x1_B0(0,0,0), 26) - 7.67407392641094e-10*pow(x1_B0(0,0,0), 27) -
      2.91756381194012e-18*pow(x1_B0(0,0,0), 42) - 9.57378018177313e-14*pow(x1_B0(0,0,0), 34) -
      6.57806628956079e-6*pow(x1_B0(0,0,0), 18) - 0.000465623932916325*pow(x1_B0(0,0,0), 15) -
      2.64290862820152e-20*pow(x1_B0(0,0,0), 45) - 4.13712066272098e-6*pow(x1_B0(0,0,0), 20) -
      0.00457510839299148*(x1_B0(0,0,0)*x1_B0(0,0,0)) - 5.08794748909751e-19*pow(x1_B0(0,0,0), 44) -
      4.83251482627233*pow(x1_B0(0,0,0), 8) - 0.308741718059045*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) -
      3.82278769199402e-14*pow(x1_B0(0,0,0), 35) - 3.9008805832799e-14*pow(x1_B0(0,0,0), 33) -
      2.67274753236602e-9*pow(x1_B0(0,0,0), 25) - 8.55441712372834e-8*pow(x1_B0(0,0,0), 21) -
      0.00601458740925835*pow(x1_B0(0,0,0), 13) - 1.08190587921225e-10*pow(x1_B0(0,0,0), 28)
)
: (

      0.999999414236104
));

    rhou1 = ((x1_B0(0,0,0) < 3.48234823482348) ? (
   -3.60879915833043e-8 + 6.75635329277998e-24*pow(x1_B0(0,0,0), 48)
      + 0.0232856312375012*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) +
      5.18410885389215e-8*pow(x1_B0(0,0,0), 18) + 0.00111047910794611*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) +
      8.11519177452915e-14*pow(x1_B0(0,0,0), 29) + 1.15274644424269e-14*pow(x1_B0(0,0,0), 32) +
      3.46162105351581e-22*pow(x1_B0(0,0,0), 46) + 0.00116966799776863*pow(x1_B0(0,0,0), 12) +
      1.5176219051782e-13*pow(x1_B0(0,0,0), 30) + 1.53371798467986e-22*pow(x1_B0(0,0,0), 47) +
      9.53183917440141e-20*pow(x1_B0(0,0,0), 41) + 3.92566306371756e-6*x1_B0(0,0,0) +
      2.43134485485195e-10*pow(x1_B0(0,0,0), 24) + 0.00109183343724283*(x1_B0(0,0,0)*x1_B0(0,0,0)) +
      2.13281622230568e-6*pow(x1_B0(0,0,0), 17) + 3.95690680738724e-18*pow(x1_B0(0,0,0), 38) +
      1.93478377981967e-24*pow(x1_B0(0,0,0), 50) + 2.63742257133245e-16*pow(x1_B0(0,0,0), 33) +
      0.0788365358094612*pow(x1_B0(0,0,0), 7) + 1.27627912138185e-9*pow(x1_B0(0,0,0), 23) +
      2.47596798938386e-18*pow(x1_B0(0,0,0), 39) + 0.0458998998764617*pow(x1_B0(0,0,0), 9) +
      2.77055632825066e-9*pow(x1_B0(0,0,0), 22) + 5.95947137044201e-6*pow(x1_B0(0,0,0), 16) +
      7.24215317116674e-19*pow(x1_B0(0,0,0), 40) + 5.66956825818676e-14*pow(x1_B0(0,0,0), 31) -
      0.0529706697986188*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) -
      3.76582695003965e-22*pow(x1_B0(0,0,0), 45) - 9.65230358255829e-5*pow(x1_B0(0,0,0), 14) -
      2.28121746551901e-20*pow(x1_B0(0,0,0), 42) - 8.39984832938816e-12*pow(x1_B0(0,0,0), 27) -
      0.0765291541097216*pow(x1_B0(0,0,0), 8) - 1.69733958857738e-23*pow(x1_B0(0,0,0), 49) -
      1.56123353067161e-7*pow(x1_B0(0,0,0), 19) - 1.06176362740562e-5*pow(x1_B0(0,0,0), 15) -
      9.43901072413914e-17*pow(x1_B0(0,0,0), 36) - 0.0139555644338072*pow(x1_B0(0,0,0), 10) -
      8.32490605199546e-16*pow(x1_B0(0,0,0), 34) - 3.81569657068598e-9*pow(x1_B0(0,0,0), 21) -
      0.000134811202383551*pow(x1_B0(0,0,0), 11) - 1.78205491625194e-20*pow(x1_B0(0,0,0), 43) -
      9.15965307411535e-18*pow(x1_B0(0,0,0), 37) - 1.08151838048533e-11*pow(x1_B0(0,0,0), 25) -
      5.15080639113782e-21*pow(x1_B0(0,0,0), 44) -
      0.00621096658919804*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) - 1.46473385171802e-12*pow(x1_B0(0,0,0),
      28) - 2.35994274958015e-11*pow(x1_B0(0,0,0), 26) - 3.79134373823516e-16*pow(x1_B0(0,0,0), 35) -
      5.08977144453388e-8*pow(x1_B0(0,0,0), 20) - 1.49921038225164e-5*pow(x1_B0(0,0,0), 13)
)
: (

      0.00561595053060212
));

    T = ((x1_B0(0,0,0) < 3.48234823482348) ? (
   1.66999795228452 + 1.64205797547923e-14*pow(x1_B0(0,0,0), 34) +
      6.2122494055161e-20*pow(x1_B0(0,0,0), 44) + 1.94548472663644e-24*pow(x1_B0(0,0,0), 48) +
      2.51008844907711e-22*pow(x1_B0(0,0,0), 49) + 7.42425031439977e-11*pow(x1_B0(0,0,0), 27) +
      0.659736127038312*pow(x1_B0(0,0,0), 7) +
      0.353524164761256*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) +
      0.0236472385559141*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) + 0.000414378560717424*pow(x1_B0(0,0,0), 14) +
      6.67552642777726e-12*pow(x1_B0(0,0,0), 24) + 8.23750606221188e-16*pow(x1_B0(0,0,0), 36) +
      9.09430225452774e-10*pow(x1_B0(0,0,0), 25) + 1.94823705986589e-6*pow(x1_B0(0,0,0), 19) +
      0.0320939068554245*pow(x1_B0(0,0,0), 10) + 0.00406454670844886*x1_B0(0,0,0) +
      2.74114536935213e-19*pow(x1_B0(0,0,0), 43) + 0.00248717168769525*pow(x1_B0(0,0,0), 13) +
      5.75195402026422e-19*pow(x1_B0(0,0,0), 42) + 5.24404888175377e-6*pow(x1_B0(0,0,0), 18) +
      4.98509573139837e-15*pow(x1_B0(0,0,0), 35) + 3.64795435328661e-10*pow(x1_B0(0,0,0), 26) +
      1.94551154505098e-7*pow(x1_B0(0,0,0), 20) + 7.63792315493835e-13*pow(x1_B0(0,0,0), 28) +
      0.112308971042097*pow(x1_B0(0,0,0), 9) + 2.69723519397777e-14*pow(x1_B0(0,0,0), 33) -
      0.292586821024265*(x1_B0(0,0,0)*x1_B0(0,0,0)) - 3.10848318665859e-23*pow(x1_B0(0,0,0), 50) -
      5.80715575424225e-12*pow(x1_B0(0,0,0), 29) - 7.30718827968948e-5*pow(x1_B0(0,0,0), 16) -
      5.47183005764786e-14*pow(x1_B0(0,0,0), 32) -
      0.134562715167545*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) - 3.71811379621461e-17*pow(x1_B0(0,0,0),
      39) - 2.53787882392558e-12*pow(x1_B0(0,0,0), 30) - 3.27874304953259e-19*pow(x1_B0(0,0,0), 41) -
      0.0015138465065646*pow(x1_B0(0,0,0), 12) - 5.663086682463e-17*pow(x1_B0(0,0,0), 37) -
      3.92459595484269e-6*pow(x1_B0(0,0,0), 17) -
      0.584868739710682*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) -
      8.15482493821592e-18*pow(x1_B0(0,0,0), 40) - 2.10294963488714e-21*pow(x1_B0(0,0,0), 47) -
      2.83664094116239e-22*pow(x1_B0(0,0,0), 45) - 6.11410055272483e-13*pow(x1_B0(0,0,0), 31) -
      0.000164130718336587*pow(x1_B0(0,0,0), 15) - 1.09773793354119e-8*pow(x1_B0(0,0,0), 23) -
      0.0240987600174859*pow(x1_B0(0,0,0), 11) - 9.64718035025494e-8*pow(x1_B0(0,0,0), 21) -
      0.426917537857915*pow(x1_B0(0,0,0), 8) - 5.09586179023263e-8*pow(x1_B0(0,0,0), 22) -
      9.51210230566968e-17*pow(x1_B0(0,0,0), 38) - 6.02140302455952e-21*pow(x1_B0(0,0,0), 46)
)
: (

      1.00000058218165
));

   rho = 1.0/T;

   rho_B0(0,0,0) = rho;

   rhou0_B0(0,0,0) = rhou0;

   rhou1_B0(0,0,0) = rhou1;

   rhoE_B0(0,0,0) = (0.5*(rhou0*rhou0) + 0.5*(rhou1*rhou1))/rho + invgama*inv2Minf*inv_gamma_m1*T*rho;

   rhou2_B0(0,0,0) = 0.0;

}



__global__ void ops_opensbliblock00Kernel067(
double* __restrict arg0,
double* __restrict arg1,
double* __restrict arg2,
double* __restrict arg3,
double* __restrict arg4,
double* __restrict arg5,
double* __restrict arg6,
double* __restrict arg7,
int arg_idx0, int arg_idx1, int arg_idx2,
int size0,
int size1,
int size2 ){


  int idx_z = blockDim.z * blockIdx.z + threadIdx.z;
  int idx_y = blockDim.y * blockIdx.y + threadIdx.y;
  int idx_x = blockDim.x * blockIdx.x + threadIdx.x;

  int arg_idx[3];
  arg_idx[0] = arg_idx0+idx_x;
  arg_idx[1] = arg_idx1+idx_y;
  arg_idx[2] = arg_idx2+idx_z;
  arg0 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel067[0][0] + idx_z * 1*1 * dims_opensbliblock00Kernel067[0][0] * dims_opensbliblock00Kernel067[0][1];
  arg1 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel067[1][0] + idx_z * 1*1 * dims_opensbliblock00Kernel067[1][0] * dims_opensbliblock00Kernel067[1][1];
  arg2 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel067[2][0] + idx_z * 1*1 * dims_opensbliblock00Kernel067[2][0] * dims_opensbliblock00Kernel067[2][1];
  arg3 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel067[3][0] + idx_z * 1*1 * dims_opensbliblock00Kernel067[3][0] * dims_opensbliblock00Kernel067[3][1];
  arg4 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel067[4][0] + idx_z * 1*1 * dims_opensbliblock00Kernel067[4][0] * dims_opensbliblock00Kernel067[4][1];
  arg5 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel067[5][0] + idx_z * 1*1 * dims_opensbliblock00Kernel067[5][0] * dims_opensbliblock00Kernel067[5][1];
  arg6 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel067[6][0] + idx_z * 1*1 * dims_opensbliblock00Kernel067[6][0] * dims_opensbliblock00Kernel067[6][1];
  arg7 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel067[7][0] + idx_z * 1*1 * dims_opensbliblock00Kernel067[7][0] * dims_opensbliblock00Kernel067[7][1];

  if (idx_x < size0 && idx_y < size1 && idx_z < size2) {
    ACC<double> argp0(dims_opensbliblock00Kernel067[0][0], dims_opensbliblock00Kernel067[0][1], arg0);
    ACC<double> argp1(dims_opensbliblock00Kernel067[1][0], dims_opensbliblock00Kernel067[1][1], arg1);
    ACC<double> argp2(dims_opensbliblock00Kernel067[2][0], dims_opensbliblock00Kernel067[2][1], arg2);
    ACC<double> argp3(dims_opensbliblock00Kernel067[3][0], dims_opensbliblock00Kernel067[3][1], arg3);
    ACC<double> argp4(dims_opensbliblock00Kernel067[4][0], dims_opensbliblock00Kernel067[4][1], arg4);
    ACC<double> argp5(dims_opensbliblock00Kernel067[5][0], dims_opensbliblock00Kernel067[5][1], arg5);
    ACC<double> argp6(dims_opensbliblock00Kernel067[6][0], dims_opensbliblock00Kernel067[6][1], arg6);
    ACC<double> argp7(dims_opensbliblock00Kernel067[7][0], dims_opensbliblock00Kernel067[7][1], arg7);
    opensbliblock00Kernel067_gpu(
     argp0, argp1, argp2, argp3, argp4,
     argp5, argp6, argp7, arg_idx);
  }

}

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel067(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8) {
#else
void ops_par_loop_opensbliblock00Kernel067_execute(ops_kernel_descriptor *desc) {
  int dim = desc->dim;
  #if OPS_MPI
  ops_block block = desc->block;
  #endif
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  #endif

  //Timing
  double t1,t2,c1,c2;

  ops_arg args[9] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8};


  #if CHECKPOINTING && !OPS_LAZY
  if (!ops_checkpointing_before(args,9,range,0)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,0,"opensbliblock00Kernel067");
    block->instance->OPS_kernels[0].count++;
    ops_timers_core(&c1,&t1);
  }

  //compute locally allocated range for the sub-block
  int start[3];
  int end[3];

  int arg_idx[3];
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<3; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 9,block, range, start, end, arg_idx) < 0) return;
  #endif

  #if defined(OPS_MPI)
  #if defined(OPS_LAZY)
  sub_block_list sb = OPS_sub_block_list[block->index];
  arg_idx[0] = sb->decomp_disp[0]+start[0];
  arg_idx[1] = sb->decomp_disp[1]+start[1];
  arg_idx[2] = sb->decomp_disp[2]+start[2];
  #endif
  #else //OPS_MPI
  arg_idx[0] = start[0];
  arg_idx[1] = start[1];
  arg_idx[2] = start[2];
  #endif //OPS_MPI
  int xdim0 = args[0].dat->size[0];
  int ydim0 = args[0].dat->size[1];
  int xdim1 = args[1].dat->size[0];
  int ydim1 = args[1].dat->size[1];
  int xdim2 = args[2].dat->size[0];
  int ydim2 = args[2].dat->size[1];
  int xdim3 = args[3].dat->size[0];
  int ydim3 = args[3].dat->size[1];
  int xdim4 = args[4].dat->size[0];
  int ydim4 = args[4].dat->size[1];
  int xdim5 = args[5].dat->size[0];
  int ydim5 = args[5].dat->size[1];
  int xdim6 = args[6].dat->size[0];
  int ydim6 = args[6].dat->size[1];
  int xdim7 = args[7].dat->size[0];
  int ydim7 = args[7].dat->size[1];

  if (xdim0 != dims_opensbliblock00Kernel067_h[0][0] || ydim0 != dims_opensbliblock00Kernel067_h[0][1] || xdim1 != dims_opensbliblock00Kernel067_h[1][0] || ydim1 != dims_opensbliblock00Kernel067_h[1][1] || xdim2 != dims_opensbliblock00Kernel067_h[2][0] || ydim2 != dims_opensbliblock00Kernel067_h[2][1] || xdim3 != dims_opensbliblock00Kernel067_h[3][0] || ydim3 != dims_opensbliblock00Kernel067_h[3][1] || xdim4 != dims_opensbliblock00Kernel067_h[4][0] || ydim4 != dims_opensbliblock00Kernel067_h[4][1] || xdim5 != dims_opensbliblock00Kernel067_h[5][0] || ydim5 != dims_opensbliblock00Kernel067_h[5][1] || xdim6 != dims_opensbliblock00Kernel067_h[6][0] || ydim6 != dims_opensbliblock00Kernel067_h[6][1] || xdim7 != dims_opensbliblock00Kernel067_h[7][0] || ydim7 != dims_opensbliblock00Kernel067_h[7][1]) {
    dims_opensbliblock00Kernel067_h[0][0] = xdim0;
    dims_opensbliblock00Kernel067_h[0][1] = ydim0;
    dims_opensbliblock00Kernel067_h[1][0] = xdim1;
    dims_opensbliblock00Kernel067_h[1][1] = ydim1;
    dims_opensbliblock00Kernel067_h[2][0] = xdim2;
    dims_opensbliblock00Kernel067_h[2][1] = ydim2;
    dims_opensbliblock00Kernel067_h[3][0] = xdim3;
    dims_opensbliblock00Kernel067_h[3][1] = ydim3;
    dims_opensbliblock00Kernel067_h[4][0] = xdim4;
    dims_opensbliblock00Kernel067_h[4][1] = ydim4;
    dims_opensbliblock00Kernel067_h[5][0] = xdim5;
    dims_opensbliblock00Kernel067_h[5][1] = ydim5;
    dims_opensbliblock00Kernel067_h[6][0] = xdim6;
    dims_opensbliblock00Kernel067_h[6][1] = ydim6;
    dims_opensbliblock00Kernel067_h[7][0] = xdim7;
    dims_opensbliblock00Kernel067_h[7][1] = ydim7;
    cutilSafeCall(block->instance->ostream(), cudaMemcpyToSymbol( dims_opensbliblock00Kernel067, dims_opensbliblock00Kernel067_h, sizeof(dims_opensbliblock00Kernel067)));
  }



  int x_size = MAX(0,end[0]-start[0]);
  int y_size = MAX(0,end[1]-start[1]);
  int z_size = MAX(0,end[2]-start[2]);

  dim3 grid( (x_size-1)/block->instance->OPS_block_size_x+ 1, (y_size-1)/block->instance->OPS_block_size_y + 1, (z_size-1)/block->instance->OPS_block_size_z +1);
  dim3 tblock(block->instance->OPS_block_size_x,block->instance->OPS_block_size_y,block->instance->OPS_block_size_z);



  long long int dat0 = (block->instance->OPS_soa ? args[0].dat->type_size : args[0].dat->elem_size);
  long long int dat1 = (block->instance->OPS_soa ? args[1].dat->type_size : args[1].dat->elem_size);
  long long int dat2 = (block->instance->OPS_soa ? args[2].dat->type_size : args[2].dat->elem_size);
  long long int dat3 = (block->instance->OPS_soa ? args[3].dat->type_size : args[3].dat->elem_size);
  long long int dat4 = (block->instance->OPS_soa ? args[4].dat->type_size : args[4].dat->elem_size);
  long long int dat5 = (block->instance->OPS_soa ? args[5].dat->type_size : args[5].dat->elem_size);
  long long int dat6 = (block->instance->OPS_soa ? args[6].dat->type_size : args[6].dat->elem_size);
  long long int dat7 = (block->instance->OPS_soa ? args[7].dat->type_size : args[7].dat->elem_size);

  char *p_a[9];

  //set up initial pointers
  long long int base0 = args[0].dat->base_offset + 
           dat0 * 1 * (start[0] * args[0].stencil->stride[0]);
  base0 = base0+ dat0 *
    args[0].dat->size[0] *
    (start[1] * args[0].stencil->stride[1]);
  base0 = base0+ dat0 *
    args[0].dat->size[0] *
    args[0].dat->size[1] *
    (start[2] * args[0].stencil->stride[2]);
  p_a[0] = (char *)args[0].data_d + base0;

  long long int base1 = args[1].dat->base_offset + 
           dat1 * 1 * (start[0] * args[1].stencil->stride[0]);
  base1 = base1+ dat1 *
    args[1].dat->size[0] *
    (start[1] * args[1].stencil->stride[1]);
  base1 = base1+ dat1 *
    args[1].dat->size[0] *
    args[1].dat->size[1] *
    (start[2] * args[1].stencil->stride[2]);
  p_a[1] = (char *)args[1].data_d + base1;

  long long int base2 = args[2].dat->base_offset + 
           dat2 * 1 * (start[0] * args[2].stencil->stride[0]);
  base2 = base2+ dat2 *
    args[2].dat->size[0] *
    (start[1] * args[2].stencil->stride[1]);
  base2 = base2+ dat2 *
    args[2].dat->size[0] *
    args[2].dat->size[1] *
    (start[2] * args[2].stencil->stride[2]);
  p_a[2] = (char *)args[2].data_d + base2;

  long long int base3 = args[3].dat->base_offset + 
           dat3 * 1 * (start[0] * args[3].stencil->stride[0]);
  base3 = base3+ dat3 *
    args[3].dat->size[0] *
    (start[1] * args[3].stencil->stride[1]);
  base3 = base3+ dat3 *
    args[3].dat->size[0] *
    args[3].dat->size[1] *
    (start[2] * args[3].stencil->stride[2]);
  p_a[3] = (char *)args[3].data_d + base3;

  long long int base4 = args[4].dat->base_offset + 
           dat4 * 1 * (start[0] * args[4].stencil->stride[0]);
  base4 = base4+ dat4 *
    args[4].dat->size[0] *
    (start[1] * args[4].stencil->stride[1]);
  base4 = base4+ dat4 *
    args[4].dat->size[0] *
    args[4].dat->size[1] *
    (start[2] * args[4].stencil->stride[2]);
  p_a[4] = (char *)args[4].data_d + base4;

  long long int base5 = args[5].dat->base_offset + 
           dat5 * 1 * (start[0] * args[5].stencil->stride[0]);
  base5 = base5+ dat5 *
    args[5].dat->size[0] *
    (start[1] * args[5].stencil->stride[1]);
  base5 = base5+ dat5 *
    args[5].dat->size[0] *
    args[5].dat->size[1] *
    (start[2] * args[5].stencil->stride[2]);
  p_a[5] = (char *)args[5].data_d + base5;

  long long int base6 = args[6].dat->base_offset + 
           dat6 * 1 * (start[0] * args[6].stencil->stride[0]);
  base6 = base6+ dat6 *
    args[6].dat->size[0] *
    (start[1] * args[6].stencil->stride[1]);
  base6 = base6+ dat6 *
    args[6].dat->size[0] *
    args[6].dat->size[1] *
    (start[2] * args[6].stencil->stride[2]);
  p_a[6] = (char *)args[6].data_d + base6;

  long long int base7 = args[7].dat->base_offset + 
           dat7 * 1 * (start[0] * args[7].stencil->stride[0]);
  base7 = base7+ dat7 *
    args[7].dat->size[0] *
    (start[1] * args[7].stencil->stride[1]);
  base7 = base7+ dat7 *
    args[7].dat->size[0] *
    args[7].dat->size[1] *
    (start[2] * args[7].stencil->stride[2]);
  p_a[7] = (char *)args[7].data_d + base7;


  #ifndef OPS_LAZY
  ops_H_D_exchanges_device(args, 9);
  ops_halo_exchanges(args,9,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[0].mpi_time += t2-t1;
  }


  //call kernel wrapper function, passing in pointers to data
  if (x_size > 0 && y_size > 0 && z_size > 0)
    ops_opensbliblock00Kernel067<<<grid, tblock >>> ( 
     (double *)p_a[0], (double *)p_a[1],
     (double *)p_a[2], (double *)p_a[3],
     (double *)p_a[4], (double *)p_a[5],
     (double *)p_a[6], (double *)p_a[7],
     arg_idx[0], arg_idx[1], arg_idx[2],
    x_size, y_size, z_size);

  cutilSafeCall(block->instance->ostream(), cudaGetLastError());

  if (block->instance->OPS_diags>1) {
    cutilSafeCall(block->instance->ostream(), cudaDeviceSynchronize());
    ops_timers_core(&c1,&t1);
    block->instance->OPS_kernels[0].time += t1-t2;
  }

  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 9);
  ops_set_halo_dirtybit3(&args[0],range);
  ops_set_halo_dirtybit3(&args[1],range);
  ops_set_halo_dirtybit3(&args[2],range);
  ops_set_halo_dirtybit3(&args[3],range);
  ops_set_halo_dirtybit3(&args[4],range);
  ops_set_halo_dirtybit3(&args[5],range);
  ops_set_halo_dirtybit3(&args[6],range);
  ops_set_halo_dirtybit3(&args[7],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[0].mpi_time += t2-t1;
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg7);
  }
}

#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel067(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8) {
  ops_arg args[9] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8 };

  //create kernel descriptor and pass it to ops_enqueue_kernel
  create_kerneldesc_and_enque(name, args, 9, 0, dim, 1, range, block, ops_par_loop_opensbliblock00Kernel067_execute);
}
#endif
