//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel067(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11,
 ops_arg arg12, ops_arg arg13, ops_arg arg14, ops_arg arg15,
 ops_arg arg16, ops_arg arg17, ops_arg arg18, ops_arg arg19,
 ops_arg arg20, ops_arg arg21, ops_arg arg22) {
#else
void ops_par_loop_opensbliblock00Kernel067_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  ops_arg arg9 = desc->args[9];
  ops_arg arg10 = desc->args[10];
  ops_arg arg11 = desc->args[11];
  ops_arg arg12 = desc->args[12];
  ops_arg arg13 = desc->args[13];
  ops_arg arg14 = desc->args[14];
  ops_arg arg15 = desc->args[15];
  ops_arg arg16 = desc->args[16];
  ops_arg arg17 = desc->args[17];
  ops_arg arg18 = desc->args[18];
  ops_arg arg19 = desc->args[19];
  ops_arg arg20 = desc->args[20];
  ops_arg arg21 = desc->args[21];
  ops_arg arg22 = desc->args[22];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[23] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,23,range,39)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,39,"opensbliblock00Kernel067");
    block->instance->OPS_kernels[39].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "opensbliblock00Kernel067");
  #endif


  //compute locally allocated range for the sub-block
  int start[3];
  int end[3];
  int arg_idx[3];
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<3; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 23,block, range, start, end, arg_idx) < 0) return;
  #endif


  #if defined(OPS_MPI)
  #if defined(OPS_LAZY)
  sub_block_list sb = OPS_sub_block_list[block->index];
  arg_idx[0] = sb->decomp_disp[0];
  arg_idx[1] = sb->decomp_disp[1];
  arg_idx[2] = sb->decomp_disp[2];
  #else
  arg_idx[0] -= start[0];
  arg_idx[1] -= start[1];
  arg_idx[2] -= start[2];
  #endif
  #else //OPS_MPI
  arg_idx[0] = 0;
  arg_idx[1] = 0;
  arg_idx[2] = 0;
  #endif //OPS_MPI

  //initialize global variable with the dimension of dats
  int xdim0_opensbliblock00Kernel067 = args[0].dat->size[0];
  int ydim0_opensbliblock00Kernel067 = args[0].dat->size[1];
  int xdim1_opensbliblock00Kernel067 = args[1].dat->size[0];
  int ydim1_opensbliblock00Kernel067 = args[1].dat->size[1];
  int xdim2_opensbliblock00Kernel067 = args[2].dat->size[0];
  int ydim2_opensbliblock00Kernel067 = args[2].dat->size[1];
  int xdim3_opensbliblock00Kernel067 = args[3].dat->size[0];
  int ydim3_opensbliblock00Kernel067 = args[3].dat->size[1];
  int xdim4_opensbliblock00Kernel067 = args[4].dat->size[0];
  int ydim4_opensbliblock00Kernel067 = args[4].dat->size[1];
  int xdim5_opensbliblock00Kernel067 = args[5].dat->size[0];
  int ydim5_opensbliblock00Kernel067 = args[5].dat->size[1];
  int xdim6_opensbliblock00Kernel067 = args[6].dat->size[0];
  int ydim6_opensbliblock00Kernel067 = args[6].dat->size[1];
  int xdim7_opensbliblock00Kernel067 = args[7].dat->size[0];
  int ydim7_opensbliblock00Kernel067 = args[7].dat->size[1];
  int xdim8_opensbliblock00Kernel067 = args[8].dat->size[0];
  int ydim8_opensbliblock00Kernel067 = args[8].dat->size[1];
  int xdim9_opensbliblock00Kernel067 = args[9].dat->size[0];
  int ydim9_opensbliblock00Kernel067 = args[9].dat->size[1];
  int xdim10_opensbliblock00Kernel067 = args[10].dat->size[0];
  int ydim10_opensbliblock00Kernel067 = args[10].dat->size[1];
  int xdim11_opensbliblock00Kernel067 = args[11].dat->size[0];
  int ydim11_opensbliblock00Kernel067 = args[11].dat->size[1];
  int xdim12_opensbliblock00Kernel067 = args[12].dat->size[0];
  int ydim12_opensbliblock00Kernel067 = args[12].dat->size[1];
  int xdim13_opensbliblock00Kernel067 = args[13].dat->size[0];
  int ydim13_opensbliblock00Kernel067 = args[13].dat->size[1];
  int xdim14_opensbliblock00Kernel067 = args[14].dat->size[0];
  int ydim14_opensbliblock00Kernel067 = args[14].dat->size[1];
  int xdim15_opensbliblock00Kernel067 = args[15].dat->size[0];
  int ydim15_opensbliblock00Kernel067 = args[15].dat->size[1];
  int xdim16_opensbliblock00Kernel067 = args[16].dat->size[0];
  int ydim16_opensbliblock00Kernel067 = args[16].dat->size[1];
  int xdim17_opensbliblock00Kernel067 = args[17].dat->size[0];
  int ydim17_opensbliblock00Kernel067 = args[17].dat->size[1];
  int xdim18_opensbliblock00Kernel067 = args[18].dat->size[0];
  int ydim18_opensbliblock00Kernel067 = args[18].dat->size[1];
  int xdim19_opensbliblock00Kernel067 = args[19].dat->size[0];
  int ydim19_opensbliblock00Kernel067 = args[19].dat->size[1];
  int xdim20_opensbliblock00Kernel067 = args[20].dat->size[0];
  int ydim20_opensbliblock00Kernel067 = args[20].dat->size[1];
  int xdim21_opensbliblock00Kernel067 = args[21].dat->size[0];
  int ydim21_opensbliblock00Kernel067 = args[21].dat->size[1];

  //set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset;
  double * __restrict__ Residual0_B0_p = (double *)(args[0].data + base0);

  int base1 = args[1].dat->base_offset;
  double * __restrict__ Residual1_B0_p = (double *)(args[1].data + base1);

  int base2 = args[2].dat->base_offset;
  double * __restrict__ Residual2_B0_p = (double *)(args[2].data + base2);

  int base3 = args[3].dat->base_offset;
  double * __restrict__ Residual3_B0_p = (double *)(args[3].data + base3);

  int base4 = args[4].dat->base_offset;
  double * __restrict__ Residual4_B0_p = (double *)(args[4].data + base4);

  int base5 = args[5].dat->base_offset;
  double * __restrict__ kappa_B0_p = (double *)(args[5].data + base5);

  int base6 = args[6].dat->base_offset;
  double * __restrict__ rhoE_RKold_B0_p = (double *)(args[6].data + base6);

  int base7 = args[7].dat->base_offset;
  double * __restrict__ rho_RKold_B0_p = (double *)(args[7].data + base7);

  int base8 = args[8].dat->base_offset;
  double * __restrict__ rhou0_RKold_B0_p = (double *)(args[8].data + base8);

  int base9 = args[9].dat->base_offset;
  double * __restrict__ rhou1_RKold_B0_p = (double *)(args[9].data + base9);

  int base10 = args[10].dat->base_offset;
  double * __restrict__ rhou2_RKold_B0_p = (double *)(args[10].data + base10);

  int base11 = args[11].dat->base_offset;
  double * __restrict__ wk0_B0_p = (double *)(args[11].data + base11);

  int base12 = args[12].dat->base_offset;
  double * __restrict__ wk1_B0_p = (double *)(args[12].data + base12);

  int base13 = args[13].dat->base_offset;
  double * __restrict__ wk2_B0_p = (double *)(args[13].data + base13);

  int base14 = args[14].dat->base_offset;
  double * __restrict__ wk3_B0_p = (double *)(args[14].data + base14);

  int base15 = args[15].dat->base_offset;
  double * __restrict__ wk4_B0_p = (double *)(args[15].data + base15);

  int base16 = args[16].dat->base_offset;
  double * __restrict__ TVD_filter_B0_p = (double *)(args[16].data + base16);

  int base17 = args[17].dat->base_offset;
  double * __restrict__ rhoE_B0_p = (double *)(args[17].data + base17);

  int base18 = args[18].dat->base_offset;
  double * __restrict__ rho_B0_p = (double *)(args[18].data + base18);

  int base19 = args[19].dat->base_offset;
  double * __restrict__ rhou0_B0_p = (double *)(args[19].data + base19);

  int base20 = args[20].dat->base_offset;
  double * __restrict__ rhou1_B0_p = (double *)(args[20].data + base20);

  int base21 = args[21].dat->base_offset;
  double * __restrict__ rhou2_B0_p = (double *)(args[21].data + base21);




  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_host(args, 23);
  ops_halo_exchanges(args,23,range);
  ops_H_D_exchanges_host(args, 23);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[39].mpi_time += __t1-__t2;
  }

  #pragma omp parallel for collapse(2)
  for ( int n_z=start[2]; n_z<end[2]; n_z++ ){
    for ( int n_y=start[1]; n_y<end[1]; n_y++ ){
      #ifdef __INTEL_COMPILER
      #pragma loop_count(10000)
      #pragma omp simd
      #elif defined(__clang__)
      #pragma clang loop vectorize(assume_safety)
      #elif defined(__GNUC__)
      #pragma GCC ivdep
      #else
      #pragma simd
      #endif
      for ( int n_x=start[0]; n_x<end[0]; n_x++ ){
        int idx[] = {arg_idx[0]+n_x, arg_idx[1]+n_y, arg_idx[2]+n_z};
        const ACC<double> Residual0_B0(xdim0_opensbliblock00Kernel067, ydim0_opensbliblock00Kernel067, Residual0_B0_p + n_x*1 + n_y * xdim0_opensbliblock00Kernel067*1 + n_z * xdim0_opensbliblock00Kernel067 * ydim0_opensbliblock00Kernel067*1);
        const ACC<double> Residual1_B0(xdim1_opensbliblock00Kernel067, ydim1_opensbliblock00Kernel067, Residual1_B0_p + n_x*1 + n_y * xdim1_opensbliblock00Kernel067*1 + n_z * xdim1_opensbliblock00Kernel067 * ydim1_opensbliblock00Kernel067*1);
        const ACC<double> Residual2_B0(xdim2_opensbliblock00Kernel067, ydim2_opensbliblock00Kernel067, Residual2_B0_p + n_x*1 + n_y * xdim2_opensbliblock00Kernel067*1 + n_z * xdim2_opensbliblock00Kernel067 * ydim2_opensbliblock00Kernel067*1);
        const ACC<double> Residual3_B0(xdim3_opensbliblock00Kernel067, ydim3_opensbliblock00Kernel067, Residual3_B0_p + n_x*1 + n_y * xdim3_opensbliblock00Kernel067*1 + n_z * xdim3_opensbliblock00Kernel067 * ydim3_opensbliblock00Kernel067*1);
        const ACC<double> Residual4_B0(xdim4_opensbliblock00Kernel067, ydim4_opensbliblock00Kernel067, Residual4_B0_p + n_x*1 + n_y * xdim4_opensbliblock00Kernel067*1 + n_z * xdim4_opensbliblock00Kernel067 * ydim4_opensbliblock00Kernel067*1);
        const ACC<double> kappa_B0(xdim5_opensbliblock00Kernel067, ydim5_opensbliblock00Kernel067, kappa_B0_p + n_x*1 + n_y * xdim5_opensbliblock00Kernel067*1 + n_z * xdim5_opensbliblock00Kernel067 * ydim5_opensbliblock00Kernel067*1);
        const ACC<double> rhoE_RKold_B0(xdim6_opensbliblock00Kernel067, ydim6_opensbliblock00Kernel067, rhoE_RKold_B0_p + n_x*1 + n_y * xdim6_opensbliblock00Kernel067*1 + n_z * xdim6_opensbliblock00Kernel067 * ydim6_opensbliblock00Kernel067*1);
        const ACC<double> rho_RKold_B0(xdim7_opensbliblock00Kernel067, ydim7_opensbliblock00Kernel067, rho_RKold_B0_p + n_x*1 + n_y * xdim7_opensbliblock00Kernel067*1 + n_z * xdim7_opensbliblock00Kernel067 * ydim7_opensbliblock00Kernel067*1);
        const ACC<double> rhou0_RKold_B0(xdim8_opensbliblock00Kernel067, ydim8_opensbliblock00Kernel067, rhou0_RKold_B0_p + n_x*1 + n_y * xdim8_opensbliblock00Kernel067*1 + n_z * xdim8_opensbliblock00Kernel067 * ydim8_opensbliblock00Kernel067*1);
        const ACC<double> rhou1_RKold_B0(xdim9_opensbliblock00Kernel067, ydim9_opensbliblock00Kernel067, rhou1_RKold_B0_p + n_x*1 + n_y * xdim9_opensbliblock00Kernel067*1 + n_z * xdim9_opensbliblock00Kernel067 * ydim9_opensbliblock00Kernel067*1);
        const ACC<double> rhou2_RKold_B0(xdim10_opensbliblock00Kernel067, ydim10_opensbliblock00Kernel067, rhou2_RKold_B0_p + n_x*1 + n_y * xdim10_opensbliblock00Kernel067*1 + n_z * xdim10_opensbliblock00Kernel067 * ydim10_opensbliblock00Kernel067*1);
        const ACC<double> wk0_B0(xdim11_opensbliblock00Kernel067, ydim11_opensbliblock00Kernel067, wk0_B0_p + n_x*1 + n_y * xdim11_opensbliblock00Kernel067*1 + n_z * xdim11_opensbliblock00Kernel067 * ydim11_opensbliblock00Kernel067*1);
        const ACC<double> wk1_B0(xdim12_opensbliblock00Kernel067, ydim12_opensbliblock00Kernel067, wk1_B0_p + n_x*1 + n_y * xdim12_opensbliblock00Kernel067*1 + n_z * xdim12_opensbliblock00Kernel067 * ydim12_opensbliblock00Kernel067*1);
        const ACC<double> wk2_B0(xdim13_opensbliblock00Kernel067, ydim13_opensbliblock00Kernel067, wk2_B0_p + n_x*1 + n_y * xdim13_opensbliblock00Kernel067*1 + n_z * xdim13_opensbliblock00Kernel067 * ydim13_opensbliblock00Kernel067*1);
        const ACC<double> wk3_B0(xdim14_opensbliblock00Kernel067, ydim14_opensbliblock00Kernel067, wk3_B0_p + n_x*1 + n_y * xdim14_opensbliblock00Kernel067*1 + n_z * xdim14_opensbliblock00Kernel067 * ydim14_opensbliblock00Kernel067*1);
        const ACC<double> wk4_B0(xdim15_opensbliblock00Kernel067, ydim15_opensbliblock00Kernel067, wk4_B0_p + n_x*1 + n_y * xdim15_opensbliblock00Kernel067*1 + n_z * xdim15_opensbliblock00Kernel067 * ydim15_opensbliblock00Kernel067*1);
        ACC<double> TVD_filter_B0(xdim16_opensbliblock00Kernel067, ydim16_opensbliblock00Kernel067, TVD_filter_B0_p + n_x*1 + n_y * xdim16_opensbliblock00Kernel067*1 + n_z * xdim16_opensbliblock00Kernel067 * ydim16_opensbliblock00Kernel067*1);
        ACC<double> rhoE_B0(xdim17_opensbliblock00Kernel067, ydim17_opensbliblock00Kernel067, rhoE_B0_p + n_x*1 + n_y * xdim17_opensbliblock00Kernel067*1 + n_z * xdim17_opensbliblock00Kernel067 * ydim17_opensbliblock00Kernel067*1);
        ACC<double> rho_B0(xdim18_opensbliblock00Kernel067, ydim18_opensbliblock00Kernel067, rho_B0_p + n_x*1 + n_y * xdim18_opensbliblock00Kernel067*1 + n_z * xdim18_opensbliblock00Kernel067 * ydim18_opensbliblock00Kernel067*1);
        ACC<double> rhou0_B0(xdim19_opensbliblock00Kernel067, ydim19_opensbliblock00Kernel067, rhou0_B0_p + n_x*1 + n_y * xdim19_opensbliblock00Kernel067*1 + n_z * xdim19_opensbliblock00Kernel067 * ydim19_opensbliblock00Kernel067*1);
        ACC<double> rhou1_B0(xdim20_opensbliblock00Kernel067, ydim20_opensbliblock00Kernel067, rhou1_B0_p + n_x*1 + n_y * xdim20_opensbliblock00Kernel067*1 + n_z * xdim20_opensbliblock00Kernel067 * ydim20_opensbliblock00Kernel067*1);
        ACC<double> rhou2_B0(xdim21_opensbliblock00Kernel067, ydim21_opensbliblock00Kernel067, rhou2_B0_p + n_x*1 + n_y * xdim21_opensbliblock00Kernel067*1 + n_z * xdim21_opensbliblock00Kernel067 * ydim21_opensbliblock00Kernel067*1);
        
   double Grid_0 = 0.0;
   double Grid_1 = 0.0;
   double Grid_2 = 0.0;
   double Wall = 0.0;
   Grid_0 = idx[0];

   Grid_1 = idx[1];

   Grid_2 = idx[2];

   Wall = ((Grid_1 <= 5) ? (
   0
)
: (
   1
));

    TVD_filter_B0(0,0,0) = ((fmax(kappa_B0(1,0,0), fmax(kappa_B0(0,1,0), fmax(kappa_B0(0,0,1), fmax(kappa_B0(0,0,-1),
      fmax(kappa_B0(-1,0,0), fmax(kappa_B0(0,-1,0), kappa_B0(0,0,0))))))) >= Ducros_select) ? (
   1
)
: (
   0.0
));

    rho_B0(0,0,0) = (-(-wk0_B0(-1,0,0) + wk0_B0(0,0,0))*invDelta0block0 - (-rho_RKold_B0(0,0,-1) +
      rho_RKold_B0(0,0,0))*invDelta2block0 - (-Residual0_B0(0,-1,0) +
      Residual0_B0(0,0,0))*invDelta1block0*Wall)*dt*TVD_filter_B0(0,0,0) + rho_B0(0,0,0);

    rhou0_B0(0,0,0) = (-(-wk1_B0(-1,0,0) + wk1_B0(0,0,0))*invDelta0block0 - (-rhou0_RKold_B0(0,0,-1) +
      rhou0_RKold_B0(0,0,0))*invDelta2block0 - (-Residual1_B0(0,-1,0) +
      Residual1_B0(0,0,0))*invDelta1block0*Wall)*dt*TVD_filter_B0(0,0,0) + rhou0_B0(0,0,0);

    rhou1_B0(0,0,0) = (-(-wk2_B0(-1,0,0) + wk2_B0(0,0,0))*invDelta0block0 - (-rhou1_RKold_B0(0,0,-1) +
      rhou1_RKold_B0(0,0,0))*invDelta2block0 - (-Residual2_B0(0,-1,0) +
      Residual2_B0(0,0,0))*invDelta1block0*Wall)*dt*TVD_filter_B0(0,0,0) + rhou1_B0(0,0,0);

    rhou2_B0(0,0,0) = (-(-wk3_B0(-1,0,0) + wk3_B0(0,0,0))*invDelta0block0 - (-rhou2_RKold_B0(0,0,-1) +
      rhou2_RKold_B0(0,0,0))*invDelta2block0 - (-Residual3_B0(0,-1,0) +
      Residual3_B0(0,0,0))*invDelta1block0*Wall)*dt*TVD_filter_B0(0,0,0) + rhou2_B0(0,0,0);

    rhoE_B0(0,0,0) = (-(-wk4_B0(-1,0,0) + wk4_B0(0,0,0))*invDelta0block0 - (-rhoE_RKold_B0(0,0,-1) +
      rhoE_RKold_B0(0,0,0))*invDelta2block0 - (-Residual4_B0(0,-1,0) +
      Residual4_B0(0,0,0))*invDelta1block0*Wall)*dt*TVD_filter_B0(0,0,0) + rhoE_B0(0,0,0);


      }
    }
  }
  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[39].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_host(args, 23);
  ops_set_halo_dirtybit3(&args[16],range);
  ops_set_halo_dirtybit3(&args[17],range);
  ops_set_halo_dirtybit3(&args[18],range);
  ops_set_halo_dirtybit3(&args[19],range);
  ops_set_halo_dirtybit3(&args[20],range);
  ops_set_halo_dirtybit3(&args[21],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[39].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[39].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[39].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[39].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[39].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[39].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[39].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[39].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[39].transfer += ops_compute_transfer(dim, start, end, &arg7);
    block->instance->OPS_kernels[39].transfer += ops_compute_transfer(dim, start, end, &arg8);
    block->instance->OPS_kernels[39].transfer += ops_compute_transfer(dim, start, end, &arg9);
    block->instance->OPS_kernels[39].transfer += ops_compute_transfer(dim, start, end, &arg10);
    block->instance->OPS_kernels[39].transfer += ops_compute_transfer(dim, start, end, &arg11);
    block->instance->OPS_kernels[39].transfer += ops_compute_transfer(dim, start, end, &arg12);
    block->instance->OPS_kernels[39].transfer += ops_compute_transfer(dim, start, end, &arg13);
    block->instance->OPS_kernels[39].transfer += ops_compute_transfer(dim, start, end, &arg14);
    block->instance->OPS_kernels[39].transfer += ops_compute_transfer(dim, start, end, &arg15);
    block->instance->OPS_kernels[39].transfer += ops_compute_transfer(dim, start, end, &arg16);
    block->instance->OPS_kernels[39].transfer += ops_compute_transfer(dim, start, end, &arg17);
    block->instance->OPS_kernels[39].transfer += ops_compute_transfer(dim, start, end, &arg18);
    block->instance->OPS_kernels[39].transfer += ops_compute_transfer(dim, start, end, &arg19);
    block->instance->OPS_kernels[39].transfer += ops_compute_transfer(dim, start, end, &arg20);
    block->instance->OPS_kernels[39].transfer += ops_compute_transfer(dim, start, end, &arg21);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel067(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11,
 ops_arg arg12, ops_arg arg13, ops_arg arg14, ops_arg arg15,
 ops_arg arg16, ops_arg arg17, ops_arg arg18, ops_arg arg19,
 ops_arg arg20, ops_arg arg21, ops_arg arg22) {
  ops_arg args[23] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22 };

  //create kernel descriptor and pass it to ops_enqueue_kernel
  create_kerneldesc_and_enque(name, args, 23, 39, dim, 0, range, block, ops_par_loop_opensbliblock00Kernel067_execute);
}
#endif
