//
// auto-generated by ops.py
//
__constant__ int dims_opensbliblock00Kernel064 [18][2];
static int dims_opensbliblock00Kernel064_h [18][2] = {{0}};

//user function
__device__

 void opensbliblock00Kernel064_gpu(const ACC<double> &D00_B0,
  const ACC<double> &D01_B0,
  const ACC<double> &a_B0,
  const
ACC<double> &detJ_B0,
  const ACC<double> &kappa_B0,
  const ACC<double> &rhoE_B0,
  const ACC<double> &rho_B0,
  const
ACC<double> &rhou0_B0,
  const ACC<double> &rhou1_B0,
  const ACC<double> &rhou2_B0,
  const ACC<double> &u0_B0,
  const
ACC<double> &u1_B0,
  const ACC<double> &u2_B0,
  ACC<double> &wk0_B0,
  ACC<double> &wk1_B0,
  ACC<double> &wk2_B0,
  ACC<double>
&wk3_B0,
  ACC<double> &wk4_B0)
{
   double AVG_0_0_LEV_00 = 0.0;
   double AVG_0_0_LEV_01 = 0.0;
   double AVG_0_0_LEV_02 = 0.0;
   double AVG_0_0_LEV_03 = 0.0;
   double AVG_0_0_LEV_04 = 0.0;
   double AVG_0_0_LEV_10 = 0.0;
   double AVG_0_0_LEV_11 = 0.0;
   double AVG_0_0_LEV_12 = 0.0;
   double AVG_0_0_LEV_13 = 0.0;
   double AVG_0_0_LEV_14 = 0.0;
   double AVG_0_0_LEV_20 = 0.0;
   double AVG_0_0_LEV_21 = 0.0;
   double AVG_0_0_LEV_22 = 0.0;
   double AVG_0_0_LEV_30 = 0.0;
   double AVG_0_0_LEV_31 = 0.0;
   double AVG_0_0_LEV_32 = 0.0;
   double AVG_0_0_LEV_33 = 0.0;
   double AVG_0_0_LEV_34 = 0.0;
   double AVG_0_0_LEV_40 = 0.0;
   double AVG_0_0_LEV_41 = 0.0;
   double AVG_0_0_LEV_42 = 0.0;
   double AVG_0_0_LEV_43 = 0.0;
   double AVG_0_0_LEV_44 = 0.0;
   double AVG_0_D00 = 0.0;
   double AVG_0_D01 = 0.0;
   double AVG_0_REV_00 = 0.0;
   double AVG_0_REV_01 = 0.0;
   double AVG_0_REV_03 = 0.0;
   double AVG_0_REV_04 = 0.0;
   double AVG_0_REV_10 = 0.0;
   double AVG_0_REV_11 = 0.0;
   double AVG_0_REV_12 = 0.0;
   double AVG_0_REV_13 = 0.0;
   double AVG_0_REV_14 = 0.0;
   double AVG_0_REV_20 = 0.0;
   double AVG_0_REV_21 = 0.0;
   double AVG_0_REV_22 = 0.0;
   double AVG_0_REV_23 = 0.0;
   double AVG_0_REV_24 = 0.0;
   double AVG_0_REV_30 = 0.0;
   double AVG_0_REV_31 = 0.0;
   double AVG_0_REV_33 = 0.0;
   double AVG_0_REV_34 = 0.0;
   double AVG_0_REV_40 = 0.0;
   double AVG_0_REV_41 = 0.0;
   double AVG_0_REV_42 = 0.0;
   double AVG_0_REV_43 = 0.0;
   double AVG_0_REV_44 = 0.0;
   double AVG_0_a = 0.0;
   double AVG_0_detJ = 0.0;
   double AVG_0_rho = 0.0;
   double AVG_0_u0 = 0.0;
   double AVG_0_u1 = 0.0;
   double AVG_0_u2 = 0.0;
   double S = 0.0;
   double alpha_00 = 0.0;
   double alpha_01 = 0.0;
   double alpha_02 = 0.0;
   double alpha_10 = 0.0;
   double alpha_11 = 0.0;
   double alpha_12 = 0.0;
   double alpha_20 = 0.0;
   double alpha_21 = 0.0;
   double alpha_22 = 0.0;
   double alpha_30 = 0.0;
   double alpha_31 = 0.0;
   double alpha_32 = 0.0;
   double alpha_40 = 0.0;
   double alpha_41 = 0.0;
   double alpha_42 = 0.0;
   double g_00 = 0.0;
   double g_01 = 0.0;
   double g_10 = 0.0;
   double g_11 = 0.0;
   double g_20 = 0.0;
   double g_21 = 0.0;
   double g_30 = 0.0;
   double g_31 = 0.0;
   double g_40 = 0.0;
   double g_41 = 0.0;
   double gamma_0 = 0.0;
   double gamma_1 = 0.0;
   double gamma_2 = 0.0;
   double gamma_3 = 0.0;
   double gamma_4 = 0.0;
   double inv_AVG_a = 0.0;
   double inv_AVG_met_fact = 0.0;
   double inv_AVG_rho = 0.0;
   double phi_0 = 0.0;
   double phi_1 = 0.0;
   double phi_2 = 0.0;
   double phi_3 = 0.0;
   double phi_4 = 0.0;
   double phi_star_0 = 0.0;
   double phi_star_1 = 0.0;
   double phi_star_2 = 0.0;
   double phi_star_3 = 0.0;
   double phi_star_4 = 0.0;
   double sigma_0_0 = 0.0;
   double sigma_0_1 = 0.0;
   double sigma_0_2 = 0.0;
   double sigma_0_3 = 0.0;
   double sigma_0_4 = 0.0;
   double sigma_1_0 = 0.0;
   double sigma_1_1 = 0.0;
   double sigma_1_2 = 0.0;
   double sigma_1_3 = 0.0;
   double sigma_1_4 = 0.0;
   double t1 = 0.0;
   double t2 = 0.0;
   double theta_0 = 0.0;
   double theta_1 = 0.0;
   double theta_2 = 0.0;
   double theta_3 = 0.0;
   double theta_4 = 0.0;
   double theta_hat_00 = 0.0;
   double theta_hat_01 = 0.0;
   double theta_hat_10 = 0.0;
   double theta_hat_11 = 0.0;
   double theta_hat_20 = 0.0;
   double theta_hat_21 = 0.0;
   double theta_hat_30 = 0.0;
   double theta_hat_31 = 0.0;
   double theta_hat_40 = 0.0;
   double theta_hat_41 = 0.0;
   double ws_lambda_00 = 0.0;
   double ws_lambda_11 = 0.0;
   double ws_lambda_22 = 0.0;
   double ws_lambda_33 = 0.0;
   double ws_lambda_44 = 0.0;
    if (fmax(kappa_B0(1,0,0), fmax(kappa_B0(2,0,0), fmax(kappa_B0(-3,0,0), fmax(kappa_B0(-2,0,0), fmax(kappa_B0(-1,0,0),
      kappa_B0(0,0,0)))))) > Ducros_check){

      AVG_0_u0 = ((1.0/2.0))*(u0_B0(0,0,0) + u0_B0(-1,0,0));

      AVG_0_u2 = ((1.0/2.0))*(u2_B0(0,0,0) + u2_B0(-1,0,0));

      AVG_0_rho = ((1.0/2.0))*(rho_B0(0,0,0) + rho_B0(-1,0,0));

      AVG_0_u1 = ((1.0/2.0))*(u1_B0(0,0,0) + u1_B0(-1,0,0));

      AVG_0_a = ((1.0/2.0))*(a_B0(0,0,0) + a_B0(-1,0,0));

      AVG_0_D01 = ((1.0/2.0))*(D01_B0(0,0,0) + D01_B0(1,0,0));

      AVG_0_D00 = ((1.0/2.0))*(D00_B0(0,0,0) + D00_B0(1,0,0));

      AVG_0_detJ = ((1.0/2.0))*(detJ_B0(0,0,0) + detJ_B0(1,0,0));

      inv_AVG_a = 1.0/(AVG_0_a);

      inv_AVG_rho = 1.0/(AVG_0_rho);

      inv_AVG_met_fact = pow((AVG_0_D00*AVG_0_D00) + (AVG_0_D01*AVG_0_D01), (-1.0/2.0));

       AVG_0_0_LEV_00 = -(1.0/2.0)*(-2*AVG_0_D00 - (AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*AVG_0_D00 -
            (AVG_0_u1*AVG_0_u1)*(inv_AVG_a*inv_AVG_a)*AVG_0_D00 - (AVG_0_u2*AVG_0_u2)*(inv_AVG_a*inv_AVG_a)*AVG_0_D00 -
            2*AVG_0_D01*AVG_0_u2*inv_AVG_rho + (AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*gama*AVG_0_D00 +
            (AVG_0_u1*AVG_0_u1)*(inv_AVG_a*inv_AVG_a)*gama*AVG_0_D00 +
            (AVG_0_u2*AVG_0_u2)*(inv_AVG_a*inv_AVG_a)*gama*AVG_0_D00)*inv_AVG_met_fact;

      AVG_0_0_LEV_01 = (inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_0_D00*AVG_0_u0*inv_AVG_met_fact;

      AVG_0_0_LEV_02 = (inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_0_D00*AVG_0_u1*inv_AVG_met_fact;

       AVG_0_0_LEV_03 = (-AVG_0_D01*inv_AVG_rho - (inv_AVG_a*inv_AVG_a)*AVG_0_D00*AVG_0_u2 +
            (inv_AVG_a*inv_AVG_a)*gama*AVG_0_D00*AVG_0_u2)*inv_AVG_met_fact;

      AVG_0_0_LEV_04 = -(inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_0_D00*inv_AVG_met_fact;

       AVG_0_0_LEV_10 = -(1.0/2.0)*(-2*AVG_0_D01 - (AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*AVG_0_D01 -
            (AVG_0_u1*AVG_0_u1)*(inv_AVG_a*inv_AVG_a)*AVG_0_D01 - (AVG_0_u2*AVG_0_u2)*(inv_AVG_a*inv_AVG_a)*AVG_0_D01 +
            2*AVG_0_D00*AVG_0_u2*inv_AVG_rho + (AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*gama*AVG_0_D01 +
            (AVG_0_u1*AVG_0_u1)*(inv_AVG_a*inv_AVG_a)*gama*AVG_0_D01 +
            (AVG_0_u2*AVG_0_u2)*(inv_AVG_a*inv_AVG_a)*gama*AVG_0_D01)*inv_AVG_met_fact;

      AVG_0_0_LEV_11 = (inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_0_D01*AVG_0_u0*inv_AVG_met_fact;

      AVG_0_0_LEV_12 = (inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_0_D01*AVG_0_u1*inv_AVG_met_fact;

       AVG_0_0_LEV_13 = (AVG_0_D00*inv_AVG_rho - (inv_AVG_a*inv_AVG_a)*AVG_0_D01*AVG_0_u2 +
            (inv_AVG_a*inv_AVG_a)*gama*AVG_0_D01*AVG_0_u2)*inv_AVG_met_fact;

      AVG_0_0_LEV_14 = -(inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_0_D01*inv_AVG_met_fact;

      AVG_0_0_LEV_20 = (AVG_0_D00*AVG_0_u1 - AVG_0_D01*AVG_0_u0)*inv_AVG_met_fact*inv_AVG_rho;

      AVG_0_0_LEV_21 = AVG_0_D01*inv_AVG_met_fact*inv_AVG_rho;

      AVG_0_0_LEV_22 = -AVG_0_D00*inv_AVG_met_fact*inv_AVG_rho;

       AVG_0_0_LEV_30 = -0.353553390593274*((AVG_0_u0*AVG_0_u0) + (AVG_0_u1*AVG_0_u1) + (AVG_0_u2*AVG_0_u2) -
            (AVG_0_u0*AVG_0_u0)*gama - (AVG_0_u1*AVG_0_u1)*gama - (AVG_0_u2*AVG_0_u2)*gama +
            2*AVG_0_D00*AVG_0_a*AVG_0_u0*inv_AVG_met_fact +
            2*AVG_0_D01*AVG_0_a*AVG_0_u1*inv_AVG_met_fact)*inv_AVG_a*inv_AVG_rho;

       AVG_0_0_LEV_31 = 0.707106781186547*(-gama*AVG_0_u0 + AVG_0_D00*AVG_0_a*inv_AVG_met_fact +
            AVG_0_u0)*inv_AVG_a*inv_AVG_rho;

       AVG_0_0_LEV_32 = 0.707106781186547*(-gama*AVG_0_u1 + AVG_0_D01*AVG_0_a*inv_AVG_met_fact +
            AVG_0_u1)*inv_AVG_a*inv_AVG_rho;

      AVG_0_0_LEV_33 = -0.707106781186547*gamma_m1*AVG_0_u2*inv_AVG_a*inv_AVG_rho;

      AVG_0_0_LEV_34 = 0.707106781186547*gamma_m1*inv_AVG_a*inv_AVG_rho;

       AVG_0_0_LEV_40 = 0.353553390593274*(-(AVG_0_u0*AVG_0_u0) - (AVG_0_u1*AVG_0_u1) - (AVG_0_u2*AVG_0_u2) +
            (AVG_0_u0*AVG_0_u0)*gama + (AVG_0_u1*AVG_0_u1)*gama + (AVG_0_u2*AVG_0_u2)*gama +
            2*AVG_0_D00*AVG_0_a*AVG_0_u0*inv_AVG_met_fact +
            2*AVG_0_D01*AVG_0_a*AVG_0_u1*inv_AVG_met_fact)*inv_AVG_a*inv_AVG_rho;

       AVG_0_0_LEV_41 = -0.707106781186547*(-AVG_0_u0 + gama*AVG_0_u0 +
            AVG_0_D00*AVG_0_a*inv_AVG_met_fact)*inv_AVG_a*inv_AVG_rho;

       AVG_0_0_LEV_42 = -0.707106781186547*(-AVG_0_u1 + gama*AVG_0_u1 +
            AVG_0_D01*AVG_0_a*inv_AVG_met_fact)*inv_AVG_a*inv_AVG_rho;

      AVG_0_0_LEV_43 = -0.707106781186547*gamma_m1*AVG_0_u2*inv_AVG_a*inv_AVG_rho;

      AVG_0_0_LEV_44 = 0.707106781186547*gamma_m1*inv_AVG_a*inv_AVG_rho;

       alpha_00 = (-rho_B0(-1,0,0) + rho_B0(0,0,0))*AVG_0_0_LEV_00 + (-rhoE_B0(-1,0,0) + rhoE_B0(0,0,0))*AVG_0_0_LEV_04
            + (-rhou0_B0(-1,0,0) + rhou0_B0(0,0,0))*AVG_0_0_LEV_01 + (-rhou1_B0(-1,0,0) +
            rhou1_B0(0,0,0))*AVG_0_0_LEV_02 + (-rhou2_B0(-1,0,0) + rhou2_B0(0,0,0))*AVG_0_0_LEV_03;

       alpha_10 = (-rho_B0(-1,0,0) + rho_B0(0,0,0))*AVG_0_0_LEV_10 + (-rhoE_B0(-1,0,0) + rhoE_B0(0,0,0))*AVG_0_0_LEV_14
            + (-rhou0_B0(-1,0,0) + rhou0_B0(0,0,0))*AVG_0_0_LEV_11 + (-rhou1_B0(-1,0,0) +
            rhou1_B0(0,0,0))*AVG_0_0_LEV_12 + (-rhou2_B0(-1,0,0) + rhou2_B0(0,0,0))*AVG_0_0_LEV_13;

       alpha_20 = (-rho_B0(-1,0,0) + rho_B0(0,0,0))*AVG_0_0_LEV_20 + (-rhou0_B0(-1,0,0) +
            rhou0_B0(0,0,0))*AVG_0_0_LEV_21 + (-rhou1_B0(-1,0,0) + rhou1_B0(0,0,0))*AVG_0_0_LEV_22;

       alpha_30 = (-rho_B0(-1,0,0) + rho_B0(0,0,0))*AVG_0_0_LEV_30 + (-rhoE_B0(-1,0,0) + rhoE_B0(0,0,0))*AVG_0_0_LEV_34
            + (-rhou0_B0(-1,0,0) + rhou0_B0(0,0,0))*AVG_0_0_LEV_31 + (-rhou1_B0(-1,0,0) +
            rhou1_B0(0,0,0))*AVG_0_0_LEV_32 + (-rhou2_B0(-1,0,0) + rhou2_B0(0,0,0))*AVG_0_0_LEV_33;

       alpha_40 = (-rho_B0(-1,0,0) + rho_B0(0,0,0))*AVG_0_0_LEV_40 + (-rhoE_B0(-1,0,0) + rhoE_B0(0,0,0))*AVG_0_0_LEV_44
            + (-rhou0_B0(-1,0,0) + rhou0_B0(0,0,0))*AVG_0_0_LEV_41 + (-rhou1_B0(-1,0,0) +
            rhou1_B0(0,0,0))*AVG_0_0_LEV_42 + (-rhou2_B0(-1,0,0) + rhou2_B0(0,0,0))*AVG_0_0_LEV_43;

      AVG_0_u0 = ((1.0/2.0))*(u0_B0(0,0,0) + u0_B0(1,0,0));

      AVG_0_u2 = ((1.0/2.0))*(u2_B0(0,0,0) + u2_B0(1,0,0));

      AVG_0_rho = ((1.0/2.0))*(rho_B0(0,0,0) + rho_B0(1,0,0));

      AVG_0_u1 = ((1.0/2.0))*(u1_B0(0,0,0) + u1_B0(1,0,0));

      AVG_0_a = ((1.0/2.0))*(a_B0(0,0,0) + a_B0(1,0,0));

      AVG_0_D01 = ((1.0/2.0))*(D01_B0(0,0,0) + D01_B0(1,0,0));

      AVG_0_D00 = ((1.0/2.0))*(D00_B0(0,0,0) + D00_B0(1,0,0));

      AVG_0_detJ = ((1.0/2.0))*(detJ_B0(0,0,0) + detJ_B0(1,0,0));

      inv_AVG_a = 1.0/(AVG_0_a);

      inv_AVG_rho = 1.0/(AVG_0_rho);

      inv_AVG_met_fact = pow((AVG_0_D00*AVG_0_D00) + (AVG_0_D01*AVG_0_D01), (-1.0/2.0));

       AVG_0_0_LEV_00 = -(1.0/2.0)*(-2*AVG_0_D00 - (AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*AVG_0_D00 -
            (AVG_0_u1*AVG_0_u1)*(inv_AVG_a*inv_AVG_a)*AVG_0_D00 - (AVG_0_u2*AVG_0_u2)*(inv_AVG_a*inv_AVG_a)*AVG_0_D00 -
            2*AVG_0_D01*AVG_0_u2*inv_AVG_rho + (AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*gama*AVG_0_D00 +
            (AVG_0_u1*AVG_0_u1)*(inv_AVG_a*inv_AVG_a)*gama*AVG_0_D00 +
            (AVG_0_u2*AVG_0_u2)*(inv_AVG_a*inv_AVG_a)*gama*AVG_0_D00)*inv_AVG_met_fact;

      AVG_0_0_LEV_01 = (inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_0_D00*AVG_0_u0*inv_AVG_met_fact;

      AVG_0_0_LEV_02 = (inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_0_D00*AVG_0_u1*inv_AVG_met_fact;

       AVG_0_0_LEV_03 = (-AVG_0_D01*inv_AVG_rho - (inv_AVG_a*inv_AVG_a)*AVG_0_D00*AVG_0_u2 +
            (inv_AVG_a*inv_AVG_a)*gama*AVG_0_D00*AVG_0_u2)*inv_AVG_met_fact;

      AVG_0_0_LEV_04 = -(inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_0_D00*inv_AVG_met_fact;

       AVG_0_0_LEV_10 = -(1.0/2.0)*(-2*AVG_0_D01 - (AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*AVG_0_D01 -
            (AVG_0_u1*AVG_0_u1)*(inv_AVG_a*inv_AVG_a)*AVG_0_D01 - (AVG_0_u2*AVG_0_u2)*(inv_AVG_a*inv_AVG_a)*AVG_0_D01 +
            2*AVG_0_D00*AVG_0_u2*inv_AVG_rho + (AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*gama*AVG_0_D01 +
            (AVG_0_u1*AVG_0_u1)*(inv_AVG_a*inv_AVG_a)*gama*AVG_0_D01 +
            (AVG_0_u2*AVG_0_u2)*(inv_AVG_a*inv_AVG_a)*gama*AVG_0_D01)*inv_AVG_met_fact;

      AVG_0_0_LEV_11 = (inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_0_D01*AVG_0_u0*inv_AVG_met_fact;

      AVG_0_0_LEV_12 = (inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_0_D01*AVG_0_u1*inv_AVG_met_fact;

       AVG_0_0_LEV_13 = (AVG_0_D00*inv_AVG_rho - (inv_AVG_a*inv_AVG_a)*AVG_0_D01*AVG_0_u2 +
            (inv_AVG_a*inv_AVG_a)*gama*AVG_0_D01*AVG_0_u2)*inv_AVG_met_fact;

      AVG_0_0_LEV_14 = -(inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_0_D01*inv_AVG_met_fact;

      AVG_0_0_LEV_20 = (AVG_0_D00*AVG_0_u1 - AVG_0_D01*AVG_0_u0)*inv_AVG_met_fact*inv_AVG_rho;

      AVG_0_0_LEV_21 = AVG_0_D01*inv_AVG_met_fact*inv_AVG_rho;

      AVG_0_0_LEV_22 = -AVG_0_D00*inv_AVG_met_fact*inv_AVG_rho;

       AVG_0_0_LEV_30 = -0.353553390593274*((AVG_0_u0*AVG_0_u0) + (AVG_0_u1*AVG_0_u1) + (AVG_0_u2*AVG_0_u2) -
            (AVG_0_u0*AVG_0_u0)*gama - (AVG_0_u1*AVG_0_u1)*gama - (AVG_0_u2*AVG_0_u2)*gama +
            2*AVG_0_D00*AVG_0_a*AVG_0_u0*inv_AVG_met_fact +
            2*AVG_0_D01*AVG_0_a*AVG_0_u1*inv_AVG_met_fact)*inv_AVG_a*inv_AVG_rho;

       AVG_0_0_LEV_31 = 0.707106781186547*(-gama*AVG_0_u0 + AVG_0_D00*AVG_0_a*inv_AVG_met_fact +
            AVG_0_u0)*inv_AVG_a*inv_AVG_rho;

       AVG_0_0_LEV_32 = 0.707106781186547*(-gama*AVG_0_u1 + AVG_0_D01*AVG_0_a*inv_AVG_met_fact +
            AVG_0_u1)*inv_AVG_a*inv_AVG_rho;

      AVG_0_0_LEV_33 = -0.707106781186547*gamma_m1*AVG_0_u2*inv_AVG_a*inv_AVG_rho;

      AVG_0_0_LEV_34 = 0.707106781186547*gamma_m1*inv_AVG_a*inv_AVG_rho;

       AVG_0_0_LEV_40 = 0.353553390593274*(-(AVG_0_u0*AVG_0_u0) - (AVG_0_u1*AVG_0_u1) - (AVG_0_u2*AVG_0_u2) +
            (AVG_0_u0*AVG_0_u0)*gama + (AVG_0_u1*AVG_0_u1)*gama + (AVG_0_u2*AVG_0_u2)*gama +
            2*AVG_0_D00*AVG_0_a*AVG_0_u0*inv_AVG_met_fact +
            2*AVG_0_D01*AVG_0_a*AVG_0_u1*inv_AVG_met_fact)*inv_AVG_a*inv_AVG_rho;

       AVG_0_0_LEV_41 = -0.707106781186547*(-AVG_0_u0 + gama*AVG_0_u0 +
            AVG_0_D00*AVG_0_a*inv_AVG_met_fact)*inv_AVG_a*inv_AVG_rho;

       AVG_0_0_LEV_42 = -0.707106781186547*(-AVG_0_u1 + gama*AVG_0_u1 +
            AVG_0_D01*AVG_0_a*inv_AVG_met_fact)*inv_AVG_a*inv_AVG_rho;

      AVG_0_0_LEV_43 = -0.707106781186547*gamma_m1*AVG_0_u2*inv_AVG_a*inv_AVG_rho;

      AVG_0_0_LEV_44 = 0.707106781186547*gamma_m1*inv_AVG_a*inv_AVG_rho;

       alpha_01 = (-rho_B0(0,0,0) + rho_B0(1,0,0))*AVG_0_0_LEV_00 + (-rhoE_B0(0,0,0) + rhoE_B0(1,0,0))*AVG_0_0_LEV_04 +
            (-rhou0_B0(0,0,0) + rhou0_B0(1,0,0))*AVG_0_0_LEV_01 + (-rhou1_B0(0,0,0) + rhou1_B0(1,0,0))*AVG_0_0_LEV_02 +
            (-rhou2_B0(0,0,0) + rhou2_B0(1,0,0))*AVG_0_0_LEV_03;

       alpha_11 = (-rho_B0(0,0,0) + rho_B0(1,0,0))*AVG_0_0_LEV_10 + (-rhoE_B0(0,0,0) + rhoE_B0(1,0,0))*AVG_0_0_LEV_14 +
            (-rhou0_B0(0,0,0) + rhou0_B0(1,0,0))*AVG_0_0_LEV_11 + (-rhou1_B0(0,0,0) + rhou1_B0(1,0,0))*AVG_0_0_LEV_12 +
            (-rhou2_B0(0,0,0) + rhou2_B0(1,0,0))*AVG_0_0_LEV_13;

       alpha_21 = (-rho_B0(0,0,0) + rho_B0(1,0,0))*AVG_0_0_LEV_20 + (-rhou0_B0(0,0,0) + rhou0_B0(1,0,0))*AVG_0_0_LEV_21
            + (-rhou1_B0(0,0,0) + rhou1_B0(1,0,0))*AVG_0_0_LEV_22;

       alpha_31 = (-rho_B0(0,0,0) + rho_B0(1,0,0))*AVG_0_0_LEV_30 + (-rhoE_B0(0,0,0) + rhoE_B0(1,0,0))*AVG_0_0_LEV_34 +
            (-rhou0_B0(0,0,0) + rhou0_B0(1,0,0))*AVG_0_0_LEV_31 + (-rhou1_B0(0,0,0) + rhou1_B0(1,0,0))*AVG_0_0_LEV_32 +
            (-rhou2_B0(0,0,0) + rhou2_B0(1,0,0))*AVG_0_0_LEV_33;

       alpha_41 = (-rho_B0(0,0,0) + rho_B0(1,0,0))*AVG_0_0_LEV_40 + (-rhoE_B0(0,0,0) + rhoE_B0(1,0,0))*AVG_0_0_LEV_44 +
            (-rhou0_B0(0,0,0) + rhou0_B0(1,0,0))*AVG_0_0_LEV_41 + (-rhou1_B0(0,0,0) + rhou1_B0(1,0,0))*AVG_0_0_LEV_42 +
            (-rhou2_B0(0,0,0) + rhou2_B0(1,0,0))*AVG_0_0_LEV_43;

      ws_lambda_00 = (D00_B0(0,0,0)*AVG_0_u0 + D01_B0(0,0,0)*AVG_0_u1)*detJ_B0(0,0,0);

      ws_lambda_11 = (D00_B0(0,0,0)*AVG_0_u0 + D01_B0(0,0,0)*AVG_0_u1)*detJ_B0(0,0,0);

      ws_lambda_22 = (D00_B0(0,0,0)*AVG_0_u0 + D01_B0(0,0,0)*AVG_0_u1)*detJ_B0(0,0,0);

       ws_lambda_33 = sqrt((D00_B0(0,0,0)*D00_B0(0,0,0))*(detJ_B0(0,0,0)*detJ_B0(0,0,0)) +
            (D01_B0(0,0,0)*D01_B0(0,0,0))*(detJ_B0(0,0,0)*detJ_B0(0,0,0)))*AVG_0_a +
            D00_B0(0,0,0)*detJ_B0(0,0,0)*AVG_0_u0 + D01_B0(0,0,0)*detJ_B0(0,0,0)*AVG_0_u1;

       ws_lambda_44 = -sqrt((D00_B0(0,0,0)*D00_B0(0,0,0))*(detJ_B0(0,0,0)*detJ_B0(0,0,0)) +
            (D01_B0(0,0,0)*D01_B0(0,0,0))*(detJ_B0(0,0,0)*detJ_B0(0,0,0)))*AVG_0_a +
            D00_B0(0,0,0)*detJ_B0(0,0,0)*AVG_0_u0 + D01_B0(0,0,0)*detJ_B0(0,0,0)*AVG_0_u1;

      AVG_0_REV_00 = AVG_0_D00*inv_AVG_met_fact;

      AVG_0_REV_01 = AVG_0_D01*inv_AVG_met_fact;

      AVG_0_REV_03 = 0.707106781186547*AVG_0_rho*inv_AVG_a;

      AVG_0_REV_04 = 0.707106781186547*AVG_0_rho*inv_AVG_a;

      AVG_0_REV_10 = AVG_0_D00*AVG_0_u0*inv_AVG_met_fact;

      AVG_0_REV_11 = AVG_0_D01*AVG_0_u0*inv_AVG_met_fact;

      AVG_0_REV_12 = AVG_0_D01*AVG_0_rho*inv_AVG_met_fact;

      AVG_0_REV_13 = 0.707106781186547*(AVG_0_D00*AVG_0_a*inv_AVG_met_fact + AVG_0_u0)*AVG_0_rho*inv_AVG_a;

      AVG_0_REV_14 = 0.707106781186547*(-AVG_0_D00*AVG_0_a*inv_AVG_met_fact + AVG_0_u0)*AVG_0_rho*inv_AVG_a;

      AVG_0_REV_20 = AVG_0_D00*AVG_0_u1*inv_AVG_met_fact;

      AVG_0_REV_21 = AVG_0_D01*AVG_0_u1*inv_AVG_met_fact;

      AVG_0_REV_22 = -AVG_0_D00*AVG_0_rho*inv_AVG_met_fact;

      AVG_0_REV_23 = 0.707106781186547*(AVG_0_D01*AVG_0_a*inv_AVG_met_fact + AVG_0_u1)*AVG_0_rho*inv_AVG_a;

      AVG_0_REV_24 = 0.707106781186547*(-AVG_0_D01*AVG_0_a*inv_AVG_met_fact + AVG_0_u1)*AVG_0_rho*inv_AVG_a;

      AVG_0_REV_30 = AVG_0_D00*AVG_0_u2*inv_AVG_met_fact - AVG_0_D01*AVG_0_rho*inv_AVG_met_fact;

      AVG_0_REV_31 = AVG_0_D00*AVG_0_rho*inv_AVG_met_fact + AVG_0_D01*AVG_0_u2*inv_AVG_met_fact;

      AVG_0_REV_33 = 0.707106781186547*AVG_0_rho*AVG_0_u2*inv_AVG_a;

      AVG_0_REV_34 = 0.707106781186547*AVG_0_rho*AVG_0_u2*inv_AVG_a;

       AVG_0_REV_40 = ((1.0/2.0))*((AVG_0_u0*AVG_0_u0) + (AVG_0_u1*AVG_0_u1) +
            (AVG_0_u2*AVG_0_u2))*AVG_0_D00*inv_AVG_met_fact - AVG_0_D01*AVG_0_rho*AVG_0_u2*inv_AVG_met_fact;

       AVG_0_REV_41 = ((1.0/2.0))*((AVG_0_u0*AVG_0_u0) + (AVG_0_u1*AVG_0_u1) +
            (AVG_0_u2*AVG_0_u2))*AVG_0_D01*inv_AVG_met_fact + AVG_0_D00*AVG_0_rho*AVG_0_u2*inv_AVG_met_fact;

      AVG_0_REV_42 = (AVG_0_D01*AVG_0_u0*inv_AVG_met_fact - AVG_0_D00*AVG_0_u1*inv_AVG_met_fact)*AVG_0_rho;

       AVG_0_REV_43 = 0.707106781186547*(((AVG_0_a*AVG_0_a) + ((1.0/2.0))*((AVG_0_u0*AVG_0_u0) + (AVG_0_u1*AVG_0_u1) +
            (AVG_0_u2*AVG_0_u2))*gamma_m1)*invgamma_m1 + (AVG_0_D00*AVG_0_u0*inv_AVG_met_fact +
            AVG_0_D01*AVG_0_u1*inv_AVG_met_fact)*AVG_0_a)*AVG_0_rho*inv_AVG_a;

       AVG_0_REV_44 = 0.707106781186547*(((AVG_0_a*AVG_0_a) + ((1.0/2.0))*((AVG_0_u0*AVG_0_u0) + (AVG_0_u1*AVG_0_u1) +
            (AVG_0_u2*AVG_0_u2))*gamma_m1)*invgamma_m1 - (AVG_0_D00*AVG_0_u0*inv_AVG_met_fact +
            AVG_0_D01*AVG_0_u1*inv_AVG_met_fact)*AVG_0_a)*AVG_0_rho*inv_AVG_a;

      AVG_0_u0 = ((1.0/2.0))*(u0_B0(1,0,0) + u0_B0(2,0,0));

      AVG_0_u2 = ((1.0/2.0))*(u2_B0(1,0,0) + u2_B0(2,0,0));

      AVG_0_rho = ((1.0/2.0))*(rho_B0(1,0,0) + rho_B0(2,0,0));

      AVG_0_u1 = ((1.0/2.0))*(u1_B0(1,0,0) + u1_B0(2,0,0));

      AVG_0_a = ((1.0/2.0))*(a_B0(1,0,0) + a_B0(2,0,0));

      AVG_0_D01 = ((1.0/2.0))*(D01_B0(0,0,0) + D01_B0(1,0,0));

      AVG_0_D00 = ((1.0/2.0))*(D00_B0(0,0,0) + D00_B0(1,0,0));

      AVG_0_detJ = ((1.0/2.0))*(detJ_B0(0,0,0) + detJ_B0(1,0,0));

      inv_AVG_a = 1.0/(AVG_0_a);

      inv_AVG_rho = 1.0/(AVG_0_rho);

      inv_AVG_met_fact = pow((AVG_0_D00*AVG_0_D00) + (AVG_0_D01*AVG_0_D01), (-1.0/2.0));

       AVG_0_0_LEV_00 = -(1.0/2.0)*(-2*AVG_0_D00 - (AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*AVG_0_D00 -
            (AVG_0_u1*AVG_0_u1)*(inv_AVG_a*inv_AVG_a)*AVG_0_D00 - (AVG_0_u2*AVG_0_u2)*(inv_AVG_a*inv_AVG_a)*AVG_0_D00 -
            2*AVG_0_D01*AVG_0_u2*inv_AVG_rho + (AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*gama*AVG_0_D00 +
            (AVG_0_u1*AVG_0_u1)*(inv_AVG_a*inv_AVG_a)*gama*AVG_0_D00 +
            (AVG_0_u2*AVG_0_u2)*(inv_AVG_a*inv_AVG_a)*gama*AVG_0_D00)*inv_AVG_met_fact;

      AVG_0_0_LEV_01 = (inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_0_D00*AVG_0_u0*inv_AVG_met_fact;

      AVG_0_0_LEV_02 = (inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_0_D00*AVG_0_u1*inv_AVG_met_fact;

       AVG_0_0_LEV_03 = (-AVG_0_D01*inv_AVG_rho - (inv_AVG_a*inv_AVG_a)*AVG_0_D00*AVG_0_u2 +
            (inv_AVG_a*inv_AVG_a)*gama*AVG_0_D00*AVG_0_u2)*inv_AVG_met_fact;

      AVG_0_0_LEV_04 = -(inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_0_D00*inv_AVG_met_fact;

       AVG_0_0_LEV_10 = -(1.0/2.0)*(-2*AVG_0_D01 - (AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*AVG_0_D01 -
            (AVG_0_u1*AVG_0_u1)*(inv_AVG_a*inv_AVG_a)*AVG_0_D01 - (AVG_0_u2*AVG_0_u2)*(inv_AVG_a*inv_AVG_a)*AVG_0_D01 +
            2*AVG_0_D00*AVG_0_u2*inv_AVG_rho + (AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*gama*AVG_0_D01 +
            (AVG_0_u1*AVG_0_u1)*(inv_AVG_a*inv_AVG_a)*gama*AVG_0_D01 +
            (AVG_0_u2*AVG_0_u2)*(inv_AVG_a*inv_AVG_a)*gama*AVG_0_D01)*inv_AVG_met_fact;

      AVG_0_0_LEV_11 = (inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_0_D01*AVG_0_u0*inv_AVG_met_fact;

      AVG_0_0_LEV_12 = (inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_0_D01*AVG_0_u1*inv_AVG_met_fact;

       AVG_0_0_LEV_13 = (AVG_0_D00*inv_AVG_rho - (inv_AVG_a*inv_AVG_a)*AVG_0_D01*AVG_0_u2 +
            (inv_AVG_a*inv_AVG_a)*gama*AVG_0_D01*AVG_0_u2)*inv_AVG_met_fact;

      AVG_0_0_LEV_14 = -(inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_0_D01*inv_AVG_met_fact;

      AVG_0_0_LEV_20 = (AVG_0_D00*AVG_0_u1 - AVG_0_D01*AVG_0_u0)*inv_AVG_met_fact*inv_AVG_rho;

      AVG_0_0_LEV_21 = AVG_0_D01*inv_AVG_met_fact*inv_AVG_rho;

      AVG_0_0_LEV_22 = -AVG_0_D00*inv_AVG_met_fact*inv_AVG_rho;

       AVG_0_0_LEV_30 = -0.353553390593274*((AVG_0_u0*AVG_0_u0) + (AVG_0_u1*AVG_0_u1) + (AVG_0_u2*AVG_0_u2) -
            (AVG_0_u0*AVG_0_u0)*gama - (AVG_0_u1*AVG_0_u1)*gama - (AVG_0_u2*AVG_0_u2)*gama +
            2*AVG_0_D00*AVG_0_a*AVG_0_u0*inv_AVG_met_fact +
            2*AVG_0_D01*AVG_0_a*AVG_0_u1*inv_AVG_met_fact)*inv_AVG_a*inv_AVG_rho;

       AVG_0_0_LEV_31 = 0.707106781186547*(-gama*AVG_0_u0 + AVG_0_D00*AVG_0_a*inv_AVG_met_fact +
            AVG_0_u0)*inv_AVG_a*inv_AVG_rho;

       AVG_0_0_LEV_32 = 0.707106781186547*(-gama*AVG_0_u1 + AVG_0_D01*AVG_0_a*inv_AVG_met_fact +
            AVG_0_u1)*inv_AVG_a*inv_AVG_rho;

      AVG_0_0_LEV_33 = -0.707106781186547*gamma_m1*AVG_0_u2*inv_AVG_a*inv_AVG_rho;

      AVG_0_0_LEV_34 = 0.707106781186547*gamma_m1*inv_AVG_a*inv_AVG_rho;

       AVG_0_0_LEV_40 = 0.353553390593274*(-(AVG_0_u0*AVG_0_u0) - (AVG_0_u1*AVG_0_u1) - (AVG_0_u2*AVG_0_u2) +
            (AVG_0_u0*AVG_0_u0)*gama + (AVG_0_u1*AVG_0_u1)*gama + (AVG_0_u2*AVG_0_u2)*gama +
            2*AVG_0_D00*AVG_0_a*AVG_0_u0*inv_AVG_met_fact +
            2*AVG_0_D01*AVG_0_a*AVG_0_u1*inv_AVG_met_fact)*inv_AVG_a*inv_AVG_rho;

       AVG_0_0_LEV_41 = -0.707106781186547*(-AVG_0_u0 + gama*AVG_0_u0 +
            AVG_0_D00*AVG_0_a*inv_AVG_met_fact)*inv_AVG_a*inv_AVG_rho;

       AVG_0_0_LEV_42 = -0.707106781186547*(-AVG_0_u1 + gama*AVG_0_u1 +
            AVG_0_D01*AVG_0_a*inv_AVG_met_fact)*inv_AVG_a*inv_AVG_rho;

      AVG_0_0_LEV_43 = -0.707106781186547*gamma_m1*AVG_0_u2*inv_AVG_a*inv_AVG_rho;

      AVG_0_0_LEV_44 = 0.707106781186547*gamma_m1*inv_AVG_a*inv_AVG_rho;

       alpha_02 = (-rho_B0(1,0,0) + rho_B0(2,0,0))*AVG_0_0_LEV_00 + (-rhoE_B0(1,0,0) + rhoE_B0(2,0,0))*AVG_0_0_LEV_04 +
            (-rhou0_B0(1,0,0) + rhou0_B0(2,0,0))*AVG_0_0_LEV_01 + (-rhou1_B0(1,0,0) + rhou1_B0(2,0,0))*AVG_0_0_LEV_02 +
            (-rhou2_B0(1,0,0) + rhou2_B0(2,0,0))*AVG_0_0_LEV_03;

       alpha_12 = (-rho_B0(1,0,0) + rho_B0(2,0,0))*AVG_0_0_LEV_10 + (-rhoE_B0(1,0,0) + rhoE_B0(2,0,0))*AVG_0_0_LEV_14 +
            (-rhou0_B0(1,0,0) + rhou0_B0(2,0,0))*AVG_0_0_LEV_11 + (-rhou1_B0(1,0,0) + rhou1_B0(2,0,0))*AVG_0_0_LEV_12 +
            (-rhou2_B0(1,0,0) + rhou2_B0(2,0,0))*AVG_0_0_LEV_13;

       alpha_22 = (-rho_B0(1,0,0) + rho_B0(2,0,0))*AVG_0_0_LEV_20 + (-rhou0_B0(1,0,0) + rhou0_B0(2,0,0))*AVG_0_0_LEV_21
            + (-rhou1_B0(1,0,0) + rhou1_B0(2,0,0))*AVG_0_0_LEV_22;

       alpha_32 = (-rho_B0(1,0,0) + rho_B0(2,0,0))*AVG_0_0_LEV_30 + (-rhoE_B0(1,0,0) + rhoE_B0(2,0,0))*AVG_0_0_LEV_34 +
            (-rhou0_B0(1,0,0) + rhou0_B0(2,0,0))*AVG_0_0_LEV_31 + (-rhou1_B0(1,0,0) + rhou1_B0(2,0,0))*AVG_0_0_LEV_32 +
            (-rhou2_B0(1,0,0) + rhou2_B0(2,0,0))*AVG_0_0_LEV_33;

       alpha_42 = (-rho_B0(1,0,0) + rho_B0(2,0,0))*AVG_0_0_LEV_40 + (-rhoE_B0(1,0,0) + rhoE_B0(2,0,0))*AVG_0_0_LEV_44 +
            (-rhou0_B0(1,0,0) + rhou0_B0(2,0,0))*AVG_0_0_LEV_41 + (-rhou1_B0(1,0,0) + rhou1_B0(2,0,0))*AVG_0_0_LEV_42 +
            (-rhou2_B0(1,0,0) + rhou2_B0(2,0,0))*AVG_0_0_LEV_43;

       sigma_0_0 = ((fabs(ws_lambda_00) >= delta_TVD) ? (
   fabs(ws_lambda_00)
)
: (

            ((1.0/2.0))*(1.0/(invdelta_TVD*invdelta_TVD) + (ws_lambda_00*ws_lambda_00))*invdelta_TVD
));

       sigma_0_1 = ((fabs(ws_lambda_11) >= delta_TVD) ? (
   fabs(ws_lambda_11)
)
: (

            ((1.0/2.0))*(1.0/(invdelta_TVD*invdelta_TVD) + (ws_lambda_11*ws_lambda_11))*invdelta_TVD
));

       sigma_0_2 = ((fabs(ws_lambda_22) >= delta_TVD) ? (
   fabs(ws_lambda_22)
)
: (

            ((1.0/2.0))*(1.0/(invdelta_TVD*invdelta_TVD) + (ws_lambda_22*ws_lambda_22))*invdelta_TVD
));

       sigma_0_3 = ((fabs(ws_lambda_33) >= delta_TVD) ? (
   fabs(ws_lambda_33)
)
: (

            ((1.0/2.0))*(1.0/(invdelta_TVD*invdelta_TVD) + (ws_lambda_33*ws_lambda_33))*invdelta_TVD
));

       sigma_0_4 = ((fabs(ws_lambda_44) >= delta_TVD) ? (
   fabs(ws_lambda_44)
)
: (

            ((1.0/2.0))*(1.0/(invdelta_TVD*invdelta_TVD) + (ws_lambda_44*ws_lambda_44))*invdelta_TVD
));

      S = (alpha_01 > 0) ? 1 : ((alpha_01 < 0) ? -1 : 0);

      t1 = fmax(0.0, fmin(S*alpha_00, 2*fabs(alpha_01)));

      t2 = fmin(fabs(alpha_01), 2*S*alpha_00);

      g_00 = S*fmax(t1, t2);

      S = (alpha_11 > 0) ? 1 : ((alpha_11 < 0) ? -1 : 0);

      t1 = fmax(0.0, fmin(S*alpha_10, 2*fabs(alpha_11)));

      t2 = fmin(fabs(alpha_11), 2*S*alpha_10);

      g_10 = S*fmax(t1, t2);

      S = (alpha_21 > 0) ? 1 : ((alpha_21 < 0) ? -1 : 0);

      t1 = fmax(0.0, fmin(S*alpha_20, 2*fabs(alpha_21)));

      t2 = fmin(fabs(alpha_21), 2*S*alpha_20);

      g_20 = S*fmax(t1, t2);

      S = (alpha_31 > 0) ? 1 : ((alpha_31 < 0) ? -1 : 0);

      t1 = fmax(0.0, fmin(S*alpha_30, 2*fabs(alpha_31)));

      t2 = fmin(fabs(alpha_31), 2*S*alpha_30);

      g_30 = S*fmax(t1, t2);

      S = (alpha_41 > 0) ? 1 : ((alpha_41 < 0) ? -1 : 0);

      t1 = fmax(0.0, fmin(S*alpha_40, 2*fabs(alpha_41)));

      t2 = fmin(fabs(alpha_41), 2*S*alpha_40);

      g_40 = S*fmax(t1, t2);

      S = (alpha_02 > 0) ? 1 : ((alpha_02 < 0) ? -1 : 0);

      t1 = fmax(0.0, fmin(S*alpha_01, 2*fabs(alpha_02)));

      t2 = fmin(fabs(alpha_02), 2*S*alpha_01);

      g_01 = S*fmax(t1, t2);

      S = (alpha_12 > 0) ? 1 : ((alpha_12 < 0) ? -1 : 0);

      t1 = fmax(0.0, fmin(S*alpha_11, 2*fabs(alpha_12)));

      t2 = fmin(fabs(alpha_12), 2*S*alpha_11);

      g_11 = S*fmax(t1, t2);

      S = (alpha_22 > 0) ? 1 : ((alpha_22 < 0) ? -1 : 0);

      t1 = fmax(0.0, fmin(S*alpha_21, 2*fabs(alpha_22)));

      t2 = fmin(fabs(alpha_22), 2*S*alpha_21);

      g_21 = S*fmax(t1, t2);

      S = (alpha_32 > 0) ? 1 : ((alpha_32 < 0) ? -1 : 0);

      t1 = fmax(0.0, fmin(S*alpha_31, 2*fabs(alpha_32)));

      t2 = fmin(fabs(alpha_32), 2*S*alpha_31);

      g_31 = S*fmax(t1, t2);

      S = (alpha_42 > 0) ? 1 : ((alpha_42 < 0) ? -1 : 0);

      t1 = fmax(0.0, fmin(S*alpha_41, 2*fabs(alpha_42)));

      t2 = fmin(fabs(alpha_42), 2*S*alpha_41);

      g_41 = S*fmax(t1, t2);

       gamma_0 = ((alpha_01 == 0) ? (
   0
)
: (
   (-g_00 + g_01)*alpha_01*sigma_0_0/((alpha_01*alpha_01) +
            eps_TVD)
));

       gamma_1 = ((alpha_11 == 0) ? (
   0
)
: (
   (-g_10 + g_11)*alpha_11*sigma_0_1/((alpha_11*alpha_11) +
            eps_TVD)
));

       gamma_2 = ((alpha_21 == 0) ? (
   0
)
: (
   (-g_20 + g_21)*alpha_21*sigma_0_2/((alpha_21*alpha_21) +
            eps_TVD)
));

       gamma_3 = ((alpha_31 == 0) ? (
   0
)
: (
   (-g_30 + g_31)*alpha_31*sigma_0_3/((alpha_31*alpha_31) +
            eps_TVD)
));

       gamma_4 = ((alpha_41 == 0) ? (
   0
)
: (
   (-g_40 + g_41)*alpha_41*sigma_0_4/((alpha_41*alpha_41) +
            eps_TVD)
));

       sigma_1_0 = ((fabs(gamma_0) >= delta_TVD) ? (
   fabs(gamma_0)
)
: (

            ((1.0/2.0))*(1.0/(invdelta_TVD*invdelta_TVD) + (gamma_0*gamma_0))*invdelta_TVD
));

       sigma_1_1 = ((fabs(gamma_1) >= delta_TVD) ? (
   fabs(gamma_1)
)
: (

            ((1.0/2.0))*(1.0/(invdelta_TVD*invdelta_TVD) + (gamma_1*gamma_1))*invdelta_TVD
));

       sigma_1_2 = ((fabs(gamma_2) >= delta_TVD) ? (
   fabs(gamma_2)
)
: (

            ((1.0/2.0))*(1.0/(invdelta_TVD*invdelta_TVD) + (gamma_2*gamma_2))*invdelta_TVD
));

       sigma_1_3 = ((fabs(gamma_3) >= delta_TVD) ? (
   fabs(gamma_3)
)
: (

            ((1.0/2.0))*(1.0/(invdelta_TVD*invdelta_TVD) + (gamma_3*gamma_3))*invdelta_TVD
));

       sigma_1_4 = ((fabs(gamma_4) >= delta_TVD) ? (
   fabs(gamma_4)
)
: (

            ((1.0/2.0))*(1.0/(invdelta_TVD*invdelta_TVD) + (gamma_4*gamma_4))*invdelta_TVD
));

      phi_0 = -fabs(sigma_0_0 + sigma_1_0)*alpha_01 + 0.5*(g_00 + g_01)*sigma_0_0;

      phi_1 = -fabs(sigma_0_1 + sigma_1_1)*alpha_11 + 0.5*(g_10 + g_11)*sigma_0_1;

      phi_2 = -fabs(sigma_0_2 + sigma_1_2)*alpha_21 + 0.5*(g_20 + g_21)*sigma_0_2;

      phi_3 = -fabs(sigma_0_3 + sigma_1_3)*alpha_31 + 0.5*(g_30 + g_31)*sigma_0_3;

      phi_4 = -fabs(sigma_0_4 + sigma_1_4)*alpha_41 + 0.5*(g_40 + g_41)*sigma_0_4;

      t1 = -fabs(alpha_00) + fabs(alpha_01);

      t2 = fabs(alpha_00) + fabs(alpha_01) + eps_TVD;

      theta_hat_00 = (fabs(t1/t2)*fabs(t1/t2));

      t1 = -fabs(alpha_10) + fabs(alpha_11);

      t2 = fabs(alpha_10) + fabs(alpha_11) + eps_TVD;

      theta_hat_10 = (fabs(t1/t2)*fabs(t1/t2));

      t1 = -fabs(alpha_20) + fabs(alpha_21);

      t2 = fabs(alpha_20) + fabs(alpha_21) + eps_TVD;

      theta_hat_20 = (fabs(t1/t2)*fabs(t1/t2));

      t1 = -fabs(alpha_30) + fabs(alpha_31);

      t2 = fabs(alpha_30) + fabs(alpha_31) + eps_TVD;

      theta_hat_30 = (fabs(t1/t2)*fabs(t1/t2));

      t1 = -fabs(alpha_40) + fabs(alpha_41);

      t2 = fabs(alpha_40) + fabs(alpha_41) + eps_TVD;

      theta_hat_40 = (fabs(t1/t2)*fabs(t1/t2));

      t1 = -fabs(alpha_01) + fabs(alpha_02);

      t2 = fabs(alpha_01) + fabs(alpha_02) + eps_TVD;

      theta_hat_01 = (fabs(t1/t2)*fabs(t1/t2));

      t1 = -fabs(alpha_11) + fabs(alpha_12);

      t2 = fabs(alpha_11) + fabs(alpha_12) + eps_TVD;

      theta_hat_11 = (fabs(t1/t2)*fabs(t1/t2));

      t1 = -fabs(alpha_21) + fabs(alpha_22);

      t2 = fabs(alpha_21) + fabs(alpha_22) + eps_TVD;

      theta_hat_21 = (fabs(t1/t2)*fabs(t1/t2));

      t1 = -fabs(alpha_31) + fabs(alpha_32);

      t2 = fabs(alpha_31) + fabs(alpha_32) + eps_TVD;

      theta_hat_31 = (fabs(t1/t2)*fabs(t1/t2));

      t1 = -fabs(alpha_41) + fabs(alpha_42);

      t2 = fabs(alpha_41) + fabs(alpha_42) + eps_TVD;

      theta_hat_41 = (fabs(t1/t2)*fabs(t1/t2));

      theta_0 = fmax(theta_hat_00, theta_hat_01);

      theta_1 = fmax(theta_hat_10, theta_hat_11);

      theta_2 = fmax(theta_hat_20, theta_hat_21);

      theta_3 = fmax(theta_hat_30, theta_hat_31);

      theta_4 = fmax(theta_hat_40, theta_hat_41);

      phi_star_0 = kappa_TVD*phi_0*theta_0;

      phi_star_1 = kappa_TVD*phi_1*theta_1;

      phi_star_2 = kappa_TVD*phi_2*theta_2;

      phi_star_3 = kappa_TVD*phi_3*theta_3;

      phi_star_4 = kappa_TVD*phi_4*theta_4;

       wk0_B0(0,0,0) = 0.5*(AVG_0_REV_00*phi_star_0 + AVG_0_REV_01*phi_star_1 + AVG_0_REV_03*phi_star_3 +
            AVG_0_REV_04*phi_star_4);

       wk1_B0(0,0,0) = 0.5*(AVG_0_REV_10*phi_star_0 + AVG_0_REV_11*phi_star_1 + AVG_0_REV_12*phi_star_2 +
            AVG_0_REV_13*phi_star_3 + AVG_0_REV_14*phi_star_4);

       wk2_B0(0,0,0) = 0.5*(AVG_0_REV_20*phi_star_0 + AVG_0_REV_21*phi_star_1 + AVG_0_REV_22*phi_star_2 +
            AVG_0_REV_23*phi_star_3 + AVG_0_REV_24*phi_star_4);

       wk3_B0(0,0,0) = 0.5*(AVG_0_REV_30*phi_star_0 + AVG_0_REV_31*phi_star_1 + AVG_0_REV_33*phi_star_3 +
            AVG_0_REV_34*phi_star_4);

       wk4_B0(0,0,0) = 0.5*(AVG_0_REV_40*phi_star_0 + AVG_0_REV_41*phi_star_1 + AVG_0_REV_42*phi_star_2 +
            AVG_0_REV_43*phi_star_3 + AVG_0_REV_44*phi_star_4);

   }

   else{

      wk0_B0(0,0,0) = 0.0;

      wk1_B0(0,0,0) = 0.0;

      wk2_B0(0,0,0) = 0.0;

      wk3_B0(0,0,0) = 0.0;

      wk4_B0(0,0,0) = 0.0;

   }

}



__global__ void ops_opensbliblock00Kernel064(
double* __restrict arg0,
double* __restrict arg1,
double* __restrict arg2,
double* __restrict arg3,
double* __restrict arg4,
double* __restrict arg5,
double* __restrict arg6,
double* __restrict arg7,
double* __restrict arg8,
double* __restrict arg9,
double* __restrict arg10,
double* __restrict arg11,
double* __restrict arg12,
double* __restrict arg13,
double* __restrict arg14,
double* __restrict arg15,
double* __restrict arg16,
double* __restrict arg17,
int size0,
int size1,
int size2 ){


  int idx_z = blockDim.z * blockIdx.z + threadIdx.z;
  int idx_y = blockDim.y * blockIdx.y + threadIdx.y;
  int idx_x = blockDim.x * blockIdx.x + threadIdx.x;

  arg0 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel064[0][0] + idx_z * 1*1 * dims_opensbliblock00Kernel064[0][0] * dims_opensbliblock00Kernel064[0][1];
  arg1 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel064[1][0] + idx_z * 1*1 * dims_opensbliblock00Kernel064[1][0] * dims_opensbliblock00Kernel064[1][1];
  arg2 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel064[2][0] + idx_z * 1*1 * dims_opensbliblock00Kernel064[2][0] * dims_opensbliblock00Kernel064[2][1];
  arg3 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel064[3][0] + idx_z * 1*1 * dims_opensbliblock00Kernel064[3][0] * dims_opensbliblock00Kernel064[3][1];
  arg4 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel064[4][0] + idx_z * 1*1 * dims_opensbliblock00Kernel064[4][0] * dims_opensbliblock00Kernel064[4][1];
  arg5 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel064[5][0] + idx_z * 1*1 * dims_opensbliblock00Kernel064[5][0] * dims_opensbliblock00Kernel064[5][1];
  arg6 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel064[6][0] + idx_z * 1*1 * dims_opensbliblock00Kernel064[6][0] * dims_opensbliblock00Kernel064[6][1];
  arg7 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel064[7][0] + idx_z * 1*1 * dims_opensbliblock00Kernel064[7][0] * dims_opensbliblock00Kernel064[7][1];
  arg8 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel064[8][0] + idx_z * 1*1 * dims_opensbliblock00Kernel064[8][0] * dims_opensbliblock00Kernel064[8][1];
  arg9 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel064[9][0] + idx_z * 1*1 * dims_opensbliblock00Kernel064[9][0] * dims_opensbliblock00Kernel064[9][1];
  arg10 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel064[10][0] + idx_z * 1*1 * dims_opensbliblock00Kernel064[10][0] * dims_opensbliblock00Kernel064[10][1];
  arg11 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel064[11][0] + idx_z * 1*1 * dims_opensbliblock00Kernel064[11][0] * dims_opensbliblock00Kernel064[11][1];
  arg12 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel064[12][0] + idx_z * 1*1 * dims_opensbliblock00Kernel064[12][0] * dims_opensbliblock00Kernel064[12][1];
  arg13 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel064[13][0] + idx_z * 1*1 * dims_opensbliblock00Kernel064[13][0] * dims_opensbliblock00Kernel064[13][1];
  arg14 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel064[14][0] + idx_z * 1*1 * dims_opensbliblock00Kernel064[14][0] * dims_opensbliblock00Kernel064[14][1];
  arg15 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel064[15][0] + idx_z * 1*1 * dims_opensbliblock00Kernel064[15][0] * dims_opensbliblock00Kernel064[15][1];
  arg16 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel064[16][0] + idx_z * 1*1 * dims_opensbliblock00Kernel064[16][0] * dims_opensbliblock00Kernel064[16][1];
  arg17 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel064[17][0] + idx_z * 1*1 * dims_opensbliblock00Kernel064[17][0] * dims_opensbliblock00Kernel064[17][1];

  if (idx_x < size0 && idx_y < size1 && idx_z < size2) {
    const ACC<double> argp0(dims_opensbliblock00Kernel064[0][0], dims_opensbliblock00Kernel064[0][1], arg0);
    const ACC<double> argp1(dims_opensbliblock00Kernel064[1][0], dims_opensbliblock00Kernel064[1][1], arg1);
    const ACC<double> argp2(dims_opensbliblock00Kernel064[2][0], dims_opensbliblock00Kernel064[2][1], arg2);
    const ACC<double> argp3(dims_opensbliblock00Kernel064[3][0], dims_opensbliblock00Kernel064[3][1], arg3);
    const ACC<double> argp4(dims_opensbliblock00Kernel064[4][0], dims_opensbliblock00Kernel064[4][1], arg4);
    const ACC<double> argp5(dims_opensbliblock00Kernel064[5][0], dims_opensbliblock00Kernel064[5][1], arg5);
    const ACC<double> argp6(dims_opensbliblock00Kernel064[6][0], dims_opensbliblock00Kernel064[6][1], arg6);
    const ACC<double> argp7(dims_opensbliblock00Kernel064[7][0], dims_opensbliblock00Kernel064[7][1], arg7);
    const ACC<double> argp8(dims_opensbliblock00Kernel064[8][0], dims_opensbliblock00Kernel064[8][1], arg8);
    const ACC<double> argp9(dims_opensbliblock00Kernel064[9][0], dims_opensbliblock00Kernel064[9][1], arg9);
    const ACC<double> argp10(dims_opensbliblock00Kernel064[10][0], dims_opensbliblock00Kernel064[10][1], arg10);
    const ACC<double> argp11(dims_opensbliblock00Kernel064[11][0], dims_opensbliblock00Kernel064[11][1], arg11);
    const ACC<double> argp12(dims_opensbliblock00Kernel064[12][0], dims_opensbliblock00Kernel064[12][1], arg12);
    ACC<double> argp13(dims_opensbliblock00Kernel064[13][0], dims_opensbliblock00Kernel064[13][1], arg13);
    ACC<double> argp14(dims_opensbliblock00Kernel064[14][0], dims_opensbliblock00Kernel064[14][1], arg14);
    ACC<double> argp15(dims_opensbliblock00Kernel064[15][0], dims_opensbliblock00Kernel064[15][1], arg15);
    ACC<double> argp16(dims_opensbliblock00Kernel064[16][0], dims_opensbliblock00Kernel064[16][1], arg16);
    ACC<double> argp17(dims_opensbliblock00Kernel064[17][0], dims_opensbliblock00Kernel064[17][1], arg17);
    opensbliblock00Kernel064_gpu(
     argp0, argp1, argp2, argp3, argp4,
     argp5, argp6, argp7, argp8, argp9,
     argp10, argp11, argp12, argp13, argp14,
     argp15, argp16, argp17);
  }

}

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel064(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11,
 ops_arg arg12, ops_arg arg13, ops_arg arg14, ops_arg arg15,
 ops_arg arg16, ops_arg arg17) {
#else
void ops_par_loop_opensbliblock00Kernel064_execute(ops_kernel_descriptor *desc) {
  int dim = desc->dim;
  #if OPS_MPI
  ops_block block = desc->block;
  #endif
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  ops_arg arg9 = desc->args[9];
  ops_arg arg10 = desc->args[10];
  ops_arg arg11 = desc->args[11];
  ops_arg arg12 = desc->args[12];
  ops_arg arg13 = desc->args[13];
  ops_arg arg14 = desc->args[14];
  ops_arg arg15 = desc->args[15];
  ops_arg arg16 = desc->args[16];
  ops_arg arg17 = desc->args[17];
  #endif

  //Timing
  double t1,t2,c1,c2;

  ops_arg args[18] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17};


  #if CHECKPOINTING && !OPS_LAZY
  if (!ops_checkpointing_before(args,18,range,36)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,36,"opensbliblock00Kernel064");
    block->instance->OPS_kernels[36].count++;
    ops_timers_core(&c1,&t1);
  }

  //compute locally allocated range for the sub-block
  int start[3];
  int end[3];

  #ifdef OPS_MPI
  int arg_idx[3];
  #endif
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<3; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 18,block, range, start, end, arg_idx) < 0) return;
  #endif

  int xdim0 = args[0].dat->size[0];
  int ydim0 = args[0].dat->size[1];
  int xdim1 = args[1].dat->size[0];
  int ydim1 = args[1].dat->size[1];
  int xdim2 = args[2].dat->size[0];
  int ydim2 = args[2].dat->size[1];
  int xdim3 = args[3].dat->size[0];
  int ydim3 = args[3].dat->size[1];
  int xdim4 = args[4].dat->size[0];
  int ydim4 = args[4].dat->size[1];
  int xdim5 = args[5].dat->size[0];
  int ydim5 = args[5].dat->size[1];
  int xdim6 = args[6].dat->size[0];
  int ydim6 = args[6].dat->size[1];
  int xdim7 = args[7].dat->size[0];
  int ydim7 = args[7].dat->size[1];
  int xdim8 = args[8].dat->size[0];
  int ydim8 = args[8].dat->size[1];
  int xdim9 = args[9].dat->size[0];
  int ydim9 = args[9].dat->size[1];
  int xdim10 = args[10].dat->size[0];
  int ydim10 = args[10].dat->size[1];
  int xdim11 = args[11].dat->size[0];
  int ydim11 = args[11].dat->size[1];
  int xdim12 = args[12].dat->size[0];
  int ydim12 = args[12].dat->size[1];
  int xdim13 = args[13].dat->size[0];
  int ydim13 = args[13].dat->size[1];
  int xdim14 = args[14].dat->size[0];
  int ydim14 = args[14].dat->size[1];
  int xdim15 = args[15].dat->size[0];
  int ydim15 = args[15].dat->size[1];
  int xdim16 = args[16].dat->size[0];
  int ydim16 = args[16].dat->size[1];
  int xdim17 = args[17].dat->size[0];
  int ydim17 = args[17].dat->size[1];

  if (xdim0 != dims_opensbliblock00Kernel064_h[0][0] || ydim0 != dims_opensbliblock00Kernel064_h[0][1] || xdim1 != dims_opensbliblock00Kernel064_h[1][0] || ydim1 != dims_opensbliblock00Kernel064_h[1][1] || xdim2 != dims_opensbliblock00Kernel064_h[2][0] || ydim2 != dims_opensbliblock00Kernel064_h[2][1] || xdim3 != dims_opensbliblock00Kernel064_h[3][0] || ydim3 != dims_opensbliblock00Kernel064_h[3][1] || xdim4 != dims_opensbliblock00Kernel064_h[4][0] || ydim4 != dims_opensbliblock00Kernel064_h[4][1] || xdim5 != dims_opensbliblock00Kernel064_h[5][0] || ydim5 != dims_opensbliblock00Kernel064_h[5][1] || xdim6 != dims_opensbliblock00Kernel064_h[6][0] || ydim6 != dims_opensbliblock00Kernel064_h[6][1] || xdim7 != dims_opensbliblock00Kernel064_h[7][0] || ydim7 != dims_opensbliblock00Kernel064_h[7][1] || xdim8 != dims_opensbliblock00Kernel064_h[8][0] || ydim8 != dims_opensbliblock00Kernel064_h[8][1] || xdim9 != dims_opensbliblock00Kernel064_h[9][0] || ydim9 != dims_opensbliblock00Kernel064_h[9][1] || xdim10 != dims_opensbliblock00Kernel064_h[10][0] || ydim10 != dims_opensbliblock00Kernel064_h[10][1] || xdim11 != dims_opensbliblock00Kernel064_h[11][0] || ydim11 != dims_opensbliblock00Kernel064_h[11][1] || xdim12 != dims_opensbliblock00Kernel064_h[12][0] || ydim12 != dims_opensbliblock00Kernel064_h[12][1] || xdim13 != dims_opensbliblock00Kernel064_h[13][0] || ydim13 != dims_opensbliblock00Kernel064_h[13][1] || xdim14 != dims_opensbliblock00Kernel064_h[14][0] || ydim14 != dims_opensbliblock00Kernel064_h[14][1] || xdim15 != dims_opensbliblock00Kernel064_h[15][0] || ydim15 != dims_opensbliblock00Kernel064_h[15][1] || xdim16 != dims_opensbliblock00Kernel064_h[16][0] || ydim16 != dims_opensbliblock00Kernel064_h[16][1] || xdim17 != dims_opensbliblock00Kernel064_h[17][0] || ydim17 != dims_opensbliblock00Kernel064_h[17][1]) {
    dims_opensbliblock00Kernel064_h[0][0] = xdim0;
    dims_opensbliblock00Kernel064_h[0][1] = ydim0;
    dims_opensbliblock00Kernel064_h[1][0] = xdim1;
    dims_opensbliblock00Kernel064_h[1][1] = ydim1;
    dims_opensbliblock00Kernel064_h[2][0] = xdim2;
    dims_opensbliblock00Kernel064_h[2][1] = ydim2;
    dims_opensbliblock00Kernel064_h[3][0] = xdim3;
    dims_opensbliblock00Kernel064_h[3][1] = ydim3;
    dims_opensbliblock00Kernel064_h[4][0] = xdim4;
    dims_opensbliblock00Kernel064_h[4][1] = ydim4;
    dims_opensbliblock00Kernel064_h[5][0] = xdim5;
    dims_opensbliblock00Kernel064_h[5][1] = ydim5;
    dims_opensbliblock00Kernel064_h[6][0] = xdim6;
    dims_opensbliblock00Kernel064_h[6][1] = ydim6;
    dims_opensbliblock00Kernel064_h[7][0] = xdim7;
    dims_opensbliblock00Kernel064_h[7][1] = ydim7;
    dims_opensbliblock00Kernel064_h[8][0] = xdim8;
    dims_opensbliblock00Kernel064_h[8][1] = ydim8;
    dims_opensbliblock00Kernel064_h[9][0] = xdim9;
    dims_opensbliblock00Kernel064_h[9][1] = ydim9;
    dims_opensbliblock00Kernel064_h[10][0] = xdim10;
    dims_opensbliblock00Kernel064_h[10][1] = ydim10;
    dims_opensbliblock00Kernel064_h[11][0] = xdim11;
    dims_opensbliblock00Kernel064_h[11][1] = ydim11;
    dims_opensbliblock00Kernel064_h[12][0] = xdim12;
    dims_opensbliblock00Kernel064_h[12][1] = ydim12;
    dims_opensbliblock00Kernel064_h[13][0] = xdim13;
    dims_opensbliblock00Kernel064_h[13][1] = ydim13;
    dims_opensbliblock00Kernel064_h[14][0] = xdim14;
    dims_opensbliblock00Kernel064_h[14][1] = ydim14;
    dims_opensbliblock00Kernel064_h[15][0] = xdim15;
    dims_opensbliblock00Kernel064_h[15][1] = ydim15;
    dims_opensbliblock00Kernel064_h[16][0] = xdim16;
    dims_opensbliblock00Kernel064_h[16][1] = ydim16;
    dims_opensbliblock00Kernel064_h[17][0] = xdim17;
    dims_opensbliblock00Kernel064_h[17][1] = ydim17;
    cutilSafeCall(block->instance->ostream(), cudaMemcpyToSymbol( dims_opensbliblock00Kernel064, dims_opensbliblock00Kernel064_h, sizeof(dims_opensbliblock00Kernel064)));
  }



  int x_size = MAX(0,end[0]-start[0]);
  int y_size = MAX(0,end[1]-start[1]);
  int z_size = MAX(0,end[2]-start[2]);

  dim3 grid( (x_size-1)/block->instance->OPS_block_size_x+ 1, (y_size-1)/block->instance->OPS_block_size_y + 1, (z_size-1)/block->instance->OPS_block_size_z +1);
  dim3 tblock(block->instance->OPS_block_size_x,block->instance->OPS_block_size_y,block->instance->OPS_block_size_z);



  long long int dat0 = (block->instance->OPS_soa ? args[0].dat->type_size : args[0].dat->elem_size);
  long long int dat1 = (block->instance->OPS_soa ? args[1].dat->type_size : args[1].dat->elem_size);
  long long int dat2 = (block->instance->OPS_soa ? args[2].dat->type_size : args[2].dat->elem_size);
  long long int dat3 = (block->instance->OPS_soa ? args[3].dat->type_size : args[3].dat->elem_size);
  long long int dat4 = (block->instance->OPS_soa ? args[4].dat->type_size : args[4].dat->elem_size);
  long long int dat5 = (block->instance->OPS_soa ? args[5].dat->type_size : args[5].dat->elem_size);
  long long int dat6 = (block->instance->OPS_soa ? args[6].dat->type_size : args[6].dat->elem_size);
  long long int dat7 = (block->instance->OPS_soa ? args[7].dat->type_size : args[7].dat->elem_size);
  long long int dat8 = (block->instance->OPS_soa ? args[8].dat->type_size : args[8].dat->elem_size);
  long long int dat9 = (block->instance->OPS_soa ? args[9].dat->type_size : args[9].dat->elem_size);
  long long int dat10 = (block->instance->OPS_soa ? args[10].dat->type_size : args[10].dat->elem_size);
  long long int dat11 = (block->instance->OPS_soa ? args[11].dat->type_size : args[11].dat->elem_size);
  long long int dat12 = (block->instance->OPS_soa ? args[12].dat->type_size : args[12].dat->elem_size);
  long long int dat13 = (block->instance->OPS_soa ? args[13].dat->type_size : args[13].dat->elem_size);
  long long int dat14 = (block->instance->OPS_soa ? args[14].dat->type_size : args[14].dat->elem_size);
  long long int dat15 = (block->instance->OPS_soa ? args[15].dat->type_size : args[15].dat->elem_size);
  long long int dat16 = (block->instance->OPS_soa ? args[16].dat->type_size : args[16].dat->elem_size);
  long long int dat17 = (block->instance->OPS_soa ? args[17].dat->type_size : args[17].dat->elem_size);

  char *p_a[18];

  //set up initial pointers
  long long int base0 = args[0].dat->base_offset + 
           dat0 * 1 * (start[0] * args[0].stencil->stride[0]);
  base0 = base0+ dat0 *
    args[0].dat->size[0] *
    (start[1] * args[0].stencil->stride[1]);
  base0 = base0+ dat0 *
    args[0].dat->size[0] *
    args[0].dat->size[1] *
    (start[2] * args[0].stencil->stride[2]);
  p_a[0] = (char *)args[0].data_d + base0;

  long long int base1 = args[1].dat->base_offset + 
           dat1 * 1 * (start[0] * args[1].stencil->stride[0]);
  base1 = base1+ dat1 *
    args[1].dat->size[0] *
    (start[1] * args[1].stencil->stride[1]);
  base1 = base1+ dat1 *
    args[1].dat->size[0] *
    args[1].dat->size[1] *
    (start[2] * args[1].stencil->stride[2]);
  p_a[1] = (char *)args[1].data_d + base1;

  long long int base2 = args[2].dat->base_offset + 
           dat2 * 1 * (start[0] * args[2].stencil->stride[0]);
  base2 = base2+ dat2 *
    args[2].dat->size[0] *
    (start[1] * args[2].stencil->stride[1]);
  base2 = base2+ dat2 *
    args[2].dat->size[0] *
    args[2].dat->size[1] *
    (start[2] * args[2].stencil->stride[2]);
  p_a[2] = (char *)args[2].data_d + base2;

  long long int base3 = args[3].dat->base_offset + 
           dat3 * 1 * (start[0] * args[3].stencil->stride[0]);
  base3 = base3+ dat3 *
    args[3].dat->size[0] *
    (start[1] * args[3].stencil->stride[1]);
  base3 = base3+ dat3 *
    args[3].dat->size[0] *
    args[3].dat->size[1] *
    (start[2] * args[3].stencil->stride[2]);
  p_a[3] = (char *)args[3].data_d + base3;

  long long int base4 = args[4].dat->base_offset + 
           dat4 * 1 * (start[0] * args[4].stencil->stride[0]);
  base4 = base4+ dat4 *
    args[4].dat->size[0] *
    (start[1] * args[4].stencil->stride[1]);
  base4 = base4+ dat4 *
    args[4].dat->size[0] *
    args[4].dat->size[1] *
    (start[2] * args[4].stencil->stride[2]);
  p_a[4] = (char *)args[4].data_d + base4;

  long long int base5 = args[5].dat->base_offset + 
           dat5 * 1 * (start[0] * args[5].stencil->stride[0]);
  base5 = base5+ dat5 *
    args[5].dat->size[0] *
    (start[1] * args[5].stencil->stride[1]);
  base5 = base5+ dat5 *
    args[5].dat->size[0] *
    args[5].dat->size[1] *
    (start[2] * args[5].stencil->stride[2]);
  p_a[5] = (char *)args[5].data_d + base5;

  long long int base6 = args[6].dat->base_offset + 
           dat6 * 1 * (start[0] * args[6].stencil->stride[0]);
  base6 = base6+ dat6 *
    args[6].dat->size[0] *
    (start[1] * args[6].stencil->stride[1]);
  base6 = base6+ dat6 *
    args[6].dat->size[0] *
    args[6].dat->size[1] *
    (start[2] * args[6].stencil->stride[2]);
  p_a[6] = (char *)args[6].data_d + base6;

  long long int base7 = args[7].dat->base_offset + 
           dat7 * 1 * (start[0] * args[7].stencil->stride[0]);
  base7 = base7+ dat7 *
    args[7].dat->size[0] *
    (start[1] * args[7].stencil->stride[1]);
  base7 = base7+ dat7 *
    args[7].dat->size[0] *
    args[7].dat->size[1] *
    (start[2] * args[7].stencil->stride[2]);
  p_a[7] = (char *)args[7].data_d + base7;

  long long int base8 = args[8].dat->base_offset + 
           dat8 * 1 * (start[0] * args[8].stencil->stride[0]);
  base8 = base8+ dat8 *
    args[8].dat->size[0] *
    (start[1] * args[8].stencil->stride[1]);
  base8 = base8+ dat8 *
    args[8].dat->size[0] *
    args[8].dat->size[1] *
    (start[2] * args[8].stencil->stride[2]);
  p_a[8] = (char *)args[8].data_d + base8;

  long long int base9 = args[9].dat->base_offset + 
           dat9 * 1 * (start[0] * args[9].stencil->stride[0]);
  base9 = base9+ dat9 *
    args[9].dat->size[0] *
    (start[1] * args[9].stencil->stride[1]);
  base9 = base9+ dat9 *
    args[9].dat->size[0] *
    args[9].dat->size[1] *
    (start[2] * args[9].stencil->stride[2]);
  p_a[9] = (char *)args[9].data_d + base9;

  long long int base10 = args[10].dat->base_offset + 
           dat10 * 1 * (start[0] * args[10].stencil->stride[0]);
  base10 = base10+ dat10 *
    args[10].dat->size[0] *
    (start[1] * args[10].stencil->stride[1]);
  base10 = base10+ dat10 *
    args[10].dat->size[0] *
    args[10].dat->size[1] *
    (start[2] * args[10].stencil->stride[2]);
  p_a[10] = (char *)args[10].data_d + base10;

  long long int base11 = args[11].dat->base_offset + 
           dat11 * 1 * (start[0] * args[11].stencil->stride[0]);
  base11 = base11+ dat11 *
    args[11].dat->size[0] *
    (start[1] * args[11].stencil->stride[1]);
  base11 = base11+ dat11 *
    args[11].dat->size[0] *
    args[11].dat->size[1] *
    (start[2] * args[11].stencil->stride[2]);
  p_a[11] = (char *)args[11].data_d + base11;

  long long int base12 = args[12].dat->base_offset + 
           dat12 * 1 * (start[0] * args[12].stencil->stride[0]);
  base12 = base12+ dat12 *
    args[12].dat->size[0] *
    (start[1] * args[12].stencil->stride[1]);
  base12 = base12+ dat12 *
    args[12].dat->size[0] *
    args[12].dat->size[1] *
    (start[2] * args[12].stencil->stride[2]);
  p_a[12] = (char *)args[12].data_d + base12;

  long long int base13 = args[13].dat->base_offset + 
           dat13 * 1 * (start[0] * args[13].stencil->stride[0]);
  base13 = base13+ dat13 *
    args[13].dat->size[0] *
    (start[1] * args[13].stencil->stride[1]);
  base13 = base13+ dat13 *
    args[13].dat->size[0] *
    args[13].dat->size[1] *
    (start[2] * args[13].stencil->stride[2]);
  p_a[13] = (char *)args[13].data_d + base13;

  long long int base14 = args[14].dat->base_offset + 
           dat14 * 1 * (start[0] * args[14].stencil->stride[0]);
  base14 = base14+ dat14 *
    args[14].dat->size[0] *
    (start[1] * args[14].stencil->stride[1]);
  base14 = base14+ dat14 *
    args[14].dat->size[0] *
    args[14].dat->size[1] *
    (start[2] * args[14].stencil->stride[2]);
  p_a[14] = (char *)args[14].data_d + base14;

  long long int base15 = args[15].dat->base_offset + 
           dat15 * 1 * (start[0] * args[15].stencil->stride[0]);
  base15 = base15+ dat15 *
    args[15].dat->size[0] *
    (start[1] * args[15].stencil->stride[1]);
  base15 = base15+ dat15 *
    args[15].dat->size[0] *
    args[15].dat->size[1] *
    (start[2] * args[15].stencil->stride[2]);
  p_a[15] = (char *)args[15].data_d + base15;

  long long int base16 = args[16].dat->base_offset + 
           dat16 * 1 * (start[0] * args[16].stencil->stride[0]);
  base16 = base16+ dat16 *
    args[16].dat->size[0] *
    (start[1] * args[16].stencil->stride[1]);
  base16 = base16+ dat16 *
    args[16].dat->size[0] *
    args[16].dat->size[1] *
    (start[2] * args[16].stencil->stride[2]);
  p_a[16] = (char *)args[16].data_d + base16;

  long long int base17 = args[17].dat->base_offset + 
           dat17 * 1 * (start[0] * args[17].stencil->stride[0]);
  base17 = base17+ dat17 *
    args[17].dat->size[0] *
    (start[1] * args[17].stencil->stride[1]);
  base17 = base17+ dat17 *
    args[17].dat->size[0] *
    args[17].dat->size[1] *
    (start[2] * args[17].stencil->stride[2]);
  p_a[17] = (char *)args[17].data_d + base17;


  #ifndef OPS_LAZY
  ops_H_D_exchanges_device(args, 18);
  ops_halo_exchanges(args,18,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[36].mpi_time += t2-t1;
  }


  //call kernel wrapper function, passing in pointers to data
  if (x_size > 0 && y_size > 0 && z_size > 0)
    ops_opensbliblock00Kernel064<<<grid, tblock >>> ( 
     (double *)p_a[0], (double *)p_a[1],
     (double *)p_a[2], (double *)p_a[3],
     (double *)p_a[4], (double *)p_a[5],
     (double *)p_a[6], (double *)p_a[7],
     (double *)p_a[8], (double *)p_a[9],
     (double *)p_a[10], (double *)p_a[11],
     (double *)p_a[12], (double *)p_a[13],
     (double *)p_a[14], (double *)p_a[15],
     (double *)p_a[16], (double *)p_a[17],
    x_size, y_size, z_size);

  cutilSafeCall(block->instance->ostream(), cudaGetLastError());

  if (block->instance->OPS_diags>1) {
    cutilSafeCall(block->instance->ostream(), cudaDeviceSynchronize());
    ops_timers_core(&c1,&t1);
    block->instance->OPS_kernels[36].time += t1-t2;
  }

  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 18);
  ops_set_halo_dirtybit3(&args[13],range);
  ops_set_halo_dirtybit3(&args[14],range);
  ops_set_halo_dirtybit3(&args[15],range);
  ops_set_halo_dirtybit3(&args[16],range);
  ops_set_halo_dirtybit3(&args[17],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[36].mpi_time += t2-t1;
    block->instance->OPS_kernels[36].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[36].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[36].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[36].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[36].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[36].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[36].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[36].transfer += ops_compute_transfer(dim, start, end, &arg7);
    block->instance->OPS_kernels[36].transfer += ops_compute_transfer(dim, start, end, &arg8);
    block->instance->OPS_kernels[36].transfer += ops_compute_transfer(dim, start, end, &arg9);
    block->instance->OPS_kernels[36].transfer += ops_compute_transfer(dim, start, end, &arg10);
    block->instance->OPS_kernels[36].transfer += ops_compute_transfer(dim, start, end, &arg11);
    block->instance->OPS_kernels[36].transfer += ops_compute_transfer(dim, start, end, &arg12);
    block->instance->OPS_kernels[36].transfer += ops_compute_transfer(dim, start, end, &arg13);
    block->instance->OPS_kernels[36].transfer += ops_compute_transfer(dim, start, end, &arg14);
    block->instance->OPS_kernels[36].transfer += ops_compute_transfer(dim, start, end, &arg15);
    block->instance->OPS_kernels[36].transfer += ops_compute_transfer(dim, start, end, &arg16);
    block->instance->OPS_kernels[36].transfer += ops_compute_transfer(dim, start, end, &arg17);
  }
}

#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel064(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11,
 ops_arg arg12, ops_arg arg13, ops_arg arg14, ops_arg arg15,
 ops_arg arg16, ops_arg arg17) {
  ops_arg args[18] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17 };

  //create kernel descriptor and pass it to ops_enqueue_kernel
  create_kerneldesc_and_enque(name, args, 18, 36, dim, 1, range, block, ops_par_loop_opensbliblock00Kernel064_execute);
}
#endif
