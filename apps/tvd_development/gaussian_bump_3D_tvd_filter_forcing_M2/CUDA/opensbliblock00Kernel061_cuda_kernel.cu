//
// auto-generated by ops.py
//
__constant__ int dims_opensbliblock00Kernel061 [9][2];
static int dims_opensbliblock00Kernel061_h [9][2] = {{0}};

//user function
__device__

 void opensbliblock00Kernel061_gpu(const ACC<double> &D00_B0,
  const ACC<double> &D01_B0,
  const ACC<double> &D10_B0,
  const
ACC<double> &D11_B0,
  const ACC<double> &u0_B0,
  const ACC<double> &u1_B0,
  const ACC<double> &u2_B0,
  ACC<double>
&kappa_B0,
  const int *idx)
{
   double d1_u0_dx = 0.0;
   double d1_u0_dy = 0.0;
   double d1_u0_dz = 0.0;
   double d1_u1_dx = 0.0;
   double d1_u1_dy = 0.0;
   double d1_u1_dz = 0.0;
   double d1_u2_dx = 0.0;
   double d1_u2_dy = 0.0;
   double d1_u2_dz = 0.0;
    d1_u0_dz = (-(2.0/3.0)*u0_B0(0,0,-1) - (1.0/12.0)*u0_B0(0,0,2) + ((1.0/12.0))*u0_B0(0,0,-2) +
      ((2.0/3.0))*u0_B0(0,0,1))*invDelta2block0;

    d1_u2_dx = invDelta0block0*((idx[0] == 0) ? (
   -3*u2_B0(2,0,0) + 4*u2_B0(1,0,0) - (25.0/12.0)*u2_B0(0,0,0) -
      (1.0/4.0)*u2_B0(4,0,0) + ((4.0/3.0))*u2_B0(3,0,0)
)
: ((idx[0] == 1) ? (
   -(5.0/6.0)*u2_B0(0,0,0) -
      (1.0/2.0)*u2_B0(2,0,0) - (1.0/4.0)*u2_B0(-1,0,0) + ((1.0/12.0))*u2_B0(3,0,0) + ((3.0/2.0))*u2_B0(1,0,0)
)
:
      ((idx[0] == -1 + block0np0) ? (
   -4*u2_B0(-1,0,0) + 3*u2_B0(-2,0,0) - (4.0/3.0)*u2_B0(-3,0,0) +
      ((1.0/4.0))*u2_B0(-4,0,0) + ((25.0/12.0))*u2_B0(0,0,0)
)
: ((idx[0] == -2 + block0np0) ? (

      ((1.0/2.0))*u2_B0(-2,0,0) - (3.0/2.0)*u2_B0(-1,0,0) - (1.0/12.0)*u2_B0(-3,0,0) + ((1.0/4.0))*u2_B0(1,0,0) +
      ((5.0/6.0))*u2_B0(0,0,0)
)
: (
   -(2.0/3.0)*u2_B0(-1,0,0) - (1.0/12.0)*u2_B0(2,0,0) + ((1.0/12.0))*u2_B0(-2,0,0)
      + ((2.0/3.0))*u2_B0(1,0,0)
)))));

    d1_u2_dy = invDelta1block0*((idx[1] == 0) ? (
   -3*u2_B0(0,2,0) + 4*u2_B0(0,1,0) - (25.0/12.0)*u2_B0(0,0,0) -
      (1.0/4.0)*u2_B0(0,4,0) + ((4.0/3.0))*u2_B0(0,3,0)
)
: ((idx[1] == 1) ? (
   -(5.0/6.0)*u2_B0(0,0,0) -
      (1.0/2.0)*u2_B0(0,2,0) - (1.0/4.0)*u2_B0(0,-1,0) + ((1.0/12.0))*u2_B0(0,3,0) + ((3.0/2.0))*u2_B0(0,1,0)
)
: (

      -(2.0/3.0)*u2_B0(0,-1,0) - (1.0/12.0)*u2_B0(0,2,0) + ((1.0/12.0))*u2_B0(0,-2,0) + ((2.0/3.0))*u2_B0(0,1,0)
)));

    d1_u1_dy = invDelta1block0*((idx[1] == 0) ? (
   -3*u1_B0(0,2,0) + 4*u1_B0(0,1,0) - (25.0/12.0)*u1_B0(0,0,0) -
      (1.0/4.0)*u1_B0(0,4,0) + ((4.0/3.0))*u1_B0(0,3,0)
)
: ((idx[1] == 1) ? (
   -(5.0/6.0)*u1_B0(0,0,0) -
      (1.0/2.0)*u1_B0(0,2,0) - (1.0/4.0)*u1_B0(0,-1,0) + ((1.0/12.0))*u1_B0(0,3,0) + ((3.0/2.0))*u1_B0(0,1,0)
)
: (

      -(2.0/3.0)*u1_B0(0,-1,0) - (1.0/12.0)*u1_B0(0,2,0) + ((1.0/12.0))*u1_B0(0,-2,0) + ((2.0/3.0))*u1_B0(0,1,0)
)));

    d1_u2_dz = (-(2.0/3.0)*u2_B0(0,0,-1) - (1.0/12.0)*u2_B0(0,0,2) + ((1.0/12.0))*u2_B0(0,0,-2) +
      ((2.0/3.0))*u2_B0(0,0,1))*invDelta2block0;

    d1_u0_dy = invDelta1block0*((idx[1] == 0) ? (
   -3*u0_B0(0,2,0) + 4*u0_B0(0,1,0) - (25.0/12.0)*u0_B0(0,0,0) -
      (1.0/4.0)*u0_B0(0,4,0) + ((4.0/3.0))*u0_B0(0,3,0)
)
: ((idx[1] == 1) ? (
   -(5.0/6.0)*u0_B0(0,0,0) -
      (1.0/2.0)*u0_B0(0,2,0) - (1.0/4.0)*u0_B0(0,-1,0) + ((1.0/12.0))*u0_B0(0,3,0) + ((3.0/2.0))*u0_B0(0,1,0)
)
: (

      -(2.0/3.0)*u0_B0(0,-1,0) - (1.0/12.0)*u0_B0(0,2,0) + ((1.0/12.0))*u0_B0(0,-2,0) + ((2.0/3.0))*u0_B0(0,1,0)
)));

    d1_u0_dx = invDelta0block0*((idx[0] == 0) ? (
   -3*u0_B0(2,0,0) + 4*u0_B0(1,0,0) - (25.0/12.0)*u0_B0(0,0,0) -
      (1.0/4.0)*u0_B0(4,0,0) + ((4.0/3.0))*u0_B0(3,0,0)
)
: ((idx[0] == 1) ? (
   -(5.0/6.0)*u0_B0(0,0,0) -
      (1.0/2.0)*u0_B0(2,0,0) - (1.0/4.0)*u0_B0(-1,0,0) + ((1.0/12.0))*u0_B0(3,0,0) + ((3.0/2.0))*u0_B0(1,0,0)
)
:
      ((idx[0] == -1 + block0np0) ? (
   -4*u0_B0(-1,0,0) + 3*u0_B0(-2,0,0) - (4.0/3.0)*u0_B0(-3,0,0) +
      ((1.0/4.0))*u0_B0(-4,0,0) + ((25.0/12.0))*u0_B0(0,0,0)
)
: ((idx[0] == -2 + block0np0) ? (

      ((1.0/2.0))*u0_B0(-2,0,0) - (3.0/2.0)*u0_B0(-1,0,0) - (1.0/12.0)*u0_B0(-3,0,0) + ((1.0/4.0))*u0_B0(1,0,0) +
      ((5.0/6.0))*u0_B0(0,0,0)
)
: (
   -(2.0/3.0)*u0_B0(-1,0,0) - (1.0/12.0)*u0_B0(2,0,0) + ((1.0/12.0))*u0_B0(-2,0,0)
      + ((2.0/3.0))*u0_B0(1,0,0)
)))));

    d1_u1_dx = invDelta0block0*((idx[0] == 0) ? (
   -3*u1_B0(2,0,0) + 4*u1_B0(1,0,0) - (25.0/12.0)*u1_B0(0,0,0) -
      (1.0/4.0)*u1_B0(4,0,0) + ((4.0/3.0))*u1_B0(3,0,0)
)
: ((idx[0] == 1) ? (
   -(5.0/6.0)*u1_B0(0,0,0) -
      (1.0/2.0)*u1_B0(2,0,0) - (1.0/4.0)*u1_B0(-1,0,0) + ((1.0/12.0))*u1_B0(3,0,0) + ((3.0/2.0))*u1_B0(1,0,0)
)
:
      ((idx[0] == -1 + block0np0) ? (
   -4*u1_B0(-1,0,0) + 3*u1_B0(-2,0,0) - (4.0/3.0)*u1_B0(-3,0,0) +
      ((1.0/4.0))*u1_B0(-4,0,0) + ((25.0/12.0))*u1_B0(0,0,0)
)
: ((idx[0] == -2 + block0np0) ? (

      ((1.0/2.0))*u1_B0(-2,0,0) - (3.0/2.0)*u1_B0(-1,0,0) - (1.0/12.0)*u1_B0(-3,0,0) + ((1.0/4.0))*u1_B0(1,0,0) +
      ((5.0/6.0))*u1_B0(0,0,0)
)
: (
   -(2.0/3.0)*u1_B0(-1,0,0) - (1.0/12.0)*u1_B0(2,0,0) + ((1.0/12.0))*u1_B0(-2,0,0)
      + ((2.0/3.0))*u1_B0(1,0,0)
)))));

    d1_u1_dz = (-(2.0/3.0)*u1_B0(0,0,-1) - (1.0/12.0)*u1_B0(0,0,2) + ((1.0/12.0))*u1_B0(0,0,-2) +
      ((2.0/3.0))*u1_B0(0,0,1))*invDelta2block0;

    kappa_B0(0,0,0) = ((D00_B0(0,0,0)*d1_u0_dx + D01_B0(0,0,0)*d1_u1_dx + D10_B0(0,0,0)*d1_u0_dy +
      D11_B0(0,0,0)*d1_u1_dy + d1_u2_dz)*(D00_B0(0,0,0)*d1_u0_dx + D01_B0(0,0,0)*d1_u1_dx + D10_B0(0,0,0)*d1_u0_dy +
      D11_B0(0,0,0)*d1_u1_dy + d1_u2_dz))*(0.5 - 0.5*tanh(2.5 + 500.0*(D00_B0(0,0,0)*d1_u0_dx + D01_B0(0,0,0)*d1_u1_dx +
      D10_B0(0,0,0)*d1_u0_dy + D11_B0(0,0,0)*d1_u1_dy + d1_u2_dz)/sqrt((Delta0block0*Delta0block0) +
      (Delta1block0*Delta1block0) + (Delta2block0*Delta2block0))))/(1.0e-40 + ((-d1_u1_dz + D01_B0(0,0,0)*d1_u2_dx +
      D11_B0(0,0,0)*d1_u2_dy)*(-d1_u1_dz + D01_B0(0,0,0)*d1_u2_dx + D11_B0(0,0,0)*d1_u2_dy)) + ((-D00_B0(0,0,0)*d1_u2_dx
      - D10_B0(0,0,0)*d1_u2_dy + d1_u0_dz)*(-D00_B0(0,0,0)*d1_u2_dx - D10_B0(0,0,0)*d1_u2_dy + d1_u0_dz)) +
      ((D00_B0(0,0,0)*d1_u1_dx + D10_B0(0,0,0)*d1_u1_dy - D01_B0(0,0,0)*d1_u0_dx -
      D11_B0(0,0,0)*d1_u0_dy)*(D00_B0(0,0,0)*d1_u1_dx + D10_B0(0,0,0)*d1_u1_dy - D01_B0(0,0,0)*d1_u0_dx -
      D11_B0(0,0,0)*d1_u0_dy)) + ((D00_B0(0,0,0)*d1_u0_dx + D01_B0(0,0,0)*d1_u1_dx + D10_B0(0,0,0)*d1_u0_dy +
      D11_B0(0,0,0)*d1_u1_dy + d1_u2_dz)*(D00_B0(0,0,0)*d1_u0_dx + D01_B0(0,0,0)*d1_u1_dx + D10_B0(0,0,0)*d1_u0_dy +
      D11_B0(0,0,0)*d1_u1_dy + d1_u2_dz)));

}



__global__ void ops_opensbliblock00Kernel061(
double* __restrict arg0,
double* __restrict arg1,
double* __restrict arg2,
double* __restrict arg3,
double* __restrict arg4,
double* __restrict arg5,
double* __restrict arg6,
double* __restrict arg7,
int arg_idx0, int arg_idx1, int arg_idx2,
int size0,
int size1,
int size2 ){


  int idx_z = blockDim.z * blockIdx.z + threadIdx.z;
  int idx_y = blockDim.y * blockIdx.y + threadIdx.y;
  int idx_x = blockDim.x * blockIdx.x + threadIdx.x;

  int arg_idx[3];
  arg_idx[0] = arg_idx0+idx_x;
  arg_idx[1] = arg_idx1+idx_y;
  arg_idx[2] = arg_idx2+idx_z;
  arg0 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel061[0][0] + idx_z * 1*1 * dims_opensbliblock00Kernel061[0][0] * dims_opensbliblock00Kernel061[0][1];
  arg1 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel061[1][0] + idx_z * 1*1 * dims_opensbliblock00Kernel061[1][0] * dims_opensbliblock00Kernel061[1][1];
  arg2 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel061[2][0] + idx_z * 1*1 * dims_opensbliblock00Kernel061[2][0] * dims_opensbliblock00Kernel061[2][1];
  arg3 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel061[3][0] + idx_z * 1*1 * dims_opensbliblock00Kernel061[3][0] * dims_opensbliblock00Kernel061[3][1];
  arg4 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel061[4][0] + idx_z * 1*1 * dims_opensbliblock00Kernel061[4][0] * dims_opensbliblock00Kernel061[4][1];
  arg5 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel061[5][0] + idx_z * 1*1 * dims_opensbliblock00Kernel061[5][0] * dims_opensbliblock00Kernel061[5][1];
  arg6 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel061[6][0] + idx_z * 1*1 * dims_opensbliblock00Kernel061[6][0] * dims_opensbliblock00Kernel061[6][1];
  arg7 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel061[7][0] + idx_z * 1*1 * dims_opensbliblock00Kernel061[7][0] * dims_opensbliblock00Kernel061[7][1];

  if (idx_x < size0 && idx_y < size1 && idx_z < size2) {
    const ACC<double> argp0(dims_opensbliblock00Kernel061[0][0], dims_opensbliblock00Kernel061[0][1], arg0);
    const ACC<double> argp1(dims_opensbliblock00Kernel061[1][0], dims_opensbliblock00Kernel061[1][1], arg1);
    const ACC<double> argp2(dims_opensbliblock00Kernel061[2][0], dims_opensbliblock00Kernel061[2][1], arg2);
    const ACC<double> argp3(dims_opensbliblock00Kernel061[3][0], dims_opensbliblock00Kernel061[3][1], arg3);
    const ACC<double> argp4(dims_opensbliblock00Kernel061[4][0], dims_opensbliblock00Kernel061[4][1], arg4);
    const ACC<double> argp5(dims_opensbliblock00Kernel061[5][0], dims_opensbliblock00Kernel061[5][1], arg5);
    const ACC<double> argp6(dims_opensbliblock00Kernel061[6][0], dims_opensbliblock00Kernel061[6][1], arg6);
    ACC<double> argp7(dims_opensbliblock00Kernel061[7][0], dims_opensbliblock00Kernel061[7][1], arg7);
    opensbliblock00Kernel061_gpu(
     argp0, argp1, argp2, argp3, argp4,
     argp5, argp6, argp7, arg_idx);
  }

}

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel061(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8) {
#else
void ops_par_loop_opensbliblock00Kernel061_execute(ops_kernel_descriptor *desc) {
  int dim = desc->dim;
  #if OPS_MPI
  ops_block block = desc->block;
  #endif
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  #endif

  //Timing
  double t1,t2,c1,c2;

  ops_arg args[9] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8};


  #if CHECKPOINTING && !OPS_LAZY
  if (!ops_checkpointing_before(args,9,range,33)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,33,"opensbliblock00Kernel061");
    block->instance->OPS_kernels[33].count++;
    ops_timers_core(&c1,&t1);
  }

  //compute locally allocated range for the sub-block
  int start[3];
  int end[3];

  int arg_idx[3];
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<3; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 9,block, range, start, end, arg_idx) < 0) return;
  #endif

  #if defined(OPS_MPI)
  #if defined(OPS_LAZY)
  sub_block_list sb = OPS_sub_block_list[block->index];
  arg_idx[0] = sb->decomp_disp[0]+start[0];
  arg_idx[1] = sb->decomp_disp[1]+start[1];
  arg_idx[2] = sb->decomp_disp[2]+start[2];
  #endif
  #else //OPS_MPI
  arg_idx[0] = start[0];
  arg_idx[1] = start[1];
  arg_idx[2] = start[2];
  #endif //OPS_MPI
  int xdim0 = args[0].dat->size[0];
  int ydim0 = args[0].dat->size[1];
  int xdim1 = args[1].dat->size[0];
  int ydim1 = args[1].dat->size[1];
  int xdim2 = args[2].dat->size[0];
  int ydim2 = args[2].dat->size[1];
  int xdim3 = args[3].dat->size[0];
  int ydim3 = args[3].dat->size[1];
  int xdim4 = args[4].dat->size[0];
  int ydim4 = args[4].dat->size[1];
  int xdim5 = args[5].dat->size[0];
  int ydim5 = args[5].dat->size[1];
  int xdim6 = args[6].dat->size[0];
  int ydim6 = args[6].dat->size[1];
  int xdim7 = args[7].dat->size[0];
  int ydim7 = args[7].dat->size[1];

  if (xdim0 != dims_opensbliblock00Kernel061_h[0][0] || ydim0 != dims_opensbliblock00Kernel061_h[0][1] || xdim1 != dims_opensbliblock00Kernel061_h[1][0] || ydim1 != dims_opensbliblock00Kernel061_h[1][1] || xdim2 != dims_opensbliblock00Kernel061_h[2][0] || ydim2 != dims_opensbliblock00Kernel061_h[2][1] || xdim3 != dims_opensbliblock00Kernel061_h[3][0] || ydim3 != dims_opensbliblock00Kernel061_h[3][1] || xdim4 != dims_opensbliblock00Kernel061_h[4][0] || ydim4 != dims_opensbliblock00Kernel061_h[4][1] || xdim5 != dims_opensbliblock00Kernel061_h[5][0] || ydim5 != dims_opensbliblock00Kernel061_h[5][1] || xdim6 != dims_opensbliblock00Kernel061_h[6][0] || ydim6 != dims_opensbliblock00Kernel061_h[6][1] || xdim7 != dims_opensbliblock00Kernel061_h[7][0] || ydim7 != dims_opensbliblock00Kernel061_h[7][1]) {
    dims_opensbliblock00Kernel061_h[0][0] = xdim0;
    dims_opensbliblock00Kernel061_h[0][1] = ydim0;
    dims_opensbliblock00Kernel061_h[1][0] = xdim1;
    dims_opensbliblock00Kernel061_h[1][1] = ydim1;
    dims_opensbliblock00Kernel061_h[2][0] = xdim2;
    dims_opensbliblock00Kernel061_h[2][1] = ydim2;
    dims_opensbliblock00Kernel061_h[3][0] = xdim3;
    dims_opensbliblock00Kernel061_h[3][1] = ydim3;
    dims_opensbliblock00Kernel061_h[4][0] = xdim4;
    dims_opensbliblock00Kernel061_h[4][1] = ydim4;
    dims_opensbliblock00Kernel061_h[5][0] = xdim5;
    dims_opensbliblock00Kernel061_h[5][1] = ydim5;
    dims_opensbliblock00Kernel061_h[6][0] = xdim6;
    dims_opensbliblock00Kernel061_h[6][1] = ydim6;
    dims_opensbliblock00Kernel061_h[7][0] = xdim7;
    dims_opensbliblock00Kernel061_h[7][1] = ydim7;
    cutilSafeCall(block->instance->ostream(), cudaMemcpyToSymbol( dims_opensbliblock00Kernel061, dims_opensbliblock00Kernel061_h, sizeof(dims_opensbliblock00Kernel061)));
  }



  int x_size = MAX(0,end[0]-start[0]);
  int y_size = MAX(0,end[1]-start[1]);
  int z_size = MAX(0,end[2]-start[2]);

  dim3 grid( (x_size-1)/block->instance->OPS_block_size_x+ 1, (y_size-1)/block->instance->OPS_block_size_y + 1, (z_size-1)/block->instance->OPS_block_size_z +1);
  dim3 tblock(block->instance->OPS_block_size_x,block->instance->OPS_block_size_y,block->instance->OPS_block_size_z);



  long long int dat0 = (block->instance->OPS_soa ? args[0].dat->type_size : args[0].dat->elem_size);
  long long int dat1 = (block->instance->OPS_soa ? args[1].dat->type_size : args[1].dat->elem_size);
  long long int dat2 = (block->instance->OPS_soa ? args[2].dat->type_size : args[2].dat->elem_size);
  long long int dat3 = (block->instance->OPS_soa ? args[3].dat->type_size : args[3].dat->elem_size);
  long long int dat4 = (block->instance->OPS_soa ? args[4].dat->type_size : args[4].dat->elem_size);
  long long int dat5 = (block->instance->OPS_soa ? args[5].dat->type_size : args[5].dat->elem_size);
  long long int dat6 = (block->instance->OPS_soa ? args[6].dat->type_size : args[6].dat->elem_size);
  long long int dat7 = (block->instance->OPS_soa ? args[7].dat->type_size : args[7].dat->elem_size);

  char *p_a[9];

  //set up initial pointers
  long long int base0 = args[0].dat->base_offset + 
           dat0 * 1 * (start[0] * args[0].stencil->stride[0]);
  base0 = base0+ dat0 *
    args[0].dat->size[0] *
    (start[1] * args[0].stencil->stride[1]);
  base0 = base0+ dat0 *
    args[0].dat->size[0] *
    args[0].dat->size[1] *
    (start[2] * args[0].stencil->stride[2]);
  p_a[0] = (char *)args[0].data_d + base0;

  long long int base1 = args[1].dat->base_offset + 
           dat1 * 1 * (start[0] * args[1].stencil->stride[0]);
  base1 = base1+ dat1 *
    args[1].dat->size[0] *
    (start[1] * args[1].stencil->stride[1]);
  base1 = base1+ dat1 *
    args[1].dat->size[0] *
    args[1].dat->size[1] *
    (start[2] * args[1].stencil->stride[2]);
  p_a[1] = (char *)args[1].data_d + base1;

  long long int base2 = args[2].dat->base_offset + 
           dat2 * 1 * (start[0] * args[2].stencil->stride[0]);
  base2 = base2+ dat2 *
    args[2].dat->size[0] *
    (start[1] * args[2].stencil->stride[1]);
  base2 = base2+ dat2 *
    args[2].dat->size[0] *
    args[2].dat->size[1] *
    (start[2] * args[2].stencil->stride[2]);
  p_a[2] = (char *)args[2].data_d + base2;

  long long int base3 = args[3].dat->base_offset + 
           dat3 * 1 * (start[0] * args[3].stencil->stride[0]);
  base3 = base3+ dat3 *
    args[3].dat->size[0] *
    (start[1] * args[3].stencil->stride[1]);
  base3 = base3+ dat3 *
    args[3].dat->size[0] *
    args[3].dat->size[1] *
    (start[2] * args[3].stencil->stride[2]);
  p_a[3] = (char *)args[3].data_d + base3;

  long long int base4 = args[4].dat->base_offset + 
           dat4 * 1 * (start[0] * args[4].stencil->stride[0]);
  base4 = base4+ dat4 *
    args[4].dat->size[0] *
    (start[1] * args[4].stencil->stride[1]);
  base4 = base4+ dat4 *
    args[4].dat->size[0] *
    args[4].dat->size[1] *
    (start[2] * args[4].stencil->stride[2]);
  p_a[4] = (char *)args[4].data_d + base4;

  long long int base5 = args[5].dat->base_offset + 
           dat5 * 1 * (start[0] * args[5].stencil->stride[0]);
  base5 = base5+ dat5 *
    args[5].dat->size[0] *
    (start[1] * args[5].stencil->stride[1]);
  base5 = base5+ dat5 *
    args[5].dat->size[0] *
    args[5].dat->size[1] *
    (start[2] * args[5].stencil->stride[2]);
  p_a[5] = (char *)args[5].data_d + base5;

  long long int base6 = args[6].dat->base_offset + 
           dat6 * 1 * (start[0] * args[6].stencil->stride[0]);
  base6 = base6+ dat6 *
    args[6].dat->size[0] *
    (start[1] * args[6].stencil->stride[1]);
  base6 = base6+ dat6 *
    args[6].dat->size[0] *
    args[6].dat->size[1] *
    (start[2] * args[6].stencil->stride[2]);
  p_a[6] = (char *)args[6].data_d + base6;

  long long int base7 = args[7].dat->base_offset + 
           dat7 * 1 * (start[0] * args[7].stencil->stride[0]);
  base7 = base7+ dat7 *
    args[7].dat->size[0] *
    (start[1] * args[7].stencil->stride[1]);
  base7 = base7+ dat7 *
    args[7].dat->size[0] *
    args[7].dat->size[1] *
    (start[2] * args[7].stencil->stride[2]);
  p_a[7] = (char *)args[7].data_d + base7;


  #ifndef OPS_LAZY
  ops_H_D_exchanges_device(args, 9);
  ops_halo_exchanges(args,9,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[33].mpi_time += t2-t1;
  }


  //call kernel wrapper function, passing in pointers to data
  if (x_size > 0 && y_size > 0 && z_size > 0)
    ops_opensbliblock00Kernel061<<<grid, tblock >>> ( 
     (double *)p_a[0], (double *)p_a[1],
     (double *)p_a[2], (double *)p_a[3],
     (double *)p_a[4], (double *)p_a[5],
     (double *)p_a[6], (double *)p_a[7],
     arg_idx[0], arg_idx[1], arg_idx[2],
    x_size, y_size, z_size);

  cutilSafeCall(block->instance->ostream(), cudaGetLastError());

  if (block->instance->OPS_diags>1) {
    cutilSafeCall(block->instance->ostream(), cudaDeviceSynchronize());
    ops_timers_core(&c1,&t1);
    block->instance->OPS_kernels[33].time += t1-t2;
  }

  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 9);
  ops_set_halo_dirtybit3(&args[7],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[33].mpi_time += t2-t1;
    block->instance->OPS_kernels[33].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[33].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[33].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[33].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[33].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[33].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[33].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[33].transfer += ops_compute_transfer(dim, start, end, &arg7);
  }
}

#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel061(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8) {
  ops_arg args[9] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8 };

  //create kernel descriptor and pass it to ops_enqueue_kernel
  create_kerneldesc_and_enque(name, args, 9, 33, dim, 1, range, block, ops_par_loop_opensbliblock00Kernel061_execute);
}
#endif
