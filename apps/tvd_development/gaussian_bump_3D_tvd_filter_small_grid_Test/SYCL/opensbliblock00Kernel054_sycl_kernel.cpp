//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel054(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8) {
#else
void ops_par_loop_opensbliblock00Kernel054_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[9] = { arg0, arg1, arg2, arg3, arg4,
 arg5, arg6, arg7, arg8};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,9,range,0)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,0,"opensbliblock00Kernel054");
    block->instance->OPS_kernels[0].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "opensbliblock00Kernel054");
  #endif


  //compute locally allocated range for the sub-block
  int start[3];
  int end[3];
  int arg_idx[3];
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<3; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 9,block, range, start, end, arg_idx) < 0) return;
  #endif

  #if defined(OPS_MPI)
  #if defined(OPS_LAZY)
  sub_block_list sb = OPS_sub_block_list[block->index];
  arg_idx[0] = sb->decomp_disp[0];
  arg_idx[1] = sb->decomp_disp[1];
  arg_idx[2] = sb->decomp_disp[2];
  #else
  arg_idx[0] -= start[0];
  arg_idx[1] -= start[1];
  arg_idx[2] -= start[2];
  #endif
  #else //OPS_MPI
  arg_idx[0] = 0;
  arg_idx[1] = 0;
  arg_idx[2] = 0;
  #endif //OPS_MPI

  //initialize global variable with the dimension of dats
  int xdim0_opensbliblock00Kernel054 = args[0].dat->size[0];
  int ydim0_opensbliblock00Kernel054 = args[0].dat->size[1];
  int xdim1_opensbliblock00Kernel054 = args[1].dat->size[0];
  int ydim1_opensbliblock00Kernel054 = args[1].dat->size[1];
  int xdim2_opensbliblock00Kernel054 = args[2].dat->size[0];
  int ydim2_opensbliblock00Kernel054 = args[2].dat->size[1];
  int xdim3_opensbliblock00Kernel054 = args[3].dat->size[0];
  int ydim3_opensbliblock00Kernel054 = args[3].dat->size[1];
  int xdim4_opensbliblock00Kernel054 = args[4].dat->size[0];
  int ydim4_opensbliblock00Kernel054 = args[4].dat->size[1];
  int xdim5_opensbliblock00Kernel054 = args[5].dat->size[0];
  int ydim5_opensbliblock00Kernel054 = args[5].dat->size[1];
  int xdim6_opensbliblock00Kernel054 = args[6].dat->size[0];
  int ydim6_opensbliblock00Kernel054 = args[6].dat->size[1];
  int xdim7_opensbliblock00Kernel054 = args[7].dat->size[0];
  int ydim7_opensbliblock00Kernel054 = args[7].dat->size[1];

  //set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset/sizeof(double);
  double* rhoE_B0_p = (double*)args[0].data_d;

  int base1 = args[1].dat->base_offset/sizeof(double);
  double* rho_B0_p = (double*)args[1].data_d;

  int base2 = args[2].dat->base_offset/sizeof(double);
  double* rhou0_B0_p = (double*)args[2].data_d;

  int base3 = args[3].dat->base_offset/sizeof(double);
  double* rhou1_B0_p = (double*)args[3].data_d;

  int base4 = args[4].dat->base_offset/sizeof(double);
  double* rhou2_B0_p = (double*)args[4].data_d;

  int base5 = args[5].dat->base_offset/sizeof(double);
  double* x0_B0_p = (double*)args[5].data_d;

  int base6 = args[6].dat->base_offset/sizeof(double);
  double* x2_B0_p = (double*)args[6].data_d;

  int base7 = args[7].dat->base_offset/sizeof(double);
  double* x1_B0_p = (double*)args[7].data_d;




  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_device(args, 9);
  ops_halo_exchanges(args,9,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[0].mpi_time += __t1-__t2;
  }

  int start_0 = start[0];
  int end_0 = end[0];
  int arg_idx_0 = arg_idx[0];
  int start_1 = start[1];
  int end_1 = end[1];
  int arg_idx_1 = arg_idx[1];
  int start_2 = start[2];
  int end_2 = end[2];
  int arg_idx_2 = arg_idx[2];
  if ((end[0]-start[0])>0 && (end[1]-start[1])>0 && (end[2]-start[2])>0) {
    block->instance->sycl_instance->queue->submit([&](cl::sycl::handler &cgh) {

      auto Delta0block0_sycl = (*Delta0block0_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto Delta1block0_sycl = (*Delta1block0_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto Delta2block0_sycl = (*Delta2block0_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto H_sycl = (*H_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto L_sycl = (*L_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto b_sycl = (*b_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto inv2Minf_sycl = (*inv2Minf_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto inv2a_sycl = (*inv2a_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto invH_sycl = (*invH_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto inv_gamma_m1_sycl = (*inv_gamma_m1_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto invgama_sycl = (*invgama_p).template get_access<cl::sycl::access::mode::read>(cgh);

      cgh.parallel_for<class opensbliblock00Kernel054_kernel>(cl::sycl::nd_range<3>(cl::sycl::range<3>(
           ((end[2]-start[2]-1)/block->instance->OPS_block_size_z+1)*block->instance->OPS_block_size_z,
           ((end[1]-start[1]-1)/block->instance->OPS_block_size_y+1)*block->instance->OPS_block_size_y,
            ((end[0]-start[0]-1)/block->instance->OPS_block_size_x+1)*block->instance->OPS_block_size_x
             ),cl::sycl::range<3>(
             block->instance->OPS_block_size_z,
             block->instance->OPS_block_size_y,
      block->instance->OPS_block_size_x
             ))
      , [=](cl::sycl::nd_item<3> item
      ) [[intel::kernel_args_restrict]] {
        int n_z = item.get_global_id(0)+start_2;
        int n_y = item.get_global_id(1)+start_1;
        int n_x = item.get_global_id(2)+start_0;
        int idx[] = {arg_idx_0+n_x, arg_idx_1+n_y, arg_idx_2+n_z};
        ACC<double> rhoE_B0(xdim0_opensbliblock00Kernel054, ydim0_opensbliblock00Kernel054, &rhoE_B0_p[0] + base0 + n_x*1 + n_y * xdim0_opensbliblock00Kernel054*1 + n_z * xdim0_opensbliblock00Kernel054 * ydim0_opensbliblock00Kernel054*1);
        ACC<double> rho_B0(xdim1_opensbliblock00Kernel054, ydim1_opensbliblock00Kernel054, &rho_B0_p[0] + base1 + n_x*1 + n_y * xdim1_opensbliblock00Kernel054*1 + n_z * xdim1_opensbliblock00Kernel054 * ydim1_opensbliblock00Kernel054*1);
        ACC<double> rhou0_B0(xdim2_opensbliblock00Kernel054, ydim2_opensbliblock00Kernel054, &rhou0_B0_p[0] + base2 + n_x*1 + n_y * xdim2_opensbliblock00Kernel054*1 + n_z * xdim2_opensbliblock00Kernel054 * ydim2_opensbliblock00Kernel054*1);
        ACC<double> rhou1_B0(xdim3_opensbliblock00Kernel054, ydim3_opensbliblock00Kernel054, &rhou1_B0_p[0] + base3 + n_x*1 + n_y * xdim3_opensbliblock00Kernel054*1 + n_z * xdim3_opensbliblock00Kernel054 * ydim3_opensbliblock00Kernel054*1);
        ACC<double> rhou2_B0(xdim4_opensbliblock00Kernel054, ydim4_opensbliblock00Kernel054, &rhou2_B0_p[0] + base4 + n_x*1 + n_y * xdim4_opensbliblock00Kernel054*1 + n_z * xdim4_opensbliblock00Kernel054 * ydim4_opensbliblock00Kernel054*1);
        ACC<double> x0_B0(xdim5_opensbliblock00Kernel054, ydim5_opensbliblock00Kernel054, &x0_B0_p[0] + base5 + n_x*1 + n_y * xdim5_opensbliblock00Kernel054*1 + n_z * xdim5_opensbliblock00Kernel054 * ydim5_opensbliblock00Kernel054*1);
        ACC<double> x2_B0(xdim6_opensbliblock00Kernel054, ydim6_opensbliblock00Kernel054, &x2_B0_p[0] + base6 + n_x*1 + n_y * xdim6_opensbliblock00Kernel054*1 + n_z * xdim6_opensbliblock00Kernel054 * ydim6_opensbliblock00Kernel054*1);
        ACC<double> x1_B0(xdim7_opensbliblock00Kernel054, ydim7_opensbliblock00Kernel054, &x1_B0_p[0] + base7 + n_x*1 + n_y * xdim7_opensbliblock00Kernel054*1 + n_z * xdim7_opensbliblock00Kernel054 * ydim7_opensbliblock00Kernel054*1);
        //USER CODE
        if (n_x < end_0 && n_y < end_1 && n_z < end_2) {
          
   double T = 0.0;
   double rho = 0.0;
   double rhou0 = 0.0;
   double rhou1 = 0.0;
   x0_B0(0,0,0) = Delta0block0_sycl[0]*idx[0];

    x1_B0(0,0,0) = ((1.0/20.0))*H_sycl[0]*cl::sycl::exp(-((-(1.0/2.0)*L_sycl[0] + Delta0block0_sycl[0]*idx[0])*(-(1.0/2.0)*L_sycl[0] +
      Delta0block0_sycl[0]*idx[0]))*inv2a_sycl[0]) + (-(1.0/20.0)*H_sycl[0]*cl::sycl::exp(-((-(1.0/2.0)*L_sycl[0] + Delta0block0_sycl[0]*idx[0])*(-(1.0/2.0)*L_sycl[0] +
      Delta0block0_sycl[0]*idx[0]))*inv2a_sycl[0]) + H_sycl[0])*sinh(b_sycl[0]*invH_sycl[0]*Delta1block0_sycl[0]*idx[1])/sinh(b_sycl[0]);

   x2_B0(0,0,0) = Delta2block0_sycl[0]*idx[2];

    rhou0 = ((x1_B0(0,0,0) < 3.47434743474347) ? (
   -9.17067018165446e-7 + 1.04904785912717e-12*pow(x1_B0(0,0,0), 32)
      + 1.93885271233942e-8*pow(x1_B0(0,0,0), 24) + 1.89852844373312e-11*pow(x1_B0(0,0,0), 29) +
      3.37370804774424*pow(x1_B0(0,0,0), 9) + 0.0359510928126198*pow(x1_B0(0,0,0), 11) +
      1.76866484703332e-11*pow(x1_B0(0,0,0), 30) + 8.55538618337689e-18*pow(x1_B0(0,0,0), 41) +
      1.24379952358685*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) +
      1.76792777158731e-20*pow(x1_B0(0,0,0), 47) + 0.00017691036378445*pow(x1_B0(0,0,0), 17) +
      5.89461687058746e-12*pow(x1_B0(0,0,0), 31) + 1.24225192775816e-7*pow(x1_B0(0,0,0), 23) +
      0.137059939944025*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) + 2.35704636892935e-22*pow(x1_B0(0,0,0), 50) +
      5.38134402885701e-16*pow(x1_B0(0,0,0), 38) + 4.89915999852604*pow(x1_B0(0,0,0), 7) +
      0.000614017778541162*pow(x1_B0(0,0,0), 16) + 2.86778862696949e-16*pow(x1_B0(0,0,0), 39) +
      5.55514524457723e-22*pow(x1_B0(0,0,0), 48) + 3.24118837721475e-7*pow(x1_B0(0,0,0), 22) +
      7.78685163399157e-17*pow(x1_B0(0,0,0), 40) + 0.0951694369630824*pow(x1_B0(0,0,0), 12) +
      4.28094523966535e-20*pow(x1_B0(0,0,0), 46) + 0.423485026937325*x1_B0(0,0,0) -
      3.82231789496219e-14*pow(x1_B0(0,0,0), 33) - 0.00596081896192219*pow(x1_B0(0,0,0), 13) -
      1.03761285206079e-13*pow(x1_B0(0,0,0), 34) - 2.01042980423323e-21*pow(x1_B0(0,0,0), 49) -
      3.04338937551007*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) -
      0.00843501466200706*pow(x1_B0(0,0,0), 14) - 2.10203301192962e-18*pow(x1_B0(0,0,0), 43) -
      5.69178037573737e-19*pow(x1_B0(0,0,0), 44) - 9.50679806994433e-15*pow(x1_B0(0,0,0), 36) -
      6.17136538416838e-6*pow(x1_B0(0,0,0), 18) - 1.09599584261102e-7*pow(x1_B0(0,0,0), 21) -
      3.20359957168517e-18*pow(x1_B0(0,0,0), 42) - 0.0037399214502528*(x1_B0(0,0,0)*x1_B0(0,0,0)) -
      1.19041952735479e-10*pow(x1_B0(0,0,0), 28) - 1.62610179290494e-5*pow(x1_B0(0,0,0), 19) -
      0.000525101058483408*pow(x1_B0(0,0,0), 15) - 3.03740635176385e-20*pow(x1_B0(0,0,0), 45) -
      1.15705905931138*pow(x1_B0(0,0,0), 10) - 4.43597629138548e-6*pow(x1_B0(0,0,0), 20) -
      5.15676788952549*pow(x1_B0(0,0,0), 8) - 0.338659488930541*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) -
      6.16209661908411e-16*pow(x1_B0(0,0,0), 37) - 2.65285464174594e-9*pow(x1_B0(0,0,0), 26) -
      4.18364197030384e-14*pow(x1_B0(0,0,0), 35) - 2.75755111469832e-9*pow(x1_B0(0,0,0), 25) -
      8.2958200408048e-10*pow(x1_B0(0,0,0), 27)
)
: (
   0.999999408165728
));

    rhou1 = ((x1_B0(0,0,0) < 3.47434743474347) ? (
   -3.80679683270553e-8 + 6.17437190708395e-8*pow(x1_B0(0,0,0), 18) +
      7.98844798973513e-14*pow(x1_B0(0,0,0), 29) + 0.00108954905836295*(x1_B0(0,0,0)*x1_B0(0,0,0)) +
      0.00117080257732117*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) +
      0.0243865952440656*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) +
      1.2544013801972e-14*pow(x1_B0(0,0,0), 32) + 1.06115104000346e-19*pow(x1_B0(0,0,0), 41) +
      7.68574113729758e-24*pow(x1_B0(0,0,0), 48) + 6.1051360242979e-14*pow(x1_B0(0,0,0), 31) +
      4.13310784400092e-6*x1_B0(0,0,0) + 2.61275509277859e-10*pow(x1_B0(0,0,0), 24) +
      2.24860630110554e-6*pow(x1_B0(0,0,0), 17) + 4.24813157066436e-18*pow(x1_B0(0,0,0), 38) +
      0.00121959012162624*pow(x1_B0(0,0,0), 12) + 2.15865801047236e-24*pow(x1_B0(0,0,0), 50) +
      0.0823410741549325*pow(x1_B0(0,0,0), 7) + 1.61740789629939e-13*pow(x1_B0(0,0,0), 30) +
      1.35323978446153e-9*pow(x1_B0(0,0,0), 23) + 3.29846676501425e-16*pow(x1_B0(0,0,0), 33) +
      0.0477784801337204*pow(x1_B0(0,0,0), 9) + 2.89430210932789e-9*pow(x1_B0(0,0,0), 22) +
      2.69890057447216e-18*pow(x1_B0(0,0,0), 39) + 1.7055391487583e-22*pow(x1_B0(0,0,0), 47) +
      6.1877361855565e-6*pow(x1_B0(0,0,0), 16) + 3.81994771390975e-22*pow(x1_B0(0,0,0), 46) +
      7.95464046126323e-19*pow(x1_B0(0,0,0), 40) - 8.98633672109457e-12*pow(x1_B0(0,0,0), 27) -
      0.000100734047354864*pow(x1_B0(0,0,0), 14) -
      0.0553962785044558*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) -
      5.39132582911632e-8*pow(x1_B0(0,0,0), 20) - 8.91370364440569e-16*pow(x1_B0(0,0,0), 34) -
      4.19966155397138e-9*pow(x1_B0(0,0,0), 21) - 0.0798165116789603*pow(x1_B0(0,0,0), 8) -
      1.95905283896047e-20*pow(x1_B0(0,0,0), 43) - 1.02381592894008e-17*pow(x1_B0(0,0,0), 37) -
      0.0065291150198612*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) - 4.10642443126274e-16*pow(x1_B0(0,0,0),
      35) - 0.0144672034577952*pow(x1_B0(0,0,0), 10) - 1.03104386401594e-16*pow(x1_B0(0,0,0), 36) -
      4.25687501595231e-22*pow(x1_B0(0,0,0), 45) - 1.63208286958713e-7*pow(x1_B0(0,0,0), 19) -
      0.000172963130675947*pow(x1_B0(0,0,0), 11) - 1.03892000788701e-11*pow(x1_B0(0,0,0), 25) -
      1.89304810551059e-23*pow(x1_B0(0,0,0), 49) - 1.1378430342786e-5*pow(x1_B0(0,0,0), 15) -
      1.24342987020385e-5*pow(x1_B0(0,0,0), 13) - 5.70270018671184e-21*pow(x1_B0(0,0,0), 44) -
      2.49689949922651e-11*pow(x1_B0(0,0,0), 26) - 1.58801109347899e-12*pow(x1_B0(0,0,0), 28) -
      2.46652489644593e-20*pow(x1_B0(0,0,0), 42)
)
: (
   0.00564965542946911
));

    T = ((x1_B0(0,0,0) < 3.47434743474347) ? (
   1.6761935358689 + 3.06271483864277e-12*pow(x1_B0(0,0,0), 28) +
      2.79501807927091e-7*pow(x1_B0(0,0,0), 20) + 0.00248603775823404*pow(x1_B0(0,0,0), 13) +
      5.25705556202282e-6*pow(x1_B0(0,0,0), 18) + 4.19441885278622e-10*pow(x1_B0(0,0,0), 26) +
      1.03697988973593e-15*pow(x1_B0(0,0,0), 36) + 2.23763761894274e-6*pow(x1_B0(0,0,0), 19) +
      1.89606475958188e-14*pow(x1_B0(0,0,0), 34) + 0.026058157490231*pow(x1_B0(0,0,0), 9) +
      2.85584693354611e-14*pow(x1_B0(0,0,0), 33) + 0.015991867493063*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) +
      0.0005690725244923*pow(x1_B0(0,0,0), 14) + 7.67501678614382e-20*pow(x1_B0(0,0,0), 44) +
      3.08132092448187e-22*pow(x1_B0(0,0,0), 49) + 9.11642836523477e-11*pow(x1_B0(0,0,0), 27) +
      0.0548594064582554*pow(x1_B0(0,0,0), 10) + 9.68279103389392e-10*pow(x1_B0(0,0,0), 25) +
      0.267013266890081*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) +
      7.42471367623149e-5*x1_B0(0,0,0) + 2.60932186295564e-22*pow(x1_B0(0,0,0), 45) +
      3.30298013300648e-19*pow(x1_B0(0,0,0), 43) + 6.69000978601176e-19*pow(x1_B0(0,0,0), 42) +
      5.96572790520319e-15*pow(x1_B0(0,0,0), 35) + 0.461494982556074*pow(x1_B0(0,0,0), 7) -
      0.103275520631868*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) - 1.09723055742956e-16*pow(x1_B0(0,0,0),
      38) - 7.62484344426692e-14*pow(x1_B0(0,0,0), 32) - 1.00465393403514e-17*pow(x1_B0(0,0,0), 40) -
      0.0232212941855831*pow(x1_B0(0,0,0), 11) - 9.35036870885335e-8*pow(x1_B0(0,0,0), 21) -
      4.75320969485837e-17*pow(x1_B0(0,0,0), 37) - 1.33864284194856e-8*pow(x1_B0(0,0,0), 23) -
      7.24235209743116e-21*pow(x1_B0(0,0,0), 46) - 5.06193774226224e-19*pow(x1_B0(0,0,0), 41) -
      0.000147531418293449*pow(x1_B0(0,0,0), 15) - 3.7998675019817e-23*pow(x1_B0(0,0,0), 50) -
      6.28278116396064e-12*pow(x1_B0(0,0,0), 29) - 0.00342181201749505*pow(x1_B0(0,0,0), 12) -
      5.70558210049695e-8*pow(x1_B0(0,0,0), 22) - 0.262070265688791*pow(x1_B0(0,0,0), 8) -
      0.291740706219782*(x1_B0(0,0,0)*x1_B0(0,0,0)) - 8.17081805890689e-24*pow(x1_B0(0,0,0), 48) -
      8.31714025029611e-5*pow(x1_B0(0,0,0), 16) - 2.58561171573909e-21*pow(x1_B0(0,0,0), 47) -
      3.6991053156892e-10*pow(x1_B0(0,0,0), 24) - 4.44270004249955e-17*pow(x1_B0(0,0,0), 39) -
      2.9329528860808e-12*pow(x1_B0(0,0,0), 30) - 7.39485082875593e-13*pow(x1_B0(0,0,0), 31) -
      0.425422766143187*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) -
      7.3582999408868e-6*pow(x1_B0(0,0,0), 17)
)
: (
   1.00000058888713
));

   rho = 1.0/T;

   rho_B0(0,0,0) = rho;

   rhou0_B0(0,0,0) = rhou0;

   rhou1_B0(0,0,0) = rhou1;

   rhoE_B0(0,0,0) = (0.5*(rhou0*rhou0) + 0.5*(rhou1*rhou1))/rho + invgama_sycl[0]*inv2Minf_sycl[0]*inv_gamma_m1_sycl[0]*T*rho;

   rhou2_B0(0,0,0) = 0.0;


        }
      });
    });
  }
  if (block->instance->OPS_diags > 1) {
    block->instance->sycl_instance->queue->wait();
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[0].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 9);
  ops_set_halo_dirtybit3(&args[0],range);
  ops_set_halo_dirtybit3(&args[1],range);
  ops_set_halo_dirtybit3(&args[2],range);
  ops_set_halo_dirtybit3(&args[3],range);
  ops_set_halo_dirtybit3(&args[4],range);
  ops_set_halo_dirtybit3(&args[5],range);
  ops_set_halo_dirtybit3(&args[6],range);
  ops_set_halo_dirtybit3(&args[7],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[0].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg7);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel054(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)calloc(1,sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 1;
  desc->index = 0;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 0;
  for ( int i=0; i<6; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 9;
  desc->args = (ops_arg*)ops_malloc(9*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg2.dat->index;
  desc->args[3] = arg3;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg3.dat->index;
  desc->args[4] = arg4;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg4.dat->index;
  desc->args[5] = arg5;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg5.dat->index;
  desc->args[6] = arg6;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg6.dat->index;
  desc->args[7] = arg7;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg7.dat->index;
  desc->args[8] = arg8;
  desc->function = ops_par_loop_opensbliblock00Kernel054_execute;
  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,0,"opensbliblock00Kernel054");
  }
  ops_enqueue_kernel(desc);
}
#endif
