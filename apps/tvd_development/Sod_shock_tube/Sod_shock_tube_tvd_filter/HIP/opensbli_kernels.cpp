//
// auto-generated by ops.py
//
//header
#define OPS_API 2
#define OPS_1D
#include "ops_lib_core.h"

#include "ops_hip_rt_support.h"
#include "ops_hip_reduction.h"


#ifdef OPS_MPI
#include "ops_mpi_core.h"
#endif
// global constants
__constant__ int block0np0;
__constant__ double Delta0block0;
__constant__ int niter;
__constant__ double dt;
__constant__ double gama;
__constant__ double gamma_m1;
__constant__ double shock_filter_control;
__constant__ double sensor_theta;
__constant__ double inv_0;
__constant__ double rc1;
__constant__ double rc2;
__constant__ double rc3;
__constant__ double rc4;
__constant__ double rc5;
__constant__ double rc6;
__constant__ double rc7;
__constant__ double rc8;
__constant__ double rc9;
__constant__ double rc10;
__constant__ double rc11;
__constant__ double rc12;
__constant__ double rc13;
__constant__ double rc14;
__constant__ double rc15;
__constant__ double rc16;
__constant__ double rc17;
__constant__ double rc18;
__constant__ double rc19;
__constant__ double rc20;
__constant__ double rc21;
__constant__ double rcinv22;

void ops_init_backend() {}

void ops_decl_const_char(OPS_instance *instance, int dim, char const *type,
int size, char *dat, char const *name){
  ops_execute(instance);
  if (!strcmp(name,"block0np0")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(block0np0), dat, dim*size));
  }
  else
  if (!strcmp(name,"Delta0block0")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(Delta0block0), dat, dim*size));
  }
  else
  if (!strcmp(name,"niter")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(niter), dat, dim*size));
  }
  else
  if (!strcmp(name,"dt")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(dt), dat, dim*size));
  }
  else
  if (!strcmp(name,"gama")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(gama), dat, dim*size));
  }
  else
  if (!strcmp(name,"gamma_m1")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(gamma_m1), dat, dim*size));
  }
  else
  if (!strcmp(name,"shock_filter_control")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(shock_filter_control), dat, dim*size));
  }
  else
  if (!strcmp(name,"sensor_theta")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(sensor_theta), dat, dim*size));
  }
  else
  if (!strcmp(name,"inv_0")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(inv_0), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc1")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc1), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc2")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc2), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc3")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc3), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc4")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc4), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc5")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc5), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc6")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc6), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc7")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc7), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc8")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc8), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc9")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc9), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc10")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc10), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc11")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc11), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc12")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc12), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc13")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc13), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc14")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc14), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc15")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc15), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc16")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc16), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc17")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc17), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc18")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc18), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc19")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc19), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc20")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc20), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc21")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc21), dat, dim*size));
  }
  else
  if (!strcmp(name,"rcinv22")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rcinv22), dat, dim*size));
  }
  else
  {
    throw OPSException(OPS_RUNTIME_ERROR, "error: unknown const name");
  }
}


//user kernel files
#include "opensbliblock00Kernel024_hip_kernel.cpp"
#include "opensbliblock00Kernel025_hip_kernel.cpp"
#include "opensbliblock00Kernel026_hip_kernel.cpp"
#include "opensbliblock00Kernel022_hip_kernel.cpp"
#include "opensbliblock00Kernel023_hip_kernel.cpp"
#include "opensbliblock00Kernel003_hip_kernel.cpp"
#include "opensbliblock00Kernel013_hip_kernel.cpp"
#include "opensbliblock00Kernel002_hip_kernel.cpp"
#include "opensbliblock00Kernel005_hip_kernel.cpp"
#include "opensbliblock00Kernel007_hip_kernel.cpp"
#include "opensbliblock00Kernel009_hip_kernel.cpp"
#include "opensbliblock00Kernel011_hip_kernel.cpp"
#include "opensbliblock00Kernel012_hip_kernel.cpp"
#include "opensbliblock00Kernel014_hip_kernel.cpp"
#include "opensbliblock00Kernel015_hip_kernel.cpp"
#include "opensbliblock00Kernel016_hip_kernel.cpp"
#include "opensbliblock00Kernel017_hip_kernel.cpp"
#include "opensbliblock00Kernel018_hip_kernel.cpp"
#include "opensbliblock00Kernel020_hip_kernel.cpp"
#include "opensbliblock00Kernel021_hip_kernel.cpp"
#include "opensbliblock00Kernel030_hip_kernel.cpp"
#include "opensbliblock00Kernel027_hip_kernel.cpp"
#include "opensbliblock00Kernel028_hip_kernel.cpp"
#include "opensbliblock00Kernel029_hip_kernel.cpp"
