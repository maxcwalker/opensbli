//
// auto-generated by ops.py
//
//header
#define OPS_1D
#define OPS_API 2
#include "ops_lib_core.h"
#ifdef OPS_MPI
#include "ops_mpi_core.h"
#include <limits>
#endif

#include "ops_sycl_rt_support.h"
#include "ops_sycl_reduction.h"
// global constants
cl::sycl::buffer<int,1> *block0np0_p=nullptr;
extern int block0np0;
cl::sycl::buffer<double,1> *Delta0block0_p=nullptr;
extern double Delta0block0;
cl::sycl::buffer<int,1> *niter_p=nullptr;
extern int niter;
cl::sycl::buffer<double,1> *dt_p=nullptr;
extern double dt;
cl::sycl::buffer<double,1> *gama_p=nullptr;
extern double gama;
cl::sycl::buffer<double,1> *gamma_m1_p=nullptr;
extern double gamma_m1;
cl::sycl::buffer<double,1> *shock_filter_control_p=nullptr;
extern double shock_filter_control;
cl::sycl::buffer<double,1> *sensor_theta_p=nullptr;
extern double sensor_theta;
cl::sycl::buffer<double,1> *inv_0_p=nullptr;
extern double inv_0;
cl::sycl::buffer<double,1> *rc1_p=nullptr;
extern double rc1;
cl::sycl::buffer<double,1> *rc2_p=nullptr;
extern double rc2;
cl::sycl::buffer<double,1> *rc3_p=nullptr;
extern double rc3;
cl::sycl::buffer<double,1> *rc4_p=nullptr;
extern double rc4;
cl::sycl::buffer<double,1> *rc5_p=nullptr;
extern double rc5;
cl::sycl::buffer<double,1> *rc6_p=nullptr;
extern double rc6;
cl::sycl::buffer<double,1> *rc7_p=nullptr;
extern double rc7;
cl::sycl::buffer<double,1> *rc8_p=nullptr;
extern double rc8;
cl::sycl::buffer<double,1> *rc9_p=nullptr;
extern double rc9;
cl::sycl::buffer<double,1> *rc10_p=nullptr;
extern double rc10;
cl::sycl::buffer<double,1> *rc11_p=nullptr;
extern double rc11;
cl::sycl::buffer<double,1> *rc12_p=nullptr;
extern double rc12;
cl::sycl::buffer<double,1> *rc13_p=nullptr;
extern double rc13;
cl::sycl::buffer<double,1> *rc14_p=nullptr;
extern double rc14;
cl::sycl::buffer<double,1> *rc15_p=nullptr;
extern double rc15;
cl::sycl::buffer<double,1> *rc16_p=nullptr;
extern double rc16;
cl::sycl::buffer<double,1> *rc17_p=nullptr;
extern double rc17;
cl::sycl::buffer<double,1> *rc18_p=nullptr;
extern double rc18;
cl::sycl::buffer<double,1> *rc19_p=nullptr;
extern double rc19;
cl::sycl::buffer<double,1> *rc20_p=nullptr;
extern double rc20;
cl::sycl::buffer<double,1> *rc21_p=nullptr;
extern double rc21;
cl::sycl::buffer<double,1> *rcinv22_p=nullptr;
extern double rcinv22;

void ops_init_backend() {}

void ops_decl_const_char(OPS_instance *instance, int dim, char const * type, int size, char * dat, char const * name ) {
  if (!strcmp(name,"block0np0")) {
    if (block0np0_p == nullptr) block0np0_p = new cl::sycl::buffer<int,1>(cl::sycl::range<1>(dim));
    auto accessor = (*block0np0_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((int*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"Delta0block0")) {
    if (Delta0block0_p == nullptr) Delta0block0_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*Delta0block0_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"niter")) {
    if (niter_p == nullptr) niter_p = new cl::sycl::buffer<int,1>(cl::sycl::range<1>(dim));
    auto accessor = (*niter_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((int*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"dt")) {
    if (dt_p == nullptr) dt_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*dt_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"gama")) {
    if (gama_p == nullptr) gama_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*gama_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"gamma_m1")) {
    if (gamma_m1_p == nullptr) gamma_m1_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*gamma_m1_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"shock_filter_control")) {
    if (shock_filter_control_p == nullptr) shock_filter_control_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*shock_filter_control_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"sensor_theta")) {
    if (sensor_theta_p == nullptr) sensor_theta_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*sensor_theta_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"inv_0")) {
    if (inv_0_p == nullptr) inv_0_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*inv_0_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"rc1")) {
    if (rc1_p == nullptr) rc1_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*rc1_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"rc2")) {
    if (rc2_p == nullptr) rc2_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*rc2_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"rc3")) {
    if (rc3_p == nullptr) rc3_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*rc3_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"rc4")) {
    if (rc4_p == nullptr) rc4_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*rc4_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"rc5")) {
    if (rc5_p == nullptr) rc5_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*rc5_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"rc6")) {
    if (rc6_p == nullptr) rc6_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*rc6_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"rc7")) {
    if (rc7_p == nullptr) rc7_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*rc7_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"rc8")) {
    if (rc8_p == nullptr) rc8_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*rc8_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"rc9")) {
    if (rc9_p == nullptr) rc9_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*rc9_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"rc10")) {
    if (rc10_p == nullptr) rc10_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*rc10_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"rc11")) {
    if (rc11_p == nullptr) rc11_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*rc11_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"rc12")) {
    if (rc12_p == nullptr) rc12_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*rc12_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"rc13")) {
    if (rc13_p == nullptr) rc13_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*rc13_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"rc14")) {
    if (rc14_p == nullptr) rc14_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*rc14_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"rc15")) {
    if (rc15_p == nullptr) rc15_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*rc15_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"rc16")) {
    if (rc16_p == nullptr) rc16_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*rc16_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"rc17")) {
    if (rc17_p == nullptr) rc17_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*rc17_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"rc18")) {
    if (rc18_p == nullptr) rc18_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*rc18_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"rc19")) {
    if (rc19_p == nullptr) rc19_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*rc19_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"rc20")) {
    if (rc20_p == nullptr) rc20_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*rc20_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"rc21")) {
    if (rc21_p == nullptr) rc21_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*rc21_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"rcinv22")) {
    if (rcinv22_p == nullptr) rcinv22_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*rcinv22_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  {
    throw OPSException(OPS_RUNTIME_ERROR, "error: unknown const name");
  }
}

//user kernel files
#include "opensbliblock00Kernel024_sycl_kernel.cpp"
#include "opensbliblock00Kernel025_sycl_kernel.cpp"
#include "opensbliblock00Kernel026_sycl_kernel.cpp"
#include "opensbliblock00Kernel022_sycl_kernel.cpp"
#include "opensbliblock00Kernel023_sycl_kernel.cpp"
#include "opensbliblock00Kernel003_sycl_kernel.cpp"
#include "opensbliblock00Kernel013_sycl_kernel.cpp"
#include "opensbliblock00Kernel002_sycl_kernel.cpp"
#include "opensbliblock00Kernel005_sycl_kernel.cpp"
#include "opensbliblock00Kernel007_sycl_kernel.cpp"
#include "opensbliblock00Kernel009_sycl_kernel.cpp"
#include "opensbliblock00Kernel011_sycl_kernel.cpp"
#include "opensbliblock00Kernel012_sycl_kernel.cpp"
#include "opensbliblock00Kernel014_sycl_kernel.cpp"
#include "opensbliblock00Kernel015_sycl_kernel.cpp"
#include "opensbliblock00Kernel016_sycl_kernel.cpp"
#include "opensbliblock00Kernel017_sycl_kernel.cpp"
#include "opensbliblock00Kernel018_sycl_kernel.cpp"
#include "opensbliblock00Kernel020_sycl_kernel.cpp"
#include "opensbliblock00Kernel021_sycl_kernel.cpp"
#include "opensbliblock00Kernel030_sycl_kernel.cpp"
#include "opensbliblock00Kernel027_sycl_kernel.cpp"
#include "opensbliblock00Kernel028_sycl_kernel.cpp"
#include "opensbliblock00Kernel029_sycl_kernel.cpp"
