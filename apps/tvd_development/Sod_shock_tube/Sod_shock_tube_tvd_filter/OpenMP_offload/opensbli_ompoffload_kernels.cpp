//
// auto-generated by ops.py
//
//header
#define OPS_1D
#define OPS_API 2
#include "ops_lib_core.h"
#ifdef OPS_MPI
#include "ops_mpi_core.h"
#endif

// global constants
extern int block0np0;
extern double Delta0block0;
extern int niter;
extern double dt;
extern double gama;
extern double gamma_m1;
extern double shock_filter_control;
extern double sensor_theta;
extern double inv_0;
extern double rc1;
extern double rc2;
extern double rc3;
extern double rc4;
extern double rc5;
extern double rc6;
extern double rc7;
extern double rc8;
extern double rc9;
extern double rc10;
extern double rc11;
extern double rc12;
extern double rc13;
extern double rc14;
extern double rc15;
extern double rc16;
extern double rc17;
extern double rc18;
extern double rc19;
extern double rc20;
extern double rc21;
extern double rcinv22;

void ops_init_backend() {}

void ops_decl_const_char(OPS_instance *instance, int dim, char const *type,
int size, char *dat, char const *name){
  ops_execute(instance);
  if (!strcmp(name,"block0np0")) {
    #pragma omp target enter data map(to:block0np0)
  }
  else
  if (!strcmp(name,"Delta0block0")) {
    #pragma omp target enter data map(to:Delta0block0)
  }
  else
  if (!strcmp(name,"niter")) {
    #pragma omp target enter data map(to:niter)
  }
  else
  if (!strcmp(name,"dt")) {
    #pragma omp target enter data map(to:dt)
  }
  else
  if (!strcmp(name,"gama")) {
    #pragma omp target enter data map(to:gama)
  }
  else
  if (!strcmp(name,"gamma_m1")) {
    #pragma omp target enter data map(to:gamma_m1)
  }
  else
  if (!strcmp(name,"shock_filter_control")) {
    #pragma omp target enter data map(to:shock_filter_control)
  }
  else
  if (!strcmp(name,"sensor_theta")) {
    #pragma omp target enter data map(to:sensor_theta)
  }
  else
  if (!strcmp(name,"inv_0")) {
    #pragma omp target enter data map(to:inv_0)
  }
  else
  if (!strcmp(name,"rc1")) {
    #pragma omp target enter data map(to:rc1)
  }
  else
  if (!strcmp(name,"rc2")) {
    #pragma omp target enter data map(to:rc2)
  }
  else
  if (!strcmp(name,"rc3")) {
    #pragma omp target enter data map(to:rc3)
  }
  else
  if (!strcmp(name,"rc4")) {
    #pragma omp target enter data map(to:rc4)
  }
  else
  if (!strcmp(name,"rc5")) {
    #pragma omp target enter data map(to:rc5)
  }
  else
  if (!strcmp(name,"rc6")) {
    #pragma omp target enter data map(to:rc6)
  }
  else
  if (!strcmp(name,"rc7")) {
    #pragma omp target enter data map(to:rc7)
  }
  else
  if (!strcmp(name,"rc8")) {
    #pragma omp target enter data map(to:rc8)
  }
  else
  if (!strcmp(name,"rc9")) {
    #pragma omp target enter data map(to:rc9)
  }
  else
  if (!strcmp(name,"rc10")) {
    #pragma omp target enter data map(to:rc10)
  }
  else
  if (!strcmp(name,"rc11")) {
    #pragma omp target enter data map(to:rc11)
  }
  else
  if (!strcmp(name,"rc12")) {
    #pragma omp target enter data map(to:rc12)
  }
  else
  if (!strcmp(name,"rc13")) {
    #pragma omp target enter data map(to:rc13)
  }
  else
  if (!strcmp(name,"rc14")) {
    #pragma omp target enter data map(to:rc14)
  }
  else
  if (!strcmp(name,"rc15")) {
    #pragma omp target enter data map(to:rc15)
  }
  else
  if (!strcmp(name,"rc16")) {
    #pragma omp target enter data map(to:rc16)
  }
  else
  if (!strcmp(name,"rc17")) {
    #pragma omp target enter data map(to:rc17)
  }
  else
  if (!strcmp(name,"rc18")) {
    #pragma omp target enter data map(to:rc18)
  }
  else
  if (!strcmp(name,"rc19")) {
    #pragma omp target enter data map(to:rc19)
  }
  else
  if (!strcmp(name,"rc20")) {
    #pragma omp target enter data map(to:rc20)
  }
  else
  if (!strcmp(name,"rc21")) {
    #pragma omp target enter data map(to:rc21)
  }
  else
  if (!strcmp(name,"rcinv22")) {
    #pragma omp target enter data map(to:rcinv22)
  }
  else
  {
    throw OPSException(OPS_RUNTIME_ERROR, "error: unknown const name");
  }
}

//user kernel files
#include "opensbliblock00Kernel024_ompoffload_kernel.cpp"
#include "opensbliblock00Kernel025_ompoffload_kernel.cpp"
#include "opensbliblock00Kernel026_ompoffload_kernel.cpp"
#include "opensbliblock00Kernel022_ompoffload_kernel.cpp"
#include "opensbliblock00Kernel023_ompoffload_kernel.cpp"
#include "opensbliblock00Kernel003_ompoffload_kernel.cpp"
#include "opensbliblock00Kernel013_ompoffload_kernel.cpp"
#include "opensbliblock00Kernel002_ompoffload_kernel.cpp"
#include "opensbliblock00Kernel005_ompoffload_kernel.cpp"
#include "opensbliblock00Kernel007_ompoffload_kernel.cpp"
#include "opensbliblock00Kernel009_ompoffload_kernel.cpp"
#include "opensbliblock00Kernel011_ompoffload_kernel.cpp"
#include "opensbliblock00Kernel012_ompoffload_kernel.cpp"
#include "opensbliblock00Kernel014_ompoffload_kernel.cpp"
#include "opensbliblock00Kernel015_ompoffload_kernel.cpp"
#include "opensbliblock00Kernel016_ompoffload_kernel.cpp"
#include "opensbliblock00Kernel017_ompoffload_kernel.cpp"
#include "opensbliblock00Kernel018_ompoffload_kernel.cpp"
#include "opensbliblock00Kernel020_ompoffload_kernel.cpp"
#include "opensbliblock00Kernel021_ompoffload_kernel.cpp"
#include "opensbliblock00Kernel030_ompoffload_kernel.cpp"
#include "opensbliblock00Kernel027_ompoffload_kernel.cpp"
#include "opensbliblock00Kernel028_ompoffload_kernel.cpp"
#include "opensbliblock00Kernel029_ompoffload_kernel.cpp"
