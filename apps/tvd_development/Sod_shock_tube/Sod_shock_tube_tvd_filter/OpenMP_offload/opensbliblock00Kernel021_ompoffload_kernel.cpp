//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel021(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11,
 ops_arg arg12, ops_arg arg13, ops_arg arg14, ops_arg arg15,
 ops_arg arg16, ops_arg arg17, ops_arg arg18) {
#else
void ops_par_loop_opensbliblock00Kernel021_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  ops_arg arg9 = desc->args[9];
  ops_arg arg10 = desc->args[10];
  ops_arg arg11 = desc->args[11];
  ops_arg arg12 = desc->args[12];
  ops_arg arg13 = desc->args[13];
  ops_arg arg14 = desc->args[14];
  ops_arg arg15 = desc->args[15];
  ops_arg arg16 = desc->args[16];
  ops_arg arg17 = desc->args[17];
  ops_arg arg18 = desc->args[18];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[19] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,19,range,19)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,19,"opensbliblock00Kernel021");
    block->instance->OPS_kernels[19].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "opensbliblock00Kernel021");
  #endif


  //compute locally allocated range for the sub-block
  int start[1];
  int end[1];
  #if defined(OPS_MPI) && !defined(OPS_LAZY)
  int arg_idx[1];
  #endif
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<1; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 19,block, range, start, end, arg_idx) < 0) return;
  #endif

  int start0 = start[0];
  int end0 = end[0];


  //initialize global variable with the dimension of dats

  //set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset;
  double * __restrict__ wk5_B0_p = (double *)(args[0].data_d + base0);

  int base1 = args[1].dat->base_offset;
  double * __restrict__ rhou0_B0_p = (double *)(args[1].data_d + base1);

  int base2 = args[2].dat->base_offset;
  double * __restrict__ wk3_B0_p = (double *)(args[2].data_d + base2);

  int base3 = args[3].dat->base_offset;
  double * __restrict__ rhoE_B0_p = (double *)(args[3].data_d + base3);

  int base4 = args[4].dat->base_offset;
  double * __restrict__ wk11_B0_p = (double *)(args[4].data_d + base4);

  int base5 = args[5].dat->base_offset;
  double * __restrict__ wk13_B0_p = (double *)(args[5].data_d + base5);

  int base6 = args[6].dat->base_offset;
  double * __restrict__ wk6_B0_p = (double *)(args[6].data_d + base6);

  int base7 = args[7].dat->base_offset;
  double * __restrict__ tau00_B0_p = (double *)(args[7].data_d + base7);

  int base8 = args[8].dat->base_offset;
  double * __restrict__ rho_B0_p = (double *)(args[8].data_d + base8);

  int base9 = args[9].dat->base_offset;
  double * __restrict__ wk10_B0_p = (double *)(args[9].data_d + base9);

  int base10 = args[10].dat->base_offset;
  double * __restrict__ u0_B0_p = (double *)(args[10].data_d + base10);

  int base11 = args[11].dat->base_offset;
  double * __restrict__ wk12_B0_p = (double *)(args[11].data_d + base11);

  int base12 = args[12].dat->base_offset;
  double * __restrict__ wk7_B0_p = (double *)(args[12].data_d + base12);

  int base13 = args[13].dat->base_offset;
  double * __restrict__ wk4_B0_p = (double *)(args[13].data_d + base13);

  int base14 = args[14].dat->base_offset;
  double * __restrict__ wk8_B0_p = (double *)(args[14].data_d + base14);

  int base15 = args[15].dat->base_offset;
  double * __restrict__ wk9_B0_p = (double *)(args[15].data_d + base15);

  int base16 = args[16].dat->base_offset;
  double * __restrict__ Residual0_B0_p = (double *)(args[16].data_d + base16);

  int base17 = args[17].dat->base_offset;
  double * __restrict__ Residual1_B0_p = (double *)(args[17].data_d + base17);

  int base18 = args[18].dat->base_offset;
  double * __restrict__ Residual2_B0_p = (double *)(args[18].data_d + base18);



  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_device(args, 19);
  ops_halo_exchanges(args,19,range);
  ops_H_D_exchanges_device(args, 19);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[19].mpi_time += __t1-__t2;
  }

  #pragma omp target teams distribute parallel for collapse(1)
  for ( int n_x=start0; n_x<end0; n_x++ ){
    const ACC<double> wk5_B0(wk5_B0_p + n_x*1);
    const ACC<double> rhou0_B0(rhou0_B0_p + n_x*1);
    const ACC<double> wk3_B0(wk3_B0_p + n_x*1);
    const ACC<double> rhoE_B0(rhoE_B0_p + n_x*1);
    const ACC<double> wk11_B0(wk11_B0_p + n_x*1);
    const ACC<double> wk13_B0(wk13_B0_p + n_x*1);
    const ACC<double> wk6_B0(wk6_B0_p + n_x*1);
    const ACC<double> tau00_B0(tau00_B0_p + n_x*1);
    const ACC<double> rho_B0(rho_B0_p + n_x*1);
    const ACC<double> wk10_B0(wk10_B0_p + n_x*1);
    const ACC<double> u0_B0(u0_B0_p + n_x*1);
    const ACC<double> wk12_B0(wk12_B0_p + n_x*1);
    const ACC<double> wk7_B0(wk7_B0_p + n_x*1);
    const ACC<double> wk4_B0(wk4_B0_p + n_x*1);
    const ACC<double> wk8_B0(wk8_B0_p + n_x*1);
    const ACC<double> wk9_B0(wk9_B0_p + n_x*1);
    ACC<double> Residual0_B0(Residual0_B0_p + n_x*1);
    ACC<double> Residual1_B0(Residual1_B0_p + n_x*1);
    ACC<double> Residual2_B0(Residual2_B0_p + n_x*1);
    
    Residual0_B0(0) = -rc1*rho_B0(0)*wk12_B0(0) -
      rc1*u0_B0(0)*wk10_B0(0) - rc1*wk5_B0(0);

    Residual1_B0(0) = -rc1*rhou0_B0(0)*wk12_B0(0) -
      rc1*u0_B0(0)*wk11_B0(0) + wk13_B0(0) - rc1*wk6_B0(0) -
      wk9_B0(0);

    Residual2_B0(0) = -rc1*rhoE_B0(0)*wk12_B0(0) +
      tau00_B0(0)*wk12_B0(0) + u0_B0(0)*wk13_B0(0) -
      rc1*u0_B0(0)*wk7_B0(0) - rc1*wk3_B0(0) + wk4_B0(0) -
      wk8_B0(0);


  }
  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[19].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 19);
  ops_set_halo_dirtybit3(&args[16],range);
  ops_set_halo_dirtybit3(&args[17],range);
  ops_set_halo_dirtybit3(&args[18],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[19].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[19].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[19].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[19].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[19].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[19].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[19].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[19].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[19].transfer += ops_compute_transfer(dim, start, end, &arg7);
    block->instance->OPS_kernels[19].transfer += ops_compute_transfer(dim, start, end, &arg8);
    block->instance->OPS_kernels[19].transfer += ops_compute_transfer(dim, start, end, &arg9);
    block->instance->OPS_kernels[19].transfer += ops_compute_transfer(dim, start, end, &arg10);
    block->instance->OPS_kernels[19].transfer += ops_compute_transfer(dim, start, end, &arg11);
    block->instance->OPS_kernels[19].transfer += ops_compute_transfer(dim, start, end, &arg12);
    block->instance->OPS_kernels[19].transfer += ops_compute_transfer(dim, start, end, &arg13);
    block->instance->OPS_kernels[19].transfer += ops_compute_transfer(dim, start, end, &arg14);
    block->instance->OPS_kernels[19].transfer += ops_compute_transfer(dim, start, end, &arg15);
    block->instance->OPS_kernels[19].transfer += ops_compute_transfer(dim, start, end, &arg16);
    block->instance->OPS_kernels[19].transfer += ops_compute_transfer(dim, start, end, &arg17);
    block->instance->OPS_kernels[19].transfer += ops_compute_transfer(dim, start, end, &arg18);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel021(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11,
 ops_arg arg12, ops_arg arg13, ops_arg arg14, ops_arg arg15,
 ops_arg arg16, ops_arg arg17, ops_arg arg18) {
  ops_arg args[19] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18 };

  //create kernel descriptor and pass it to ops_enqueue_kernel
  create_kerneldesc_and_enque(name, args, 19, 19, dim, 0, range, block, ops_par_loop_opensbliblock00Kernel021_execute);
}
#endif
