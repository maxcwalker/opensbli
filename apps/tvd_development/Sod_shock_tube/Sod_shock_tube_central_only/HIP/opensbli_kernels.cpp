//
// auto-generated by ops.py//

//header
#include <hip/hip_runtime.h>
#define OPS_API 2
#define OPS_1D
#include "ops_lib_core.h"

#include "ops_hip_rt_support.h"
#include "ops_hip_reduction.h"


#ifdef OPS_MPI
#include "ops_mpi_core.h"
#endif
// global constants
#define block0np0 block0np0_OPSCONSTANT
__constant__ int block0np0;
#define Delta0block0 Delta0block0_OPSCONSTANT
__constant__ double Delta0block0;
#define niter niter_OPSCONSTANT
__constant__ int niter;
#define dt dt_OPSCONSTANT
__constant__ double dt;
#define gama gama_OPSCONSTANT
__constant__ double gama;
#define inv_0 inv_0_OPSCONSTANT
__constant__ double inv_0;
#define rc1 rc1_OPSCONSTANT
__constant__ double rc1;
#define rc2 rc2_OPSCONSTANT
__constant__ double rc2;
#define rc3 rc3_OPSCONSTANT
__constant__ double rc3;

void ops_init_backend() {}

//Dummy kernel to make sure constants are not optimized out
__global__ void ops_internal_this_is_stupid() {
((int*)&block0np0)[0]=0;
((int*)&Delta0block0)[0]=0;
((int*)&niter)[0]=0;
((int*)&dt)[0]=0;
((int*)&gama)[0]=0;
((int*)&inv_0)[0]=0;
((int*)&rc1)[0]=0;
((int*)&rc2)[0]=0;
((int*)&rc3)[0]=0;
}

void ops_decl_const_char(int dim, char const *type,
int size, char *dat, char const *name){
  ops_execute(OPS_instance::getOPSInstance());
  if (!strcmp(name,"block0np0")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(block0np0_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"Delta0block0")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(Delta0block0_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"niter")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(niter_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"dt")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(dt_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"gama")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(gama_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"inv_0")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(inv_0_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc1")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc1_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc2")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc2_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc3")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc3_OPSCONSTANT), dat, dim*size));
  }
  else
  {
    throw OPSException(OPS_RUNTIME_ERROR, "error: unknown const name");
  }
}


//user kernel files
#include "opensbliblock00Kernel022_hip_kernel.cpp"
#include "opensbliblock00Kernel023_hip_kernel.cpp"
#include "opensbliblock00Kernel024_hip_kernel.cpp"
#include "opensbliblock00Kernel020_hip_kernel.cpp"
#include "opensbliblock00Kernel021_hip_kernel.cpp"
#include "opensbliblock00Kernel002_hip_kernel.cpp"
#include "opensbliblock00Kernel001_hip_kernel.cpp"
#include "opensbliblock00Kernel000_hip_kernel.cpp"
#include "opensbliblock00Kernel003_hip_kernel.cpp"
#include "opensbliblock00Kernel005_hip_kernel.cpp"
#include "opensbliblock00Kernel007_hip_kernel.cpp"
#include "opensbliblock00Kernel008_hip_kernel.cpp"
#include "opensbliblock00Kernel009_hip_kernel.cpp"
#include "opensbliblock00Kernel010_hip_kernel.cpp"
#include "opensbliblock00Kernel012_hip_kernel.cpp"
#include "opensbliblock00Kernel013_hip_kernel.cpp"
#include "opensbliblock00Kernel015_hip_kernel.cpp"
#include "opensbliblock00Kernel017_hip_kernel.cpp"
#include "opensbliblock00Kernel018_hip_kernel.cpp"
#include "opensbliblock00Kernel019_hip_kernel.cpp"
#include "opensbliblock00Kernel025_hip_kernel.cpp"
