//
// auto-generated by ops.py//

//header
#include <cuda.h>
#define OPS_API 2
#define OPS_1D
#include "ops_lib_core.h"

#include "ops_cuda_rt_support.h"
#include "ops_cuda_reduction.h"

#include <cuComplex.h>

#ifdef OPS_MPI
#include "ops_mpi_core.h"
#endif
// global constants
__constant__ int block0np0;
__constant__ double Delta0block0;
__constant__ int niter;
__constant__ double dt;
__constant__ double gama;
__constant__ double inv_0;
__constant__ double rc1;
__constant__ double rc2;
__constant__ double rc3;

void ops_init_backend() {}

void ops_decl_const_char(int dim, char const *type,
int size, char *dat, char const *name){
  ops_execute(OPS_instance::getOPSInstance());
  if (!strcmp(name,"block0np0")) {
    cutilSafeCall(OPS_instance::getOPSInstance()->ostream(),cudaMemcpyToSymbol(block0np0, dat, dim*size));
  }
  else
  if (!strcmp(name,"Delta0block0")) {
    cutilSafeCall(OPS_instance::getOPSInstance()->ostream(),cudaMemcpyToSymbol(Delta0block0, dat, dim*size));
  }
  else
  if (!strcmp(name,"niter")) {
    cutilSafeCall(OPS_instance::getOPSInstance()->ostream(),cudaMemcpyToSymbol(niter, dat, dim*size));
  }
  else
  if (!strcmp(name,"dt")) {
    cutilSafeCall(OPS_instance::getOPSInstance()->ostream(),cudaMemcpyToSymbol(dt, dat, dim*size));
  }
  else
  if (!strcmp(name,"gama")) {
    cutilSafeCall(OPS_instance::getOPSInstance()->ostream(),cudaMemcpyToSymbol(gama, dat, dim*size));
  }
  else
  if (!strcmp(name,"inv_0")) {
    cutilSafeCall(OPS_instance::getOPSInstance()->ostream(),cudaMemcpyToSymbol(inv_0, dat, dim*size));
  }
  else
  if (!strcmp(name,"rc1")) {
    cutilSafeCall(OPS_instance::getOPSInstance()->ostream(),cudaMemcpyToSymbol(rc1, dat, dim*size));
  }
  else
  if (!strcmp(name,"rc2")) {
    cutilSafeCall(OPS_instance::getOPSInstance()->ostream(),cudaMemcpyToSymbol(rc2, dat, dim*size));
  }
  else
  if (!strcmp(name,"rc3")) {
    cutilSafeCall(OPS_instance::getOPSInstance()->ostream(),cudaMemcpyToSymbol(rc3, dat, dim*size));
  }
  else
  {
    throw OPSException(OPS_RUNTIME_ERROR, "error: unknown const name");
  }
}


//user kernel files
#include "opensbliblock00Kernel022_cuda_kernel.cu"
#include "opensbliblock00Kernel023_cuda_kernel.cu"
#include "opensbliblock00Kernel024_cuda_kernel.cu"
#include "opensbliblock00Kernel020_cuda_kernel.cu"
#include "opensbliblock00Kernel021_cuda_kernel.cu"
#include "opensbliblock00Kernel002_cuda_kernel.cu"
#include "opensbliblock00Kernel001_cuda_kernel.cu"
#include "opensbliblock00Kernel000_cuda_kernel.cu"
#include "opensbliblock00Kernel003_cuda_kernel.cu"
#include "opensbliblock00Kernel005_cuda_kernel.cu"
#include "opensbliblock00Kernel007_cuda_kernel.cu"
#include "opensbliblock00Kernel008_cuda_kernel.cu"
#include "opensbliblock00Kernel009_cuda_kernel.cu"
#include "opensbliblock00Kernel010_cuda_kernel.cu"
#include "opensbliblock00Kernel012_cuda_kernel.cu"
#include "opensbliblock00Kernel013_cuda_kernel.cu"
#include "opensbliblock00Kernel015_cuda_kernel.cu"
#include "opensbliblock00Kernel017_cuda_kernel.cu"
#include "opensbliblock00Kernel018_cuda_kernel.cu"
#include "opensbliblock00Kernel019_cuda_kernel.cu"
#include "opensbliblock00Kernel025_cuda_kernel.cu"
