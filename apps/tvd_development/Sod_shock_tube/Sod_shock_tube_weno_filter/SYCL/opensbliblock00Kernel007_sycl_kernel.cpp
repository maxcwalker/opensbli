//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel007(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2) {
#else
void ops_par_loop_opensbliblock00Kernel007_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[3] = { arg0, arg1, arg2};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,3,range,6)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,6,"opensbliblock00Kernel007");
    block->instance->OPS_kernels[6].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "opensbliblock00Kernel007");
  #endif


  //compute locally allocated range for the sub-block
  int start[1];
  int end[1];
  int arg_idx[1];
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<1; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 3,block, range, start, end, arg_idx) < 0) return;
  #endif

  #if defined(OPS_MPI)
  #if defined(OPS_LAZY)
  sub_block_list sb = OPS_sub_block_list[block->index];
  arg_idx[0] = sb->decomp_disp[0];
  #else
  arg_idx[0] -= start[0];
  #endif
  #else //OPS_MPI
  arg_idx[0] = 0;
  #endif //OPS_MPI

  //initialize global variable with the dimension of dats

  //set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset/sizeof(double);
  double* tau00_B0_p = (double*)args[0].data_d;

  int base1 = args[1].dat->base_offset/sizeof(double);
  double* wk3_B0_p = (double*)args[1].data_d;




  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_device(args, 3);
  ops_halo_exchanges(args,3,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[6].mpi_time += __t1-__t2;
  }

  int start_0 = start[0];
  int end_0 = end[0];
  int arg_idx_0 = arg_idx[0];
  if ((end[0]-start[0])>0) {
    block->instance->sycl_instance->queue->submit([&](cl::sycl::handler &cgh) {

      auto block0np0_sycl = (*block0np0_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto invDelta0block0_sycl = (*invDelta0block0_p).template get_access<cl::sycl::access::mode::read>(cgh);

      cgh.parallel_for<class opensbliblock00Kernel007_kernel>(cl::sycl::nd_range<1>(cl::sycl::range<1>(
            ((end[0]-start[0]-1)/block->instance->OPS_block_size_x+1)*block->instance->OPS_block_size_x
             ),cl::sycl::range<1>(
      block->instance->OPS_block_size_x
             ))
      , [=](cl::sycl::nd_item<1> item
      ) [[intel::kernel_args_restrict]] {
        int n_x = item.get_global_id(0)+start_0;
        int idx[] = {arg_idx_0+n_x};
        const ACC<double> tau00_B0(&tau00_B0_p[0] + base0 + n_x*1);
        ACC<double> wk3_B0(&wk3_B0_p[0] + base1 + n_x*1);
        //USER CODE
        if (n_x < end_0) {
          
    wk3_B0(0) = invDelta0block0_sycl[0]*((idx[0] == 0) ? (
   3.0*tau00_B0(1) + 0.333333333333333*tau00_B0(3) - 1.5*tau00_B0(2)
      - 1.83333333333333*tau00_B0(0)
)
: ((idx[0] == 1) ? (
   0.0394168524399447*tau00_B0(2) +
      0.00571369039775442*tau00_B0(4) + 0.719443173328855*tau00_B0(1) - 0.322484932882161*tau00_B0(0) -
      0.0658051057710389*tau00_B0(3) - 0.376283677513354*tau00_B0(-1)
)
: ((idx[0] == 2) ? (

      0.197184333887745*tau00_B0(0) + 0.521455851089587*tau00_B0(1) + 0.113446470384241*tau00_B0(-2) -
      0.00412637789557492*tau00_B0(3) - 0.0367146847001261*tau00_B0(2) - 0.791245592765872*tau00_B0(-1)
)
: ((idx[0] ==
      3) ? (
   0.0451033223343881*tau00_B0(0) + 0.652141084861241*tau00_B0(1) + 0.121937153224065*tau00_B0(-2) -
      0.00932597985049999*tau00_B0(-3) - 0.727822147724592*tau00_B0(-1) - 0.082033432844602*tau00_B0(2)
)
: ((idx[0] ==
      -1 + block0np0_sycl[0]) ? (
   1.5*tau00_B0(-2) + 1.83333333333333*tau00_B0(0) - 3.0*tau00_B0(-1) -
      0.333333333333333*tau00_B0(-3)
)
: ((idx[0] == -2 + block0np0_sycl[0]) ? (
   0.322484932882161*tau00_B0(0) +
      0.0658051057710389*tau00_B0(-3) + 0.376283677513354*tau00_B0(1) - 0.0394168524399447*tau00_B0(-2) -
      0.00571369039775442*tau00_B0(-4) - 0.719443173328855*tau00_B0(-1)
)
: ((idx[0] == -3 + block0np0_sycl[0]) ? (

      0.00412637789557492*tau00_B0(-3) + 0.0367146847001261*tau00_B0(-2) + 0.791245592765872*tau00_B0(1) -
      0.197184333887745*tau00_B0(0) - 0.521455851089587*tau00_B0(-1) - 0.113446470384241*tau00_B0(2)
)
: ((idx[0] == -4
      + block0np0_sycl[0]) ? (
   0.00932597985049999*tau00_B0(3) + 0.727822147724592*tau00_B0(1) +
      0.082033432844602*tau00_B0(-2) - 0.0451033223343881*tau00_B0(0) - 0.652141084861241*tau00_B0(-1) -
      0.121937153224065*tau00_B0(2)
)
: (
   -(2.0/3.0)*tau00_B0(-1) - (1.0/12.0)*tau00_B0(2) +
      ((1.0/12.0))*tau00_B0(-2) + ((2.0/3.0))*tau00_B0(1)
)))))))));


        }
      });
    });
  }
  if (block->instance->OPS_diags > 1) {
    block->instance->sycl_instance->queue->wait();
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[6].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 3);
  ops_set_halo_dirtybit3(&args[1],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[6].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[6].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[6].transfer += ops_compute_transfer(dim, start, end, &arg1);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel007(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)calloc(1,sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 1;
  desc->index = 6;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 6;
  for ( int i=0; i<2; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 3;
  desc->args = (ops_arg*)ops_malloc(3*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  desc->function = ops_par_loop_opensbliblock00Kernel007_execute;
  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,6,"opensbliblock00Kernel007");
  }
  ops_enqueue_kernel(desc);
}
#endif
