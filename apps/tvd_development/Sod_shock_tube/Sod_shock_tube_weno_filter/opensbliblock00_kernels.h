#ifndef OPENSBLIBLOCK00_KERNEL_H
#define OPENSBLIBLOCK00_KERNEL_H
 void opensbliblock00Kernel027(ACC<double> &rhoE_B0, ACC<double> &rho_B0, ACC<double> &rhou0_B0, ACC<double> &x0_B0,
const int *idx)
{
   double d = 0.0;
   double p = 0.0;
   double u0 = 0.0;
   x0_B0(0) = Delta0block0*idx[0];

   u0 = 0;

   p = ((x0_B0(0) < 0.5) ? (
   1.0
)
: (
   0.1
));

   d = ((x0_B0(0) < 0.5) ? (
   1.0
)
: (
   0.125
));

   rho_B0(0) = d;

   rhou0_B0(0) = d*u0;

   rhoE_B0(0) = p/(-1.0 + gama) + 0.5*d*(u0*u0);

}

void opensbliblock00Kernel025(ACC<double> &rhoE_B0, ACC<double> &rho_B0, ACC<double> &rhou0_B0)
{
   double d = 0.0;
   double p = 0.0;
   double u0 = 0.0;
   d = 1.00000000000000;

   u0 = 0.0;

   p = 1.00000000000000;

   rho_B0(0) = d;

   rhou0_B0(0) = d*u0;

   rhoE_B0(0) = p/(-1.0 + gama) + 0.5*d*(u0*u0);

}

void opensbliblock00Kernel026(ACC<double> &rhoE_B0, ACC<double> &rho_B0, ACC<double> &rhou0_B0)
{
   double d = 0.0;
   double p = 0.0;
   double u0 = 0.0;
   d = 0.125000000000000;

   u0 = 0.0;

   p = 0.100000000000000;

   rho_B0(0) = d;

   rhou0_B0(0) = d*u0;

   rhoE_B0(0) = p/(-1.0 + gama) + 0.5*d*(u0*u0);

}

void opensbliblock00Kernel009(const ACC<double> &rho_B0, const ACC<double> &rhou0_B0, ACC<double> &u0_B0)
{
   u0_B0(0) = rhou0_B0(0)/rho_B0(0);

}

 void opensbliblock00Kernel012(const ACC<double> &rhoE_B0, const ACC<double> &rho_B0, const ACC<double> &u0_B0,
ACC<double> &p_B0)
{
   p_B0(0) = (-1 + gama)*(-(1.0/2.0)*(u0_B0(0)*u0_B0(0))*rho_B0(0) + rhoE_B0(0));

}

 void opensbliblock00Kernel005(const ACC<double> &p_B0, const ACC<double> &rhoE_B0, const ACC<double> &rho_B0, const
ACC<double> &rhou0_B0, const ACC<double> &u0_B0, ACC<double> &wk14_B0, ACC<double> &wk15_B0, ACC<double> &wk16_B0,
ACC<double> &wk17_B0)
{
   wk14_B0(0) = u0_B0(0)*rhoE_B0(0);

   wk15_B0(0) = p_B0(0)*u0_B0(0);

   wk16_B0(0) = u0_B0(0)*rhou0_B0(0);

   wk17_B0(0) = u0_B0(0)*rho_B0(0);

}

void opensbliblock00Kernel007(const ACC<double> &tau00_B0, ACC<double> &wk3_B0, const int *idx)
{
    wk3_B0(0) = invDelta0block0*((idx[0] == 0) ? (
   3.0*tau00_B0(1) + 0.333333333333333*tau00_B0(3) - 1.5*tau00_B0(2)
      - 1.83333333333333*tau00_B0(0)
)
: ((idx[0] == 1) ? (
   0.0394168524399447*tau00_B0(2) +
      0.00571369039775442*tau00_B0(4) + 0.719443173328855*tau00_B0(1) - 0.322484932882161*tau00_B0(0) -
      0.0658051057710389*tau00_B0(3) - 0.376283677513354*tau00_B0(-1)
)
: ((idx[0] == 2) ? (
  
      0.197184333887745*tau00_B0(0) + 0.521455851089587*tau00_B0(1) + 0.113446470384241*tau00_B0(-2) -
      0.00412637789557492*tau00_B0(3) - 0.0367146847001261*tau00_B0(2) - 0.791245592765872*tau00_B0(-1)
)
: ((idx[0] ==
      3) ? (
   0.0451033223343881*tau00_B0(0) + 0.652141084861241*tau00_B0(1) + 0.121937153224065*tau00_B0(-2) -
      0.00932597985049999*tau00_B0(-3) - 0.727822147724592*tau00_B0(-1) - 0.082033432844602*tau00_B0(2)
)
: ((idx[0] ==
      -1 + block0np0) ? (
   1.5*tau00_B0(-2) + 1.83333333333333*tau00_B0(0) - 3.0*tau00_B0(-1) -
      0.333333333333333*tau00_B0(-3)
)
: ((idx[0] == -2 + block0np0) ? (
   0.322484932882161*tau00_B0(0) +
      0.0658051057710389*tau00_B0(-3) + 0.376283677513354*tau00_B0(1) - 0.0394168524399447*tau00_B0(-2) -
      0.00571369039775442*tau00_B0(-4) - 0.719443173328855*tau00_B0(-1)
)
: ((idx[0] == -3 + block0np0) ? (
  
      0.00412637789557492*tau00_B0(-3) + 0.0367146847001261*tau00_B0(-2) + 0.791245592765872*tau00_B0(1) -
      0.197184333887745*tau00_B0(0) - 0.521455851089587*tau00_B0(-1) - 0.113446470384241*tau00_B0(2)
)
: ((idx[0] == -4
      + block0np0) ? (
   0.00932597985049999*tau00_B0(3) + 0.727822147724592*tau00_B0(1) +
      0.082033432844602*tau00_B0(-2) - 0.0451033223343881*tau00_B0(0) - 0.652141084861241*tau00_B0(-1) -
      0.121937153224065*tau00_B0(2)
)
: (
   -(2.0/3.0)*tau00_B0(-1) - (1.0/12.0)*tau00_B0(2) +
      ((1.0/12.0))*tau00_B0(-2) + ((2.0/3.0))*tau00_B0(1)
)))))))));

}

void opensbliblock00Kernel010(const ACC<double> &wk14_B0, ACC<double> &wk4_B0, const int *idx)
{
    wk4_B0(0) = invDelta0block0*((idx[0] == 0) ? (
   3.0*wk14_B0(1) + 0.333333333333333*wk14_B0(3) - 1.5*wk14_B0(2) -
      1.83333333333333*wk14_B0(0)
)
: ((idx[0] == 1) ? (
   0.0394168524399447*wk14_B0(2) +
      0.00571369039775442*wk14_B0(4) + 0.719443173328855*wk14_B0(1) - 0.322484932882161*wk14_B0(0) -
      0.0658051057710389*wk14_B0(3) - 0.376283677513354*wk14_B0(-1)
)
: ((idx[0] == 2) ? (
  
      0.197184333887745*wk14_B0(0) + 0.521455851089587*wk14_B0(1) + 0.113446470384241*wk14_B0(-2) -
      0.00412637789557492*wk14_B0(3) - 0.0367146847001261*wk14_B0(2) - 0.791245592765872*wk14_B0(-1)
)
: ((idx[0] == 3)
      ? (
   0.0451033223343881*wk14_B0(0) + 0.652141084861241*wk14_B0(1) + 0.121937153224065*wk14_B0(-2) -
      0.00932597985049999*wk14_B0(-3) - 0.727822147724592*wk14_B0(-1) - 0.082033432844602*wk14_B0(2)
)
: ((idx[0] == -1
      + block0np0) ? (
   1.5*wk14_B0(-2) + 1.83333333333333*wk14_B0(0) - 3.0*wk14_B0(-1) -
      0.333333333333333*wk14_B0(-3)
)
: ((idx[0] == -2 + block0np0) ? (
   0.322484932882161*wk14_B0(0) +
      0.0658051057710389*wk14_B0(-3) + 0.376283677513354*wk14_B0(1) - 0.0394168524399447*wk14_B0(-2) -
      0.00571369039775442*wk14_B0(-4) - 0.719443173328855*wk14_B0(-1)
)
: ((idx[0] == -3 + block0np0) ? (
  
      0.00412637789557492*wk14_B0(-3) + 0.0367146847001261*wk14_B0(-2) + 0.791245592765872*wk14_B0(1) -
      0.197184333887745*wk14_B0(0) - 0.521455851089587*wk14_B0(-1) - 0.113446470384241*wk14_B0(2)
)
: ((idx[0] == -4 +
      block0np0) ? (
   0.00932597985049999*wk14_B0(3) + 0.727822147724592*wk14_B0(1) + 0.082033432844602*wk14_B0(-2) -
      0.0451033223343881*wk14_B0(0) - 0.652141084861241*wk14_B0(-1) - 0.121937153224065*wk14_B0(2)
)
: (
  
      -(2.0/3.0)*wk14_B0(-1) - (1.0/12.0)*wk14_B0(2) + ((1.0/12.0))*wk14_B0(-2) + ((2.0/3.0))*wk14_B0(1)
)))))))));

}

void opensbliblock00Kernel011(const ACC<double> &rhoE_B0, ACC<double> &wk5_B0, const int *idx)
{
    wk5_B0(0) = invDelta0block0*((idx[0] == 0) ? (
   3.0*rhoE_B0(1) + 0.333333333333333*rhoE_B0(3) - 1.5*rhoE_B0(2) -
      1.83333333333333*rhoE_B0(0)
)
: ((idx[0] == 1) ? (
   0.0394168524399447*rhoE_B0(2) +
      0.00571369039775442*rhoE_B0(4) + 0.719443173328855*rhoE_B0(1) - 0.322484932882161*rhoE_B0(0) -
      0.0658051057710389*rhoE_B0(3) - 0.376283677513354*rhoE_B0(-1)
)
: ((idx[0] == 2) ? (
  
      0.197184333887745*rhoE_B0(0) + 0.521455851089587*rhoE_B0(1) + 0.113446470384241*rhoE_B0(-2) -
      0.00412637789557492*rhoE_B0(3) - 0.0367146847001261*rhoE_B0(2) - 0.791245592765872*rhoE_B0(-1)
)
: ((idx[0] == 3)
      ? (
   0.0451033223343881*rhoE_B0(0) + 0.652141084861241*rhoE_B0(1) + 0.121937153224065*rhoE_B0(-2) -
      0.00932597985049999*rhoE_B0(-3) - 0.727822147724592*rhoE_B0(-1) - 0.082033432844602*rhoE_B0(2)
)
: ((idx[0] == -1
      + block0np0) ? (
   1.5*rhoE_B0(-2) + 1.83333333333333*rhoE_B0(0) - 3.0*rhoE_B0(-1) -
      0.333333333333333*rhoE_B0(-3)
)
: ((idx[0] == -2 + block0np0) ? (
   0.322484932882161*rhoE_B0(0) +
      0.0658051057710389*rhoE_B0(-3) + 0.376283677513354*rhoE_B0(1) - 0.0394168524399447*rhoE_B0(-2) -
      0.00571369039775442*rhoE_B0(-4) - 0.719443173328855*rhoE_B0(-1)
)
: ((idx[0] == -3 + block0np0) ? (
  
      0.00412637789557492*rhoE_B0(-3) + 0.0367146847001261*rhoE_B0(-2) + 0.791245592765872*rhoE_B0(1) -
      0.197184333887745*rhoE_B0(0) - 0.521455851089587*rhoE_B0(-1) - 0.113446470384241*rhoE_B0(2)
)
: ((idx[0] == -4 +
      block0np0) ? (
   0.00932597985049999*rhoE_B0(3) + 0.727822147724592*rhoE_B0(1) + 0.082033432844602*rhoE_B0(-2) -
      0.0451033223343881*rhoE_B0(0) - 0.652141084861241*rhoE_B0(-1) - 0.121937153224065*rhoE_B0(2)
)
: (
  
      -(2.0/3.0)*rhoE_B0(-1) - (1.0/12.0)*rhoE_B0(2) + ((1.0/12.0))*rhoE_B0(-2) + ((2.0/3.0))*rhoE_B0(1)
)))))))));

}

void opensbliblock00Kernel013(const ACC<double> &wk15_B0, ACC<double> &wk6_B0, const int *idx)
{
    wk6_B0(0) = invDelta0block0*((idx[0] == 0) ? (
   3.0*wk15_B0(1) + 0.333333333333333*wk15_B0(3) - 1.5*wk15_B0(2) -
      1.83333333333333*wk15_B0(0)
)
: ((idx[0] == 1) ? (
   0.0394168524399447*wk15_B0(2) +
      0.00571369039775442*wk15_B0(4) + 0.719443173328855*wk15_B0(1) - 0.322484932882161*wk15_B0(0) -
      0.0658051057710389*wk15_B0(3) - 0.376283677513354*wk15_B0(-1)
)
: ((idx[0] == 2) ? (
  
      0.197184333887745*wk15_B0(0) + 0.521455851089587*wk15_B0(1) + 0.113446470384241*wk15_B0(-2) -
      0.00412637789557492*wk15_B0(3) - 0.0367146847001261*wk15_B0(2) - 0.791245592765872*wk15_B0(-1)
)
: ((idx[0] == 3)
      ? (
   0.0451033223343881*wk15_B0(0) + 0.652141084861241*wk15_B0(1) + 0.121937153224065*wk15_B0(-2) -
      0.00932597985049999*wk15_B0(-3) - 0.727822147724592*wk15_B0(-1) - 0.082033432844602*wk15_B0(2)
)
: ((idx[0] == -1
      + block0np0) ? (
   1.5*wk15_B0(-2) + 1.83333333333333*wk15_B0(0) - 3.0*wk15_B0(-1) -
      0.333333333333333*wk15_B0(-3)
)
: ((idx[0] == -2 + block0np0) ? (
   0.322484932882161*wk15_B0(0) +
      0.0658051057710389*wk15_B0(-3) + 0.376283677513354*wk15_B0(1) - 0.0394168524399447*wk15_B0(-2) -
      0.00571369039775442*wk15_B0(-4) - 0.719443173328855*wk15_B0(-1)
)
: ((idx[0] == -3 + block0np0) ? (
  
      0.00412637789557492*wk15_B0(-3) + 0.0367146847001261*wk15_B0(-2) + 0.791245592765872*wk15_B0(1) -
      0.197184333887745*wk15_B0(0) - 0.521455851089587*wk15_B0(-1) - 0.113446470384241*wk15_B0(2)
)
: ((idx[0] == -4 +
      block0np0) ? (
   0.00932597985049999*wk15_B0(3) + 0.727822147724592*wk15_B0(1) + 0.082033432844602*wk15_B0(-2) -
      0.0451033223343881*wk15_B0(0) - 0.652141084861241*wk15_B0(-1) - 0.121937153224065*wk15_B0(2)
)
: (
  
      -(2.0/3.0)*wk15_B0(-1) - (1.0/12.0)*wk15_B0(2) + ((1.0/12.0))*wk15_B0(-2) + ((2.0/3.0))*wk15_B0(1)
)))))))));

}

void opensbliblock00Kernel015(const ACC<double> &q0_B0, ACC<double> &wk7_B0, const int *idx)
{
    wk7_B0(0) = invDelta0block0*((idx[0] == 0) ? (
   3.0*q0_B0(1) + 0.333333333333333*q0_B0(3) - 1.5*q0_B0(2) -
      1.83333333333333*q0_B0(0)
)
: ((idx[0] == 1) ? (
   0.0394168524399447*q0_B0(2) + 0.00571369039775442*q0_B0(4) +
      0.719443173328855*q0_B0(1) - 0.322484932882161*q0_B0(0) - 0.0658051057710389*q0_B0(3) -
      0.376283677513354*q0_B0(-1)
)
: ((idx[0] == 2) ? (
   0.197184333887745*q0_B0(0) + 0.521455851089587*q0_B0(1) +
      0.113446470384241*q0_B0(-2) - 0.00412637789557492*q0_B0(3) - 0.0367146847001261*q0_B0(2) -
      0.791245592765872*q0_B0(-1)
)
: ((idx[0] == 3) ? (
   0.0451033223343881*q0_B0(0) + 0.652141084861241*q0_B0(1) +
      0.121937153224065*q0_B0(-2) - 0.00932597985049999*q0_B0(-3) - 0.727822147724592*q0_B0(-1) -
      0.082033432844602*q0_B0(2)
)
: ((idx[0] == -1 + block0np0) ? (
   1.5*q0_B0(-2) + 1.83333333333333*q0_B0(0) -
      3.0*q0_B0(-1) - 0.333333333333333*q0_B0(-3)
)
: ((idx[0] == -2 + block0np0) ? (
   0.322484932882161*q0_B0(0) +
      0.0658051057710389*q0_B0(-3) + 0.376283677513354*q0_B0(1) - 0.0394168524399447*q0_B0(-2) -
      0.00571369039775442*q0_B0(-4) - 0.719443173328855*q0_B0(-1)
)
: ((idx[0] == -3 + block0np0) ? (
  
      0.00412637789557492*q0_B0(-3) + 0.0367146847001261*q0_B0(-2) + 0.791245592765872*q0_B0(1) -
      0.197184333887745*q0_B0(0) - 0.521455851089587*q0_B0(-1) - 0.113446470384241*q0_B0(2)
)
: ((idx[0] == -4 +
      block0np0) ? (
   0.00932597985049999*q0_B0(3) + 0.727822147724592*q0_B0(1) + 0.082033432844602*q0_B0(-2) -
      0.0451033223343881*q0_B0(0) - 0.652141084861241*q0_B0(-1) - 0.121937153224065*q0_B0(2)
)
: (
  
      -(2.0/3.0)*q0_B0(-1) - (1.0/12.0)*q0_B0(2) + ((1.0/12.0))*q0_B0(-2) + ((2.0/3.0))*q0_B0(1)
)))))))));

}

void opensbliblock00Kernel017(const ACC<double> &wk16_B0, ACC<double> &wk8_B0, const int *idx)
{
    wk8_B0(0) = invDelta0block0*((idx[0] == 0) ? (
   3.0*wk16_B0(1) + 0.333333333333333*wk16_B0(3) - 1.5*wk16_B0(2) -
      1.83333333333333*wk16_B0(0)
)
: ((idx[0] == 1) ? (
   0.0394168524399447*wk16_B0(2) +
      0.00571369039775442*wk16_B0(4) + 0.719443173328855*wk16_B0(1) - 0.322484932882161*wk16_B0(0) -
      0.0658051057710389*wk16_B0(3) - 0.376283677513354*wk16_B0(-1)
)
: ((idx[0] == 2) ? (
  
      0.197184333887745*wk16_B0(0) + 0.521455851089587*wk16_B0(1) + 0.113446470384241*wk16_B0(-2) -
      0.00412637789557492*wk16_B0(3) - 0.0367146847001261*wk16_B0(2) - 0.791245592765872*wk16_B0(-1)
)
: ((idx[0] == 3)
      ? (
   0.0451033223343881*wk16_B0(0) + 0.652141084861241*wk16_B0(1) + 0.121937153224065*wk16_B0(-2) -
      0.00932597985049999*wk16_B0(-3) - 0.727822147724592*wk16_B0(-1) - 0.082033432844602*wk16_B0(2)
)
: ((idx[0] == -1
      + block0np0) ? (
   1.5*wk16_B0(-2) + 1.83333333333333*wk16_B0(0) - 3.0*wk16_B0(-1) -
      0.333333333333333*wk16_B0(-3)
)
: ((idx[0] == -2 + block0np0) ? (
   0.322484932882161*wk16_B0(0) +
      0.0658051057710389*wk16_B0(-3) + 0.376283677513354*wk16_B0(1) - 0.0394168524399447*wk16_B0(-2) -
      0.00571369039775442*wk16_B0(-4) - 0.719443173328855*wk16_B0(-1)
)
: ((idx[0] == -3 + block0np0) ? (
  
      0.00412637789557492*wk16_B0(-3) + 0.0367146847001261*wk16_B0(-2) + 0.791245592765872*wk16_B0(1) -
      0.197184333887745*wk16_B0(0) - 0.521455851089587*wk16_B0(-1) - 0.113446470384241*wk16_B0(2)
)
: ((idx[0] == -4 +
      block0np0) ? (
   0.00932597985049999*wk16_B0(3) + 0.727822147724592*wk16_B0(1) + 0.082033432844602*wk16_B0(-2) -
      0.0451033223343881*wk16_B0(0) - 0.652141084861241*wk16_B0(-1) - 0.121937153224065*wk16_B0(2)
)
: (
  
      -(2.0/3.0)*wk16_B0(-1) - (1.0/12.0)*wk16_B0(2) + ((1.0/12.0))*wk16_B0(-2) + ((2.0/3.0))*wk16_B0(1)
)))))))));

}

void opensbliblock00Kernel019(const ACC<double> &wk17_B0, ACC<double> &wk9_B0, const int *idx)
{
    wk9_B0(0) = invDelta0block0*((idx[0] == 0) ? (
   3.0*wk17_B0(1) + 0.333333333333333*wk17_B0(3) - 1.5*wk17_B0(2) -
      1.83333333333333*wk17_B0(0)
)
: ((idx[0] == 1) ? (
   0.0394168524399447*wk17_B0(2) +
      0.00571369039775442*wk17_B0(4) + 0.719443173328855*wk17_B0(1) - 0.322484932882161*wk17_B0(0) -
      0.0658051057710389*wk17_B0(3) - 0.376283677513354*wk17_B0(-1)
)
: ((idx[0] == 2) ? (
  
      0.197184333887745*wk17_B0(0) + 0.521455851089587*wk17_B0(1) + 0.113446470384241*wk17_B0(-2) -
      0.00412637789557492*wk17_B0(3) - 0.0367146847001261*wk17_B0(2) - 0.791245592765872*wk17_B0(-1)
)
: ((idx[0] == 3)
      ? (
   0.0451033223343881*wk17_B0(0) + 0.652141084861241*wk17_B0(1) + 0.121937153224065*wk17_B0(-2) -
      0.00932597985049999*wk17_B0(-3) - 0.727822147724592*wk17_B0(-1) - 0.082033432844602*wk17_B0(2)
)
: ((idx[0] == -1
      + block0np0) ? (
   1.5*wk17_B0(-2) + 1.83333333333333*wk17_B0(0) - 3.0*wk17_B0(-1) -
      0.333333333333333*wk17_B0(-3)
)
: ((idx[0] == -2 + block0np0) ? (
   0.322484932882161*wk17_B0(0) +
      0.0658051057710389*wk17_B0(-3) + 0.376283677513354*wk17_B0(1) - 0.0394168524399447*wk17_B0(-2) -
      0.00571369039775442*wk17_B0(-4) - 0.719443173328855*wk17_B0(-1)
)
: ((idx[0] == -3 + block0np0) ? (
  
      0.00412637789557492*wk17_B0(-3) + 0.0367146847001261*wk17_B0(-2) + 0.791245592765872*wk17_B0(1) -
      0.197184333887745*wk17_B0(0) - 0.521455851089587*wk17_B0(-1) - 0.113446470384241*wk17_B0(2)
)
: ((idx[0] == -4 +
      block0np0) ? (
   0.00932597985049999*wk17_B0(3) + 0.727822147724592*wk17_B0(1) + 0.082033432844602*wk17_B0(-2) -
      0.0451033223343881*wk17_B0(0) - 0.652141084861241*wk17_B0(-1) - 0.121937153224065*wk17_B0(2)
)
: (
  
      -(2.0/3.0)*wk17_B0(-1) - (1.0/12.0)*wk17_B0(2) + ((1.0/12.0))*wk17_B0(-2) + ((2.0/3.0))*wk17_B0(1)
)))))))));

}

void opensbliblock00Kernel020(const ACC<double> &rhou0_B0, ACC<double> &wk10_B0, const int *idx)
{
    wk10_B0(0) = invDelta0block0*((idx[0] == 0) ? (
   3.0*rhou0_B0(1) + 0.333333333333333*rhou0_B0(3) - 1.5*rhou0_B0(2)
      - 1.83333333333333*rhou0_B0(0)
)
: ((idx[0] == 1) ? (
   0.0394168524399447*rhou0_B0(2) +
      0.00571369039775442*rhou0_B0(4) + 0.719443173328855*rhou0_B0(1) - 0.322484932882161*rhou0_B0(0) -
      0.0658051057710389*rhou0_B0(3) - 0.376283677513354*rhou0_B0(-1)
)
: ((idx[0] == 2) ? (
  
      0.197184333887745*rhou0_B0(0) + 0.521455851089587*rhou0_B0(1) + 0.113446470384241*rhou0_B0(-2) -
      0.00412637789557492*rhou0_B0(3) - 0.0367146847001261*rhou0_B0(2) - 0.791245592765872*rhou0_B0(-1)
)
: ((idx[0] ==
      3) ? (
   0.0451033223343881*rhou0_B0(0) + 0.652141084861241*rhou0_B0(1) + 0.121937153224065*rhou0_B0(-2) -
      0.00932597985049999*rhou0_B0(-3) - 0.727822147724592*rhou0_B0(-1) - 0.082033432844602*rhou0_B0(2)
)
: ((idx[0] ==
      -1 + block0np0) ? (
   1.5*rhou0_B0(-2) + 1.83333333333333*rhou0_B0(0) - 3.0*rhou0_B0(-1) -
      0.333333333333333*rhou0_B0(-3)
)
: ((idx[0] == -2 + block0np0) ? (
   0.322484932882161*rhou0_B0(0) +
      0.0658051057710389*rhou0_B0(-3) + 0.376283677513354*rhou0_B0(1) - 0.0394168524399447*rhou0_B0(-2) -
      0.00571369039775442*rhou0_B0(-4) - 0.719443173328855*rhou0_B0(-1)
)
: ((idx[0] == -3 + block0np0) ? (
  
      0.00412637789557492*rhou0_B0(-3) + 0.0367146847001261*rhou0_B0(-2) + 0.791245592765872*rhou0_B0(1) -
      0.197184333887745*rhou0_B0(0) - 0.521455851089587*rhou0_B0(-1) - 0.113446470384241*rhou0_B0(2)
)
: ((idx[0] == -4
      + block0np0) ? (
   0.00932597985049999*rhou0_B0(3) + 0.727822147724592*rhou0_B0(1) +
      0.082033432844602*rhou0_B0(-2) - 0.0451033223343881*rhou0_B0(0) - 0.652141084861241*rhou0_B0(-1) -
      0.121937153224065*rhou0_B0(2)
)
: (
   -(2.0/3.0)*rhou0_B0(-1) - (1.0/12.0)*rhou0_B0(2) +
      ((1.0/12.0))*rhou0_B0(-2) + ((2.0/3.0))*rhou0_B0(1)
)))))))));

}

void opensbliblock00Kernel021(const ACC<double> &u0_B0, ACC<double> &wk11_B0, const int *idx)
{
    wk11_B0(0) = invDelta0block0*((idx[0] == 0) ? (
   3.0*u0_B0(1) + 0.333333333333333*u0_B0(3) - 1.5*u0_B0(2) -
      1.83333333333333*u0_B0(0)
)
: ((idx[0] == 1) ? (
   0.0394168524399447*u0_B0(2) + 0.00571369039775442*u0_B0(4) +
      0.719443173328855*u0_B0(1) - 0.322484932882161*u0_B0(0) - 0.0658051057710389*u0_B0(3) -
      0.376283677513354*u0_B0(-1)
)
: ((idx[0] == 2) ? (
   0.197184333887745*u0_B0(0) + 0.521455851089587*u0_B0(1) +
      0.113446470384241*u0_B0(-2) - 0.00412637789557492*u0_B0(3) - 0.0367146847001261*u0_B0(2) -
      0.791245592765872*u0_B0(-1)
)
: ((idx[0] == 3) ? (
   0.0451033223343881*u0_B0(0) + 0.652141084861241*u0_B0(1) +
      0.121937153224065*u0_B0(-2) - 0.00932597985049999*u0_B0(-3) - 0.727822147724592*u0_B0(-1) -
      0.082033432844602*u0_B0(2)
)
: ((idx[0] == -1 + block0np0) ? (
   1.5*u0_B0(-2) + 1.83333333333333*u0_B0(0) -
      3.0*u0_B0(-1) - 0.333333333333333*u0_B0(-3)
)
: ((idx[0] == -2 + block0np0) ? (
   0.322484932882161*u0_B0(0) +
      0.0658051057710389*u0_B0(-3) + 0.376283677513354*u0_B0(1) - 0.0394168524399447*u0_B0(-2) -
      0.00571369039775442*u0_B0(-4) - 0.719443173328855*u0_B0(-1)
)
: ((idx[0] == -3 + block0np0) ? (
  
      0.00412637789557492*u0_B0(-3) + 0.0367146847001261*u0_B0(-2) + 0.791245592765872*u0_B0(1) -
      0.197184333887745*u0_B0(0) - 0.521455851089587*u0_B0(-1) - 0.113446470384241*u0_B0(2)
)
: ((idx[0] == -4 +
      block0np0) ? (
   0.00932597985049999*u0_B0(3) + 0.727822147724592*u0_B0(1) + 0.082033432844602*u0_B0(-2) -
      0.0451033223343881*u0_B0(0) - 0.652141084861241*u0_B0(-1) - 0.121937153224065*u0_B0(2)
)
: (
  
      -(2.0/3.0)*u0_B0(-1) - (1.0/12.0)*u0_B0(2) + ((1.0/12.0))*u0_B0(-2) + ((2.0/3.0))*u0_B0(1)
)))))))));

}

void opensbliblock00Kernel022(const ACC<double> &p_B0, ACC<double> &wk12_B0, const int *idx)
{
    wk12_B0(0) = invDelta0block0*((idx[0] == 0) ? (
   3.0*p_B0(1) + 0.333333333333333*p_B0(3) - 1.5*p_B0(2) -
      1.83333333333333*p_B0(0)
)
: ((idx[0] == 1) ? (
   0.0394168524399447*p_B0(2) + 0.00571369039775442*p_B0(4) +
      0.719443173328855*p_B0(1) - 0.322484932882161*p_B0(0) - 0.0658051057710389*p_B0(3) -
      0.376283677513354*p_B0(-1)
)
: ((idx[0] == 2) ? (
   0.197184333887745*p_B0(0) + 0.521455851089587*p_B0(1) +
      0.113446470384241*p_B0(-2) - 0.00412637789557492*p_B0(3) - 0.0367146847001261*p_B0(2) -
      0.791245592765872*p_B0(-1)
)
: ((idx[0] == 3) ? (
   0.0451033223343881*p_B0(0) + 0.652141084861241*p_B0(1) +
      0.121937153224065*p_B0(-2) - 0.00932597985049999*p_B0(-3) - 0.727822147724592*p_B0(-1) -
      0.082033432844602*p_B0(2)
)
: ((idx[0] == -1 + block0np0) ? (
   1.5*p_B0(-2) + 1.83333333333333*p_B0(0) -
      3.0*p_B0(-1) - 0.333333333333333*p_B0(-3)
)
: ((idx[0] == -2 + block0np0) ? (
   0.322484932882161*p_B0(0) +
      0.0658051057710389*p_B0(-3) + 0.376283677513354*p_B0(1) - 0.0394168524399447*p_B0(-2) -
      0.00571369039775442*p_B0(-4) - 0.719443173328855*p_B0(-1)
)
: ((idx[0] == -3 + block0np0) ? (
  
      0.00412637789557492*p_B0(-3) + 0.0367146847001261*p_B0(-2) + 0.791245592765872*p_B0(1) - 0.197184333887745*p_B0(0)
      - 0.521455851089587*p_B0(-1) - 0.113446470384241*p_B0(2)
)
: ((idx[0] == -4 + block0np0) ? (
  
      0.00932597985049999*p_B0(3) + 0.727822147724592*p_B0(1) + 0.082033432844602*p_B0(-2) - 0.0451033223343881*p_B0(0)
      - 0.652141084861241*p_B0(-1) - 0.121937153224065*p_B0(2)
)
: (
   -(2.0/3.0)*p_B0(-1) - (1.0/12.0)*p_B0(2) +
      ((1.0/12.0))*p_B0(-2) + ((2.0/3.0))*p_B0(1)
)))))))));

}

void opensbliblock00Kernel023(const ACC<double> &rho_B0, ACC<double> &wk13_B0, const int *idx)
{
    wk13_B0(0) = invDelta0block0*((idx[0] == 0) ? (
   3.0*rho_B0(1) + 0.333333333333333*rho_B0(3) - 1.5*rho_B0(2) -
      1.83333333333333*rho_B0(0)
)
: ((idx[0] == 1) ? (
   0.0394168524399447*rho_B0(2) + 0.00571369039775442*rho_B0(4)
      + 0.719443173328855*rho_B0(1) - 0.322484932882161*rho_B0(0) - 0.0658051057710389*rho_B0(3) -
      0.376283677513354*rho_B0(-1)
)
: ((idx[0] == 2) ? (
   0.197184333887745*rho_B0(0) + 0.521455851089587*rho_B0(1) +
      0.113446470384241*rho_B0(-2) - 0.00412637789557492*rho_B0(3) - 0.0367146847001261*rho_B0(2) -
      0.791245592765872*rho_B0(-1)
)
: ((idx[0] == 3) ? (
   0.0451033223343881*rho_B0(0) + 0.652141084861241*rho_B0(1)
      + 0.121937153224065*rho_B0(-2) - 0.00932597985049999*rho_B0(-3) - 0.727822147724592*rho_B0(-1) -
      0.082033432844602*rho_B0(2)
)
: ((idx[0] == -1 + block0np0) ? (
   1.5*rho_B0(-2) + 1.83333333333333*rho_B0(0) -
      3.0*rho_B0(-1) - 0.333333333333333*rho_B0(-3)
)
: ((idx[0] == -2 + block0np0) ? (
   0.322484932882161*rho_B0(0) +
      0.0658051057710389*rho_B0(-3) + 0.376283677513354*rho_B0(1) - 0.0394168524399447*rho_B0(-2) -
      0.00571369039775442*rho_B0(-4) - 0.719443173328855*rho_B0(-1)
)
: ((idx[0] == -3 + block0np0) ? (
  
      0.00412637789557492*rho_B0(-3) + 0.0367146847001261*rho_B0(-2) + 0.791245592765872*rho_B0(1) -
      0.197184333887745*rho_B0(0) - 0.521455851089587*rho_B0(-1) - 0.113446470384241*rho_B0(2)
)
: ((idx[0] == -4 +
      block0np0) ? (
   0.00932597985049999*rho_B0(3) + 0.727822147724592*rho_B0(1) + 0.082033432844602*rho_B0(-2) -
      0.0451033223343881*rho_B0(0) - 0.652141084861241*rho_B0(-1) - 0.121937153224065*rho_B0(2)
)
: (
  
      -(2.0/3.0)*rho_B0(-1) - (1.0/12.0)*rho_B0(2) + ((1.0/12.0))*rho_B0(-2) + ((2.0/3.0))*rho_B0(1)
)))))))));

}

 void opensbliblock00Kernel024(const ACC<double> &rhoE_B0, const ACC<double> &rho_B0, const ACC<double> &rhou0_B0, const
ACC<double> &tau00_B0, const ACC<double> &u0_B0, const ACC<double> &wk10_B0, const ACC<double> &wk11_B0, const
ACC<double> &wk12_B0, const ACC<double> &wk13_B0, const ACC<double> &wk3_B0, const ACC<double> &wk4_B0, const
ACC<double> &wk5_B0, const ACC<double> &wk6_B0, const ACC<double> &wk7_B0, const ACC<double> &wk8_B0, const ACC<double>
&wk9_B0, ACC<double> &Residual0_B0, ACC<double> &Residual1_B0, ACC<double> &Residual2_B0)
{
   Residual0_B0(0) = -(1.0/2.0)*wk9_B0(0) - (1.0/2.0)*u0_B0(0)*wk13_B0(0) - (1.0/2.0)*rho_B0(0)*wk11_B0(0);

    Residual1_B0(0) = -wk12_B0(0) - (1.0/2.0)*wk8_B0(0) - (1.0/2.0)*u0_B0(0)*wk10_B0(0) -
      (1.0/2.0)*wk11_B0(0)*rhou0_B0(0) + wk3_B0(0);

    Residual2_B0(0) = -wk6_B0(0) - (1.0/2.0)*wk4_B0(0) + u0_B0(0)*wk3_B0(0) + wk11_B0(0)*tau00_B0(0) -
      (1.0/2.0)*u0_B0(0)*wk5_B0(0) - (1.0/2.0)*rhoE_B0(0)*wk11_B0(0) + wk7_B0(0);

}

 void opensbliblock00Kernel028(const ACC<double> &Residual0_B0, const ACC<double> &Residual1_B0, const ACC<double>
&Residual2_B0, ACC<double> &rhoE_B0, ACC<double> &rhoE_RKold_B0, ACC<double> &rho_B0, ACC<double> &rho_RKold_B0,
ACC<double> &rhou0_B0, ACC<double> &rhou0_RKold_B0, const double *rkA, const double *rkB)
{
   rho_RKold_B0(0) = rkA[0]*rho_RKold_B0(0) + dt*Residual0_B0(0);

   rho_B0(0) = rkB[0]*rho_RKold_B0(0) + rho_B0(0);

   rhou0_RKold_B0(0) = rkA[0]*rhou0_RKold_B0(0) + dt*Residual1_B0(0);

   rhou0_B0(0) = rkB[0]*rhou0_RKold_B0(0) + rhou0_B0(0);

   rhoE_RKold_B0(0) = rkA[0]*rhoE_RKold_B0(0) + dt*Residual2_B0(0);

   rhoE_B0(0) = rkB[0]*rhoE_RKold_B0(0) + rhoE_B0(0);

}

void opensbliblock00Kernel002(ACC<double> &wk0_B0, ACC<double> &wk1_B0, ACC<double> &wk2_B0)
{
   wk0_B0(0) = 0.0;

   wk1_B0(0) = 0.0;

   wk2_B0(0) = 0.0;

}

 void opensbliblock00Kernel003(const ACC<double> &a_B0, const ACC<double> &p_B0, const ACC<double> &rhoE_B0, const
ACC<double> &rho_B0, const ACC<double> &rhou0_B0, const ACC<double> &u0_B0, ACC<double> &wk0_B0, ACC<double> &wk1_B0,
ACC<double> &wk2_B0)
{
   double AVG_0_0_LEV_00 = 0.0;
   double AVG_0_0_LEV_01 = 0.0;
   double AVG_0_0_LEV_02 = 0.0;
   double AVG_0_0_LEV_10 = 0.0;
   double AVG_0_0_LEV_11 = 0.0;
   double AVG_0_0_LEV_12 = 0.0;
   double AVG_0_0_LEV_20 = 0.0;
   double AVG_0_0_LEV_21 = 0.0;
   double AVG_0_0_LEV_22 = 0.0;
   double AVG_0_a = 0.0;
   double AVG_0_inv_rho = 0.0;
   double AVG_0_rho = 0.0;
   double AVG_0_u0 = 0.0;
   double CF_00 = 0.0;
   double CF_01 = 0.0;
   double CF_02 = 0.0;
   double CF_03 = 0.0;
   double CF_04 = 0.0;
   double CF_05 = 0.0;
   double CF_10 = 0.0;
   double CF_11 = 0.0;
   double CF_12 = 0.0;
   double CF_13 = 0.0;
   double CF_14 = 0.0;
   double CF_15 = 0.0;
   double CF_20 = 0.0;
   double CF_21 = 0.0;
   double CF_22 = 0.0;
   double CF_23 = 0.0;
   double CF_24 = 0.0;
   double CF_25 = 0.0;
   double CS_00 = 0.0;
   double CS_01 = 0.0;
   double CS_02 = 0.0;
   double CS_03 = 0.0;
   double CS_04 = 0.0;
   double CS_05 = 0.0;
   double CS_10 = 0.0;
   double CS_11 = 0.0;
   double CS_12 = 0.0;
   double CS_13 = 0.0;
   double CS_14 = 0.0;
   double CS_15 = 0.0;
   double CS_20 = 0.0;
   double CS_21 = 0.0;
   double CS_22 = 0.0;
   double CS_23 = 0.0;
   double CS_24 = 0.0;
   double CS_25 = 0.0;
   double Recon_0 = 0.0;
   double Recon_1 = 0.0;
   double Recon_2 = 0.0;
   double alpha_0 = 0.0;
   double alpha_1 = 0.0;
   double alpha_2 = 0.0;
   double beta_0 = 0.0;
   double beta_1 = 0.0;
   double beta_2 = 0.0;
   double inv_AVG_a = 0.0;
   double inv_AVG_rho = 0.0;
   double inv_alpha_sum = 0.0;
   double max_lambda_00 = 0.0;
   double max_lambda_11 = 0.0;
   double max_lambda_22 = 0.0;
   double omega_0 = 0.0;
   double omega_1 = 0.0;
   double omega_2 = 0.0;
   double rj0 = 0.0;
   double rj1 = 0.0;
   double rj2 = 0.0;
   AVG_0_rho = sqrt(rho_B0(0)*rho_B0(1));

   AVG_0_inv_rho = 1.0/((sqrt(rho_B0(0)) + sqrt(rho_B0(1))));

   AVG_0_u0 = (sqrt(rho_B0(0))*u0_B0(0) + sqrt(rho_B0(1))*u0_B0(1))*AVG_0_inv_rho;

    AVG_0_a = sqrt((-(1.0/2.0)*(AVG_0_u0*AVG_0_u0) + ((p_B0(0) + rhoE_B0(0))/sqrt(rho_B0(0)) + (p_B0(1) +
      rhoE_B0(1))/sqrt(rho_B0(1)))*AVG_0_inv_rho)*gamma_m1);

   inv_AVG_a = 1.0/(AVG_0_a);

   inv_AVG_rho = 1.0/(AVG_0_rho);

    AVG_0_0_LEV_00 = ((1.0/4.0))*(2 - (inv_AVG_a*inv_AVG_a)*AVG_0_a*AVG_0_u0 +
      (inv_AVG_a*inv_AVG_a)*gama*AVG_0_a*AVG_0_u0)*AVG_0_u0*inv_AVG_a;

    AVG_0_0_LEV_01 = -(1.0/2.0)*(1 - (inv_AVG_a*inv_AVG_a)*AVG_0_a*AVG_0_u0 +
      (inv_AVG_a*inv_AVG_a)*gama*AVG_0_a*AVG_0_u0)*inv_AVG_a;

   AVG_0_0_LEV_02 = ((1.0/2.0))*(inv_AVG_a*inv_AVG_a)*gamma_m1;

    AVG_0_0_LEV_10 = -(1.0/2.0)*(-2 - (AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a) +
      (AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*gama);

   AVG_0_0_LEV_11 = (inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_0_u0;

   AVG_0_0_LEV_12 = -(inv_AVG_a*inv_AVG_a)*gamma_m1;

    AVG_0_0_LEV_20 = ((1.0/4.0))*(-2 - (inv_AVG_a*inv_AVG_a)*AVG_0_a*AVG_0_u0 +
      (inv_AVG_a*inv_AVG_a)*gama*AVG_0_a*AVG_0_u0)*AVG_0_u0*inv_AVG_a;

    AVG_0_0_LEV_21 = -(1.0/2.0)*(-1 - (inv_AVG_a*inv_AVG_a)*AVG_0_a*AVG_0_u0 +
      (inv_AVG_a*inv_AVG_a)*gama*AVG_0_a*AVG_0_u0)*inv_AVG_a;

   AVG_0_0_LEV_22 = ((1.0/2.0))*(inv_AVG_a*inv_AVG_a)*gamma_m1;

    CF_00 = p_B0(-2)*AVG_0_0_LEV_01 + rhou0_B0(-2)*AVG_0_0_LEV_00 + p_B0(-2)*u0_B0(-2)*AVG_0_0_LEV_02 +
      u0_B0(-2)*rhoE_B0(-2)*AVG_0_0_LEV_02 + u0_B0(-2)*rhou0_B0(-2)*AVG_0_0_LEV_01;

    CF_10 = p_B0(-2)*AVG_0_0_LEV_11 + rhou0_B0(-2)*AVG_0_0_LEV_10 + p_B0(-2)*u0_B0(-2)*AVG_0_0_LEV_12 +
      u0_B0(-2)*rhoE_B0(-2)*AVG_0_0_LEV_12 + u0_B0(-2)*rhou0_B0(-2)*AVG_0_0_LEV_11;

    CF_20 = p_B0(-2)*AVG_0_0_LEV_21 + rhou0_B0(-2)*AVG_0_0_LEV_20 + p_B0(-2)*u0_B0(-2)*AVG_0_0_LEV_22 +
      u0_B0(-2)*rhoE_B0(-2)*AVG_0_0_LEV_22 + u0_B0(-2)*rhou0_B0(-2)*AVG_0_0_LEV_21;

   CS_00 = rho_B0(-2)*AVG_0_0_LEV_00 + rhoE_B0(-2)*AVG_0_0_LEV_02 + rhou0_B0(-2)*AVG_0_0_LEV_01;

   CS_10 = rho_B0(-2)*AVG_0_0_LEV_10 + rhoE_B0(-2)*AVG_0_0_LEV_12 + rhou0_B0(-2)*AVG_0_0_LEV_11;

   CS_20 = rho_B0(-2)*AVG_0_0_LEV_20 + rhoE_B0(-2)*AVG_0_0_LEV_22 + rhou0_B0(-2)*AVG_0_0_LEV_21;

    CF_01 = p_B0(-1)*AVG_0_0_LEV_01 + rhou0_B0(-1)*AVG_0_0_LEV_00 + p_B0(-1)*u0_B0(-1)*AVG_0_0_LEV_02 +
      u0_B0(-1)*rhoE_B0(-1)*AVG_0_0_LEV_02 + u0_B0(-1)*rhou0_B0(-1)*AVG_0_0_LEV_01;

    CF_11 = p_B0(-1)*AVG_0_0_LEV_11 + rhou0_B0(-1)*AVG_0_0_LEV_10 + p_B0(-1)*u0_B0(-1)*AVG_0_0_LEV_12 +
      u0_B0(-1)*rhoE_B0(-1)*AVG_0_0_LEV_12 + u0_B0(-1)*rhou0_B0(-1)*AVG_0_0_LEV_11;

    CF_21 = p_B0(-1)*AVG_0_0_LEV_21 + rhou0_B0(-1)*AVG_0_0_LEV_20 + p_B0(-1)*u0_B0(-1)*AVG_0_0_LEV_22 +
      u0_B0(-1)*rhoE_B0(-1)*AVG_0_0_LEV_22 + u0_B0(-1)*rhou0_B0(-1)*AVG_0_0_LEV_21;

   CS_01 = rho_B0(-1)*AVG_0_0_LEV_00 + rhoE_B0(-1)*AVG_0_0_LEV_02 + rhou0_B0(-1)*AVG_0_0_LEV_01;

   CS_11 = rho_B0(-1)*AVG_0_0_LEV_10 + rhoE_B0(-1)*AVG_0_0_LEV_12 + rhou0_B0(-1)*AVG_0_0_LEV_11;

   CS_21 = rho_B0(-1)*AVG_0_0_LEV_20 + rhoE_B0(-1)*AVG_0_0_LEV_22 + rhou0_B0(-1)*AVG_0_0_LEV_21;

    CF_02 = p_B0(0)*AVG_0_0_LEV_01 + rhou0_B0(0)*AVG_0_0_LEV_00 + p_B0(0)*u0_B0(0)*AVG_0_0_LEV_02 +
      u0_B0(0)*rhoE_B0(0)*AVG_0_0_LEV_02 + u0_B0(0)*rhou0_B0(0)*AVG_0_0_LEV_01;

    CF_12 = p_B0(0)*AVG_0_0_LEV_11 + rhou0_B0(0)*AVG_0_0_LEV_10 + p_B0(0)*u0_B0(0)*AVG_0_0_LEV_12 +
      u0_B0(0)*rhoE_B0(0)*AVG_0_0_LEV_12 + u0_B0(0)*rhou0_B0(0)*AVG_0_0_LEV_11;

    CF_22 = p_B0(0)*AVG_0_0_LEV_21 + rhou0_B0(0)*AVG_0_0_LEV_20 + p_B0(0)*u0_B0(0)*AVG_0_0_LEV_22 +
      u0_B0(0)*rhoE_B0(0)*AVG_0_0_LEV_22 + u0_B0(0)*rhou0_B0(0)*AVG_0_0_LEV_21;

   CS_02 = rho_B0(0)*AVG_0_0_LEV_00 + rhoE_B0(0)*AVG_0_0_LEV_02 + rhou0_B0(0)*AVG_0_0_LEV_01;

   CS_12 = rho_B0(0)*AVG_0_0_LEV_10 + rhoE_B0(0)*AVG_0_0_LEV_12 + rhou0_B0(0)*AVG_0_0_LEV_11;

   CS_22 = rho_B0(0)*AVG_0_0_LEV_20 + rhoE_B0(0)*AVG_0_0_LEV_22 + rhou0_B0(0)*AVG_0_0_LEV_21;

    CF_03 = p_B0(1)*AVG_0_0_LEV_01 + rhou0_B0(1)*AVG_0_0_LEV_00 + p_B0(1)*u0_B0(1)*AVG_0_0_LEV_02 +
      u0_B0(1)*rhoE_B0(1)*AVG_0_0_LEV_02 + u0_B0(1)*rhou0_B0(1)*AVG_0_0_LEV_01;

    CF_13 = p_B0(1)*AVG_0_0_LEV_11 + rhou0_B0(1)*AVG_0_0_LEV_10 + p_B0(1)*u0_B0(1)*AVG_0_0_LEV_12 +
      u0_B0(1)*rhoE_B0(1)*AVG_0_0_LEV_12 + u0_B0(1)*rhou0_B0(1)*AVG_0_0_LEV_11;

    CF_23 = p_B0(1)*AVG_0_0_LEV_21 + rhou0_B0(1)*AVG_0_0_LEV_20 + p_B0(1)*u0_B0(1)*AVG_0_0_LEV_22 +
      u0_B0(1)*rhoE_B0(1)*AVG_0_0_LEV_22 + u0_B0(1)*rhou0_B0(1)*AVG_0_0_LEV_21;

   CS_03 = rho_B0(1)*AVG_0_0_LEV_00 + rhoE_B0(1)*AVG_0_0_LEV_02 + rhou0_B0(1)*AVG_0_0_LEV_01;

   CS_13 = rho_B0(1)*AVG_0_0_LEV_10 + rhoE_B0(1)*AVG_0_0_LEV_12 + rhou0_B0(1)*AVG_0_0_LEV_11;

   CS_23 = rho_B0(1)*AVG_0_0_LEV_20 + rhoE_B0(1)*AVG_0_0_LEV_22 + rhou0_B0(1)*AVG_0_0_LEV_21;

    CF_04 = p_B0(2)*AVG_0_0_LEV_01 + rhou0_B0(2)*AVG_0_0_LEV_00 + p_B0(2)*u0_B0(2)*AVG_0_0_LEV_02 +
      u0_B0(2)*rhoE_B0(2)*AVG_0_0_LEV_02 + u0_B0(2)*rhou0_B0(2)*AVG_0_0_LEV_01;

    CF_14 = p_B0(2)*AVG_0_0_LEV_11 + rhou0_B0(2)*AVG_0_0_LEV_10 + p_B0(2)*u0_B0(2)*AVG_0_0_LEV_12 +
      u0_B0(2)*rhoE_B0(2)*AVG_0_0_LEV_12 + u0_B0(2)*rhou0_B0(2)*AVG_0_0_LEV_11;

    CF_24 = p_B0(2)*AVG_0_0_LEV_21 + rhou0_B0(2)*AVG_0_0_LEV_20 + p_B0(2)*u0_B0(2)*AVG_0_0_LEV_22 +
      u0_B0(2)*rhoE_B0(2)*AVG_0_0_LEV_22 + u0_B0(2)*rhou0_B0(2)*AVG_0_0_LEV_21;

   CS_04 = rho_B0(2)*AVG_0_0_LEV_00 + rhoE_B0(2)*AVG_0_0_LEV_02 + rhou0_B0(2)*AVG_0_0_LEV_01;

   CS_14 = rho_B0(2)*AVG_0_0_LEV_10 + rhoE_B0(2)*AVG_0_0_LEV_12 + rhou0_B0(2)*AVG_0_0_LEV_11;

   CS_24 = rho_B0(2)*AVG_0_0_LEV_20 + rhoE_B0(2)*AVG_0_0_LEV_22 + rhou0_B0(2)*AVG_0_0_LEV_21;

    CF_05 = p_B0(3)*AVG_0_0_LEV_01 + rhou0_B0(3)*AVG_0_0_LEV_00 + p_B0(3)*u0_B0(3)*AVG_0_0_LEV_02 +
      u0_B0(3)*rhoE_B0(3)*AVG_0_0_LEV_02 + u0_B0(3)*rhou0_B0(3)*AVG_0_0_LEV_01;

    CF_15 = p_B0(3)*AVG_0_0_LEV_11 + rhou0_B0(3)*AVG_0_0_LEV_10 + p_B0(3)*u0_B0(3)*AVG_0_0_LEV_12 +
      u0_B0(3)*rhoE_B0(3)*AVG_0_0_LEV_12 + u0_B0(3)*rhou0_B0(3)*AVG_0_0_LEV_11;

    CF_25 = p_B0(3)*AVG_0_0_LEV_21 + rhou0_B0(3)*AVG_0_0_LEV_20 + p_B0(3)*u0_B0(3)*AVG_0_0_LEV_22 +
      u0_B0(3)*rhoE_B0(3)*AVG_0_0_LEV_22 + u0_B0(3)*rhou0_B0(3)*AVG_0_0_LEV_21;

   CS_05 = rho_B0(3)*AVG_0_0_LEV_00 + rhoE_B0(3)*AVG_0_0_LEV_02 + rhou0_B0(3)*AVG_0_0_LEV_01;

   CS_15 = rho_B0(3)*AVG_0_0_LEV_10 + rhoE_B0(3)*AVG_0_0_LEV_12 + rhou0_B0(3)*AVG_0_0_LEV_11;

   CS_25 = rho_B0(3)*AVG_0_0_LEV_20 + rhoE_B0(3)*AVG_0_0_LEV_22 + rhou0_B0(3)*AVG_0_0_LEV_21;

   max_lambda_00 = shock_filter_control*fmax(fabs(-u0_B0(0) + a_B0(0)), fabs(-u0_B0(1) + a_B0(1)));

   max_lambda_11 = shock_filter_control*fmax(fabs(u0_B0(0)), fabs(u0_B0(1)));

   max_lambda_22 = shock_filter_control*fmax(fabs(a_B0(0) + u0_B0(0)), fabs(a_B0(1) + u0_B0(1)));

    beta_0 = ((1.0/3.0))*((CS_04*max_lambda_00 + CF_04)*(CS_04*max_lambda_00 + CF_04)) +
      ((1.0/2.0))*(-(19.0/6.0)*(CS_04*max_lambda_00 + CF_04) + ((25.0/6.0))*(CS_03*max_lambda_00 +
      CF_03))*(CS_03*max_lambda_00 + CF_03) + ((1.0/2.0))*(CS_02*max_lambda_00 +
      CF_02)*(-(31.0/6.0)*(CS_03*max_lambda_00 + CF_03) + ((5.0/3.0))*(CS_02*max_lambda_00 + CF_02) +
      ((11.0/6.0))*(CS_04*max_lambda_00 + CF_04));

    beta_1 = ((1.0/3.0))*((CS_03*max_lambda_00 + CF_03)*(CS_03*max_lambda_00 + CF_03)) +
      ((1.0/2.0))*(-(13.0/6.0)*(CS_03*max_lambda_00 + CF_03) + ((13.0/6.0))*(CS_02*max_lambda_00 +
      CF_02))*(CS_02*max_lambda_00 + CF_02) + ((1.0/2.0))*(CS_01*max_lambda_00 +
      CF_01)*(-(13.0/6.0)*(CS_02*max_lambda_00 + CF_02) + ((2.0/3.0))*(CS_01*max_lambda_00 + CF_01) +
      ((5.0/6.0))*(CS_03*max_lambda_00 + CF_03));

    beta_2 = ((5.0/6.0))*((CS_02*max_lambda_00 + CF_02)*(CS_02*max_lambda_00 + CF_02)) +
      ((1.0/2.0))*(((2.0/3.0))*(CS_00*max_lambda_00 + CF_00) + ((11.0/6.0))*(CS_02*max_lambda_00 +
      CF_02))*(CS_00*max_lambda_00 + CF_00) + ((1.0/2.0))*(CS_01*max_lambda_00 +
      CF_01)*(-(31.0/6.0)*(CS_02*max_lambda_00 + CF_02) - (19.0/6.0)*(CS_00*max_lambda_00 + CF_00) +
      ((25.0/6.0))*(CS_01*max_lambda_00 + CF_01));

    alpha_0 = 0.3 + ((3.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_0)*(1.0e-40 +
      beta_0));

   alpha_1 = 0.6 + ((3.0/5.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_1)*(1.0e-40 + beta_1));

    alpha_2 = 0.1 + ((1.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_2)*(1.0e-40 +
      beta_2));

   inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2));

   omega_0 = alpha_0*inv_alpha_sum;

   omega_1 = alpha_1*inv_alpha_sum;

   omega_2 = alpha_2*inv_alpha_sum;

    rj0 = 0.0909090909090909*fabs(-1.0 + 10*omega_2) + 0.0909090909090909*fabs(-1.0 + ((5.0/3.0))*omega_1) +
      0.0909090909090909*fabs(-1.0 + ((10.0/3.0))*omega_0);

    Recon_0 = (-(7.0/12.0)*(CS_01*max_lambda_00 + CF_01) + ((1.0/6.0))*(CS_00*max_lambda_00 + CF_00) +
      ((11.0/12.0))*(CS_02*max_lambda_00 + CF_02))*omega_2 + (-(1.0/12.0)*(CS_01*max_lambda_00 + CF_01) +
      ((1.0/6.0))*(CS_03*max_lambda_00 + CF_03) + ((5.0/12.0))*(CS_02*max_lambda_00 + CF_02))*omega_1 +
      (-(1.0/12.0)*(CS_04*max_lambda_00 + CF_04) + ((1.0/6.0))*(CS_02*max_lambda_00 + CF_02) +
      ((5.0/12.0))*(CS_03*max_lambda_00 + CF_03))*omega_0 + Recon_0;

    beta_0 = ((1.0/3.0))*((-CS_05*max_lambda_00 + CF_05)*(-CS_05*max_lambda_00 + CF_05)) +
      ((1.0/2.0))*(-(19.0/6.0)*(-CS_05*max_lambda_00 + CF_05) + ((25.0/6.0))*(-CS_04*max_lambda_00 +
      CF_04))*(-CS_04*max_lambda_00 + CF_04) + ((1.0/2.0))*(-CS_03*max_lambda_00 +
      CF_03)*(-(31.0/6.0)*(-CS_04*max_lambda_00 + CF_04) + ((5.0/3.0))*(-CS_03*max_lambda_00 + CF_03) +
      ((11.0/6.0))*(-CS_05*max_lambda_00 + CF_05));

    beta_1 = ((1.0/3.0))*((-CS_04*max_lambda_00 + CF_04)*(-CS_04*max_lambda_00 + CF_04)) +
      ((1.0/2.0))*(-(13.0/6.0)*(-CS_04*max_lambda_00 + CF_04) + ((13.0/6.0))*(-CS_03*max_lambda_00 +
      CF_03))*(-CS_03*max_lambda_00 + CF_03) + ((1.0/2.0))*(-CS_02*max_lambda_00 +
      CF_02)*(-(13.0/6.0)*(-CS_03*max_lambda_00 + CF_03) + ((2.0/3.0))*(-CS_02*max_lambda_00 + CF_02) +
      ((5.0/6.0))*(-CS_04*max_lambda_00 + CF_04));

    beta_2 = ((5.0/6.0))*((-CS_03*max_lambda_00 + CF_03)*(-CS_03*max_lambda_00 + CF_03)) +
      ((1.0/2.0))*(-(31.0/6.0)*(-CS_03*max_lambda_00 + CF_03) + ((25.0/6.0))*(-CS_02*max_lambda_00 +
      CF_02))*(-CS_02*max_lambda_00 + CF_02) + ((1.0/2.0))*(-CS_01*max_lambda_00 +
      CF_01)*(-(19.0/6.0)*(-CS_02*max_lambda_00 + CF_02) + ((2.0/3.0))*(-CS_01*max_lambda_00 + CF_01) +
      ((11.0/6.0))*(-CS_03*max_lambda_00 + CF_03));

    alpha_0 = 0.1 + ((1.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_0)*(1.0e-40 +
      beta_0));

   alpha_1 = 0.6 + ((3.0/5.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_1)*(1.0e-40 + beta_1));

    alpha_2 = 0.3 + ((3.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_2)*(1.0e-40 +
      beta_2));

   inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2));

   omega_0 = alpha_0*inv_alpha_sum;

   omega_1 = alpha_1*inv_alpha_sum;

   omega_2 = alpha_2*inv_alpha_sum;

    rj0 = fmax(rj0, 0.0909090909090909*fabs(-1.0 + 10*omega_0) + 0.0909090909090909*fabs(-1.0 + ((5.0/3.0))*omega_1) +
      0.0909090909090909*fabs(-1.0 + ((10.0/3.0))*omega_2));

    Recon_0 = (-(7.0/12.0)*(-CS_04*max_lambda_00 + CF_04) + ((1.0/6.0))*(-CS_05*max_lambda_00 + CF_05) +
      ((11.0/12.0))*(-CS_03*max_lambda_00 + CF_03))*omega_0 + (-(1.0/12.0)*(-CS_01*max_lambda_00 + CF_01) +
      ((1.0/6.0))*(-CS_03*max_lambda_00 + CF_03) + ((5.0/12.0))*(-CS_02*max_lambda_00 + CF_02))*omega_2 +
      (-(1.0/12.0)*(-CS_04*max_lambda_00 + CF_04) + ((1.0/6.0))*(-CS_02*max_lambda_00 + CF_02) +
      ((5.0/12.0))*(-CS_03*max_lambda_00 + CF_03))*omega_1 + Recon_0;

    beta_0 = ((1.0/3.0))*((CS_14*max_lambda_11 + CF_14)*(CS_14*max_lambda_11 + CF_14)) +
      ((1.0/2.0))*(-(19.0/6.0)*(CS_14*max_lambda_11 + CF_14) + ((25.0/6.0))*(CS_13*max_lambda_11 +
      CF_13))*(CS_13*max_lambda_11 + CF_13) + ((1.0/2.0))*(CS_12*max_lambda_11 +
      CF_12)*(-(31.0/6.0)*(CS_13*max_lambda_11 + CF_13) + ((5.0/3.0))*(CS_12*max_lambda_11 + CF_12) +
      ((11.0/6.0))*(CS_14*max_lambda_11 + CF_14));

    beta_1 = ((1.0/3.0))*((CS_13*max_lambda_11 + CF_13)*(CS_13*max_lambda_11 + CF_13)) +
      ((1.0/2.0))*(-(13.0/6.0)*(CS_13*max_lambda_11 + CF_13) + ((13.0/6.0))*(CS_12*max_lambda_11 +
      CF_12))*(CS_12*max_lambda_11 + CF_12) + ((1.0/2.0))*(CS_11*max_lambda_11 +
      CF_11)*(-(13.0/6.0)*(CS_12*max_lambda_11 + CF_12) + ((2.0/3.0))*(CS_11*max_lambda_11 + CF_11) +
      ((5.0/6.0))*(CS_13*max_lambda_11 + CF_13));

    beta_2 = ((5.0/6.0))*((CS_12*max_lambda_11 + CF_12)*(CS_12*max_lambda_11 + CF_12)) +
      ((1.0/2.0))*(((2.0/3.0))*(CS_10*max_lambda_11 + CF_10) + ((11.0/6.0))*(CS_12*max_lambda_11 +
      CF_12))*(CS_10*max_lambda_11 + CF_10) + ((1.0/2.0))*(CS_11*max_lambda_11 +
      CF_11)*(-(31.0/6.0)*(CS_12*max_lambda_11 + CF_12) - (19.0/6.0)*(CS_10*max_lambda_11 + CF_10) +
      ((25.0/6.0))*(CS_11*max_lambda_11 + CF_11));

    alpha_0 = 0.3 + ((3.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_0)*(1.0e-40 +
      beta_0));

   alpha_1 = 0.6 + ((3.0/5.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_1)*(1.0e-40 + beta_1));

    alpha_2 = 0.1 + ((1.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_2)*(1.0e-40 +
      beta_2));

   inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2));

   omega_0 = alpha_0*inv_alpha_sum;

   omega_1 = alpha_1*inv_alpha_sum;

   omega_2 = alpha_2*inv_alpha_sum;

    rj1 = 0.0909090909090909*fabs(-1.0 + 10*omega_2) + 0.0909090909090909*fabs(-1.0 + ((5.0/3.0))*omega_1) +
      0.0909090909090909*fabs(-1.0 + ((10.0/3.0))*omega_0);

    Recon_1 = (-(7.0/12.0)*(CS_11*max_lambda_11 + CF_11) + ((1.0/6.0))*(CS_10*max_lambda_11 + CF_10) +
      ((11.0/12.0))*(CS_12*max_lambda_11 + CF_12))*omega_2 + (-(1.0/12.0)*(CS_11*max_lambda_11 + CF_11) +
      ((1.0/6.0))*(CS_13*max_lambda_11 + CF_13) + ((5.0/12.0))*(CS_12*max_lambda_11 + CF_12))*omega_1 +
      (-(1.0/12.0)*(CS_14*max_lambda_11 + CF_14) + ((1.0/6.0))*(CS_12*max_lambda_11 + CF_12) +
      ((5.0/12.0))*(CS_13*max_lambda_11 + CF_13))*omega_0 + Recon_1;

    beta_0 = ((1.0/3.0))*((-CS_15*max_lambda_11 + CF_15)*(-CS_15*max_lambda_11 + CF_15)) +
      ((1.0/2.0))*(-(19.0/6.0)*(-CS_15*max_lambda_11 + CF_15) + ((25.0/6.0))*(-CS_14*max_lambda_11 +
      CF_14))*(-CS_14*max_lambda_11 + CF_14) + ((1.0/2.0))*(-CS_13*max_lambda_11 +
      CF_13)*(-(31.0/6.0)*(-CS_14*max_lambda_11 + CF_14) + ((5.0/3.0))*(-CS_13*max_lambda_11 + CF_13) +
      ((11.0/6.0))*(-CS_15*max_lambda_11 + CF_15));

    beta_1 = ((1.0/3.0))*((-CS_14*max_lambda_11 + CF_14)*(-CS_14*max_lambda_11 + CF_14)) +
      ((1.0/2.0))*(-(13.0/6.0)*(-CS_14*max_lambda_11 + CF_14) + ((13.0/6.0))*(-CS_13*max_lambda_11 +
      CF_13))*(-CS_13*max_lambda_11 + CF_13) + ((1.0/2.0))*(-CS_12*max_lambda_11 +
      CF_12)*(-(13.0/6.0)*(-CS_13*max_lambda_11 + CF_13) + ((2.0/3.0))*(-CS_12*max_lambda_11 + CF_12) +
      ((5.0/6.0))*(-CS_14*max_lambda_11 + CF_14));

    beta_2 = ((5.0/6.0))*((-CS_13*max_lambda_11 + CF_13)*(-CS_13*max_lambda_11 + CF_13)) +
      ((1.0/2.0))*(-(31.0/6.0)*(-CS_13*max_lambda_11 + CF_13) + ((25.0/6.0))*(-CS_12*max_lambda_11 +
      CF_12))*(-CS_12*max_lambda_11 + CF_12) + ((1.0/2.0))*(-CS_11*max_lambda_11 +
      CF_11)*(-(19.0/6.0)*(-CS_12*max_lambda_11 + CF_12) + ((2.0/3.0))*(-CS_11*max_lambda_11 + CF_11) +
      ((11.0/6.0))*(-CS_13*max_lambda_11 + CF_13));

    alpha_0 = 0.1 + ((1.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_0)*(1.0e-40 +
      beta_0));

   alpha_1 = 0.6 + ((3.0/5.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_1)*(1.0e-40 + beta_1));

    alpha_2 = 0.3 + ((3.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_2)*(1.0e-40 +
      beta_2));

   inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2));

   omega_0 = alpha_0*inv_alpha_sum;

   omega_1 = alpha_1*inv_alpha_sum;

   omega_2 = alpha_2*inv_alpha_sum;

    rj1 = fmax(rj1, 0.0909090909090909*fabs(-1.0 + 10*omega_0) + 0.0909090909090909*fabs(-1.0 + ((5.0/3.0))*omega_1) +
      0.0909090909090909*fabs(-1.0 + ((10.0/3.0))*omega_2));

    Recon_1 = (-(7.0/12.0)*(-CS_14*max_lambda_11 + CF_14) + ((1.0/6.0))*(-CS_15*max_lambda_11 + CF_15) +
      ((11.0/12.0))*(-CS_13*max_lambda_11 + CF_13))*omega_0 + (-(1.0/12.0)*(-CS_11*max_lambda_11 + CF_11) +
      ((1.0/6.0))*(-CS_13*max_lambda_11 + CF_13) + ((5.0/12.0))*(-CS_12*max_lambda_11 + CF_12))*omega_2 +
      (-(1.0/12.0)*(-CS_14*max_lambda_11 + CF_14) + ((1.0/6.0))*(-CS_12*max_lambda_11 + CF_12) +
      ((5.0/12.0))*(-CS_13*max_lambda_11 + CF_13))*omega_1 + Recon_1;

    beta_0 = ((1.0/3.0))*((CS_24*max_lambda_22 + CF_24)*(CS_24*max_lambda_22 + CF_24)) +
      ((1.0/2.0))*(-(19.0/6.0)*(CS_24*max_lambda_22 + CF_24) + ((25.0/6.0))*(CS_23*max_lambda_22 +
      CF_23))*(CS_23*max_lambda_22 + CF_23) + ((1.0/2.0))*(CS_22*max_lambda_22 +
      CF_22)*(-(31.0/6.0)*(CS_23*max_lambda_22 + CF_23) + ((5.0/3.0))*(CS_22*max_lambda_22 + CF_22) +
      ((11.0/6.0))*(CS_24*max_lambda_22 + CF_24));

    beta_1 = ((1.0/3.0))*((CS_23*max_lambda_22 + CF_23)*(CS_23*max_lambda_22 + CF_23)) +
      ((1.0/2.0))*(-(13.0/6.0)*(CS_23*max_lambda_22 + CF_23) + ((13.0/6.0))*(CS_22*max_lambda_22 +
      CF_22))*(CS_22*max_lambda_22 + CF_22) + ((1.0/2.0))*(CS_21*max_lambda_22 +
      CF_21)*(-(13.0/6.0)*(CS_22*max_lambda_22 + CF_22) + ((2.0/3.0))*(CS_21*max_lambda_22 + CF_21) +
      ((5.0/6.0))*(CS_23*max_lambda_22 + CF_23));

    beta_2 = ((5.0/6.0))*((CS_22*max_lambda_22 + CF_22)*(CS_22*max_lambda_22 + CF_22)) +
      ((1.0/2.0))*(((2.0/3.0))*(CS_20*max_lambda_22 + CF_20) + ((11.0/6.0))*(CS_22*max_lambda_22 +
      CF_22))*(CS_20*max_lambda_22 + CF_20) + ((1.0/2.0))*(CS_21*max_lambda_22 +
      CF_21)*(-(31.0/6.0)*(CS_22*max_lambda_22 + CF_22) - (19.0/6.0)*(CS_20*max_lambda_22 + CF_20) +
      ((25.0/6.0))*(CS_21*max_lambda_22 + CF_21));

    alpha_0 = 0.3 + ((3.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_0)*(1.0e-40 +
      beta_0));

   alpha_1 = 0.6 + ((3.0/5.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_1)*(1.0e-40 + beta_1));

    alpha_2 = 0.1 + ((1.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_2)*(1.0e-40 +
      beta_2));

   inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2));

   omega_0 = alpha_0*inv_alpha_sum;

   omega_1 = alpha_1*inv_alpha_sum;

   omega_2 = alpha_2*inv_alpha_sum;

    rj2 = 0.0909090909090909*fabs(-1.0 + 10*omega_2) + 0.0909090909090909*fabs(-1.0 + ((5.0/3.0))*omega_1) +
      0.0909090909090909*fabs(-1.0 + ((10.0/3.0))*omega_0);

    Recon_2 = (-(7.0/12.0)*(CS_21*max_lambda_22 + CF_21) + ((1.0/6.0))*(CS_20*max_lambda_22 + CF_20) +
      ((11.0/12.0))*(CS_22*max_lambda_22 + CF_22))*omega_2 + (-(1.0/12.0)*(CS_21*max_lambda_22 + CF_21) +
      ((1.0/6.0))*(CS_23*max_lambda_22 + CF_23) + ((5.0/12.0))*(CS_22*max_lambda_22 + CF_22))*omega_1 +
      (-(1.0/12.0)*(CS_24*max_lambda_22 + CF_24) + ((1.0/6.0))*(CS_22*max_lambda_22 + CF_22) +
      ((5.0/12.0))*(CS_23*max_lambda_22 + CF_23))*omega_0 + Recon_2;

    beta_0 = ((1.0/3.0))*((-CS_25*max_lambda_22 + CF_25)*(-CS_25*max_lambda_22 + CF_25)) +
      ((1.0/2.0))*(-(19.0/6.0)*(-CS_25*max_lambda_22 + CF_25) + ((25.0/6.0))*(-CS_24*max_lambda_22 +
      CF_24))*(-CS_24*max_lambda_22 + CF_24) + ((1.0/2.0))*(-CS_23*max_lambda_22 +
      CF_23)*(-(31.0/6.0)*(-CS_24*max_lambda_22 + CF_24) + ((5.0/3.0))*(-CS_23*max_lambda_22 + CF_23) +
      ((11.0/6.0))*(-CS_25*max_lambda_22 + CF_25));

    beta_1 = ((1.0/3.0))*((-CS_24*max_lambda_22 + CF_24)*(-CS_24*max_lambda_22 + CF_24)) +
      ((1.0/2.0))*(-(13.0/6.0)*(-CS_24*max_lambda_22 + CF_24) + ((13.0/6.0))*(-CS_23*max_lambda_22 +
      CF_23))*(-CS_23*max_lambda_22 + CF_23) + ((1.0/2.0))*(-CS_22*max_lambda_22 +
      CF_22)*(-(13.0/6.0)*(-CS_23*max_lambda_22 + CF_23) + ((2.0/3.0))*(-CS_22*max_lambda_22 + CF_22) +
      ((5.0/6.0))*(-CS_24*max_lambda_22 + CF_24));

    beta_2 = ((5.0/6.0))*((-CS_23*max_lambda_22 + CF_23)*(-CS_23*max_lambda_22 + CF_23)) +
      ((1.0/2.0))*(-(31.0/6.0)*(-CS_23*max_lambda_22 + CF_23) + ((25.0/6.0))*(-CS_22*max_lambda_22 +
      CF_22))*(-CS_22*max_lambda_22 + CF_22) + ((1.0/2.0))*(-CS_21*max_lambda_22 +
      CF_21)*(-(19.0/6.0)*(-CS_22*max_lambda_22 + CF_22) + ((2.0/3.0))*(-CS_21*max_lambda_22 + CF_21) +
      ((11.0/6.0))*(-CS_23*max_lambda_22 + CF_23));

    alpha_0 = 0.1 + ((1.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_0)*(1.0e-40 +
      beta_0));

   alpha_1 = 0.6 + ((3.0/5.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_1)*(1.0e-40 + beta_1));

    alpha_2 = 0.3 + ((3.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_2)*(1.0e-40 +
      beta_2));

   inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2));

   omega_0 = alpha_0*inv_alpha_sum;

   omega_1 = alpha_1*inv_alpha_sum;

   omega_2 = alpha_2*inv_alpha_sum;

    rj2 = fmax(rj2, 0.0909090909090909*fabs(-1.0 + 10*omega_0) + 0.0909090909090909*fabs(-1.0 + ((5.0/3.0))*omega_1) +
      0.0909090909090909*fabs(-1.0 + ((10.0/3.0))*omega_2));

    Recon_2 = (-(7.0/12.0)*(-CS_24*max_lambda_22 + CF_24) + ((1.0/6.0))*(-CS_25*max_lambda_22 + CF_25) +
      ((11.0/12.0))*(-CS_23*max_lambda_22 + CF_23))*omega_0 + (-(1.0/12.0)*(-CS_21*max_lambda_22 + CF_21) +
      ((1.0/6.0))*(-CS_23*max_lambda_22 + CF_23) + ((5.0/12.0))*(-CS_22*max_lambda_22 + CF_22))*omega_2 +
      (-(1.0/12.0)*(-CS_24*max_lambda_22 + CF_24) + ((1.0/6.0))*(-CS_22*max_lambda_22 + CF_22) +
      ((5.0/12.0))*(-CS_23*max_lambda_22 + CF_23))*omega_1 + Recon_2;

   Recon_0 = (-(1.0/60.0)*(-8*CF_01 - 8*CF_04 + 37*CF_02 + 37*CF_03 + CF_00 + CF_05) + Recon_0)*rj0;

   Recon_1 = (-(1.0/60.0)*(-8*CF_11 - 8*CF_14 + 37*CF_12 + 37*CF_13 + CF_10 + CF_15) + Recon_1)*rj1;

   Recon_2 = (-(1.0/60.0)*(-8*CF_21 - 8*CF_24 + 37*CF_22 + 37*CF_23 + CF_20 + CF_25) + Recon_2)*rj2;

   wk0_B0(0) = Recon_0 + Recon_1 + Recon_2;

   wk1_B0(0) = (-AVG_0_a + AVG_0_u0)*Recon_0 + (AVG_0_a + AVG_0_u0)*Recon_2 + AVG_0_u0*Recon_1;

    wk2_B0(0) = (((1.0/2.0))*(AVG_0_u0*AVG_0_u0) + (AVG_0_a*AVG_0_a)*invgamma_m1 + AVG_0_a*AVG_0_u0)*Recon_2 +
      (((1.0/2.0))*(AVG_0_u0*AVG_0_u0) + (AVG_0_a*AVG_0_a)*invgamma_m1 - AVG_0_a*AVG_0_u0)*Recon_0 +
      ((1.0/2.0))*(AVG_0_u0*AVG_0_u0)*Recon_1;

}

 void opensbliblock00Kernel004(const ACC<double> &wk0_B0, const ACC<double> &wk1_B0, const ACC<double> &wk2_B0,
ACC<double> &rhoE_B0, ACC<double> &rho_B0, ACC<double> &rhou0_B0, const int *idx)
{
   double Grid_0 = 0.0;
   double Wall = 0.0;
   Grid_0 = idx[0];

   Wall = 1;

   rho_B0(0) = -(-wk0_B0(-1) + wk0_B0(0))*dt*inv_rfact0_block0 + rho_B0(0);

   rhou0_B0(0) = -(-wk1_B0(-1) + wk1_B0(0))*dt*inv_rfact0_block0 + rhou0_B0(0);

   rhoE_B0(0) = -(-wk2_B0(-1) + wk2_B0(0))*dt*inv_rfact0_block0 + rhoE_B0(0);

}

#endif
