//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel003(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8) {
#else
void ops_par_loop_opensbliblock00Kernel003_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[9] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,9,range,20)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,20,"opensbliblock00Kernel003");
    block->instance->OPS_kernels[20].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "opensbliblock00Kernel003");
  #endif


  //compute locally allocated range for the sub-block
  int start[1];
  int end[1];
  #if defined(OPS_MPI) && !defined(OPS_LAZY)
  int arg_idx[1];
  #endif
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<1; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 9,block, range, start, end, arg_idx) < 0) return;
  #endif

  int start0 = start[0];
  int end0 = end[0];


  //initialize global variable with the dimension of dats

  //set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset;
  double * __restrict__ a_B0_p = (double *)(args[0].data_d + base0);

  int base1 = args[1].dat->base_offset;
  double * __restrict__ p_B0_p = (double *)(args[1].data_d + base1);

  int base2 = args[2].dat->base_offset;
  double * __restrict__ rhoE_B0_p = (double *)(args[2].data_d + base2);

  int base3 = args[3].dat->base_offset;
  double * __restrict__ rho_B0_p = (double *)(args[3].data_d + base3);

  int base4 = args[4].dat->base_offset;
  double * __restrict__ rhou0_B0_p = (double *)(args[4].data_d + base4);

  int base5 = args[5].dat->base_offset;
  double * __restrict__ u0_B0_p = (double *)(args[5].data_d + base5);

  int base6 = args[6].dat->base_offset;
  double * __restrict__ wk0_B0_p = (double *)(args[6].data_d + base6);

  int base7 = args[7].dat->base_offset;
  double * __restrict__ wk1_B0_p = (double *)(args[7].data_d + base7);

  int base8 = args[8].dat->base_offset;
  double * __restrict__ wk2_B0_p = (double *)(args[8].data_d + base8);



  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_device(args, 9);
  ops_halo_exchanges(args,9,range);
  ops_H_D_exchanges_device(args, 9);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[20].mpi_time += __t1-__t2;
  }

  #pragma omp target teams distribute parallel for collapse(1)
  for ( int n_x=start0; n_x<end0; n_x++ ){
    const ACC<double> a_B0(a_B0_p + n_x*1);
    const ACC<double> p_B0(p_B0_p + n_x*1);
    const ACC<double> rhoE_B0(rhoE_B0_p + n_x*1);
    const ACC<double> rho_B0(rho_B0_p + n_x*1);
    const ACC<double> rhou0_B0(rhou0_B0_p + n_x*1);
    const ACC<double> u0_B0(u0_B0_p + n_x*1);
    ACC<double> wk0_B0(wk0_B0_p + n_x*1);
    ACC<double> wk1_B0(wk1_B0_p + n_x*1);
    ACC<double> wk2_B0(wk2_B0_p + n_x*1);
    
   double AVG_0_0_LEV_00 = 0.0;
   double AVG_0_0_LEV_01 = 0.0;
   double AVG_0_0_LEV_02 = 0.0;
   double AVG_0_0_LEV_10 = 0.0;
   double AVG_0_0_LEV_11 = 0.0;
   double AVG_0_0_LEV_12 = 0.0;
   double AVG_0_0_LEV_20 = 0.0;
   double AVG_0_0_LEV_21 = 0.0;
   double AVG_0_0_LEV_22 = 0.0;
   double AVG_0_a = 0.0;
   double AVG_0_inv_rho = 0.0;
   double AVG_0_rho = 0.0;
   double AVG_0_u0 = 0.0;
   double CF_00 = 0.0;
   double CF_01 = 0.0;
   double CF_02 = 0.0;
   double CF_03 = 0.0;
   double CF_04 = 0.0;
   double CF_05 = 0.0;
   double CF_10 = 0.0;
   double CF_11 = 0.0;
   double CF_12 = 0.0;
   double CF_13 = 0.0;
   double CF_14 = 0.0;
   double CF_15 = 0.0;
   double CF_20 = 0.0;
   double CF_21 = 0.0;
   double CF_22 = 0.0;
   double CF_23 = 0.0;
   double CF_24 = 0.0;
   double CF_25 = 0.0;
   double CS_00 = 0.0;
   double CS_01 = 0.0;
   double CS_02 = 0.0;
   double CS_03 = 0.0;
   double CS_04 = 0.0;
   double CS_05 = 0.0;
   double CS_10 = 0.0;
   double CS_11 = 0.0;
   double CS_12 = 0.0;
   double CS_13 = 0.0;
   double CS_14 = 0.0;
   double CS_15 = 0.0;
   double CS_20 = 0.0;
   double CS_21 = 0.0;
   double CS_22 = 0.0;
   double CS_23 = 0.0;
   double CS_24 = 0.0;
   double CS_25 = 0.0;
   double Recon_0 = 0.0;
   double Recon_1 = 0.0;
   double Recon_2 = 0.0;
   double alpha_0 = 0.0;
   double alpha_1 = 0.0;
   double alpha_2 = 0.0;
   double beta_0 = 0.0;
   double beta_1 = 0.0;
   double beta_2 = 0.0;
   double inv_AVG_a = 0.0;
   double inv_AVG_rho = 0.0;
   double inv_alpha_sum = 0.0;
   double max_lambda_00 = 0.0;
   double max_lambda_11 = 0.0;
   double max_lambda_22 = 0.0;
   double omega_0 = 0.0;
   double omega_1 = 0.0;
   double omega_2 = 0.0;
   double rj0 = 0.0;
   double rj1 = 0.0;
   double rj2 = 0.0;
   AVG_0_rho = sqrt(rho_B0(0)*rho_B0(1));

   AVG_0_inv_rho = 1.0/((sqrt(rho_B0(0)) + sqrt(rho_B0(1))));

   AVG_0_u0 = (sqrt(rho_B0(0))*u0_B0(0) + sqrt(rho_B0(1))*u0_B0(1))*AVG_0_inv_rho;

    AVG_0_a = sqrt((-(1.0/2.0)*(AVG_0_u0*AVG_0_u0) + ((p_B0(0) + rhoE_B0(0))/sqrt(rho_B0(0)) + (p_B0(1) +
      rhoE_B0(1))/sqrt(rho_B0(1)))*AVG_0_inv_rho)*gamma_m1);

   inv_AVG_a = 1.0/(AVG_0_a);

   inv_AVG_rho = 1.0/(AVG_0_rho);

    AVG_0_0_LEV_00 = ((1.0/4.0))*(2 - (inv_AVG_a*inv_AVG_a)*AVG_0_a*AVG_0_u0 +
      (inv_AVG_a*inv_AVG_a)*gama*AVG_0_a*AVG_0_u0)*AVG_0_u0*inv_AVG_a;

    AVG_0_0_LEV_01 = -(1.0/2.0)*(1 - (inv_AVG_a*inv_AVG_a)*AVG_0_a*AVG_0_u0 +
      (inv_AVG_a*inv_AVG_a)*gama*AVG_0_a*AVG_0_u0)*inv_AVG_a;

   AVG_0_0_LEV_02 = ((1.0/2.0))*(inv_AVG_a*inv_AVG_a)*gamma_m1;

    AVG_0_0_LEV_10 = -(1.0/2.0)*(-2 - (AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a) +
      (AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*gama);

   AVG_0_0_LEV_11 = (inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_0_u0;

   AVG_0_0_LEV_12 = -(inv_AVG_a*inv_AVG_a)*gamma_m1;

    AVG_0_0_LEV_20 = ((1.0/4.0))*(-2 - (inv_AVG_a*inv_AVG_a)*AVG_0_a*AVG_0_u0 +
      (inv_AVG_a*inv_AVG_a)*gama*AVG_0_a*AVG_0_u0)*AVG_0_u0*inv_AVG_a;

    AVG_0_0_LEV_21 = -(1.0/2.0)*(-1 - (inv_AVG_a*inv_AVG_a)*AVG_0_a*AVG_0_u0 +
      (inv_AVG_a*inv_AVG_a)*gama*AVG_0_a*AVG_0_u0)*inv_AVG_a;

   AVG_0_0_LEV_22 = ((1.0/2.0))*(inv_AVG_a*inv_AVG_a)*gamma_m1;

    CF_00 = p_B0(-2)*AVG_0_0_LEV_01 + rhou0_B0(-2)*AVG_0_0_LEV_00 + p_B0(-2)*u0_B0(-2)*AVG_0_0_LEV_02 +
      u0_B0(-2)*rhoE_B0(-2)*AVG_0_0_LEV_02 + u0_B0(-2)*rhou0_B0(-2)*AVG_0_0_LEV_01;

    CF_10 = p_B0(-2)*AVG_0_0_LEV_11 + rhou0_B0(-2)*AVG_0_0_LEV_10 + p_B0(-2)*u0_B0(-2)*AVG_0_0_LEV_12 +
      u0_B0(-2)*rhoE_B0(-2)*AVG_0_0_LEV_12 + u0_B0(-2)*rhou0_B0(-2)*AVG_0_0_LEV_11;

    CF_20 = p_B0(-2)*AVG_0_0_LEV_21 + rhou0_B0(-2)*AVG_0_0_LEV_20 + p_B0(-2)*u0_B0(-2)*AVG_0_0_LEV_22 +
      u0_B0(-2)*rhoE_B0(-2)*AVG_0_0_LEV_22 + u0_B0(-2)*rhou0_B0(-2)*AVG_0_0_LEV_21;

   CS_00 = rho_B0(-2)*AVG_0_0_LEV_00 + rhoE_B0(-2)*AVG_0_0_LEV_02 + rhou0_B0(-2)*AVG_0_0_LEV_01;

   CS_10 = rho_B0(-2)*AVG_0_0_LEV_10 + rhoE_B0(-2)*AVG_0_0_LEV_12 + rhou0_B0(-2)*AVG_0_0_LEV_11;

   CS_20 = rho_B0(-2)*AVG_0_0_LEV_20 + rhoE_B0(-2)*AVG_0_0_LEV_22 + rhou0_B0(-2)*AVG_0_0_LEV_21;

    CF_01 = p_B0(-1)*AVG_0_0_LEV_01 + rhou0_B0(-1)*AVG_0_0_LEV_00 + p_B0(-1)*u0_B0(-1)*AVG_0_0_LEV_02 +
      u0_B0(-1)*rhoE_B0(-1)*AVG_0_0_LEV_02 + u0_B0(-1)*rhou0_B0(-1)*AVG_0_0_LEV_01;

    CF_11 = p_B0(-1)*AVG_0_0_LEV_11 + rhou0_B0(-1)*AVG_0_0_LEV_10 + p_B0(-1)*u0_B0(-1)*AVG_0_0_LEV_12 +
      u0_B0(-1)*rhoE_B0(-1)*AVG_0_0_LEV_12 + u0_B0(-1)*rhou0_B0(-1)*AVG_0_0_LEV_11;

    CF_21 = p_B0(-1)*AVG_0_0_LEV_21 + rhou0_B0(-1)*AVG_0_0_LEV_20 + p_B0(-1)*u0_B0(-1)*AVG_0_0_LEV_22 +
      u0_B0(-1)*rhoE_B0(-1)*AVG_0_0_LEV_22 + u0_B0(-1)*rhou0_B0(-1)*AVG_0_0_LEV_21;

   CS_01 = rho_B0(-1)*AVG_0_0_LEV_00 + rhoE_B0(-1)*AVG_0_0_LEV_02 + rhou0_B0(-1)*AVG_0_0_LEV_01;

   CS_11 = rho_B0(-1)*AVG_0_0_LEV_10 + rhoE_B0(-1)*AVG_0_0_LEV_12 + rhou0_B0(-1)*AVG_0_0_LEV_11;

   CS_21 = rho_B0(-1)*AVG_0_0_LEV_20 + rhoE_B0(-1)*AVG_0_0_LEV_22 + rhou0_B0(-1)*AVG_0_0_LEV_21;

    CF_02 = p_B0(0)*AVG_0_0_LEV_01 + rhou0_B0(0)*AVG_0_0_LEV_00 + p_B0(0)*u0_B0(0)*AVG_0_0_LEV_02 +
      u0_B0(0)*rhoE_B0(0)*AVG_0_0_LEV_02 + u0_B0(0)*rhou0_B0(0)*AVG_0_0_LEV_01;

    CF_12 = p_B0(0)*AVG_0_0_LEV_11 + rhou0_B0(0)*AVG_0_0_LEV_10 + p_B0(0)*u0_B0(0)*AVG_0_0_LEV_12 +
      u0_B0(0)*rhoE_B0(0)*AVG_0_0_LEV_12 + u0_B0(0)*rhou0_B0(0)*AVG_0_0_LEV_11;

    CF_22 = p_B0(0)*AVG_0_0_LEV_21 + rhou0_B0(0)*AVG_0_0_LEV_20 + p_B0(0)*u0_B0(0)*AVG_0_0_LEV_22 +
      u0_B0(0)*rhoE_B0(0)*AVG_0_0_LEV_22 + u0_B0(0)*rhou0_B0(0)*AVG_0_0_LEV_21;

   CS_02 = rho_B0(0)*AVG_0_0_LEV_00 + rhoE_B0(0)*AVG_0_0_LEV_02 + rhou0_B0(0)*AVG_0_0_LEV_01;

   CS_12 = rho_B0(0)*AVG_0_0_LEV_10 + rhoE_B0(0)*AVG_0_0_LEV_12 + rhou0_B0(0)*AVG_0_0_LEV_11;

   CS_22 = rho_B0(0)*AVG_0_0_LEV_20 + rhoE_B0(0)*AVG_0_0_LEV_22 + rhou0_B0(0)*AVG_0_0_LEV_21;

    CF_03 = p_B0(1)*AVG_0_0_LEV_01 + rhou0_B0(1)*AVG_0_0_LEV_00 + p_B0(1)*u0_B0(1)*AVG_0_0_LEV_02 +
      u0_B0(1)*rhoE_B0(1)*AVG_0_0_LEV_02 + u0_B0(1)*rhou0_B0(1)*AVG_0_0_LEV_01;

    CF_13 = p_B0(1)*AVG_0_0_LEV_11 + rhou0_B0(1)*AVG_0_0_LEV_10 + p_B0(1)*u0_B0(1)*AVG_0_0_LEV_12 +
      u0_B0(1)*rhoE_B0(1)*AVG_0_0_LEV_12 + u0_B0(1)*rhou0_B0(1)*AVG_0_0_LEV_11;

    CF_23 = p_B0(1)*AVG_0_0_LEV_21 + rhou0_B0(1)*AVG_0_0_LEV_20 + p_B0(1)*u0_B0(1)*AVG_0_0_LEV_22 +
      u0_B0(1)*rhoE_B0(1)*AVG_0_0_LEV_22 + u0_B0(1)*rhou0_B0(1)*AVG_0_0_LEV_21;

   CS_03 = rho_B0(1)*AVG_0_0_LEV_00 + rhoE_B0(1)*AVG_0_0_LEV_02 + rhou0_B0(1)*AVG_0_0_LEV_01;

   CS_13 = rho_B0(1)*AVG_0_0_LEV_10 + rhoE_B0(1)*AVG_0_0_LEV_12 + rhou0_B0(1)*AVG_0_0_LEV_11;

   CS_23 = rho_B0(1)*AVG_0_0_LEV_20 + rhoE_B0(1)*AVG_0_0_LEV_22 + rhou0_B0(1)*AVG_0_0_LEV_21;

    CF_04 = p_B0(2)*AVG_0_0_LEV_01 + rhou0_B0(2)*AVG_0_0_LEV_00 + p_B0(2)*u0_B0(2)*AVG_0_0_LEV_02 +
      u0_B0(2)*rhoE_B0(2)*AVG_0_0_LEV_02 + u0_B0(2)*rhou0_B0(2)*AVG_0_0_LEV_01;

    CF_14 = p_B0(2)*AVG_0_0_LEV_11 + rhou0_B0(2)*AVG_0_0_LEV_10 + p_B0(2)*u0_B0(2)*AVG_0_0_LEV_12 +
      u0_B0(2)*rhoE_B0(2)*AVG_0_0_LEV_12 + u0_B0(2)*rhou0_B0(2)*AVG_0_0_LEV_11;

    CF_24 = p_B0(2)*AVG_0_0_LEV_21 + rhou0_B0(2)*AVG_0_0_LEV_20 + p_B0(2)*u0_B0(2)*AVG_0_0_LEV_22 +
      u0_B0(2)*rhoE_B0(2)*AVG_0_0_LEV_22 + u0_B0(2)*rhou0_B0(2)*AVG_0_0_LEV_21;

   CS_04 = rho_B0(2)*AVG_0_0_LEV_00 + rhoE_B0(2)*AVG_0_0_LEV_02 + rhou0_B0(2)*AVG_0_0_LEV_01;

   CS_14 = rho_B0(2)*AVG_0_0_LEV_10 + rhoE_B0(2)*AVG_0_0_LEV_12 + rhou0_B0(2)*AVG_0_0_LEV_11;

   CS_24 = rho_B0(2)*AVG_0_0_LEV_20 + rhoE_B0(2)*AVG_0_0_LEV_22 + rhou0_B0(2)*AVG_0_0_LEV_21;

    CF_05 = p_B0(3)*AVG_0_0_LEV_01 + rhou0_B0(3)*AVG_0_0_LEV_00 + p_B0(3)*u0_B0(3)*AVG_0_0_LEV_02 +
      u0_B0(3)*rhoE_B0(3)*AVG_0_0_LEV_02 + u0_B0(3)*rhou0_B0(3)*AVG_0_0_LEV_01;

    CF_15 = p_B0(3)*AVG_0_0_LEV_11 + rhou0_B0(3)*AVG_0_0_LEV_10 + p_B0(3)*u0_B0(3)*AVG_0_0_LEV_12 +
      u0_B0(3)*rhoE_B0(3)*AVG_0_0_LEV_12 + u0_B0(3)*rhou0_B0(3)*AVG_0_0_LEV_11;

    CF_25 = p_B0(3)*AVG_0_0_LEV_21 + rhou0_B0(3)*AVG_0_0_LEV_20 + p_B0(3)*u0_B0(3)*AVG_0_0_LEV_22 +
      u0_B0(3)*rhoE_B0(3)*AVG_0_0_LEV_22 + u0_B0(3)*rhou0_B0(3)*AVG_0_0_LEV_21;

   CS_05 = rho_B0(3)*AVG_0_0_LEV_00 + rhoE_B0(3)*AVG_0_0_LEV_02 + rhou0_B0(3)*AVG_0_0_LEV_01;

   CS_15 = rho_B0(3)*AVG_0_0_LEV_10 + rhoE_B0(3)*AVG_0_0_LEV_12 + rhou0_B0(3)*AVG_0_0_LEV_11;

   CS_25 = rho_B0(3)*AVG_0_0_LEV_20 + rhoE_B0(3)*AVG_0_0_LEV_22 + rhou0_B0(3)*AVG_0_0_LEV_21;

   max_lambda_00 = shock_filter_control*fmax(fabs(-u0_B0(0) + a_B0(0)), fabs(-u0_B0(1) + a_B0(1)));

   max_lambda_11 = shock_filter_control*fmax(fabs(u0_B0(0)), fabs(u0_B0(1)));

   max_lambda_22 = shock_filter_control*fmax(fabs(a_B0(0) + u0_B0(0)), fabs(a_B0(1) + u0_B0(1)));

    beta_0 = ((1.0/3.0))*((CS_04*max_lambda_00 + CF_04)*(CS_04*max_lambda_00 + CF_04)) +
      ((1.0/2.0))*(-(19.0/6.0)*(CS_04*max_lambda_00 + CF_04) + ((25.0/6.0))*(CS_03*max_lambda_00 +
      CF_03))*(CS_03*max_lambda_00 + CF_03) + ((1.0/2.0))*(CS_02*max_lambda_00 +
      CF_02)*(-(31.0/6.0)*(CS_03*max_lambda_00 + CF_03) + ((5.0/3.0))*(CS_02*max_lambda_00 + CF_02) +
      ((11.0/6.0))*(CS_04*max_lambda_00 + CF_04));

    beta_1 = ((1.0/3.0))*((CS_03*max_lambda_00 + CF_03)*(CS_03*max_lambda_00 + CF_03)) +
      ((1.0/2.0))*(-(13.0/6.0)*(CS_03*max_lambda_00 + CF_03) + ((13.0/6.0))*(CS_02*max_lambda_00 +
      CF_02))*(CS_02*max_lambda_00 + CF_02) + ((1.0/2.0))*(CS_01*max_lambda_00 +
      CF_01)*(-(13.0/6.0)*(CS_02*max_lambda_00 + CF_02) + ((2.0/3.0))*(CS_01*max_lambda_00 + CF_01) +
      ((5.0/6.0))*(CS_03*max_lambda_00 + CF_03));

    beta_2 = ((5.0/6.0))*((CS_02*max_lambda_00 + CF_02)*(CS_02*max_lambda_00 + CF_02)) +
      ((1.0/2.0))*(((2.0/3.0))*(CS_00*max_lambda_00 + CF_00) + ((11.0/6.0))*(CS_02*max_lambda_00 +
      CF_02))*(CS_00*max_lambda_00 + CF_00) + ((1.0/2.0))*(CS_01*max_lambda_00 +
      CF_01)*(-(31.0/6.0)*(CS_02*max_lambda_00 + CF_02) - (19.0/6.0)*(CS_00*max_lambda_00 + CF_00) +
      ((25.0/6.0))*(CS_01*max_lambda_00 + CF_01));

    alpha_0 = 0.3 + ((3.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_0)*(1.0e-40 +
      beta_0));

   alpha_1 = 0.6 + ((3.0/5.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_1)*(1.0e-40 + beta_1));

    alpha_2 = 0.1 + ((1.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_2)*(1.0e-40 +
      beta_2));

   inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2));

   omega_0 = alpha_0*inv_alpha_sum;

   omega_1 = alpha_1*inv_alpha_sum;

   omega_2 = alpha_2*inv_alpha_sum;

    rj0 = 0.0909090909090909*fabs(-1.0 + 10*omega_2) + 0.0909090909090909*fabs(-1.0 + ((5.0/3.0))*omega_1) +
      0.0909090909090909*fabs(-1.0 + ((10.0/3.0))*omega_0);

    Recon_0 = (-(7.0/12.0)*(CS_01*max_lambda_00 + CF_01) + ((1.0/6.0))*(CS_00*max_lambda_00 + CF_00) +
      ((11.0/12.0))*(CS_02*max_lambda_00 + CF_02))*omega_2 + (-(1.0/12.0)*(CS_01*max_lambda_00 + CF_01) +
      ((1.0/6.0))*(CS_03*max_lambda_00 + CF_03) + ((5.0/12.0))*(CS_02*max_lambda_00 + CF_02))*omega_1 +
      (-(1.0/12.0)*(CS_04*max_lambda_00 + CF_04) + ((1.0/6.0))*(CS_02*max_lambda_00 + CF_02) +
      ((5.0/12.0))*(CS_03*max_lambda_00 + CF_03))*omega_0 + Recon_0;

    beta_0 = ((1.0/3.0))*((-CS_05*max_lambda_00 + CF_05)*(-CS_05*max_lambda_00 + CF_05)) +
      ((1.0/2.0))*(-(19.0/6.0)*(-CS_05*max_lambda_00 + CF_05) + ((25.0/6.0))*(-CS_04*max_lambda_00 +
      CF_04))*(-CS_04*max_lambda_00 + CF_04) + ((1.0/2.0))*(-CS_03*max_lambda_00 +
      CF_03)*(-(31.0/6.0)*(-CS_04*max_lambda_00 + CF_04) + ((5.0/3.0))*(-CS_03*max_lambda_00 + CF_03) +
      ((11.0/6.0))*(-CS_05*max_lambda_00 + CF_05));

    beta_1 = ((1.0/3.0))*((-CS_04*max_lambda_00 + CF_04)*(-CS_04*max_lambda_00 + CF_04)) +
      ((1.0/2.0))*(-(13.0/6.0)*(-CS_04*max_lambda_00 + CF_04) + ((13.0/6.0))*(-CS_03*max_lambda_00 +
      CF_03))*(-CS_03*max_lambda_00 + CF_03) + ((1.0/2.0))*(-CS_02*max_lambda_00 +
      CF_02)*(-(13.0/6.0)*(-CS_03*max_lambda_00 + CF_03) + ((2.0/3.0))*(-CS_02*max_lambda_00 + CF_02) +
      ((5.0/6.0))*(-CS_04*max_lambda_00 + CF_04));

    beta_2 = ((5.0/6.0))*((-CS_03*max_lambda_00 + CF_03)*(-CS_03*max_lambda_00 + CF_03)) +
      ((1.0/2.0))*(-(31.0/6.0)*(-CS_03*max_lambda_00 + CF_03) + ((25.0/6.0))*(-CS_02*max_lambda_00 +
      CF_02))*(-CS_02*max_lambda_00 + CF_02) + ((1.0/2.0))*(-CS_01*max_lambda_00 +
      CF_01)*(-(19.0/6.0)*(-CS_02*max_lambda_00 + CF_02) + ((2.0/3.0))*(-CS_01*max_lambda_00 + CF_01) +
      ((11.0/6.0))*(-CS_03*max_lambda_00 + CF_03));

    alpha_0 = 0.1 + ((1.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_0)*(1.0e-40 +
      beta_0));

   alpha_1 = 0.6 + ((3.0/5.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_1)*(1.0e-40 + beta_1));

    alpha_2 = 0.3 + ((3.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_2)*(1.0e-40 +
      beta_2));

   inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2));

   omega_0 = alpha_0*inv_alpha_sum;

   omega_1 = alpha_1*inv_alpha_sum;

   omega_2 = alpha_2*inv_alpha_sum;

    rj0 = fmax(rj0, 0.0909090909090909*fabs(-1.0 + 10*omega_0) + 0.0909090909090909*fabs(-1.0 + ((5.0/3.0))*omega_1) +
      0.0909090909090909*fabs(-1.0 + ((10.0/3.0))*omega_2));

    Recon_0 = (-(7.0/12.0)*(-CS_04*max_lambda_00 + CF_04) + ((1.0/6.0))*(-CS_05*max_lambda_00 + CF_05) +
      ((11.0/12.0))*(-CS_03*max_lambda_00 + CF_03))*omega_0 + (-(1.0/12.0)*(-CS_01*max_lambda_00 + CF_01) +
      ((1.0/6.0))*(-CS_03*max_lambda_00 + CF_03) + ((5.0/12.0))*(-CS_02*max_lambda_00 + CF_02))*omega_2 +
      (-(1.0/12.0)*(-CS_04*max_lambda_00 + CF_04) + ((1.0/6.0))*(-CS_02*max_lambda_00 + CF_02) +
      ((5.0/12.0))*(-CS_03*max_lambda_00 + CF_03))*omega_1 + Recon_0;

    beta_0 = ((1.0/3.0))*((CS_14*max_lambda_11 + CF_14)*(CS_14*max_lambda_11 + CF_14)) +
      ((1.0/2.0))*(-(19.0/6.0)*(CS_14*max_lambda_11 + CF_14) + ((25.0/6.0))*(CS_13*max_lambda_11 +
      CF_13))*(CS_13*max_lambda_11 + CF_13) + ((1.0/2.0))*(CS_12*max_lambda_11 +
      CF_12)*(-(31.0/6.0)*(CS_13*max_lambda_11 + CF_13) + ((5.0/3.0))*(CS_12*max_lambda_11 + CF_12) +
      ((11.0/6.0))*(CS_14*max_lambda_11 + CF_14));

    beta_1 = ((1.0/3.0))*((CS_13*max_lambda_11 + CF_13)*(CS_13*max_lambda_11 + CF_13)) +
      ((1.0/2.0))*(-(13.0/6.0)*(CS_13*max_lambda_11 + CF_13) + ((13.0/6.0))*(CS_12*max_lambda_11 +
      CF_12))*(CS_12*max_lambda_11 + CF_12) + ((1.0/2.0))*(CS_11*max_lambda_11 +
      CF_11)*(-(13.0/6.0)*(CS_12*max_lambda_11 + CF_12) + ((2.0/3.0))*(CS_11*max_lambda_11 + CF_11) +
      ((5.0/6.0))*(CS_13*max_lambda_11 + CF_13));

    beta_2 = ((5.0/6.0))*((CS_12*max_lambda_11 + CF_12)*(CS_12*max_lambda_11 + CF_12)) +
      ((1.0/2.0))*(((2.0/3.0))*(CS_10*max_lambda_11 + CF_10) + ((11.0/6.0))*(CS_12*max_lambda_11 +
      CF_12))*(CS_10*max_lambda_11 + CF_10) + ((1.0/2.0))*(CS_11*max_lambda_11 +
      CF_11)*(-(31.0/6.0)*(CS_12*max_lambda_11 + CF_12) - (19.0/6.0)*(CS_10*max_lambda_11 + CF_10) +
      ((25.0/6.0))*(CS_11*max_lambda_11 + CF_11));

    alpha_0 = 0.3 + ((3.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_0)*(1.0e-40 +
      beta_0));

   alpha_1 = 0.6 + ((3.0/5.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_1)*(1.0e-40 + beta_1));

    alpha_2 = 0.1 + ((1.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_2)*(1.0e-40 +
      beta_2));

   inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2));

   omega_0 = alpha_0*inv_alpha_sum;

   omega_1 = alpha_1*inv_alpha_sum;

   omega_2 = alpha_2*inv_alpha_sum;

    rj1 = 0.0909090909090909*fabs(-1.0 + 10*omega_2) + 0.0909090909090909*fabs(-1.0 + ((5.0/3.0))*omega_1) +
      0.0909090909090909*fabs(-1.0 + ((10.0/3.0))*omega_0);

    Recon_1 = (-(7.0/12.0)*(CS_11*max_lambda_11 + CF_11) + ((1.0/6.0))*(CS_10*max_lambda_11 + CF_10) +
      ((11.0/12.0))*(CS_12*max_lambda_11 + CF_12))*omega_2 + (-(1.0/12.0)*(CS_11*max_lambda_11 + CF_11) +
      ((1.0/6.0))*(CS_13*max_lambda_11 + CF_13) + ((5.0/12.0))*(CS_12*max_lambda_11 + CF_12))*omega_1 +
      (-(1.0/12.0)*(CS_14*max_lambda_11 + CF_14) + ((1.0/6.0))*(CS_12*max_lambda_11 + CF_12) +
      ((5.0/12.0))*(CS_13*max_lambda_11 + CF_13))*omega_0 + Recon_1;

    beta_0 = ((1.0/3.0))*((-CS_15*max_lambda_11 + CF_15)*(-CS_15*max_lambda_11 + CF_15)) +
      ((1.0/2.0))*(-(19.0/6.0)*(-CS_15*max_lambda_11 + CF_15) + ((25.0/6.0))*(-CS_14*max_lambda_11 +
      CF_14))*(-CS_14*max_lambda_11 + CF_14) + ((1.0/2.0))*(-CS_13*max_lambda_11 +
      CF_13)*(-(31.0/6.0)*(-CS_14*max_lambda_11 + CF_14) + ((5.0/3.0))*(-CS_13*max_lambda_11 + CF_13) +
      ((11.0/6.0))*(-CS_15*max_lambda_11 + CF_15));

    beta_1 = ((1.0/3.0))*((-CS_14*max_lambda_11 + CF_14)*(-CS_14*max_lambda_11 + CF_14)) +
      ((1.0/2.0))*(-(13.0/6.0)*(-CS_14*max_lambda_11 + CF_14) + ((13.0/6.0))*(-CS_13*max_lambda_11 +
      CF_13))*(-CS_13*max_lambda_11 + CF_13) + ((1.0/2.0))*(-CS_12*max_lambda_11 +
      CF_12)*(-(13.0/6.0)*(-CS_13*max_lambda_11 + CF_13) + ((2.0/3.0))*(-CS_12*max_lambda_11 + CF_12) +
      ((5.0/6.0))*(-CS_14*max_lambda_11 + CF_14));

    beta_2 = ((5.0/6.0))*((-CS_13*max_lambda_11 + CF_13)*(-CS_13*max_lambda_11 + CF_13)) +
      ((1.0/2.0))*(-(31.0/6.0)*(-CS_13*max_lambda_11 + CF_13) + ((25.0/6.0))*(-CS_12*max_lambda_11 +
      CF_12))*(-CS_12*max_lambda_11 + CF_12) + ((1.0/2.0))*(-CS_11*max_lambda_11 +
      CF_11)*(-(19.0/6.0)*(-CS_12*max_lambda_11 + CF_12) + ((2.0/3.0))*(-CS_11*max_lambda_11 + CF_11) +
      ((11.0/6.0))*(-CS_13*max_lambda_11 + CF_13));

    alpha_0 = 0.1 + ((1.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_0)*(1.0e-40 +
      beta_0));

   alpha_1 = 0.6 + ((3.0/5.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_1)*(1.0e-40 + beta_1));

    alpha_2 = 0.3 + ((3.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_2)*(1.0e-40 +
      beta_2));

   inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2));

   omega_0 = alpha_0*inv_alpha_sum;

   omega_1 = alpha_1*inv_alpha_sum;

   omega_2 = alpha_2*inv_alpha_sum;

    rj1 = fmax(rj1, 0.0909090909090909*fabs(-1.0 + 10*omega_0) + 0.0909090909090909*fabs(-1.0 + ((5.0/3.0))*omega_1) +
      0.0909090909090909*fabs(-1.0 + ((10.0/3.0))*omega_2));

    Recon_1 = (-(7.0/12.0)*(-CS_14*max_lambda_11 + CF_14) + ((1.0/6.0))*(-CS_15*max_lambda_11 + CF_15) +
      ((11.0/12.0))*(-CS_13*max_lambda_11 + CF_13))*omega_0 + (-(1.0/12.0)*(-CS_11*max_lambda_11 + CF_11) +
      ((1.0/6.0))*(-CS_13*max_lambda_11 + CF_13) + ((5.0/12.0))*(-CS_12*max_lambda_11 + CF_12))*omega_2 +
      (-(1.0/12.0)*(-CS_14*max_lambda_11 + CF_14) + ((1.0/6.0))*(-CS_12*max_lambda_11 + CF_12) +
      ((5.0/12.0))*(-CS_13*max_lambda_11 + CF_13))*omega_1 + Recon_1;

    beta_0 = ((1.0/3.0))*((CS_24*max_lambda_22 + CF_24)*(CS_24*max_lambda_22 + CF_24)) +
      ((1.0/2.0))*(-(19.0/6.0)*(CS_24*max_lambda_22 + CF_24) + ((25.0/6.0))*(CS_23*max_lambda_22 +
      CF_23))*(CS_23*max_lambda_22 + CF_23) + ((1.0/2.0))*(CS_22*max_lambda_22 +
      CF_22)*(-(31.0/6.0)*(CS_23*max_lambda_22 + CF_23) + ((5.0/3.0))*(CS_22*max_lambda_22 + CF_22) +
      ((11.0/6.0))*(CS_24*max_lambda_22 + CF_24));

    beta_1 = ((1.0/3.0))*((CS_23*max_lambda_22 + CF_23)*(CS_23*max_lambda_22 + CF_23)) +
      ((1.0/2.0))*(-(13.0/6.0)*(CS_23*max_lambda_22 + CF_23) + ((13.0/6.0))*(CS_22*max_lambda_22 +
      CF_22))*(CS_22*max_lambda_22 + CF_22) + ((1.0/2.0))*(CS_21*max_lambda_22 +
      CF_21)*(-(13.0/6.0)*(CS_22*max_lambda_22 + CF_22) + ((2.0/3.0))*(CS_21*max_lambda_22 + CF_21) +
      ((5.0/6.0))*(CS_23*max_lambda_22 + CF_23));

    beta_2 = ((5.0/6.0))*((CS_22*max_lambda_22 + CF_22)*(CS_22*max_lambda_22 + CF_22)) +
      ((1.0/2.0))*(((2.0/3.0))*(CS_20*max_lambda_22 + CF_20) + ((11.0/6.0))*(CS_22*max_lambda_22 +
      CF_22))*(CS_20*max_lambda_22 + CF_20) + ((1.0/2.0))*(CS_21*max_lambda_22 +
      CF_21)*(-(31.0/6.0)*(CS_22*max_lambda_22 + CF_22) - (19.0/6.0)*(CS_20*max_lambda_22 + CF_20) +
      ((25.0/6.0))*(CS_21*max_lambda_22 + CF_21));

    alpha_0 = 0.3 + ((3.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_0)*(1.0e-40 +
      beta_0));

   alpha_1 = 0.6 + ((3.0/5.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_1)*(1.0e-40 + beta_1));

    alpha_2 = 0.1 + ((1.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_2)*(1.0e-40 +
      beta_2));

   inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2));

   omega_0 = alpha_0*inv_alpha_sum;

   omega_1 = alpha_1*inv_alpha_sum;

   omega_2 = alpha_2*inv_alpha_sum;

    rj2 = 0.0909090909090909*fabs(-1.0 + 10*omega_2) + 0.0909090909090909*fabs(-1.0 + ((5.0/3.0))*omega_1) +
      0.0909090909090909*fabs(-1.0 + ((10.0/3.0))*omega_0);

    Recon_2 = (-(7.0/12.0)*(CS_21*max_lambda_22 + CF_21) + ((1.0/6.0))*(CS_20*max_lambda_22 + CF_20) +
      ((11.0/12.0))*(CS_22*max_lambda_22 + CF_22))*omega_2 + (-(1.0/12.0)*(CS_21*max_lambda_22 + CF_21) +
      ((1.0/6.0))*(CS_23*max_lambda_22 + CF_23) + ((5.0/12.0))*(CS_22*max_lambda_22 + CF_22))*omega_1 +
      (-(1.0/12.0)*(CS_24*max_lambda_22 + CF_24) + ((1.0/6.0))*(CS_22*max_lambda_22 + CF_22) +
      ((5.0/12.0))*(CS_23*max_lambda_22 + CF_23))*omega_0 + Recon_2;

    beta_0 = ((1.0/3.0))*((-CS_25*max_lambda_22 + CF_25)*(-CS_25*max_lambda_22 + CF_25)) +
      ((1.0/2.0))*(-(19.0/6.0)*(-CS_25*max_lambda_22 + CF_25) + ((25.0/6.0))*(-CS_24*max_lambda_22 +
      CF_24))*(-CS_24*max_lambda_22 + CF_24) + ((1.0/2.0))*(-CS_23*max_lambda_22 +
      CF_23)*(-(31.0/6.0)*(-CS_24*max_lambda_22 + CF_24) + ((5.0/3.0))*(-CS_23*max_lambda_22 + CF_23) +
      ((11.0/6.0))*(-CS_25*max_lambda_22 + CF_25));

    beta_1 = ((1.0/3.0))*((-CS_24*max_lambda_22 + CF_24)*(-CS_24*max_lambda_22 + CF_24)) +
      ((1.0/2.0))*(-(13.0/6.0)*(-CS_24*max_lambda_22 + CF_24) + ((13.0/6.0))*(-CS_23*max_lambda_22 +
      CF_23))*(-CS_23*max_lambda_22 + CF_23) + ((1.0/2.0))*(-CS_22*max_lambda_22 +
      CF_22)*(-(13.0/6.0)*(-CS_23*max_lambda_22 + CF_23) + ((2.0/3.0))*(-CS_22*max_lambda_22 + CF_22) +
      ((5.0/6.0))*(-CS_24*max_lambda_22 + CF_24));

    beta_2 = ((5.0/6.0))*((-CS_23*max_lambda_22 + CF_23)*(-CS_23*max_lambda_22 + CF_23)) +
      ((1.0/2.0))*(-(31.0/6.0)*(-CS_23*max_lambda_22 + CF_23) + ((25.0/6.0))*(-CS_22*max_lambda_22 +
      CF_22))*(-CS_22*max_lambda_22 + CF_22) + ((1.0/2.0))*(-CS_21*max_lambda_22 +
      CF_21)*(-(19.0/6.0)*(-CS_22*max_lambda_22 + CF_22) + ((2.0/3.0))*(-CS_21*max_lambda_22 + CF_21) +
      ((11.0/6.0))*(-CS_23*max_lambda_22 + CF_23));

    alpha_0 = 0.1 + ((1.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_0)*(1.0e-40 +
      beta_0));

   alpha_1 = 0.6 + ((3.0/5.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_1)*(1.0e-40 + beta_1));

    alpha_2 = 0.3 + ((3.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_2)*(1.0e-40 +
      beta_2));

   inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2));

   omega_0 = alpha_0*inv_alpha_sum;

   omega_1 = alpha_1*inv_alpha_sum;

   omega_2 = alpha_2*inv_alpha_sum;

    rj2 = fmax(rj2, 0.0909090909090909*fabs(-1.0 + 10*omega_0) + 0.0909090909090909*fabs(-1.0 + ((5.0/3.0))*omega_1) +
      0.0909090909090909*fabs(-1.0 + ((10.0/3.0))*omega_2));

    Recon_2 = (-(7.0/12.0)*(-CS_24*max_lambda_22 + CF_24) + ((1.0/6.0))*(-CS_25*max_lambda_22 + CF_25) +
      ((11.0/12.0))*(-CS_23*max_lambda_22 + CF_23))*omega_0 + (-(1.0/12.0)*(-CS_21*max_lambda_22 + CF_21) +
      ((1.0/6.0))*(-CS_23*max_lambda_22 + CF_23) + ((5.0/12.0))*(-CS_22*max_lambda_22 + CF_22))*omega_2 +
      (-(1.0/12.0)*(-CS_24*max_lambda_22 + CF_24) + ((1.0/6.0))*(-CS_22*max_lambda_22 + CF_22) +
      ((5.0/12.0))*(-CS_23*max_lambda_22 + CF_23))*omega_1 + Recon_2;

   Recon_0 = (-(1.0/60.0)*(-8*CF_01 - 8*CF_04 + 37*CF_02 + 37*CF_03 + CF_00 + CF_05) + Recon_0)*rj0;

   Recon_1 = (-(1.0/60.0)*(-8*CF_11 - 8*CF_14 + 37*CF_12 + 37*CF_13 + CF_10 + CF_15) + Recon_1)*rj1;

   Recon_2 = (-(1.0/60.0)*(-8*CF_21 - 8*CF_24 + 37*CF_22 + 37*CF_23 + CF_20 + CF_25) + Recon_2)*rj2;

   wk0_B0(0) = Recon_0 + Recon_1 + Recon_2;

   wk1_B0(0) = (-AVG_0_a + AVG_0_u0)*Recon_0 + (AVG_0_a + AVG_0_u0)*Recon_2 + AVG_0_u0*Recon_1;

    wk2_B0(0) = (((1.0/2.0))*(AVG_0_u0*AVG_0_u0) + (AVG_0_a*AVG_0_a)*invgamma_m1 + AVG_0_a*AVG_0_u0)*Recon_2 +
      (((1.0/2.0))*(AVG_0_u0*AVG_0_u0) + (AVG_0_a*AVG_0_a)*invgamma_m1 - AVG_0_a*AVG_0_u0)*Recon_0 +
      ((1.0/2.0))*(AVG_0_u0*AVG_0_u0)*Recon_1;


  }
  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[20].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 9);
  ops_set_halo_dirtybit3(&args[6],range);
  ops_set_halo_dirtybit3(&args[7],range);
  ops_set_halo_dirtybit3(&args[8],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[20].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[20].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[20].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[20].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[20].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[20].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[20].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[20].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[20].transfer += ops_compute_transfer(dim, start, end, &arg7);
    block->instance->OPS_kernels[20].transfer += ops_compute_transfer(dim, start, end, &arg8);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel003(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8) {
  ops_arg args[9] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8 };

  //create kernel descriptor and pass it to ops_enqueue_kernel
  create_kerneldesc_and_enque(name, args, 9, 20, dim, 0, range, block, ops_par_loop_opensbliblock00Kernel003_execute);
}
#endif
