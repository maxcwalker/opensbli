#ifndef OPENSBLIBLOCK00_KERNEL_H
#define OPENSBLIBLOCK00_KERNEL_H
 void opensbliblock00Kernel042(ACC<double> &rhoE_B0, ACC<double> &rho_B0, ACC<double> &rhou0_B0, ACC<double> &rhou1_B0,
ACC<double> &rhou2_B0, ACC<double> &x0_B0, ACC<double> &x2_B0, ACC<double> &x1_B0, const int *idx)
{
   double T = 0.0;
   double rho = 0.0;
   double rhou0 = 0.0;
   double rhou1 = 0.0;
   x0_B0(0,0,0) = Delta0block0*idx[0];

   x1_B0(0,0,0) = Lx1*sinh(by*invLx1*Delta1block0*idx[1])/sinh(by);

   x2_B0(0,0,0) = Delta2block0*idx[2];

    rhou0 = ((x1_B0(0,0,0) < 3.47434743474347) ? (
   -9.17067018165446e-7 + 1.04904785912717e-12*pow(x1_B0(0,0,0), 32)
      + 1.93885271233942e-8*pow(x1_B0(0,0,0), 24) + 1.89852844373312e-11*pow(x1_B0(0,0,0), 29) +
      3.37370804774424*pow(x1_B0(0,0,0), 9) + 0.0359510928126198*pow(x1_B0(0,0,0), 11) +
      1.76866484703332e-11*pow(x1_B0(0,0,0), 30) + 8.55538618337689e-18*pow(x1_B0(0,0,0), 41) +
      1.24379952358685*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) +
      1.76792777158731e-20*pow(x1_B0(0,0,0), 47) + 0.00017691036378445*pow(x1_B0(0,0,0), 17) +
      5.89461687058746e-12*pow(x1_B0(0,0,0), 31) + 1.24225192775816e-7*pow(x1_B0(0,0,0), 23) +
      0.137059939944025*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) + 2.35704636892935e-22*pow(x1_B0(0,0,0), 50) +
      5.38134402885701e-16*pow(x1_B0(0,0,0), 38) + 4.89915999852604*pow(x1_B0(0,0,0), 7) +
      0.000614017778541162*pow(x1_B0(0,0,0), 16) + 2.86778862696949e-16*pow(x1_B0(0,0,0), 39) +
      5.55514524457723e-22*pow(x1_B0(0,0,0), 48) + 3.24118837721475e-7*pow(x1_B0(0,0,0), 22) +
      7.78685163399157e-17*pow(x1_B0(0,0,0), 40) + 0.0951694369630824*pow(x1_B0(0,0,0), 12) +
      4.28094523966535e-20*pow(x1_B0(0,0,0), 46) + 0.423485026937325*x1_B0(0,0,0) -
      3.82231789496219e-14*pow(x1_B0(0,0,0), 33) - 0.00596081896192219*pow(x1_B0(0,0,0), 13) -
      1.03761285206079e-13*pow(x1_B0(0,0,0), 34) - 2.01042980423323e-21*pow(x1_B0(0,0,0), 49) -
      3.04338937551007*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) -
      0.00843501466200706*pow(x1_B0(0,0,0), 14) - 2.10203301192962e-18*pow(x1_B0(0,0,0), 43) -
      5.69178037573737e-19*pow(x1_B0(0,0,0), 44) - 9.50679806994433e-15*pow(x1_B0(0,0,0), 36) -
      6.17136538416838e-6*pow(x1_B0(0,0,0), 18) - 1.09599584261102e-7*pow(x1_B0(0,0,0), 21) -
      3.20359957168517e-18*pow(x1_B0(0,0,0), 42) - 0.0037399214502528*(x1_B0(0,0,0)*x1_B0(0,0,0)) -
      1.19041952735479e-10*pow(x1_B0(0,0,0), 28) - 1.62610179290494e-5*pow(x1_B0(0,0,0), 19) -
      0.000525101058483408*pow(x1_B0(0,0,0), 15) - 3.03740635176385e-20*pow(x1_B0(0,0,0), 45) -
      1.15705905931138*pow(x1_B0(0,0,0), 10) - 4.43597629138548e-6*pow(x1_B0(0,0,0), 20) -
      5.15676788952549*pow(x1_B0(0,0,0), 8) - 0.338659488930541*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) -
      6.16209661908411e-16*pow(x1_B0(0,0,0), 37) - 2.65285464174594e-9*pow(x1_B0(0,0,0), 26) -
      4.18364197030384e-14*pow(x1_B0(0,0,0), 35) - 2.75755111469832e-9*pow(x1_B0(0,0,0), 25) -
      8.2958200408048e-10*pow(x1_B0(0,0,0), 27)
)
: (
   0.999999408165728
));

    rhou1 = ((x1_B0(0,0,0) < 3.47434743474347) ? (
   -3.80679683270553e-8 + 6.17437190708395e-8*pow(x1_B0(0,0,0), 18) +
      7.98844798973513e-14*pow(x1_B0(0,0,0), 29) + 0.00108954905836295*(x1_B0(0,0,0)*x1_B0(0,0,0)) +
      0.00117080257732117*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) +
      0.0243865952440656*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) +
      1.2544013801972e-14*pow(x1_B0(0,0,0), 32) + 1.06115104000346e-19*pow(x1_B0(0,0,0), 41) +
      7.68574113729758e-24*pow(x1_B0(0,0,0), 48) + 6.1051360242979e-14*pow(x1_B0(0,0,0), 31) +
      4.13310784400092e-6*x1_B0(0,0,0) + 2.61275509277859e-10*pow(x1_B0(0,0,0), 24) +
      2.24860630110554e-6*pow(x1_B0(0,0,0), 17) + 4.24813157066436e-18*pow(x1_B0(0,0,0), 38) +
      0.00121959012162624*pow(x1_B0(0,0,0), 12) + 2.15865801047236e-24*pow(x1_B0(0,0,0), 50) +
      0.0823410741549325*pow(x1_B0(0,0,0), 7) + 1.61740789629939e-13*pow(x1_B0(0,0,0), 30) +
      1.35323978446153e-9*pow(x1_B0(0,0,0), 23) + 3.29846676501425e-16*pow(x1_B0(0,0,0), 33) +
      0.0477784801337204*pow(x1_B0(0,0,0), 9) + 2.89430210932789e-9*pow(x1_B0(0,0,0), 22) +
      2.69890057447216e-18*pow(x1_B0(0,0,0), 39) + 1.7055391487583e-22*pow(x1_B0(0,0,0), 47) +
      6.1877361855565e-6*pow(x1_B0(0,0,0), 16) + 3.81994771390975e-22*pow(x1_B0(0,0,0), 46) +
      7.95464046126323e-19*pow(x1_B0(0,0,0), 40) - 8.98633672109457e-12*pow(x1_B0(0,0,0), 27) -
      0.000100734047354864*pow(x1_B0(0,0,0), 14) -
      0.0553962785044558*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) -
      5.39132582911632e-8*pow(x1_B0(0,0,0), 20) - 8.91370364440569e-16*pow(x1_B0(0,0,0), 34) -
      4.19966155397138e-9*pow(x1_B0(0,0,0), 21) - 0.0798165116789603*pow(x1_B0(0,0,0), 8) -
      1.95905283896047e-20*pow(x1_B0(0,0,0), 43) - 1.02381592894008e-17*pow(x1_B0(0,0,0), 37) -
      0.0065291150198612*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) - 4.10642443126274e-16*pow(x1_B0(0,0,0),
      35) - 0.0144672034577952*pow(x1_B0(0,0,0), 10) - 1.03104386401594e-16*pow(x1_B0(0,0,0), 36) -
      4.25687501595231e-22*pow(x1_B0(0,0,0), 45) - 1.63208286958713e-7*pow(x1_B0(0,0,0), 19) -
      0.000172963130675947*pow(x1_B0(0,0,0), 11) - 1.03892000788701e-11*pow(x1_B0(0,0,0), 25) -
      1.89304810551059e-23*pow(x1_B0(0,0,0), 49) - 1.1378430342786e-5*pow(x1_B0(0,0,0), 15) -
      1.24342987020385e-5*pow(x1_B0(0,0,0), 13) - 5.70270018671184e-21*pow(x1_B0(0,0,0), 44) -
      2.49689949922651e-11*pow(x1_B0(0,0,0), 26) - 1.58801109347899e-12*pow(x1_B0(0,0,0), 28) -
      2.46652489644593e-20*pow(x1_B0(0,0,0), 42)
)
: (
   0.00564965542946911
));

    T = ((x1_B0(0,0,0) < 3.47434743474347) ? (
   1.6761935358689 + 3.06271483864277e-12*pow(x1_B0(0,0,0), 28) +
      2.79501807927091e-7*pow(x1_B0(0,0,0), 20) + 0.00248603775823404*pow(x1_B0(0,0,0), 13) +
      5.25705556202282e-6*pow(x1_B0(0,0,0), 18) + 4.19441885278622e-10*pow(x1_B0(0,0,0), 26) +
      1.03697988973593e-15*pow(x1_B0(0,0,0), 36) + 2.23763761894274e-6*pow(x1_B0(0,0,0), 19) +
      1.89606475958188e-14*pow(x1_B0(0,0,0), 34) + 0.026058157490231*pow(x1_B0(0,0,0), 9) +
      2.85584693354611e-14*pow(x1_B0(0,0,0), 33) + 0.015991867493063*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) +
      0.0005690725244923*pow(x1_B0(0,0,0), 14) + 7.67501678614382e-20*pow(x1_B0(0,0,0), 44) +
      3.08132092448187e-22*pow(x1_B0(0,0,0), 49) + 9.11642836523477e-11*pow(x1_B0(0,0,0), 27) +
      0.0548594064582554*pow(x1_B0(0,0,0), 10) + 9.68279103389392e-10*pow(x1_B0(0,0,0), 25) +
      0.267013266890081*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) +
      7.42471367623149e-5*x1_B0(0,0,0) + 2.60932186295564e-22*pow(x1_B0(0,0,0), 45) +
      3.30298013300648e-19*pow(x1_B0(0,0,0), 43) + 6.69000978601176e-19*pow(x1_B0(0,0,0), 42) +
      5.96572790520319e-15*pow(x1_B0(0,0,0), 35) + 0.461494982556074*pow(x1_B0(0,0,0), 7) -
      0.103275520631868*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) - 1.09723055742956e-16*pow(x1_B0(0,0,0),
      38) - 7.62484344426692e-14*pow(x1_B0(0,0,0), 32) - 1.00465393403514e-17*pow(x1_B0(0,0,0), 40) -
      0.0232212941855831*pow(x1_B0(0,0,0), 11) - 9.35036870885335e-8*pow(x1_B0(0,0,0), 21) -
      4.75320969485837e-17*pow(x1_B0(0,0,0), 37) - 1.33864284194856e-8*pow(x1_B0(0,0,0), 23) -
      7.24235209743116e-21*pow(x1_B0(0,0,0), 46) - 5.06193774226224e-19*pow(x1_B0(0,0,0), 41) -
      0.000147531418293449*pow(x1_B0(0,0,0), 15) - 3.7998675019817e-23*pow(x1_B0(0,0,0), 50) -
      6.28278116396064e-12*pow(x1_B0(0,0,0), 29) - 0.00342181201749505*pow(x1_B0(0,0,0), 12) -
      5.70558210049695e-8*pow(x1_B0(0,0,0), 22) - 0.262070265688791*pow(x1_B0(0,0,0), 8) -
      0.291740706219782*(x1_B0(0,0,0)*x1_B0(0,0,0)) - 8.17081805890689e-24*pow(x1_B0(0,0,0), 48) -
      8.31714025029611e-5*pow(x1_B0(0,0,0), 16) - 2.58561171573909e-21*pow(x1_B0(0,0,0), 47) -
      3.6991053156892e-10*pow(x1_B0(0,0,0), 24) - 4.44270004249955e-17*pow(x1_B0(0,0,0), 39) -
      2.9329528860808e-12*pow(x1_B0(0,0,0), 30) - 7.39485082875593e-13*pow(x1_B0(0,0,0), 31) -
      0.425422766143187*(x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)*x1_B0(0,0,0)) -
      7.3582999408868e-6*pow(x1_B0(0,0,0), 17)
)
: (
   1.00000058888713
));

   rho = 1.0/T;

   rho_B0(0,0,0) = rho;

   rhou0_B0(0,0,0) = rhou0;

   rhou1_B0(0,0,0) = rhou1;

   rhoE_B0(0,0,0) = (0.5*(rhou0*rhou0) + 0.5*(rhou1*rhou1))/rho + invgama*inv2Minf*inv_gamma_m1*T*rho;

   rhou2_B0(0,0,0) = 0.0;

}

 void opensbliblock00Kernel045(const ACC<double> &x0_B0, const ACC<double> &x1_B0, ACC<double> &D00_B0, ACC<double>
&D01_B0, ACC<double> &D10_B0, ACC<double> &D11_B0, ACC<double> &detJ_B0, ACC<double> &wk0_B0, ACC<double> &wk1_B0,
ACC<double> &wk3_B0, ACC<double> &wk4_B0, const int *idx)
{
   double d1_x0_dx = 0.0;
   double d1_x0_dy = 0.0;
   double d1_x1_dx = 0.0;
   double d1_x1_dy = 0.0;
    d1_x0_dx = invDelta0block0*((idx[0] == 0) ? (
   -3*x0_B0(2,0,0) + 4*x0_B0(1,0,0) - (25.0/12.0)*x0_B0(0,0,0) -
      (1.0/4.0)*x0_B0(4,0,0) + ((4.0/3.0))*x0_B0(3,0,0)
)
: ((idx[0] == 1) ? (
   -(5.0/6.0)*x0_B0(0,0,0) -
      (1.0/2.0)*x0_B0(2,0,0) - (1.0/4.0)*x0_B0(-1,0,0) + ((1.0/12.0))*x0_B0(3,0,0) + ((3.0/2.0))*x0_B0(1,0,0)
)
:
      ((idx[0] == -1 + block0np0) ? (
   -4*x0_B0(-1,0,0) + 3*x0_B0(-2,0,0) - (4.0/3.0)*x0_B0(-3,0,0) +
      ((1.0/4.0))*x0_B0(-4,0,0) + ((25.0/12.0))*x0_B0(0,0,0)
)
: ((idx[0] == -2 + block0np0) ? (
  
      ((1.0/2.0))*x0_B0(-2,0,0) - (3.0/2.0)*x0_B0(-1,0,0) - (1.0/12.0)*x0_B0(-3,0,0) + ((1.0/4.0))*x0_B0(1,0,0) +
      ((5.0/6.0))*x0_B0(0,0,0)
)
: (
   -(2.0/3.0)*x0_B0(-1,0,0) - (1.0/12.0)*x0_B0(2,0,0) + ((1.0/12.0))*x0_B0(-2,0,0)
      + ((2.0/3.0))*x0_B0(1,0,0)
)))));

    d1_x0_dy = invDelta1block0*((idx[1] == 0) ? (
   -3*x0_B0(0,2,0) + 4*x0_B0(0,1,0) - (25.0/12.0)*x0_B0(0,0,0) -
      (1.0/4.0)*x0_B0(0,4,0) + ((4.0/3.0))*x0_B0(0,3,0)
)
: ((idx[1] == 1) ? (
   -(5.0/6.0)*x0_B0(0,0,0) -
      (1.0/2.0)*x0_B0(0,2,0) - (1.0/4.0)*x0_B0(0,-1,0) + ((1.0/12.0))*x0_B0(0,3,0) + ((3.0/2.0))*x0_B0(0,1,0)
)
: (
  
      -(2.0/3.0)*x0_B0(0,-1,0) - (1.0/12.0)*x0_B0(0,2,0) + ((1.0/12.0))*x0_B0(0,-2,0) + ((2.0/3.0))*x0_B0(0,1,0)
)));

    d1_x1_dx = invDelta0block0*((idx[0] == 0) ? (
   -3*x1_B0(2,0,0) + 4*x1_B0(1,0,0) - (25.0/12.0)*x1_B0(0,0,0) -
      (1.0/4.0)*x1_B0(4,0,0) + ((4.0/3.0))*x1_B0(3,0,0)
)
: ((idx[0] == 1) ? (
   -(5.0/6.0)*x1_B0(0,0,0) -
      (1.0/2.0)*x1_B0(2,0,0) - (1.0/4.0)*x1_B0(-1,0,0) + ((1.0/12.0))*x1_B0(3,0,0) + ((3.0/2.0))*x1_B0(1,0,0)
)
:
      ((idx[0] == -1 + block0np0) ? (
   -4*x1_B0(-1,0,0) + 3*x1_B0(-2,0,0) - (4.0/3.0)*x1_B0(-3,0,0) +
      ((1.0/4.0))*x1_B0(-4,0,0) + ((25.0/12.0))*x1_B0(0,0,0)
)
: ((idx[0] == -2 + block0np0) ? (
  
      ((1.0/2.0))*x1_B0(-2,0,0) - (3.0/2.0)*x1_B0(-1,0,0) - (1.0/12.0)*x1_B0(-3,0,0) + ((1.0/4.0))*x1_B0(1,0,0) +
      ((5.0/6.0))*x1_B0(0,0,0)
)
: (
   -(2.0/3.0)*x1_B0(-1,0,0) - (1.0/12.0)*x1_B0(2,0,0) + ((1.0/12.0))*x1_B0(-2,0,0)
      + ((2.0/3.0))*x1_B0(1,0,0)
)))));

    d1_x1_dy = invDelta1block0*((idx[1] == 0) ? (
   -3*x1_B0(0,2,0) + 4*x1_B0(0,1,0) - (25.0/12.0)*x1_B0(0,0,0) -
      (1.0/4.0)*x1_B0(0,4,0) + ((4.0/3.0))*x1_B0(0,3,0)
)
: ((idx[1] == 1) ? (
   -(5.0/6.0)*x1_B0(0,0,0) -
      (1.0/2.0)*x1_B0(0,2,0) - (1.0/4.0)*x1_B0(0,-1,0) + ((1.0/12.0))*x1_B0(0,3,0) + ((3.0/2.0))*x1_B0(0,1,0)
)
: (
  
      -(2.0/3.0)*x1_B0(0,-1,0) - (1.0/12.0)*x1_B0(0,2,0) + ((1.0/12.0))*x1_B0(0,-2,0) + ((2.0/3.0))*x1_B0(0,1,0)
)));

   wk0_B0(0,0,0) = d1_x0_dx;

   wk1_B0(0,0,0) = d1_x0_dy;

   wk3_B0(0,0,0) = d1_x1_dx;

   wk4_B0(0,0,0) = d1_x1_dy;

   detJ_B0(0,0,0) = d1_x0_dx*d1_x1_dy - d1_x0_dy*d1_x1_dx;

   D00_B0(0,0,0) = d1_x1_dy/(d1_x0_dx*d1_x1_dy - d1_x0_dy*d1_x1_dx);

   D01_B0(0,0,0) = -d1_x0_dy/(d1_x0_dx*d1_x1_dy - d1_x0_dy*d1_x1_dx);

   D10_B0(0,0,0) = -d1_x1_dx/(d1_x0_dx*d1_x1_dy - d1_x0_dy*d1_x1_dx);

   D11_B0(0,0,0) = d1_x0_dx/(d1_x0_dx*d1_x1_dy - d1_x0_dy*d1_x1_dx);

}

 void opensbliblock00Kernel046(ACC<double> &D00_B0, ACC<double> &D01_B0, ACC<double> &D10_B0, ACC<double> &D11_B0,
ACC<double> &detJ_B0)
{
   D00_B0(-1,0,0) = D00_B0(1,0,0);

   D01_B0(-1,0,0) = D01_B0(1,0,0);

   D10_B0(-1,0,0) = D10_B0(1,0,0);

   D11_B0(-1,0,0) = D11_B0(1,0,0);

   detJ_B0(-1,0,0) = detJ_B0(1,0,0);

   D00_B0(-2,0,0) = D00_B0(2,0,0);

   D01_B0(-2,0,0) = D01_B0(2,0,0);

   D10_B0(-2,0,0) = D10_B0(2,0,0);

   D11_B0(-2,0,0) = D11_B0(2,0,0);

   detJ_B0(-2,0,0) = detJ_B0(2,0,0);

   D00_B0(-3,0,0) = D00_B0(3,0,0);

   D01_B0(-3,0,0) = D01_B0(3,0,0);

   D10_B0(-3,0,0) = D10_B0(3,0,0);

   D11_B0(-3,0,0) = D11_B0(3,0,0);

   detJ_B0(-3,0,0) = detJ_B0(3,0,0);

   D00_B0(-4,0,0) = D00_B0(4,0,0);

   D01_B0(-4,0,0) = D01_B0(4,0,0);

   D10_B0(-4,0,0) = D10_B0(4,0,0);

   D11_B0(-4,0,0) = D11_B0(4,0,0);

   detJ_B0(-4,0,0) = detJ_B0(4,0,0);

}

 void opensbliblock00Kernel047(ACC<double> &D00_B0, ACC<double> &D01_B0, ACC<double> &D10_B0, ACC<double> &D11_B0,
ACC<double> &detJ_B0)
{
   D00_B0(1,0,0) = D00_B0(-1,0,0);

   D01_B0(1,0,0) = D01_B0(-1,0,0);

   D10_B0(1,0,0) = D10_B0(-1,0,0);

   D11_B0(1,0,0) = D11_B0(-1,0,0);

   detJ_B0(1,0,0) = detJ_B0(-1,0,0);

   D00_B0(2,0,0) = D00_B0(-2,0,0);

   D01_B0(2,0,0) = D01_B0(-2,0,0);

   D10_B0(2,0,0) = D10_B0(-2,0,0);

   D11_B0(2,0,0) = D11_B0(-2,0,0);

   detJ_B0(2,0,0) = detJ_B0(-2,0,0);

   D00_B0(3,0,0) = D00_B0(-3,0,0);

   D01_B0(3,0,0) = D01_B0(-3,0,0);

   D10_B0(3,0,0) = D10_B0(-3,0,0);

   D11_B0(3,0,0) = D11_B0(-3,0,0);

   detJ_B0(3,0,0) = detJ_B0(-3,0,0);

   D00_B0(4,0,0) = D00_B0(-4,0,0);

   D01_B0(4,0,0) = D01_B0(-4,0,0);

   D10_B0(4,0,0) = D10_B0(-4,0,0);

   D11_B0(4,0,0) = D11_B0(-4,0,0);

   detJ_B0(4,0,0) = detJ_B0(-4,0,0);

}

 void opensbliblock00Kernel048(ACC<double> &D00_B0, ACC<double> &D01_B0, ACC<double> &D10_B0, ACC<double> &D11_B0,
ACC<double> &detJ_B0)
{
   D00_B0(0,-1,0) = D00_B0(0,1,0);

   D01_B0(0,-1,0) = D01_B0(0,1,0);

   D10_B0(0,-1,0) = D10_B0(0,1,0);

   D11_B0(0,-1,0) = D11_B0(0,1,0);

   detJ_B0(0,-1,0) = detJ_B0(0,1,0);

   D00_B0(0,-2,0) = D00_B0(0,2,0);

   D01_B0(0,-2,0) = D01_B0(0,2,0);

   D10_B0(0,-2,0) = D10_B0(0,2,0);

   D11_B0(0,-2,0) = D11_B0(0,2,0);

   detJ_B0(0,-2,0) = detJ_B0(0,2,0);

   D00_B0(0,-3,0) = D00_B0(0,3,0);

   D01_B0(0,-3,0) = D01_B0(0,3,0);

   D10_B0(0,-3,0) = D10_B0(0,3,0);

   D11_B0(0,-3,0) = D11_B0(0,3,0);

   detJ_B0(0,-3,0) = detJ_B0(0,3,0);

   D00_B0(0,-4,0) = D00_B0(0,4,0);

   D01_B0(0,-4,0) = D01_B0(0,4,0);

   D10_B0(0,-4,0) = D10_B0(0,4,0);

   D11_B0(0,-4,0) = D11_B0(0,4,0);

   detJ_B0(0,-4,0) = detJ_B0(0,4,0);

}

 void opensbliblock00Kernel049(ACC<double> &D00_B0, ACC<double> &D01_B0, ACC<double> &D10_B0, ACC<double> &D11_B0,
ACC<double> &detJ_B0)
{
   D00_B0(0,1,0) = D00_B0(0,-1,0);

   D01_B0(0,1,0) = D01_B0(0,-1,0);

   D10_B0(0,1,0) = D10_B0(0,-1,0);

   D11_B0(0,1,0) = D11_B0(0,-1,0);

   detJ_B0(0,1,0) = detJ_B0(0,-1,0);

   D00_B0(0,2,0) = D00_B0(0,-2,0);

   D01_B0(0,2,0) = D01_B0(0,-2,0);

   D10_B0(0,2,0) = D10_B0(0,-2,0);

   D11_B0(0,2,0) = D11_B0(0,-2,0);

   detJ_B0(0,2,0) = detJ_B0(0,-2,0);

   D00_B0(0,3,0) = D00_B0(0,-3,0);

   D01_B0(0,3,0) = D01_B0(0,-3,0);

   D10_B0(0,3,0) = D10_B0(0,-3,0);

   D11_B0(0,3,0) = D11_B0(0,-3,0);

   detJ_B0(0,3,0) = detJ_B0(0,-3,0);

   D00_B0(0,4,0) = D00_B0(0,-4,0);

   D01_B0(0,4,0) = D01_B0(0,-4,0);

   D10_B0(0,4,0) = D10_B0(0,-4,0);

   D11_B0(0,4,0) = D11_B0(0,-4,0);

   detJ_B0(0,4,0) = detJ_B0(0,-4,0);

}

 void opensbliblock00Kernel056(const ACC<double> &D00_B0, const ACC<double> &D01_B0, const ACC<double> &D10_B0, const
ACC<double> &D11_B0, ACC<double> &SD000_B0, ACC<double> &SD001_B0, ACC<double> &SD010_B0, ACC<double> &SD011_B0,
ACC<double> &SD100_B0, ACC<double> &SD101_B0, ACC<double> &SD110_B0, ACC<double> &SD111_B0, const int *idx)
{
   double d1_D00_dx = 0.0;
   double d1_D00_dy = 0.0;
   double d1_D01_dx = 0.0;
   double d1_D01_dy = 0.0;
   double d1_D10_dx = 0.0;
   double d1_D10_dy = 0.0;
   double d1_D11_dx = 0.0;
   double d1_D11_dy = 0.0;
    d1_D11_dy = invDelta1block0*((idx[1] == 0) ? (
   -3*D11_B0(0,2,0) + 4*D11_B0(0,1,0) - (25.0/12.0)*D11_B0(0,0,0) -
      (1.0/4.0)*D11_B0(0,4,0) + ((4.0/3.0))*D11_B0(0,3,0)
)
: ((idx[1] == 1) ? (
   -(5.0/6.0)*D11_B0(0,0,0) -
      (1.0/2.0)*D11_B0(0,2,0) - (1.0/4.0)*D11_B0(0,-1,0) + ((1.0/12.0))*D11_B0(0,3,0) + ((3.0/2.0))*D11_B0(0,1,0)
)
: (

        -(2.0/3.0)*D11_B0(0,-1,0) - (1.0/12.0)*D11_B0(0,2,0) + ((1.0/12.0))*D11_B0(0,-2,0) +
      ((2.0/3.0))*D11_B0(0,1,0)
)));

    d1_D00_dx = invDelta0block0*((idx[0] == 0) ? (
   -3*D00_B0(2,0,0) + 4*D00_B0(1,0,0) - (25.0/12.0)*D00_B0(0,0,0) -
      (1.0/4.0)*D00_B0(4,0,0) + ((4.0/3.0))*D00_B0(3,0,0)
)
: ((idx[0] == 1) ? (
   -(5.0/6.0)*D00_B0(0,0,0) -
      (1.0/2.0)*D00_B0(2,0,0) - (1.0/4.0)*D00_B0(-1,0,0) + ((1.0/12.0))*D00_B0(3,0,0) + ((3.0/2.0))*D00_B0(1,0,0)
)
:
      ((idx[0] == -1 + block0np0) ? (
   -4*D00_B0(-1,0,0) + 3*D00_B0(-2,0,0) - (4.0/3.0)*D00_B0(-3,0,0) +
      ((1.0/4.0))*D00_B0(-4,0,0) + ((25.0/12.0))*D00_B0(0,0,0)
)
: ((idx[0] == -2 + block0np0) ? (
  
      ((1.0/2.0))*D00_B0(-2,0,0) - (3.0/2.0)*D00_B0(-1,0,0) - (1.0/12.0)*D00_B0(-3,0,0) + ((1.0/4.0))*D00_B0(1,0,0) +
      ((5.0/6.0))*D00_B0(0,0,0)
)
: (
   -(2.0/3.0)*D00_B0(-1,0,0) - (1.0/12.0)*D00_B0(2,0,0) +
      ((1.0/12.0))*D00_B0(-2,0,0) + ((2.0/3.0))*D00_B0(1,0,0)
)))));

    d1_D11_dx = invDelta0block0*((idx[0] == 0) ? (
   -3*D11_B0(2,0,0) + 4*D11_B0(1,0,0) - (25.0/12.0)*D11_B0(0,0,0) -
      (1.0/4.0)*D11_B0(4,0,0) + ((4.0/3.0))*D11_B0(3,0,0)
)
: ((idx[0] == 1) ? (
   -(5.0/6.0)*D11_B0(0,0,0) -
      (1.0/2.0)*D11_B0(2,0,0) - (1.0/4.0)*D11_B0(-1,0,0) + ((1.0/12.0))*D11_B0(3,0,0) + ((3.0/2.0))*D11_B0(1,0,0)
)
:
      ((idx[0] == -1 + block0np0) ? (
   -4*D11_B0(-1,0,0) + 3*D11_B0(-2,0,0) - (4.0/3.0)*D11_B0(-3,0,0) +
      ((1.0/4.0))*D11_B0(-4,0,0) + ((25.0/12.0))*D11_B0(0,0,0)
)
: ((idx[0] == -2 + block0np0) ? (
  
      ((1.0/2.0))*D11_B0(-2,0,0) - (3.0/2.0)*D11_B0(-1,0,0) - (1.0/12.0)*D11_B0(-3,0,0) + ((1.0/4.0))*D11_B0(1,0,0) +
      ((5.0/6.0))*D11_B0(0,0,0)
)
: (
   -(2.0/3.0)*D11_B0(-1,0,0) - (1.0/12.0)*D11_B0(2,0,0) +
      ((1.0/12.0))*D11_B0(-2,0,0) + ((2.0/3.0))*D11_B0(1,0,0)
)))));

    d1_D10_dy = invDelta1block0*((idx[1] == 0) ? (
   -3*D10_B0(0,2,0) + 4*D10_B0(0,1,0) - (25.0/12.0)*D10_B0(0,0,0) -
      (1.0/4.0)*D10_B0(0,4,0) + ((4.0/3.0))*D10_B0(0,3,0)
)
: ((idx[1] == 1) ? (
   -(5.0/6.0)*D10_B0(0,0,0) -
      (1.0/2.0)*D10_B0(0,2,0) - (1.0/4.0)*D10_B0(0,-1,0) + ((1.0/12.0))*D10_B0(0,3,0) + ((3.0/2.0))*D10_B0(0,1,0)
)
: (

        -(2.0/3.0)*D10_B0(0,-1,0) - (1.0/12.0)*D10_B0(0,2,0) + ((1.0/12.0))*D10_B0(0,-2,0) +
      ((2.0/3.0))*D10_B0(0,1,0)
)));

    d1_D10_dx = invDelta0block0*((idx[0] == 0) ? (
   -3*D10_B0(2,0,0) + 4*D10_B0(1,0,0) - (25.0/12.0)*D10_B0(0,0,0) -
      (1.0/4.0)*D10_B0(4,0,0) + ((4.0/3.0))*D10_B0(3,0,0)
)
: ((idx[0] == 1) ? (
   -(5.0/6.0)*D10_B0(0,0,0) -
      (1.0/2.0)*D10_B0(2,0,0) - (1.0/4.0)*D10_B0(-1,0,0) + ((1.0/12.0))*D10_B0(3,0,0) + ((3.0/2.0))*D10_B0(1,0,0)
)
:
      ((idx[0] == -1 + block0np0) ? (
   -4*D10_B0(-1,0,0) + 3*D10_B0(-2,0,0) - (4.0/3.0)*D10_B0(-3,0,0) +
      ((1.0/4.0))*D10_B0(-4,0,0) + ((25.0/12.0))*D10_B0(0,0,0)
)
: ((idx[0] == -2 + block0np0) ? (
  
      ((1.0/2.0))*D10_B0(-2,0,0) - (3.0/2.0)*D10_B0(-1,0,0) - (1.0/12.0)*D10_B0(-3,0,0) + ((1.0/4.0))*D10_B0(1,0,0) +
      ((5.0/6.0))*D10_B0(0,0,0)
)
: (
   -(2.0/3.0)*D10_B0(-1,0,0) - (1.0/12.0)*D10_B0(2,0,0) +
      ((1.0/12.0))*D10_B0(-2,0,0) + ((2.0/3.0))*D10_B0(1,0,0)
)))));

    d1_D01_dy = invDelta1block0*((idx[1] == 0) ? (
   -3*D01_B0(0,2,0) + 4*D01_B0(0,1,0) - (25.0/12.0)*D01_B0(0,0,0) -
      (1.0/4.0)*D01_B0(0,4,0) + ((4.0/3.0))*D01_B0(0,3,0)
)
: ((idx[1] == 1) ? (
   -(5.0/6.0)*D01_B0(0,0,0) -
      (1.0/2.0)*D01_B0(0,2,0) - (1.0/4.0)*D01_B0(0,-1,0) + ((1.0/12.0))*D01_B0(0,3,0) + ((3.0/2.0))*D01_B0(0,1,0)
)
: (

        -(2.0/3.0)*D01_B0(0,-1,0) - (1.0/12.0)*D01_B0(0,2,0) + ((1.0/12.0))*D01_B0(0,-2,0) +
      ((2.0/3.0))*D01_B0(0,1,0)
)));

    d1_D01_dx = invDelta0block0*((idx[0] == 0) ? (
   -3*D01_B0(2,0,0) + 4*D01_B0(1,0,0) - (25.0/12.0)*D01_B0(0,0,0) -
      (1.0/4.0)*D01_B0(4,0,0) + ((4.0/3.0))*D01_B0(3,0,0)
)
: ((idx[0] == 1) ? (
   -(5.0/6.0)*D01_B0(0,0,0) -
      (1.0/2.0)*D01_B0(2,0,0) - (1.0/4.0)*D01_B0(-1,0,0) + ((1.0/12.0))*D01_B0(3,0,0) + ((3.0/2.0))*D01_B0(1,0,0)
)
:
      ((idx[0] == -1 + block0np0) ? (
   -4*D01_B0(-1,0,0) + 3*D01_B0(-2,0,0) - (4.0/3.0)*D01_B0(-3,0,0) +
      ((1.0/4.0))*D01_B0(-4,0,0) + ((25.0/12.0))*D01_B0(0,0,0)
)
: ((idx[0] == -2 + block0np0) ? (
  
      ((1.0/2.0))*D01_B0(-2,0,0) - (3.0/2.0)*D01_B0(-1,0,0) - (1.0/12.0)*D01_B0(-3,0,0) + ((1.0/4.0))*D01_B0(1,0,0) +
      ((5.0/6.0))*D01_B0(0,0,0)
)
: (
   -(2.0/3.0)*D01_B0(-1,0,0) - (1.0/12.0)*D01_B0(2,0,0) +
      ((1.0/12.0))*D01_B0(-2,0,0) + ((2.0/3.0))*D01_B0(1,0,0)
)))));

    d1_D00_dy = invDelta1block0*((idx[1] == 0) ? (
   -3*D00_B0(0,2,0) + 4*D00_B0(0,1,0) - (25.0/12.0)*D00_B0(0,0,0) -
      (1.0/4.0)*D00_B0(0,4,0) + ((4.0/3.0))*D00_B0(0,3,0)
)
: ((idx[1] == 1) ? (
   -(5.0/6.0)*D00_B0(0,0,0) -
      (1.0/2.0)*D00_B0(0,2,0) - (1.0/4.0)*D00_B0(0,-1,0) + ((1.0/12.0))*D00_B0(0,3,0) + ((3.0/2.0))*D00_B0(0,1,0)
)
: (

        -(2.0/3.0)*D00_B0(0,-1,0) - (1.0/12.0)*D00_B0(0,2,0) + ((1.0/12.0))*D00_B0(0,-2,0) +
      ((2.0/3.0))*D00_B0(0,1,0)
)));

   SD000_B0(0,0,0) = d1_D00_dx;

   SD001_B0(0,0,0) = d1_D00_dy;

   SD010_B0(0,0,0) = d1_D01_dx;

   SD011_B0(0,0,0) = d1_D01_dy;

   SD100_B0(0,0,0) = d1_D10_dx;

   SD101_B0(0,0,0) = d1_D10_dy;

   SD110_B0(0,0,0) = d1_D11_dx;

   SD111_B0(0,0,0) = d1_D11_dy;

}

 void opensbliblock00Kernel036(ACC<double> &rhoE_B0, ACC<double> &rho_B0, ACC<double> &rhou0_B0, ACC<double> &rhou1_B0,
ACC<double> &rhou2_B0)
{
   rho_B0(0,0,0) = rho_B0(-1,0,0);

   rhou0_B0(0,0,0) = rhou0_B0(-1,0,0);

   rhou1_B0(0,0,0) = rhou1_B0(-1,0,0);

   rhou2_B0(0,0,0) = rhou2_B0(-1,0,0);

   rhoE_B0(0,0,0) = rhoE_B0(-1,0,0);

}

 void opensbliblock00Kernel037(ACC<double> &rhoE_B0, ACC<double> &rho_B0, ACC<double> &rhou0_B0, ACC<double> &rhou1_B0,
ACC<double> &rhou2_B0)
{
   rho_B0(0,0,0) = rho_B0(-1,0,0);

   rhou0_B0(0,0,0) = rhou0_B0(-1,0,0);

   rhou1_B0(0,0,0) = rhou1_B0(-1,0,0);

   rhou2_B0(0,0,0) = rhou2_B0(-1,0,0);

   rhoE_B0(0,0,0) = rhoE_B0(-1,0,0);

   rho_B0(1,0,0) = rho_B0(-1,0,0);

   rhou0_B0(1,0,0) = rhou0_B0(-1,0,0);

   rhou1_B0(1,0,0) = rhou1_B0(-1,0,0);

   rhou2_B0(1,0,0) = rhou2_B0(-1,0,0);

   rhoE_B0(1,0,0) = rhoE_B0(-1,0,0);

   rho_B0(2,0,0) = rho_B0(-1,0,0);

   rhou0_B0(2,0,0) = rhou0_B0(-1,0,0);

   rhou1_B0(2,0,0) = rhou1_B0(-1,0,0);

   rhou2_B0(2,0,0) = rhou2_B0(-1,0,0);

   rhoE_B0(2,0,0) = rhoE_B0(-1,0,0);

   rho_B0(3,0,0) = rho_B0(-1,0,0);

   rhou0_B0(3,0,0) = rhou0_B0(-1,0,0);

   rhou1_B0(3,0,0) = rhou1_B0(-1,0,0);

   rhou2_B0(3,0,0) = rhou2_B0(-1,0,0);

   rhoE_B0(3,0,0) = rhoE_B0(-1,0,0);

   rho_B0(4,0,0) = rho_B0(-1,0,0);

   rhou0_B0(4,0,0) = rhou0_B0(-1,0,0);

   rhou1_B0(4,0,0) = rhou1_B0(-1,0,0);

   rhou2_B0(4,0,0) = rhou2_B0(-1,0,0);

   rhoE_B0(4,0,0) = rhoE_B0(-1,0,0);

}

 void opensbliblock00Kernel038(ACC<double> &rhoE_B0, ACC<double> &rho_B0, ACC<double> &rhou0_B0, ACC<double> &rhou1_B0,
ACC<double> &rhou2_B0)
{
   double Pwall = 0.0;
   double T1 = 0.0;
   double T2 = 0.0;
   double T3 = 0.0;
   double T4 = 0.0;
   double T_above = 0.0;
   double rho_halo_1 = 0.0;
   double rho_halo_2 = 0.0;
   double rho_halo_3 = 0.0;
   double rho_halo_4 = 0.0;
   double u01 = 0.0;
   double u02 = 0.0;
   double u03 = 0.0;
   double u04 = 0.0;
   double u11 = 0.0;
   double u12 = 0.0;
   double u13 = 0.0;
   double u14 = 0.0;
   double u21 = 0.0;
   double u22 = 0.0;
   double u23 = 0.0;
   double u24 = 0.0;
   rhou0_B0(0,0,0) = 0.0;

   rhou1_B0(0,0,0) = 0.0;

   rhou2_B0(0,0,0) = 0.0;

   rhoE_B0(0,0,0) = Twall*inv2Minf*rho_B0(0,0,0)/(gama*(-1.0 + gama));

    Pwall = (-1 + gama)*(-(((1.0/2.0))*(rhou0_B0(0,0,0)*rhou0_B0(0,0,0)) + ((1.0/2.0))*(rhou1_B0(0,0,0)*rhou1_B0(0,0,0))
      + ((1.0/2.0))*(rhou2_B0(0,0,0)*rhou2_B0(0,0,0)))/rho_B0(0,0,0) + rhoE_B0(0,0,0));

   u01 = rhou0_B0(0,1,0)/rho_B0(0,1,0);

   u02 = rhou0_B0(0,2,0)/rho_B0(0,2,0);

   u03 = rhou0_B0(0,3,0)/rho_B0(0,3,0);

   u04 = rhou0_B0(0,4,0)/rho_B0(0,4,0);

   u11 = rhou1_B0(0,1,0)/rho_B0(0,1,0);

   u12 = rhou1_B0(0,2,0)/rho_B0(0,2,0);

   u13 = rhou1_B0(0,3,0)/rho_B0(0,3,0);

   u14 = rhou1_B0(0,4,0)/rho_B0(0,4,0);

   u21 = rhou2_B0(0,1,0)/rho_B0(0,1,0);

   u22 = rhou2_B0(0,2,0)/rho_B0(0,2,0);

   u23 = rhou2_B0(0,3,0)/rho_B0(0,3,0);

   u24 = rhou2_B0(0,4,0)/rho_B0(0,4,0);

    T_above = (Minf*Minf)*(-1 + gama)*(-(((1.0/2.0))*(rhou0_B0(0,1,0)*rhou0_B0(0,1,0)) +
      ((1.0/2.0))*(rhou1_B0(0,1,0)*rhou1_B0(0,1,0)) + ((1.0/2.0))*(rhou2_B0(0,1,0)*rhou2_B0(0,1,0)))/rho_B0(0,1,0) +
      rhoE_B0(0,1,0))*gama/rho_B0(0,1,0);

   T1 = -T_above + 2*Twall;

   rho_halo_1 = (Minf*Minf)*gama*Pwall/T1;

   rho_B0(0,-1,0) = rho_halo_1;

   rhou0_B0(0,-1,0) = -rho_halo_1*u01;

   rhou1_B0(0,-1,0) = -rho_halo_1*u11;

   rhou2_B0(0,-1,0) = -rho_halo_1*u21;

   rhoE_B0(0,-1,0) = inv_gamma_m1*Pwall + ((1.0/2.0))*((u01*u01) + (u11*u11) + (u21*u21))*rho_halo_1;

   T2 = -2*T_above + 3*Twall;

   rho_halo_1 = (Minf*Minf)*gama*Pwall/T1;

   rho_B0(0,-1,0) = rho_halo_1;

   rho_halo_2 = (Minf*Minf)*gama*Pwall/T2;

   rho_B0(0,-2,0) = rho_halo_2;

   rhou0_B0(0,-1,0) = -rho_halo_1*u01;

   rhou1_B0(0,-1,0) = -rho_halo_1*u11;

   rhou2_B0(0,-1,0) = -rho_halo_1*u21;

   rhou0_B0(0,-2,0) = -rho_halo_2*u02;

   rhou1_B0(0,-2,0) = -rho_halo_2*u12;

   rhou2_B0(0,-2,0) = -rho_halo_2*u22;

   rhoE_B0(0,-1,0) = inv_gamma_m1*Pwall + ((1.0/2.0))*((u01*u01) + (u11*u11) + (u21*u21))*rho_halo_1;

   rhoE_B0(0,-2,0) = inv_gamma_m1*Pwall + ((1.0/2.0))*((u02*u02) + (u12*u12) + (u22*u22))*rho_halo_2;

   T3 = -3*T_above + 4*Twall;

   rho_halo_1 = (Minf*Minf)*gama*Pwall/T1;

   rho_B0(0,-1,0) = rho_halo_1;

   rho_halo_2 = (Minf*Minf)*gama*Pwall/T2;

   rho_B0(0,-2,0) = rho_halo_2;

   rho_halo_3 = (Minf*Minf)*gama*Pwall/T3;

   rho_B0(0,-3,0) = rho_halo_3;

   rhou0_B0(0,-1,0) = -rho_halo_1*u01;

   rhou1_B0(0,-1,0) = -rho_halo_1*u11;

   rhou2_B0(0,-1,0) = -rho_halo_1*u21;

   rhou0_B0(0,-2,0) = -rho_halo_2*u02;

   rhou1_B0(0,-2,0) = -rho_halo_2*u12;

   rhou2_B0(0,-2,0) = -rho_halo_2*u22;

   rhou0_B0(0,-3,0) = -rho_halo_3*u03;

   rhou1_B0(0,-3,0) = -rho_halo_3*u13;

   rhou2_B0(0,-3,0) = -rho_halo_3*u23;

   rhoE_B0(0,-1,0) = inv_gamma_m1*Pwall + ((1.0/2.0))*((u01*u01) + (u11*u11) + (u21*u21))*rho_halo_1;

   rhoE_B0(0,-2,0) = inv_gamma_m1*Pwall + ((1.0/2.0))*((u02*u02) + (u12*u12) + (u22*u22))*rho_halo_2;

   rhoE_B0(0,-3,0) = inv_gamma_m1*Pwall + ((1.0/2.0))*((u03*u03) + (u13*u13) + (u23*u23))*rho_halo_3;

   T4 = -4*T_above + 5*Twall;

   rho_halo_1 = (Minf*Minf)*gama*Pwall/T1;

   rho_B0(0,-1,0) = rho_halo_1;

   rho_halo_2 = (Minf*Minf)*gama*Pwall/T2;

   rho_B0(0,-2,0) = rho_halo_2;

   rho_halo_3 = (Minf*Minf)*gama*Pwall/T3;

   rho_B0(0,-3,0) = rho_halo_3;

   rho_halo_4 = (Minf*Minf)*gama*Pwall/T4;

   rho_B0(0,-4,0) = rho_halo_4;

   rhou0_B0(0,-1,0) = -rho_halo_1*u01;

   rhou1_B0(0,-1,0) = -rho_halo_1*u11;

   rhou2_B0(0,-1,0) = -rho_halo_1*u21;

   rhou0_B0(0,-2,0) = -rho_halo_2*u02;

   rhou1_B0(0,-2,0) = -rho_halo_2*u12;

   rhou2_B0(0,-2,0) = -rho_halo_2*u22;

   rhou0_B0(0,-3,0) = -rho_halo_3*u03;

   rhou1_B0(0,-3,0) = -rho_halo_3*u13;

   rhou2_B0(0,-3,0) = -rho_halo_3*u23;

   rhou0_B0(0,-4,0) = -rho_halo_4*u04;

   rhou1_B0(0,-4,0) = -rho_halo_4*u14;

   rhou2_B0(0,-4,0) = -rho_halo_4*u24;

   rhoE_B0(0,-1,0) = inv_gamma_m1*Pwall + ((1.0/2.0))*((u01*u01) + (u11*u11) + (u21*u21))*rho_halo_1;

   rhoE_B0(0,-2,0) = inv_gamma_m1*Pwall + ((1.0/2.0))*((u02*u02) + (u12*u12) + (u22*u22))*rho_halo_2;

   rhoE_B0(0,-3,0) = inv_gamma_m1*Pwall + ((1.0/2.0))*((u03*u03) + (u13*u13) + (u23*u23))*rho_halo_3;

   rhoE_B0(0,-4,0) = inv_gamma_m1*Pwall + ((1.0/2.0))*((u04*u04) + (u14*u14) + (u24*u24))*rho_halo_4;

}

 void opensbliblock00Kernel039(ACC<double> &rhoE_B0, ACC<double> &rho_B0, ACC<double> &rhou0_B0, ACC<double> &rhou1_B0,
ACC<double> &rhou2_B0)
{
   rho_B0(0,0,0) = rho_B0(0,-1,0);

   rhou0_B0(0,0,0) = rhou0_B0(0,-1,0);

   rhou1_B0(0,0,0) = rhou1_B0(0,-1,0);

   rhou2_B0(0,0,0) = rhou2_B0(0,-1,0);

   rhoE_B0(0,0,0) = rhoE_B0(0,-1,0);

   rho_B0(0,1,0) = rho_B0(0,-1,0);

   rhou0_B0(0,1,0) = rhou0_B0(0,-1,0);

   rhou1_B0(0,1,0) = rhou1_B0(0,-1,0);

   rhou2_B0(0,1,0) = rhou2_B0(0,-1,0);

   rhoE_B0(0,1,0) = rhoE_B0(0,-1,0);

   rho_B0(0,2,0) = rho_B0(0,-2,0);

   rhou0_B0(0,2,0) = rhou0_B0(0,-2,0);

   rhou1_B0(0,2,0) = rhou1_B0(0,-2,0);

   rhou2_B0(0,2,0) = rhou2_B0(0,-2,0);

   rhoE_B0(0,2,0) = rhoE_B0(0,-2,0);

   rho_B0(0,3,0) = rho_B0(0,-3,0);

   rhou0_B0(0,3,0) = rhou0_B0(0,-3,0);

   rhou1_B0(0,3,0) = rhou1_B0(0,-3,0);

   rhou2_B0(0,3,0) = rhou2_B0(0,-3,0);

   rhoE_B0(0,3,0) = rhoE_B0(0,-3,0);

   rho_B0(0,4,0) = rho_B0(0,-4,0);

   rhou0_B0(0,4,0) = rhou0_B0(0,-4,0);

   rhou1_B0(0,4,0) = rhou1_B0(0,-4,0);

   rhou2_B0(0,4,0) = rhou2_B0(0,-4,0);

   rhoE_B0(0,4,0) = rhoE_B0(0,-4,0);

}

void opensbliblock00Kernel005(const ACC<double> &rho_B0, const ACC<double> &rhou0_B0, ACC<double> &u0_B0)
{
   u0_B0(0,0,0) = rhou0_B0(0,0,0)/rho_B0(0,0,0);

}

void opensbliblock00Kernel007(const ACC<double> &rho_B0, const ACC<double> &rhou1_B0, ACC<double> &u1_B0)
{
   u1_B0(0,0,0) = rhou1_B0(0,0,0)/rho_B0(0,0,0);

}

void opensbliblock00Kernel009(const ACC<double> &rho_B0, const ACC<double> &rhou2_B0, ACC<double> &u2_B0)
{
   u2_B0(0,0,0) = rhou2_B0(0,0,0)/rho_B0(0,0,0);

}

 void opensbliblock00Kernel020(const ACC<double> &rhoE_B0, const ACC<double> &rho_B0, const ACC<double> &u0_B0, const
ACC<double> &u1_B0, const ACC<double> &u2_B0, ACC<double> &p_B0)
{
    p_B0(0,0,0) = (-1 + gama)*(-(1.0/2.0)*(u0_B0(0,0,0)*u0_B0(0,0,0))*rho_B0(0,0,0) -
      (1.0/2.0)*(u1_B0(0,0,0)*u1_B0(0,0,0))*rho_B0(0,0,0) - (1.0/2.0)*(u2_B0(0,0,0)*u2_B0(0,0,0))*rho_B0(0,0,0) +
      rhoE_B0(0,0,0));

}

void opensbliblock00Kernel011(const ACC<double> &p_B0, const ACC<double> &rho_B0, ACC<double> &T_B0)
{
   T_B0(0,0,0) = (Minf*Minf)*gama*p_B0(0,0,0)/rho_B0(0,0,0);

}

void opensbliblock00Kernel026(const ACC<double> &T_B0, ACC<double> &mu_B0)
{
   mu_B0(0,0,0) = T_B0(0,0,0)*sqrt(T_B0(0,0,0))*(1.0 + SuthT*invRefT)/(SuthT*invRefT + T_B0(0,0,0));

}

void opensbliblock00Kernel004(const ACC<double> &u0_B0, ACC<double> &wk0_B0, const int *idx)
{
   if (idx[0] == 0){

       wk0_B0(0,0,0) = (-3*u0_B0(2,0,0) + 4*u0_B0(1,0,0) - (25.0/12.0)*u0_B0(0,0,0) - (1.0/4.0)*u0_B0(4,0,0) +
            ((4.0/3.0))*u0_B0(3,0,0))*invDelta0block0;

   }

   else if (idx[0] == 1){

       wk0_B0(0,0,0) = (-(5.0/6.0)*u0_B0(0,0,0) - (1.0/2.0)*u0_B0(2,0,0) - (1.0/4.0)*u0_B0(-1,0,0) +
            ((1.0/12.0))*u0_B0(3,0,0) + ((3.0/2.0))*u0_B0(1,0,0))*invDelta0block0;

   }

   else if (idx[0] == -1 + block0np0){

       wk0_B0(0,0,0) = (-4*u0_B0(-1,0,0) + 3*u0_B0(-2,0,0) - (4.0/3.0)*u0_B0(-3,0,0) + ((1.0/4.0))*u0_B0(-4,0,0) +
            ((25.0/12.0))*u0_B0(0,0,0))*invDelta0block0;

   }

   else if (idx[0] == -2 + block0np0){

       wk0_B0(0,0,0) = (((1.0/2.0))*u0_B0(-2,0,0) - (3.0/2.0)*u0_B0(-1,0,0) - (1.0/12.0)*u0_B0(-3,0,0) +
            ((1.0/4.0))*u0_B0(1,0,0) + ((5.0/6.0))*u0_B0(0,0,0))*invDelta0block0;

   }

   else{

       wk0_B0(0,0,0) = (-(2.0/3.0)*u0_B0(-1,0,0) - (1.0/12.0)*u0_B0(2,0,0) + ((1.0/12.0))*u0_B0(-2,0,0) +
            ((2.0/3.0))*u0_B0(1,0,0))*invDelta0block0;

   }

}

void opensbliblock00Kernel006(const ACC<double> &u1_B0, ACC<double> &wk1_B0, const int *idx)
{
   if (idx[0] == 0){

       wk1_B0(0,0,0) = (-3*u1_B0(2,0,0) + 4*u1_B0(1,0,0) - (25.0/12.0)*u1_B0(0,0,0) - (1.0/4.0)*u1_B0(4,0,0) +
            ((4.0/3.0))*u1_B0(3,0,0))*invDelta0block0;

   }

   else if (idx[0] == 1){

       wk1_B0(0,0,0) = (-(5.0/6.0)*u1_B0(0,0,0) - (1.0/2.0)*u1_B0(2,0,0) - (1.0/4.0)*u1_B0(-1,0,0) +
            ((1.0/12.0))*u1_B0(3,0,0) + ((3.0/2.0))*u1_B0(1,0,0))*invDelta0block0;

   }

   else if (idx[0] == -1 + block0np0){

       wk1_B0(0,0,0) = (-4*u1_B0(-1,0,0) + 3*u1_B0(-2,0,0) - (4.0/3.0)*u1_B0(-3,0,0) + ((1.0/4.0))*u1_B0(-4,0,0) +
            ((25.0/12.0))*u1_B0(0,0,0))*invDelta0block0;

   }

   else if (idx[0] == -2 + block0np0){

       wk1_B0(0,0,0) = (((1.0/2.0))*u1_B0(-2,0,0) - (3.0/2.0)*u1_B0(-1,0,0) - (1.0/12.0)*u1_B0(-3,0,0) +
            ((1.0/4.0))*u1_B0(1,0,0) + ((5.0/6.0))*u1_B0(0,0,0))*invDelta0block0;

   }

   else{

       wk1_B0(0,0,0) = (-(2.0/3.0)*u1_B0(-1,0,0) - (1.0/12.0)*u1_B0(2,0,0) + ((1.0/12.0))*u1_B0(-2,0,0) +
            ((2.0/3.0))*u1_B0(1,0,0))*invDelta0block0;

   }

}

void opensbliblock00Kernel008(const ACC<double> &u2_B0, ACC<double> &wk2_B0, const int *idx)
{
   if (idx[0] == 0){

       wk2_B0(0,0,0) = (-3*u2_B0(2,0,0) + 4*u2_B0(1,0,0) - (25.0/12.0)*u2_B0(0,0,0) - (1.0/4.0)*u2_B0(4,0,0) +
            ((4.0/3.0))*u2_B0(3,0,0))*invDelta0block0;

   }

   else if (idx[0] == 1){

       wk2_B0(0,0,0) = (-(5.0/6.0)*u2_B0(0,0,0) - (1.0/2.0)*u2_B0(2,0,0) - (1.0/4.0)*u2_B0(-1,0,0) +
            ((1.0/12.0))*u2_B0(3,0,0) + ((3.0/2.0))*u2_B0(1,0,0))*invDelta0block0;

   }

   else if (idx[0] == -1 + block0np0){

       wk2_B0(0,0,0) = (-4*u2_B0(-1,0,0) + 3*u2_B0(-2,0,0) - (4.0/3.0)*u2_B0(-3,0,0) + ((1.0/4.0))*u2_B0(-4,0,0) +
            ((25.0/12.0))*u2_B0(0,0,0))*invDelta0block0;

   }

   else if (idx[0] == -2 + block0np0){

       wk2_B0(0,0,0) = (((1.0/2.0))*u2_B0(-2,0,0) - (3.0/2.0)*u2_B0(-1,0,0) - (1.0/12.0)*u2_B0(-3,0,0) +
            ((1.0/4.0))*u2_B0(1,0,0) + ((5.0/6.0))*u2_B0(0,0,0))*invDelta0block0;

   }

   else{

       wk2_B0(0,0,0) = (-(2.0/3.0)*u2_B0(-1,0,0) - (1.0/12.0)*u2_B0(2,0,0) + ((1.0/12.0))*u2_B0(-2,0,0) +
            ((2.0/3.0))*u2_B0(1,0,0))*invDelta0block0;

   }

}

void opensbliblock00Kernel010(const ACC<double> &T_B0, ACC<double> &wk3_B0, const int *idx)
{
   if (idx[0] == 0){

       wk3_B0(0,0,0) = (-3*T_B0(2,0,0) + 4*T_B0(1,0,0) - (25.0/12.0)*T_B0(0,0,0) - (1.0/4.0)*T_B0(4,0,0) +
            ((4.0/3.0))*T_B0(3,0,0))*invDelta0block0;

   }

   else if (idx[0] == 1){

       wk3_B0(0,0,0) = (-(5.0/6.0)*T_B0(0,0,0) - (1.0/2.0)*T_B0(2,0,0) - (1.0/4.0)*T_B0(-1,0,0) +
            ((1.0/12.0))*T_B0(3,0,0) + ((3.0/2.0))*T_B0(1,0,0))*invDelta0block0;

   }

   else if (idx[0] == -1 + block0np0){

       wk3_B0(0,0,0) = (-4*T_B0(-1,0,0) + 3*T_B0(-2,0,0) - (4.0/3.0)*T_B0(-3,0,0) + ((1.0/4.0))*T_B0(-4,0,0) +
            ((25.0/12.0))*T_B0(0,0,0))*invDelta0block0;

   }

   else if (idx[0] == -2 + block0np0){

       wk3_B0(0,0,0) = (((1.0/2.0))*T_B0(-2,0,0) - (3.0/2.0)*T_B0(-1,0,0) - (1.0/12.0)*T_B0(-3,0,0) +
            ((1.0/4.0))*T_B0(1,0,0) + ((5.0/6.0))*T_B0(0,0,0))*invDelta0block0;

   }

   else{

       wk3_B0(0,0,0) = (-(2.0/3.0)*T_B0(-1,0,0) - (1.0/12.0)*T_B0(2,0,0) + ((1.0/12.0))*T_B0(-2,0,0) +
            ((2.0/3.0))*T_B0(1,0,0))*invDelta0block0;

   }

}

void opensbliblock00Kernel012(const ACC<double> &u0_B0, ACC<double> &wk4_B0, const int *idx)
{
   if (idx[1] == 0){

       wk4_B0(0,0,0) = (-3*u0_B0(0,2,0) + 4*u0_B0(0,1,0) - (25.0/12.0)*u0_B0(0,0,0) - (1.0/4.0)*u0_B0(0,4,0) +
            ((4.0/3.0))*u0_B0(0,3,0))*invDelta1block0;

   }

   else if (idx[1] == 1){

       wk4_B0(0,0,0) = (-(5.0/6.0)*u0_B0(0,0,0) - (1.0/2.0)*u0_B0(0,2,0) - (1.0/4.0)*u0_B0(0,-1,0) +
            ((1.0/12.0))*u0_B0(0,3,0) + ((3.0/2.0))*u0_B0(0,1,0))*invDelta1block0;

   }

   else{

       wk4_B0(0,0,0) = (-(2.0/3.0)*u0_B0(0,-1,0) - (1.0/12.0)*u0_B0(0,2,0) + ((1.0/12.0))*u0_B0(0,-2,0) +
            ((2.0/3.0))*u0_B0(0,1,0))*invDelta1block0;

   }

}

void opensbliblock00Kernel013(const ACC<double> &u1_B0, ACC<double> &wk5_B0, const int *idx)
{
   if (idx[1] == 0){

       wk5_B0(0,0,0) = (-3*u1_B0(0,2,0) + 4*u1_B0(0,1,0) - (25.0/12.0)*u1_B0(0,0,0) - (1.0/4.0)*u1_B0(0,4,0) +
            ((4.0/3.0))*u1_B0(0,3,0))*invDelta1block0;

   }

   else if (idx[1] == 1){

       wk5_B0(0,0,0) = (-(5.0/6.0)*u1_B0(0,0,0) - (1.0/2.0)*u1_B0(0,2,0) - (1.0/4.0)*u1_B0(0,-1,0) +
            ((1.0/12.0))*u1_B0(0,3,0) + ((3.0/2.0))*u1_B0(0,1,0))*invDelta1block0;

   }

   else{

       wk5_B0(0,0,0) = (-(2.0/3.0)*u1_B0(0,-1,0) - (1.0/12.0)*u1_B0(0,2,0) + ((1.0/12.0))*u1_B0(0,-2,0) +
            ((2.0/3.0))*u1_B0(0,1,0))*invDelta1block0;

   }

}

void opensbliblock00Kernel014(const ACC<double> &u2_B0, ACC<double> &wk6_B0, const int *idx)
{
   if (idx[1] == 0){

       wk6_B0(0,0,0) = (-3*u2_B0(0,2,0) + 4*u2_B0(0,1,0) - (25.0/12.0)*u2_B0(0,0,0) - (1.0/4.0)*u2_B0(0,4,0) +
            ((4.0/3.0))*u2_B0(0,3,0))*invDelta1block0;

   }

   else if (idx[1] == 1){

       wk6_B0(0,0,0) = (-(5.0/6.0)*u2_B0(0,0,0) - (1.0/2.0)*u2_B0(0,2,0) - (1.0/4.0)*u2_B0(0,-1,0) +
            ((1.0/12.0))*u2_B0(0,3,0) + ((3.0/2.0))*u2_B0(0,1,0))*invDelta1block0;

   }

   else{

       wk6_B0(0,0,0) = (-(2.0/3.0)*u2_B0(0,-1,0) - (1.0/12.0)*u2_B0(0,2,0) + ((1.0/12.0))*u2_B0(0,-2,0) +
            ((2.0/3.0))*u2_B0(0,1,0))*invDelta1block0;

   }

}

void opensbliblock00Kernel015(const ACC<double> &T_B0, ACC<double> &wk7_B0, const int *idx)
{
   if (idx[1] == 0){

       wk7_B0(0,0,0) = (-3*T_B0(0,2,0) + 4*T_B0(0,1,0) - (25.0/12.0)*T_B0(0,0,0) - (1.0/4.0)*T_B0(0,4,0) +
            ((4.0/3.0))*T_B0(0,3,0))*invDelta1block0;

   }

   else if (idx[1] == 1){

       wk7_B0(0,0,0) = (-(5.0/6.0)*T_B0(0,0,0) - (1.0/2.0)*T_B0(0,2,0) - (1.0/4.0)*T_B0(0,-1,0) +
            ((1.0/12.0))*T_B0(0,3,0) + ((3.0/2.0))*T_B0(0,1,0))*invDelta1block0;

   }

   else{

       wk7_B0(0,0,0) = (-(2.0/3.0)*T_B0(0,-1,0) - (1.0/12.0)*T_B0(0,2,0) + ((1.0/12.0))*T_B0(0,-2,0) +
            ((2.0/3.0))*T_B0(0,1,0))*invDelta1block0;

   }

}

void opensbliblock00Kernel016(const ACC<double> &u0_B0, ACC<double> &wk8_B0)
{
    wk8_B0(0,0,0) = (-(2.0/3.0)*u0_B0(0,0,-1) - (1.0/12.0)*u0_B0(0,0,2) + ((1.0/12.0))*u0_B0(0,0,-2) +
      ((2.0/3.0))*u0_B0(0,0,1))*invDelta2block0;

}

void opensbliblock00Kernel017(const ACC<double> &u1_B0, ACC<double> &wk9_B0)
{
    wk9_B0(0,0,0) = (-(2.0/3.0)*u1_B0(0,0,-1) - (1.0/12.0)*u1_B0(0,0,2) + ((1.0/12.0))*u1_B0(0,0,-2) +
      ((2.0/3.0))*u1_B0(0,0,1))*invDelta2block0;

}

void opensbliblock00Kernel018(const ACC<double> &u2_B0, ACC<double> &wk10_B0)
{
    wk10_B0(0,0,0) = (-(2.0/3.0)*u2_B0(0,0,-1) - (1.0/12.0)*u2_B0(0,0,2) + ((1.0/12.0))*u2_B0(0,0,-2) +
      ((2.0/3.0))*u2_B0(0,0,1))*invDelta2block0;

}

void opensbliblock00Kernel019(const ACC<double> &T_B0, ACC<double> &wk11_B0)
{
    wk11_B0(0,0,0) = (-(2.0/3.0)*T_B0(0,0,-1) - (1.0/12.0)*T_B0(0,0,2) + ((1.0/12.0))*T_B0(0,0,-2) +
      ((2.0/3.0))*T_B0(0,0,1))*invDelta2block0;

}

 void opensbliblock00Kernel034(const ACC<double> &D00_B0, const ACC<double> &D01_B0, const ACC<double> &D10_B0, const
ACC<double> &D11_B0, const ACC<double> &p_B0, const ACC<double> &rhoE_B0, const ACC<double> &rho_B0, const ACC<double>
&rhou0_B0, const ACC<double> &rhou1_B0, const ACC<double> &rhou2_B0, const ACC<double> &u0_B0, const ACC<double> &u1_B0,
const ACC<double> &u2_B0, const ACC<double> &wk0_B0, const ACC<double> &wk10_B0, const ACC<double> &wk1_B0, const
ACC<double> &wk2_B0, const ACC<double> &wk4_B0, const ACC<double> &wk5_B0, const ACC<double> &wk6_B0, const ACC<double>
&wk8_B0, const ACC<double> &wk9_B0, ACC<double> &Residual0_B0, ACC<double> &Residual1_B0, ACC<double> &Residual2_B0,
ACC<double> &Residual3_B0, ACC<double> &Residual4_B0, const int *idx)
{
   double d1_inv_rhoErho_dx = 0.0;
   double d1_inv_rhoErho_dy = 0.0;
   double d1_inv_rhoErho_dz = 0.0;
   double d1_inv_rhoErhou0_dx = 0.0;
   double d1_inv_rhoErhou0_dy = 0.0;
   double d1_inv_rhoErhou1_dx = 0.0;
   double d1_inv_rhoErhou1_dy = 0.0;
   double d1_inv_rhoErhou2_dz = 0.0;
   double d1_p_dx = 0.0;
   double d1_p_dy = 0.0;
   double d1_p_dz = 0.0;
   double d1_pu0_dx = 0.0;
   double d1_pu0_dy = 0.0;
   double d1_pu1_dx = 0.0;
   double d1_pu1_dy = 0.0;
   double d1_pu2_dz = 0.0;
   double d1_rhoE_dx = 0.0;
   double d1_rhoE_dy = 0.0;
   double d1_rhoE_dz = 0.0;
   double d1_rhoEu0_dx = 0.0;
   double d1_rhoEu0_dy = 0.0;
   double d1_rhoEu1_dx = 0.0;
   double d1_rhoEu1_dy = 0.0;
   double d1_rhoEu2_dz = 0.0;
   double d1_rho_dx = 0.0;
   double d1_rho_dy = 0.0;
   double d1_rho_dz = 0.0;
   double d1_rhou0_dx = 0.0;
   double d1_rhou0_dy = 0.0;
   double d1_rhou0_dz = 0.0;
   double d1_rhou0u0_dx = 0.0;
   double d1_rhou0u0_dy = 0.0;
   double d1_rhou0u1_dx = 0.0;
   double d1_rhou0u1_dy = 0.0;
   double d1_rhou0u2_dx = 0.0;
   double d1_rhou0u2_dy = 0.0;
   double d1_rhou1_dx = 0.0;
   double d1_rhou1_dy = 0.0;
   double d1_rhou1_dz = 0.0;
   double d1_rhou1u0_dx = 0.0;
   double d1_rhou1u0_dy = 0.0;
   double d1_rhou1u1_dx = 0.0;
   double d1_rhou1u1_dy = 0.0;
   double d1_rhou1u2_dx = 0.0;
   double d1_rhou1u2_dy = 0.0;
   double d1_rhou2_dx = 0.0;
   double d1_rhou2_dy = 0.0;
   double d1_rhou2_dz = 0.0;
   double d1_rhou2u0_dz = 0.0;
   double d1_rhou2u1_dz = 0.0;
   double d1_rhou2u2_dz = 0.0;
   double d1_u0u0_dx = 0.0;
   double d1_u0u0_dy = 0.0;
   double d1_u0u1_dx = 0.0;
   double d1_u0u1_dy = 0.0;
   double d1_u0u2_dx = 0.0;
   double d1_u0u2_dy = 0.0;
   double d1_u0u2_dz = 0.0;
   double d1_u1u1_dx = 0.0;
   double d1_u1u1_dy = 0.0;
   double d1_u1u2_dx = 0.0;
   double d1_u1u2_dy = 0.0;
   double d1_u1u2_dz = 0.0;
   double d1_u2u2_dz = 0.0;
   if (idx[0] == 0){

       d1_p_dx = (-3*p_B0(2,0,0) + 4*p_B0(1,0,0) - (25.0/12.0)*p_B0(0,0,0) - (1.0/4.0)*p_B0(4,0,0) +
            ((4.0/3.0))*p_B0(3,0,0))*invDelta0block0;

       d1_pu0_dx = (-3*p_B0(2,0,0)*u0_B0(2,0,0) + 4*p_B0(1,0,0)*u0_B0(1,0,0) - (25.0/12.0)*p_B0(0,0,0)*u0_B0(0,0,0) -
            (1.0/4.0)*p_B0(4,0,0)*u0_B0(4,0,0) + ((4.0/3.0))*p_B0(3,0,0)*u0_B0(3,0,0))*invDelta0block0;

       d1_pu1_dx = (-3*p_B0(2,0,0)*u1_B0(2,0,0) + 4*p_B0(1,0,0)*u1_B0(1,0,0) - (25.0/12.0)*p_B0(0,0,0)*u1_B0(0,0,0) -
            (1.0/4.0)*p_B0(4,0,0)*u1_B0(4,0,0) + ((4.0/3.0))*p_B0(3,0,0)*u1_B0(3,0,0))*invDelta0block0;

       d1_rhoE_dx = (-3*rhoE_B0(2,0,0) + 4*rhoE_B0(1,0,0) - (25.0/12.0)*rhoE_B0(0,0,0) - (1.0/4.0)*rhoE_B0(4,0,0) +
            ((4.0/3.0))*rhoE_B0(3,0,0))*invDelta0block0;

       d1_rhoEu0_dx = (-3*u0_B0(2,0,0)*rhoE_B0(2,0,0) + 4*u0_B0(1,0,0)*rhoE_B0(1,0,0) -
            (25.0/12.0)*u0_B0(0,0,0)*rhoE_B0(0,0,0) - (1.0/4.0)*u0_B0(4,0,0)*rhoE_B0(4,0,0) +
            ((4.0/3.0))*u0_B0(3,0,0)*rhoE_B0(3,0,0))*invDelta0block0;

       d1_inv_rhoErhou0_dx = (-3*u0_B0(2,0,0)*rhoE_B0(2,0,0)/rho_B0(2,0,0) + 4*u0_B0(1,0,0)*rhoE_B0(1,0,0)/rho_B0(1,0,0)
            - (25.0/12.0)*u0_B0(0,0,0)*rhoE_B0(0,0,0)/rho_B0(0,0,0) -
            (1.0/4.0)*u0_B0(4,0,0)*rhoE_B0(4,0,0)/rho_B0(4,0,0) +
            ((4.0/3.0))*u0_B0(3,0,0)*rhoE_B0(3,0,0)/rho_B0(3,0,0))*invDelta0block0;

       d1_rhoEu1_dx = (-3*u1_B0(2,0,0)*rhoE_B0(2,0,0) + 4*u1_B0(1,0,0)*rhoE_B0(1,0,0) -
            (25.0/12.0)*u1_B0(0,0,0)*rhoE_B0(0,0,0) - (1.0/4.0)*u1_B0(4,0,0)*rhoE_B0(4,0,0) +
            ((4.0/3.0))*u1_B0(3,0,0)*rhoE_B0(3,0,0))*invDelta0block0;

       d1_inv_rhoErhou1_dx = (-3*u1_B0(2,0,0)*rhoE_B0(2,0,0)/rho_B0(2,0,0) + 4*u1_B0(1,0,0)*rhoE_B0(1,0,0)/rho_B0(1,0,0)
            - (25.0/12.0)*u1_B0(0,0,0)*rhoE_B0(0,0,0)/rho_B0(0,0,0) -
            (1.0/4.0)*u1_B0(4,0,0)*rhoE_B0(4,0,0)/rho_B0(4,0,0) +
            ((4.0/3.0))*u1_B0(3,0,0)*rhoE_B0(3,0,0)/rho_B0(3,0,0))*invDelta0block0;

       d1_inv_rhoErho_dx = (-3*rhoE_B0(2,0,0)/rho_B0(2,0,0) + 4*rhoE_B0(1,0,0)/rho_B0(1,0,0) -
            (25.0/12.0)*rhoE_B0(0,0,0)/rho_B0(0,0,0) - (1.0/4.0)*rhoE_B0(4,0,0)/rho_B0(4,0,0) +
            ((4.0/3.0))*rhoE_B0(3,0,0)/rho_B0(3,0,0))*invDelta0block0;

       d1_rho_dx = (-3*rho_B0(2,0,0) + 4*rho_B0(1,0,0) - (25.0/12.0)*rho_B0(0,0,0) - (1.0/4.0)*rho_B0(4,0,0) +
            ((4.0/3.0))*rho_B0(3,0,0))*invDelta0block0;

       d1_rhou0_dx = (-3*rhou0_B0(2,0,0) + 4*rhou0_B0(1,0,0) - (25.0/12.0)*rhou0_B0(0,0,0) - (1.0/4.0)*rhou0_B0(4,0,0) +
            ((4.0/3.0))*rhou0_B0(3,0,0))*invDelta0block0;

       d1_rhou0u0_dx = (-3*u0_B0(2,0,0)*rhou0_B0(2,0,0) + 4*u0_B0(1,0,0)*rhou0_B0(1,0,0) -
            (25.0/12.0)*u0_B0(0,0,0)*rhou0_B0(0,0,0) - (1.0/4.0)*u0_B0(4,0,0)*rhou0_B0(4,0,0) +
            ((4.0/3.0))*u0_B0(3,0,0)*rhou0_B0(3,0,0))*invDelta0block0;

       d1_rhou0u1_dx = (-3*u1_B0(2,0,0)*rhou0_B0(2,0,0) + 4*u1_B0(1,0,0)*rhou0_B0(1,0,0) -
            (25.0/12.0)*u1_B0(0,0,0)*rhou0_B0(0,0,0) - (1.0/4.0)*u1_B0(4,0,0)*rhou0_B0(4,0,0) +
            ((4.0/3.0))*u1_B0(3,0,0)*rhou0_B0(3,0,0))*invDelta0block0;

       d1_rhou0u2_dx = (-3*u2_B0(2,0,0)*rhou0_B0(2,0,0) + 4*u2_B0(1,0,0)*rhou0_B0(1,0,0) -
            (25.0/12.0)*u2_B0(0,0,0)*rhou0_B0(0,0,0) - (1.0/4.0)*u2_B0(4,0,0)*rhou0_B0(4,0,0) +
            ((4.0/3.0))*u2_B0(3,0,0)*rhou0_B0(3,0,0))*invDelta0block0;

       d1_rhou1_dx = (-3*rhou1_B0(2,0,0) + 4*rhou1_B0(1,0,0) - (25.0/12.0)*rhou1_B0(0,0,0) - (1.0/4.0)*rhou1_B0(4,0,0) +
            ((4.0/3.0))*rhou1_B0(3,0,0))*invDelta0block0;

       d1_rhou1u0_dx = (-3*u0_B0(2,0,0)*rhou1_B0(2,0,0) + 4*u0_B0(1,0,0)*rhou1_B0(1,0,0) -
            (25.0/12.0)*u0_B0(0,0,0)*rhou1_B0(0,0,0) - (1.0/4.0)*u0_B0(4,0,0)*rhou1_B0(4,0,0) +
            ((4.0/3.0))*u0_B0(3,0,0)*rhou1_B0(3,0,0))*invDelta0block0;

       d1_rhou1u1_dx = (-3*u1_B0(2,0,0)*rhou1_B0(2,0,0) + 4*u1_B0(1,0,0)*rhou1_B0(1,0,0) -
            (25.0/12.0)*u1_B0(0,0,0)*rhou1_B0(0,0,0) - (1.0/4.0)*u1_B0(4,0,0)*rhou1_B0(4,0,0) +
            ((4.0/3.0))*u1_B0(3,0,0)*rhou1_B0(3,0,0))*invDelta0block0;

       d1_rhou1u2_dx = (-3*u2_B0(2,0,0)*rhou1_B0(2,0,0) + 4*u2_B0(1,0,0)*rhou1_B0(1,0,0) -
            (25.0/12.0)*u2_B0(0,0,0)*rhou1_B0(0,0,0) - (1.0/4.0)*u2_B0(4,0,0)*rhou1_B0(4,0,0) +
            ((4.0/3.0))*u2_B0(3,0,0)*rhou1_B0(3,0,0))*invDelta0block0;

       d1_rhou2_dx = (-3*rhou2_B0(2,0,0) + 4*rhou2_B0(1,0,0) - (25.0/12.0)*rhou2_B0(0,0,0) - (1.0/4.0)*rhou2_B0(4,0,0) +
            ((4.0/3.0))*rhou2_B0(3,0,0))*invDelta0block0;

       d1_u0u0_dx = (-3*(u0_B0(2,0,0)*u0_B0(2,0,0)) + 4*(u0_B0(1,0,0)*u0_B0(1,0,0)) -
            (25.0/12.0)*(u0_B0(0,0,0)*u0_B0(0,0,0)) - (1.0/4.0)*(u0_B0(4,0,0)*u0_B0(4,0,0)) +
            ((4.0/3.0))*(u0_B0(3,0,0)*u0_B0(3,0,0)))*invDelta0block0;

       d1_u0u1_dx = (-3*u0_B0(2,0,0)*u1_B0(2,0,0) + 4*u0_B0(1,0,0)*u1_B0(1,0,0) - (25.0/12.0)*u0_B0(0,0,0)*u1_B0(0,0,0)
            - (1.0/4.0)*u0_B0(4,0,0)*u1_B0(4,0,0) + ((4.0/3.0))*u0_B0(3,0,0)*u1_B0(3,0,0))*invDelta0block0;

       d1_u0u2_dx = (-3*u0_B0(2,0,0)*u2_B0(2,0,0) + 4*u0_B0(1,0,0)*u2_B0(1,0,0) - (25.0/12.0)*u0_B0(0,0,0)*u2_B0(0,0,0)
            - (1.0/4.0)*u0_B0(4,0,0)*u2_B0(4,0,0) + ((4.0/3.0))*u0_B0(3,0,0)*u2_B0(3,0,0))*invDelta0block0;

       d1_u1u1_dx = (-3*(u1_B0(2,0,0)*u1_B0(2,0,0)) + 4*(u1_B0(1,0,0)*u1_B0(1,0,0)) -
            (25.0/12.0)*(u1_B0(0,0,0)*u1_B0(0,0,0)) - (1.0/4.0)*(u1_B0(4,0,0)*u1_B0(4,0,0)) +
            ((4.0/3.0))*(u1_B0(3,0,0)*u1_B0(3,0,0)))*invDelta0block0;

       d1_u1u2_dx = (-3*u1_B0(2,0,0)*u2_B0(2,0,0) + 4*u1_B0(1,0,0)*u2_B0(1,0,0) - (25.0/12.0)*u1_B0(0,0,0)*u2_B0(0,0,0)
            - (1.0/4.0)*u1_B0(4,0,0)*u2_B0(4,0,0) + ((4.0/3.0))*u1_B0(3,0,0)*u2_B0(3,0,0))*invDelta0block0;

   }

   else if (idx[0] == 1){

       d1_p_dx = (-(5.0/6.0)*p_B0(0,0,0) - (1.0/2.0)*p_B0(2,0,0) - (1.0/4.0)*p_B0(-1,0,0) + ((1.0/12.0))*p_B0(3,0,0) +
            ((3.0/2.0))*p_B0(1,0,0))*invDelta0block0;

       d1_pu0_dx = (-(5.0/6.0)*p_B0(0,0,0)*u0_B0(0,0,0) - (1.0/2.0)*p_B0(2,0,0)*u0_B0(2,0,0) -
            (1.0/4.0)*p_B0(-1,0,0)*u0_B0(-1,0,0) + ((1.0/12.0))*p_B0(3,0,0)*u0_B0(3,0,0) +
            ((3.0/2.0))*p_B0(1,0,0)*u0_B0(1,0,0))*invDelta0block0;

       d1_pu1_dx = (-(5.0/6.0)*p_B0(0,0,0)*u1_B0(0,0,0) - (1.0/2.0)*p_B0(2,0,0)*u1_B0(2,0,0) -
            (1.0/4.0)*p_B0(-1,0,0)*u1_B0(-1,0,0) + ((1.0/12.0))*p_B0(3,0,0)*u1_B0(3,0,0) +
            ((3.0/2.0))*p_B0(1,0,0)*u1_B0(1,0,0))*invDelta0block0;

       d1_rhoE_dx = (-(5.0/6.0)*rhoE_B0(0,0,0) - (1.0/2.0)*rhoE_B0(2,0,0) - (1.0/4.0)*rhoE_B0(-1,0,0) +
            ((1.0/12.0))*rhoE_B0(3,0,0) + ((3.0/2.0))*rhoE_B0(1,0,0))*invDelta0block0;

       d1_rhoEu0_dx = (-(5.0/6.0)*u0_B0(0,0,0)*rhoE_B0(0,0,0) - (1.0/2.0)*u0_B0(2,0,0)*rhoE_B0(2,0,0) -
            (1.0/4.0)*u0_B0(-1,0,0)*rhoE_B0(-1,0,0) + ((1.0/12.0))*u0_B0(3,0,0)*rhoE_B0(3,0,0) +
            ((3.0/2.0))*u0_B0(1,0,0)*rhoE_B0(1,0,0))*invDelta0block0;

       d1_inv_rhoErhou0_dx = (-(5.0/6.0)*u0_B0(0,0,0)*rhoE_B0(0,0,0)/rho_B0(0,0,0) -
            (1.0/2.0)*u0_B0(2,0,0)*rhoE_B0(2,0,0)/rho_B0(2,0,0) - (1.0/4.0)*u0_B0(-1,0,0)*rhoE_B0(-1,0,0)/rho_B0(-1,0,0)
            + ((1.0/12.0))*u0_B0(3,0,0)*rhoE_B0(3,0,0)/rho_B0(3,0,0) +
            ((3.0/2.0))*u0_B0(1,0,0)*rhoE_B0(1,0,0)/rho_B0(1,0,0))*invDelta0block0;

       d1_rhoEu1_dx = (-(5.0/6.0)*u1_B0(0,0,0)*rhoE_B0(0,0,0) - (1.0/2.0)*u1_B0(2,0,0)*rhoE_B0(2,0,0) -
            (1.0/4.0)*u1_B0(-1,0,0)*rhoE_B0(-1,0,0) + ((1.0/12.0))*u1_B0(3,0,0)*rhoE_B0(3,0,0) +
            ((3.0/2.0))*u1_B0(1,0,0)*rhoE_B0(1,0,0))*invDelta0block0;

       d1_inv_rhoErhou1_dx = (-(5.0/6.0)*u1_B0(0,0,0)*rhoE_B0(0,0,0)/rho_B0(0,0,0) -
            (1.0/2.0)*u1_B0(2,0,0)*rhoE_B0(2,0,0)/rho_B0(2,0,0) - (1.0/4.0)*u1_B0(-1,0,0)*rhoE_B0(-1,0,0)/rho_B0(-1,0,0)
            + ((1.0/12.0))*u1_B0(3,0,0)*rhoE_B0(3,0,0)/rho_B0(3,0,0) +
            ((3.0/2.0))*u1_B0(1,0,0)*rhoE_B0(1,0,0)/rho_B0(1,0,0))*invDelta0block0;

       d1_inv_rhoErho_dx = (-(5.0/6.0)*rhoE_B0(0,0,0)/rho_B0(0,0,0) - (1.0/2.0)*rhoE_B0(2,0,0)/rho_B0(2,0,0) -
            (1.0/4.0)*rhoE_B0(-1,0,0)/rho_B0(-1,0,0) + ((1.0/12.0))*rhoE_B0(3,0,0)/rho_B0(3,0,0) +
            ((3.0/2.0))*rhoE_B0(1,0,0)/rho_B0(1,0,0))*invDelta0block0;

       d1_rho_dx = (-(5.0/6.0)*rho_B0(0,0,0) - (1.0/2.0)*rho_B0(2,0,0) - (1.0/4.0)*rho_B0(-1,0,0) +
            ((1.0/12.0))*rho_B0(3,0,0) + ((3.0/2.0))*rho_B0(1,0,0))*invDelta0block0;

       d1_rhou0_dx = (-(5.0/6.0)*rhou0_B0(0,0,0) - (1.0/2.0)*rhou0_B0(2,0,0) - (1.0/4.0)*rhou0_B0(-1,0,0) +
            ((1.0/12.0))*rhou0_B0(3,0,0) + ((3.0/2.0))*rhou0_B0(1,0,0))*invDelta0block0;

       d1_rhou0u0_dx = (-(5.0/6.0)*u0_B0(0,0,0)*rhou0_B0(0,0,0) - (1.0/2.0)*u0_B0(2,0,0)*rhou0_B0(2,0,0) -
            (1.0/4.0)*u0_B0(-1,0,0)*rhou0_B0(-1,0,0) + ((1.0/12.0))*u0_B0(3,0,0)*rhou0_B0(3,0,0) +
            ((3.0/2.0))*u0_B0(1,0,0)*rhou0_B0(1,0,0))*invDelta0block0;

       d1_rhou0u1_dx = (-(5.0/6.0)*u1_B0(0,0,0)*rhou0_B0(0,0,0) - (1.0/2.0)*u1_B0(2,0,0)*rhou0_B0(2,0,0) -
            (1.0/4.0)*u1_B0(-1,0,0)*rhou0_B0(-1,0,0) + ((1.0/12.0))*u1_B0(3,0,0)*rhou0_B0(3,0,0) +
            ((3.0/2.0))*u1_B0(1,0,0)*rhou0_B0(1,0,0))*invDelta0block0;

       d1_rhou0u2_dx = (-(5.0/6.0)*u2_B0(0,0,0)*rhou0_B0(0,0,0) - (1.0/2.0)*u2_B0(2,0,0)*rhou0_B0(2,0,0) -
            (1.0/4.0)*u2_B0(-1,0,0)*rhou0_B0(-1,0,0) + ((1.0/12.0))*u2_B0(3,0,0)*rhou0_B0(3,0,0) +
            ((3.0/2.0))*u2_B0(1,0,0)*rhou0_B0(1,0,0))*invDelta0block0;

       d1_rhou1_dx = (-(5.0/6.0)*rhou1_B0(0,0,0) - (1.0/2.0)*rhou1_B0(2,0,0) - (1.0/4.0)*rhou1_B0(-1,0,0) +
            ((1.0/12.0))*rhou1_B0(3,0,0) + ((3.0/2.0))*rhou1_B0(1,0,0))*invDelta0block0;

       d1_rhou1u0_dx = (-(5.0/6.0)*u0_B0(0,0,0)*rhou1_B0(0,0,0) - (1.0/2.0)*u0_B0(2,0,0)*rhou1_B0(2,0,0) -
            (1.0/4.0)*u0_B0(-1,0,0)*rhou1_B0(-1,0,0) + ((1.0/12.0))*u0_B0(3,0,0)*rhou1_B0(3,0,0) +
            ((3.0/2.0))*u0_B0(1,0,0)*rhou1_B0(1,0,0))*invDelta0block0;

       d1_rhou1u1_dx = (-(5.0/6.0)*u1_B0(0,0,0)*rhou1_B0(0,0,0) - (1.0/2.0)*u1_B0(2,0,0)*rhou1_B0(2,0,0) -
            (1.0/4.0)*u1_B0(-1,0,0)*rhou1_B0(-1,0,0) + ((1.0/12.0))*u1_B0(3,0,0)*rhou1_B0(3,0,0) +
            ((3.0/2.0))*u1_B0(1,0,0)*rhou1_B0(1,0,0))*invDelta0block0;

       d1_rhou1u2_dx = (-(5.0/6.0)*u2_B0(0,0,0)*rhou1_B0(0,0,0) - (1.0/2.0)*u2_B0(2,0,0)*rhou1_B0(2,0,0) -
            (1.0/4.0)*u2_B0(-1,0,0)*rhou1_B0(-1,0,0) + ((1.0/12.0))*u2_B0(3,0,0)*rhou1_B0(3,0,0) +
            ((3.0/2.0))*u2_B0(1,0,0)*rhou1_B0(1,0,0))*invDelta0block0;

       d1_rhou2_dx = (-(5.0/6.0)*rhou2_B0(0,0,0) - (1.0/2.0)*rhou2_B0(2,0,0) - (1.0/4.0)*rhou2_B0(-1,0,0) +
            ((1.0/12.0))*rhou2_B0(3,0,0) + ((3.0/2.0))*rhou2_B0(1,0,0))*invDelta0block0;

       d1_u0u0_dx = (-(5.0/6.0)*(u0_B0(0,0,0)*u0_B0(0,0,0)) - (1.0/2.0)*(u0_B0(2,0,0)*u0_B0(2,0,0)) -
            (1.0/4.0)*(u0_B0(-1,0,0)*u0_B0(-1,0,0)) + ((1.0/12.0))*(u0_B0(3,0,0)*u0_B0(3,0,0)) +
            ((3.0/2.0))*(u0_B0(1,0,0)*u0_B0(1,0,0)))*invDelta0block0;

       d1_u0u1_dx = (-(5.0/6.0)*u0_B0(0,0,0)*u1_B0(0,0,0) - (1.0/2.0)*u0_B0(2,0,0)*u1_B0(2,0,0) -
            (1.0/4.0)*u0_B0(-1,0,0)*u1_B0(-1,0,0) + ((1.0/12.0))*u0_B0(3,0,0)*u1_B0(3,0,0) +
            ((3.0/2.0))*u0_B0(1,0,0)*u1_B0(1,0,0))*invDelta0block0;

       d1_u0u2_dx = (-(5.0/6.0)*u0_B0(0,0,0)*u2_B0(0,0,0) - (1.0/2.0)*u0_B0(2,0,0)*u2_B0(2,0,0) -
            (1.0/4.0)*u0_B0(-1,0,0)*u2_B0(-1,0,0) + ((1.0/12.0))*u0_B0(3,0,0)*u2_B0(3,0,0) +
            ((3.0/2.0))*u0_B0(1,0,0)*u2_B0(1,0,0))*invDelta0block0;

       d1_u1u1_dx = (-(5.0/6.0)*(u1_B0(0,0,0)*u1_B0(0,0,0)) - (1.0/2.0)*(u1_B0(2,0,0)*u1_B0(2,0,0)) -
            (1.0/4.0)*(u1_B0(-1,0,0)*u1_B0(-1,0,0)) + ((1.0/12.0))*(u1_B0(3,0,0)*u1_B0(3,0,0)) +
            ((3.0/2.0))*(u1_B0(1,0,0)*u1_B0(1,0,0)))*invDelta0block0;

       d1_u1u2_dx = (-(5.0/6.0)*u1_B0(0,0,0)*u2_B0(0,0,0) - (1.0/2.0)*u1_B0(2,0,0)*u2_B0(2,0,0) -
            (1.0/4.0)*u1_B0(-1,0,0)*u2_B0(-1,0,0) + ((1.0/12.0))*u1_B0(3,0,0)*u2_B0(3,0,0) +
            ((3.0/2.0))*u1_B0(1,0,0)*u2_B0(1,0,0))*invDelta0block0;

   }

   else if (idx[0] == -1 + block0np0){

       d1_p_dx = (-4*p_B0(-1,0,0) + 3*p_B0(-2,0,0) - (4.0/3.0)*p_B0(-3,0,0) + ((1.0/4.0))*p_B0(-4,0,0) +
            ((25.0/12.0))*p_B0(0,0,0))*invDelta0block0;

       d1_pu0_dx = (-4*p_B0(-1,0,0)*u0_B0(-1,0,0) + 3*p_B0(-2,0,0)*u0_B0(-2,0,0) - (4.0/3.0)*p_B0(-3,0,0)*u0_B0(-3,0,0)
            + ((1.0/4.0))*p_B0(-4,0,0)*u0_B0(-4,0,0) + ((25.0/12.0))*p_B0(0,0,0)*u0_B0(0,0,0))*invDelta0block0;

       d1_pu1_dx = (-4*p_B0(-1,0,0)*u1_B0(-1,0,0) + 3*p_B0(-2,0,0)*u1_B0(-2,0,0) - (4.0/3.0)*p_B0(-3,0,0)*u1_B0(-3,0,0)
            + ((1.0/4.0))*p_B0(-4,0,0)*u1_B0(-4,0,0) + ((25.0/12.0))*p_B0(0,0,0)*u1_B0(0,0,0))*invDelta0block0;

       d1_rhoE_dx = (-4*rhoE_B0(-1,0,0) + 3*rhoE_B0(-2,0,0) - (4.0/3.0)*rhoE_B0(-3,0,0) + ((1.0/4.0))*rhoE_B0(-4,0,0) +
            ((25.0/12.0))*rhoE_B0(0,0,0))*invDelta0block0;

       d1_rhoEu0_dx = (-4*u0_B0(-1,0,0)*rhoE_B0(-1,0,0) + 3*u0_B0(-2,0,0)*rhoE_B0(-2,0,0) -
            (4.0/3.0)*u0_B0(-3,0,0)*rhoE_B0(-3,0,0) + ((1.0/4.0))*u0_B0(-4,0,0)*rhoE_B0(-4,0,0) +
            ((25.0/12.0))*u0_B0(0,0,0)*rhoE_B0(0,0,0))*invDelta0block0;

       d1_inv_rhoErhou0_dx = (-4*u0_B0(-1,0,0)*rhoE_B0(-1,0,0)/rho_B0(-1,0,0) +
            3*u0_B0(-2,0,0)*rhoE_B0(-2,0,0)/rho_B0(-2,0,0) - (4.0/3.0)*u0_B0(-3,0,0)*rhoE_B0(-3,0,0)/rho_B0(-3,0,0) +
            ((1.0/4.0))*u0_B0(-4,0,0)*rhoE_B0(-4,0,0)/rho_B0(-4,0,0) +
            ((25.0/12.0))*u0_B0(0,0,0)*rhoE_B0(0,0,0)/rho_B0(0,0,0))*invDelta0block0;

       d1_rhoEu1_dx = (-4*u1_B0(-1,0,0)*rhoE_B0(-1,0,0) + 3*u1_B0(-2,0,0)*rhoE_B0(-2,0,0) -
            (4.0/3.0)*u1_B0(-3,0,0)*rhoE_B0(-3,0,0) + ((1.0/4.0))*u1_B0(-4,0,0)*rhoE_B0(-4,0,0) +
            ((25.0/12.0))*u1_B0(0,0,0)*rhoE_B0(0,0,0))*invDelta0block0;

       d1_inv_rhoErhou1_dx = (-4*u1_B0(-1,0,0)*rhoE_B0(-1,0,0)/rho_B0(-1,0,0) +
            3*u1_B0(-2,0,0)*rhoE_B0(-2,0,0)/rho_B0(-2,0,0) - (4.0/3.0)*u1_B0(-3,0,0)*rhoE_B0(-3,0,0)/rho_B0(-3,0,0) +
            ((1.0/4.0))*u1_B0(-4,0,0)*rhoE_B0(-4,0,0)/rho_B0(-4,0,0) +
            ((25.0/12.0))*u1_B0(0,0,0)*rhoE_B0(0,0,0)/rho_B0(0,0,0))*invDelta0block0;

       d1_inv_rhoErho_dx = (-4*rhoE_B0(-1,0,0)/rho_B0(-1,0,0) + 3*rhoE_B0(-2,0,0)/rho_B0(-2,0,0) -
            (4.0/3.0)*rhoE_B0(-3,0,0)/rho_B0(-3,0,0) + ((1.0/4.0))*rhoE_B0(-4,0,0)/rho_B0(-4,0,0) +
            ((25.0/12.0))*rhoE_B0(0,0,0)/rho_B0(0,0,0))*invDelta0block0;

       d1_rho_dx = (-4*rho_B0(-1,0,0) + 3*rho_B0(-2,0,0) - (4.0/3.0)*rho_B0(-3,0,0) + ((1.0/4.0))*rho_B0(-4,0,0) +
            ((25.0/12.0))*rho_B0(0,0,0))*invDelta0block0;

       d1_rhou0_dx = (-4*rhou0_B0(-1,0,0) + 3*rhou0_B0(-2,0,0) - (4.0/3.0)*rhou0_B0(-3,0,0) +
            ((1.0/4.0))*rhou0_B0(-4,0,0) + ((25.0/12.0))*rhou0_B0(0,0,0))*invDelta0block0;

       d1_rhou0u0_dx = (-4*u0_B0(-1,0,0)*rhou0_B0(-1,0,0) + 3*u0_B0(-2,0,0)*rhou0_B0(-2,0,0) -
            (4.0/3.0)*u0_B0(-3,0,0)*rhou0_B0(-3,0,0) + ((1.0/4.0))*u0_B0(-4,0,0)*rhou0_B0(-4,0,0) +
            ((25.0/12.0))*u0_B0(0,0,0)*rhou0_B0(0,0,0))*invDelta0block0;

       d1_rhou0u1_dx = (-4*u1_B0(-1,0,0)*rhou0_B0(-1,0,0) + 3*u1_B0(-2,0,0)*rhou0_B0(-2,0,0) -
            (4.0/3.0)*u1_B0(-3,0,0)*rhou0_B0(-3,0,0) + ((1.0/4.0))*u1_B0(-4,0,0)*rhou0_B0(-4,0,0) +
            ((25.0/12.0))*u1_B0(0,0,0)*rhou0_B0(0,0,0))*invDelta0block0;

       d1_rhou0u2_dx = (-4*u2_B0(-1,0,0)*rhou0_B0(-1,0,0) + 3*u2_B0(-2,0,0)*rhou0_B0(-2,0,0) -
            (4.0/3.0)*u2_B0(-3,0,0)*rhou0_B0(-3,0,0) + ((1.0/4.0))*u2_B0(-4,0,0)*rhou0_B0(-4,0,0) +
            ((25.0/12.0))*u2_B0(0,0,0)*rhou0_B0(0,0,0))*invDelta0block0;

       d1_rhou1_dx = (-4*rhou1_B0(-1,0,0) + 3*rhou1_B0(-2,0,0) - (4.0/3.0)*rhou1_B0(-3,0,0) +
            ((1.0/4.0))*rhou1_B0(-4,0,0) + ((25.0/12.0))*rhou1_B0(0,0,0))*invDelta0block0;

       d1_rhou1u0_dx = (-4*u0_B0(-1,0,0)*rhou1_B0(-1,0,0) + 3*u0_B0(-2,0,0)*rhou1_B0(-2,0,0) -
            (4.0/3.0)*u0_B0(-3,0,0)*rhou1_B0(-3,0,0) + ((1.0/4.0))*u0_B0(-4,0,0)*rhou1_B0(-4,0,0) +
            ((25.0/12.0))*u0_B0(0,0,0)*rhou1_B0(0,0,0))*invDelta0block0;

       d1_rhou1u1_dx = (-4*u1_B0(-1,0,0)*rhou1_B0(-1,0,0) + 3*u1_B0(-2,0,0)*rhou1_B0(-2,0,0) -
            (4.0/3.0)*u1_B0(-3,0,0)*rhou1_B0(-3,0,0) + ((1.0/4.0))*u1_B0(-4,0,0)*rhou1_B0(-4,0,0) +
            ((25.0/12.0))*u1_B0(0,0,0)*rhou1_B0(0,0,0))*invDelta0block0;

       d1_rhou1u2_dx = (-4*u2_B0(-1,0,0)*rhou1_B0(-1,0,0) + 3*u2_B0(-2,0,0)*rhou1_B0(-2,0,0) -
            (4.0/3.0)*u2_B0(-3,0,0)*rhou1_B0(-3,0,0) + ((1.0/4.0))*u2_B0(-4,0,0)*rhou1_B0(-4,0,0) +
            ((25.0/12.0))*u2_B0(0,0,0)*rhou1_B0(0,0,0))*invDelta0block0;

       d1_rhou2_dx = (-4*rhou2_B0(-1,0,0) + 3*rhou2_B0(-2,0,0) - (4.0/3.0)*rhou2_B0(-3,0,0) +
            ((1.0/4.0))*rhou2_B0(-4,0,0) + ((25.0/12.0))*rhou2_B0(0,0,0))*invDelta0block0;

       d1_u0u0_dx = (-4*(u0_B0(-1,0,0)*u0_B0(-1,0,0)) + 3*(u0_B0(-2,0,0)*u0_B0(-2,0,0)) -
            (4.0/3.0)*(u0_B0(-3,0,0)*u0_B0(-3,0,0)) + ((1.0/4.0))*(u0_B0(-4,0,0)*u0_B0(-4,0,0)) +
            ((25.0/12.0))*(u0_B0(0,0,0)*u0_B0(0,0,0)))*invDelta0block0;

       d1_u0u1_dx = (-4*u0_B0(-1,0,0)*u1_B0(-1,0,0) + 3*u0_B0(-2,0,0)*u1_B0(-2,0,0) -
            (4.0/3.0)*u0_B0(-3,0,0)*u1_B0(-3,0,0) + ((1.0/4.0))*u0_B0(-4,0,0)*u1_B0(-4,0,0) +
            ((25.0/12.0))*u0_B0(0,0,0)*u1_B0(0,0,0))*invDelta0block0;

       d1_u0u2_dx = (-4*u0_B0(-1,0,0)*u2_B0(-1,0,0) + 3*u0_B0(-2,0,0)*u2_B0(-2,0,0) -
            (4.0/3.0)*u0_B0(-3,0,0)*u2_B0(-3,0,0) + ((1.0/4.0))*u0_B0(-4,0,0)*u2_B0(-4,0,0) +
            ((25.0/12.0))*u0_B0(0,0,0)*u2_B0(0,0,0))*invDelta0block0;

       d1_u1u1_dx = (-4*(u1_B0(-1,0,0)*u1_B0(-1,0,0)) + 3*(u1_B0(-2,0,0)*u1_B0(-2,0,0)) -
            (4.0/3.0)*(u1_B0(-3,0,0)*u1_B0(-3,0,0)) + ((1.0/4.0))*(u1_B0(-4,0,0)*u1_B0(-4,0,0)) +
            ((25.0/12.0))*(u1_B0(0,0,0)*u1_B0(0,0,0)))*invDelta0block0;

       d1_u1u2_dx = (-4*u1_B0(-1,0,0)*u2_B0(-1,0,0) + 3*u1_B0(-2,0,0)*u2_B0(-2,0,0) -
            (4.0/3.0)*u1_B0(-3,0,0)*u2_B0(-3,0,0) + ((1.0/4.0))*u1_B0(-4,0,0)*u2_B0(-4,0,0) +
            ((25.0/12.0))*u1_B0(0,0,0)*u2_B0(0,0,0))*invDelta0block0;

   }

   else if (idx[0] == -2 + block0np0){

       d1_p_dx = (((1.0/2.0))*p_B0(-2,0,0) - (3.0/2.0)*p_B0(-1,0,0) - (1.0/12.0)*p_B0(-3,0,0) + ((1.0/4.0))*p_B0(1,0,0)
            + ((5.0/6.0))*p_B0(0,0,0))*invDelta0block0;

       d1_pu0_dx = (((1.0/2.0))*p_B0(-2,0,0)*u0_B0(-2,0,0) - (3.0/2.0)*p_B0(-1,0,0)*u0_B0(-1,0,0) -
            (1.0/12.0)*p_B0(-3,0,0)*u0_B0(-3,0,0) + ((1.0/4.0))*p_B0(1,0,0)*u0_B0(1,0,0) +
            ((5.0/6.0))*p_B0(0,0,0)*u0_B0(0,0,0))*invDelta0block0;

       d1_pu1_dx = (((1.0/2.0))*p_B0(-2,0,0)*u1_B0(-2,0,0) - (3.0/2.0)*p_B0(-1,0,0)*u1_B0(-1,0,0) -
            (1.0/12.0)*p_B0(-3,0,0)*u1_B0(-3,0,0) + ((1.0/4.0))*p_B0(1,0,0)*u1_B0(1,0,0) +
            ((5.0/6.0))*p_B0(0,0,0)*u1_B0(0,0,0))*invDelta0block0;

       d1_rhoE_dx = (((1.0/2.0))*rhoE_B0(-2,0,0) - (3.0/2.0)*rhoE_B0(-1,0,0) - (1.0/12.0)*rhoE_B0(-3,0,0) +
            ((1.0/4.0))*rhoE_B0(1,0,0) + ((5.0/6.0))*rhoE_B0(0,0,0))*invDelta0block0;

       d1_rhoEu0_dx = (((1.0/2.0))*u0_B0(-2,0,0)*rhoE_B0(-2,0,0) - (3.0/2.0)*u0_B0(-1,0,0)*rhoE_B0(-1,0,0) -
            (1.0/12.0)*u0_B0(-3,0,0)*rhoE_B0(-3,0,0) + ((1.0/4.0))*u0_B0(1,0,0)*rhoE_B0(1,0,0) +
            ((5.0/6.0))*u0_B0(0,0,0)*rhoE_B0(0,0,0))*invDelta0block0;

       d1_inv_rhoErhou0_dx = (((1.0/2.0))*u0_B0(-2,0,0)*rhoE_B0(-2,0,0)/rho_B0(-2,0,0) -
            (3.0/2.0)*u0_B0(-1,0,0)*rhoE_B0(-1,0,0)/rho_B0(-1,0,0) -
            (1.0/12.0)*u0_B0(-3,0,0)*rhoE_B0(-3,0,0)/rho_B0(-3,0,0) +
            ((1.0/4.0))*u0_B0(1,0,0)*rhoE_B0(1,0,0)/rho_B0(1,0,0) +
            ((5.0/6.0))*u0_B0(0,0,0)*rhoE_B0(0,0,0)/rho_B0(0,0,0))*invDelta0block0;

       d1_rhoEu1_dx = (((1.0/2.0))*u1_B0(-2,0,0)*rhoE_B0(-2,0,0) - (3.0/2.0)*u1_B0(-1,0,0)*rhoE_B0(-1,0,0) -
            (1.0/12.0)*u1_B0(-3,0,0)*rhoE_B0(-3,0,0) + ((1.0/4.0))*u1_B0(1,0,0)*rhoE_B0(1,0,0) +
            ((5.0/6.0))*u1_B0(0,0,0)*rhoE_B0(0,0,0))*invDelta0block0;

       d1_inv_rhoErhou1_dx = (((1.0/2.0))*u1_B0(-2,0,0)*rhoE_B0(-2,0,0)/rho_B0(-2,0,0) -
            (3.0/2.0)*u1_B0(-1,0,0)*rhoE_B0(-1,0,0)/rho_B0(-1,0,0) -
            (1.0/12.0)*u1_B0(-3,0,0)*rhoE_B0(-3,0,0)/rho_B0(-3,0,0) +
            ((1.0/4.0))*u1_B0(1,0,0)*rhoE_B0(1,0,0)/rho_B0(1,0,0) +
            ((5.0/6.0))*u1_B0(0,0,0)*rhoE_B0(0,0,0)/rho_B0(0,0,0))*invDelta0block0;

       d1_inv_rhoErho_dx = (((1.0/2.0))*rhoE_B0(-2,0,0)/rho_B0(-2,0,0) - (3.0/2.0)*rhoE_B0(-1,0,0)/rho_B0(-1,0,0) -
            (1.0/12.0)*rhoE_B0(-3,0,0)/rho_B0(-3,0,0) + ((1.0/4.0))*rhoE_B0(1,0,0)/rho_B0(1,0,0) +
            ((5.0/6.0))*rhoE_B0(0,0,0)/rho_B0(0,0,0))*invDelta0block0;

       d1_rho_dx = (((1.0/2.0))*rho_B0(-2,0,0) - (3.0/2.0)*rho_B0(-1,0,0) - (1.0/12.0)*rho_B0(-3,0,0) +
            ((1.0/4.0))*rho_B0(1,0,0) + ((5.0/6.0))*rho_B0(0,0,0))*invDelta0block0;

       d1_rhou0_dx = (((1.0/2.0))*rhou0_B0(-2,0,0) - (3.0/2.0)*rhou0_B0(-1,0,0) - (1.0/12.0)*rhou0_B0(-3,0,0) +
            ((1.0/4.0))*rhou0_B0(1,0,0) + ((5.0/6.0))*rhou0_B0(0,0,0))*invDelta0block0;

       d1_rhou0u0_dx = (((1.0/2.0))*u0_B0(-2,0,0)*rhou0_B0(-2,0,0) - (3.0/2.0)*u0_B0(-1,0,0)*rhou0_B0(-1,0,0) -
            (1.0/12.0)*u0_B0(-3,0,0)*rhou0_B0(-3,0,0) + ((1.0/4.0))*u0_B0(1,0,0)*rhou0_B0(1,0,0) +
            ((5.0/6.0))*u0_B0(0,0,0)*rhou0_B0(0,0,0))*invDelta0block0;

       d1_rhou0u1_dx = (((1.0/2.0))*u1_B0(-2,0,0)*rhou0_B0(-2,0,0) - (3.0/2.0)*u1_B0(-1,0,0)*rhou0_B0(-1,0,0) -
            (1.0/12.0)*u1_B0(-3,0,0)*rhou0_B0(-3,0,0) + ((1.0/4.0))*u1_B0(1,0,0)*rhou0_B0(1,0,0) +
            ((5.0/6.0))*u1_B0(0,0,0)*rhou0_B0(0,0,0))*invDelta0block0;

       d1_rhou0u2_dx = (((1.0/2.0))*u2_B0(-2,0,0)*rhou0_B0(-2,0,0) - (3.0/2.0)*u2_B0(-1,0,0)*rhou0_B0(-1,0,0) -
            (1.0/12.0)*u2_B0(-3,0,0)*rhou0_B0(-3,0,0) + ((1.0/4.0))*u2_B0(1,0,0)*rhou0_B0(1,0,0) +
            ((5.0/6.0))*u2_B0(0,0,0)*rhou0_B0(0,0,0))*invDelta0block0;

       d1_rhou1_dx = (((1.0/2.0))*rhou1_B0(-2,0,0) - (3.0/2.0)*rhou1_B0(-1,0,0) - (1.0/12.0)*rhou1_B0(-3,0,0) +
            ((1.0/4.0))*rhou1_B0(1,0,0) + ((5.0/6.0))*rhou1_B0(0,0,0))*invDelta0block0;

       d1_rhou1u0_dx = (((1.0/2.0))*u0_B0(-2,0,0)*rhou1_B0(-2,0,0) - (3.0/2.0)*u0_B0(-1,0,0)*rhou1_B0(-1,0,0) -
            (1.0/12.0)*u0_B0(-3,0,0)*rhou1_B0(-3,0,0) + ((1.0/4.0))*u0_B0(1,0,0)*rhou1_B0(1,0,0) +
            ((5.0/6.0))*u0_B0(0,0,0)*rhou1_B0(0,0,0))*invDelta0block0;

       d1_rhou1u1_dx = (((1.0/2.0))*u1_B0(-2,0,0)*rhou1_B0(-2,0,0) - (3.0/2.0)*u1_B0(-1,0,0)*rhou1_B0(-1,0,0) -
            (1.0/12.0)*u1_B0(-3,0,0)*rhou1_B0(-3,0,0) + ((1.0/4.0))*u1_B0(1,0,0)*rhou1_B0(1,0,0) +
            ((5.0/6.0))*u1_B0(0,0,0)*rhou1_B0(0,0,0))*invDelta0block0;

       d1_rhou1u2_dx = (((1.0/2.0))*u2_B0(-2,0,0)*rhou1_B0(-2,0,0) - (3.0/2.0)*u2_B0(-1,0,0)*rhou1_B0(-1,0,0) -
            (1.0/12.0)*u2_B0(-3,0,0)*rhou1_B0(-3,0,0) + ((1.0/4.0))*u2_B0(1,0,0)*rhou1_B0(1,0,0) +
            ((5.0/6.0))*u2_B0(0,0,0)*rhou1_B0(0,0,0))*invDelta0block0;

       d1_rhou2_dx = (((1.0/2.0))*rhou2_B0(-2,0,0) - (3.0/2.0)*rhou2_B0(-1,0,0) - (1.0/12.0)*rhou2_B0(-3,0,0) +
            ((1.0/4.0))*rhou2_B0(1,0,0) + ((5.0/6.0))*rhou2_B0(0,0,0))*invDelta0block0;

       d1_u0u0_dx = (((1.0/2.0))*(u0_B0(-2,0,0)*u0_B0(-2,0,0)) - (3.0/2.0)*(u0_B0(-1,0,0)*u0_B0(-1,0,0)) -
            (1.0/12.0)*(u0_B0(-3,0,0)*u0_B0(-3,0,0)) + ((1.0/4.0))*(u0_B0(1,0,0)*u0_B0(1,0,0)) +
            ((5.0/6.0))*(u0_B0(0,0,0)*u0_B0(0,0,0)))*invDelta0block0;

       d1_u0u1_dx = (((1.0/2.0))*u0_B0(-2,0,0)*u1_B0(-2,0,0) - (3.0/2.0)*u0_B0(-1,0,0)*u1_B0(-1,0,0) -
            (1.0/12.0)*u0_B0(-3,0,0)*u1_B0(-3,0,0) + ((1.0/4.0))*u0_B0(1,0,0)*u1_B0(1,0,0) +
            ((5.0/6.0))*u0_B0(0,0,0)*u1_B0(0,0,0))*invDelta0block0;

       d1_u0u2_dx = (((1.0/2.0))*u0_B0(-2,0,0)*u2_B0(-2,0,0) - (3.0/2.0)*u0_B0(-1,0,0)*u2_B0(-1,0,0) -
            (1.0/12.0)*u0_B0(-3,0,0)*u2_B0(-3,0,0) + ((1.0/4.0))*u0_B0(1,0,0)*u2_B0(1,0,0) +
            ((5.0/6.0))*u0_B0(0,0,0)*u2_B0(0,0,0))*invDelta0block0;

       d1_u1u1_dx = (((1.0/2.0))*(u1_B0(-2,0,0)*u1_B0(-2,0,0)) - (3.0/2.0)*(u1_B0(-1,0,0)*u1_B0(-1,0,0)) -
            (1.0/12.0)*(u1_B0(-3,0,0)*u1_B0(-3,0,0)) + ((1.0/4.0))*(u1_B0(1,0,0)*u1_B0(1,0,0)) +
            ((5.0/6.0))*(u1_B0(0,0,0)*u1_B0(0,0,0)))*invDelta0block0;

       d1_u1u2_dx = (((1.0/2.0))*u1_B0(-2,0,0)*u2_B0(-2,0,0) - (3.0/2.0)*u1_B0(-1,0,0)*u2_B0(-1,0,0) -
            (1.0/12.0)*u1_B0(-3,0,0)*u2_B0(-3,0,0) + ((1.0/4.0))*u1_B0(1,0,0)*u2_B0(1,0,0) +
            ((5.0/6.0))*u1_B0(0,0,0)*u2_B0(0,0,0))*invDelta0block0;

   }

   else{

       d1_p_dx = (-(2.0/3.0)*p_B0(-1,0,0) - (1.0/12.0)*p_B0(2,0,0) + ((1.0/12.0))*p_B0(-2,0,0) +
            ((2.0/3.0))*p_B0(1,0,0))*invDelta0block0;

       d1_pu0_dx = (-(2.0/3.0)*p_B0(-1,0,0)*u0_B0(-1,0,0) - (1.0/12.0)*p_B0(2,0,0)*u0_B0(2,0,0) +
            ((1.0/12.0))*p_B0(-2,0,0)*u0_B0(-2,0,0) + ((2.0/3.0))*p_B0(1,0,0)*u0_B0(1,0,0))*invDelta0block0;

       d1_pu1_dx = (-(2.0/3.0)*p_B0(-1,0,0)*u1_B0(-1,0,0) - (1.0/12.0)*p_B0(2,0,0)*u1_B0(2,0,0) +
            ((1.0/12.0))*p_B0(-2,0,0)*u1_B0(-2,0,0) + ((2.0/3.0))*p_B0(1,0,0)*u1_B0(1,0,0))*invDelta0block0;

       d1_rhoE_dx = (-(2.0/3.0)*rhoE_B0(-1,0,0) - (1.0/12.0)*rhoE_B0(2,0,0) + ((1.0/12.0))*rhoE_B0(-2,0,0) +
            ((2.0/3.0))*rhoE_B0(1,0,0))*invDelta0block0;

       d1_rhoEu0_dx = (-(2.0/3.0)*u0_B0(-1,0,0)*rhoE_B0(-1,0,0) - (1.0/12.0)*u0_B0(2,0,0)*rhoE_B0(2,0,0) +
            ((1.0/12.0))*u0_B0(-2,0,0)*rhoE_B0(-2,0,0) + ((2.0/3.0))*u0_B0(1,0,0)*rhoE_B0(1,0,0))*invDelta0block0;

       d1_inv_rhoErhou0_dx = (-(2.0/3.0)*u0_B0(-1,0,0)*rhoE_B0(-1,0,0)/rho_B0(-1,0,0) -
            (1.0/12.0)*u0_B0(2,0,0)*rhoE_B0(2,0,0)/rho_B0(2,0,0) +
            ((1.0/12.0))*u0_B0(-2,0,0)*rhoE_B0(-2,0,0)/rho_B0(-2,0,0) +
            ((2.0/3.0))*u0_B0(1,0,0)*rhoE_B0(1,0,0)/rho_B0(1,0,0))*invDelta0block0;

       d1_rhoEu1_dx = (-(2.0/3.0)*u1_B0(-1,0,0)*rhoE_B0(-1,0,0) - (1.0/12.0)*u1_B0(2,0,0)*rhoE_B0(2,0,0) +
            ((1.0/12.0))*u1_B0(-2,0,0)*rhoE_B0(-2,0,0) + ((2.0/3.0))*u1_B0(1,0,0)*rhoE_B0(1,0,0))*invDelta0block0;

       d1_inv_rhoErhou1_dx = (-(2.0/3.0)*u1_B0(-1,0,0)*rhoE_B0(-1,0,0)/rho_B0(-1,0,0) -
            (1.0/12.0)*u1_B0(2,0,0)*rhoE_B0(2,0,0)/rho_B0(2,0,0) +
            ((1.0/12.0))*u1_B0(-2,0,0)*rhoE_B0(-2,0,0)/rho_B0(-2,0,0) +
            ((2.0/3.0))*u1_B0(1,0,0)*rhoE_B0(1,0,0)/rho_B0(1,0,0))*invDelta0block0;

       d1_inv_rhoErho_dx = (-(2.0/3.0)*rhoE_B0(-1,0,0)/rho_B0(-1,0,0) - (1.0/12.0)*rhoE_B0(2,0,0)/rho_B0(2,0,0) +
            ((1.0/12.0))*rhoE_B0(-2,0,0)/rho_B0(-2,0,0) + ((2.0/3.0))*rhoE_B0(1,0,0)/rho_B0(1,0,0))*invDelta0block0;

       d1_rho_dx = (-(2.0/3.0)*rho_B0(-1,0,0) - (1.0/12.0)*rho_B0(2,0,0) + ((1.0/12.0))*rho_B0(-2,0,0) +
            ((2.0/3.0))*rho_B0(1,0,0))*invDelta0block0;

       d1_rhou0_dx = (-(2.0/3.0)*rhou0_B0(-1,0,0) - (1.0/12.0)*rhou0_B0(2,0,0) + ((1.0/12.0))*rhou0_B0(-2,0,0) +
            ((2.0/3.0))*rhou0_B0(1,0,0))*invDelta0block0;

       d1_rhou0u0_dx = (-(2.0/3.0)*u0_B0(-1,0,0)*rhou0_B0(-1,0,0) - (1.0/12.0)*u0_B0(2,0,0)*rhou0_B0(2,0,0) +
            ((1.0/12.0))*u0_B0(-2,0,0)*rhou0_B0(-2,0,0) + ((2.0/3.0))*u0_B0(1,0,0)*rhou0_B0(1,0,0))*invDelta0block0;

       d1_rhou0u1_dx = (-(2.0/3.0)*u1_B0(-1,0,0)*rhou0_B0(-1,0,0) - (1.0/12.0)*u1_B0(2,0,0)*rhou0_B0(2,0,0) +
            ((1.0/12.0))*u1_B0(-2,0,0)*rhou0_B0(-2,0,0) + ((2.0/3.0))*u1_B0(1,0,0)*rhou0_B0(1,0,0))*invDelta0block0;

       d1_rhou0u2_dx = (-(2.0/3.0)*u2_B0(-1,0,0)*rhou0_B0(-1,0,0) - (1.0/12.0)*u2_B0(2,0,0)*rhou0_B0(2,0,0) +
            ((1.0/12.0))*u2_B0(-2,0,0)*rhou0_B0(-2,0,0) + ((2.0/3.0))*u2_B0(1,0,0)*rhou0_B0(1,0,0))*invDelta0block0;

       d1_rhou1_dx = (-(2.0/3.0)*rhou1_B0(-1,0,0) - (1.0/12.0)*rhou1_B0(2,0,0) + ((1.0/12.0))*rhou1_B0(-2,0,0) +
            ((2.0/3.0))*rhou1_B0(1,0,0))*invDelta0block0;

       d1_rhou1u0_dx = (-(2.0/3.0)*u0_B0(-1,0,0)*rhou1_B0(-1,0,0) - (1.0/12.0)*u0_B0(2,0,0)*rhou1_B0(2,0,0) +
            ((1.0/12.0))*u0_B0(-2,0,0)*rhou1_B0(-2,0,0) + ((2.0/3.0))*u0_B0(1,0,0)*rhou1_B0(1,0,0))*invDelta0block0;

       d1_rhou1u1_dx = (-(2.0/3.0)*u1_B0(-1,0,0)*rhou1_B0(-1,0,0) - (1.0/12.0)*u1_B0(2,0,0)*rhou1_B0(2,0,0) +
            ((1.0/12.0))*u1_B0(-2,0,0)*rhou1_B0(-2,0,0) + ((2.0/3.0))*u1_B0(1,0,0)*rhou1_B0(1,0,0))*invDelta0block0;

       d1_rhou1u2_dx = (-(2.0/3.0)*u2_B0(-1,0,0)*rhou1_B0(-1,0,0) - (1.0/12.0)*u2_B0(2,0,0)*rhou1_B0(2,0,0) +
            ((1.0/12.0))*u2_B0(-2,0,0)*rhou1_B0(-2,0,0) + ((2.0/3.0))*u2_B0(1,0,0)*rhou1_B0(1,0,0))*invDelta0block0;

       d1_rhou2_dx = (-(2.0/3.0)*rhou2_B0(-1,0,0) - (1.0/12.0)*rhou2_B0(2,0,0) + ((1.0/12.0))*rhou2_B0(-2,0,0) +
            ((2.0/3.0))*rhou2_B0(1,0,0))*invDelta0block0;

       d1_u0u0_dx = (-(2.0/3.0)*(u0_B0(-1,0,0)*u0_B0(-1,0,0)) - (1.0/12.0)*(u0_B0(2,0,0)*u0_B0(2,0,0)) +
            ((1.0/12.0))*(u0_B0(-2,0,0)*u0_B0(-2,0,0)) + ((2.0/3.0))*(u0_B0(1,0,0)*u0_B0(1,0,0)))*invDelta0block0;

       d1_u0u1_dx = (-(2.0/3.0)*u0_B0(-1,0,0)*u1_B0(-1,0,0) - (1.0/12.0)*u0_B0(2,0,0)*u1_B0(2,0,0) +
            ((1.0/12.0))*u0_B0(-2,0,0)*u1_B0(-2,0,0) + ((2.0/3.0))*u0_B0(1,0,0)*u1_B0(1,0,0))*invDelta0block0;

       d1_u0u2_dx = (-(2.0/3.0)*u0_B0(-1,0,0)*u2_B0(-1,0,0) - (1.0/12.0)*u0_B0(2,0,0)*u2_B0(2,0,0) +
            ((1.0/12.0))*u0_B0(-2,0,0)*u2_B0(-2,0,0) + ((2.0/3.0))*u0_B0(1,0,0)*u2_B0(1,0,0))*invDelta0block0;

       d1_u1u1_dx = (-(2.0/3.0)*(u1_B0(-1,0,0)*u1_B0(-1,0,0)) - (1.0/12.0)*(u1_B0(2,0,0)*u1_B0(2,0,0)) +
            ((1.0/12.0))*(u1_B0(-2,0,0)*u1_B0(-2,0,0)) + ((2.0/3.0))*(u1_B0(1,0,0)*u1_B0(1,0,0)))*invDelta0block0;

       d1_u1u2_dx = (-(2.0/3.0)*u1_B0(-1,0,0)*u2_B0(-1,0,0) - (1.0/12.0)*u1_B0(2,0,0)*u2_B0(2,0,0) +
            ((1.0/12.0))*u1_B0(-2,0,0)*u2_B0(-2,0,0) + ((2.0/3.0))*u1_B0(1,0,0)*u2_B0(1,0,0))*invDelta0block0;

   }

   if (idx[1] == 0){

       d1_p_dy = (-3*p_B0(0,2,0) + 4*p_B0(0,1,0) - (25.0/12.0)*p_B0(0,0,0) - (1.0/4.0)*p_B0(0,4,0) +
            ((4.0/3.0))*p_B0(0,3,0))*invDelta1block0;

       d1_pu0_dy = (-3*p_B0(0,2,0)*u0_B0(0,2,0) + 4*p_B0(0,1,0)*u0_B0(0,1,0) - (25.0/12.0)*p_B0(0,0,0)*u0_B0(0,0,0) -
            (1.0/4.0)*p_B0(0,4,0)*u0_B0(0,4,0) + ((4.0/3.0))*p_B0(0,3,0)*u0_B0(0,3,0))*invDelta1block0;

       d1_pu1_dy = (-3*p_B0(0,2,0)*u1_B0(0,2,0) + 4*p_B0(0,1,0)*u1_B0(0,1,0) - (25.0/12.0)*p_B0(0,0,0)*u1_B0(0,0,0) -
            (1.0/4.0)*p_B0(0,4,0)*u1_B0(0,4,0) + ((4.0/3.0))*p_B0(0,3,0)*u1_B0(0,3,0))*invDelta1block0;

       d1_rhoE_dy = (-3*rhoE_B0(0,2,0) + 4*rhoE_B0(0,1,0) - (25.0/12.0)*rhoE_B0(0,0,0) - (1.0/4.0)*rhoE_B0(0,4,0) +
            ((4.0/3.0))*rhoE_B0(0,3,0))*invDelta1block0;

       d1_rhoEu0_dy = (-3*u0_B0(0,2,0)*rhoE_B0(0,2,0) + 4*u0_B0(0,1,0)*rhoE_B0(0,1,0) -
            (25.0/12.0)*u0_B0(0,0,0)*rhoE_B0(0,0,0) - (1.0/4.0)*u0_B0(0,4,0)*rhoE_B0(0,4,0) +
            ((4.0/3.0))*u0_B0(0,3,0)*rhoE_B0(0,3,0))*invDelta1block0;

       d1_inv_rhoErhou0_dy = (-3*u0_B0(0,2,0)*rhoE_B0(0,2,0)/rho_B0(0,2,0) + 4*u0_B0(0,1,0)*rhoE_B0(0,1,0)/rho_B0(0,1,0)
            - (25.0/12.0)*u0_B0(0,0,0)*rhoE_B0(0,0,0)/rho_B0(0,0,0) -
            (1.0/4.0)*u0_B0(0,4,0)*rhoE_B0(0,4,0)/rho_B0(0,4,0) +
            ((4.0/3.0))*u0_B0(0,3,0)*rhoE_B0(0,3,0)/rho_B0(0,3,0))*invDelta1block0;

       d1_rhoEu1_dy = (-3*u1_B0(0,2,0)*rhoE_B0(0,2,0) + 4*u1_B0(0,1,0)*rhoE_B0(0,1,0) -
            (25.0/12.0)*u1_B0(0,0,0)*rhoE_B0(0,0,0) - (1.0/4.0)*u1_B0(0,4,0)*rhoE_B0(0,4,0) +
            ((4.0/3.0))*u1_B0(0,3,0)*rhoE_B0(0,3,0))*invDelta1block0;

       d1_inv_rhoErhou1_dy = (-3*u1_B0(0,2,0)*rhoE_B0(0,2,0)/rho_B0(0,2,0) + 4*u1_B0(0,1,0)*rhoE_B0(0,1,0)/rho_B0(0,1,0)
            - (25.0/12.0)*u1_B0(0,0,0)*rhoE_B0(0,0,0)/rho_B0(0,0,0) -
            (1.0/4.0)*u1_B0(0,4,0)*rhoE_B0(0,4,0)/rho_B0(0,4,0) +
            ((4.0/3.0))*u1_B0(0,3,0)*rhoE_B0(0,3,0)/rho_B0(0,3,0))*invDelta1block0;

       d1_inv_rhoErho_dy = (-3*rhoE_B0(0,2,0)/rho_B0(0,2,0) + 4*rhoE_B0(0,1,0)/rho_B0(0,1,0) -
            (25.0/12.0)*rhoE_B0(0,0,0)/rho_B0(0,0,0) - (1.0/4.0)*rhoE_B0(0,4,0)/rho_B0(0,4,0) +
            ((4.0/3.0))*rhoE_B0(0,3,0)/rho_B0(0,3,0))*invDelta1block0;

       d1_rho_dy = (-3*rho_B0(0,2,0) + 4*rho_B0(0,1,0) - (25.0/12.0)*rho_B0(0,0,0) - (1.0/4.0)*rho_B0(0,4,0) +
            ((4.0/3.0))*rho_B0(0,3,0))*invDelta1block0;

       d1_rhou0_dy = (-3*rhou0_B0(0,2,0) + 4*rhou0_B0(0,1,0) - (25.0/12.0)*rhou0_B0(0,0,0) - (1.0/4.0)*rhou0_B0(0,4,0) +
            ((4.0/3.0))*rhou0_B0(0,3,0))*invDelta1block0;

       d1_rhou0u0_dy = (-3*u0_B0(0,2,0)*rhou0_B0(0,2,0) + 4*u0_B0(0,1,0)*rhou0_B0(0,1,0) -
            (25.0/12.0)*u0_B0(0,0,0)*rhou0_B0(0,0,0) - (1.0/4.0)*u0_B0(0,4,0)*rhou0_B0(0,4,0) +
            ((4.0/3.0))*u0_B0(0,3,0)*rhou0_B0(0,3,0))*invDelta1block0;

       d1_rhou0u1_dy = (-3*u1_B0(0,2,0)*rhou0_B0(0,2,0) + 4*u1_B0(0,1,0)*rhou0_B0(0,1,0) -
            (25.0/12.0)*u1_B0(0,0,0)*rhou0_B0(0,0,0) - (1.0/4.0)*u1_B0(0,4,0)*rhou0_B0(0,4,0) +
            ((4.0/3.0))*u1_B0(0,3,0)*rhou0_B0(0,3,0))*invDelta1block0;

       d1_rhou0u2_dy = (-3*u2_B0(0,2,0)*rhou0_B0(0,2,0) + 4*u2_B0(0,1,0)*rhou0_B0(0,1,0) -
            (25.0/12.0)*u2_B0(0,0,0)*rhou0_B0(0,0,0) - (1.0/4.0)*u2_B0(0,4,0)*rhou0_B0(0,4,0) +
            ((4.0/3.0))*u2_B0(0,3,0)*rhou0_B0(0,3,0))*invDelta1block0;

       d1_rhou1_dy = (-3*rhou1_B0(0,2,0) + 4*rhou1_B0(0,1,0) - (25.0/12.0)*rhou1_B0(0,0,0) - (1.0/4.0)*rhou1_B0(0,4,0) +
            ((4.0/3.0))*rhou1_B0(0,3,0))*invDelta1block0;

       d1_rhou1u0_dy = (-3*u0_B0(0,2,0)*rhou1_B0(0,2,0) + 4*u0_B0(0,1,0)*rhou1_B0(0,1,0) -
            (25.0/12.0)*u0_B0(0,0,0)*rhou1_B0(0,0,0) - (1.0/4.0)*u0_B0(0,4,0)*rhou1_B0(0,4,0) +
            ((4.0/3.0))*u0_B0(0,3,0)*rhou1_B0(0,3,0))*invDelta1block0;

       d1_rhou1u1_dy = (-3*u1_B0(0,2,0)*rhou1_B0(0,2,0) + 4*u1_B0(0,1,0)*rhou1_B0(0,1,0) -
            (25.0/12.0)*u1_B0(0,0,0)*rhou1_B0(0,0,0) - (1.0/4.0)*u1_B0(0,4,0)*rhou1_B0(0,4,0) +
            ((4.0/3.0))*u1_B0(0,3,0)*rhou1_B0(0,3,0))*invDelta1block0;

       d1_rhou1u2_dy = (-3*u2_B0(0,2,0)*rhou1_B0(0,2,0) + 4*u2_B0(0,1,0)*rhou1_B0(0,1,0) -
            (25.0/12.0)*u2_B0(0,0,0)*rhou1_B0(0,0,0) - (1.0/4.0)*u2_B0(0,4,0)*rhou1_B0(0,4,0) +
            ((4.0/3.0))*u2_B0(0,3,0)*rhou1_B0(0,3,0))*invDelta1block0;

       d1_rhou2_dy = (-3*rhou2_B0(0,2,0) + 4*rhou2_B0(0,1,0) - (25.0/12.0)*rhou2_B0(0,0,0) - (1.0/4.0)*rhou2_B0(0,4,0) +
            ((4.0/3.0))*rhou2_B0(0,3,0))*invDelta1block0;

       d1_u0u0_dy = (-3*(u0_B0(0,2,0)*u0_B0(0,2,0)) + 4*(u0_B0(0,1,0)*u0_B0(0,1,0)) -
            (25.0/12.0)*(u0_B0(0,0,0)*u0_B0(0,0,0)) - (1.0/4.0)*(u0_B0(0,4,0)*u0_B0(0,4,0)) +
            ((4.0/3.0))*(u0_B0(0,3,0)*u0_B0(0,3,0)))*invDelta1block0;

       d1_u0u1_dy = (-3*u0_B0(0,2,0)*u1_B0(0,2,0) + 4*u0_B0(0,1,0)*u1_B0(0,1,0) - (25.0/12.0)*u0_B0(0,0,0)*u1_B0(0,0,0)
            - (1.0/4.0)*u0_B0(0,4,0)*u1_B0(0,4,0) + ((4.0/3.0))*u0_B0(0,3,0)*u1_B0(0,3,0))*invDelta1block0;

       d1_u0u2_dy = (-3*u0_B0(0,2,0)*u2_B0(0,2,0) + 4*u0_B0(0,1,0)*u2_B0(0,1,0) - (25.0/12.0)*u0_B0(0,0,0)*u2_B0(0,0,0)
            - (1.0/4.0)*u0_B0(0,4,0)*u2_B0(0,4,0) + ((4.0/3.0))*u0_B0(0,3,0)*u2_B0(0,3,0))*invDelta1block0;

       d1_u1u1_dy = (-3*(u1_B0(0,2,0)*u1_B0(0,2,0)) + 4*(u1_B0(0,1,0)*u1_B0(0,1,0)) -
            (25.0/12.0)*(u1_B0(0,0,0)*u1_B0(0,0,0)) - (1.0/4.0)*(u1_B0(0,4,0)*u1_B0(0,4,0)) +
            ((4.0/3.0))*(u1_B0(0,3,0)*u1_B0(0,3,0)))*invDelta1block0;

       d1_u1u2_dy = (-3*u1_B0(0,2,0)*u2_B0(0,2,0) + 4*u1_B0(0,1,0)*u2_B0(0,1,0) - (25.0/12.0)*u1_B0(0,0,0)*u2_B0(0,0,0)
            - (1.0/4.0)*u1_B0(0,4,0)*u2_B0(0,4,0) + ((4.0/3.0))*u1_B0(0,3,0)*u2_B0(0,3,0))*invDelta1block0;

   }

   else if (idx[1] == 1){

       d1_p_dy = (-(5.0/6.0)*p_B0(0,0,0) - (1.0/2.0)*p_B0(0,2,0) - (1.0/4.0)*p_B0(0,-1,0) + ((1.0/12.0))*p_B0(0,3,0) +
            ((3.0/2.0))*p_B0(0,1,0))*invDelta1block0;

       d1_pu0_dy = (-(5.0/6.0)*p_B0(0,0,0)*u0_B0(0,0,0) - (1.0/2.0)*p_B0(0,2,0)*u0_B0(0,2,0) -
            (1.0/4.0)*p_B0(0,-1,0)*u0_B0(0,-1,0) + ((1.0/12.0))*p_B0(0,3,0)*u0_B0(0,3,0) +
            ((3.0/2.0))*p_B0(0,1,0)*u0_B0(0,1,0))*invDelta1block0;

       d1_pu1_dy = (-(5.0/6.0)*p_B0(0,0,0)*u1_B0(0,0,0) - (1.0/2.0)*p_B0(0,2,0)*u1_B0(0,2,0) -
            (1.0/4.0)*p_B0(0,-1,0)*u1_B0(0,-1,0) + ((1.0/12.0))*p_B0(0,3,0)*u1_B0(0,3,0) +
            ((3.0/2.0))*p_B0(0,1,0)*u1_B0(0,1,0))*invDelta1block0;

       d1_rhoE_dy = (-(5.0/6.0)*rhoE_B0(0,0,0) - (1.0/2.0)*rhoE_B0(0,2,0) - (1.0/4.0)*rhoE_B0(0,-1,0) +
            ((1.0/12.0))*rhoE_B0(0,3,0) + ((3.0/2.0))*rhoE_B0(0,1,0))*invDelta1block0;

       d1_rhoEu0_dy = (-(5.0/6.0)*u0_B0(0,0,0)*rhoE_B0(0,0,0) - (1.0/2.0)*u0_B0(0,2,0)*rhoE_B0(0,2,0) -
            (1.0/4.0)*u0_B0(0,-1,0)*rhoE_B0(0,-1,0) + ((1.0/12.0))*u0_B0(0,3,0)*rhoE_B0(0,3,0) +
            ((3.0/2.0))*u0_B0(0,1,0)*rhoE_B0(0,1,0))*invDelta1block0;

       d1_inv_rhoErhou0_dy = (-(5.0/6.0)*u0_B0(0,0,0)*rhoE_B0(0,0,0)/rho_B0(0,0,0) -
            (1.0/2.0)*u0_B0(0,2,0)*rhoE_B0(0,2,0)/rho_B0(0,2,0) - (1.0/4.0)*u0_B0(0,-1,0)*rhoE_B0(0,-1,0)/rho_B0(0,-1,0)
            + ((1.0/12.0))*u0_B0(0,3,0)*rhoE_B0(0,3,0)/rho_B0(0,3,0) +
            ((3.0/2.0))*u0_B0(0,1,0)*rhoE_B0(0,1,0)/rho_B0(0,1,0))*invDelta1block0;

       d1_rhoEu1_dy = (-(5.0/6.0)*u1_B0(0,0,0)*rhoE_B0(0,0,0) - (1.0/2.0)*u1_B0(0,2,0)*rhoE_B0(0,2,0) -
            (1.0/4.0)*u1_B0(0,-1,0)*rhoE_B0(0,-1,0) + ((1.0/12.0))*u1_B0(0,3,0)*rhoE_B0(0,3,0) +
            ((3.0/2.0))*u1_B0(0,1,0)*rhoE_B0(0,1,0))*invDelta1block0;

       d1_inv_rhoErhou1_dy = (-(5.0/6.0)*u1_B0(0,0,0)*rhoE_B0(0,0,0)/rho_B0(0,0,0) -
            (1.0/2.0)*u1_B0(0,2,0)*rhoE_B0(0,2,0)/rho_B0(0,2,0) - (1.0/4.0)*u1_B0(0,-1,0)*rhoE_B0(0,-1,0)/rho_B0(0,-1,0)
            + ((1.0/12.0))*u1_B0(0,3,0)*rhoE_B0(0,3,0)/rho_B0(0,3,0) +
            ((3.0/2.0))*u1_B0(0,1,0)*rhoE_B0(0,1,0)/rho_B0(0,1,0))*invDelta1block0;

       d1_inv_rhoErho_dy = (-(5.0/6.0)*rhoE_B0(0,0,0)/rho_B0(0,0,0) - (1.0/2.0)*rhoE_B0(0,2,0)/rho_B0(0,2,0) -
            (1.0/4.0)*rhoE_B0(0,-1,0)/rho_B0(0,-1,0) + ((1.0/12.0))*rhoE_B0(0,3,0)/rho_B0(0,3,0) +
            ((3.0/2.0))*rhoE_B0(0,1,0)/rho_B0(0,1,0))*invDelta1block0;

       d1_rho_dy = (-(5.0/6.0)*rho_B0(0,0,0) - (1.0/2.0)*rho_B0(0,2,0) - (1.0/4.0)*rho_B0(0,-1,0) +
            ((1.0/12.0))*rho_B0(0,3,0) + ((3.0/2.0))*rho_B0(0,1,0))*invDelta1block0;

       d1_rhou0_dy = (-(5.0/6.0)*rhou0_B0(0,0,0) - (1.0/2.0)*rhou0_B0(0,2,0) - (1.0/4.0)*rhou0_B0(0,-1,0) +
            ((1.0/12.0))*rhou0_B0(0,3,0) + ((3.0/2.0))*rhou0_B0(0,1,0))*invDelta1block0;

       d1_rhou0u0_dy = (-(5.0/6.0)*u0_B0(0,0,0)*rhou0_B0(0,0,0) - (1.0/2.0)*u0_B0(0,2,0)*rhou0_B0(0,2,0) -
            (1.0/4.0)*u0_B0(0,-1,0)*rhou0_B0(0,-1,0) + ((1.0/12.0))*u0_B0(0,3,0)*rhou0_B0(0,3,0) +
            ((3.0/2.0))*u0_B0(0,1,0)*rhou0_B0(0,1,0))*invDelta1block0;

       d1_rhou0u1_dy = (-(5.0/6.0)*u1_B0(0,0,0)*rhou0_B0(0,0,0) - (1.0/2.0)*u1_B0(0,2,0)*rhou0_B0(0,2,0) -
            (1.0/4.0)*u1_B0(0,-1,0)*rhou0_B0(0,-1,0) + ((1.0/12.0))*u1_B0(0,3,0)*rhou0_B0(0,3,0) +
            ((3.0/2.0))*u1_B0(0,1,0)*rhou0_B0(0,1,0))*invDelta1block0;

       d1_rhou0u2_dy = (-(5.0/6.0)*u2_B0(0,0,0)*rhou0_B0(0,0,0) - (1.0/2.0)*u2_B0(0,2,0)*rhou0_B0(0,2,0) -
            (1.0/4.0)*u2_B0(0,-1,0)*rhou0_B0(0,-1,0) + ((1.0/12.0))*u2_B0(0,3,0)*rhou0_B0(0,3,0) +
            ((3.0/2.0))*u2_B0(0,1,0)*rhou0_B0(0,1,0))*invDelta1block0;

       d1_rhou1_dy = (-(5.0/6.0)*rhou1_B0(0,0,0) - (1.0/2.0)*rhou1_B0(0,2,0) - (1.0/4.0)*rhou1_B0(0,-1,0) +
            ((1.0/12.0))*rhou1_B0(0,3,0) + ((3.0/2.0))*rhou1_B0(0,1,0))*invDelta1block0;

       d1_rhou1u0_dy = (-(5.0/6.0)*u0_B0(0,0,0)*rhou1_B0(0,0,0) - (1.0/2.0)*u0_B0(0,2,0)*rhou1_B0(0,2,0) -
            (1.0/4.0)*u0_B0(0,-1,0)*rhou1_B0(0,-1,0) + ((1.0/12.0))*u0_B0(0,3,0)*rhou1_B0(0,3,0) +
            ((3.0/2.0))*u0_B0(0,1,0)*rhou1_B0(0,1,0))*invDelta1block0;

       d1_rhou1u1_dy = (-(5.0/6.0)*u1_B0(0,0,0)*rhou1_B0(0,0,0) - (1.0/2.0)*u1_B0(0,2,0)*rhou1_B0(0,2,0) -
            (1.0/4.0)*u1_B0(0,-1,0)*rhou1_B0(0,-1,0) + ((1.0/12.0))*u1_B0(0,3,0)*rhou1_B0(0,3,0) +
            ((3.0/2.0))*u1_B0(0,1,0)*rhou1_B0(0,1,0))*invDelta1block0;

       d1_rhou1u2_dy = (-(5.0/6.0)*u2_B0(0,0,0)*rhou1_B0(0,0,0) - (1.0/2.0)*u2_B0(0,2,0)*rhou1_B0(0,2,0) -
            (1.0/4.0)*u2_B0(0,-1,0)*rhou1_B0(0,-1,0) + ((1.0/12.0))*u2_B0(0,3,0)*rhou1_B0(0,3,0) +
            ((3.0/2.0))*u2_B0(0,1,0)*rhou1_B0(0,1,0))*invDelta1block0;

       d1_rhou2_dy = (-(5.0/6.0)*rhou2_B0(0,0,0) - (1.0/2.0)*rhou2_B0(0,2,0) - (1.0/4.0)*rhou2_B0(0,-1,0) +
            ((1.0/12.0))*rhou2_B0(0,3,0) + ((3.0/2.0))*rhou2_B0(0,1,0))*invDelta1block0;

       d1_u0u0_dy = (-(5.0/6.0)*(u0_B0(0,0,0)*u0_B0(0,0,0)) - (1.0/2.0)*(u0_B0(0,2,0)*u0_B0(0,2,0)) -
            (1.0/4.0)*(u0_B0(0,-1,0)*u0_B0(0,-1,0)) + ((1.0/12.0))*(u0_B0(0,3,0)*u0_B0(0,3,0)) +
            ((3.0/2.0))*(u0_B0(0,1,0)*u0_B0(0,1,0)))*invDelta1block0;

       d1_u0u1_dy = (-(5.0/6.0)*u0_B0(0,0,0)*u1_B0(0,0,0) - (1.0/2.0)*u0_B0(0,2,0)*u1_B0(0,2,0) -
            (1.0/4.0)*u0_B0(0,-1,0)*u1_B0(0,-1,0) + ((1.0/12.0))*u0_B0(0,3,0)*u1_B0(0,3,0) +
            ((3.0/2.0))*u0_B0(0,1,0)*u1_B0(0,1,0))*invDelta1block0;

       d1_u0u2_dy = (-(5.0/6.0)*u0_B0(0,0,0)*u2_B0(0,0,0) - (1.0/2.0)*u0_B0(0,2,0)*u2_B0(0,2,0) -
            (1.0/4.0)*u0_B0(0,-1,0)*u2_B0(0,-1,0) + ((1.0/12.0))*u0_B0(0,3,0)*u2_B0(0,3,0) +
            ((3.0/2.0))*u0_B0(0,1,0)*u2_B0(0,1,0))*invDelta1block0;

       d1_u1u1_dy = (-(5.0/6.0)*(u1_B0(0,0,0)*u1_B0(0,0,0)) - (1.0/2.0)*(u1_B0(0,2,0)*u1_B0(0,2,0)) -
            (1.0/4.0)*(u1_B0(0,-1,0)*u1_B0(0,-1,0)) + ((1.0/12.0))*(u1_B0(0,3,0)*u1_B0(0,3,0)) +
            ((3.0/2.0))*(u1_B0(0,1,0)*u1_B0(0,1,0)))*invDelta1block0;

       d1_u1u2_dy = (-(5.0/6.0)*u1_B0(0,0,0)*u2_B0(0,0,0) - (1.0/2.0)*u1_B0(0,2,0)*u2_B0(0,2,0) -
            (1.0/4.0)*u1_B0(0,-1,0)*u2_B0(0,-1,0) + ((1.0/12.0))*u1_B0(0,3,0)*u2_B0(0,3,0) +
            ((3.0/2.0))*u1_B0(0,1,0)*u2_B0(0,1,0))*invDelta1block0;

   }

   else{

       d1_p_dy = (-(2.0/3.0)*p_B0(0,-1,0) - (1.0/12.0)*p_B0(0,2,0) + ((1.0/12.0))*p_B0(0,-2,0) +
            ((2.0/3.0))*p_B0(0,1,0))*invDelta1block0;

       d1_pu0_dy = (-(2.0/3.0)*p_B0(0,-1,0)*u0_B0(0,-1,0) - (1.0/12.0)*p_B0(0,2,0)*u0_B0(0,2,0) +
            ((1.0/12.0))*p_B0(0,-2,0)*u0_B0(0,-2,0) + ((2.0/3.0))*p_B0(0,1,0)*u0_B0(0,1,0))*invDelta1block0;

       d1_pu1_dy = (-(2.0/3.0)*p_B0(0,-1,0)*u1_B0(0,-1,0) - (1.0/12.0)*p_B0(0,2,0)*u1_B0(0,2,0) +
            ((1.0/12.0))*p_B0(0,-2,0)*u1_B0(0,-2,0) + ((2.0/3.0))*p_B0(0,1,0)*u1_B0(0,1,0))*invDelta1block0;

       d1_rhoE_dy = (-(2.0/3.0)*rhoE_B0(0,-1,0) - (1.0/12.0)*rhoE_B0(0,2,0) + ((1.0/12.0))*rhoE_B0(0,-2,0) +
            ((2.0/3.0))*rhoE_B0(0,1,0))*invDelta1block0;

       d1_rhoEu0_dy = (-(2.0/3.0)*u0_B0(0,-1,0)*rhoE_B0(0,-1,0) - (1.0/12.0)*u0_B0(0,2,0)*rhoE_B0(0,2,0) +
            ((1.0/12.0))*u0_B0(0,-2,0)*rhoE_B0(0,-2,0) + ((2.0/3.0))*u0_B0(0,1,0)*rhoE_B0(0,1,0))*invDelta1block0;

       d1_inv_rhoErhou0_dy = (-(2.0/3.0)*u0_B0(0,-1,0)*rhoE_B0(0,-1,0)/rho_B0(0,-1,0) -
            (1.0/12.0)*u0_B0(0,2,0)*rhoE_B0(0,2,0)/rho_B0(0,2,0) +
            ((1.0/12.0))*u0_B0(0,-2,0)*rhoE_B0(0,-2,0)/rho_B0(0,-2,0) +
            ((2.0/3.0))*u0_B0(0,1,0)*rhoE_B0(0,1,0)/rho_B0(0,1,0))*invDelta1block0;

       d1_rhoEu1_dy = (-(2.0/3.0)*u1_B0(0,-1,0)*rhoE_B0(0,-1,0) - (1.0/12.0)*u1_B0(0,2,0)*rhoE_B0(0,2,0) +
            ((1.0/12.0))*u1_B0(0,-2,0)*rhoE_B0(0,-2,0) + ((2.0/3.0))*u1_B0(0,1,0)*rhoE_B0(0,1,0))*invDelta1block0;

       d1_inv_rhoErhou1_dy = (-(2.0/3.0)*u1_B0(0,-1,0)*rhoE_B0(0,-1,0)/rho_B0(0,-1,0) -
            (1.0/12.0)*u1_B0(0,2,0)*rhoE_B0(0,2,0)/rho_B0(0,2,0) +
            ((1.0/12.0))*u1_B0(0,-2,0)*rhoE_B0(0,-2,0)/rho_B0(0,-2,0) +
            ((2.0/3.0))*u1_B0(0,1,0)*rhoE_B0(0,1,0)/rho_B0(0,1,0))*invDelta1block0;

       d1_inv_rhoErho_dy = (-(2.0/3.0)*rhoE_B0(0,-1,0)/rho_B0(0,-1,0) - (1.0/12.0)*rhoE_B0(0,2,0)/rho_B0(0,2,0) +
            ((1.0/12.0))*rhoE_B0(0,-2,0)/rho_B0(0,-2,0) + ((2.0/3.0))*rhoE_B0(0,1,0)/rho_B0(0,1,0))*invDelta1block0;

       d1_rho_dy = (-(2.0/3.0)*rho_B0(0,-1,0) - (1.0/12.0)*rho_B0(0,2,0) + ((1.0/12.0))*rho_B0(0,-2,0) +
            ((2.0/3.0))*rho_B0(0,1,0))*invDelta1block0;

       d1_rhou0_dy = (-(2.0/3.0)*rhou0_B0(0,-1,0) - (1.0/12.0)*rhou0_B0(0,2,0) + ((1.0/12.0))*rhou0_B0(0,-2,0) +
            ((2.0/3.0))*rhou0_B0(0,1,0))*invDelta1block0;

       d1_rhou0u0_dy = (-(2.0/3.0)*u0_B0(0,-1,0)*rhou0_B0(0,-1,0) - (1.0/12.0)*u0_B0(0,2,0)*rhou0_B0(0,2,0) +
            ((1.0/12.0))*u0_B0(0,-2,0)*rhou0_B0(0,-2,0) + ((2.0/3.0))*u0_B0(0,1,0)*rhou0_B0(0,1,0))*invDelta1block0;

       d1_rhou0u1_dy = (-(2.0/3.0)*u1_B0(0,-1,0)*rhou0_B0(0,-1,0) - (1.0/12.0)*u1_B0(0,2,0)*rhou0_B0(0,2,0) +
            ((1.0/12.0))*u1_B0(0,-2,0)*rhou0_B0(0,-2,0) + ((2.0/3.0))*u1_B0(0,1,0)*rhou0_B0(0,1,0))*invDelta1block0;

       d1_rhou0u2_dy = (-(2.0/3.0)*u2_B0(0,-1,0)*rhou0_B0(0,-1,0) - (1.0/12.0)*u2_B0(0,2,0)*rhou0_B0(0,2,0) +
            ((1.0/12.0))*u2_B0(0,-2,0)*rhou0_B0(0,-2,0) + ((2.0/3.0))*u2_B0(0,1,0)*rhou0_B0(0,1,0))*invDelta1block0;

       d1_rhou1_dy = (-(2.0/3.0)*rhou1_B0(0,-1,0) - (1.0/12.0)*rhou1_B0(0,2,0) + ((1.0/12.0))*rhou1_B0(0,-2,0) +
            ((2.0/3.0))*rhou1_B0(0,1,0))*invDelta1block0;

       d1_rhou1u0_dy = (-(2.0/3.0)*u0_B0(0,-1,0)*rhou1_B0(0,-1,0) - (1.0/12.0)*u0_B0(0,2,0)*rhou1_B0(0,2,0) +
            ((1.0/12.0))*u0_B0(0,-2,0)*rhou1_B0(0,-2,0) + ((2.0/3.0))*u0_B0(0,1,0)*rhou1_B0(0,1,0))*invDelta1block0;

       d1_rhou1u1_dy = (-(2.0/3.0)*u1_B0(0,-1,0)*rhou1_B0(0,-1,0) - (1.0/12.0)*u1_B0(0,2,0)*rhou1_B0(0,2,0) +
            ((1.0/12.0))*u1_B0(0,-2,0)*rhou1_B0(0,-2,0) + ((2.0/3.0))*u1_B0(0,1,0)*rhou1_B0(0,1,0))*invDelta1block0;

       d1_rhou1u2_dy = (-(2.0/3.0)*u2_B0(0,-1,0)*rhou1_B0(0,-1,0) - (1.0/12.0)*u2_B0(0,2,0)*rhou1_B0(0,2,0) +
            ((1.0/12.0))*u2_B0(0,-2,0)*rhou1_B0(0,-2,0) + ((2.0/3.0))*u2_B0(0,1,0)*rhou1_B0(0,1,0))*invDelta1block0;

       d1_rhou2_dy = (-(2.0/3.0)*rhou2_B0(0,-1,0) - (1.0/12.0)*rhou2_B0(0,2,0) + ((1.0/12.0))*rhou2_B0(0,-2,0) +
            ((2.0/3.0))*rhou2_B0(0,1,0))*invDelta1block0;

       d1_u0u0_dy = (-(2.0/3.0)*(u0_B0(0,-1,0)*u0_B0(0,-1,0)) - (1.0/12.0)*(u0_B0(0,2,0)*u0_B0(0,2,0)) +
            ((1.0/12.0))*(u0_B0(0,-2,0)*u0_B0(0,-2,0)) + ((2.0/3.0))*(u0_B0(0,1,0)*u0_B0(0,1,0)))*invDelta1block0;

       d1_u0u1_dy = (-(2.0/3.0)*u0_B0(0,-1,0)*u1_B0(0,-1,0) - (1.0/12.0)*u0_B0(0,2,0)*u1_B0(0,2,0) +
            ((1.0/12.0))*u0_B0(0,-2,0)*u1_B0(0,-2,0) + ((2.0/3.0))*u0_B0(0,1,0)*u1_B0(0,1,0))*invDelta1block0;

       d1_u0u2_dy = (-(2.0/3.0)*u0_B0(0,-1,0)*u2_B0(0,-1,0) - (1.0/12.0)*u0_B0(0,2,0)*u2_B0(0,2,0) +
            ((1.0/12.0))*u0_B0(0,-2,0)*u2_B0(0,-2,0) + ((2.0/3.0))*u0_B0(0,1,0)*u2_B0(0,1,0))*invDelta1block0;

       d1_u1u1_dy = (-(2.0/3.0)*(u1_B0(0,-1,0)*u1_B0(0,-1,0)) - (1.0/12.0)*(u1_B0(0,2,0)*u1_B0(0,2,0)) +
            ((1.0/12.0))*(u1_B0(0,-2,0)*u1_B0(0,-2,0)) + ((2.0/3.0))*(u1_B0(0,1,0)*u1_B0(0,1,0)))*invDelta1block0;

       d1_u1u2_dy = (-(2.0/3.0)*u1_B0(0,-1,0)*u2_B0(0,-1,0) - (1.0/12.0)*u1_B0(0,2,0)*u2_B0(0,2,0) +
            ((1.0/12.0))*u1_B0(0,-2,0)*u2_B0(0,-2,0) + ((2.0/3.0))*u1_B0(0,1,0)*u2_B0(0,1,0))*invDelta1block0;

   }

   d1_p_dz = ((1.0/12.0))*(-p_B0(0,0,2) - 8*p_B0(0,0,-1) + 8*p_B0(0,0,1) + p_B0(0,0,-2))*invDelta2block0;

    d1_pu2_dz = ((1.0/12.0))*(p_B0(0,0,-2)*u2_B0(0,0,-2) - p_B0(0,0,2)*u2_B0(0,0,2) - 8*p_B0(0,0,-1)*u2_B0(0,0,-1) +
      8*p_B0(0,0,1)*u2_B0(0,0,1))*invDelta2block0;

   d1_rhoE_dz = -(1.0/12.0)*(-rhoE_B0(0,0,-2) - 8*rhoE_B0(0,0,1) + 8*rhoE_B0(0,0,-1) + rhoE_B0(0,0,2))*invDelta2block0;

    d1_rhoEu2_dz = ((1.0/12.0))*(u2_B0(0,0,-2)*rhoE_B0(0,0,-2) - u2_B0(0,0,2)*rhoE_B0(0,0,2) -
      8*u2_B0(0,0,-1)*rhoE_B0(0,0,-1) + 8*u2_B0(0,0,1)*rhoE_B0(0,0,1))*invDelta2block0;

    d1_inv_rhoErhou2_dz = ((1.0/12.0))*(u2_B0(0,0,-2)*rho_B0(0,0,1)*rho_B0(0,0,-1)*rho_B0(0,0,2)*rhoE_B0(0,0,-2) -
      u2_B0(0,0,2)*rho_B0(0,0,1)*rho_B0(0,0,-1)*rho_B0(0,0,-2)*rhoE_B0(0,0,2) -
      8*u2_B0(0,0,-1)*rho_B0(0,0,1)*rho_B0(0,0,-2)*rho_B0(0,0,2)*rhoE_B0(0,0,-1) +
      8*u2_B0(0,0,1)*rho_B0(0,0,-1)*rho_B0(0,0,-2)*rho_B0(0,0,2)*rhoE_B0(0,0,1))*invDelta2block0/(rho_B0(0,0,1)*rho_B0(0,0,-1)*rho_B0(0,0,-2)*rho_B0(0,0,2));

    d1_inv_rhoErho_dz = ((1.0/12.0))*(rho_B0(0,0,1)*rho_B0(0,0,-1)*rho_B0(0,0,2)*rhoE_B0(0,0,-2) -
      rho_B0(0,0,1)*rho_B0(0,0,-1)*rho_B0(0,0,-2)*rhoE_B0(0,0,2) -
      8*rho_B0(0,0,1)*rho_B0(0,0,-2)*rho_B0(0,0,2)*rhoE_B0(0,0,-1) +
      8*rho_B0(0,0,-1)*rho_B0(0,0,-2)*rho_B0(0,0,2)*rhoE_B0(0,0,1))*invDelta2block0/(rho_B0(0,0,1)*rho_B0(0,0,-1)*rho_B0(0,0,-2)*rho_B0(0,0,2));

   d1_rho_dz = -(1.0/12.0)*(-rho_B0(0,0,-2) - 8*rho_B0(0,0,1) + 8*rho_B0(0,0,-1) + rho_B0(0,0,2))*invDelta2block0;

    d1_rhou0_dz = -(1.0/12.0)*(-rhou0_B0(0,0,-2) - 8*rhou0_B0(0,0,1) + 8*rhou0_B0(0,0,-1) +
      rhou0_B0(0,0,2))*invDelta2block0;

    d1_rhou1_dz = ((1.0/12.0))*(-rhou1_B0(0,0,2) - 8*rhou1_B0(0,0,-1) + 8*rhou1_B0(0,0,1) +
      rhou1_B0(0,0,-2))*invDelta2block0;

    d1_rhou2_dz = -(1.0/12.0)*(-rhou2_B0(0,0,-2) - 8*rhou2_B0(0,0,1) + 8*rhou2_B0(0,0,-1) +
      rhou2_B0(0,0,2))*invDelta2block0;

    d1_rhou2u0_dz = ((1.0/12.0))*(u0_B0(0,0,-2)*rhou2_B0(0,0,-2) - u0_B0(0,0,2)*rhou2_B0(0,0,2) -
      8*u0_B0(0,0,-1)*rhou2_B0(0,0,-1) + 8*u0_B0(0,0,1)*rhou2_B0(0,0,1))*invDelta2block0;

    d1_rhou2u1_dz = ((1.0/12.0))*(u1_B0(0,0,-2)*rhou2_B0(0,0,-2) - u1_B0(0,0,2)*rhou2_B0(0,0,2) -
      8*u1_B0(0,0,-1)*rhou2_B0(0,0,-1) + 8*u1_B0(0,0,1)*rhou2_B0(0,0,1))*invDelta2block0;

    d1_rhou2u2_dz = ((1.0/12.0))*(u2_B0(0,0,-2)*rhou2_B0(0,0,-2) - u2_B0(0,0,2)*rhou2_B0(0,0,2) -
      8*u2_B0(0,0,-1)*rhou2_B0(0,0,-1) + 8*u2_B0(0,0,1)*rhou2_B0(0,0,1))*invDelta2block0;

    d1_u0u2_dz = ((1.0/12.0))*(u0_B0(0,0,-2)*u2_B0(0,0,-2) - u0_B0(0,0,2)*u2_B0(0,0,2) - 8*u0_B0(0,0,-1)*u2_B0(0,0,-1) +
      8*u0_B0(0,0,1)*u2_B0(0,0,1))*invDelta2block0;

    d1_u1u2_dz = -(1.0/12.0)*(u1_B0(0,0,2)*u2_B0(0,0,2) - u1_B0(0,0,-2)*u2_B0(0,0,-2) - 8*u1_B0(0,0,1)*u2_B0(0,0,1) +
      8*u1_B0(0,0,-1)*u2_B0(0,0,-1))*invDelta2block0;

    d1_u2u2_dz = ((1.0/12.0))*((u2_B0(0,0,-2)*u2_B0(0,0,-2)) - (u2_B0(0,0,2)*u2_B0(0,0,2)) -
      8*(u2_B0(0,0,-1)*u2_B0(0,0,-1)) + 8*(u2_B0(0,0,1)*u2_B0(0,0,1)))*invDelta2block0;

    Residual0_B0(0,0,0) = -(1.0/2.0)*d1_rhou2_dz - (1.0/2.0)*(D00_B0(0,0,0)*d1_rho_dx +
      D10_B0(0,0,0)*d1_rho_dy)*u0_B0(0,0,0) - (1.0/2.0)*(D01_B0(0,0,0)*d1_rho_dx + D11_B0(0,0,0)*d1_rho_dy)*u1_B0(0,0,0)
      - (1.0/2.0)*(D00_B0(0,0,0)*wk0_B0(0,0,0) + D01_B0(0,0,0)*wk1_B0(0,0,0) + D10_B0(0,0,0)*wk4_B0(0,0,0) +
      D11_B0(0,0,0)*wk5_B0(0,0,0) + wk10_B0(0,0,0))*rho_B0(0,0,0) - (1.0/2.0)*u2_B0(0,0,0)*d1_rho_dz -
      (1.0/2.0)*D00_B0(0,0,0)*d1_rhou0_dx - (1.0/2.0)*D01_B0(0,0,0)*d1_rhou1_dx - (1.0/2.0)*D10_B0(0,0,0)*d1_rhou0_dy -
      (1.0/2.0)*D11_B0(0,0,0)*d1_rhou1_dy;

    Residual1_B0(0,0,0) = -(1.0/4.0)*d1_rhou2u0_dz - D00_B0(0,0,0)*d1_p_dx - D10_B0(0,0,0)*d1_p_dy -
      (1.0/2.0)*(D00_B0(0,0,0)*wk0_B0(0,0,0) + D10_B0(0,0,0)*wk4_B0(0,0,0))*rhou0_B0(0,0,0) -
      (1.0/2.0)*(D00_B0(0,0,0)*d1_rhou0_dx + D10_B0(0,0,0)*d1_rhou0_dy)*u0_B0(0,0,0) -
      (1.0/4.0)*(u0_B0(0,0,0)*u0_B0(0,0,0))*(D00_B0(0,0,0)*d1_rho_dx + D10_B0(0,0,0)*d1_rho_dy) -
      (1.0/4.0)*(D00_B0(0,0,0)*d1_u0u0_dx + D10_B0(0,0,0)*d1_u0u0_dy)*rho_B0(0,0,0) -
      (1.0/4.0)*(D01_B0(0,0,0)*wk0_B0(0,0,0) + D11_B0(0,0,0)*wk4_B0(0,0,0))*rhou1_B0(0,0,0) -
      (1.0/4.0)*(D01_B0(0,0,0)*wk1_B0(0,0,0) + D11_B0(0,0,0)*wk5_B0(0,0,0))*rhou0_B0(0,0,0) -
      (1.0/4.0)*(D01_B0(0,0,0)*d1_rhou0_dx + D11_B0(0,0,0)*d1_rhou0_dy)*u1_B0(0,0,0) -
      (1.0/4.0)*(D01_B0(0,0,0)*d1_rhou1_dx + D11_B0(0,0,0)*d1_rhou1_dy)*u0_B0(0,0,0) -
      (1.0/4.0)*(D01_B0(0,0,0)*d1_u0u1_dx + D11_B0(0,0,0)*d1_u0u1_dy)*rho_B0(0,0,0) - (1.0/4.0)*u0_B0(0,0,0)*d1_rhou2_dz
      - (1.0/4.0)*u2_B0(0,0,0)*d1_rhou0_dz - (1.0/4.0)*D00_B0(0,0,0)*d1_rhou0u0_dx -
      (1.0/4.0)*D01_B0(0,0,0)*d1_rhou1u0_dx - (1.0/4.0)*D10_B0(0,0,0)*d1_rhou0u0_dy -
      (1.0/4.0)*D11_B0(0,0,0)*d1_rhou1u0_dy - (1.0/4.0)*rho_B0(0,0,0)*d1_u0u2_dz -
      (1.0/4.0)*wk8_B0(0,0,0)*rhou2_B0(0,0,0) - (1.0/4.0)*wk10_B0(0,0,0)*rhou0_B0(0,0,0) -
      (1.0/4.0)*(D01_B0(0,0,0)*d1_rho_dx + D11_B0(0,0,0)*d1_rho_dy)*u0_B0(0,0,0)*u1_B0(0,0,0) -
      (1.0/4.0)*u0_B0(0,0,0)*u2_B0(0,0,0)*d1_rho_dz;

    Residual2_B0(0,0,0) = -(1.0/4.0)*d1_rhou2u1_dz - D01_B0(0,0,0)*d1_p_dx - D11_B0(0,0,0)*d1_p_dy -
      (1.0/4.0)*(u1_B0(0,0,0)*u1_B0(0,0,0))*(D01_B0(0,0,0)*d1_rho_dx + D11_B0(0,0,0)*d1_rho_dy) -
      (1.0/4.0)*(D00_B0(0,0,0)*wk1_B0(0,0,0) + D10_B0(0,0,0)*wk5_B0(0,0,0))*rhou0_B0(0,0,0) -
      (1.0/4.0)*(D00_B0(0,0,0)*d1_rhou1_dx + D10_B0(0,0,0)*d1_rhou1_dy)*u0_B0(0,0,0) -
      (1.0/4.0)*(D01_B0(0,0,0)*wk1_B0(0,0,0) + D11_B0(0,0,0)*wk5_B0(0,0,0))*rhou1_B0(0,0,0) -
      (1.0/4.0)*(D01_B0(0,0,0)*d1_rhou1_dx + D11_B0(0,0,0)*d1_rhou1_dy)*u1_B0(0,0,0) -
      (1.0/4.0)*(D00_B0(0,0,0)*wk0_B0(0,0,0) + D01_B0(0,0,0)*wk1_B0(0,0,0) + D10_B0(0,0,0)*wk4_B0(0,0,0) +
      D11_B0(0,0,0)*wk5_B0(0,0,0) + wk10_B0(0,0,0))*rhou1_B0(0,0,0) - (1.0/4.0)*(D00_B0(0,0,0)*d1_rhou0_dx +
      D01_B0(0,0,0)*d1_rhou1_dx + D10_B0(0,0,0)*d1_rhou0_dy + D11_B0(0,0,0)*d1_rhou1_dy + d1_rhou2_dz)*u1_B0(0,0,0) -
      (1.0/4.0)*(D00_B0(0,0,0)*d1_u0u1_dx + D01_B0(0,0,0)*d1_u1u1_dx + D10_B0(0,0,0)*d1_u0u1_dy +
      D11_B0(0,0,0)*d1_u1u1_dy + d1_u1u2_dz)*rho_B0(0,0,0) - (1.0/4.0)*u2_B0(0,0,0)*d1_rhou1_dz -
      (1.0/4.0)*D00_B0(0,0,0)*d1_rhou0u1_dx - (1.0/4.0)*D01_B0(0,0,0)*d1_rhou1u1_dx -
      (1.0/4.0)*D10_B0(0,0,0)*d1_rhou0u1_dy - (1.0/4.0)*D11_B0(0,0,0)*d1_rhou1u1_dy -
      (1.0/4.0)*wk9_B0(0,0,0)*rhou2_B0(0,0,0) - (1.0/4.0)*(D00_B0(0,0,0)*d1_rho_dx +
      D10_B0(0,0,0)*d1_rho_dy)*u0_B0(0,0,0)*u1_B0(0,0,0) - (1.0/4.0)*u1_B0(0,0,0)*u2_B0(0,0,0)*d1_rho_dz;

    Residual3_B0(0,0,0) = -d1_p_dz - (1.0/4.0)*d1_rhou2u2_dz - (1.0/4.0)*(u2_B0(0,0,0)*u2_B0(0,0,0))*d1_rho_dz -
      (1.0/4.0)*(D00_B0(0,0,0)*wk2_B0(0,0,0) + D10_B0(0,0,0)*wk6_B0(0,0,0))*rhou0_B0(0,0,0) -
      (1.0/4.0)*(D00_B0(0,0,0)*d1_rhou2_dx + D10_B0(0,0,0)*d1_rhou2_dy)*u0_B0(0,0,0) -
      (1.0/4.0)*(D01_B0(0,0,0)*wk2_B0(0,0,0) + D11_B0(0,0,0)*wk6_B0(0,0,0))*rhou1_B0(0,0,0) -
      (1.0/4.0)*(D01_B0(0,0,0)*d1_rhou2_dx + D11_B0(0,0,0)*d1_rhou2_dy)*u1_B0(0,0,0) -
      (1.0/4.0)*(D00_B0(0,0,0)*wk0_B0(0,0,0) + D01_B0(0,0,0)*wk1_B0(0,0,0) + D10_B0(0,0,0)*wk4_B0(0,0,0) +
      D11_B0(0,0,0)*wk5_B0(0,0,0) + wk10_B0(0,0,0))*rhou2_B0(0,0,0) - (1.0/4.0)*(D00_B0(0,0,0)*d1_rhou0_dx +
      D01_B0(0,0,0)*d1_rhou1_dx + D10_B0(0,0,0)*d1_rhou0_dy + D11_B0(0,0,0)*d1_rhou1_dy + d1_rhou2_dz)*u2_B0(0,0,0) -
      (1.0/4.0)*(D00_B0(0,0,0)*d1_u0u2_dx + D01_B0(0,0,0)*d1_u1u2_dx + D10_B0(0,0,0)*d1_u0u2_dy +
      D11_B0(0,0,0)*d1_u1u2_dy + d1_u2u2_dz)*rho_B0(0,0,0) - (1.0/4.0)*u2_B0(0,0,0)*d1_rhou2_dz -
      (1.0/4.0)*D00_B0(0,0,0)*d1_rhou0u2_dx - (1.0/4.0)*D01_B0(0,0,0)*d1_rhou1u2_dx -
      (1.0/4.0)*D10_B0(0,0,0)*d1_rhou0u2_dy - (1.0/4.0)*D11_B0(0,0,0)*d1_rhou1u2_dy -
      (1.0/4.0)*wk10_B0(0,0,0)*rhou2_B0(0,0,0) - (1.0/4.0)*(D00_B0(0,0,0)*d1_rho_dx +
      D10_B0(0,0,0)*d1_rho_dy)*u0_B0(0,0,0)*u2_B0(0,0,0) - (1.0/4.0)*(D01_B0(0,0,0)*d1_rho_dx +
      D11_B0(0,0,0)*d1_rho_dy)*u1_B0(0,0,0)*u2_B0(0,0,0);

    Residual4_B0(0,0,0) = -(1.0/2.0)*d1_pu2_dz - (1.0/4.0)*d1_rhoEu2_dz - (1.0/2.0)*(D00_B0(0,0,0)*d1_p_dx +
      D10_B0(0,0,0)*d1_p_dy)*u0_B0(0,0,0) - (1.0/2.0)*(D01_B0(0,0,0)*d1_p_dx + D11_B0(0,0,0)*d1_p_dy)*u1_B0(0,0,0) -
      (1.0/2.0)*(D00_B0(0,0,0)*wk0_B0(0,0,0) + D01_B0(0,0,0)*wk1_B0(0,0,0) + D10_B0(0,0,0)*wk4_B0(0,0,0) +
      D11_B0(0,0,0)*wk5_B0(0,0,0) + wk10_B0(0,0,0))*p_B0(0,0,0) - (1.0/2.0)*u2_B0(0,0,0)*d1_p_dz -
      (1.0/2.0)*D00_B0(0,0,0)*d1_pu0_dx - (1.0/2.0)*D01_B0(0,0,0)*d1_pu1_dx - (1.0/2.0)*D10_B0(0,0,0)*d1_pu0_dy -
      (1.0/2.0)*D11_B0(0,0,0)*d1_pu1_dy - (1.0/4.0)*(D00_B0(0,0,0)*d1_inv_rhoErho_dx +
      D10_B0(0,0,0)*d1_inv_rhoErho_dy)*rhou0_B0(0,0,0) - (1.0/4.0)*(D00_B0(0,0,0)*d1_rhoE_dx +
      D10_B0(0,0,0)*d1_rhoE_dy)*u0_B0(0,0,0) - (1.0/4.0)*(D01_B0(0,0,0)*d1_inv_rhoErho_dx +
      D11_B0(0,0,0)*d1_inv_rhoErho_dy)*rhou1_B0(0,0,0) - (1.0/4.0)*(D01_B0(0,0,0)*d1_rhoE_dx +
      D11_B0(0,0,0)*d1_rhoE_dy)*u1_B0(0,0,0) - (1.0/4.0)*(D00_B0(0,0,0)*wk0_B0(0,0,0) + D01_B0(0,0,0)*wk1_B0(0,0,0) +
      D10_B0(0,0,0)*wk4_B0(0,0,0) + D11_B0(0,0,0)*wk5_B0(0,0,0) + wk10_B0(0,0,0))*rhoE_B0(0,0,0) -
      (1.0/4.0)*(D00_B0(0,0,0)*d1_inv_rhoErhou0_dx + D01_B0(0,0,0)*d1_inv_rhoErhou1_dx +
      D10_B0(0,0,0)*d1_inv_rhoErhou0_dy + D11_B0(0,0,0)*d1_inv_rhoErhou1_dy + d1_inv_rhoErhou2_dz)*rho_B0(0,0,0) -
      (1.0/4.0)*u2_B0(0,0,0)*d1_rhoE_dz - (1.0/4.0)*D00_B0(0,0,0)*d1_rhoEu0_dx - (1.0/4.0)*D01_B0(0,0,0)*d1_rhoEu1_dx -
      (1.0/4.0)*D10_B0(0,0,0)*d1_rhoEu0_dy - (1.0/4.0)*D11_B0(0,0,0)*d1_rhoEu1_dy -
      (1.0/4.0)*rhou2_B0(0,0,0)*d1_inv_rhoErho_dz - (1.0/4.0)*(D00_B0(0,0,0)*d1_rhou0_dx + D01_B0(0,0,0)*d1_rhou1_dx +
      D10_B0(0,0,0)*d1_rhou0_dy + D11_B0(0,0,0)*d1_rhou1_dy + d1_rhou2_dz)*rhoE_B0(0,0,0)/rho_B0(0,0,0) -
      (1.0/4.0)*(D00_B0(0,0,0)*d1_rho_dx + D10_B0(0,0,0)*d1_rho_dy)*u0_B0(0,0,0)*rhoE_B0(0,0,0)/rho_B0(0,0,0) -
      (1.0/4.0)*(D01_B0(0,0,0)*d1_rho_dx + D11_B0(0,0,0)*d1_rho_dy)*u1_B0(0,0,0)*rhoE_B0(0,0,0)/rho_B0(0,0,0) -
      (1.0/4.0)*u2_B0(0,0,0)*rhoE_B0(0,0,0)*d1_rho_dz/rho_B0(0,0,0);

}

 void opensbliblock00Kernel035(const ACC<double> &D00_B0, const ACC<double> &D01_B0, const ACC<double> &D10_B0, const
ACC<double> &D11_B0, const ACC<double> &SD000_B0, const ACC<double> &SD001_B0, const ACC<double> &SD010_B0, const
ACC<double> &SD011_B0, const ACC<double> &SD100_B0, const ACC<double> &SD101_B0, const ACC<double> &SD110_B0, const
ACC<double> &SD111_B0, const ACC<double> &T_B0, const ACC<double> &mu_B0, const ACC<double> &u0_B0, const ACC<double>
&u1_B0, const ACC<double> &u2_B0, const ACC<double> &wk0_B0, const ACC<double> &wk10_B0, const ACC<double> &wk11_B0,
const ACC<double> &wk1_B0, const ACC<double> &wk2_B0, const ACC<double> &wk3_B0, const ACC<double> &wk4_B0, const
ACC<double> &wk5_B0, const ACC<double> &wk6_B0, const ACC<double> &wk7_B0, const ACC<double> &wk8_B0, const ACC<double>
&wk9_B0, ACC<double> &Residual1_B0, ACC<double> &Residual2_B0, ACC<double> &Residual3_B0, ACC<double> &Residual4_B0,
const int *idx)
{
   double d1_mu_dx = 0.0;
   double d1_mu_dy = 0.0;
   double d1_mu_dz = 0.0;
   double d1_wk0_dy = 0.0;
   double d1_wk0_dz = 0.0;
   double d1_wk1_dy = 0.0;
   double d1_wk1_dz = 0.0;
   double d1_wk2_dy = 0.0;
   double d1_wk2_dz = 0.0;
   double d1_wk3_dy = 0.0;
   double d1_wk4_dz = 0.0;
   double d1_wk5_dz = 0.0;
   double d1_wk6_dz = 0.0;
   double d2_T_dx = 0.0;
   double d2_T_dy = 0.0;
   double d2_T_dz = 0.0;
   double d2_u0_dx = 0.0;
   double d2_u0_dy = 0.0;
   double d2_u0_dz = 0.0;
   double d2_u1_dx = 0.0;
   double d2_u1_dy = 0.0;
   double d2_u1_dz = 0.0;
   double d2_u2_dx = 0.0;
   double d2_u2_dy = 0.0;
   double d2_u2_dz = 0.0;
   if (idx[0] == 0){

       d1_mu_dx = (-3*mu_B0(2,0,0) + 4*mu_B0(1,0,0) - (25.0/12.0)*mu_B0(0,0,0) - (1.0/4.0)*mu_B0(4,0,0) +
            ((4.0/3.0))*mu_B0(3,0,0))*invDelta0block0;

   }

   else if (idx[0] == 1){

       d1_mu_dx = (-(5.0/6.0)*mu_B0(0,0,0) - (1.0/2.0)*mu_B0(2,0,0) - (1.0/4.0)*mu_B0(-1,0,0) +
            ((1.0/12.0))*mu_B0(3,0,0) + ((3.0/2.0))*mu_B0(1,0,0))*invDelta0block0;

   }

   else if (idx[0] == -1 + block0np0){

       d1_mu_dx = (-4*mu_B0(-1,0,0) + 3*mu_B0(-2,0,0) - (4.0/3.0)*mu_B0(-3,0,0) + ((1.0/4.0))*mu_B0(-4,0,0) +
            ((25.0/12.0))*mu_B0(0,0,0))*invDelta0block0;

   }

   else if (idx[0] == -2 + block0np0){

       d1_mu_dx = (((1.0/2.0))*mu_B0(-2,0,0) - (3.0/2.0)*mu_B0(-1,0,0) - (1.0/12.0)*mu_B0(-3,0,0) +
            ((1.0/4.0))*mu_B0(1,0,0) + ((5.0/6.0))*mu_B0(0,0,0))*invDelta0block0;

   }

   else{

       d1_mu_dx = (-(2.0/3.0)*mu_B0(-1,0,0) - (1.0/12.0)*mu_B0(2,0,0) + ((1.0/12.0))*mu_B0(-2,0,0) +
            ((2.0/3.0))*mu_B0(1,0,0))*invDelta0block0;

   }

   if (idx[0] == 0){

       d2_T_dx = (-(26.0/3.0)*T_B0(1,0,0) - (14.0/3.0)*T_B0(3,0,0) + ((11.0/12.0))*T_B0(4,0,0) +
            ((19.0/2.0))*T_B0(2,0,0) + ((35.0/12.0))*T_B0(0,0,0))*inv2Delta0block0;

       d2_u0_dx = (-(26.0/3.0)*u0_B0(1,0,0) - (14.0/3.0)*u0_B0(3,0,0) + ((11.0/12.0))*u0_B0(4,0,0) +
            ((19.0/2.0))*u0_B0(2,0,0) + ((35.0/12.0))*u0_B0(0,0,0))*inv2Delta0block0;

       d2_u1_dx = (-(26.0/3.0)*u1_B0(1,0,0) - (14.0/3.0)*u1_B0(3,0,0) + ((11.0/12.0))*u1_B0(4,0,0) +
            ((19.0/2.0))*u1_B0(2,0,0) + ((35.0/12.0))*u1_B0(0,0,0))*inv2Delta0block0;

       d2_u2_dx = (-(26.0/3.0)*u2_B0(1,0,0) - (14.0/3.0)*u2_B0(3,0,0) + ((11.0/12.0))*u2_B0(4,0,0) +
            ((19.0/2.0))*u2_B0(2,0,0) + ((35.0/12.0))*u2_B0(0,0,0))*inv2Delta0block0;

   }

   else if (idx[0] == 1){

       d2_T_dx = (((1.0/2.0))*T_B0(1,0,0) - (5.0/3.0)*T_B0(0,0,0) - (1.0/12.0)*T_B0(3,0,0) + ((1.0/3.0))*T_B0(2,0,0) +
            ((11.0/12.0))*T_B0(-1,0,0))*inv2Delta0block0;

       d2_u0_dx = (((1.0/2.0))*u0_B0(1,0,0) - (5.0/3.0)*u0_B0(0,0,0) - (1.0/12.0)*u0_B0(3,0,0) +
            ((1.0/3.0))*u0_B0(2,0,0) + ((11.0/12.0))*u0_B0(-1,0,0))*inv2Delta0block0;

       d2_u1_dx = (((1.0/2.0))*u1_B0(1,0,0) - (5.0/3.0)*u1_B0(0,0,0) - (1.0/12.0)*u1_B0(3,0,0) +
            ((1.0/3.0))*u1_B0(2,0,0) + ((11.0/12.0))*u1_B0(-1,0,0))*inv2Delta0block0;

       d2_u2_dx = (((1.0/2.0))*u2_B0(1,0,0) - (5.0/3.0)*u2_B0(0,0,0) - (1.0/12.0)*u2_B0(3,0,0) +
            ((1.0/3.0))*u2_B0(2,0,0) + ((11.0/12.0))*u2_B0(-1,0,0))*inv2Delta0block0;

   }

   else if (idx[0] == -1 + block0np0){

       d2_T_dx = (-(26.0/3.0)*T_B0(-1,0,0) - (14.0/3.0)*T_B0(-3,0,0) + ((11.0/12.0))*T_B0(-4,0,0) +
            ((19.0/2.0))*T_B0(-2,0,0) + ((35.0/12.0))*T_B0(0,0,0))*inv2Delta0block0;

       d2_u0_dx = (-(26.0/3.0)*u0_B0(-1,0,0) - (14.0/3.0)*u0_B0(-3,0,0) + ((11.0/12.0))*u0_B0(-4,0,0) +
            ((19.0/2.0))*u0_B0(-2,0,0) + ((35.0/12.0))*u0_B0(0,0,0))*inv2Delta0block0;

       d2_u1_dx = (-(26.0/3.0)*u1_B0(-1,0,0) - (14.0/3.0)*u1_B0(-3,0,0) + ((11.0/12.0))*u1_B0(-4,0,0) +
            ((19.0/2.0))*u1_B0(-2,0,0) + ((35.0/12.0))*u1_B0(0,0,0))*inv2Delta0block0;

       d2_u2_dx = (-(26.0/3.0)*u2_B0(-1,0,0) - (14.0/3.0)*u2_B0(-3,0,0) + ((11.0/12.0))*u2_B0(-4,0,0) +
            ((19.0/2.0))*u2_B0(-2,0,0) + ((35.0/12.0))*u2_B0(0,0,0))*inv2Delta0block0;

   }

   else if (idx[0] == -2 + block0np0){

       d2_T_dx = (((1.0/2.0))*T_B0(-1,0,0) - (5.0/3.0)*T_B0(0,0,0) - (1.0/12.0)*T_B0(-3,0,0) + ((1.0/3.0))*T_B0(-2,0,0)
            + ((11.0/12.0))*T_B0(1,0,0))*inv2Delta0block0;

       d2_u0_dx = (((1.0/2.0))*u0_B0(-1,0,0) - (5.0/3.0)*u0_B0(0,0,0) - (1.0/12.0)*u0_B0(-3,0,0) +
            ((1.0/3.0))*u0_B0(-2,0,0) + ((11.0/12.0))*u0_B0(1,0,0))*inv2Delta0block0;

       d2_u1_dx = (((1.0/2.0))*u1_B0(-1,0,0) - (5.0/3.0)*u1_B0(0,0,0) - (1.0/12.0)*u1_B0(-3,0,0) +
            ((1.0/3.0))*u1_B0(-2,0,0) + ((11.0/12.0))*u1_B0(1,0,0))*inv2Delta0block0;

       d2_u2_dx = (((1.0/2.0))*u2_B0(-1,0,0) - (5.0/3.0)*u2_B0(0,0,0) - (1.0/12.0)*u2_B0(-3,0,0) +
            ((1.0/3.0))*u2_B0(-2,0,0) + ((11.0/12.0))*u2_B0(1,0,0))*inv2Delta0block0;

   }

   else{

       d2_T_dx = (-(5.0/2.0)*T_B0(0,0,0) - (1.0/12.0)*T_B0(-2,0,0) - (1.0/12.0)*T_B0(2,0,0) + ((4.0/3.0))*T_B0(1,0,0) +
            ((4.0/3.0))*T_B0(-1,0,0))*inv2Delta0block0;

       d2_u0_dx = (-(5.0/2.0)*u0_B0(0,0,0) - (1.0/12.0)*u0_B0(-2,0,0) - (1.0/12.0)*u0_B0(2,0,0) +
            ((4.0/3.0))*u0_B0(1,0,0) + ((4.0/3.0))*u0_B0(-1,0,0))*inv2Delta0block0;

       d2_u1_dx = (-(5.0/2.0)*u1_B0(0,0,0) - (1.0/12.0)*u1_B0(-2,0,0) - (1.0/12.0)*u1_B0(2,0,0) +
            ((4.0/3.0))*u1_B0(1,0,0) + ((4.0/3.0))*u1_B0(-1,0,0))*inv2Delta0block0;

       d2_u2_dx = (-(5.0/2.0)*u2_B0(0,0,0) - (1.0/12.0)*u2_B0(-2,0,0) - (1.0/12.0)*u2_B0(2,0,0) +
            ((4.0/3.0))*u2_B0(1,0,0) + ((4.0/3.0))*u2_B0(-1,0,0))*inv2Delta0block0;

   }

   if (idx[1] == 0){

       d1_mu_dy = (-3*mu_B0(0,2,0) + 4*mu_B0(0,1,0) - (25.0/12.0)*mu_B0(0,0,0) - (1.0/4.0)*mu_B0(0,4,0) +
            ((4.0/3.0))*mu_B0(0,3,0))*invDelta1block0;

       d1_wk0_dy = (-3*wk0_B0(0,2,0) + 4*wk0_B0(0,1,0) - (25.0/12.0)*wk0_B0(0,0,0) - (1.0/4.0)*wk0_B0(0,4,0) +
            ((4.0/3.0))*wk0_B0(0,3,0))*invDelta1block0;

       d1_wk1_dy = (-3*wk1_B0(0,2,0) + 4*wk1_B0(0,1,0) - (25.0/12.0)*wk1_B0(0,0,0) - (1.0/4.0)*wk1_B0(0,4,0) +
            ((4.0/3.0))*wk1_B0(0,3,0))*invDelta1block0;

       d1_wk2_dy = (-3*wk2_B0(0,2,0) + 4*wk2_B0(0,1,0) - (25.0/12.0)*wk2_B0(0,0,0) - (1.0/4.0)*wk2_B0(0,4,0) +
            ((4.0/3.0))*wk2_B0(0,3,0))*invDelta1block0;

       d1_wk3_dy = (-3*wk3_B0(0,2,0) + 4*wk3_B0(0,1,0) - (25.0/12.0)*wk3_B0(0,0,0) - (1.0/4.0)*wk3_B0(0,4,0) +
            ((4.0/3.0))*wk3_B0(0,3,0))*invDelta1block0;

   }

   else if (idx[1] == 1){

       d1_mu_dy = (-(5.0/6.0)*mu_B0(0,0,0) - (1.0/2.0)*mu_B0(0,2,0) - (1.0/4.0)*mu_B0(0,-1,0) +
            ((1.0/12.0))*mu_B0(0,3,0) + ((3.0/2.0))*mu_B0(0,1,0))*invDelta1block0;

       d1_wk0_dy = (-(5.0/6.0)*wk0_B0(0,0,0) - (1.0/2.0)*wk0_B0(0,2,0) - (1.0/4.0)*wk0_B0(0,-1,0) +
            ((1.0/12.0))*wk0_B0(0,3,0) + ((3.0/2.0))*wk0_B0(0,1,0))*invDelta1block0;

       d1_wk1_dy = (-(5.0/6.0)*wk1_B0(0,0,0) - (1.0/2.0)*wk1_B0(0,2,0) - (1.0/4.0)*wk1_B0(0,-1,0) +
            ((1.0/12.0))*wk1_B0(0,3,0) + ((3.0/2.0))*wk1_B0(0,1,0))*invDelta1block0;

       d1_wk2_dy = (-(5.0/6.0)*wk2_B0(0,0,0) - (1.0/2.0)*wk2_B0(0,2,0) - (1.0/4.0)*wk2_B0(0,-1,0) +
            ((1.0/12.0))*wk2_B0(0,3,0) + ((3.0/2.0))*wk2_B0(0,1,0))*invDelta1block0;

       d1_wk3_dy = (-(5.0/6.0)*wk3_B0(0,0,0) - (1.0/2.0)*wk3_B0(0,2,0) - (1.0/4.0)*wk3_B0(0,-1,0) +
            ((1.0/12.0))*wk3_B0(0,3,0) + ((3.0/2.0))*wk3_B0(0,1,0))*invDelta1block0;

   }

   else{

       d1_mu_dy = (-(2.0/3.0)*mu_B0(0,-1,0) - (1.0/12.0)*mu_B0(0,2,0) + ((1.0/12.0))*mu_B0(0,-2,0) +
            ((2.0/3.0))*mu_B0(0,1,0))*invDelta1block0;

       d1_wk0_dy = (-(2.0/3.0)*wk0_B0(0,-1,0) - (1.0/12.0)*wk0_B0(0,2,0) + ((1.0/12.0))*wk0_B0(0,-2,0) +
            ((2.0/3.0))*wk0_B0(0,1,0))*invDelta1block0;

       d1_wk1_dy = (-(2.0/3.0)*wk1_B0(0,-1,0) - (1.0/12.0)*wk1_B0(0,2,0) + ((1.0/12.0))*wk1_B0(0,-2,0) +
            ((2.0/3.0))*wk1_B0(0,1,0))*invDelta1block0;

       d1_wk2_dy = (-(2.0/3.0)*wk2_B0(0,-1,0) - (1.0/12.0)*wk2_B0(0,2,0) + ((1.0/12.0))*wk2_B0(0,-2,0) +
            ((2.0/3.0))*wk2_B0(0,1,0))*invDelta1block0;

       d1_wk3_dy = (-(2.0/3.0)*wk3_B0(0,-1,0) - (1.0/12.0)*wk3_B0(0,2,0) + ((1.0/12.0))*wk3_B0(0,-2,0) +
            ((2.0/3.0))*wk3_B0(0,1,0))*invDelta1block0;

   }

   if (idx[1] == 0){

       d2_T_dy = (-(26.0/3.0)*T_B0(0,1,0) - (14.0/3.0)*T_B0(0,3,0) + ((11.0/12.0))*T_B0(0,4,0) +
            ((19.0/2.0))*T_B0(0,2,0) + ((35.0/12.0))*T_B0(0,0,0))*inv2Delta1block0;

       d2_u0_dy = (-(26.0/3.0)*u0_B0(0,1,0) - (14.0/3.0)*u0_B0(0,3,0) + ((11.0/12.0))*u0_B0(0,4,0) +
            ((19.0/2.0))*u0_B0(0,2,0) + ((35.0/12.0))*u0_B0(0,0,0))*inv2Delta1block0;

       d2_u1_dy = (-(26.0/3.0)*u1_B0(0,1,0) - (14.0/3.0)*u1_B0(0,3,0) + ((11.0/12.0))*u1_B0(0,4,0) +
            ((19.0/2.0))*u1_B0(0,2,0) + ((35.0/12.0))*u1_B0(0,0,0))*inv2Delta1block0;

       d2_u2_dy = (-(26.0/3.0)*u2_B0(0,1,0) - (14.0/3.0)*u2_B0(0,3,0) + ((11.0/12.0))*u2_B0(0,4,0) +
            ((19.0/2.0))*u2_B0(0,2,0) + ((35.0/12.0))*u2_B0(0,0,0))*inv2Delta1block0;

   }

   else if (idx[1] == 1){

       d2_T_dy = (((1.0/2.0))*T_B0(0,1,0) - (5.0/3.0)*T_B0(0,0,0) - (1.0/12.0)*T_B0(0,3,0) + ((1.0/3.0))*T_B0(0,2,0) +
            ((11.0/12.0))*T_B0(0,-1,0))*inv2Delta1block0;

       d2_u0_dy = (((1.0/2.0))*u0_B0(0,1,0) - (5.0/3.0)*u0_B0(0,0,0) - (1.0/12.0)*u0_B0(0,3,0) +
            ((1.0/3.0))*u0_B0(0,2,0) + ((11.0/12.0))*u0_B0(0,-1,0))*inv2Delta1block0;

       d2_u1_dy = (((1.0/2.0))*u1_B0(0,1,0) - (5.0/3.0)*u1_B0(0,0,0) - (1.0/12.0)*u1_B0(0,3,0) +
            ((1.0/3.0))*u1_B0(0,2,0) + ((11.0/12.0))*u1_B0(0,-1,0))*inv2Delta1block0;

       d2_u2_dy = (((1.0/2.0))*u2_B0(0,1,0) - (5.0/3.0)*u2_B0(0,0,0) - (1.0/12.0)*u2_B0(0,3,0) +
            ((1.0/3.0))*u2_B0(0,2,0) + ((11.0/12.0))*u2_B0(0,-1,0))*inv2Delta1block0;

   }

   else{

       d2_T_dy = (-(5.0/2.0)*T_B0(0,0,0) - (1.0/12.0)*T_B0(0,-2,0) - (1.0/12.0)*T_B0(0,2,0) + ((4.0/3.0))*T_B0(0,1,0) +
            ((4.0/3.0))*T_B0(0,-1,0))*inv2Delta1block0;

       d2_u0_dy = (-(5.0/2.0)*u0_B0(0,0,0) - (1.0/12.0)*u0_B0(0,-2,0) - (1.0/12.0)*u0_B0(0,2,0) +
            ((4.0/3.0))*u0_B0(0,1,0) + ((4.0/3.0))*u0_B0(0,-1,0))*inv2Delta1block0;

       d2_u1_dy = (-(5.0/2.0)*u1_B0(0,0,0) - (1.0/12.0)*u1_B0(0,-2,0) - (1.0/12.0)*u1_B0(0,2,0) +
            ((4.0/3.0))*u1_B0(0,1,0) + ((4.0/3.0))*u1_B0(0,-1,0))*inv2Delta1block0;

       d2_u2_dy = (-(5.0/2.0)*u2_B0(0,0,0) - (1.0/12.0)*u2_B0(0,-2,0) - (1.0/12.0)*u2_B0(0,2,0) +
            ((4.0/3.0))*u2_B0(0,1,0) + ((4.0/3.0))*u2_B0(0,-1,0))*inv2Delta1block0;

   }

    d2_T_dz = -(1.0/12.0)*(-16*T_B0(0,0,1) - 16*T_B0(0,0,-1) + 30*T_B0(0,0,0) + T_B0(0,0,-2) +
      T_B0(0,0,2))*inv2Delta2block0;

   d1_mu_dz = -(1.0/12.0)*(-mu_B0(0,0,-2) - 8*mu_B0(0,0,1) + 8*mu_B0(0,0,-1) + mu_B0(0,0,2))*invDelta2block0;

    d2_u0_dz = -(1.0/12.0)*(-16*u0_B0(0,0,1) - 16*u0_B0(0,0,-1) + 30*u0_B0(0,0,0) + u0_B0(0,0,-2) +
      u0_B0(0,0,2))*inv2Delta2block0;

    d2_u1_dz = ((1.0/12.0))*(-u1_B0(0,0,-2) - u1_B0(0,0,2) - 30*u1_B0(0,0,0) + 16*u1_B0(0,0,1) +
      16*u1_B0(0,0,-1))*inv2Delta2block0;

    d2_u2_dz = -(1.0/12.0)*(-16*u2_B0(0,0,1) - 16*u2_B0(0,0,-1) + 30*u2_B0(0,0,0) + u2_B0(0,0,-2) +
      u2_B0(0,0,2))*inv2Delta2block0;

   d1_wk0_dz = ((1.0/12.0))*(-wk0_B0(0,0,2) - 8*wk0_B0(0,0,-1) + 8*wk0_B0(0,0,1) + wk0_B0(0,0,-2))*invDelta2block0;

   d1_wk1_dz = ((1.0/12.0))*(-wk1_B0(0,0,2) - 8*wk1_B0(0,0,-1) + 8*wk1_B0(0,0,1) + wk1_B0(0,0,-2))*invDelta2block0;

   d1_wk2_dz = ((1.0/12.0))*(-wk2_B0(0,0,2) - 8*wk2_B0(0,0,-1) + 8*wk2_B0(0,0,1) + wk2_B0(0,0,-2))*invDelta2block0;

   d1_wk4_dz = -(1.0/12.0)*(-wk4_B0(0,0,-2) - 8*wk4_B0(0,0,1) + 8*wk4_B0(0,0,-1) + wk4_B0(0,0,2))*invDelta2block0;

   d1_wk5_dz = -(1.0/12.0)*(-wk5_B0(0,0,-2) - 8*wk5_B0(0,0,1) + 8*wk5_B0(0,0,-1) + wk5_B0(0,0,2))*invDelta2block0;

   d1_wk6_dz = ((1.0/12.0))*(-wk6_B0(0,0,2) - 8*wk6_B0(0,0,-1) + 8*wk6_B0(0,0,1) + wk6_B0(0,0,-2))*invDelta2block0;

    Residual1_B0(0,0,0) = (D01_B0(0,0,0)*d1_mu_dx + D11_B0(0,0,0)*d1_mu_dy)*(D00_B0(0,0,0)*wk1_B0(0,0,0) +
      D01_B0(0,0,0)*wk0_B0(0,0,0) + D10_B0(0,0,0)*wk5_B0(0,0,0) + D11_B0(0,0,0)*wk4_B0(0,0,0))*invRe +
      (D00_B0(0,0,0)*wk2_B0(0,0,0) + D10_B0(0,0,0)*wk6_B0(0,0,0) + wk8_B0(0,0,0))*invRe*d1_mu_dz +
      ((1.0/3.0))*(3*d2_u0_dz + D00_B0(0,0,0)*d1_wk2_dz + D10_B0(0,0,0)*d1_wk6_dz +
      3*(D01_B0(0,0,0)*D01_B0(0,0,0))*d2_u0_dx + 3*(D11_B0(0,0,0)*D11_B0(0,0,0))*d2_u0_dy +
      4*(D00_B0(0,0,0)*D00_B0(0,0,0))*d2_u0_dx + 4*(D10_B0(0,0,0)*D10_B0(0,0,0))*d2_u0_dy +
      D00_B0(0,0,0)*D01_B0(0,0,0)*d2_u1_dx + D00_B0(0,0,0)*D11_B0(0,0,0)*d1_wk1_dy +
      D01_B0(0,0,0)*D10_B0(0,0,0)*d1_wk1_dy + D10_B0(0,0,0)*D11_B0(0,0,0)*d2_u1_dy -
      2*D00_B0(0,0,0)*wk1_B0(0,0,0)*SD010_B0(0,0,0) - 2*D00_B0(0,0,0)*wk5_B0(0,0,0)*SD110_B0(0,0,0) -
      2*D10_B0(0,0,0)*wk1_B0(0,0,0)*SD011_B0(0,0,0) - 2*D10_B0(0,0,0)*wk5_B0(0,0,0)*SD111_B0(0,0,0) +
      3*D01_B0(0,0,0)*wk0_B0(0,0,0)*SD010_B0(0,0,0) + 3*D01_B0(0,0,0)*wk1_B0(0,0,0)*SD000_B0(0,0,0) +
      3*D01_B0(0,0,0)*wk4_B0(0,0,0)*SD110_B0(0,0,0) + 3*D01_B0(0,0,0)*wk5_B0(0,0,0)*SD100_B0(0,0,0) +
      3*D11_B0(0,0,0)*wk0_B0(0,0,0)*SD011_B0(0,0,0) + 3*D11_B0(0,0,0)*wk1_B0(0,0,0)*SD001_B0(0,0,0) +
      3*D11_B0(0,0,0)*wk4_B0(0,0,0)*SD111_B0(0,0,0) + 3*D11_B0(0,0,0)*wk5_B0(0,0,0)*SD101_B0(0,0,0) +
      4*D00_B0(0,0,0)*wk0_B0(0,0,0)*SD000_B0(0,0,0) + 4*D00_B0(0,0,0)*wk4_B0(0,0,0)*SD100_B0(0,0,0) +
      4*D10_B0(0,0,0)*wk0_B0(0,0,0)*SD001_B0(0,0,0) + 4*D10_B0(0,0,0)*wk4_B0(0,0,0)*SD101_B0(0,0,0) +
      6*D01_B0(0,0,0)*D11_B0(0,0,0)*d1_wk0_dy + 8*D00_B0(0,0,0)*D10_B0(0,0,0)*d1_wk0_dy)*invRe*mu_B0(0,0,0) +
      ((2.0/3.0))*(D00_B0(0,0,0)*d1_mu_dx + D10_B0(0,0,0)*d1_mu_dy)*(-wk10_B0(0,0,0) - D01_B0(0,0,0)*wk1_B0(0,0,0) -
      D11_B0(0,0,0)*wk5_B0(0,0,0) + 2*D00_B0(0,0,0)*wk0_B0(0,0,0) + 2*D10_B0(0,0,0)*wk4_B0(0,0,0))*invRe +
      Residual1_B0(0,0,0);

    Residual2_B0(0,0,0) = (D00_B0(0,0,0)*d1_mu_dx + D10_B0(0,0,0)*d1_mu_dy)*(D00_B0(0,0,0)*wk1_B0(0,0,0) +
      D01_B0(0,0,0)*wk0_B0(0,0,0) + D10_B0(0,0,0)*wk5_B0(0,0,0) + D11_B0(0,0,0)*wk4_B0(0,0,0))*invRe +
      (D01_B0(0,0,0)*wk2_B0(0,0,0) + D11_B0(0,0,0)*wk6_B0(0,0,0) + wk9_B0(0,0,0))*invRe*d1_mu_dz -
      (2.0/3.0)*(D01_B0(0,0,0)*d1_mu_dx + D11_B0(0,0,0)*d1_mu_dy)*(D00_B0(0,0,0)*wk0_B0(0,0,0) +
      D10_B0(0,0,0)*wk4_B0(0,0,0) - 2*D01_B0(0,0,0)*wk1_B0(0,0,0) - 2*D11_B0(0,0,0)*wk5_B0(0,0,0) +
      wk10_B0(0,0,0))*invRe + ((1.0/3.0))*(3*d2_u1_dz + D01_B0(0,0,0)*d1_wk2_dz + D11_B0(0,0,0)*d1_wk6_dz +
      3*(D00_B0(0,0,0)*D00_B0(0,0,0))*d2_u1_dx + 3*(D10_B0(0,0,0)*D10_B0(0,0,0))*d2_u1_dy +
      4*(D01_B0(0,0,0)*D01_B0(0,0,0))*d2_u1_dx + 4*(D11_B0(0,0,0)*D11_B0(0,0,0))*d2_u1_dy +
      D00_B0(0,0,0)*D01_B0(0,0,0)*d2_u0_dx + D00_B0(0,0,0)*D11_B0(0,0,0)*d1_wk0_dy +
      D01_B0(0,0,0)*D10_B0(0,0,0)*d1_wk0_dy + D10_B0(0,0,0)*D11_B0(0,0,0)*d2_u0_dy -
      2*D01_B0(0,0,0)*wk0_B0(0,0,0)*SD000_B0(0,0,0) - 2*D01_B0(0,0,0)*wk4_B0(0,0,0)*SD100_B0(0,0,0) -
      2*D11_B0(0,0,0)*wk0_B0(0,0,0)*SD001_B0(0,0,0) - 2*D11_B0(0,0,0)*wk4_B0(0,0,0)*SD101_B0(0,0,0) +
      3*D00_B0(0,0,0)*wk0_B0(0,0,0)*SD010_B0(0,0,0) + 3*D00_B0(0,0,0)*wk1_B0(0,0,0)*SD000_B0(0,0,0) +
      3*D00_B0(0,0,0)*wk4_B0(0,0,0)*SD110_B0(0,0,0) + 3*D00_B0(0,0,0)*wk5_B0(0,0,0)*SD100_B0(0,0,0) +
      3*D10_B0(0,0,0)*wk0_B0(0,0,0)*SD011_B0(0,0,0) + 3*D10_B0(0,0,0)*wk1_B0(0,0,0)*SD001_B0(0,0,0) +
      3*D10_B0(0,0,0)*wk4_B0(0,0,0)*SD111_B0(0,0,0) + 3*D10_B0(0,0,0)*wk5_B0(0,0,0)*SD101_B0(0,0,0) +
      4*D01_B0(0,0,0)*wk1_B0(0,0,0)*SD010_B0(0,0,0) + 4*D01_B0(0,0,0)*wk5_B0(0,0,0)*SD110_B0(0,0,0) +
      4*D11_B0(0,0,0)*wk1_B0(0,0,0)*SD011_B0(0,0,0) + 4*D11_B0(0,0,0)*wk5_B0(0,0,0)*SD111_B0(0,0,0) +
      6*D00_B0(0,0,0)*D10_B0(0,0,0)*d1_wk1_dy + 8*D01_B0(0,0,0)*D11_B0(0,0,0)*d1_wk1_dy)*invRe*mu_B0(0,0,0) +
      Residual2_B0(0,0,0);

    Residual3_B0(0,0,0) = (D00_B0(0,0,0)*d1_mu_dx + D10_B0(0,0,0)*d1_mu_dy)*(D00_B0(0,0,0)*wk2_B0(0,0,0) +
      D10_B0(0,0,0)*wk6_B0(0,0,0) + wk8_B0(0,0,0))*invRe + (D01_B0(0,0,0)*d1_mu_dx +
      D11_B0(0,0,0)*d1_mu_dy)*(D01_B0(0,0,0)*wk2_B0(0,0,0) + D11_B0(0,0,0)*wk6_B0(0,0,0) + wk9_B0(0,0,0))*invRe -
      (2.0/3.0)*(-2*wk10_B0(0,0,0) + D00_B0(0,0,0)*wk0_B0(0,0,0) + D01_B0(0,0,0)*wk1_B0(0,0,0) +
      D10_B0(0,0,0)*wk4_B0(0,0,0) + D11_B0(0,0,0)*wk5_B0(0,0,0))*invRe*d1_mu_dz + ((1.0/3.0))*(4*d2_u2_dz +
      D00_B0(0,0,0)*d1_wk0_dz + D01_B0(0,0,0)*d1_wk1_dz + D10_B0(0,0,0)*d1_wk4_dz + D11_B0(0,0,0)*d1_wk5_dz +
      3*(D00_B0(0,0,0)*D00_B0(0,0,0))*d2_u2_dx + 3*(D01_B0(0,0,0)*D01_B0(0,0,0))*d2_u2_dx +
      3*(D10_B0(0,0,0)*D10_B0(0,0,0))*d2_u2_dy + 3*(D11_B0(0,0,0)*D11_B0(0,0,0))*d2_u2_dy +
      3*D00_B0(0,0,0)*wk2_B0(0,0,0)*SD000_B0(0,0,0) + 3*D00_B0(0,0,0)*wk6_B0(0,0,0)*SD100_B0(0,0,0) +
      3*D01_B0(0,0,0)*wk2_B0(0,0,0)*SD010_B0(0,0,0) + 3*D01_B0(0,0,0)*wk6_B0(0,0,0)*SD110_B0(0,0,0) +
      3*D10_B0(0,0,0)*wk2_B0(0,0,0)*SD001_B0(0,0,0) + 3*D10_B0(0,0,0)*wk6_B0(0,0,0)*SD101_B0(0,0,0) +
      3*D11_B0(0,0,0)*wk2_B0(0,0,0)*SD011_B0(0,0,0) + 3*D11_B0(0,0,0)*wk6_B0(0,0,0)*SD111_B0(0,0,0) +
      6*D00_B0(0,0,0)*D10_B0(0,0,0)*d1_wk2_dy + 6*D01_B0(0,0,0)*D11_B0(0,0,0)*d1_wk2_dy)*invRe*mu_B0(0,0,0) +
      Residual3_B0(0,0,0);

    Residual4_B0(0,0,0) = (D00_B0(0,0,0)*wk1_B0(0,0,0) + D10_B0(0,0,0)*wk5_B0(0,0,0))*(D00_B0(0,0,0)*wk1_B0(0,0,0) +
      D01_B0(0,0,0)*wk0_B0(0,0,0) + D10_B0(0,0,0)*wk5_B0(0,0,0) + D11_B0(0,0,0)*wk4_B0(0,0,0))*invRe*mu_B0(0,0,0) +
      (D00_B0(0,0,0)*wk2_B0(0,0,0) + D10_B0(0,0,0)*wk6_B0(0,0,0))*(D00_B0(0,0,0)*wk2_B0(0,0,0) +
      D10_B0(0,0,0)*wk6_B0(0,0,0) + wk8_B0(0,0,0))*invRe*mu_B0(0,0,0) + (D00_B0(0,0,0)*d1_mu_dx +
      D10_B0(0,0,0)*d1_mu_dy)*(D00_B0(0,0,0)*wk2_B0(0,0,0) + D10_B0(0,0,0)*wk6_B0(0,0,0) +
      wk8_B0(0,0,0))*invRe*u2_B0(0,0,0) + (D00_B0(0,0,0)*d1_mu_dx + D10_B0(0,0,0)*d1_mu_dy)*(D00_B0(0,0,0)*wk1_B0(0,0,0)
      + D01_B0(0,0,0)*wk0_B0(0,0,0) + D10_B0(0,0,0)*wk5_B0(0,0,0) + D11_B0(0,0,0)*wk4_B0(0,0,0))*invRe*u1_B0(0,0,0) +
      (D01_B0(0,0,0)*wk0_B0(0,0,0) + D11_B0(0,0,0)*wk4_B0(0,0,0))*(D00_B0(0,0,0)*wk1_B0(0,0,0) +
      D01_B0(0,0,0)*wk0_B0(0,0,0) + D10_B0(0,0,0)*wk5_B0(0,0,0) + D11_B0(0,0,0)*wk4_B0(0,0,0))*invRe*mu_B0(0,0,0) +
      (D01_B0(0,0,0)*wk2_B0(0,0,0) + D11_B0(0,0,0)*wk6_B0(0,0,0))*(D01_B0(0,0,0)*wk2_B0(0,0,0) +
      D11_B0(0,0,0)*wk6_B0(0,0,0) + wk9_B0(0,0,0))*invRe*mu_B0(0,0,0) + (D01_B0(0,0,0)*d1_mu_dx +
      D11_B0(0,0,0)*d1_mu_dy)*(D01_B0(0,0,0)*wk2_B0(0,0,0) + D11_B0(0,0,0)*wk6_B0(0,0,0) +
      wk9_B0(0,0,0))*invRe*u2_B0(0,0,0) + (D01_B0(0,0,0)*d1_mu_dx + D11_B0(0,0,0)*d1_mu_dy)*(D00_B0(0,0,0)*wk1_B0(0,0,0)
      + D01_B0(0,0,0)*wk0_B0(0,0,0) + D10_B0(0,0,0)*wk5_B0(0,0,0) + D11_B0(0,0,0)*wk4_B0(0,0,0))*invRe*u0_B0(0,0,0) +
      (D00_B0(0,0,0)*wk2_B0(0,0,0) + D10_B0(0,0,0)*wk6_B0(0,0,0) + wk8_B0(0,0,0))*invRe*mu_B0(0,0,0)*wk8_B0(0,0,0) +
      (D00_B0(0,0,0)*wk2_B0(0,0,0) + D10_B0(0,0,0)*wk6_B0(0,0,0) + wk8_B0(0,0,0))*invRe*u0_B0(0,0,0)*d1_mu_dz +
      (D01_B0(0,0,0)*wk2_B0(0,0,0) + D11_B0(0,0,0)*wk6_B0(0,0,0) + wk9_B0(0,0,0))*invRe*mu_B0(0,0,0)*wk9_B0(0,0,0) +
      (D01_B0(0,0,0)*wk2_B0(0,0,0) + D11_B0(0,0,0)*wk6_B0(0,0,0) + wk9_B0(0,0,0))*invRe*u1_B0(0,0,0)*d1_mu_dz -
      (2.0/3.0)*(D01_B0(0,0,0)*wk1_B0(0,0,0) + D11_B0(0,0,0)*wk5_B0(0,0,0))*(D00_B0(0,0,0)*wk0_B0(0,0,0) +
      D10_B0(0,0,0)*wk4_B0(0,0,0) - 2*D01_B0(0,0,0)*wk1_B0(0,0,0) - 2*D11_B0(0,0,0)*wk5_B0(0,0,0) +
      wk10_B0(0,0,0))*invRe*mu_B0(0,0,0) - (2.0/3.0)*(D01_B0(0,0,0)*d1_mu_dx +
      D11_B0(0,0,0)*d1_mu_dy)*(D00_B0(0,0,0)*wk0_B0(0,0,0) + D10_B0(0,0,0)*wk4_B0(0,0,0) - 2*D01_B0(0,0,0)*wk1_B0(0,0,0)
      - 2*D11_B0(0,0,0)*wk5_B0(0,0,0) + wk10_B0(0,0,0))*invRe*u1_B0(0,0,0) - (2.0/3.0)*(-2*wk10_B0(0,0,0) +
      D00_B0(0,0,0)*wk0_B0(0,0,0) + D01_B0(0,0,0)*wk1_B0(0,0,0) + D10_B0(0,0,0)*wk4_B0(0,0,0) +
      D11_B0(0,0,0)*wk5_B0(0,0,0))*invRe*mu_B0(0,0,0)*wk10_B0(0,0,0) - (2.0/3.0)*(-2*wk10_B0(0,0,0) +
      D00_B0(0,0,0)*wk0_B0(0,0,0) + D01_B0(0,0,0)*wk1_B0(0,0,0) + D10_B0(0,0,0)*wk4_B0(0,0,0) +
      D11_B0(0,0,0)*wk5_B0(0,0,0))*invRe*u2_B0(0,0,0)*d1_mu_dz + ((1.0/3.0))*(4*d2_u2_dz + D00_B0(0,0,0)*d1_wk0_dz +
      D01_B0(0,0,0)*d1_wk1_dz + D10_B0(0,0,0)*d1_wk4_dz + D11_B0(0,0,0)*d1_wk5_dz +
      3*(D00_B0(0,0,0)*D00_B0(0,0,0))*d2_u2_dx + 3*(D01_B0(0,0,0)*D01_B0(0,0,0))*d2_u2_dx +
      3*(D10_B0(0,0,0)*D10_B0(0,0,0))*d2_u2_dy + 3*(D11_B0(0,0,0)*D11_B0(0,0,0))*d2_u2_dy +
      3*D00_B0(0,0,0)*wk2_B0(0,0,0)*SD000_B0(0,0,0) + 3*D00_B0(0,0,0)*wk6_B0(0,0,0)*SD100_B0(0,0,0) +
      3*D01_B0(0,0,0)*wk2_B0(0,0,0)*SD010_B0(0,0,0) + 3*D01_B0(0,0,0)*wk6_B0(0,0,0)*SD110_B0(0,0,0) +
      3*D10_B0(0,0,0)*wk2_B0(0,0,0)*SD001_B0(0,0,0) + 3*D10_B0(0,0,0)*wk6_B0(0,0,0)*SD101_B0(0,0,0) +
      3*D11_B0(0,0,0)*wk2_B0(0,0,0)*SD011_B0(0,0,0) + 3*D11_B0(0,0,0)*wk6_B0(0,0,0)*SD111_B0(0,0,0) +
      6*D00_B0(0,0,0)*D10_B0(0,0,0)*d1_wk2_dy + 6*D01_B0(0,0,0)*D11_B0(0,0,0)*d1_wk2_dy)*invRe*mu_B0(0,0,0)*u2_B0(0,0,0)
      + ((1.0/3.0))*(3*d2_u0_dz + D00_B0(0,0,0)*d1_wk2_dz + D10_B0(0,0,0)*d1_wk6_dz +
      3*(D01_B0(0,0,0)*D01_B0(0,0,0))*d2_u0_dx + 3*(D11_B0(0,0,0)*D11_B0(0,0,0))*d2_u0_dy +
      4*(D00_B0(0,0,0)*D00_B0(0,0,0))*d2_u0_dx + 4*(D10_B0(0,0,0)*D10_B0(0,0,0))*d2_u0_dy +
      D00_B0(0,0,0)*D01_B0(0,0,0)*d2_u1_dx + D00_B0(0,0,0)*D11_B0(0,0,0)*d1_wk1_dy +
      D01_B0(0,0,0)*D10_B0(0,0,0)*d1_wk1_dy + D10_B0(0,0,0)*D11_B0(0,0,0)*d2_u1_dy -
      2*D00_B0(0,0,0)*wk1_B0(0,0,0)*SD010_B0(0,0,0) - 2*D00_B0(0,0,0)*wk5_B0(0,0,0)*SD110_B0(0,0,0) -
      2*D10_B0(0,0,0)*wk1_B0(0,0,0)*SD011_B0(0,0,0) - 2*D10_B0(0,0,0)*wk5_B0(0,0,0)*SD111_B0(0,0,0) +
      3*D01_B0(0,0,0)*wk0_B0(0,0,0)*SD010_B0(0,0,0) + 3*D01_B0(0,0,0)*wk1_B0(0,0,0)*SD000_B0(0,0,0) +
      3*D01_B0(0,0,0)*wk4_B0(0,0,0)*SD110_B0(0,0,0) + 3*D01_B0(0,0,0)*wk5_B0(0,0,0)*SD100_B0(0,0,0) +
      3*D11_B0(0,0,0)*wk0_B0(0,0,0)*SD011_B0(0,0,0) + 3*D11_B0(0,0,0)*wk1_B0(0,0,0)*SD001_B0(0,0,0) +
      3*D11_B0(0,0,0)*wk4_B0(0,0,0)*SD111_B0(0,0,0) + 3*D11_B0(0,0,0)*wk5_B0(0,0,0)*SD101_B0(0,0,0) +
      4*D00_B0(0,0,0)*wk0_B0(0,0,0)*SD000_B0(0,0,0) + 4*D00_B0(0,0,0)*wk4_B0(0,0,0)*SD100_B0(0,0,0) +
      4*D10_B0(0,0,0)*wk0_B0(0,0,0)*SD001_B0(0,0,0) + 4*D10_B0(0,0,0)*wk4_B0(0,0,0)*SD101_B0(0,0,0) +
      6*D01_B0(0,0,0)*D11_B0(0,0,0)*d1_wk0_dy + 8*D00_B0(0,0,0)*D10_B0(0,0,0)*d1_wk0_dy)*invRe*mu_B0(0,0,0)*u0_B0(0,0,0)
      + ((1.0/3.0))*(3*d2_u1_dz + D01_B0(0,0,0)*d1_wk2_dz + D11_B0(0,0,0)*d1_wk6_dz +
      3*(D00_B0(0,0,0)*D00_B0(0,0,0))*d2_u1_dx + 3*(D10_B0(0,0,0)*D10_B0(0,0,0))*d2_u1_dy +
      4*(D01_B0(0,0,0)*D01_B0(0,0,0))*d2_u1_dx + 4*(D11_B0(0,0,0)*D11_B0(0,0,0))*d2_u1_dy +
      D00_B0(0,0,0)*D01_B0(0,0,0)*d2_u0_dx + D00_B0(0,0,0)*D11_B0(0,0,0)*d1_wk0_dy +
      D01_B0(0,0,0)*D10_B0(0,0,0)*d1_wk0_dy + D10_B0(0,0,0)*D11_B0(0,0,0)*d2_u0_dy -
      2*D01_B0(0,0,0)*wk0_B0(0,0,0)*SD000_B0(0,0,0) - 2*D01_B0(0,0,0)*wk4_B0(0,0,0)*SD100_B0(0,0,0) -
      2*D11_B0(0,0,0)*wk0_B0(0,0,0)*SD001_B0(0,0,0) - 2*D11_B0(0,0,0)*wk4_B0(0,0,0)*SD101_B0(0,0,0) +
      3*D00_B0(0,0,0)*wk0_B0(0,0,0)*SD010_B0(0,0,0) + 3*D00_B0(0,0,0)*wk1_B0(0,0,0)*SD000_B0(0,0,0) +
      3*D00_B0(0,0,0)*wk4_B0(0,0,0)*SD110_B0(0,0,0) + 3*D00_B0(0,0,0)*wk5_B0(0,0,0)*SD100_B0(0,0,0) +
      3*D10_B0(0,0,0)*wk0_B0(0,0,0)*SD011_B0(0,0,0) + 3*D10_B0(0,0,0)*wk1_B0(0,0,0)*SD001_B0(0,0,0) +
      3*D10_B0(0,0,0)*wk4_B0(0,0,0)*SD111_B0(0,0,0) + 3*D10_B0(0,0,0)*wk5_B0(0,0,0)*SD101_B0(0,0,0) +
      4*D01_B0(0,0,0)*wk1_B0(0,0,0)*SD010_B0(0,0,0) + 4*D01_B0(0,0,0)*wk5_B0(0,0,0)*SD110_B0(0,0,0) +
      4*D11_B0(0,0,0)*wk1_B0(0,0,0)*SD011_B0(0,0,0) + 4*D11_B0(0,0,0)*wk5_B0(0,0,0)*SD111_B0(0,0,0) +
      6*D00_B0(0,0,0)*D10_B0(0,0,0)*d1_wk1_dy + 8*D01_B0(0,0,0)*D11_B0(0,0,0)*d1_wk1_dy)*invRe*mu_B0(0,0,0)*u1_B0(0,0,0)
      + ((2.0/3.0))*(D00_B0(0,0,0)*wk0_B0(0,0,0) + D10_B0(0,0,0)*wk4_B0(0,0,0))*(-wk10_B0(0,0,0) -
      D01_B0(0,0,0)*wk1_B0(0,0,0) - D11_B0(0,0,0)*wk5_B0(0,0,0) + 2*D00_B0(0,0,0)*wk0_B0(0,0,0) +
      2*D10_B0(0,0,0)*wk4_B0(0,0,0))*invRe*mu_B0(0,0,0) + ((2.0/3.0))*(D00_B0(0,0,0)*d1_mu_dx +
      D10_B0(0,0,0)*d1_mu_dy)*(-wk10_B0(0,0,0) - D01_B0(0,0,0)*wk1_B0(0,0,0) - D11_B0(0,0,0)*wk5_B0(0,0,0) +
      2*D00_B0(0,0,0)*wk0_B0(0,0,0) + 2*D10_B0(0,0,0)*wk4_B0(0,0,0))*invRe*u0_B0(0,0,0) + (D00_B0(0,0,0)*wk3_B0(0,0,0) +
      D10_B0(0,0,0)*wk7_B0(0,0,0))*(D00_B0(0,0,0)*d1_mu_dx + D10_B0(0,0,0)*d1_mu_dy)*invPr*invRe*inv2Minf*inv_gamma_m1 +
      (D01_B0(0,0,0)*wk3_B0(0,0,0) + D11_B0(0,0,0)*wk7_B0(0,0,0))*(D01_B0(0,0,0)*d1_mu_dx +
      D11_B0(0,0,0)*d1_mu_dy)*invPr*invRe*inv2Minf*inv_gamma_m1 + ((D00_B0(0,0,0)*D00_B0(0,0,0))*d2_T_dx +
      (D01_B0(0,0,0)*D01_B0(0,0,0))*d2_T_dx + (D10_B0(0,0,0)*D10_B0(0,0,0))*d2_T_dy +
      (D11_B0(0,0,0)*D11_B0(0,0,0))*d2_T_dy + D00_B0(0,0,0)*wk3_B0(0,0,0)*SD000_B0(0,0,0) +
      D00_B0(0,0,0)*wk7_B0(0,0,0)*SD100_B0(0,0,0) + D01_B0(0,0,0)*wk3_B0(0,0,0)*SD010_B0(0,0,0) +
      D01_B0(0,0,0)*wk7_B0(0,0,0)*SD110_B0(0,0,0) + D10_B0(0,0,0)*wk3_B0(0,0,0)*SD001_B0(0,0,0) +
      D10_B0(0,0,0)*wk7_B0(0,0,0)*SD101_B0(0,0,0) + D11_B0(0,0,0)*wk3_B0(0,0,0)*SD011_B0(0,0,0) +
      D11_B0(0,0,0)*wk7_B0(0,0,0)*SD111_B0(0,0,0) + 2*D00_B0(0,0,0)*D10_B0(0,0,0)*d1_wk3_dy +
      2*D01_B0(0,0,0)*D11_B0(0,0,0)*d1_wk3_dy + d2_T_dz)*invPr*invRe*inv2Minf*inv_gamma_m1*mu_B0(0,0,0) +
      invPr*invRe*inv2Minf*inv_gamma_m1*wk11_B0(0,0,0)*d1_mu_dz + Residual4_B0(0,0,0);

}

 void opensbliblock00Kernel067(const ACC<double> &Residual0_B0, const ACC<double> &Residual1_B0, const ACC<double>
&Residual2_B0, const ACC<double> &Residual3_B0, const ACC<double> &Residual4_B0, ACC<double> &rhoE_B0, ACC<double>
&rhoE_RKold_B0, ACC<double> &rho_B0, ACC<double> &rho_RKold_B0, ACC<double> &rhou0_B0, ACC<double> &rhou0_RKold_B0,
ACC<double> &rhou1_B0, ACC<double> &rhou1_RKold_B0, ACC<double> &rhou2_B0, ACC<double> &rhou2_RKold_B0, const double
*rkA, const double *rkB)
{
   rho_RKold_B0(0,0,0) = rkA[0]*rho_RKold_B0(0,0,0) + dt*Residual0_B0(0,0,0);

   rho_B0(0,0,0) = rkB[0]*rho_RKold_B0(0,0,0) + rho_B0(0,0,0);

   rhou0_RKold_B0(0,0,0) = rkA[0]*rhou0_RKold_B0(0,0,0) + dt*Residual1_B0(0,0,0);

   rhou0_B0(0,0,0) = rkB[0]*rhou0_RKold_B0(0,0,0) + rhou0_B0(0,0,0);

   rhou1_RKold_B0(0,0,0) = rkA[0]*rhou1_RKold_B0(0,0,0) + dt*Residual2_B0(0,0,0);

   rhou1_B0(0,0,0) = rkB[0]*rhou1_RKold_B0(0,0,0) + rhou1_B0(0,0,0);

   rhou2_RKold_B0(0,0,0) = rkA[0]*rhou2_RKold_B0(0,0,0) + dt*Residual3_B0(0,0,0);

   rhou2_B0(0,0,0) = rkB[0]*rhou2_RKold_B0(0,0,0) + rhou2_B0(0,0,0);

   rhoE_RKold_B0(0,0,0) = rkA[0]*rhoE_RKold_B0(0,0,0) + dt*Residual4_B0(0,0,0);

   rhoE_B0(0,0,0) = rkB[0]*rhoE_RKold_B0(0,0,0) + rhoE_B0(0,0,0);

}

 void opensbliblock00Kernel057(const ACC<double> &rhoE_B0, const ACC<double> &rho_B0, const ACC<double> &rhou0_B0, const
ACC<double> &rhou1_B0, const ACC<double> &rhou2_B0, ACC<double> &a_B0, ACC<double> &kappa_B0, ACC<double> &u0_B0,
ACC<double> &u1_B0, ACC<double> &u2_B0, ACC<double> &p_B0)
{
   double inv_rho = 0.0;
   kappa_B0(0,0,0) = 1;

   inv_rho = 1.0/rho_B0(0,0,0);

   u0_B0(0,0,0) = rhou0_B0(0,0,0)*inv_rho;

   u1_B0(0,0,0) = rhou1_B0(0,0,0)*inv_rho;

   u2_B0(0,0,0) = rhou2_B0(0,0,0)*inv_rho;

    p_B0(0,0,0) = (-1 + gama)*(-(0.5*(rhou0_B0(0,0,0)*rhou0_B0(0,0,0)) + 0.5*(rhou1_B0(0,0,0)*rhou1_B0(0,0,0)) +
      0.5*(rhou2_B0(0,0,0)*rhou2_B0(0,0,0)))*inv_rho + rhoE_B0(0,0,0));

   a_B0(0,0,0) = sqrt(gama*p_B0(0,0,0)*inv_rho);

}

 void opensbliblock00Kernel061(const ACC<double> &u0_B0, const ACC<double> &u1_B0, const ACC<double> &u2_B0, ACC<double>
&kappa_B0, const int *idx)
{
   double d1_u0_dx = 0.0;
   double d1_u0_dy = 0.0;
   double d1_u0_dz = 0.0;
   double d1_u1_dx = 0.0;
   double d1_u1_dy = 0.0;
   double d1_u1_dz = 0.0;
   double d1_u2_dx = 0.0;
   double d1_u2_dy = 0.0;
   double d1_u2_dz = 0.0;
    d1_u2_dx = invDelta0block0*((idx[0] == 0) ? (
   -3*u2_B0(2,0,0) + 4*u2_B0(1,0,0) - (25.0/12.0)*u2_B0(0,0,0) -
      (1.0/4.0)*u2_B0(4,0,0) + ((4.0/3.0))*u2_B0(3,0,0)
)
: ((idx[0] == 1) ? (
   -(5.0/6.0)*u2_B0(0,0,0) -
      (1.0/2.0)*u2_B0(2,0,0) - (1.0/4.0)*u2_B0(-1,0,0) + ((1.0/12.0))*u2_B0(3,0,0) + ((3.0/2.0))*u2_B0(1,0,0)
)
:
      ((idx[0] == -1 + block0np0) ? (
   -4*u2_B0(-1,0,0) + 3*u2_B0(-2,0,0) - (4.0/3.0)*u2_B0(-3,0,0) +
      ((1.0/4.0))*u2_B0(-4,0,0) + ((25.0/12.0))*u2_B0(0,0,0)
)
: ((idx[0] == -2 + block0np0) ? (
  
      ((1.0/2.0))*u2_B0(-2,0,0) - (3.0/2.0)*u2_B0(-1,0,0) - (1.0/12.0)*u2_B0(-3,0,0) + ((1.0/4.0))*u2_B0(1,0,0) +
      ((5.0/6.0))*u2_B0(0,0,0)
)
: (
   -(2.0/3.0)*u2_B0(-1,0,0) - (1.0/12.0)*u2_B0(2,0,0) + ((1.0/12.0))*u2_B0(-2,0,0)
      + ((2.0/3.0))*u2_B0(1,0,0)
)))));

    d1_u0_dy = invDelta1block0*((idx[1] == 0) ? (
   -3*u0_B0(0,2,0) + 4*u0_B0(0,1,0) - (25.0/12.0)*u0_B0(0,0,0) -
      (1.0/4.0)*u0_B0(0,4,0) + ((4.0/3.0))*u0_B0(0,3,0)
)
: ((idx[1] == 1) ? (
   -(5.0/6.0)*u0_B0(0,0,0) -
      (1.0/2.0)*u0_B0(0,2,0) - (1.0/4.0)*u0_B0(0,-1,0) + ((1.0/12.0))*u0_B0(0,3,0) + ((3.0/2.0))*u0_B0(0,1,0)
)
: (
  
      -(2.0/3.0)*u0_B0(0,-1,0) - (1.0/12.0)*u0_B0(0,2,0) + ((1.0/12.0))*u0_B0(0,-2,0) + ((2.0/3.0))*u0_B0(0,1,0)
)));

    d1_u0_dz = (-(2.0/3.0)*u0_B0(0,0,-1) - (1.0/12.0)*u0_B0(0,0,2) + ((1.0/12.0))*u0_B0(0,0,-2) +
      ((2.0/3.0))*u0_B0(0,0,1))*invDelta2block0;

    d1_u1_dx = invDelta0block0*((idx[0] == 0) ? (
   -3*u1_B0(2,0,0) + 4*u1_B0(1,0,0) - (25.0/12.0)*u1_B0(0,0,0) -
      (1.0/4.0)*u1_B0(4,0,0) + ((4.0/3.0))*u1_B0(3,0,0)
)
: ((idx[0] == 1) ? (
   -(5.0/6.0)*u1_B0(0,0,0) -
      (1.0/2.0)*u1_B0(2,0,0) - (1.0/4.0)*u1_B0(-1,0,0) + ((1.0/12.0))*u1_B0(3,0,0) + ((3.0/2.0))*u1_B0(1,0,0)
)
:
      ((idx[0] == -1 + block0np0) ? (
   -4*u1_B0(-1,0,0) + 3*u1_B0(-2,0,0) - (4.0/3.0)*u1_B0(-3,0,0) +
      ((1.0/4.0))*u1_B0(-4,0,0) + ((25.0/12.0))*u1_B0(0,0,0)
)
: ((idx[0] == -2 + block0np0) ? (
  
      ((1.0/2.0))*u1_B0(-2,0,0) - (3.0/2.0)*u1_B0(-1,0,0) - (1.0/12.0)*u1_B0(-3,0,0) + ((1.0/4.0))*u1_B0(1,0,0) +
      ((5.0/6.0))*u1_B0(0,0,0)
)
: (
   -(2.0/3.0)*u1_B0(-1,0,0) - (1.0/12.0)*u1_B0(2,0,0) + ((1.0/12.0))*u1_B0(-2,0,0)
      + ((2.0/3.0))*u1_B0(1,0,0)
)))));

    d1_u1_dz = (-(2.0/3.0)*u1_B0(0,0,-1) - (1.0/12.0)*u1_B0(0,0,2) + ((1.0/12.0))*u1_B0(0,0,-2) +
      ((2.0/3.0))*u1_B0(0,0,1))*invDelta2block0;

    d1_u1_dy = invDelta1block0*((idx[1] == 0) ? (
   -3*u1_B0(0,2,0) + 4*u1_B0(0,1,0) - (25.0/12.0)*u1_B0(0,0,0) -
      (1.0/4.0)*u1_B0(0,4,0) + ((4.0/3.0))*u1_B0(0,3,0)
)
: ((idx[1] == 1) ? (
   -(5.0/6.0)*u1_B0(0,0,0) -
      (1.0/2.0)*u1_B0(0,2,0) - (1.0/4.0)*u1_B0(0,-1,0) + ((1.0/12.0))*u1_B0(0,3,0) + ((3.0/2.0))*u1_B0(0,1,0)
)
: (
  
      -(2.0/3.0)*u1_B0(0,-1,0) - (1.0/12.0)*u1_B0(0,2,0) + ((1.0/12.0))*u1_B0(0,-2,0) + ((2.0/3.0))*u1_B0(0,1,0)
)));

    d1_u0_dx = invDelta0block0*((idx[0] == 0) ? (
   -3*u0_B0(2,0,0) + 4*u0_B0(1,0,0) - (25.0/12.0)*u0_B0(0,0,0) -
      (1.0/4.0)*u0_B0(4,0,0) + ((4.0/3.0))*u0_B0(3,0,0)
)
: ((idx[0] == 1) ? (
   -(5.0/6.0)*u0_B0(0,0,0) -
      (1.0/2.0)*u0_B0(2,0,0) - (1.0/4.0)*u0_B0(-1,0,0) + ((1.0/12.0))*u0_B0(3,0,0) + ((3.0/2.0))*u0_B0(1,0,0)
)
:
      ((idx[0] == -1 + block0np0) ? (
   -4*u0_B0(-1,0,0) + 3*u0_B0(-2,0,0) - (4.0/3.0)*u0_B0(-3,0,0) +
      ((1.0/4.0))*u0_B0(-4,0,0) + ((25.0/12.0))*u0_B0(0,0,0)
)
: ((idx[0] == -2 + block0np0) ? (
  
      ((1.0/2.0))*u0_B0(-2,0,0) - (3.0/2.0)*u0_B0(-1,0,0) - (1.0/12.0)*u0_B0(-3,0,0) + ((1.0/4.0))*u0_B0(1,0,0) +
      ((5.0/6.0))*u0_B0(0,0,0)
)
: (
   -(2.0/3.0)*u0_B0(-1,0,0) - (1.0/12.0)*u0_B0(2,0,0) + ((1.0/12.0))*u0_B0(-2,0,0)
      + ((2.0/3.0))*u0_B0(1,0,0)
)))));

    d1_u2_dz = (-(2.0/3.0)*u2_B0(0,0,-1) - (1.0/12.0)*u2_B0(0,0,2) + ((1.0/12.0))*u2_B0(0,0,-2) +
      ((2.0/3.0))*u2_B0(0,0,1))*invDelta2block0;

    d1_u2_dy = invDelta1block0*((idx[1] == 0) ? (
   -3*u2_B0(0,2,0) + 4*u2_B0(0,1,0) - (25.0/12.0)*u2_B0(0,0,0) -
      (1.0/4.0)*u2_B0(0,4,0) + ((4.0/3.0))*u2_B0(0,3,0)
)
: ((idx[1] == 1) ? (
   -(5.0/6.0)*u2_B0(0,0,0) -
      (1.0/2.0)*u2_B0(0,2,0) - (1.0/4.0)*u2_B0(0,-1,0) + ((1.0/12.0))*u2_B0(0,3,0) + ((3.0/2.0))*u2_B0(0,1,0)
)
: (
  
      -(2.0/3.0)*u2_B0(0,-1,0) - (1.0/12.0)*u2_B0(0,2,0) + ((1.0/12.0))*u2_B0(0,-2,0) + ((2.0/3.0))*u2_B0(0,1,0)
)));

    kappa_B0(0,0,0) = ((d1_u0_dx + d1_u1_dy + d1_u2_dz)*(d1_u0_dx + d1_u1_dy + d1_u2_dz))*(0.5 - 0.5*tanh(2.5 +
      500.0*(d1_u0_dx + d1_u1_dy + d1_u2_dz)/sqrt((Delta0block0*Delta0block0) + (Delta1block0*Delta1block0) +
      (Delta2block0*Delta2block0))))/(1.0e-40 + ((-d1_u0_dy + d1_u1_dx)*(-d1_u0_dy + d1_u1_dx)) + ((-d1_u1_dz +
      d1_u2_dy)*(-d1_u1_dz + d1_u2_dy)) + ((-d1_u2_dx + d1_u0_dz)*(-d1_u2_dx + d1_u0_dz)) + ((d1_u0_dx + d1_u1_dy +
      d1_u2_dz)*(d1_u0_dx + d1_u1_dy + d1_u2_dz)));

}

 void opensbliblock00Kernel062(ACC<double> &Residual0_B0, ACC<double> &Residual1_B0, ACC<double> &Residual2_B0,
ACC<double> &Residual3_B0, ACC<double> &Residual4_B0, ACC<double> &rhoE_RKold_B0, ACC<double> &rho_RKold_B0, ACC<double>
&rhou0_RKold_B0, ACC<double> &rhou1_RKold_B0, ACC<double> &rhou2_RKold_B0, ACC<double> &wk0_B0, ACC<double> &wk1_B0,
ACC<double> &wk2_B0, ACC<double> &wk3_B0, ACC<double> &wk4_B0)
{
   wk0_B0(0,0,0) = 0.0;

   wk1_B0(0,0,0) = 0.0;

   wk2_B0(0,0,0) = 0.0;

   wk3_B0(0,0,0) = 0.0;

   wk4_B0(0,0,0) = 0.0;

   Residual0_B0(0,0,0) = 0.0;

   Residual1_B0(0,0,0) = 0.0;

   Residual2_B0(0,0,0) = 0.0;

   Residual3_B0(0,0,0) = 0.0;

   Residual4_B0(0,0,0) = 0.0;

   rho_RKold_B0(0,0,0) = 0.0;

   rhou0_RKold_B0(0,0,0) = 0.0;

   rhou1_RKold_B0(0,0,0) = 0.0;

   rhou2_RKold_B0(0,0,0) = 0.0;

   rhoE_RKold_B0(0,0,0) = 0.0;

}

 void opensbliblock00Kernel063(const ACC<double> &D00_B0, const ACC<double> &D01_B0, const ACC<double> &a_B0, const
ACC<double> &detJ_B0, const ACC<double> &kappa_B0, const ACC<double> &p_B0, const ACC<double> &rhoE_B0, const
ACC<double> &rho_B0, const ACC<double> &rhou0_B0, const ACC<double> &rhou1_B0, const ACC<double> &rhou2_B0, const
ACC<double> &u0_B0, const ACC<double> &u1_B0, const ACC<double> &u2_B0, ACC<double> &wk0_B0, ACC<double> &wk1_B0,
ACC<double> &wk2_B0, ACC<double> &wk3_B0, ACC<double> &wk4_B0)
{
   double AVG_0_0_LEV_00 = 0.0;
   double AVG_0_0_LEV_01 = 0.0;
   double AVG_0_0_LEV_02 = 0.0;
   double AVG_0_0_LEV_03 = 0.0;
   double AVG_0_0_LEV_04 = 0.0;
   double AVG_0_0_LEV_10 = 0.0;
   double AVG_0_0_LEV_11 = 0.0;
   double AVG_0_0_LEV_12 = 0.0;
   double AVG_0_0_LEV_13 = 0.0;
   double AVG_0_0_LEV_14 = 0.0;
   double AVG_0_0_LEV_20 = 0.0;
   double AVG_0_0_LEV_21 = 0.0;
   double AVG_0_0_LEV_22 = 0.0;
   double AVG_0_0_LEV_30 = 0.0;
   double AVG_0_0_LEV_31 = 0.0;
   double AVG_0_0_LEV_32 = 0.0;
   double AVG_0_0_LEV_33 = 0.0;
   double AVG_0_0_LEV_34 = 0.0;
   double AVG_0_0_LEV_40 = 0.0;
   double AVG_0_0_LEV_41 = 0.0;
   double AVG_0_0_LEV_42 = 0.0;
   double AVG_0_0_LEV_43 = 0.0;
   double AVG_0_0_LEV_44 = 0.0;
   double AVG_0_D00 = 0.0;
   double AVG_0_D01 = 0.0;
   double AVG_0_a = 0.0;
   double AVG_0_detJ = 0.0;
   double AVG_0_inv_rho = 0.0;
   double AVG_0_rho = 0.0;
   double AVG_0_u0 = 0.0;
   double AVG_0_u1 = 0.0;
   double AVG_0_u2 = 0.0;
   double CF_00 = 0.0;
   double CF_01 = 0.0;
   double CF_02 = 0.0;
   double CF_03 = 0.0;
   double CF_04 = 0.0;
   double CF_05 = 0.0;
   double CF_10 = 0.0;
   double CF_11 = 0.0;
   double CF_12 = 0.0;
   double CF_13 = 0.0;
   double CF_14 = 0.0;
   double CF_15 = 0.0;
   double CF_20 = 0.0;
   double CF_21 = 0.0;
   double CF_22 = 0.0;
   double CF_23 = 0.0;
   double CF_24 = 0.0;
   double CF_25 = 0.0;
   double CF_30 = 0.0;
   double CF_31 = 0.0;
   double CF_32 = 0.0;
   double CF_33 = 0.0;
   double CF_34 = 0.0;
   double CF_35 = 0.0;
   double CF_40 = 0.0;
   double CF_41 = 0.0;
   double CF_42 = 0.0;
   double CF_43 = 0.0;
   double CF_44 = 0.0;
   double CF_45 = 0.0;
   double CS_00 = 0.0;
   double CS_01 = 0.0;
   double CS_02 = 0.0;
   double CS_03 = 0.0;
   double CS_04 = 0.0;
   double CS_05 = 0.0;
   double CS_10 = 0.0;
   double CS_11 = 0.0;
   double CS_12 = 0.0;
   double CS_13 = 0.0;
   double CS_14 = 0.0;
   double CS_15 = 0.0;
   double CS_20 = 0.0;
   double CS_21 = 0.0;
   double CS_22 = 0.0;
   double CS_23 = 0.0;
   double CS_24 = 0.0;
   double CS_25 = 0.0;
   double CS_30 = 0.0;
   double CS_31 = 0.0;
   double CS_32 = 0.0;
   double CS_33 = 0.0;
   double CS_34 = 0.0;
   double CS_35 = 0.0;
   double CS_40 = 0.0;
   double CS_41 = 0.0;
   double CS_42 = 0.0;
   double CS_43 = 0.0;
   double CS_44 = 0.0;
   double CS_45 = 0.0;
   double Recon_0 = 0.0;
   double Recon_1 = 0.0;
   double Recon_2 = 0.0;
   double Recon_3 = 0.0;
   double Recon_4 = 0.0;
   double alpha_0 = 0.0;
   double alpha_1 = 0.0;
   double alpha_2 = 0.0;
   double beta_0 = 0.0;
   double beta_1 = 0.0;
   double beta_2 = 0.0;
   double inv_AVG_a = 0.0;
   double inv_AVG_met_fact = 0.0;
   double inv_AVG_rho = 0.0;
   double inv_alpha_sum = 0.0;
   double max_lambda_00 = 0.0;
   double max_lambda_11 = 0.0;
   double max_lambda_22 = 0.0;
   double max_lambda_33 = 0.0;
   double max_lambda_44 = 0.0;
   double omega_0 = 0.0;
   double omega_1 = 0.0;
   double omega_2 = 0.0;
   double rj0 = 0.0;
   double rj1 = 0.0;
   double rj2 = 0.0;
   double rj3 = 0.0;
   double rj4 = 0.0;
    if (fmax(kappa_B0(-2,0,0), fmax(kappa_B0(-1,0,0), fmax(kappa_B0(0,0,0), fmax(kappa_B0(1,0,0), fmax(kappa_B0(-3,0,0),
      kappa_B0(2,0,0)))))) > Ducros_check){

      AVG_0_rho = sqrt(rho_B0(0,0,0)*rho_B0(1,0,0));

      AVG_0_inv_rho = 1.0/((sqrt(rho_B0(0,0,0)) + sqrt(rho_B0(1,0,0))));

      AVG_0_u0 = (sqrt(rho_B0(0,0,0))*u0_B0(0,0,0) + sqrt(rho_B0(1,0,0))*u0_B0(1,0,0))*AVG_0_inv_rho;

      AVG_0_u1 = (sqrt(rho_B0(0,0,0))*u1_B0(0,0,0) + sqrt(rho_B0(1,0,0))*u1_B0(1,0,0))*AVG_0_inv_rho;

      AVG_0_u2 = (sqrt(rho_B0(0,0,0))*u2_B0(0,0,0) + sqrt(rho_B0(1,0,0))*u2_B0(1,0,0))*AVG_0_inv_rho;

       AVG_0_a = sqrt((-(1.0/2.0)*((AVG_0_u0*AVG_0_u0) + (AVG_0_u1*AVG_0_u1) + (AVG_0_u2*AVG_0_u2)) + ((p_B0(0,0,0) +
            rhoE_B0(0,0,0))/sqrt(rho_B0(0,0,0)) + (p_B0(1,0,0) +
            rhoE_B0(1,0,0))/sqrt(rho_B0(1,0,0)))*AVG_0_inv_rho)*gamma_m1);

      AVG_0_D01 = ((1.0/2.0))*(D01_B0(0,0,0) + D01_B0(1,0,0));

      AVG_0_D00 = ((1.0/2.0))*(D00_B0(0,0,0) + D00_B0(1,0,0));

      AVG_0_detJ = ((1.0/2.0))*(detJ_B0(0,0,0) + detJ_B0(1,0,0));

      inv_AVG_a = 1.0/(AVG_0_a);

      inv_AVG_rho = 1.0/(AVG_0_rho);

      inv_AVG_met_fact = pow((AVG_0_D00*AVG_0_D00) + (AVG_0_D01*AVG_0_D01), (-1.0/2.0));

       AVG_0_0_LEV_00 = -(1.0/2.0)*(-2*AVG_0_D00 - (AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*AVG_0_D00 -
            (AVG_0_u1*AVG_0_u1)*(inv_AVG_a*inv_AVG_a)*AVG_0_D00 - (AVG_0_u2*AVG_0_u2)*(inv_AVG_a*inv_AVG_a)*AVG_0_D00 -
            2*AVG_0_D01*AVG_0_u2*inv_AVG_rho + (AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*gama*AVG_0_D00 +
            (AVG_0_u1*AVG_0_u1)*(inv_AVG_a*inv_AVG_a)*gama*AVG_0_D00 +
            (AVG_0_u2*AVG_0_u2)*(inv_AVG_a*inv_AVG_a)*gama*AVG_0_D00)*inv_AVG_met_fact;

      AVG_0_0_LEV_01 = (inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_0_D00*AVG_0_u0*inv_AVG_met_fact;

      AVG_0_0_LEV_02 = (inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_0_D00*AVG_0_u1*inv_AVG_met_fact;

       AVG_0_0_LEV_03 = (-AVG_0_D01*inv_AVG_rho - (inv_AVG_a*inv_AVG_a)*AVG_0_D00*AVG_0_u2 +
            (inv_AVG_a*inv_AVG_a)*gama*AVG_0_D00*AVG_0_u2)*inv_AVG_met_fact;

      AVG_0_0_LEV_04 = -(inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_0_D00*inv_AVG_met_fact;

       AVG_0_0_LEV_10 = -(1.0/2.0)*(-2*AVG_0_D01 - (AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*AVG_0_D01 -
            (AVG_0_u1*AVG_0_u1)*(inv_AVG_a*inv_AVG_a)*AVG_0_D01 - (AVG_0_u2*AVG_0_u2)*(inv_AVG_a*inv_AVG_a)*AVG_0_D01 +
            2*AVG_0_D00*AVG_0_u2*inv_AVG_rho + (AVG_0_u0*AVG_0_u0)*(inv_AVG_a*inv_AVG_a)*gama*AVG_0_D01 +
            (AVG_0_u1*AVG_0_u1)*(inv_AVG_a*inv_AVG_a)*gama*AVG_0_D01 +
            (AVG_0_u2*AVG_0_u2)*(inv_AVG_a*inv_AVG_a)*gama*AVG_0_D01)*inv_AVG_met_fact;

      AVG_0_0_LEV_11 = (inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_0_D01*AVG_0_u0*inv_AVG_met_fact;

      AVG_0_0_LEV_12 = (inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_0_D01*AVG_0_u1*inv_AVG_met_fact;

       AVG_0_0_LEV_13 = (AVG_0_D00*inv_AVG_rho - (inv_AVG_a*inv_AVG_a)*AVG_0_D01*AVG_0_u2 +
            (inv_AVG_a*inv_AVG_a)*gama*AVG_0_D01*AVG_0_u2)*inv_AVG_met_fact;

      AVG_0_0_LEV_14 = -(inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_0_D01*inv_AVG_met_fact;

      AVG_0_0_LEV_20 = (AVG_0_D00*AVG_0_u1 - AVG_0_D01*AVG_0_u0)*inv_AVG_met_fact*inv_AVG_rho;

      AVG_0_0_LEV_21 = AVG_0_D01*inv_AVG_met_fact*inv_AVG_rho;

      AVG_0_0_LEV_22 = -AVG_0_D00*inv_AVG_met_fact*inv_AVG_rho;

       AVG_0_0_LEV_30 = -0.353553390593274*((AVG_0_u0*AVG_0_u0) + (AVG_0_u1*AVG_0_u1) + (AVG_0_u2*AVG_0_u2) -
            (AVG_0_u0*AVG_0_u0)*gama - (AVG_0_u1*AVG_0_u1)*gama - (AVG_0_u2*AVG_0_u2)*gama +
            2*AVG_0_D00*AVG_0_a*AVG_0_u0*inv_AVG_met_fact +
            2*AVG_0_D01*AVG_0_a*AVG_0_u1*inv_AVG_met_fact)*inv_AVG_a*inv_AVG_rho;

       AVG_0_0_LEV_31 = 0.707106781186547*(-gama*AVG_0_u0 + AVG_0_D00*AVG_0_a*inv_AVG_met_fact +
            AVG_0_u0)*inv_AVG_a*inv_AVG_rho;

       AVG_0_0_LEV_32 = 0.707106781186547*(-gama*AVG_0_u1 + AVG_0_D01*AVG_0_a*inv_AVG_met_fact +
            AVG_0_u1)*inv_AVG_a*inv_AVG_rho;

      AVG_0_0_LEV_33 = -0.707106781186547*gamma_m1*AVG_0_u2*inv_AVG_a*inv_AVG_rho;

      AVG_0_0_LEV_34 = 0.707106781186547*gamma_m1*inv_AVG_a*inv_AVG_rho;

       AVG_0_0_LEV_40 = 0.353553390593274*(-(AVG_0_u0*AVG_0_u0) - (AVG_0_u1*AVG_0_u1) - (AVG_0_u2*AVG_0_u2) +
            (AVG_0_u0*AVG_0_u0)*gama + (AVG_0_u1*AVG_0_u1)*gama + (AVG_0_u2*AVG_0_u2)*gama +
            2*AVG_0_D00*AVG_0_a*AVG_0_u0*inv_AVG_met_fact +
            2*AVG_0_D01*AVG_0_a*AVG_0_u1*inv_AVG_met_fact)*inv_AVG_a*inv_AVG_rho;

       AVG_0_0_LEV_41 = -0.707106781186547*(-AVG_0_u0 + gama*AVG_0_u0 +
            AVG_0_D00*AVG_0_a*inv_AVG_met_fact)*inv_AVG_a*inv_AVG_rho;

       AVG_0_0_LEV_42 = -0.707106781186547*(-AVG_0_u1 + gama*AVG_0_u1 +
            AVG_0_D01*AVG_0_a*inv_AVG_met_fact)*inv_AVG_a*inv_AVG_rho;

      AVG_0_0_LEV_43 = -0.707106781186547*gamma_m1*AVG_0_u2*inv_AVG_a*inv_AVG_rho;

      AVG_0_0_LEV_44 = 0.707106781186547*gamma_m1*inv_AVG_a*inv_AVG_rho;

       CF_00 = p_B0(-2,0,0)*AVG_0_0_LEV_01 + rhou0_B0(-2,0,0)*AVG_0_0_LEV_00 + p_B0(-2,0,0)*u0_B0(-2,0,0)*AVG_0_0_LEV_04
            + u0_B0(-2,0,0)*rhoE_B0(-2,0,0)*AVG_0_0_LEV_04 + u0_B0(-2,0,0)*rhou0_B0(-2,0,0)*AVG_0_0_LEV_01 +
            u0_B0(-2,0,0)*rhou1_B0(-2,0,0)*AVG_0_0_LEV_02 + u0_B0(-2,0,0)*rhou2_B0(-2,0,0)*AVG_0_0_LEV_03;

       CF_10 = p_B0(-2,0,0)*AVG_0_0_LEV_11 + rhou0_B0(-2,0,0)*AVG_0_0_LEV_10 + p_B0(-2,0,0)*u0_B0(-2,0,0)*AVG_0_0_LEV_14
            + u0_B0(-2,0,0)*rhoE_B0(-2,0,0)*AVG_0_0_LEV_14 + u0_B0(-2,0,0)*rhou0_B0(-2,0,0)*AVG_0_0_LEV_11 +
            u0_B0(-2,0,0)*rhou1_B0(-2,0,0)*AVG_0_0_LEV_12 + u0_B0(-2,0,0)*rhou2_B0(-2,0,0)*AVG_0_0_LEV_13;

       CF_20 = p_B0(-2,0,0)*AVG_0_0_LEV_21 + rhou0_B0(-2,0,0)*AVG_0_0_LEV_20 +
            u0_B0(-2,0,0)*rhou0_B0(-2,0,0)*AVG_0_0_LEV_21 + u0_B0(-2,0,0)*rhou1_B0(-2,0,0)*AVG_0_0_LEV_22;

       CF_30 = p_B0(-2,0,0)*AVG_0_0_LEV_31 + rhou0_B0(-2,0,0)*AVG_0_0_LEV_30 + p_B0(-2,0,0)*u0_B0(-2,0,0)*AVG_0_0_LEV_34
            + u0_B0(-2,0,0)*rhoE_B0(-2,0,0)*AVG_0_0_LEV_34 + u0_B0(-2,0,0)*rhou0_B0(-2,0,0)*AVG_0_0_LEV_31 +
            u0_B0(-2,0,0)*rhou1_B0(-2,0,0)*AVG_0_0_LEV_32 + u0_B0(-2,0,0)*rhou2_B0(-2,0,0)*AVG_0_0_LEV_33;

       CF_40 = p_B0(-2,0,0)*AVG_0_0_LEV_41 + rhou0_B0(-2,0,0)*AVG_0_0_LEV_40 + p_B0(-2,0,0)*u0_B0(-2,0,0)*AVG_0_0_LEV_44
            + u0_B0(-2,0,0)*rhoE_B0(-2,0,0)*AVG_0_0_LEV_44 + u0_B0(-2,0,0)*rhou0_B0(-2,0,0)*AVG_0_0_LEV_41 +
            u0_B0(-2,0,0)*rhou1_B0(-2,0,0)*AVG_0_0_LEV_42 + u0_B0(-2,0,0)*rhou2_B0(-2,0,0)*AVG_0_0_LEV_43;

       CS_00 = rho_B0(-2,0,0)*AVG_0_0_LEV_00 + rhoE_B0(-2,0,0)*AVG_0_0_LEV_04 + rhou0_B0(-2,0,0)*AVG_0_0_LEV_01 +
            rhou1_B0(-2,0,0)*AVG_0_0_LEV_02 + rhou2_B0(-2,0,0)*AVG_0_0_LEV_03;

       CS_10 = rho_B0(-2,0,0)*AVG_0_0_LEV_10 + rhoE_B0(-2,0,0)*AVG_0_0_LEV_14 + rhou0_B0(-2,0,0)*AVG_0_0_LEV_11 +
            rhou1_B0(-2,0,0)*AVG_0_0_LEV_12 + rhou2_B0(-2,0,0)*AVG_0_0_LEV_13;

      CS_20 = rho_B0(-2,0,0)*AVG_0_0_LEV_20 + rhou0_B0(-2,0,0)*AVG_0_0_LEV_21 + rhou1_B0(-2,0,0)*AVG_0_0_LEV_22;

       CS_30 = rho_B0(-2,0,0)*AVG_0_0_LEV_30 + rhoE_B0(-2,0,0)*AVG_0_0_LEV_34 + rhou0_B0(-2,0,0)*AVG_0_0_LEV_31 +
            rhou1_B0(-2,0,0)*AVG_0_0_LEV_32 + rhou2_B0(-2,0,0)*AVG_0_0_LEV_33;

       CS_40 = rho_B0(-2,0,0)*AVG_0_0_LEV_40 + rhoE_B0(-2,0,0)*AVG_0_0_LEV_44 + rhou0_B0(-2,0,0)*AVG_0_0_LEV_41 +
            rhou1_B0(-2,0,0)*AVG_0_0_LEV_42 + rhou2_B0(-2,0,0)*AVG_0_0_LEV_43;

       CF_01 = p_B0(-1,0,0)*AVG_0_0_LEV_01 + rhou0_B0(-1,0,0)*AVG_0_0_LEV_00 + p_B0(-1,0,0)*u0_B0(-1,0,0)*AVG_0_0_LEV_04
            + u0_B0(-1,0,0)*rhoE_B0(-1,0,0)*AVG_0_0_LEV_04 + u0_B0(-1,0,0)*rhou0_B0(-1,0,0)*AVG_0_0_LEV_01 +
            u0_B0(-1,0,0)*rhou1_B0(-1,0,0)*AVG_0_0_LEV_02 + u0_B0(-1,0,0)*rhou2_B0(-1,0,0)*AVG_0_0_LEV_03;

       CF_11 = p_B0(-1,0,0)*AVG_0_0_LEV_11 + rhou0_B0(-1,0,0)*AVG_0_0_LEV_10 + p_B0(-1,0,0)*u0_B0(-1,0,0)*AVG_0_0_LEV_14
            + u0_B0(-1,0,0)*rhoE_B0(-1,0,0)*AVG_0_0_LEV_14 + u0_B0(-1,0,0)*rhou0_B0(-1,0,0)*AVG_0_0_LEV_11 +
            u0_B0(-1,0,0)*rhou1_B0(-1,0,0)*AVG_0_0_LEV_12 + u0_B0(-1,0,0)*rhou2_B0(-1,0,0)*AVG_0_0_LEV_13;

       CF_21 = p_B0(-1,0,0)*AVG_0_0_LEV_21 + rhou0_B0(-1,0,0)*AVG_0_0_LEV_20 +
            u0_B0(-1,0,0)*rhou0_B0(-1,0,0)*AVG_0_0_LEV_21 + u0_B0(-1,0,0)*rhou1_B0(-1,0,0)*AVG_0_0_LEV_22;

       CF_31 = p_B0(-1,0,0)*AVG_0_0_LEV_31 + rhou0_B0(-1,0,0)*AVG_0_0_LEV_30 + p_B0(-1,0,0)*u0_B0(-1,0,0)*AVG_0_0_LEV_34
            + u0_B0(-1,0,0)*rhoE_B0(-1,0,0)*AVG_0_0_LEV_34 + u0_B0(-1,0,0)*rhou0_B0(-1,0,0)*AVG_0_0_LEV_31 +
            u0_B0(-1,0,0)*rhou1_B0(-1,0,0)*AVG_0_0_LEV_32 + u0_B0(-1,0,0)*rhou2_B0(-1,0,0)*AVG_0_0_LEV_33;

       CF_41 = p_B0(-1,0,0)*AVG_0_0_LEV_41 + rhou0_B0(-1,0,0)*AVG_0_0_LEV_40 + p_B0(-1,0,0)*u0_B0(-1,0,0)*AVG_0_0_LEV_44
            + u0_B0(-1,0,0)*rhoE_B0(-1,0,0)*AVG_0_0_LEV_44 + u0_B0(-1,0,0)*rhou0_B0(-1,0,0)*AVG_0_0_LEV_41 +
            u0_B0(-1,0,0)*rhou1_B0(-1,0,0)*AVG_0_0_LEV_42 + u0_B0(-1,0,0)*rhou2_B0(-1,0,0)*AVG_0_0_LEV_43;

       CS_01 = rho_B0(-1,0,0)*AVG_0_0_LEV_00 + rhoE_B0(-1,0,0)*AVG_0_0_LEV_04 + rhou0_B0(-1,0,0)*AVG_0_0_LEV_01 +
            rhou1_B0(-1,0,0)*AVG_0_0_LEV_02 + rhou2_B0(-1,0,0)*AVG_0_0_LEV_03;

       CS_11 = rho_B0(-1,0,0)*AVG_0_0_LEV_10 + rhoE_B0(-1,0,0)*AVG_0_0_LEV_14 + rhou0_B0(-1,0,0)*AVG_0_0_LEV_11 +
            rhou1_B0(-1,0,0)*AVG_0_0_LEV_12 + rhou2_B0(-1,0,0)*AVG_0_0_LEV_13;

      CS_21 = rho_B0(-1,0,0)*AVG_0_0_LEV_20 + rhou0_B0(-1,0,0)*AVG_0_0_LEV_21 + rhou1_B0(-1,0,0)*AVG_0_0_LEV_22;

       CS_31 = rho_B0(-1,0,0)*AVG_0_0_LEV_30 + rhoE_B0(-1,0,0)*AVG_0_0_LEV_34 + rhou0_B0(-1,0,0)*AVG_0_0_LEV_31 +
            rhou1_B0(-1,0,0)*AVG_0_0_LEV_32 + rhou2_B0(-1,0,0)*AVG_0_0_LEV_33;

       CS_41 = rho_B0(-1,0,0)*AVG_0_0_LEV_40 + rhoE_B0(-1,0,0)*AVG_0_0_LEV_44 + rhou0_B0(-1,0,0)*AVG_0_0_LEV_41 +
            rhou1_B0(-1,0,0)*AVG_0_0_LEV_42 + rhou2_B0(-1,0,0)*AVG_0_0_LEV_43;

       CF_02 = p_B0(0,0,0)*AVG_0_0_LEV_01 + rhou0_B0(0,0,0)*AVG_0_0_LEV_00 + p_B0(0,0,0)*u0_B0(0,0,0)*AVG_0_0_LEV_04 +
            u0_B0(0,0,0)*rhoE_B0(0,0,0)*AVG_0_0_LEV_04 + u0_B0(0,0,0)*rhou0_B0(0,0,0)*AVG_0_0_LEV_01 +
            u0_B0(0,0,0)*rhou1_B0(0,0,0)*AVG_0_0_LEV_02 + u0_B0(0,0,0)*rhou2_B0(0,0,0)*AVG_0_0_LEV_03;

       CF_12 = p_B0(0,0,0)*AVG_0_0_LEV_11 + rhou0_B0(0,0,0)*AVG_0_0_LEV_10 + p_B0(0,0,0)*u0_B0(0,0,0)*AVG_0_0_LEV_14 +
            u0_B0(0,0,0)*rhoE_B0(0,0,0)*AVG_0_0_LEV_14 + u0_B0(0,0,0)*rhou0_B0(0,0,0)*AVG_0_0_LEV_11 +
            u0_B0(0,0,0)*rhou1_B0(0,0,0)*AVG_0_0_LEV_12 + u0_B0(0,0,0)*rhou2_B0(0,0,0)*AVG_0_0_LEV_13;

       CF_22 = p_B0(0,0,0)*AVG_0_0_LEV_21 + rhou0_B0(0,0,0)*AVG_0_0_LEV_20 + u0_B0(0,0,0)*rhou0_B0(0,0,0)*AVG_0_0_LEV_21
            + u0_B0(0,0,0)*rhou1_B0(0,0,0)*AVG_0_0_LEV_22;

       CF_32 = p_B0(0,0,0)*AVG_0_0_LEV_31 + rhou0_B0(0,0,0)*AVG_0_0_LEV_30 + p_B0(0,0,0)*u0_B0(0,0,0)*AVG_0_0_LEV_34 +
            u0_B0(0,0,0)*rhoE_B0(0,0,0)*AVG_0_0_LEV_34 + u0_B0(0,0,0)*rhou0_B0(0,0,0)*AVG_0_0_LEV_31 +
            u0_B0(0,0,0)*rhou1_B0(0,0,0)*AVG_0_0_LEV_32 + u0_B0(0,0,0)*rhou2_B0(0,0,0)*AVG_0_0_LEV_33;

       CF_42 = p_B0(0,0,0)*AVG_0_0_LEV_41 + rhou0_B0(0,0,0)*AVG_0_0_LEV_40 + p_B0(0,0,0)*u0_B0(0,0,0)*AVG_0_0_LEV_44 +
            u0_B0(0,0,0)*rhoE_B0(0,0,0)*AVG_0_0_LEV_44 + u0_B0(0,0,0)*rhou0_B0(0,0,0)*AVG_0_0_LEV_41 +
            u0_B0(0,0,0)*rhou1_B0(0,0,0)*AVG_0_0_LEV_42 + u0_B0(0,0,0)*rhou2_B0(0,0,0)*AVG_0_0_LEV_43;

       CS_02 = rho_B0(0,0,0)*AVG_0_0_LEV_00 + rhoE_B0(0,0,0)*AVG_0_0_LEV_04 + rhou0_B0(0,0,0)*AVG_0_0_LEV_01 +
            rhou1_B0(0,0,0)*AVG_0_0_LEV_02 + rhou2_B0(0,0,0)*AVG_0_0_LEV_03;

       CS_12 = rho_B0(0,0,0)*AVG_0_0_LEV_10 + rhoE_B0(0,0,0)*AVG_0_0_LEV_14 + rhou0_B0(0,0,0)*AVG_0_0_LEV_11 +
            rhou1_B0(0,0,0)*AVG_0_0_LEV_12 + rhou2_B0(0,0,0)*AVG_0_0_LEV_13;

      CS_22 = rho_B0(0,0,0)*AVG_0_0_LEV_20 + rhou0_B0(0,0,0)*AVG_0_0_LEV_21 + rhou1_B0(0,0,0)*AVG_0_0_LEV_22;

       CS_32 = rho_B0(0,0,0)*AVG_0_0_LEV_30 + rhoE_B0(0,0,0)*AVG_0_0_LEV_34 + rhou0_B0(0,0,0)*AVG_0_0_LEV_31 +
            rhou1_B0(0,0,0)*AVG_0_0_LEV_32 + rhou2_B0(0,0,0)*AVG_0_0_LEV_33;

       CS_42 = rho_B0(0,0,0)*AVG_0_0_LEV_40 + rhoE_B0(0,0,0)*AVG_0_0_LEV_44 + rhou0_B0(0,0,0)*AVG_0_0_LEV_41 +
            rhou1_B0(0,0,0)*AVG_0_0_LEV_42 + rhou2_B0(0,0,0)*AVG_0_0_LEV_43;

       CF_03 = p_B0(1,0,0)*AVG_0_0_LEV_01 + rhou0_B0(1,0,0)*AVG_0_0_LEV_00 + p_B0(1,0,0)*u0_B0(1,0,0)*AVG_0_0_LEV_04 +
            u0_B0(1,0,0)*rhoE_B0(1,0,0)*AVG_0_0_LEV_04 + u0_B0(1,0,0)*rhou0_B0(1,0,0)*AVG_0_0_LEV_01 +
            u0_B0(1,0,0)*rhou1_B0(1,0,0)*AVG_0_0_LEV_02 + u0_B0(1,0,0)*rhou2_B0(1,0,0)*AVG_0_0_LEV_03;

       CF_13 = p_B0(1,0,0)*AVG_0_0_LEV_11 + rhou0_B0(1,0,0)*AVG_0_0_LEV_10 + p_B0(1,0,0)*u0_B0(1,0,0)*AVG_0_0_LEV_14 +
            u0_B0(1,0,0)*rhoE_B0(1,0,0)*AVG_0_0_LEV_14 + u0_B0(1,0,0)*rhou0_B0(1,0,0)*AVG_0_0_LEV_11 +
            u0_B0(1,0,0)*rhou1_B0(1,0,0)*AVG_0_0_LEV_12 + u0_B0(1,0,0)*rhou2_B0(1,0,0)*AVG_0_0_LEV_13;

       CF_23 = p_B0(1,0,0)*AVG_0_0_LEV_21 + rhou0_B0(1,0,0)*AVG_0_0_LEV_20 + u0_B0(1,0,0)*rhou0_B0(1,0,0)*AVG_0_0_LEV_21
            + u0_B0(1,0,0)*rhou1_B0(1,0,0)*AVG_0_0_LEV_22;

       CF_33 = p_B0(1,0,0)*AVG_0_0_LEV_31 + rhou0_B0(1,0,0)*AVG_0_0_LEV_30 + p_B0(1,0,0)*u0_B0(1,0,0)*AVG_0_0_LEV_34 +
            u0_B0(1,0,0)*rhoE_B0(1,0,0)*AVG_0_0_LEV_34 + u0_B0(1,0,0)*rhou0_B0(1,0,0)*AVG_0_0_LEV_31 +
            u0_B0(1,0,0)*rhou1_B0(1,0,0)*AVG_0_0_LEV_32 + u0_B0(1,0,0)*rhou2_B0(1,0,0)*AVG_0_0_LEV_33;

       CF_43 = p_B0(1,0,0)*AVG_0_0_LEV_41 + rhou0_B0(1,0,0)*AVG_0_0_LEV_40 + p_B0(1,0,0)*u0_B0(1,0,0)*AVG_0_0_LEV_44 +
            u0_B0(1,0,0)*rhoE_B0(1,0,0)*AVG_0_0_LEV_44 + u0_B0(1,0,0)*rhou0_B0(1,0,0)*AVG_0_0_LEV_41 +
            u0_B0(1,0,0)*rhou1_B0(1,0,0)*AVG_0_0_LEV_42 + u0_B0(1,0,0)*rhou2_B0(1,0,0)*AVG_0_0_LEV_43;

       CS_03 = rho_B0(1,0,0)*AVG_0_0_LEV_00 + rhoE_B0(1,0,0)*AVG_0_0_LEV_04 + rhou0_B0(1,0,0)*AVG_0_0_LEV_01 +
            rhou1_B0(1,0,0)*AVG_0_0_LEV_02 + rhou2_B0(1,0,0)*AVG_0_0_LEV_03;

       CS_13 = rho_B0(1,0,0)*AVG_0_0_LEV_10 + rhoE_B0(1,0,0)*AVG_0_0_LEV_14 + rhou0_B0(1,0,0)*AVG_0_0_LEV_11 +
            rhou1_B0(1,0,0)*AVG_0_0_LEV_12 + rhou2_B0(1,0,0)*AVG_0_0_LEV_13;

      CS_23 = rho_B0(1,0,0)*AVG_0_0_LEV_20 + rhou0_B0(1,0,0)*AVG_0_0_LEV_21 + rhou1_B0(1,0,0)*AVG_0_0_LEV_22;

       CS_33 = rho_B0(1,0,0)*AVG_0_0_LEV_30 + rhoE_B0(1,0,0)*AVG_0_0_LEV_34 + rhou0_B0(1,0,0)*AVG_0_0_LEV_31 +
            rhou1_B0(1,0,0)*AVG_0_0_LEV_32 + rhou2_B0(1,0,0)*AVG_0_0_LEV_33;

       CS_43 = rho_B0(1,0,0)*AVG_0_0_LEV_40 + rhoE_B0(1,0,0)*AVG_0_0_LEV_44 + rhou0_B0(1,0,0)*AVG_0_0_LEV_41 +
            rhou1_B0(1,0,0)*AVG_0_0_LEV_42 + rhou2_B0(1,0,0)*AVG_0_0_LEV_43;

       CF_04 = p_B0(2,0,0)*AVG_0_0_LEV_01 + rhou0_B0(2,0,0)*AVG_0_0_LEV_00 + p_B0(2,0,0)*u0_B0(2,0,0)*AVG_0_0_LEV_04 +
            u0_B0(2,0,0)*rhoE_B0(2,0,0)*AVG_0_0_LEV_04 + u0_B0(2,0,0)*rhou0_B0(2,0,0)*AVG_0_0_LEV_01 +
            u0_B0(2,0,0)*rhou1_B0(2,0,0)*AVG_0_0_LEV_02 + u0_B0(2,0,0)*rhou2_B0(2,0,0)*AVG_0_0_LEV_03;

       CF_14 = p_B0(2,0,0)*AVG_0_0_LEV_11 + rhou0_B0(2,0,0)*AVG_0_0_LEV_10 + p_B0(2,0,0)*u0_B0(2,0,0)*AVG_0_0_LEV_14 +
            u0_B0(2,0,0)*rhoE_B0(2,0,0)*AVG_0_0_LEV_14 + u0_B0(2,0,0)*rhou0_B0(2,0,0)*AVG_0_0_LEV_11 +
            u0_B0(2,0,0)*rhou1_B0(2,0,0)*AVG_0_0_LEV_12 + u0_B0(2,0,0)*rhou2_B0(2,0,0)*AVG_0_0_LEV_13;

       CF_24 = p_B0(2,0,0)*AVG_0_0_LEV_21 + rhou0_B0(2,0,0)*AVG_0_0_LEV_20 + u0_B0(2,0,0)*rhou0_B0(2,0,0)*AVG_0_0_LEV_21
            + u0_B0(2,0,0)*rhou1_B0(2,0,0)*AVG_0_0_LEV_22;

       CF_34 = p_B0(2,0,0)*AVG_0_0_LEV_31 + rhou0_B0(2,0,0)*AVG_0_0_LEV_30 + p_B0(2,0,0)*u0_B0(2,0,0)*AVG_0_0_LEV_34 +
            u0_B0(2,0,0)*rhoE_B0(2,0,0)*AVG_0_0_LEV_34 + u0_B0(2,0,0)*rhou0_B0(2,0,0)*AVG_0_0_LEV_31 +
            u0_B0(2,0,0)*rhou1_B0(2,0,0)*AVG_0_0_LEV_32 + u0_B0(2,0,0)*rhou2_B0(2,0,0)*AVG_0_0_LEV_33;

       CF_44 = p_B0(2,0,0)*AVG_0_0_LEV_41 + rhou0_B0(2,0,0)*AVG_0_0_LEV_40 + p_B0(2,0,0)*u0_B0(2,0,0)*AVG_0_0_LEV_44 +
            u0_B0(2,0,0)*rhoE_B0(2,0,0)*AVG_0_0_LEV_44 + u0_B0(2,0,0)*rhou0_B0(2,0,0)*AVG_0_0_LEV_41 +
            u0_B0(2,0,0)*rhou1_B0(2,0,0)*AVG_0_0_LEV_42 + u0_B0(2,0,0)*rhou2_B0(2,0,0)*AVG_0_0_LEV_43;

       CS_04 = rho_B0(2,0,0)*AVG_0_0_LEV_00 + rhoE_B0(2,0,0)*AVG_0_0_LEV_04 + rhou0_B0(2,0,0)*AVG_0_0_LEV_01 +
            rhou1_B0(2,0,0)*AVG_0_0_LEV_02 + rhou2_B0(2,0,0)*AVG_0_0_LEV_03;

       CS_14 = rho_B0(2,0,0)*AVG_0_0_LEV_10 + rhoE_B0(2,0,0)*AVG_0_0_LEV_14 + rhou0_B0(2,0,0)*AVG_0_0_LEV_11 +
            rhou1_B0(2,0,0)*AVG_0_0_LEV_12 + rhou2_B0(2,0,0)*AVG_0_0_LEV_13;

      CS_24 = rho_B0(2,0,0)*AVG_0_0_LEV_20 + rhou0_B0(2,0,0)*AVG_0_0_LEV_21 + rhou1_B0(2,0,0)*AVG_0_0_LEV_22;

       CS_34 = rho_B0(2,0,0)*AVG_0_0_LEV_30 + rhoE_B0(2,0,0)*AVG_0_0_LEV_34 + rhou0_B0(2,0,0)*AVG_0_0_LEV_31 +
            rhou1_B0(2,0,0)*AVG_0_0_LEV_32 + rhou2_B0(2,0,0)*AVG_0_0_LEV_33;

       CS_44 = rho_B0(2,0,0)*AVG_0_0_LEV_40 + rhoE_B0(2,0,0)*AVG_0_0_LEV_44 + rhou0_B0(2,0,0)*AVG_0_0_LEV_41 +
            rhou1_B0(2,0,0)*AVG_0_0_LEV_42 + rhou2_B0(2,0,0)*AVG_0_0_LEV_43;

       CF_05 = p_B0(3,0,0)*AVG_0_0_LEV_01 + rhou0_B0(3,0,0)*AVG_0_0_LEV_00 + p_B0(3,0,0)*u0_B0(3,0,0)*AVG_0_0_LEV_04 +
            u0_B0(3,0,0)*rhoE_B0(3,0,0)*AVG_0_0_LEV_04 + u0_B0(3,0,0)*rhou0_B0(3,0,0)*AVG_0_0_LEV_01 +
            u0_B0(3,0,0)*rhou1_B0(3,0,0)*AVG_0_0_LEV_02 + u0_B0(3,0,0)*rhou2_B0(3,0,0)*AVG_0_0_LEV_03;

       CF_15 = p_B0(3,0,0)*AVG_0_0_LEV_11 + rhou0_B0(3,0,0)*AVG_0_0_LEV_10 + p_B0(3,0,0)*u0_B0(3,0,0)*AVG_0_0_LEV_14 +
            u0_B0(3,0,0)*rhoE_B0(3,0,0)*AVG_0_0_LEV_14 + u0_B0(3,0,0)*rhou0_B0(3,0,0)*AVG_0_0_LEV_11 +
            u0_B0(3,0,0)*rhou1_B0(3,0,0)*AVG_0_0_LEV_12 + u0_B0(3,0,0)*rhou2_B0(3,0,0)*AVG_0_0_LEV_13;

       CF_25 = p_B0(3,0,0)*AVG_0_0_LEV_21 + rhou0_B0(3,0,0)*AVG_0_0_LEV_20 + u0_B0(3,0,0)*rhou0_B0(3,0,0)*AVG_0_0_LEV_21
            + u0_B0(3,0,0)*rhou1_B0(3,0,0)*AVG_0_0_LEV_22;

       CF_35 = p_B0(3,0,0)*AVG_0_0_LEV_31 + rhou0_B0(3,0,0)*AVG_0_0_LEV_30 + p_B0(3,0,0)*u0_B0(3,0,0)*AVG_0_0_LEV_34 +
            u0_B0(3,0,0)*rhoE_B0(3,0,0)*AVG_0_0_LEV_34 + u0_B0(3,0,0)*rhou0_B0(3,0,0)*AVG_0_0_LEV_31 +
            u0_B0(3,0,0)*rhou1_B0(3,0,0)*AVG_0_0_LEV_32 + u0_B0(3,0,0)*rhou2_B0(3,0,0)*AVG_0_0_LEV_33;

       CF_45 = p_B0(3,0,0)*AVG_0_0_LEV_41 + rhou0_B0(3,0,0)*AVG_0_0_LEV_40 + p_B0(3,0,0)*u0_B0(3,0,0)*AVG_0_0_LEV_44 +
            u0_B0(3,0,0)*rhoE_B0(3,0,0)*AVG_0_0_LEV_44 + u0_B0(3,0,0)*rhou0_B0(3,0,0)*AVG_0_0_LEV_41 +
            u0_B0(3,0,0)*rhou1_B0(3,0,0)*AVG_0_0_LEV_42 + u0_B0(3,0,0)*rhou2_B0(3,0,0)*AVG_0_0_LEV_43;

       CS_05 = rho_B0(3,0,0)*AVG_0_0_LEV_00 + rhoE_B0(3,0,0)*AVG_0_0_LEV_04 + rhou0_B0(3,0,0)*AVG_0_0_LEV_01 +
            rhou1_B0(3,0,0)*AVG_0_0_LEV_02 + rhou2_B0(3,0,0)*AVG_0_0_LEV_03;

       CS_15 = rho_B0(3,0,0)*AVG_0_0_LEV_10 + rhoE_B0(3,0,0)*AVG_0_0_LEV_14 + rhou0_B0(3,0,0)*AVG_0_0_LEV_11 +
            rhou1_B0(3,0,0)*AVG_0_0_LEV_12 + rhou2_B0(3,0,0)*AVG_0_0_LEV_13;

      CS_25 = rho_B0(3,0,0)*AVG_0_0_LEV_20 + rhou0_B0(3,0,0)*AVG_0_0_LEV_21 + rhou1_B0(3,0,0)*AVG_0_0_LEV_22;

       CS_35 = rho_B0(3,0,0)*AVG_0_0_LEV_30 + rhoE_B0(3,0,0)*AVG_0_0_LEV_34 + rhou0_B0(3,0,0)*AVG_0_0_LEV_31 +
            rhou1_B0(3,0,0)*AVG_0_0_LEV_32 + rhou2_B0(3,0,0)*AVG_0_0_LEV_33;

       CS_45 = rho_B0(3,0,0)*AVG_0_0_LEV_40 + rhoE_B0(3,0,0)*AVG_0_0_LEV_44 + rhou0_B0(3,0,0)*AVG_0_0_LEV_41 +
            rhou1_B0(3,0,0)*AVG_0_0_LEV_42 + rhou2_B0(3,0,0)*AVG_0_0_LEV_43;

       max_lambda_00 = shock_filter_control*fmax(fabs(u0_B0(0,0,0)*D00_B0(0,0,0)*detJ_B0(0,0,0) +
            u1_B0(0,0,0)*D01_B0(0,0,0)*detJ_B0(0,0,0)), fabs(u0_B0(1,0,0)*D00_B0(1,0,0)*detJ_B0(1,0,0) +
            u1_B0(1,0,0)*D01_B0(1,0,0)*detJ_B0(1,0,0)));

      max_lambda_11 = max_lambda_00;

      max_lambda_22 = max_lambda_00;

       max_lambda_33 = shock_filter_control*fmax(fabs(sqrt((D00_B0(1,0,0)*D00_B0(1,0,0))*(detJ_B0(1,0,0)*detJ_B0(1,0,0))
            + (D01_B0(1,0,0)*D01_B0(1,0,0))*(detJ_B0(1,0,0)*detJ_B0(1,0,0)))*a_B0(1,0,0) +
            u0_B0(1,0,0)*D00_B0(1,0,0)*detJ_B0(1,0,0) + u1_B0(1,0,0)*D01_B0(1,0,0)*detJ_B0(1,0,0)),
            fabs(sqrt((D00_B0(0,0,0)*D00_B0(0,0,0))*(detJ_B0(0,0,0)*detJ_B0(0,0,0)) +
            (D01_B0(0,0,0)*D01_B0(0,0,0))*(detJ_B0(0,0,0)*detJ_B0(0,0,0)))*a_B0(0,0,0) +
            u0_B0(0,0,0)*D00_B0(0,0,0)*detJ_B0(0,0,0) + u1_B0(0,0,0)*D01_B0(0,0,0)*detJ_B0(0,0,0)));

       max_lambda_44 =
            shock_filter_control*fmax(fabs(-sqrt((D00_B0(0,0,0)*D00_B0(0,0,0))*(detJ_B0(0,0,0)*detJ_B0(0,0,0)) +
            (D01_B0(0,0,0)*D01_B0(0,0,0))*(detJ_B0(0,0,0)*detJ_B0(0,0,0)))*a_B0(0,0,0) +
            u0_B0(0,0,0)*D00_B0(0,0,0)*detJ_B0(0,0,0) + u1_B0(0,0,0)*D01_B0(0,0,0)*detJ_B0(0,0,0)),
            fabs(-sqrt((D00_B0(1,0,0)*D00_B0(1,0,0))*(detJ_B0(1,0,0)*detJ_B0(1,0,0)) +
            (D01_B0(1,0,0)*D01_B0(1,0,0))*(detJ_B0(1,0,0)*detJ_B0(1,0,0)))*a_B0(1,0,0) +
            u0_B0(1,0,0)*D00_B0(1,0,0)*detJ_B0(1,0,0) + u1_B0(1,0,0)*D01_B0(1,0,0)*detJ_B0(1,0,0)));

       beta_0 = ((1.0/3.0))*((CS_04*max_lambda_00 + CF_04)*(CS_04*max_lambda_00 + CF_04)) +
            ((1.0/2.0))*(-(19.0/6.0)*(CS_04*max_lambda_00 + CF_04) + ((25.0/6.0))*(CS_03*max_lambda_00 +
            CF_03))*(CS_03*max_lambda_00 + CF_03) + ((1.0/2.0))*(CS_02*max_lambda_00 +
            CF_02)*(-(31.0/6.0)*(CS_03*max_lambda_00 + CF_03) + ((5.0/3.0))*(CS_02*max_lambda_00 + CF_02) +
            ((11.0/6.0))*(CS_04*max_lambda_00 + CF_04));

       beta_1 = ((1.0/3.0))*((CS_03*max_lambda_00 + CF_03)*(CS_03*max_lambda_00 + CF_03)) +
            ((1.0/2.0))*(-(13.0/6.0)*(CS_03*max_lambda_00 + CF_03) + ((13.0/6.0))*(CS_02*max_lambda_00 +
            CF_02))*(CS_02*max_lambda_00 + CF_02) + ((1.0/2.0))*(CS_01*max_lambda_00 +
            CF_01)*(-(13.0/6.0)*(CS_02*max_lambda_00 + CF_02) + ((2.0/3.0))*(CS_01*max_lambda_00 + CF_01) +
            ((5.0/6.0))*(CS_03*max_lambda_00 + CF_03));

       beta_2 = ((5.0/6.0))*((CS_02*max_lambda_00 + CF_02)*(CS_02*max_lambda_00 + CF_02)) +
            ((1.0/2.0))*(((2.0/3.0))*(CS_00*max_lambda_00 + CF_00) + ((11.0/6.0))*(CS_02*max_lambda_00 +
            CF_02))*(CS_00*max_lambda_00 + CF_00) + ((1.0/2.0))*(CS_01*max_lambda_00 +
            CF_01)*(-(31.0/6.0)*(CS_02*max_lambda_00 + CF_02) - (19.0/6.0)*(CS_00*max_lambda_00 + CF_00) +
            ((25.0/6.0))*(CS_01*max_lambda_00 + CF_01));

       alpha_0 = 0.3 + ((3.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_0)*(1.0e-40 +
            beta_0));

       alpha_1 = 0.6 + ((3.0/5.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_1)*(1.0e-40 +
            beta_1));

       alpha_2 = 0.1 + ((1.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_2)*(1.0e-40 +
            beta_2));

      inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2));

      omega_0 = alpha_0*inv_alpha_sum;

      omega_1 = alpha_1*inv_alpha_sum;

      omega_2 = alpha_2*inv_alpha_sum;

       rj0 = (pow(fabs(-1.0 + 10*omega_2), sensor_theta) + pow(fabs(-1.0 + ((5.0/3.0))*omega_1), sensor_theta) +
            pow(fabs(-1.0 + ((10.0/3.0))*omega_0), sensor_theta))/(2 + pow(9.0, sensor_theta));

       Recon_0 = (-(7.0/12.0)*(CS_01*max_lambda_00 + CF_01) + ((1.0/6.0))*(CS_00*max_lambda_00 + CF_00) +
            ((11.0/12.0))*(CS_02*max_lambda_00 + CF_02))*omega_2 + (-(1.0/12.0)*(CS_01*max_lambda_00 + CF_01) +
            ((1.0/6.0))*(CS_03*max_lambda_00 + CF_03) + ((5.0/12.0))*(CS_02*max_lambda_00 + CF_02))*omega_1 +
            (-(1.0/12.0)*(CS_04*max_lambda_00 + CF_04) + ((1.0/6.0))*(CS_02*max_lambda_00 + CF_02) +
            ((5.0/12.0))*(CS_03*max_lambda_00 + CF_03))*omega_0 + Recon_0;

       beta_0 = ((1.0/3.0))*((-CS_05*max_lambda_00 + CF_05)*(-CS_05*max_lambda_00 + CF_05)) +
            ((1.0/2.0))*(-(19.0/6.0)*(-CS_05*max_lambda_00 + CF_05) + ((25.0/6.0))*(-CS_04*max_lambda_00 +
            CF_04))*(-CS_04*max_lambda_00 + CF_04) + ((1.0/2.0))*(-CS_03*max_lambda_00 +
            CF_03)*(-(31.0/6.0)*(-CS_04*max_lambda_00 + CF_04) + ((5.0/3.0))*(-CS_03*max_lambda_00 + CF_03) +
            ((11.0/6.0))*(-CS_05*max_lambda_00 + CF_05));

       beta_1 = ((1.0/3.0))*((-CS_04*max_lambda_00 + CF_04)*(-CS_04*max_lambda_00 + CF_04)) +
            ((1.0/2.0))*(-(13.0/6.0)*(-CS_04*max_lambda_00 + CF_04) + ((13.0/6.0))*(-CS_03*max_lambda_00 +
            CF_03))*(-CS_03*max_lambda_00 + CF_03) + ((1.0/2.0))*(-CS_02*max_lambda_00 +
            CF_02)*(-(13.0/6.0)*(-CS_03*max_lambda_00 + CF_03) + ((2.0/3.0))*(-CS_02*max_lambda_00 + CF_02) +
            ((5.0/6.0))*(-CS_04*max_lambda_00 + CF_04));

       beta_2 = ((5.0/6.0))*((-CS_03*max_lambda_00 + CF_03)*(-CS_03*max_lambda_00 + CF_03)) +
            ((1.0/2.0))*(-(31.0/6.0)*(-CS_03*max_lambda_00 + CF_03) + ((25.0/6.0))*(-CS_02*max_lambda_00 +
            CF_02))*(-CS_02*max_lambda_00 + CF_02) + ((1.0/2.0))*(-CS_01*max_lambda_00 +
            CF_01)*(-(19.0/6.0)*(-CS_02*max_lambda_00 + CF_02) + ((2.0/3.0))*(-CS_01*max_lambda_00 + CF_01) +
            ((11.0/6.0))*(-CS_03*max_lambda_00 + CF_03));

       alpha_0 = 0.1 + ((1.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_0)*(1.0e-40 +
            beta_0));

       alpha_1 = 0.6 + ((3.0/5.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_1)*(1.0e-40 +
            beta_1));

       alpha_2 = 0.3 + ((3.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_2)*(1.0e-40 +
            beta_2));

      inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2));

      omega_0 = alpha_0*inv_alpha_sum;

      omega_1 = alpha_1*inv_alpha_sum;

      omega_2 = alpha_2*inv_alpha_sum;

       rj0 = fmax(rj0, (pow(fabs(-1.0 + 10*omega_0), sensor_theta) + pow(fabs(-1.0 + ((5.0/3.0))*omega_1), sensor_theta)
            + pow(fabs(-1.0 + ((10.0/3.0))*omega_2), sensor_theta))/(2 + pow(9.0, sensor_theta)));

       Recon_0 = (-(7.0/12.0)*(-CS_04*max_lambda_00 + CF_04) + ((1.0/6.0))*(-CS_05*max_lambda_00 + CF_05) +
            ((11.0/12.0))*(-CS_03*max_lambda_00 + CF_03))*omega_0 + (-(1.0/12.0)*(-CS_01*max_lambda_00 + CF_01) +
            ((1.0/6.0))*(-CS_03*max_lambda_00 + CF_03) + ((5.0/12.0))*(-CS_02*max_lambda_00 + CF_02))*omega_2 +
            (-(1.0/12.0)*(-CS_04*max_lambda_00 + CF_04) + ((1.0/6.0))*(-CS_02*max_lambda_00 + CF_02) +
            ((5.0/12.0))*(-CS_03*max_lambda_00 + CF_03))*omega_1 + Recon_0;

       beta_0 = ((1.0/3.0))*((CS_14*max_lambda_11 + CF_14)*(CS_14*max_lambda_11 + CF_14)) +
            ((1.0/2.0))*(-(19.0/6.0)*(CS_14*max_lambda_11 + CF_14) + ((25.0/6.0))*(CS_13*max_lambda_11 +
            CF_13))*(CS_13*max_lambda_11 + CF_13) + ((1.0/2.0))*(CS_12*max_lambda_11 +
            CF_12)*(-(31.0/6.0)*(CS_13*max_lambda_11 + CF_13) + ((5.0/3.0))*(CS_12*max_lambda_11 + CF_12) +
            ((11.0/6.0))*(CS_14*max_lambda_11 + CF_14));

       beta_1 = ((1.0/3.0))*((CS_13*max_lambda_11 + CF_13)*(CS_13*max_lambda_11 + CF_13)) +
            ((1.0/2.0))*(-(13.0/6.0)*(CS_13*max_lambda_11 + CF_13) + ((13.0/6.0))*(CS_12*max_lambda_11 +
            CF_12))*(CS_12*max_lambda_11 + CF_12) + ((1.0/2.0))*(CS_11*max_lambda_11 +
            CF_11)*(-(13.0/6.0)*(CS_12*max_lambda_11 + CF_12) + ((2.0/3.0))*(CS_11*max_lambda_11 + CF_11) +
            ((5.0/6.0))*(CS_13*max_lambda_11 + CF_13));

       beta_2 = ((5.0/6.0))*((CS_12*max_lambda_11 + CF_12)*(CS_12*max_lambda_11 + CF_12)) +
            ((1.0/2.0))*(((2.0/3.0))*(CS_10*max_lambda_11 + CF_10) + ((11.0/6.0))*(CS_12*max_lambda_11 +
            CF_12))*(CS_10*max_lambda_11 + CF_10) + ((1.0/2.0))*(CS_11*max_lambda_11 +
            CF_11)*(-(31.0/6.0)*(CS_12*max_lambda_11 + CF_12) - (19.0/6.0)*(CS_10*max_lambda_11 + CF_10) +
            ((25.0/6.0))*(CS_11*max_lambda_11 + CF_11));

       alpha_0 = 0.3 + ((3.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_0)*(1.0e-40 +
            beta_0));

       alpha_1 = 0.6 + ((3.0/5.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_1)*(1.0e-40 +
            beta_1));

       alpha_2 = 0.1 + ((1.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_2)*(1.0e-40 +
            beta_2));

      inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2));

      omega_0 = alpha_0*inv_alpha_sum;

      omega_1 = alpha_1*inv_alpha_sum;

      omega_2 = alpha_2*inv_alpha_sum;

       rj1 = (pow(fabs(-1.0 + 10*omega_2), sensor_theta) + pow(fabs(-1.0 + ((5.0/3.0))*omega_1), sensor_theta) +
            pow(fabs(-1.0 + ((10.0/3.0))*omega_0), sensor_theta))/(2 + pow(9.0, sensor_theta));

       Recon_1 = (-(7.0/12.0)*(CS_11*max_lambda_11 + CF_11) + ((1.0/6.0))*(CS_10*max_lambda_11 + CF_10) +
            ((11.0/12.0))*(CS_12*max_lambda_11 + CF_12))*omega_2 + (-(1.0/12.0)*(CS_11*max_lambda_11 + CF_11) +
            ((1.0/6.0))*(CS_13*max_lambda_11 + CF_13) + ((5.0/12.0))*(CS_12*max_lambda_11 + CF_12))*omega_1 +
            (-(1.0/12.0)*(CS_14*max_lambda_11 + CF_14) + ((1.0/6.0))*(CS_12*max_lambda_11 + CF_12) +
            ((5.0/12.0))*(CS_13*max_lambda_11 + CF_13))*omega_0 + Recon_1;

       beta_0 = ((1.0/3.0))*((-CS_15*max_lambda_11 + CF_15)*(-CS_15*max_lambda_11 + CF_15)) +
            ((1.0/2.0))*(-(19.0/6.0)*(-CS_15*max_lambda_11 + CF_15) + ((25.0/6.0))*(-CS_14*max_lambda_11 +
            CF_14))*(-CS_14*max_lambda_11 + CF_14) + ((1.0/2.0))*(-CS_13*max_lambda_11 +
            CF_13)*(-(31.0/6.0)*(-CS_14*max_lambda_11 + CF_14) + ((5.0/3.0))*(-CS_13*max_lambda_11 + CF_13) +
            ((11.0/6.0))*(-CS_15*max_lambda_11 + CF_15));

       beta_1 = ((1.0/3.0))*((-CS_14*max_lambda_11 + CF_14)*(-CS_14*max_lambda_11 + CF_14)) +
            ((1.0/2.0))*(-(13.0/6.0)*(-CS_14*max_lambda_11 + CF_14) + ((13.0/6.0))*(-CS_13*max_lambda_11 +
            CF_13))*(-CS_13*max_lambda_11 + CF_13) + ((1.0/2.0))*(-CS_12*max_lambda_11 +
            CF_12)*(-(13.0/6.0)*(-CS_13*max_lambda_11 + CF_13) + ((2.0/3.0))*(-CS_12*max_lambda_11 + CF_12) +
            ((5.0/6.0))*(-CS_14*max_lambda_11 + CF_14));

       beta_2 = ((5.0/6.0))*((-CS_13*max_lambda_11 + CF_13)*(-CS_13*max_lambda_11 + CF_13)) +
            ((1.0/2.0))*(-(31.0/6.0)*(-CS_13*max_lambda_11 + CF_13) + ((25.0/6.0))*(-CS_12*max_lambda_11 +
            CF_12))*(-CS_12*max_lambda_11 + CF_12) + ((1.0/2.0))*(-CS_11*max_lambda_11 +
            CF_11)*(-(19.0/6.0)*(-CS_12*max_lambda_11 + CF_12) + ((2.0/3.0))*(-CS_11*max_lambda_11 + CF_11) +
            ((11.0/6.0))*(-CS_13*max_lambda_11 + CF_13));

       alpha_0 = 0.1 + ((1.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_0)*(1.0e-40 +
            beta_0));

       alpha_1 = 0.6 + ((3.0/5.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_1)*(1.0e-40 +
            beta_1));

       alpha_2 = 0.3 + ((3.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_2)*(1.0e-40 +
            beta_2));

      inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2));

      omega_0 = alpha_0*inv_alpha_sum;

      omega_1 = alpha_1*inv_alpha_sum;

      omega_2 = alpha_2*inv_alpha_sum;

       rj1 = fmax(rj1, (pow(fabs(-1.0 + 10*omega_0), sensor_theta) + pow(fabs(-1.0 + ((5.0/3.0))*omega_1), sensor_theta)
            + pow(fabs(-1.0 + ((10.0/3.0))*omega_2), sensor_theta))/(2 + pow(9.0, sensor_theta)));

       Recon_1 = (-(7.0/12.0)*(-CS_14*max_lambda_11 + CF_14) + ((1.0/6.0))*(-CS_15*max_lambda_11 + CF_15) +
            ((11.0/12.0))*(-CS_13*max_lambda_11 + CF_13))*omega_0 + (-(1.0/12.0)*(-CS_11*max_lambda_11 + CF_11) +
            ((1.0/6.0))*(-CS_13*max_lambda_11 + CF_13) + ((5.0/12.0))*(-CS_12*max_lambda_11 + CF_12))*omega_2 +
            (-(1.0/12.0)*(-CS_14*max_lambda_11 + CF_14) + ((1.0/6.0))*(-CS_12*max_lambda_11 + CF_12) +
            ((5.0/12.0))*(-CS_13*max_lambda_11 + CF_13))*omega_1 + Recon_1;

       beta_0 = ((1.0/3.0))*((CS_24*max_lambda_22 + CF_24)*(CS_24*max_lambda_22 + CF_24)) +
            ((1.0/2.0))*(-(19.0/6.0)*(CS_24*max_lambda_22 + CF_24) + ((25.0/6.0))*(CS_23*max_lambda_22 +
            CF_23))*(CS_23*max_lambda_22 + CF_23) + ((1.0/2.0))*(CS_22*max_lambda_22 +
            CF_22)*(-(31.0/6.0)*(CS_23*max_lambda_22 + CF_23) + ((5.0/3.0))*(CS_22*max_lambda_22 + CF_22) +
            ((11.0/6.0))*(CS_24*max_lambda_22 + CF_24));

       beta_1 = ((1.0/3.0))*((CS_23*max_lambda_22 + CF_23)*(CS_23*max_lambda_22 + CF_23)) +
            ((1.0/2.0))*(-(13.0/6.0)*(CS_23*max_lambda_22 + CF_23) + ((13.0/6.0))*(CS_22*max_lambda_22 +
            CF_22))*(CS_22*max_lambda_22 + CF_22) + ((1.0/2.0))*(CS_21*max_lambda_22 +
            CF_21)*(-(13.0/6.0)*(CS_22*max_lambda_22 + CF_22) + ((2.0/3.0))*(CS_21*max_lambda_22 + CF_21) +
            ((5.0/6.0))*(CS_23*max_lambda_22 + CF_23));

       beta_2 = ((5.0/6.0))*((CS_22*max_lambda_22 + CF_22)*(CS_22*max_lambda_22 + CF_22)) +
            ((1.0/2.0))*(((2.0/3.0))*(CS_20*max_lambda_22 + CF_20) + ((11.0/6.0))*(CS_22*max_lambda_22 +
            CF_22))*(CS_20*max_lambda_22 + CF_20) + ((1.0/2.0))*(CS_21*max_lambda_22 +
            CF_21)*(-(31.0/6.0)*(CS_22*max_lambda_22 + CF_22) - (19.0/6.0)*(CS_20*max_lambda_22 + CF_20) +
            ((25.0/6.0))*(CS_21*max_lambda_22 + CF_21));

       alpha_0 = 0.3 + ((3.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_0)*(1.0e-40 +
            beta_0));

       alpha_1 = 0.6 + ((3.0/5.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_1)*(1.0e-40 +
            beta_1));

       alpha_2 = 0.1 + ((1.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_2)*(1.0e-40 +
            beta_2));

      inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2));

      omega_0 = alpha_0*inv_alpha_sum;

      omega_1 = alpha_1*inv_alpha_sum;

      omega_2 = alpha_2*inv_alpha_sum;

       rj2 = (pow(fabs(-1.0 + 10*omega_2), sensor_theta) + pow(fabs(-1.0 + ((5.0/3.0))*omega_1), sensor_theta) +
            pow(fabs(-1.0 + ((10.0/3.0))*omega_0), sensor_theta))/(2 + pow(9.0, sensor_theta));

       Recon_2 = (-(7.0/12.0)*(CS_21*max_lambda_22 + CF_21) + ((1.0/6.0))*(CS_20*max_lambda_22 + CF_20) +
            ((11.0/12.0))*(CS_22*max_lambda_22 + CF_22))*omega_2 + (-(1.0/12.0)*(CS_21*max_lambda_22 + CF_21) +
            ((1.0/6.0))*(CS_23*max_lambda_22 + CF_23) + ((5.0/12.0))*(CS_22*max_lambda_22 + CF_22))*omega_1 +
            (-(1.0/12.0)*(CS_24*max_lambda_22 + CF_24) + ((1.0/6.0))*(CS_22*max_lambda_22 + CF_22) +
            ((5.0/12.0))*(CS_23*max_lambda_22 + CF_23))*omega_0 + Recon_2;

       beta_0 = ((1.0/3.0))*((-CS_25*max_lambda_22 + CF_25)*(-CS_25*max_lambda_22 + CF_25)) +
            ((1.0/2.0))*(-(19.0/6.0)*(-CS_25*max_lambda_22 + CF_25) + ((25.0/6.0))*(-CS_24*max_lambda_22 +
            CF_24))*(-CS_24*max_lambda_22 + CF_24) + ((1.0/2.0))*(-CS_23*max_lambda_22 +
            CF_23)*(-(31.0/6.0)*(-CS_24*max_lambda_22 + CF_24) + ((5.0/3.0))*(-CS_23*max_lambda_22 + CF_23) +
            ((11.0/6.0))*(-CS_25*max_lambda_22 + CF_25));

       beta_1 = ((1.0/3.0))*((-CS_24*max_lambda_22 + CF_24)*(-CS_24*max_lambda_22 + CF_24)) +
            ((1.0/2.0))*(-(13.0/6.0)*(-CS_24*max_lambda_22 + CF_24) + ((13.0/6.0))*(-CS_23*max_lambda_22 +
            CF_23))*(-CS_23*max_lambda_22 + CF_23) + ((1.0/2.0))*(-CS_22*max_lambda_22 +
            CF_22)*(-(13.0/6.0)*(-CS_23*max_lambda_22 + CF_23) + ((2.0/3.0))*(-CS_22*max_lambda_22 + CF_22) +
            ((5.0/6.0))*(-CS_24*max_lambda_22 + CF_24));

       beta_2 = ((5.0/6.0))*((-CS_23*max_lambda_22 + CF_23)*(-CS_23*max_lambda_22 + CF_23)) +
            ((1.0/2.0))*(-(31.0/6.0)*(-CS_23*max_lambda_22 + CF_23) + ((25.0/6.0))*(-CS_22*max_lambda_22 +
            CF_22))*(-CS_22*max_lambda_22 + CF_22) + ((1.0/2.0))*(-CS_21*max_lambda_22 +
            CF_21)*(-(19.0/6.0)*(-CS_22*max_lambda_22 + CF_22) + ((2.0/3.0))*(-CS_21*max_lambda_22 + CF_21) +
            ((11.0/6.0))*(-CS_23*max_lambda_22 + CF_23));

       alpha_0 = 0.1 + ((1.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_0)*(1.0e-40 +
            beta_0));

       alpha_1 = 0.6 + ((3.0/5.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_1)*(1.0e-40 +
            beta_1));

       alpha_2 = 0.3 + ((3.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_2)*(1.0e-40 +
            beta_2));

      inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2));

      omega_0 = alpha_0*inv_alpha_sum;

      omega_1 = alpha_1*inv_alpha_sum;

      omega_2 = alpha_2*inv_alpha_sum;

       rj2 = fmax(rj2, (pow(fabs(-1.0 + 10*omega_0), sensor_theta) + pow(fabs(-1.0 + ((5.0/3.0))*omega_1), sensor_theta)
            + pow(fabs(-1.0 + ((10.0/3.0))*omega_2), sensor_theta))/(2 + pow(9.0, sensor_theta)));

       Recon_2 = (-(7.0/12.0)*(-CS_24*max_lambda_22 + CF_24) + ((1.0/6.0))*(-CS_25*max_lambda_22 + CF_25) +
            ((11.0/12.0))*(-CS_23*max_lambda_22 + CF_23))*omega_0 + (-(1.0/12.0)*(-CS_21*max_lambda_22 + CF_21) +
            ((1.0/6.0))*(-CS_23*max_lambda_22 + CF_23) + ((5.0/12.0))*(-CS_22*max_lambda_22 + CF_22))*omega_2 +
            (-(1.0/12.0)*(-CS_24*max_lambda_22 + CF_24) + ((1.0/6.0))*(-CS_22*max_lambda_22 + CF_22) +
            ((5.0/12.0))*(-CS_23*max_lambda_22 + CF_23))*omega_1 + Recon_2;

       beta_0 = ((1.0/3.0))*((CS_34*max_lambda_33 + CF_34)*(CS_34*max_lambda_33 + CF_34)) +
            ((1.0/2.0))*(-(19.0/6.0)*(CS_34*max_lambda_33 + CF_34) + ((25.0/6.0))*(CS_33*max_lambda_33 +
            CF_33))*(CS_33*max_lambda_33 + CF_33) + ((1.0/2.0))*(CS_32*max_lambda_33 +
            CF_32)*(-(31.0/6.0)*(CS_33*max_lambda_33 + CF_33) + ((5.0/3.0))*(CS_32*max_lambda_33 + CF_32) +
            ((11.0/6.0))*(CS_34*max_lambda_33 + CF_34));

       beta_1 = ((1.0/3.0))*((CS_33*max_lambda_33 + CF_33)*(CS_33*max_lambda_33 + CF_33)) +
            ((1.0/2.0))*(-(13.0/6.0)*(CS_33*max_lambda_33 + CF_33) + ((13.0/6.0))*(CS_32*max_lambda_33 +
            CF_32))*(CS_32*max_lambda_33 + CF_32) + ((1.0/2.0))*(CS_31*max_lambda_33 +
            CF_31)*(-(13.0/6.0)*(CS_32*max_lambda_33 + CF_32) + ((2.0/3.0))*(CS_31*max_lambda_33 + CF_31) +
            ((5.0/6.0))*(CS_33*max_lambda_33 + CF_33));

       beta_2 = ((5.0/6.0))*((CS_32*max_lambda_33 + CF_32)*(CS_32*max_lambda_33 + CF_32)) +
            ((1.0/2.0))*(((2.0/3.0))*(CS_30*max_lambda_33 + CF_30) + ((11.0/6.0))*(CS_32*max_lambda_33 +
            CF_32))*(CS_30*max_lambda_33 + CF_30) + ((1.0/2.0))*(CS_31*max_lambda_33 +
            CF_31)*(-(31.0/6.0)*(CS_32*max_lambda_33 + CF_32) - (19.0/6.0)*(CS_30*max_lambda_33 + CF_30) +
            ((25.0/6.0))*(CS_31*max_lambda_33 + CF_31));

       alpha_0 = 0.3 + ((3.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_0)*(1.0e-40 +
            beta_0));

       alpha_1 = 0.6 + ((3.0/5.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_1)*(1.0e-40 +
            beta_1));

       alpha_2 = 0.1 + ((1.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_2)*(1.0e-40 +
            beta_2));

      inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2));

      omega_0 = alpha_0*inv_alpha_sum;

      omega_1 = alpha_1*inv_alpha_sum;

      omega_2 = alpha_2*inv_alpha_sum;

       rj3 = (pow(fabs(-1.0 + 10*omega_2), sensor_theta) + pow(fabs(-1.0 + ((5.0/3.0))*omega_1), sensor_theta) +
            pow(fabs(-1.0 + ((10.0/3.0))*omega_0), sensor_theta))/(2 + pow(9.0, sensor_theta));

       Recon_3 = (-(7.0/12.0)*(CS_31*max_lambda_33 + CF_31) + ((1.0/6.0))*(CS_30*max_lambda_33 + CF_30) +
            ((11.0/12.0))*(CS_32*max_lambda_33 + CF_32))*omega_2 + (-(1.0/12.0)*(CS_31*max_lambda_33 + CF_31) +
            ((1.0/6.0))*(CS_33*max_lambda_33 + CF_33) + ((5.0/12.0))*(CS_32*max_lambda_33 + CF_32))*omega_1 +
            (-(1.0/12.0)*(CS_34*max_lambda_33 + CF_34) + ((1.0/6.0))*(CS_32*max_lambda_33 + CF_32) +
            ((5.0/12.0))*(CS_33*max_lambda_33 + CF_33))*omega_0 + Recon_3;

       beta_0 = ((1.0/3.0))*((-CS_35*max_lambda_33 + CF_35)*(-CS_35*max_lambda_33 + CF_35)) +
            ((1.0/2.0))*(-(19.0/6.0)*(-CS_35*max_lambda_33 + CF_35) + ((25.0/6.0))*(-CS_34*max_lambda_33 +
            CF_34))*(-CS_34*max_lambda_33 + CF_34) + ((1.0/2.0))*(-CS_33*max_lambda_33 +
            CF_33)*(-(31.0/6.0)*(-CS_34*max_lambda_33 + CF_34) + ((5.0/3.0))*(-CS_33*max_lambda_33 + CF_33) +
            ((11.0/6.0))*(-CS_35*max_lambda_33 + CF_35));

       beta_1 = ((1.0/3.0))*((-CS_34*max_lambda_33 + CF_34)*(-CS_34*max_lambda_33 + CF_34)) +
            ((1.0/2.0))*(-(13.0/6.0)*(-CS_34*max_lambda_33 + CF_34) + ((13.0/6.0))*(-CS_33*max_lambda_33 +
            CF_33))*(-CS_33*max_lambda_33 + CF_33) + ((1.0/2.0))*(-CS_32*max_lambda_33 +
            CF_32)*(-(13.0/6.0)*(-CS_33*max_lambda_33 + CF_33) + ((2.0/3.0))*(-CS_32*max_lambda_33 + CF_32) +
            ((5.0/6.0))*(-CS_34*max_lambda_33 + CF_34));

       beta_2 = ((5.0/6.0))*((-CS_33*max_lambda_33 + CF_33)*(-CS_33*max_lambda_33 + CF_33)) +
            ((1.0/2.0))*(-(31.0/6.0)*(-CS_33*max_lambda_33 + CF_33) + ((25.0/6.0))*(-CS_32*max_lambda_33 +
            CF_32))*(-CS_32*max_lambda_33 + CF_32) + ((1.0/2.0))*(-CS_31*max_lambda_33 +
            CF_31)*(-(19.0/6.0)*(-CS_32*max_lambda_33 + CF_32) + ((2.0/3.0))*(-CS_31*max_lambda_33 + CF_31) +
            ((11.0/6.0))*(-CS_33*max_lambda_33 + CF_33));

       alpha_0 = 0.1 + ((1.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_0)*(1.0e-40 +
            beta_0));

       alpha_1 = 0.6 + ((3.0/5.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_1)*(1.0e-40 +
            beta_1));

       alpha_2 = 0.3 + ((3.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_2)*(1.0e-40 +
            beta_2));

      inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2));

      omega_0 = alpha_0*inv_alpha_sum;

      omega_1 = alpha_1*inv_alpha_sum;

      omega_2 = alpha_2*inv_alpha_sum;

       rj3 = fmax(rj3, (pow(fabs(-1.0 + 10*omega_0), sensor_theta) + pow(fabs(-1.0 + ((5.0/3.0))*omega_1), sensor_theta)
            + pow(fabs(-1.0 + ((10.0/3.0))*omega_2), sensor_theta))/(2 + pow(9.0, sensor_theta)));

       Recon_3 = (-(7.0/12.0)*(-CS_34*max_lambda_33 + CF_34) + ((1.0/6.0))*(-CS_35*max_lambda_33 + CF_35) +
            ((11.0/12.0))*(-CS_33*max_lambda_33 + CF_33))*omega_0 + (-(1.0/12.0)*(-CS_31*max_lambda_33 + CF_31) +
            ((1.0/6.0))*(-CS_33*max_lambda_33 + CF_33) + ((5.0/12.0))*(-CS_32*max_lambda_33 + CF_32))*omega_2 +
            (-(1.0/12.0)*(-CS_34*max_lambda_33 + CF_34) + ((1.0/6.0))*(-CS_32*max_lambda_33 + CF_32) +
            ((5.0/12.0))*(-CS_33*max_lambda_33 + CF_33))*omega_1 + Recon_3;

       beta_0 = ((1.0/3.0))*((CS_44*max_lambda_44 + CF_44)*(CS_44*max_lambda_44 + CF_44)) +
            ((1.0/2.0))*(-(19.0/6.0)*(CS_44*max_lambda_44 + CF_44) + ((25.0/6.0))*(CS_43*max_lambda_44 +
            CF_43))*(CS_43*max_lambda_44 + CF_43) + ((1.0/2.0))*(CS_42*max_lambda_44 +
            CF_42)*(-(31.0/6.0)*(CS_43*max_lambda_44 + CF_43) + ((5.0/3.0))*(CS_42*max_lambda_44 + CF_42) +
            ((11.0/6.0))*(CS_44*max_lambda_44 + CF_44));

       beta_1 = ((1.0/3.0))*((CS_43*max_lambda_44 + CF_43)*(CS_43*max_lambda_44 + CF_43)) +
            ((1.0/2.0))*(-(13.0/6.0)*(CS_43*max_lambda_44 + CF_43) + ((13.0/6.0))*(CS_42*max_lambda_44 +
            CF_42))*(CS_42*max_lambda_44 + CF_42) + ((1.0/2.0))*(CS_41*max_lambda_44 +
            CF_41)*(-(13.0/6.0)*(CS_42*max_lambda_44 + CF_42) + ((2.0/3.0))*(CS_41*max_lambda_44 + CF_41) +
            ((5.0/6.0))*(CS_43*max_lambda_44 + CF_43));

       beta_2 = ((5.0/6.0))*((CS_42*max_lambda_44 + CF_42)*(CS_42*max_lambda_44 + CF_42)) +
            ((1.0/2.0))*(((2.0/3.0))*(CS_40*max_lambda_44 + CF_40) + ((11.0/6.0))*(CS_42*max_lambda_44 +
            CF_42))*(CS_40*max_lambda_44 + CF_40) + ((1.0/2.0))*(CS_41*max_lambda_44 +
            CF_41)*(-(31.0/6.0)*(CS_42*max_lambda_44 + CF_42) - (19.0/6.0)*(CS_40*max_lambda_44 + CF_40) +
            ((25.0/6.0))*(CS_41*max_lambda_44 + CF_41));

       alpha_0 = 0.3 + ((3.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_0)*(1.0e-40 +
            beta_0));

       alpha_1 = 0.6 + ((3.0/5.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_1)*(1.0e-40 +
            beta_1));

       alpha_2 = 0.1 + ((1.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_2)*(1.0e-40 +
            beta_2));

      inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2));

      omega_0 = alpha_0*inv_alpha_sum;

      omega_1 = alpha_1*inv_alpha_sum;

      omega_2 = alpha_2*inv_alpha_sum;

       rj4 = (pow(fabs(-1.0 + 10*omega_2), sensor_theta) + pow(fabs(-1.0 + ((5.0/3.0))*omega_1), sensor_theta) +
            pow(fabs(-1.0 + ((10.0/3.0))*omega_0), sensor_theta))/(2 + pow(9.0, sensor_theta));

       Recon_4 = (-(7.0/12.0)*(CS_41*max_lambda_44 + CF_41) + ((1.0/6.0))*(CS_40*max_lambda_44 + CF_40) +
            ((11.0/12.0))*(CS_42*max_lambda_44 + CF_42))*omega_2 + (-(1.0/12.0)*(CS_41*max_lambda_44 + CF_41) +
            ((1.0/6.0))*(CS_43*max_lambda_44 + CF_43) + ((5.0/12.0))*(CS_42*max_lambda_44 + CF_42))*omega_1 +
            (-(1.0/12.0)*(CS_44*max_lambda_44 + CF_44) + ((1.0/6.0))*(CS_42*max_lambda_44 + CF_42) +
            ((5.0/12.0))*(CS_43*max_lambda_44 + CF_43))*omega_0 + Recon_4;

       beta_0 = ((1.0/3.0))*((-CS_45*max_lambda_44 + CF_45)*(-CS_45*max_lambda_44 + CF_45)) +
            ((1.0/2.0))*(-(19.0/6.0)*(-CS_45*max_lambda_44 + CF_45) + ((25.0/6.0))*(-CS_44*max_lambda_44 +
            CF_44))*(-CS_44*max_lambda_44 + CF_44) + ((1.0/2.0))*(-CS_43*max_lambda_44 +
            CF_43)*(-(31.0/6.0)*(-CS_44*max_lambda_44 + CF_44) + ((5.0/3.0))*(-CS_43*max_lambda_44 + CF_43) +
            ((11.0/6.0))*(-CS_45*max_lambda_44 + CF_45));

       beta_1 = ((1.0/3.0))*((-CS_44*max_lambda_44 + CF_44)*(-CS_44*max_lambda_44 + CF_44)) +
            ((1.0/2.0))*(-(13.0/6.0)*(-CS_44*max_lambda_44 + CF_44) + ((13.0/6.0))*(-CS_43*max_lambda_44 +
            CF_43))*(-CS_43*max_lambda_44 + CF_43) + ((1.0/2.0))*(-CS_42*max_lambda_44 +
            CF_42)*(-(13.0/6.0)*(-CS_43*max_lambda_44 + CF_43) + ((2.0/3.0))*(-CS_42*max_lambda_44 + CF_42) +
            ((5.0/6.0))*(-CS_44*max_lambda_44 + CF_44));

       beta_2 = ((5.0/6.0))*((-CS_43*max_lambda_44 + CF_43)*(-CS_43*max_lambda_44 + CF_43)) +
            ((1.0/2.0))*(-(31.0/6.0)*(-CS_43*max_lambda_44 + CF_43) + ((25.0/6.0))*(-CS_42*max_lambda_44 +
            CF_42))*(-CS_42*max_lambda_44 + CF_42) + ((1.0/2.0))*(-CS_41*max_lambda_44 +
            CF_41)*(-(19.0/6.0)*(-CS_42*max_lambda_44 + CF_42) + ((2.0/3.0))*(-CS_41*max_lambda_44 + CF_41) +
            ((11.0/6.0))*(-CS_43*max_lambda_44 + CF_43));

       alpha_0 = 0.1 + ((1.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_0)*(1.0e-40 +
            beta_0));

       alpha_1 = 0.6 + ((3.0/5.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_1)*(1.0e-40 +
            beta_1));

       alpha_2 = 0.3 + ((3.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_2)*(1.0e-40 +
            beta_2));

      inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2));

      omega_0 = alpha_0*inv_alpha_sum;

      omega_1 = alpha_1*inv_alpha_sum;

      omega_2 = alpha_2*inv_alpha_sum;

       rj4 = fmax(rj4, (pow(fabs(-1.0 + 10*omega_0), sensor_theta) + pow(fabs(-1.0 + ((5.0/3.0))*omega_1), sensor_theta)
            + pow(fabs(-1.0 + ((10.0/3.0))*omega_2), sensor_theta))/(2 + pow(9.0, sensor_theta)));

       Recon_4 = (-(7.0/12.0)*(-CS_44*max_lambda_44 + CF_44) + ((1.0/6.0))*(-CS_45*max_lambda_44 + CF_45) +
            ((11.0/12.0))*(-CS_43*max_lambda_44 + CF_43))*omega_0 + (-(1.0/12.0)*(-CS_41*max_lambda_44 + CF_41) +
            ((1.0/6.0))*(-CS_43*max_lambda_44 + CF_43) + ((5.0/12.0))*(-CS_42*max_lambda_44 + CF_42))*omega_2 +
            (-(1.0/12.0)*(-CS_44*max_lambda_44 + CF_44) + ((1.0/6.0))*(-CS_42*max_lambda_44 + CF_42) +
            ((5.0/12.0))*(-CS_43*max_lambda_44 + CF_43))*omega_1 + Recon_4;

      Recon_0 = (-(1.0/60.0)*(-8*CF_01 - 8*CF_04 + 37*CF_02 + 37*CF_03 + CF_00 + CF_05) + Recon_0)*rj0;

      Recon_1 = (-(1.0/60.0)*(-8*CF_11 - 8*CF_14 + 37*CF_12 + 37*CF_13 + CF_10 + CF_15) + Recon_1)*rj1;

      Recon_2 = (-(1.0/60.0)*(-8*CF_21 - 8*CF_24 + 37*CF_22 + 37*CF_23 + CF_20 + CF_25) + Recon_2)*rj2;

      Recon_3 = (-(1.0/60.0)*(-8*CF_31 - 8*CF_34 + 37*CF_32 + 37*CF_33 + CF_30 + CF_35) + Recon_3)*rj3;

      Recon_4 = (-(1.0/60.0)*(-8*CF_41 - 8*CF_44 + 37*CF_42 + 37*CF_43 + CF_40 + CF_45) + Recon_4)*rj4;

       wk0_B0(0,0,0) = AVG_0_D00*Recon_0*inv_AVG_met_fact + AVG_0_D01*Recon_1*inv_AVG_met_fact +
            0.707106781186547*AVG_0_rho*Recon_3*inv_AVG_a + 0.707106781186547*AVG_0_rho*Recon_4*inv_AVG_a;

       wk1_B0(0,0,0) = AVG_0_D00*AVG_0_u0*Recon_0*inv_AVG_met_fact + AVG_0_D01*AVG_0_rho*Recon_2*inv_AVG_met_fact +
            AVG_0_D01*AVG_0_u0*Recon_1*inv_AVG_met_fact + 0.707106781186547*(AVG_0_D00*AVG_0_a*inv_AVG_met_fact +
            AVG_0_u0)*AVG_0_rho*Recon_3*inv_AVG_a + 0.707106781186547*(-AVG_0_D00*AVG_0_a*inv_AVG_met_fact +
            AVG_0_u0)*AVG_0_rho*Recon_4*inv_AVG_a;

       wk2_B0(0,0,0) = AVG_0_D00*AVG_0_u1*Recon_0*inv_AVG_met_fact + AVG_0_D01*AVG_0_u1*Recon_1*inv_AVG_met_fact -
            AVG_0_D00*AVG_0_rho*Recon_2*inv_AVG_met_fact + 0.707106781186547*(AVG_0_D01*AVG_0_a*inv_AVG_met_fact +
            AVG_0_u1)*AVG_0_rho*Recon_3*inv_AVG_a + 0.707106781186547*(-AVG_0_D01*AVG_0_a*inv_AVG_met_fact +
            AVG_0_u1)*AVG_0_rho*Recon_4*inv_AVG_a;

       wk3_B0(0,0,0) = (AVG_0_D00*AVG_0_rho*inv_AVG_met_fact + AVG_0_D01*AVG_0_u2*inv_AVG_met_fact)*Recon_1 +
            (AVG_0_D00*AVG_0_u2*inv_AVG_met_fact - AVG_0_D01*AVG_0_rho*inv_AVG_met_fact)*Recon_0 +
            0.707106781186547*AVG_0_rho*AVG_0_u2*Recon_3*inv_AVG_a +
            0.707106781186547*AVG_0_rho*AVG_0_u2*Recon_4*inv_AVG_a;

       wk4_B0(0,0,0) = (((1.0/2.0))*((AVG_0_u0*AVG_0_u0) + (AVG_0_u1*AVG_0_u1) +
            (AVG_0_u2*AVG_0_u2))*AVG_0_D00*inv_AVG_met_fact - AVG_0_D01*AVG_0_rho*AVG_0_u2*inv_AVG_met_fact)*Recon_0 +
            (((1.0/2.0))*((AVG_0_u0*AVG_0_u0) + (AVG_0_u1*AVG_0_u1) + (AVG_0_u2*AVG_0_u2))*AVG_0_D01*inv_AVG_met_fact +
            AVG_0_D00*AVG_0_rho*AVG_0_u2*inv_AVG_met_fact)*Recon_1 + (AVG_0_D01*AVG_0_u0*inv_AVG_met_fact -
            AVG_0_D00*AVG_0_u1*inv_AVG_met_fact)*AVG_0_rho*Recon_2 + 0.707106781186547*(((AVG_0_a*AVG_0_a) +
            ((1.0/2.0))*((AVG_0_u0*AVG_0_u0) + (AVG_0_u1*AVG_0_u1) + (AVG_0_u2*AVG_0_u2))*gamma_m1)*invgamma_m1 +
            (AVG_0_D00*AVG_0_u0*inv_AVG_met_fact +
            AVG_0_D01*AVG_0_u1*inv_AVG_met_fact)*AVG_0_a)*AVG_0_rho*Recon_3*inv_AVG_a +
            0.707106781186547*(((AVG_0_a*AVG_0_a) + ((1.0/2.0))*((AVG_0_u0*AVG_0_u0) + (AVG_0_u1*AVG_0_u1) +
            (AVG_0_u2*AVG_0_u2))*gamma_m1)*invgamma_m1 - (AVG_0_D00*AVG_0_u0*inv_AVG_met_fact +
            AVG_0_D01*AVG_0_u1*inv_AVG_met_fact)*AVG_0_a)*AVG_0_rho*Recon_4*inv_AVG_a;

   }

   else{

      wk0_B0(0,0,0) = 0.0;

      wk1_B0(0,0,0) = 0.0;

      wk2_B0(0,0,0) = 0.0;

      wk3_B0(0,0,0) = 0.0;

      wk4_B0(0,0,0) = 0.0;

   }

}

 void opensbliblock00Kernel064(const ACC<double> &D10_B0, const ACC<double> &D11_B0, const ACC<double> &a_B0, const
ACC<double> &detJ_B0, const ACC<double> &kappa_B0, const ACC<double> &p_B0, const ACC<double> &rhoE_B0, const
ACC<double> &rho_B0, const ACC<double> &rhou0_B0, const ACC<double> &rhou1_B0, const ACC<double> &rhou2_B0, const
ACC<double> &u0_B0, const ACC<double> &u1_B0, const ACC<double> &u2_B0, ACC<double> &Residual0_B0, ACC<double>
&Residual1_B0, ACC<double> &Residual2_B0, ACC<double> &Residual3_B0, ACC<double> &Residual4_B0)
{
   double AVG_1_1_LEV_00 = 0.0;
   double AVG_1_1_LEV_01 = 0.0;
   double AVG_1_1_LEV_02 = 0.0;
   double AVG_1_1_LEV_03 = 0.0;
   double AVG_1_1_LEV_04 = 0.0;
   double AVG_1_1_LEV_10 = 0.0;
   double AVG_1_1_LEV_11 = 0.0;
   double AVG_1_1_LEV_12 = 0.0;
   double AVG_1_1_LEV_13 = 0.0;
   double AVG_1_1_LEV_14 = 0.0;
   double AVG_1_1_LEV_20 = 0.0;
   double AVG_1_1_LEV_21 = 0.0;
   double AVG_1_1_LEV_22 = 0.0;
   double AVG_1_1_LEV_30 = 0.0;
   double AVG_1_1_LEV_31 = 0.0;
   double AVG_1_1_LEV_32 = 0.0;
   double AVG_1_1_LEV_33 = 0.0;
   double AVG_1_1_LEV_34 = 0.0;
   double AVG_1_1_LEV_40 = 0.0;
   double AVG_1_1_LEV_41 = 0.0;
   double AVG_1_1_LEV_42 = 0.0;
   double AVG_1_1_LEV_43 = 0.0;
   double AVG_1_1_LEV_44 = 0.0;
   double AVG_1_D10 = 0.0;
   double AVG_1_D11 = 0.0;
   double AVG_1_a = 0.0;
   double AVG_1_detJ = 0.0;
   double AVG_1_inv_rho = 0.0;
   double AVG_1_rho = 0.0;
   double AVG_1_u0 = 0.0;
   double AVG_1_u1 = 0.0;
   double AVG_1_u2 = 0.0;
   double CF_00 = 0.0;
   double CF_01 = 0.0;
   double CF_02 = 0.0;
   double CF_03 = 0.0;
   double CF_04 = 0.0;
   double CF_05 = 0.0;
   double CF_10 = 0.0;
   double CF_11 = 0.0;
   double CF_12 = 0.0;
   double CF_13 = 0.0;
   double CF_14 = 0.0;
   double CF_15 = 0.0;
   double CF_20 = 0.0;
   double CF_21 = 0.0;
   double CF_22 = 0.0;
   double CF_23 = 0.0;
   double CF_24 = 0.0;
   double CF_25 = 0.0;
   double CF_30 = 0.0;
   double CF_31 = 0.0;
   double CF_32 = 0.0;
   double CF_33 = 0.0;
   double CF_34 = 0.0;
   double CF_35 = 0.0;
   double CF_40 = 0.0;
   double CF_41 = 0.0;
   double CF_42 = 0.0;
   double CF_43 = 0.0;
   double CF_44 = 0.0;
   double CF_45 = 0.0;
   double CS_00 = 0.0;
   double CS_01 = 0.0;
   double CS_02 = 0.0;
   double CS_03 = 0.0;
   double CS_04 = 0.0;
   double CS_05 = 0.0;
   double CS_10 = 0.0;
   double CS_11 = 0.0;
   double CS_12 = 0.0;
   double CS_13 = 0.0;
   double CS_14 = 0.0;
   double CS_15 = 0.0;
   double CS_20 = 0.0;
   double CS_21 = 0.0;
   double CS_22 = 0.0;
   double CS_23 = 0.0;
   double CS_24 = 0.0;
   double CS_25 = 0.0;
   double CS_30 = 0.0;
   double CS_31 = 0.0;
   double CS_32 = 0.0;
   double CS_33 = 0.0;
   double CS_34 = 0.0;
   double CS_35 = 0.0;
   double CS_40 = 0.0;
   double CS_41 = 0.0;
   double CS_42 = 0.0;
   double CS_43 = 0.0;
   double CS_44 = 0.0;
   double CS_45 = 0.0;
   double Recon_0 = 0.0;
   double Recon_1 = 0.0;
   double Recon_2 = 0.0;
   double Recon_3 = 0.0;
   double Recon_4 = 0.0;
   double alpha_0 = 0.0;
   double alpha_1 = 0.0;
   double alpha_2 = 0.0;
   double beta_0 = 0.0;
   double beta_1 = 0.0;
   double beta_2 = 0.0;
   double inv_AVG_a = 0.0;
   double inv_AVG_met_fact = 0.0;
   double inv_AVG_rho = 0.0;
   double inv_alpha_sum = 0.0;
   double max_lambda_00 = 0.0;
   double max_lambda_11 = 0.0;
   double max_lambda_22 = 0.0;
   double max_lambda_33 = 0.0;
   double max_lambda_44 = 0.0;
   double omega_0 = 0.0;
   double omega_1 = 0.0;
   double omega_2 = 0.0;
   double rj0 = 0.0;
   double rj1 = 0.0;
   double rj2 = 0.0;
   double rj3 = 0.0;
   double rj4 = 0.0;
    if (fmax(kappa_B0(0,-2,0), fmax(kappa_B0(0,-1,0), fmax(kappa_B0(0,0,0), fmax(kappa_B0(0,1,0), fmax(kappa_B0(0,-3,0),
      kappa_B0(0,2,0)))))) > Ducros_check){

      AVG_1_rho = sqrt(rho_B0(0,0,0)*rho_B0(0,1,0));

      AVG_1_inv_rho = 1.0/((sqrt(rho_B0(0,0,0)) + sqrt(rho_B0(0,1,0))));

      AVG_1_u0 = (sqrt(rho_B0(0,0,0))*u0_B0(0,0,0) + sqrt(rho_B0(0,1,0))*u0_B0(0,1,0))*AVG_1_inv_rho;

      AVG_1_u1 = (sqrt(rho_B0(0,0,0))*u1_B0(0,0,0) + sqrt(rho_B0(0,1,0))*u1_B0(0,1,0))*AVG_1_inv_rho;

      AVG_1_u2 = (sqrt(rho_B0(0,0,0))*u2_B0(0,0,0) + sqrt(rho_B0(0,1,0))*u2_B0(0,1,0))*AVG_1_inv_rho;

       AVG_1_a = sqrt((-(1.0/2.0)*((AVG_1_u0*AVG_1_u0) + (AVG_1_u1*AVG_1_u1) + (AVG_1_u2*AVG_1_u2)) + ((p_B0(0,0,0) +
            rhoE_B0(0,0,0))/sqrt(rho_B0(0,0,0)) + (p_B0(0,1,0) +
            rhoE_B0(0,1,0))/sqrt(rho_B0(0,1,0)))*AVG_1_inv_rho)*gamma_m1);

      AVG_1_D11 = ((1.0/2.0))*(D11_B0(0,0,0) + D11_B0(0,1,0));

      AVG_1_detJ = ((1.0/2.0))*(detJ_B0(0,0,0) + detJ_B0(0,1,0));

      AVG_1_D10 = ((1.0/2.0))*(D10_B0(0,0,0) + D10_B0(0,1,0));

      inv_AVG_a = 1.0/(AVG_1_a);

      inv_AVG_rho = 1.0/(AVG_1_rho);

      inv_AVG_met_fact = pow((AVG_1_D10*AVG_1_D10) + (AVG_1_D11*AVG_1_D11), (-1.0/2.0));

       AVG_1_1_LEV_00 = -(1.0/2.0)*(-2*AVG_1_D10 - (AVG_1_u0*AVG_1_u0)*(inv_AVG_a*inv_AVG_a)*AVG_1_D10 -
            (AVG_1_u1*AVG_1_u1)*(inv_AVG_a*inv_AVG_a)*AVG_1_D10 - (AVG_1_u2*AVG_1_u2)*(inv_AVG_a*inv_AVG_a)*AVG_1_D10 -
            2*AVG_1_D11*AVG_1_u2*inv_AVG_rho + (AVG_1_u0*AVG_1_u0)*(inv_AVG_a*inv_AVG_a)*gama*AVG_1_D10 +
            (AVG_1_u1*AVG_1_u1)*(inv_AVG_a*inv_AVG_a)*gama*AVG_1_D10 +
            (AVG_1_u2*AVG_1_u2)*(inv_AVG_a*inv_AVG_a)*gama*AVG_1_D10)*inv_AVG_met_fact;

      AVG_1_1_LEV_01 = (inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_1_D10*AVG_1_u0*inv_AVG_met_fact;

      AVG_1_1_LEV_02 = (inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_1_D10*AVG_1_u1*inv_AVG_met_fact;

       AVG_1_1_LEV_03 = (-AVG_1_D11*inv_AVG_rho - (inv_AVG_a*inv_AVG_a)*AVG_1_D10*AVG_1_u2 +
            (inv_AVG_a*inv_AVG_a)*gama*AVG_1_D10*AVG_1_u2)*inv_AVG_met_fact;

      AVG_1_1_LEV_04 = -(inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_1_D10*inv_AVG_met_fact;

       AVG_1_1_LEV_10 = -(1.0/2.0)*(-2*AVG_1_D11 - (AVG_1_u0*AVG_1_u0)*(inv_AVG_a*inv_AVG_a)*AVG_1_D11 -
            (AVG_1_u1*AVG_1_u1)*(inv_AVG_a*inv_AVG_a)*AVG_1_D11 - (AVG_1_u2*AVG_1_u2)*(inv_AVG_a*inv_AVG_a)*AVG_1_D11 +
            2*AVG_1_D10*AVG_1_u2*inv_AVG_rho + (AVG_1_u0*AVG_1_u0)*(inv_AVG_a*inv_AVG_a)*gama*AVG_1_D11 +
            (AVG_1_u1*AVG_1_u1)*(inv_AVG_a*inv_AVG_a)*gama*AVG_1_D11 +
            (AVG_1_u2*AVG_1_u2)*(inv_AVG_a*inv_AVG_a)*gama*AVG_1_D11)*inv_AVG_met_fact;

      AVG_1_1_LEV_11 = (inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_1_D11*AVG_1_u0*inv_AVG_met_fact;

      AVG_1_1_LEV_12 = (inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_1_D11*AVG_1_u1*inv_AVG_met_fact;

       AVG_1_1_LEV_13 = (AVG_1_D10*inv_AVG_rho - (inv_AVG_a*inv_AVG_a)*AVG_1_D11*AVG_1_u2 +
            (inv_AVG_a*inv_AVG_a)*gama*AVG_1_D11*AVG_1_u2)*inv_AVG_met_fact;

      AVG_1_1_LEV_14 = -(inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_1_D11*inv_AVG_met_fact;

      AVG_1_1_LEV_20 = (AVG_1_D10*AVG_1_u1 - AVG_1_D11*AVG_1_u0)*inv_AVG_met_fact*inv_AVG_rho;

      AVG_1_1_LEV_21 = AVG_1_D11*inv_AVG_met_fact*inv_AVG_rho;

      AVG_1_1_LEV_22 = -AVG_1_D10*inv_AVG_met_fact*inv_AVG_rho;

       AVG_1_1_LEV_30 = -0.353553390593274*((AVG_1_u0*AVG_1_u0) + (AVG_1_u1*AVG_1_u1) + (AVG_1_u2*AVG_1_u2) -
            (AVG_1_u0*AVG_1_u0)*gama - (AVG_1_u1*AVG_1_u1)*gama - (AVG_1_u2*AVG_1_u2)*gama +
            2*AVG_1_D10*AVG_1_a*AVG_1_u0*inv_AVG_met_fact +
            2*AVG_1_D11*AVG_1_a*AVG_1_u1*inv_AVG_met_fact)*inv_AVG_a*inv_AVG_rho;

       AVG_1_1_LEV_31 = 0.707106781186547*(-gama*AVG_1_u0 + AVG_1_D10*AVG_1_a*inv_AVG_met_fact +
            AVG_1_u0)*inv_AVG_a*inv_AVG_rho;

       AVG_1_1_LEV_32 = 0.707106781186547*(-gama*AVG_1_u1 + AVG_1_D11*AVG_1_a*inv_AVG_met_fact +
            AVG_1_u1)*inv_AVG_a*inv_AVG_rho;

      AVG_1_1_LEV_33 = -0.707106781186547*gamma_m1*AVG_1_u2*inv_AVG_a*inv_AVG_rho;

      AVG_1_1_LEV_34 = 0.707106781186547*gamma_m1*inv_AVG_a*inv_AVG_rho;

       AVG_1_1_LEV_40 = 0.353553390593274*(-(AVG_1_u0*AVG_1_u0) - (AVG_1_u1*AVG_1_u1) - (AVG_1_u2*AVG_1_u2) +
            (AVG_1_u0*AVG_1_u0)*gama + (AVG_1_u1*AVG_1_u1)*gama + (AVG_1_u2*AVG_1_u2)*gama +
            2*AVG_1_D10*AVG_1_a*AVG_1_u0*inv_AVG_met_fact +
            2*AVG_1_D11*AVG_1_a*AVG_1_u1*inv_AVG_met_fact)*inv_AVG_a*inv_AVG_rho;

       AVG_1_1_LEV_41 = -0.707106781186547*(-AVG_1_u0 + gama*AVG_1_u0 +
            AVG_1_D10*AVG_1_a*inv_AVG_met_fact)*inv_AVG_a*inv_AVG_rho;

       AVG_1_1_LEV_42 = -0.707106781186547*(-AVG_1_u1 + gama*AVG_1_u1 +
            AVG_1_D11*AVG_1_a*inv_AVG_met_fact)*inv_AVG_a*inv_AVG_rho;

      AVG_1_1_LEV_43 = -0.707106781186547*gamma_m1*AVG_1_u2*inv_AVG_a*inv_AVG_rho;

      AVG_1_1_LEV_44 = 0.707106781186547*gamma_m1*inv_AVG_a*inv_AVG_rho;

       CF_00 = p_B0(0,-2,0)*AVG_1_1_LEV_02 + rhou1_B0(0,-2,0)*AVG_1_1_LEV_00 + p_B0(0,-2,0)*u1_B0(0,-2,0)*AVG_1_1_LEV_04
            + u1_B0(0,-2,0)*rhoE_B0(0,-2,0)*AVG_1_1_LEV_04 + u1_B0(0,-2,0)*rhou0_B0(0,-2,0)*AVG_1_1_LEV_01 +
            u1_B0(0,-2,0)*rhou1_B0(0,-2,0)*AVG_1_1_LEV_02 + u1_B0(0,-2,0)*rhou2_B0(0,-2,0)*AVG_1_1_LEV_03;

       CF_10 = p_B0(0,-2,0)*AVG_1_1_LEV_12 + rhou1_B0(0,-2,0)*AVG_1_1_LEV_10 + p_B0(0,-2,0)*u1_B0(0,-2,0)*AVG_1_1_LEV_14
            + u1_B0(0,-2,0)*rhoE_B0(0,-2,0)*AVG_1_1_LEV_14 + u1_B0(0,-2,0)*rhou0_B0(0,-2,0)*AVG_1_1_LEV_11 +
            u1_B0(0,-2,0)*rhou1_B0(0,-2,0)*AVG_1_1_LEV_12 + u1_B0(0,-2,0)*rhou2_B0(0,-2,0)*AVG_1_1_LEV_13;

       CF_20 = p_B0(0,-2,0)*AVG_1_1_LEV_22 + rhou1_B0(0,-2,0)*AVG_1_1_LEV_20 +
            u1_B0(0,-2,0)*rhou0_B0(0,-2,0)*AVG_1_1_LEV_21 + u1_B0(0,-2,0)*rhou1_B0(0,-2,0)*AVG_1_1_LEV_22;

       CF_30 = p_B0(0,-2,0)*AVG_1_1_LEV_32 + rhou1_B0(0,-2,0)*AVG_1_1_LEV_30 + p_B0(0,-2,0)*u1_B0(0,-2,0)*AVG_1_1_LEV_34
            + u1_B0(0,-2,0)*rhoE_B0(0,-2,0)*AVG_1_1_LEV_34 + u1_B0(0,-2,0)*rhou0_B0(0,-2,0)*AVG_1_1_LEV_31 +
            u1_B0(0,-2,0)*rhou1_B0(0,-2,0)*AVG_1_1_LEV_32 + u1_B0(0,-2,0)*rhou2_B0(0,-2,0)*AVG_1_1_LEV_33;

       CF_40 = p_B0(0,-2,0)*AVG_1_1_LEV_42 + rhou1_B0(0,-2,0)*AVG_1_1_LEV_40 + p_B0(0,-2,0)*u1_B0(0,-2,0)*AVG_1_1_LEV_44
            + u1_B0(0,-2,0)*rhoE_B0(0,-2,0)*AVG_1_1_LEV_44 + u1_B0(0,-2,0)*rhou0_B0(0,-2,0)*AVG_1_1_LEV_41 +
            u1_B0(0,-2,0)*rhou1_B0(0,-2,0)*AVG_1_1_LEV_42 + u1_B0(0,-2,0)*rhou2_B0(0,-2,0)*AVG_1_1_LEV_43;

       CS_00 = rho_B0(0,-2,0)*AVG_1_1_LEV_00 + rhoE_B0(0,-2,0)*AVG_1_1_LEV_04 + rhou0_B0(0,-2,0)*AVG_1_1_LEV_01 +
            rhou1_B0(0,-2,0)*AVG_1_1_LEV_02 + rhou2_B0(0,-2,0)*AVG_1_1_LEV_03;

       CS_10 = rho_B0(0,-2,0)*AVG_1_1_LEV_10 + rhoE_B0(0,-2,0)*AVG_1_1_LEV_14 + rhou0_B0(0,-2,0)*AVG_1_1_LEV_11 +
            rhou1_B0(0,-2,0)*AVG_1_1_LEV_12 + rhou2_B0(0,-2,0)*AVG_1_1_LEV_13;

      CS_20 = rho_B0(0,-2,0)*AVG_1_1_LEV_20 + rhou0_B0(0,-2,0)*AVG_1_1_LEV_21 + rhou1_B0(0,-2,0)*AVG_1_1_LEV_22;

       CS_30 = rho_B0(0,-2,0)*AVG_1_1_LEV_30 + rhoE_B0(0,-2,0)*AVG_1_1_LEV_34 + rhou0_B0(0,-2,0)*AVG_1_1_LEV_31 +
            rhou1_B0(0,-2,0)*AVG_1_1_LEV_32 + rhou2_B0(0,-2,0)*AVG_1_1_LEV_33;

       CS_40 = rho_B0(0,-2,0)*AVG_1_1_LEV_40 + rhoE_B0(0,-2,0)*AVG_1_1_LEV_44 + rhou0_B0(0,-2,0)*AVG_1_1_LEV_41 +
            rhou1_B0(0,-2,0)*AVG_1_1_LEV_42 + rhou2_B0(0,-2,0)*AVG_1_1_LEV_43;

       CF_01 = p_B0(0,-1,0)*AVG_1_1_LEV_02 + rhou1_B0(0,-1,0)*AVG_1_1_LEV_00 + p_B0(0,-1,0)*u1_B0(0,-1,0)*AVG_1_1_LEV_04
            + u1_B0(0,-1,0)*rhoE_B0(0,-1,0)*AVG_1_1_LEV_04 + u1_B0(0,-1,0)*rhou0_B0(0,-1,0)*AVG_1_1_LEV_01 +
            u1_B0(0,-1,0)*rhou1_B0(0,-1,0)*AVG_1_1_LEV_02 + u1_B0(0,-1,0)*rhou2_B0(0,-1,0)*AVG_1_1_LEV_03;

       CF_11 = p_B0(0,-1,0)*AVG_1_1_LEV_12 + rhou1_B0(0,-1,0)*AVG_1_1_LEV_10 + p_B0(0,-1,0)*u1_B0(0,-1,0)*AVG_1_1_LEV_14
            + u1_B0(0,-1,0)*rhoE_B0(0,-1,0)*AVG_1_1_LEV_14 + u1_B0(0,-1,0)*rhou0_B0(0,-1,0)*AVG_1_1_LEV_11 +
            u1_B0(0,-1,0)*rhou1_B0(0,-1,0)*AVG_1_1_LEV_12 + u1_B0(0,-1,0)*rhou2_B0(0,-1,0)*AVG_1_1_LEV_13;

       CF_21 = p_B0(0,-1,0)*AVG_1_1_LEV_22 + rhou1_B0(0,-1,0)*AVG_1_1_LEV_20 +
            u1_B0(0,-1,0)*rhou0_B0(0,-1,0)*AVG_1_1_LEV_21 + u1_B0(0,-1,0)*rhou1_B0(0,-1,0)*AVG_1_1_LEV_22;

       CF_31 = p_B0(0,-1,0)*AVG_1_1_LEV_32 + rhou1_B0(0,-1,0)*AVG_1_1_LEV_30 + p_B0(0,-1,0)*u1_B0(0,-1,0)*AVG_1_1_LEV_34
            + u1_B0(0,-1,0)*rhoE_B0(0,-1,0)*AVG_1_1_LEV_34 + u1_B0(0,-1,0)*rhou0_B0(0,-1,0)*AVG_1_1_LEV_31 +
            u1_B0(0,-1,0)*rhou1_B0(0,-1,0)*AVG_1_1_LEV_32 + u1_B0(0,-1,0)*rhou2_B0(0,-1,0)*AVG_1_1_LEV_33;

       CF_41 = p_B0(0,-1,0)*AVG_1_1_LEV_42 + rhou1_B0(0,-1,0)*AVG_1_1_LEV_40 + p_B0(0,-1,0)*u1_B0(0,-1,0)*AVG_1_1_LEV_44
            + u1_B0(0,-1,0)*rhoE_B0(0,-1,0)*AVG_1_1_LEV_44 + u1_B0(0,-1,0)*rhou0_B0(0,-1,0)*AVG_1_1_LEV_41 +
            u1_B0(0,-1,0)*rhou1_B0(0,-1,0)*AVG_1_1_LEV_42 + u1_B0(0,-1,0)*rhou2_B0(0,-1,0)*AVG_1_1_LEV_43;

       CS_01 = rho_B0(0,-1,0)*AVG_1_1_LEV_00 + rhoE_B0(0,-1,0)*AVG_1_1_LEV_04 + rhou0_B0(0,-1,0)*AVG_1_1_LEV_01 +
            rhou1_B0(0,-1,0)*AVG_1_1_LEV_02 + rhou2_B0(0,-1,0)*AVG_1_1_LEV_03;

       CS_11 = rho_B0(0,-1,0)*AVG_1_1_LEV_10 + rhoE_B0(0,-1,0)*AVG_1_1_LEV_14 + rhou0_B0(0,-1,0)*AVG_1_1_LEV_11 +
            rhou1_B0(0,-1,0)*AVG_1_1_LEV_12 + rhou2_B0(0,-1,0)*AVG_1_1_LEV_13;

      CS_21 = rho_B0(0,-1,0)*AVG_1_1_LEV_20 + rhou0_B0(0,-1,0)*AVG_1_1_LEV_21 + rhou1_B0(0,-1,0)*AVG_1_1_LEV_22;

       CS_31 = rho_B0(0,-1,0)*AVG_1_1_LEV_30 + rhoE_B0(0,-1,0)*AVG_1_1_LEV_34 + rhou0_B0(0,-1,0)*AVG_1_1_LEV_31 +
            rhou1_B0(0,-1,0)*AVG_1_1_LEV_32 + rhou2_B0(0,-1,0)*AVG_1_1_LEV_33;

       CS_41 = rho_B0(0,-1,0)*AVG_1_1_LEV_40 + rhoE_B0(0,-1,0)*AVG_1_1_LEV_44 + rhou0_B0(0,-1,0)*AVG_1_1_LEV_41 +
            rhou1_B0(0,-1,0)*AVG_1_1_LEV_42 + rhou2_B0(0,-1,0)*AVG_1_1_LEV_43;

       CF_02 = p_B0(0,0,0)*AVG_1_1_LEV_02 + rhou1_B0(0,0,0)*AVG_1_1_LEV_00 + p_B0(0,0,0)*u1_B0(0,0,0)*AVG_1_1_LEV_04 +
            u1_B0(0,0,0)*rhoE_B0(0,0,0)*AVG_1_1_LEV_04 + u1_B0(0,0,0)*rhou0_B0(0,0,0)*AVG_1_1_LEV_01 +
            u1_B0(0,0,0)*rhou1_B0(0,0,0)*AVG_1_1_LEV_02 + u1_B0(0,0,0)*rhou2_B0(0,0,0)*AVG_1_1_LEV_03;

       CF_12 = p_B0(0,0,0)*AVG_1_1_LEV_12 + rhou1_B0(0,0,0)*AVG_1_1_LEV_10 + p_B0(0,0,0)*u1_B0(0,0,0)*AVG_1_1_LEV_14 +
            u1_B0(0,0,0)*rhoE_B0(0,0,0)*AVG_1_1_LEV_14 + u1_B0(0,0,0)*rhou0_B0(0,0,0)*AVG_1_1_LEV_11 +
            u1_B0(0,0,0)*rhou1_B0(0,0,0)*AVG_1_1_LEV_12 + u1_B0(0,0,0)*rhou2_B0(0,0,0)*AVG_1_1_LEV_13;

       CF_22 = p_B0(0,0,0)*AVG_1_1_LEV_22 + rhou1_B0(0,0,0)*AVG_1_1_LEV_20 + u1_B0(0,0,0)*rhou0_B0(0,0,0)*AVG_1_1_LEV_21
            + u1_B0(0,0,0)*rhou1_B0(0,0,0)*AVG_1_1_LEV_22;

       CF_32 = p_B0(0,0,0)*AVG_1_1_LEV_32 + rhou1_B0(0,0,0)*AVG_1_1_LEV_30 + p_B0(0,0,0)*u1_B0(0,0,0)*AVG_1_1_LEV_34 +
            u1_B0(0,0,0)*rhoE_B0(0,0,0)*AVG_1_1_LEV_34 + u1_B0(0,0,0)*rhou0_B0(0,0,0)*AVG_1_1_LEV_31 +
            u1_B0(0,0,0)*rhou1_B0(0,0,0)*AVG_1_1_LEV_32 + u1_B0(0,0,0)*rhou2_B0(0,0,0)*AVG_1_1_LEV_33;

       CF_42 = p_B0(0,0,0)*AVG_1_1_LEV_42 + rhou1_B0(0,0,0)*AVG_1_1_LEV_40 + p_B0(0,0,0)*u1_B0(0,0,0)*AVG_1_1_LEV_44 +
            u1_B0(0,0,0)*rhoE_B0(0,0,0)*AVG_1_1_LEV_44 + u1_B0(0,0,0)*rhou0_B0(0,0,0)*AVG_1_1_LEV_41 +
            u1_B0(0,0,0)*rhou1_B0(0,0,0)*AVG_1_1_LEV_42 + u1_B0(0,0,0)*rhou2_B0(0,0,0)*AVG_1_1_LEV_43;

       CS_02 = rho_B0(0,0,0)*AVG_1_1_LEV_00 + rhoE_B0(0,0,0)*AVG_1_1_LEV_04 + rhou0_B0(0,0,0)*AVG_1_1_LEV_01 +
            rhou1_B0(0,0,0)*AVG_1_1_LEV_02 + rhou2_B0(0,0,0)*AVG_1_1_LEV_03;

       CS_12 = rho_B0(0,0,0)*AVG_1_1_LEV_10 + rhoE_B0(0,0,0)*AVG_1_1_LEV_14 + rhou0_B0(0,0,0)*AVG_1_1_LEV_11 +
            rhou1_B0(0,0,0)*AVG_1_1_LEV_12 + rhou2_B0(0,0,0)*AVG_1_1_LEV_13;

      CS_22 = rho_B0(0,0,0)*AVG_1_1_LEV_20 + rhou0_B0(0,0,0)*AVG_1_1_LEV_21 + rhou1_B0(0,0,0)*AVG_1_1_LEV_22;

       CS_32 = rho_B0(0,0,0)*AVG_1_1_LEV_30 + rhoE_B0(0,0,0)*AVG_1_1_LEV_34 + rhou0_B0(0,0,0)*AVG_1_1_LEV_31 +
            rhou1_B0(0,0,0)*AVG_1_1_LEV_32 + rhou2_B0(0,0,0)*AVG_1_1_LEV_33;

       CS_42 = rho_B0(0,0,0)*AVG_1_1_LEV_40 + rhoE_B0(0,0,0)*AVG_1_1_LEV_44 + rhou0_B0(0,0,0)*AVG_1_1_LEV_41 +
            rhou1_B0(0,0,0)*AVG_1_1_LEV_42 + rhou2_B0(0,0,0)*AVG_1_1_LEV_43;

       CF_03 = p_B0(0,1,0)*AVG_1_1_LEV_02 + rhou1_B0(0,1,0)*AVG_1_1_LEV_00 + p_B0(0,1,0)*u1_B0(0,1,0)*AVG_1_1_LEV_04 +
            u1_B0(0,1,0)*rhoE_B0(0,1,0)*AVG_1_1_LEV_04 + u1_B0(0,1,0)*rhou0_B0(0,1,0)*AVG_1_1_LEV_01 +
            u1_B0(0,1,0)*rhou1_B0(0,1,0)*AVG_1_1_LEV_02 + u1_B0(0,1,0)*rhou2_B0(0,1,0)*AVG_1_1_LEV_03;

       CF_13 = p_B0(0,1,0)*AVG_1_1_LEV_12 + rhou1_B0(0,1,0)*AVG_1_1_LEV_10 + p_B0(0,1,0)*u1_B0(0,1,0)*AVG_1_1_LEV_14 +
            u1_B0(0,1,0)*rhoE_B0(0,1,0)*AVG_1_1_LEV_14 + u1_B0(0,1,0)*rhou0_B0(0,1,0)*AVG_1_1_LEV_11 +
            u1_B0(0,1,0)*rhou1_B0(0,1,0)*AVG_1_1_LEV_12 + u1_B0(0,1,0)*rhou2_B0(0,1,0)*AVG_1_1_LEV_13;

       CF_23 = p_B0(0,1,0)*AVG_1_1_LEV_22 + rhou1_B0(0,1,0)*AVG_1_1_LEV_20 + u1_B0(0,1,0)*rhou0_B0(0,1,0)*AVG_1_1_LEV_21
            + u1_B0(0,1,0)*rhou1_B0(0,1,0)*AVG_1_1_LEV_22;

       CF_33 = p_B0(0,1,0)*AVG_1_1_LEV_32 + rhou1_B0(0,1,0)*AVG_1_1_LEV_30 + p_B0(0,1,0)*u1_B0(0,1,0)*AVG_1_1_LEV_34 +
            u1_B0(0,1,0)*rhoE_B0(0,1,0)*AVG_1_1_LEV_34 + u1_B0(0,1,0)*rhou0_B0(0,1,0)*AVG_1_1_LEV_31 +
            u1_B0(0,1,0)*rhou1_B0(0,1,0)*AVG_1_1_LEV_32 + u1_B0(0,1,0)*rhou2_B0(0,1,0)*AVG_1_1_LEV_33;

       CF_43 = p_B0(0,1,0)*AVG_1_1_LEV_42 + rhou1_B0(0,1,0)*AVG_1_1_LEV_40 + p_B0(0,1,0)*u1_B0(0,1,0)*AVG_1_1_LEV_44 +
            u1_B0(0,1,0)*rhoE_B0(0,1,0)*AVG_1_1_LEV_44 + u1_B0(0,1,0)*rhou0_B0(0,1,0)*AVG_1_1_LEV_41 +
            u1_B0(0,1,0)*rhou1_B0(0,1,0)*AVG_1_1_LEV_42 + u1_B0(0,1,0)*rhou2_B0(0,1,0)*AVG_1_1_LEV_43;

       CS_03 = rho_B0(0,1,0)*AVG_1_1_LEV_00 + rhoE_B0(0,1,0)*AVG_1_1_LEV_04 + rhou0_B0(0,1,0)*AVG_1_1_LEV_01 +
            rhou1_B0(0,1,0)*AVG_1_1_LEV_02 + rhou2_B0(0,1,0)*AVG_1_1_LEV_03;

       CS_13 = rho_B0(0,1,0)*AVG_1_1_LEV_10 + rhoE_B0(0,1,0)*AVG_1_1_LEV_14 + rhou0_B0(0,1,0)*AVG_1_1_LEV_11 +
            rhou1_B0(0,1,0)*AVG_1_1_LEV_12 + rhou2_B0(0,1,0)*AVG_1_1_LEV_13;

      CS_23 = rho_B0(0,1,0)*AVG_1_1_LEV_20 + rhou0_B0(0,1,0)*AVG_1_1_LEV_21 + rhou1_B0(0,1,0)*AVG_1_1_LEV_22;

       CS_33 = rho_B0(0,1,0)*AVG_1_1_LEV_30 + rhoE_B0(0,1,0)*AVG_1_1_LEV_34 + rhou0_B0(0,1,0)*AVG_1_1_LEV_31 +
            rhou1_B0(0,1,0)*AVG_1_1_LEV_32 + rhou2_B0(0,1,0)*AVG_1_1_LEV_33;

       CS_43 = rho_B0(0,1,0)*AVG_1_1_LEV_40 + rhoE_B0(0,1,0)*AVG_1_1_LEV_44 + rhou0_B0(0,1,0)*AVG_1_1_LEV_41 +
            rhou1_B0(0,1,0)*AVG_1_1_LEV_42 + rhou2_B0(0,1,0)*AVG_1_1_LEV_43;

       CF_04 = p_B0(0,2,0)*AVG_1_1_LEV_02 + rhou1_B0(0,2,0)*AVG_1_1_LEV_00 + p_B0(0,2,0)*u1_B0(0,2,0)*AVG_1_1_LEV_04 +
            u1_B0(0,2,0)*rhoE_B0(0,2,0)*AVG_1_1_LEV_04 + u1_B0(0,2,0)*rhou0_B0(0,2,0)*AVG_1_1_LEV_01 +
            u1_B0(0,2,0)*rhou1_B0(0,2,0)*AVG_1_1_LEV_02 + u1_B0(0,2,0)*rhou2_B0(0,2,0)*AVG_1_1_LEV_03;

       CF_14 = p_B0(0,2,0)*AVG_1_1_LEV_12 + rhou1_B0(0,2,0)*AVG_1_1_LEV_10 + p_B0(0,2,0)*u1_B0(0,2,0)*AVG_1_1_LEV_14 +
            u1_B0(0,2,0)*rhoE_B0(0,2,0)*AVG_1_1_LEV_14 + u1_B0(0,2,0)*rhou0_B0(0,2,0)*AVG_1_1_LEV_11 +
            u1_B0(0,2,0)*rhou1_B0(0,2,0)*AVG_1_1_LEV_12 + u1_B0(0,2,0)*rhou2_B0(0,2,0)*AVG_1_1_LEV_13;

       CF_24 = p_B0(0,2,0)*AVG_1_1_LEV_22 + rhou1_B0(0,2,0)*AVG_1_1_LEV_20 + u1_B0(0,2,0)*rhou0_B0(0,2,0)*AVG_1_1_LEV_21
            + u1_B0(0,2,0)*rhou1_B0(0,2,0)*AVG_1_1_LEV_22;

       CF_34 = p_B0(0,2,0)*AVG_1_1_LEV_32 + rhou1_B0(0,2,0)*AVG_1_1_LEV_30 + p_B0(0,2,0)*u1_B0(0,2,0)*AVG_1_1_LEV_34 +
            u1_B0(0,2,0)*rhoE_B0(0,2,0)*AVG_1_1_LEV_34 + u1_B0(0,2,0)*rhou0_B0(0,2,0)*AVG_1_1_LEV_31 +
            u1_B0(0,2,0)*rhou1_B0(0,2,0)*AVG_1_1_LEV_32 + u1_B0(0,2,0)*rhou2_B0(0,2,0)*AVG_1_1_LEV_33;

       CF_44 = p_B0(0,2,0)*AVG_1_1_LEV_42 + rhou1_B0(0,2,0)*AVG_1_1_LEV_40 + p_B0(0,2,0)*u1_B0(0,2,0)*AVG_1_1_LEV_44 +
            u1_B0(0,2,0)*rhoE_B0(0,2,0)*AVG_1_1_LEV_44 + u1_B0(0,2,0)*rhou0_B0(0,2,0)*AVG_1_1_LEV_41 +
            u1_B0(0,2,0)*rhou1_B0(0,2,0)*AVG_1_1_LEV_42 + u1_B0(0,2,0)*rhou2_B0(0,2,0)*AVG_1_1_LEV_43;

       CS_04 = rho_B0(0,2,0)*AVG_1_1_LEV_00 + rhoE_B0(0,2,0)*AVG_1_1_LEV_04 + rhou0_B0(0,2,0)*AVG_1_1_LEV_01 +
            rhou1_B0(0,2,0)*AVG_1_1_LEV_02 + rhou2_B0(0,2,0)*AVG_1_1_LEV_03;

       CS_14 = rho_B0(0,2,0)*AVG_1_1_LEV_10 + rhoE_B0(0,2,0)*AVG_1_1_LEV_14 + rhou0_B0(0,2,0)*AVG_1_1_LEV_11 +
            rhou1_B0(0,2,0)*AVG_1_1_LEV_12 + rhou2_B0(0,2,0)*AVG_1_1_LEV_13;

      CS_24 = rho_B0(0,2,0)*AVG_1_1_LEV_20 + rhou0_B0(0,2,0)*AVG_1_1_LEV_21 + rhou1_B0(0,2,0)*AVG_1_1_LEV_22;

       CS_34 = rho_B0(0,2,0)*AVG_1_1_LEV_30 + rhoE_B0(0,2,0)*AVG_1_1_LEV_34 + rhou0_B0(0,2,0)*AVG_1_1_LEV_31 +
            rhou1_B0(0,2,0)*AVG_1_1_LEV_32 + rhou2_B0(0,2,0)*AVG_1_1_LEV_33;

       CS_44 = rho_B0(0,2,0)*AVG_1_1_LEV_40 + rhoE_B0(0,2,0)*AVG_1_1_LEV_44 + rhou0_B0(0,2,0)*AVG_1_1_LEV_41 +
            rhou1_B0(0,2,0)*AVG_1_1_LEV_42 + rhou2_B0(0,2,0)*AVG_1_1_LEV_43;

       CF_05 = p_B0(0,3,0)*AVG_1_1_LEV_02 + rhou1_B0(0,3,0)*AVG_1_1_LEV_00 + p_B0(0,3,0)*u1_B0(0,3,0)*AVG_1_1_LEV_04 +
            u1_B0(0,3,0)*rhoE_B0(0,3,0)*AVG_1_1_LEV_04 + u1_B0(0,3,0)*rhou0_B0(0,3,0)*AVG_1_1_LEV_01 +
            u1_B0(0,3,0)*rhou1_B0(0,3,0)*AVG_1_1_LEV_02 + u1_B0(0,3,0)*rhou2_B0(0,3,0)*AVG_1_1_LEV_03;

       CF_15 = p_B0(0,3,0)*AVG_1_1_LEV_12 + rhou1_B0(0,3,0)*AVG_1_1_LEV_10 + p_B0(0,3,0)*u1_B0(0,3,0)*AVG_1_1_LEV_14 +
            u1_B0(0,3,0)*rhoE_B0(0,3,0)*AVG_1_1_LEV_14 + u1_B0(0,3,0)*rhou0_B0(0,3,0)*AVG_1_1_LEV_11 +
            u1_B0(0,3,0)*rhou1_B0(0,3,0)*AVG_1_1_LEV_12 + u1_B0(0,3,0)*rhou2_B0(0,3,0)*AVG_1_1_LEV_13;

       CF_25 = p_B0(0,3,0)*AVG_1_1_LEV_22 + rhou1_B0(0,3,0)*AVG_1_1_LEV_20 + u1_B0(0,3,0)*rhou0_B0(0,3,0)*AVG_1_1_LEV_21
            + u1_B0(0,3,0)*rhou1_B0(0,3,0)*AVG_1_1_LEV_22;

       CF_35 = p_B0(0,3,0)*AVG_1_1_LEV_32 + rhou1_B0(0,3,0)*AVG_1_1_LEV_30 + p_B0(0,3,0)*u1_B0(0,3,0)*AVG_1_1_LEV_34 +
            u1_B0(0,3,0)*rhoE_B0(0,3,0)*AVG_1_1_LEV_34 + u1_B0(0,3,0)*rhou0_B0(0,3,0)*AVG_1_1_LEV_31 +
            u1_B0(0,3,0)*rhou1_B0(0,3,0)*AVG_1_1_LEV_32 + u1_B0(0,3,0)*rhou2_B0(0,3,0)*AVG_1_1_LEV_33;

       CF_45 = p_B0(0,3,0)*AVG_1_1_LEV_42 + rhou1_B0(0,3,0)*AVG_1_1_LEV_40 + p_B0(0,3,0)*u1_B0(0,3,0)*AVG_1_1_LEV_44 +
            u1_B0(0,3,0)*rhoE_B0(0,3,0)*AVG_1_1_LEV_44 + u1_B0(0,3,0)*rhou0_B0(0,3,0)*AVG_1_1_LEV_41 +
            u1_B0(0,3,0)*rhou1_B0(0,3,0)*AVG_1_1_LEV_42 + u1_B0(0,3,0)*rhou2_B0(0,3,0)*AVG_1_1_LEV_43;

       CS_05 = rho_B0(0,3,0)*AVG_1_1_LEV_00 + rhoE_B0(0,3,0)*AVG_1_1_LEV_04 + rhou0_B0(0,3,0)*AVG_1_1_LEV_01 +
            rhou1_B0(0,3,0)*AVG_1_1_LEV_02 + rhou2_B0(0,3,0)*AVG_1_1_LEV_03;

       CS_15 = rho_B0(0,3,0)*AVG_1_1_LEV_10 + rhoE_B0(0,3,0)*AVG_1_1_LEV_14 + rhou0_B0(0,3,0)*AVG_1_1_LEV_11 +
            rhou1_B0(0,3,0)*AVG_1_1_LEV_12 + rhou2_B0(0,3,0)*AVG_1_1_LEV_13;

      CS_25 = rho_B0(0,3,0)*AVG_1_1_LEV_20 + rhou0_B0(0,3,0)*AVG_1_1_LEV_21 + rhou1_B0(0,3,0)*AVG_1_1_LEV_22;

       CS_35 = rho_B0(0,3,0)*AVG_1_1_LEV_30 + rhoE_B0(0,3,0)*AVG_1_1_LEV_34 + rhou0_B0(0,3,0)*AVG_1_1_LEV_31 +
            rhou1_B0(0,3,0)*AVG_1_1_LEV_32 + rhou2_B0(0,3,0)*AVG_1_1_LEV_33;

       CS_45 = rho_B0(0,3,0)*AVG_1_1_LEV_40 + rhoE_B0(0,3,0)*AVG_1_1_LEV_44 + rhou0_B0(0,3,0)*AVG_1_1_LEV_41 +
            rhou1_B0(0,3,0)*AVG_1_1_LEV_42 + rhou2_B0(0,3,0)*AVG_1_1_LEV_43;

       max_lambda_00 = shock_filter_control*fmax(fabs(u0_B0(0,1,0)*D10_B0(0,1,0)*detJ_B0(0,1,0) +
            u1_B0(0,1,0)*D11_B0(0,1,0)*detJ_B0(0,1,0)), fabs(u0_B0(0,0,0)*D10_B0(0,0,0)*detJ_B0(0,0,0) +
            u1_B0(0,0,0)*D11_B0(0,0,0)*detJ_B0(0,0,0)));

      max_lambda_11 = max_lambda_00;

      max_lambda_22 = max_lambda_00;

       max_lambda_33 = shock_filter_control*fmax(fabs(sqrt((D10_B0(0,1,0)*D10_B0(0,1,0))*(detJ_B0(0,1,0)*detJ_B0(0,1,0))
            + (D11_B0(0,1,0)*D11_B0(0,1,0))*(detJ_B0(0,1,0)*detJ_B0(0,1,0)))*a_B0(0,1,0) +
            u0_B0(0,1,0)*D10_B0(0,1,0)*detJ_B0(0,1,0) + u1_B0(0,1,0)*D11_B0(0,1,0)*detJ_B0(0,1,0)),
            fabs(sqrt((D10_B0(0,0,0)*D10_B0(0,0,0))*(detJ_B0(0,0,0)*detJ_B0(0,0,0)) +
            (D11_B0(0,0,0)*D11_B0(0,0,0))*(detJ_B0(0,0,0)*detJ_B0(0,0,0)))*a_B0(0,0,0) +
            u0_B0(0,0,0)*D10_B0(0,0,0)*detJ_B0(0,0,0) + u1_B0(0,0,0)*D11_B0(0,0,0)*detJ_B0(0,0,0)));

       max_lambda_44 =
            shock_filter_control*fmax(fabs(-sqrt((D10_B0(0,0,0)*D10_B0(0,0,0))*(detJ_B0(0,0,0)*detJ_B0(0,0,0)) +
            (D11_B0(0,0,0)*D11_B0(0,0,0))*(detJ_B0(0,0,0)*detJ_B0(0,0,0)))*a_B0(0,0,0) +
            u0_B0(0,0,0)*D10_B0(0,0,0)*detJ_B0(0,0,0) + u1_B0(0,0,0)*D11_B0(0,0,0)*detJ_B0(0,0,0)),
            fabs(-sqrt((D10_B0(0,1,0)*D10_B0(0,1,0))*(detJ_B0(0,1,0)*detJ_B0(0,1,0)) +
            (D11_B0(0,1,0)*D11_B0(0,1,0))*(detJ_B0(0,1,0)*detJ_B0(0,1,0)))*a_B0(0,1,0) +
            u0_B0(0,1,0)*D10_B0(0,1,0)*detJ_B0(0,1,0) + u1_B0(0,1,0)*D11_B0(0,1,0)*detJ_B0(0,1,0)));

       beta_0 = ((1.0/3.0))*((CS_04*max_lambda_00 + CF_04)*(CS_04*max_lambda_00 + CF_04)) +
            ((1.0/2.0))*(-(19.0/6.0)*(CS_04*max_lambda_00 + CF_04) + ((25.0/6.0))*(CS_03*max_lambda_00 +
            CF_03))*(CS_03*max_lambda_00 + CF_03) + ((1.0/2.0))*(CS_02*max_lambda_00 +
            CF_02)*(-(31.0/6.0)*(CS_03*max_lambda_00 + CF_03) + ((5.0/3.0))*(CS_02*max_lambda_00 + CF_02) +
            ((11.0/6.0))*(CS_04*max_lambda_00 + CF_04));

       beta_1 = ((1.0/3.0))*((CS_03*max_lambda_00 + CF_03)*(CS_03*max_lambda_00 + CF_03)) +
            ((1.0/2.0))*(-(13.0/6.0)*(CS_03*max_lambda_00 + CF_03) + ((13.0/6.0))*(CS_02*max_lambda_00 +
            CF_02))*(CS_02*max_lambda_00 + CF_02) + ((1.0/2.0))*(CS_01*max_lambda_00 +
            CF_01)*(-(13.0/6.0)*(CS_02*max_lambda_00 + CF_02) + ((2.0/3.0))*(CS_01*max_lambda_00 + CF_01) +
            ((5.0/6.0))*(CS_03*max_lambda_00 + CF_03));

       beta_2 = ((5.0/6.0))*((CS_02*max_lambda_00 + CF_02)*(CS_02*max_lambda_00 + CF_02)) +
            ((1.0/2.0))*(((2.0/3.0))*(CS_00*max_lambda_00 + CF_00) + ((11.0/6.0))*(CS_02*max_lambda_00 +
            CF_02))*(CS_00*max_lambda_00 + CF_00) + ((1.0/2.0))*(CS_01*max_lambda_00 +
            CF_01)*(-(31.0/6.0)*(CS_02*max_lambda_00 + CF_02) - (19.0/6.0)*(CS_00*max_lambda_00 + CF_00) +
            ((25.0/6.0))*(CS_01*max_lambda_00 + CF_01));

       alpha_0 = 0.3 + ((3.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_0)*(1.0e-40 +
            beta_0));

       alpha_1 = 0.6 + ((3.0/5.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_1)*(1.0e-40 +
            beta_1));

       alpha_2 = 0.1 + ((1.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_2)*(1.0e-40 +
            beta_2));

      inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2));

      omega_0 = alpha_0*inv_alpha_sum;

      omega_1 = alpha_1*inv_alpha_sum;

      omega_2 = alpha_2*inv_alpha_sum;

       rj0 = (pow(fabs(-1.0 + 10*omega_2), sensor_theta) + pow(fabs(-1.0 + ((5.0/3.0))*omega_1), sensor_theta) +
            pow(fabs(-1.0 + ((10.0/3.0))*omega_0), sensor_theta))/(2 + pow(9.0, sensor_theta));

       Recon_0 = (-(7.0/12.0)*(CS_01*max_lambda_00 + CF_01) + ((1.0/6.0))*(CS_00*max_lambda_00 + CF_00) +
            ((11.0/12.0))*(CS_02*max_lambda_00 + CF_02))*omega_2 + (-(1.0/12.0)*(CS_01*max_lambda_00 + CF_01) +
            ((1.0/6.0))*(CS_03*max_lambda_00 + CF_03) + ((5.0/12.0))*(CS_02*max_lambda_00 + CF_02))*omega_1 +
            (-(1.0/12.0)*(CS_04*max_lambda_00 + CF_04) + ((1.0/6.0))*(CS_02*max_lambda_00 + CF_02) +
            ((5.0/12.0))*(CS_03*max_lambda_00 + CF_03))*omega_0 + Recon_0;

       beta_0 = ((1.0/3.0))*((-CS_05*max_lambda_00 + CF_05)*(-CS_05*max_lambda_00 + CF_05)) +
            ((1.0/2.0))*(-(19.0/6.0)*(-CS_05*max_lambda_00 + CF_05) + ((25.0/6.0))*(-CS_04*max_lambda_00 +
            CF_04))*(-CS_04*max_lambda_00 + CF_04) + ((1.0/2.0))*(-CS_03*max_lambda_00 +
            CF_03)*(-(31.0/6.0)*(-CS_04*max_lambda_00 + CF_04) + ((5.0/3.0))*(-CS_03*max_lambda_00 + CF_03) +
            ((11.0/6.0))*(-CS_05*max_lambda_00 + CF_05));

       beta_1 = ((1.0/3.0))*((-CS_04*max_lambda_00 + CF_04)*(-CS_04*max_lambda_00 + CF_04)) +
            ((1.0/2.0))*(-(13.0/6.0)*(-CS_04*max_lambda_00 + CF_04) + ((13.0/6.0))*(-CS_03*max_lambda_00 +
            CF_03))*(-CS_03*max_lambda_00 + CF_03) + ((1.0/2.0))*(-CS_02*max_lambda_00 +
            CF_02)*(-(13.0/6.0)*(-CS_03*max_lambda_00 + CF_03) + ((2.0/3.0))*(-CS_02*max_lambda_00 + CF_02) +
            ((5.0/6.0))*(-CS_04*max_lambda_00 + CF_04));

       beta_2 = ((5.0/6.0))*((-CS_03*max_lambda_00 + CF_03)*(-CS_03*max_lambda_00 + CF_03)) +
            ((1.0/2.0))*(-(31.0/6.0)*(-CS_03*max_lambda_00 + CF_03) + ((25.0/6.0))*(-CS_02*max_lambda_00 +
            CF_02))*(-CS_02*max_lambda_00 + CF_02) + ((1.0/2.0))*(-CS_01*max_lambda_00 +
            CF_01)*(-(19.0/6.0)*(-CS_02*max_lambda_00 + CF_02) + ((2.0/3.0))*(-CS_01*max_lambda_00 + CF_01) +
            ((11.0/6.0))*(-CS_03*max_lambda_00 + CF_03));

       alpha_0 = 0.1 + ((1.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_0)*(1.0e-40 +
            beta_0));

       alpha_1 = 0.6 + ((3.0/5.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_1)*(1.0e-40 +
            beta_1));

       alpha_2 = 0.3 + ((3.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_2)*(1.0e-40 +
            beta_2));

      inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2));

      omega_0 = alpha_0*inv_alpha_sum;

      omega_1 = alpha_1*inv_alpha_sum;

      omega_2 = alpha_2*inv_alpha_sum;

       rj0 = fmax(rj0, (pow(fabs(-1.0 + 10*omega_0), sensor_theta) + pow(fabs(-1.0 + ((5.0/3.0))*omega_1), sensor_theta)
            + pow(fabs(-1.0 + ((10.0/3.0))*omega_2), sensor_theta))/(2 + pow(9.0, sensor_theta)));

       Recon_0 = (-(7.0/12.0)*(-CS_04*max_lambda_00 + CF_04) + ((1.0/6.0))*(-CS_05*max_lambda_00 + CF_05) +
            ((11.0/12.0))*(-CS_03*max_lambda_00 + CF_03))*omega_0 + (-(1.0/12.0)*(-CS_01*max_lambda_00 + CF_01) +
            ((1.0/6.0))*(-CS_03*max_lambda_00 + CF_03) + ((5.0/12.0))*(-CS_02*max_lambda_00 + CF_02))*omega_2 +
            (-(1.0/12.0)*(-CS_04*max_lambda_00 + CF_04) + ((1.0/6.0))*(-CS_02*max_lambda_00 + CF_02) +
            ((5.0/12.0))*(-CS_03*max_lambda_00 + CF_03))*omega_1 + Recon_0;

       beta_0 = ((1.0/3.0))*((CS_14*max_lambda_11 + CF_14)*(CS_14*max_lambda_11 + CF_14)) +
            ((1.0/2.0))*(-(19.0/6.0)*(CS_14*max_lambda_11 + CF_14) + ((25.0/6.0))*(CS_13*max_lambda_11 +
            CF_13))*(CS_13*max_lambda_11 + CF_13) + ((1.0/2.0))*(CS_12*max_lambda_11 +
            CF_12)*(-(31.0/6.0)*(CS_13*max_lambda_11 + CF_13) + ((5.0/3.0))*(CS_12*max_lambda_11 + CF_12) +
            ((11.0/6.0))*(CS_14*max_lambda_11 + CF_14));

       beta_1 = ((1.0/3.0))*((CS_13*max_lambda_11 + CF_13)*(CS_13*max_lambda_11 + CF_13)) +
            ((1.0/2.0))*(-(13.0/6.0)*(CS_13*max_lambda_11 + CF_13) + ((13.0/6.0))*(CS_12*max_lambda_11 +
            CF_12))*(CS_12*max_lambda_11 + CF_12) + ((1.0/2.0))*(CS_11*max_lambda_11 +
            CF_11)*(-(13.0/6.0)*(CS_12*max_lambda_11 + CF_12) + ((2.0/3.0))*(CS_11*max_lambda_11 + CF_11) +
            ((5.0/6.0))*(CS_13*max_lambda_11 + CF_13));

       beta_2 = ((5.0/6.0))*((CS_12*max_lambda_11 + CF_12)*(CS_12*max_lambda_11 + CF_12)) +
            ((1.0/2.0))*(((2.0/3.0))*(CS_10*max_lambda_11 + CF_10) + ((11.0/6.0))*(CS_12*max_lambda_11 +
            CF_12))*(CS_10*max_lambda_11 + CF_10) + ((1.0/2.0))*(CS_11*max_lambda_11 +
            CF_11)*(-(31.0/6.0)*(CS_12*max_lambda_11 + CF_12) - (19.0/6.0)*(CS_10*max_lambda_11 + CF_10) +
            ((25.0/6.0))*(CS_11*max_lambda_11 + CF_11));

       alpha_0 = 0.3 + ((3.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_0)*(1.0e-40 +
            beta_0));

       alpha_1 = 0.6 + ((3.0/5.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_1)*(1.0e-40 +
            beta_1));

       alpha_2 = 0.1 + ((1.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_2)*(1.0e-40 +
            beta_2));

      inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2));

      omega_0 = alpha_0*inv_alpha_sum;

      omega_1 = alpha_1*inv_alpha_sum;

      omega_2 = alpha_2*inv_alpha_sum;

       rj1 = (pow(fabs(-1.0 + 10*omega_2), sensor_theta) + pow(fabs(-1.0 + ((5.0/3.0))*omega_1), sensor_theta) +
            pow(fabs(-1.0 + ((10.0/3.0))*omega_0), sensor_theta))/(2 + pow(9.0, sensor_theta));

       Recon_1 = (-(7.0/12.0)*(CS_11*max_lambda_11 + CF_11) + ((1.0/6.0))*(CS_10*max_lambda_11 + CF_10) +
            ((11.0/12.0))*(CS_12*max_lambda_11 + CF_12))*omega_2 + (-(1.0/12.0)*(CS_11*max_lambda_11 + CF_11) +
            ((1.0/6.0))*(CS_13*max_lambda_11 + CF_13) + ((5.0/12.0))*(CS_12*max_lambda_11 + CF_12))*omega_1 +
            (-(1.0/12.0)*(CS_14*max_lambda_11 + CF_14) + ((1.0/6.0))*(CS_12*max_lambda_11 + CF_12) +
            ((5.0/12.0))*(CS_13*max_lambda_11 + CF_13))*omega_0 + Recon_1;

       beta_0 = ((1.0/3.0))*((-CS_15*max_lambda_11 + CF_15)*(-CS_15*max_lambda_11 + CF_15)) +
            ((1.0/2.0))*(-(19.0/6.0)*(-CS_15*max_lambda_11 + CF_15) + ((25.0/6.0))*(-CS_14*max_lambda_11 +
            CF_14))*(-CS_14*max_lambda_11 + CF_14) + ((1.0/2.0))*(-CS_13*max_lambda_11 +
            CF_13)*(-(31.0/6.0)*(-CS_14*max_lambda_11 + CF_14) + ((5.0/3.0))*(-CS_13*max_lambda_11 + CF_13) +
            ((11.0/6.0))*(-CS_15*max_lambda_11 + CF_15));

       beta_1 = ((1.0/3.0))*((-CS_14*max_lambda_11 + CF_14)*(-CS_14*max_lambda_11 + CF_14)) +
            ((1.0/2.0))*(-(13.0/6.0)*(-CS_14*max_lambda_11 + CF_14) + ((13.0/6.0))*(-CS_13*max_lambda_11 +
            CF_13))*(-CS_13*max_lambda_11 + CF_13) + ((1.0/2.0))*(-CS_12*max_lambda_11 +
            CF_12)*(-(13.0/6.0)*(-CS_13*max_lambda_11 + CF_13) + ((2.0/3.0))*(-CS_12*max_lambda_11 + CF_12) +
            ((5.0/6.0))*(-CS_14*max_lambda_11 + CF_14));

       beta_2 = ((5.0/6.0))*((-CS_13*max_lambda_11 + CF_13)*(-CS_13*max_lambda_11 + CF_13)) +
            ((1.0/2.0))*(-(31.0/6.0)*(-CS_13*max_lambda_11 + CF_13) + ((25.0/6.0))*(-CS_12*max_lambda_11 +
            CF_12))*(-CS_12*max_lambda_11 + CF_12) + ((1.0/2.0))*(-CS_11*max_lambda_11 +
            CF_11)*(-(19.0/6.0)*(-CS_12*max_lambda_11 + CF_12) + ((2.0/3.0))*(-CS_11*max_lambda_11 + CF_11) +
            ((11.0/6.0))*(-CS_13*max_lambda_11 + CF_13));

       alpha_0 = 0.1 + ((1.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_0)*(1.0e-40 +
            beta_0));

       alpha_1 = 0.6 + ((3.0/5.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_1)*(1.0e-40 +
            beta_1));

       alpha_2 = 0.3 + ((3.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_2)*(1.0e-40 +
            beta_2));

      inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2));

      omega_0 = alpha_0*inv_alpha_sum;

      omega_1 = alpha_1*inv_alpha_sum;

      omega_2 = alpha_2*inv_alpha_sum;

       rj1 = fmax(rj1, (pow(fabs(-1.0 + 10*omega_0), sensor_theta) + pow(fabs(-1.0 + ((5.0/3.0))*omega_1), sensor_theta)
            + pow(fabs(-1.0 + ((10.0/3.0))*omega_2), sensor_theta))/(2 + pow(9.0, sensor_theta)));

       Recon_1 = (-(7.0/12.0)*(-CS_14*max_lambda_11 + CF_14) + ((1.0/6.0))*(-CS_15*max_lambda_11 + CF_15) +
            ((11.0/12.0))*(-CS_13*max_lambda_11 + CF_13))*omega_0 + (-(1.0/12.0)*(-CS_11*max_lambda_11 + CF_11) +
            ((1.0/6.0))*(-CS_13*max_lambda_11 + CF_13) + ((5.0/12.0))*(-CS_12*max_lambda_11 + CF_12))*omega_2 +
            (-(1.0/12.0)*(-CS_14*max_lambda_11 + CF_14) + ((1.0/6.0))*(-CS_12*max_lambda_11 + CF_12) +
            ((5.0/12.0))*(-CS_13*max_lambda_11 + CF_13))*omega_1 + Recon_1;

       beta_0 = ((1.0/3.0))*((CS_24*max_lambda_22 + CF_24)*(CS_24*max_lambda_22 + CF_24)) +
            ((1.0/2.0))*(-(19.0/6.0)*(CS_24*max_lambda_22 + CF_24) + ((25.0/6.0))*(CS_23*max_lambda_22 +
            CF_23))*(CS_23*max_lambda_22 + CF_23) + ((1.0/2.0))*(CS_22*max_lambda_22 +
            CF_22)*(-(31.0/6.0)*(CS_23*max_lambda_22 + CF_23) + ((5.0/3.0))*(CS_22*max_lambda_22 + CF_22) +
            ((11.0/6.0))*(CS_24*max_lambda_22 + CF_24));

       beta_1 = ((1.0/3.0))*((CS_23*max_lambda_22 + CF_23)*(CS_23*max_lambda_22 + CF_23)) +
            ((1.0/2.0))*(-(13.0/6.0)*(CS_23*max_lambda_22 + CF_23) + ((13.0/6.0))*(CS_22*max_lambda_22 +
            CF_22))*(CS_22*max_lambda_22 + CF_22) + ((1.0/2.0))*(CS_21*max_lambda_22 +
            CF_21)*(-(13.0/6.0)*(CS_22*max_lambda_22 + CF_22) + ((2.0/3.0))*(CS_21*max_lambda_22 + CF_21) +
            ((5.0/6.0))*(CS_23*max_lambda_22 + CF_23));

       beta_2 = ((5.0/6.0))*((CS_22*max_lambda_22 + CF_22)*(CS_22*max_lambda_22 + CF_22)) +
            ((1.0/2.0))*(((2.0/3.0))*(CS_20*max_lambda_22 + CF_20) + ((11.0/6.0))*(CS_22*max_lambda_22 +
            CF_22))*(CS_20*max_lambda_22 + CF_20) + ((1.0/2.0))*(CS_21*max_lambda_22 +
            CF_21)*(-(31.0/6.0)*(CS_22*max_lambda_22 + CF_22) - (19.0/6.0)*(CS_20*max_lambda_22 + CF_20) +
            ((25.0/6.0))*(CS_21*max_lambda_22 + CF_21));

       alpha_0 = 0.3 + ((3.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_0)*(1.0e-40 +
            beta_0));

       alpha_1 = 0.6 + ((3.0/5.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_1)*(1.0e-40 +
            beta_1));

       alpha_2 = 0.1 + ((1.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_2)*(1.0e-40 +
            beta_2));

      inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2));

      omega_0 = alpha_0*inv_alpha_sum;

      omega_1 = alpha_1*inv_alpha_sum;

      omega_2 = alpha_2*inv_alpha_sum;

       rj2 = (pow(fabs(-1.0 + 10*omega_2), sensor_theta) + pow(fabs(-1.0 + ((5.0/3.0))*omega_1), sensor_theta) +
            pow(fabs(-1.0 + ((10.0/3.0))*omega_0), sensor_theta))/(2 + pow(9.0, sensor_theta));

       Recon_2 = (-(7.0/12.0)*(CS_21*max_lambda_22 + CF_21) + ((1.0/6.0))*(CS_20*max_lambda_22 + CF_20) +
            ((11.0/12.0))*(CS_22*max_lambda_22 + CF_22))*omega_2 + (-(1.0/12.0)*(CS_21*max_lambda_22 + CF_21) +
            ((1.0/6.0))*(CS_23*max_lambda_22 + CF_23) + ((5.0/12.0))*(CS_22*max_lambda_22 + CF_22))*omega_1 +
            (-(1.0/12.0)*(CS_24*max_lambda_22 + CF_24) + ((1.0/6.0))*(CS_22*max_lambda_22 + CF_22) +
            ((5.0/12.0))*(CS_23*max_lambda_22 + CF_23))*omega_0 + Recon_2;

       beta_0 = ((1.0/3.0))*((-CS_25*max_lambda_22 + CF_25)*(-CS_25*max_lambda_22 + CF_25)) +
            ((1.0/2.0))*(-(19.0/6.0)*(-CS_25*max_lambda_22 + CF_25) + ((25.0/6.0))*(-CS_24*max_lambda_22 +
            CF_24))*(-CS_24*max_lambda_22 + CF_24) + ((1.0/2.0))*(-CS_23*max_lambda_22 +
            CF_23)*(-(31.0/6.0)*(-CS_24*max_lambda_22 + CF_24) + ((5.0/3.0))*(-CS_23*max_lambda_22 + CF_23) +
            ((11.0/6.0))*(-CS_25*max_lambda_22 + CF_25));

       beta_1 = ((1.0/3.0))*((-CS_24*max_lambda_22 + CF_24)*(-CS_24*max_lambda_22 + CF_24)) +
            ((1.0/2.0))*(-(13.0/6.0)*(-CS_24*max_lambda_22 + CF_24) + ((13.0/6.0))*(-CS_23*max_lambda_22 +
            CF_23))*(-CS_23*max_lambda_22 + CF_23) + ((1.0/2.0))*(-CS_22*max_lambda_22 +
            CF_22)*(-(13.0/6.0)*(-CS_23*max_lambda_22 + CF_23) + ((2.0/3.0))*(-CS_22*max_lambda_22 + CF_22) +
            ((5.0/6.0))*(-CS_24*max_lambda_22 + CF_24));

       beta_2 = ((5.0/6.0))*((-CS_23*max_lambda_22 + CF_23)*(-CS_23*max_lambda_22 + CF_23)) +
            ((1.0/2.0))*(-(31.0/6.0)*(-CS_23*max_lambda_22 + CF_23) + ((25.0/6.0))*(-CS_22*max_lambda_22 +
            CF_22))*(-CS_22*max_lambda_22 + CF_22) + ((1.0/2.0))*(-CS_21*max_lambda_22 +
            CF_21)*(-(19.0/6.0)*(-CS_22*max_lambda_22 + CF_22) + ((2.0/3.0))*(-CS_21*max_lambda_22 + CF_21) +
            ((11.0/6.0))*(-CS_23*max_lambda_22 + CF_23));

       alpha_0 = 0.1 + ((1.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_0)*(1.0e-40 +
            beta_0));

       alpha_1 = 0.6 + ((3.0/5.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_1)*(1.0e-40 +
            beta_1));

       alpha_2 = 0.3 + ((3.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_2)*(1.0e-40 +
            beta_2));

      inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2));

      omega_0 = alpha_0*inv_alpha_sum;

      omega_1 = alpha_1*inv_alpha_sum;

      omega_2 = alpha_2*inv_alpha_sum;

       rj2 = fmax(rj2, (pow(fabs(-1.0 + 10*omega_0), sensor_theta) + pow(fabs(-1.0 + ((5.0/3.0))*omega_1), sensor_theta)
            + pow(fabs(-1.0 + ((10.0/3.0))*omega_2), sensor_theta))/(2 + pow(9.0, sensor_theta)));

       Recon_2 = (-(7.0/12.0)*(-CS_24*max_lambda_22 + CF_24) + ((1.0/6.0))*(-CS_25*max_lambda_22 + CF_25) +
            ((11.0/12.0))*(-CS_23*max_lambda_22 + CF_23))*omega_0 + (-(1.0/12.0)*(-CS_21*max_lambda_22 + CF_21) +
            ((1.0/6.0))*(-CS_23*max_lambda_22 + CF_23) + ((5.0/12.0))*(-CS_22*max_lambda_22 + CF_22))*omega_2 +
            (-(1.0/12.0)*(-CS_24*max_lambda_22 + CF_24) + ((1.0/6.0))*(-CS_22*max_lambda_22 + CF_22) +
            ((5.0/12.0))*(-CS_23*max_lambda_22 + CF_23))*omega_1 + Recon_2;

       beta_0 = ((1.0/3.0))*((CS_34*max_lambda_33 + CF_34)*(CS_34*max_lambda_33 + CF_34)) +
            ((1.0/2.0))*(-(19.0/6.0)*(CS_34*max_lambda_33 + CF_34) + ((25.0/6.0))*(CS_33*max_lambda_33 +
            CF_33))*(CS_33*max_lambda_33 + CF_33) + ((1.0/2.0))*(CS_32*max_lambda_33 +
            CF_32)*(-(31.0/6.0)*(CS_33*max_lambda_33 + CF_33) + ((5.0/3.0))*(CS_32*max_lambda_33 + CF_32) +
            ((11.0/6.0))*(CS_34*max_lambda_33 + CF_34));

       beta_1 = ((1.0/3.0))*((CS_33*max_lambda_33 + CF_33)*(CS_33*max_lambda_33 + CF_33)) +
            ((1.0/2.0))*(-(13.0/6.0)*(CS_33*max_lambda_33 + CF_33) + ((13.0/6.0))*(CS_32*max_lambda_33 +
            CF_32))*(CS_32*max_lambda_33 + CF_32) + ((1.0/2.0))*(CS_31*max_lambda_33 +
            CF_31)*(-(13.0/6.0)*(CS_32*max_lambda_33 + CF_32) + ((2.0/3.0))*(CS_31*max_lambda_33 + CF_31) +
            ((5.0/6.0))*(CS_33*max_lambda_33 + CF_33));

       beta_2 = ((5.0/6.0))*((CS_32*max_lambda_33 + CF_32)*(CS_32*max_lambda_33 + CF_32)) +
            ((1.0/2.0))*(((2.0/3.0))*(CS_30*max_lambda_33 + CF_30) + ((11.0/6.0))*(CS_32*max_lambda_33 +
            CF_32))*(CS_30*max_lambda_33 + CF_30) + ((1.0/2.0))*(CS_31*max_lambda_33 +
            CF_31)*(-(31.0/6.0)*(CS_32*max_lambda_33 + CF_32) - (19.0/6.0)*(CS_30*max_lambda_33 + CF_30) +
            ((25.0/6.0))*(CS_31*max_lambda_33 + CF_31));

       alpha_0 = 0.3 + ((3.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_0)*(1.0e-40 +
            beta_0));

       alpha_1 = 0.6 + ((3.0/5.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_1)*(1.0e-40 +
            beta_1));

       alpha_2 = 0.1 + ((1.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_2)*(1.0e-40 +
            beta_2));

      inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2));

      omega_0 = alpha_0*inv_alpha_sum;

      omega_1 = alpha_1*inv_alpha_sum;

      omega_2 = alpha_2*inv_alpha_sum;

       rj3 = (pow(fabs(-1.0 + 10*omega_2), sensor_theta) + pow(fabs(-1.0 + ((5.0/3.0))*omega_1), sensor_theta) +
            pow(fabs(-1.0 + ((10.0/3.0))*omega_0), sensor_theta))/(2 + pow(9.0, sensor_theta));

       Recon_3 = (-(7.0/12.0)*(CS_31*max_lambda_33 + CF_31) + ((1.0/6.0))*(CS_30*max_lambda_33 + CF_30) +
            ((11.0/12.0))*(CS_32*max_lambda_33 + CF_32))*omega_2 + (-(1.0/12.0)*(CS_31*max_lambda_33 + CF_31) +
            ((1.0/6.0))*(CS_33*max_lambda_33 + CF_33) + ((5.0/12.0))*(CS_32*max_lambda_33 + CF_32))*omega_1 +
            (-(1.0/12.0)*(CS_34*max_lambda_33 + CF_34) + ((1.0/6.0))*(CS_32*max_lambda_33 + CF_32) +
            ((5.0/12.0))*(CS_33*max_lambda_33 + CF_33))*omega_0 + Recon_3;

       beta_0 = ((1.0/3.0))*((-CS_35*max_lambda_33 + CF_35)*(-CS_35*max_lambda_33 + CF_35)) +
            ((1.0/2.0))*(-(19.0/6.0)*(-CS_35*max_lambda_33 + CF_35) + ((25.0/6.0))*(-CS_34*max_lambda_33 +
            CF_34))*(-CS_34*max_lambda_33 + CF_34) + ((1.0/2.0))*(-CS_33*max_lambda_33 +
            CF_33)*(-(31.0/6.0)*(-CS_34*max_lambda_33 + CF_34) + ((5.0/3.0))*(-CS_33*max_lambda_33 + CF_33) +
            ((11.0/6.0))*(-CS_35*max_lambda_33 + CF_35));

       beta_1 = ((1.0/3.0))*((-CS_34*max_lambda_33 + CF_34)*(-CS_34*max_lambda_33 + CF_34)) +
            ((1.0/2.0))*(-(13.0/6.0)*(-CS_34*max_lambda_33 + CF_34) + ((13.0/6.0))*(-CS_33*max_lambda_33 +
            CF_33))*(-CS_33*max_lambda_33 + CF_33) + ((1.0/2.0))*(-CS_32*max_lambda_33 +
            CF_32)*(-(13.0/6.0)*(-CS_33*max_lambda_33 + CF_33) + ((2.0/3.0))*(-CS_32*max_lambda_33 + CF_32) +
            ((5.0/6.0))*(-CS_34*max_lambda_33 + CF_34));

       beta_2 = ((5.0/6.0))*((-CS_33*max_lambda_33 + CF_33)*(-CS_33*max_lambda_33 + CF_33)) +
            ((1.0/2.0))*(-(31.0/6.0)*(-CS_33*max_lambda_33 + CF_33) + ((25.0/6.0))*(-CS_32*max_lambda_33 +
            CF_32))*(-CS_32*max_lambda_33 + CF_32) + ((1.0/2.0))*(-CS_31*max_lambda_33 +
            CF_31)*(-(19.0/6.0)*(-CS_32*max_lambda_33 + CF_32) + ((2.0/3.0))*(-CS_31*max_lambda_33 + CF_31) +
            ((11.0/6.0))*(-CS_33*max_lambda_33 + CF_33));

       alpha_0 = 0.1 + ((1.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_0)*(1.0e-40 +
            beta_0));

       alpha_1 = 0.6 + ((3.0/5.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_1)*(1.0e-40 +
            beta_1));

       alpha_2 = 0.3 + ((3.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_2)*(1.0e-40 +
            beta_2));

      inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2));

      omega_0 = alpha_0*inv_alpha_sum;

      omega_1 = alpha_1*inv_alpha_sum;

      omega_2 = alpha_2*inv_alpha_sum;

       rj3 = fmax(rj3, (pow(fabs(-1.0 + 10*omega_0), sensor_theta) + pow(fabs(-1.0 + ((5.0/3.0))*omega_1), sensor_theta)
            + pow(fabs(-1.0 + ((10.0/3.0))*omega_2), sensor_theta))/(2 + pow(9.0, sensor_theta)));

       Recon_3 = (-(7.0/12.0)*(-CS_34*max_lambda_33 + CF_34) + ((1.0/6.0))*(-CS_35*max_lambda_33 + CF_35) +
            ((11.0/12.0))*(-CS_33*max_lambda_33 + CF_33))*omega_0 + (-(1.0/12.0)*(-CS_31*max_lambda_33 + CF_31) +
            ((1.0/6.0))*(-CS_33*max_lambda_33 + CF_33) + ((5.0/12.0))*(-CS_32*max_lambda_33 + CF_32))*omega_2 +
            (-(1.0/12.0)*(-CS_34*max_lambda_33 + CF_34) + ((1.0/6.0))*(-CS_32*max_lambda_33 + CF_32) +
            ((5.0/12.0))*(-CS_33*max_lambda_33 + CF_33))*omega_1 + Recon_3;

       beta_0 = ((1.0/3.0))*((CS_44*max_lambda_44 + CF_44)*(CS_44*max_lambda_44 + CF_44)) +
            ((1.0/2.0))*(-(19.0/6.0)*(CS_44*max_lambda_44 + CF_44) + ((25.0/6.0))*(CS_43*max_lambda_44 +
            CF_43))*(CS_43*max_lambda_44 + CF_43) + ((1.0/2.0))*(CS_42*max_lambda_44 +
            CF_42)*(-(31.0/6.0)*(CS_43*max_lambda_44 + CF_43) + ((5.0/3.0))*(CS_42*max_lambda_44 + CF_42) +
            ((11.0/6.0))*(CS_44*max_lambda_44 + CF_44));

       beta_1 = ((1.0/3.0))*((CS_43*max_lambda_44 + CF_43)*(CS_43*max_lambda_44 + CF_43)) +
            ((1.0/2.0))*(-(13.0/6.0)*(CS_43*max_lambda_44 + CF_43) + ((13.0/6.0))*(CS_42*max_lambda_44 +
            CF_42))*(CS_42*max_lambda_44 + CF_42) + ((1.0/2.0))*(CS_41*max_lambda_44 +
            CF_41)*(-(13.0/6.0)*(CS_42*max_lambda_44 + CF_42) + ((2.0/3.0))*(CS_41*max_lambda_44 + CF_41) +
            ((5.0/6.0))*(CS_43*max_lambda_44 + CF_43));

       beta_2 = ((5.0/6.0))*((CS_42*max_lambda_44 + CF_42)*(CS_42*max_lambda_44 + CF_42)) +
            ((1.0/2.0))*(((2.0/3.0))*(CS_40*max_lambda_44 + CF_40) + ((11.0/6.0))*(CS_42*max_lambda_44 +
            CF_42))*(CS_40*max_lambda_44 + CF_40) + ((1.0/2.0))*(CS_41*max_lambda_44 +
            CF_41)*(-(31.0/6.0)*(CS_42*max_lambda_44 + CF_42) - (19.0/6.0)*(CS_40*max_lambda_44 + CF_40) +
            ((25.0/6.0))*(CS_41*max_lambda_44 + CF_41));

       alpha_0 = 0.3 + ((3.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_0)*(1.0e-40 +
            beta_0));

       alpha_1 = 0.6 + ((3.0/5.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_1)*(1.0e-40 +
            beta_1));

       alpha_2 = 0.1 + ((1.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_2)*(1.0e-40 +
            beta_2));

      inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2));

      omega_0 = alpha_0*inv_alpha_sum;

      omega_1 = alpha_1*inv_alpha_sum;

      omega_2 = alpha_2*inv_alpha_sum;

       rj4 = (pow(fabs(-1.0 + 10*omega_2), sensor_theta) + pow(fabs(-1.0 + ((5.0/3.0))*omega_1), sensor_theta) +
            pow(fabs(-1.0 + ((10.0/3.0))*omega_0), sensor_theta))/(2 + pow(9.0, sensor_theta));

       Recon_4 = (-(7.0/12.0)*(CS_41*max_lambda_44 + CF_41) + ((1.0/6.0))*(CS_40*max_lambda_44 + CF_40) +
            ((11.0/12.0))*(CS_42*max_lambda_44 + CF_42))*omega_2 + (-(1.0/12.0)*(CS_41*max_lambda_44 + CF_41) +
            ((1.0/6.0))*(CS_43*max_lambda_44 + CF_43) + ((5.0/12.0))*(CS_42*max_lambda_44 + CF_42))*omega_1 +
            (-(1.0/12.0)*(CS_44*max_lambda_44 + CF_44) + ((1.0/6.0))*(CS_42*max_lambda_44 + CF_42) +
            ((5.0/12.0))*(CS_43*max_lambda_44 + CF_43))*omega_0 + Recon_4;

       beta_0 = ((1.0/3.0))*((-CS_45*max_lambda_44 + CF_45)*(-CS_45*max_lambda_44 + CF_45)) +
            ((1.0/2.0))*(-(19.0/6.0)*(-CS_45*max_lambda_44 + CF_45) + ((25.0/6.0))*(-CS_44*max_lambda_44 +
            CF_44))*(-CS_44*max_lambda_44 + CF_44) + ((1.0/2.0))*(-CS_43*max_lambda_44 +
            CF_43)*(-(31.0/6.0)*(-CS_44*max_lambda_44 + CF_44) + ((5.0/3.0))*(-CS_43*max_lambda_44 + CF_43) +
            ((11.0/6.0))*(-CS_45*max_lambda_44 + CF_45));

       beta_1 = ((1.0/3.0))*((-CS_44*max_lambda_44 + CF_44)*(-CS_44*max_lambda_44 + CF_44)) +
            ((1.0/2.0))*(-(13.0/6.0)*(-CS_44*max_lambda_44 + CF_44) + ((13.0/6.0))*(-CS_43*max_lambda_44 +
            CF_43))*(-CS_43*max_lambda_44 + CF_43) + ((1.0/2.0))*(-CS_42*max_lambda_44 +
            CF_42)*(-(13.0/6.0)*(-CS_43*max_lambda_44 + CF_43) + ((2.0/3.0))*(-CS_42*max_lambda_44 + CF_42) +
            ((5.0/6.0))*(-CS_44*max_lambda_44 + CF_44));

       beta_2 = ((5.0/6.0))*((-CS_43*max_lambda_44 + CF_43)*(-CS_43*max_lambda_44 + CF_43)) +
            ((1.0/2.0))*(-(31.0/6.0)*(-CS_43*max_lambda_44 + CF_43) + ((25.0/6.0))*(-CS_42*max_lambda_44 +
            CF_42))*(-CS_42*max_lambda_44 + CF_42) + ((1.0/2.0))*(-CS_41*max_lambda_44 +
            CF_41)*(-(19.0/6.0)*(-CS_42*max_lambda_44 + CF_42) + ((2.0/3.0))*(-CS_41*max_lambda_44 + CF_41) +
            ((11.0/6.0))*(-CS_43*max_lambda_44 + CF_43));

       alpha_0 = 0.1 + ((1.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_0)*(1.0e-40 +
            beta_0));

       alpha_1 = 0.6 + ((3.0/5.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_1)*(1.0e-40 +
            beta_1));

       alpha_2 = 0.3 + ((3.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_2)*(1.0e-40 +
            beta_2));

      inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2));

      omega_0 = alpha_0*inv_alpha_sum;

      omega_1 = alpha_1*inv_alpha_sum;

      omega_2 = alpha_2*inv_alpha_sum;

       rj4 = fmax(rj4, (pow(fabs(-1.0 + 10*omega_0), sensor_theta) + pow(fabs(-1.0 + ((5.0/3.0))*omega_1), sensor_theta)
            + pow(fabs(-1.0 + ((10.0/3.0))*omega_2), sensor_theta))/(2 + pow(9.0, sensor_theta)));

       Recon_4 = (-(7.0/12.0)*(-CS_44*max_lambda_44 + CF_44) + ((1.0/6.0))*(-CS_45*max_lambda_44 + CF_45) +
            ((11.0/12.0))*(-CS_43*max_lambda_44 + CF_43))*omega_0 + (-(1.0/12.0)*(-CS_41*max_lambda_44 + CF_41) +
            ((1.0/6.0))*(-CS_43*max_lambda_44 + CF_43) + ((5.0/12.0))*(-CS_42*max_lambda_44 + CF_42))*omega_2 +
            (-(1.0/12.0)*(-CS_44*max_lambda_44 + CF_44) + ((1.0/6.0))*(-CS_42*max_lambda_44 + CF_42) +
            ((5.0/12.0))*(-CS_43*max_lambda_44 + CF_43))*omega_1 + Recon_4;

      Recon_0 = (-(1.0/60.0)*(-8*CF_01 - 8*CF_04 + 37*CF_02 + 37*CF_03 + CF_00 + CF_05) + Recon_0)*rj0;

      Recon_1 = (-(1.0/60.0)*(-8*CF_11 - 8*CF_14 + 37*CF_12 + 37*CF_13 + CF_10 + CF_15) + Recon_1)*rj1;

      Recon_2 = (-(1.0/60.0)*(-8*CF_21 - 8*CF_24 + 37*CF_22 + 37*CF_23 + CF_20 + CF_25) + Recon_2)*rj2;

      Recon_3 = (-(1.0/60.0)*(-8*CF_31 - 8*CF_34 + 37*CF_32 + 37*CF_33 + CF_30 + CF_35) + Recon_3)*rj3;

      Recon_4 = (-(1.0/60.0)*(-8*CF_41 - 8*CF_44 + 37*CF_42 + 37*CF_43 + CF_40 + CF_45) + Recon_4)*rj4;

       Residual0_B0(0,0,0) = AVG_1_D10*Recon_0*inv_AVG_met_fact + AVG_1_D11*Recon_1*inv_AVG_met_fact +
            0.707106781186547*AVG_1_rho*Recon_3*inv_AVG_a + 0.707106781186547*AVG_1_rho*Recon_4*inv_AVG_a;

       Residual1_B0(0,0,0) = AVG_1_D10*AVG_1_u0*Recon_0*inv_AVG_met_fact + AVG_1_D11*AVG_1_rho*Recon_2*inv_AVG_met_fact
            + AVG_1_D11*AVG_1_u0*Recon_1*inv_AVG_met_fact + 0.707106781186547*(AVG_1_D10*AVG_1_a*inv_AVG_met_fact +
            AVG_1_u0)*AVG_1_rho*Recon_3*inv_AVG_a + 0.707106781186547*(-AVG_1_D10*AVG_1_a*inv_AVG_met_fact +
            AVG_1_u0)*AVG_1_rho*Recon_4*inv_AVG_a;

       Residual2_B0(0,0,0) = AVG_1_D10*AVG_1_u1*Recon_0*inv_AVG_met_fact + AVG_1_D11*AVG_1_u1*Recon_1*inv_AVG_met_fact -
            AVG_1_D10*AVG_1_rho*Recon_2*inv_AVG_met_fact + 0.707106781186547*(AVG_1_D11*AVG_1_a*inv_AVG_met_fact +
            AVG_1_u1)*AVG_1_rho*Recon_3*inv_AVG_a + 0.707106781186547*(-AVG_1_D11*AVG_1_a*inv_AVG_met_fact +
            AVG_1_u1)*AVG_1_rho*Recon_4*inv_AVG_a;

       Residual3_B0(0,0,0) = (AVG_1_D10*AVG_1_rho*inv_AVG_met_fact + AVG_1_D11*AVG_1_u2*inv_AVG_met_fact)*Recon_1 +
            (AVG_1_D10*AVG_1_u2*inv_AVG_met_fact - AVG_1_D11*AVG_1_rho*inv_AVG_met_fact)*Recon_0 +
            0.707106781186547*AVG_1_rho*AVG_1_u2*Recon_3*inv_AVG_a +
            0.707106781186547*AVG_1_rho*AVG_1_u2*Recon_4*inv_AVG_a;

       Residual4_B0(0,0,0) = (((1.0/2.0))*((AVG_1_u0*AVG_1_u0) + (AVG_1_u1*AVG_1_u1) +
            (AVG_1_u2*AVG_1_u2))*AVG_1_D10*inv_AVG_met_fact - AVG_1_D11*AVG_1_rho*AVG_1_u2*inv_AVG_met_fact)*Recon_0 +
            (((1.0/2.0))*((AVG_1_u0*AVG_1_u0) + (AVG_1_u1*AVG_1_u1) + (AVG_1_u2*AVG_1_u2))*AVG_1_D11*inv_AVG_met_fact +
            AVG_1_D10*AVG_1_rho*AVG_1_u2*inv_AVG_met_fact)*Recon_1 + (AVG_1_D11*AVG_1_u0*inv_AVG_met_fact -
            AVG_1_D10*AVG_1_u1*inv_AVG_met_fact)*AVG_1_rho*Recon_2 + 0.707106781186547*(((AVG_1_a*AVG_1_a) +
            ((1.0/2.0))*((AVG_1_u0*AVG_1_u0) + (AVG_1_u1*AVG_1_u1) + (AVG_1_u2*AVG_1_u2))*gamma_m1)*invgamma_m1 +
            (AVG_1_D10*AVG_1_u0*inv_AVG_met_fact +
            AVG_1_D11*AVG_1_u1*inv_AVG_met_fact)*AVG_1_a)*AVG_1_rho*Recon_3*inv_AVG_a +
            0.707106781186547*(((AVG_1_a*AVG_1_a) + ((1.0/2.0))*((AVG_1_u0*AVG_1_u0) + (AVG_1_u1*AVG_1_u1) +
            (AVG_1_u2*AVG_1_u2))*gamma_m1)*invgamma_m1 - (AVG_1_D10*AVG_1_u0*inv_AVG_met_fact +
            AVG_1_D11*AVG_1_u1*inv_AVG_met_fact)*AVG_1_a)*AVG_1_rho*Recon_4*inv_AVG_a;

   }

   else{

      Residual0_B0(0,0,0) = 0.0;

      Residual1_B0(0,0,0) = 0.0;

      Residual2_B0(0,0,0) = 0.0;

      Residual3_B0(0,0,0) = 0.0;

      Residual4_B0(0,0,0) = 0.0;

   }

}

 void opensbliblock00Kernel065(const ACC<double> &a_B0, const ACC<double> &detJ_B0, const ACC<double> &kappa_B0, const
ACC<double> &p_B0, const ACC<double> &rhoE_B0, const ACC<double> &rho_B0, const ACC<double> &rhou0_B0, const ACC<double>
&rhou1_B0, const ACC<double> &rhou2_B0, const ACC<double> &u0_B0, const ACC<double> &u1_B0, const ACC<double> &u2_B0,
ACC<double> &rhoE_RKold_B0, ACC<double> &rho_RKold_B0, ACC<double> &rhou0_RKold_B0, ACC<double> &rhou1_RKold_B0,
ACC<double> &rhou2_RKold_B0)
{
   double AVG_2_2_LEV_00 = 0.0;
   double AVG_2_2_LEV_02 = 0.0;
   double AVG_2_2_LEV_10 = 0.0;
   double AVG_2_2_LEV_11 = 0.0;
   double AVG_2_2_LEV_20 = 0.0;
   double AVG_2_2_LEV_21 = 0.0;
   double AVG_2_2_LEV_22 = 0.0;
   double AVG_2_2_LEV_23 = 0.0;
   double AVG_2_2_LEV_24 = 0.0;
   double AVG_2_2_LEV_30 = 0.0;
   double AVG_2_2_LEV_31 = 0.0;
   double AVG_2_2_LEV_32 = 0.0;
   double AVG_2_2_LEV_33 = 0.0;
   double AVG_2_2_LEV_34 = 0.0;
   double AVG_2_2_LEV_40 = 0.0;
   double AVG_2_2_LEV_41 = 0.0;
   double AVG_2_2_LEV_42 = 0.0;
   double AVG_2_2_LEV_43 = 0.0;
   double AVG_2_2_LEV_44 = 0.0;
   double AVG_2_a = 0.0;
   double AVG_2_detJ = 0.0;
   double AVG_2_inv_rho = 0.0;
   double AVG_2_rho = 0.0;
   double AVG_2_u0 = 0.0;
   double AVG_2_u1 = 0.0;
   double AVG_2_u2 = 0.0;
   double CF_00 = 0.0;
   double CF_01 = 0.0;
   double CF_02 = 0.0;
   double CF_03 = 0.0;
   double CF_04 = 0.0;
   double CF_05 = 0.0;
   double CF_10 = 0.0;
   double CF_11 = 0.0;
   double CF_12 = 0.0;
   double CF_13 = 0.0;
   double CF_14 = 0.0;
   double CF_15 = 0.0;
   double CF_20 = 0.0;
   double CF_21 = 0.0;
   double CF_22 = 0.0;
   double CF_23 = 0.0;
   double CF_24 = 0.0;
   double CF_25 = 0.0;
   double CF_30 = 0.0;
   double CF_31 = 0.0;
   double CF_32 = 0.0;
   double CF_33 = 0.0;
   double CF_34 = 0.0;
   double CF_35 = 0.0;
   double CF_40 = 0.0;
   double CF_41 = 0.0;
   double CF_42 = 0.0;
   double CF_43 = 0.0;
   double CF_44 = 0.0;
   double CF_45 = 0.0;
   double CS_00 = 0.0;
   double CS_01 = 0.0;
   double CS_02 = 0.0;
   double CS_03 = 0.0;
   double CS_04 = 0.0;
   double CS_05 = 0.0;
   double CS_10 = 0.0;
   double CS_11 = 0.0;
   double CS_12 = 0.0;
   double CS_13 = 0.0;
   double CS_14 = 0.0;
   double CS_15 = 0.0;
   double CS_20 = 0.0;
   double CS_21 = 0.0;
   double CS_22 = 0.0;
   double CS_23 = 0.0;
   double CS_24 = 0.0;
   double CS_25 = 0.0;
   double CS_30 = 0.0;
   double CS_31 = 0.0;
   double CS_32 = 0.0;
   double CS_33 = 0.0;
   double CS_34 = 0.0;
   double CS_35 = 0.0;
   double CS_40 = 0.0;
   double CS_41 = 0.0;
   double CS_42 = 0.0;
   double CS_43 = 0.0;
   double CS_44 = 0.0;
   double CS_45 = 0.0;
   double Recon_0 = 0.0;
   double Recon_1 = 0.0;
   double Recon_2 = 0.0;
   double Recon_3 = 0.0;
   double Recon_4 = 0.0;
   double alpha_0 = 0.0;
   double alpha_1 = 0.0;
   double alpha_2 = 0.0;
   double beta_0 = 0.0;
   double beta_1 = 0.0;
   double beta_2 = 0.0;
   double inv_AVG_a = 0.0;
   double inv_AVG_rho = 0.0;
   double inv_alpha_sum = 0.0;
   double max_lambda_00 = 0.0;
   double max_lambda_11 = 0.0;
   double max_lambda_22 = 0.0;
   double max_lambda_33 = 0.0;
   double max_lambda_44 = 0.0;
   double omega_0 = 0.0;
   double omega_1 = 0.0;
   double omega_2 = 0.0;
   double rj0 = 0.0;
   double rj1 = 0.0;
   double rj2 = 0.0;
   double rj3 = 0.0;
   double rj4 = 0.0;
    if (fmax(kappa_B0(0,0,-2), fmax(kappa_B0(0,0,-1), fmax(kappa_B0(0,0,0), fmax(kappa_B0(0,0,2), fmax(kappa_B0(0,0,-3),
      kappa_B0(0,0,1)))))) > Ducros_check){

      AVG_2_rho = sqrt(rho_B0(0,0,0)*rho_B0(0,0,1));

      AVG_2_inv_rho = 1.0/((sqrt(rho_B0(0,0,0)) + sqrt(rho_B0(0,0,1))));

      AVG_2_u0 = (sqrt(rho_B0(0,0,0))*u0_B0(0,0,0) + sqrt(rho_B0(0,0,1))*u0_B0(0,0,1))*AVG_2_inv_rho;

      AVG_2_u1 = (sqrt(rho_B0(0,0,0))*u1_B0(0,0,0) + sqrt(rho_B0(0,0,1))*u1_B0(0,0,1))*AVG_2_inv_rho;

      AVG_2_u2 = (sqrt(rho_B0(0,0,0))*u2_B0(0,0,0) + sqrt(rho_B0(0,0,1))*u2_B0(0,0,1))*AVG_2_inv_rho;

       AVG_2_a = sqrt((-(1.0/2.0)*((AVG_2_u0*AVG_2_u0) + (AVG_2_u1*AVG_2_u1) + (AVG_2_u2*AVG_2_u2)) + ((p_B0(0,0,0) +
            rhoE_B0(0,0,0))/sqrt(rho_B0(0,0,0)) + (p_B0(0,0,1) +
            rhoE_B0(0,0,1))/sqrt(rho_B0(0,0,1)))*AVG_2_inv_rho)*gamma_m1);

      AVG_2_detJ = ((1.0/2.0))*(detJ_B0(0,0,0) + detJ_B0(0,0,1));

      inv_AVG_a = 1.0/(AVG_2_a);

      inv_AVG_rho = 1.0/(AVG_2_rho);

      AVG_2_2_LEV_00 = -AVG_2_u1*inv_AVG_rho;

      AVG_2_2_LEV_02 = inv_AVG_rho;

      AVG_2_2_LEV_10 = AVG_2_u0*inv_AVG_rho;

      AVG_2_2_LEV_11 = -inv_AVG_rho;

       AVG_2_2_LEV_20 = -(1.0/2.0)*(-2 - (AVG_2_u0*AVG_2_u0)*(inv_AVG_a*inv_AVG_a) -
            (AVG_2_u1*AVG_2_u1)*(inv_AVG_a*inv_AVG_a) - (AVG_2_u2*AVG_2_u2)*(inv_AVG_a*inv_AVG_a) +
            (AVG_2_u0*AVG_2_u0)*(inv_AVG_a*inv_AVG_a)*gama + (AVG_2_u1*AVG_2_u1)*(inv_AVG_a*inv_AVG_a)*gama +
            (AVG_2_u2*AVG_2_u2)*(inv_AVG_a*inv_AVG_a)*gama);

      AVG_2_2_LEV_21 = (inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_2_u0;

      AVG_2_2_LEV_22 = (inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_2_u1;

      AVG_2_2_LEV_23 = (inv_AVG_a*inv_AVG_a)*gamma_m1*AVG_2_u2;

      AVG_2_2_LEV_24 = -(inv_AVG_a*inv_AVG_a)*gamma_m1;

       AVG_2_2_LEV_30 = -0.353553390593274*((AVG_2_u0*AVG_2_u0) + (AVG_2_u1*AVG_2_u1) + (AVG_2_u2*AVG_2_u2) -
            (AVG_2_u0*AVG_2_u0)*gama - (AVG_2_u1*AVG_2_u1)*gama - (AVG_2_u2*AVG_2_u2)*gama +
            2*AVG_2_a*AVG_2_u2)*inv_AVG_a*inv_AVG_rho;

      AVG_2_2_LEV_31 = -0.707106781186547*gamma_m1*AVG_2_u0*inv_AVG_a*inv_AVG_rho;

      AVG_2_2_LEV_32 = -0.707106781186547*gamma_m1*AVG_2_u1*inv_AVG_a*inv_AVG_rho;

      AVG_2_2_LEV_33 = 0.707106781186547*(-gama*AVG_2_u2 + AVG_2_a + AVG_2_u2)*inv_AVG_a*inv_AVG_rho;

      AVG_2_2_LEV_34 = 0.707106781186547*gamma_m1*inv_AVG_a*inv_AVG_rho;

       AVG_2_2_LEV_40 = 0.353553390593274*(-(AVG_2_u0*AVG_2_u0) - (AVG_2_u1*AVG_2_u1) - (AVG_2_u2*AVG_2_u2) +
            (AVG_2_u0*AVG_2_u0)*gama + (AVG_2_u1*AVG_2_u1)*gama + (AVG_2_u2*AVG_2_u2)*gama +
            2*AVG_2_a*AVG_2_u2)*inv_AVG_a*inv_AVG_rho;

      AVG_2_2_LEV_41 = -0.707106781186547*gamma_m1*AVG_2_u0*inv_AVG_a*inv_AVG_rho;

      AVG_2_2_LEV_42 = -0.707106781186547*gamma_m1*AVG_2_u1*inv_AVG_a*inv_AVG_rho;

      AVG_2_2_LEV_43 = -0.707106781186547*(-AVG_2_u2 + gama*AVG_2_u2 + AVG_2_a)*inv_AVG_a*inv_AVG_rho;

      AVG_2_2_LEV_44 = 0.707106781186547*gamma_m1*inv_AVG_a*inv_AVG_rho;

      CF_00 = rhou2_B0(0,0,-2)*AVG_2_2_LEV_00 + u2_B0(0,0,-2)*rhou1_B0(0,0,-2)*AVG_2_2_LEV_02;

      CF_10 = rhou2_B0(0,0,-2)*AVG_2_2_LEV_10 + u2_B0(0,0,-2)*rhou0_B0(0,0,-2)*AVG_2_2_LEV_11;

       CF_20 = p_B0(0,0,-2)*AVG_2_2_LEV_23 + rhou2_B0(0,0,-2)*AVG_2_2_LEV_20 + p_B0(0,0,-2)*u2_B0(0,0,-2)*AVG_2_2_LEV_24
            + u2_B0(0,0,-2)*rhoE_B0(0,0,-2)*AVG_2_2_LEV_24 + u2_B0(0,0,-2)*rhou0_B0(0,0,-2)*AVG_2_2_LEV_21 +
            u2_B0(0,0,-2)*rhou1_B0(0,0,-2)*AVG_2_2_LEV_22 + u2_B0(0,0,-2)*rhou2_B0(0,0,-2)*AVG_2_2_LEV_23;

       CF_30 = p_B0(0,0,-2)*AVG_2_2_LEV_33 + rhou2_B0(0,0,-2)*AVG_2_2_LEV_30 + p_B0(0,0,-2)*u2_B0(0,0,-2)*AVG_2_2_LEV_34
            + u2_B0(0,0,-2)*rhoE_B0(0,0,-2)*AVG_2_2_LEV_34 + u2_B0(0,0,-2)*rhou0_B0(0,0,-2)*AVG_2_2_LEV_31 +
            u2_B0(0,0,-2)*rhou1_B0(0,0,-2)*AVG_2_2_LEV_32 + u2_B0(0,0,-2)*rhou2_B0(0,0,-2)*AVG_2_2_LEV_33;

       CF_40 = p_B0(0,0,-2)*AVG_2_2_LEV_43 + rhou2_B0(0,0,-2)*AVG_2_2_LEV_40 + p_B0(0,0,-2)*u2_B0(0,0,-2)*AVG_2_2_LEV_44
            + u2_B0(0,0,-2)*rhoE_B0(0,0,-2)*AVG_2_2_LEV_44 + u2_B0(0,0,-2)*rhou0_B0(0,0,-2)*AVG_2_2_LEV_41 +
            u2_B0(0,0,-2)*rhou1_B0(0,0,-2)*AVG_2_2_LEV_42 + u2_B0(0,0,-2)*rhou2_B0(0,0,-2)*AVG_2_2_LEV_43;

      CS_00 = rho_B0(0,0,-2)*AVG_2_2_LEV_00 + rhou1_B0(0,0,-2)*AVG_2_2_LEV_02;

      CS_10 = rho_B0(0,0,-2)*AVG_2_2_LEV_10 + rhou0_B0(0,0,-2)*AVG_2_2_LEV_11;

       CS_20 = rho_B0(0,0,-2)*AVG_2_2_LEV_20 + rhoE_B0(0,0,-2)*AVG_2_2_LEV_24 + rhou0_B0(0,0,-2)*AVG_2_2_LEV_21 +
            rhou1_B0(0,0,-2)*AVG_2_2_LEV_22 + rhou2_B0(0,0,-2)*AVG_2_2_LEV_23;

       CS_30 = rho_B0(0,0,-2)*AVG_2_2_LEV_30 + rhoE_B0(0,0,-2)*AVG_2_2_LEV_34 + rhou0_B0(0,0,-2)*AVG_2_2_LEV_31 +
            rhou1_B0(0,0,-2)*AVG_2_2_LEV_32 + rhou2_B0(0,0,-2)*AVG_2_2_LEV_33;

       CS_40 = rho_B0(0,0,-2)*AVG_2_2_LEV_40 + rhoE_B0(0,0,-2)*AVG_2_2_LEV_44 + rhou0_B0(0,0,-2)*AVG_2_2_LEV_41 +
            rhou1_B0(0,0,-2)*AVG_2_2_LEV_42 + rhou2_B0(0,0,-2)*AVG_2_2_LEV_43;

      CF_01 = rhou2_B0(0,0,-1)*AVG_2_2_LEV_00 + u2_B0(0,0,-1)*rhou1_B0(0,0,-1)*AVG_2_2_LEV_02;

      CF_11 = rhou2_B0(0,0,-1)*AVG_2_2_LEV_10 + u2_B0(0,0,-1)*rhou0_B0(0,0,-1)*AVG_2_2_LEV_11;

       CF_21 = p_B0(0,0,-1)*AVG_2_2_LEV_23 + rhou2_B0(0,0,-1)*AVG_2_2_LEV_20 + p_B0(0,0,-1)*u2_B0(0,0,-1)*AVG_2_2_LEV_24
            + u2_B0(0,0,-1)*rhoE_B0(0,0,-1)*AVG_2_2_LEV_24 + u2_B0(0,0,-1)*rhou0_B0(0,0,-1)*AVG_2_2_LEV_21 +
            u2_B0(0,0,-1)*rhou1_B0(0,0,-1)*AVG_2_2_LEV_22 + u2_B0(0,0,-1)*rhou2_B0(0,0,-1)*AVG_2_2_LEV_23;

       CF_31 = p_B0(0,0,-1)*AVG_2_2_LEV_33 + rhou2_B0(0,0,-1)*AVG_2_2_LEV_30 + p_B0(0,0,-1)*u2_B0(0,0,-1)*AVG_2_2_LEV_34
            + u2_B0(0,0,-1)*rhoE_B0(0,0,-1)*AVG_2_2_LEV_34 + u2_B0(0,0,-1)*rhou0_B0(0,0,-1)*AVG_2_2_LEV_31 +
            u2_B0(0,0,-1)*rhou1_B0(0,0,-1)*AVG_2_2_LEV_32 + u2_B0(0,0,-1)*rhou2_B0(0,0,-1)*AVG_2_2_LEV_33;

       CF_41 = p_B0(0,0,-1)*AVG_2_2_LEV_43 + rhou2_B0(0,0,-1)*AVG_2_2_LEV_40 + p_B0(0,0,-1)*u2_B0(0,0,-1)*AVG_2_2_LEV_44
            + u2_B0(0,0,-1)*rhoE_B0(0,0,-1)*AVG_2_2_LEV_44 + u2_B0(0,0,-1)*rhou0_B0(0,0,-1)*AVG_2_2_LEV_41 +
            u2_B0(0,0,-1)*rhou1_B0(0,0,-1)*AVG_2_2_LEV_42 + u2_B0(0,0,-1)*rhou2_B0(0,0,-1)*AVG_2_2_LEV_43;

      CS_01 = rho_B0(0,0,-1)*AVG_2_2_LEV_00 + rhou1_B0(0,0,-1)*AVG_2_2_LEV_02;

      CS_11 = rho_B0(0,0,-1)*AVG_2_2_LEV_10 + rhou0_B0(0,0,-1)*AVG_2_2_LEV_11;

       CS_21 = rho_B0(0,0,-1)*AVG_2_2_LEV_20 + rhoE_B0(0,0,-1)*AVG_2_2_LEV_24 + rhou0_B0(0,0,-1)*AVG_2_2_LEV_21 +
            rhou1_B0(0,0,-1)*AVG_2_2_LEV_22 + rhou2_B0(0,0,-1)*AVG_2_2_LEV_23;

       CS_31 = rho_B0(0,0,-1)*AVG_2_2_LEV_30 + rhoE_B0(0,0,-1)*AVG_2_2_LEV_34 + rhou0_B0(0,0,-1)*AVG_2_2_LEV_31 +
            rhou1_B0(0,0,-1)*AVG_2_2_LEV_32 + rhou2_B0(0,0,-1)*AVG_2_2_LEV_33;

       CS_41 = rho_B0(0,0,-1)*AVG_2_2_LEV_40 + rhoE_B0(0,0,-1)*AVG_2_2_LEV_44 + rhou0_B0(0,0,-1)*AVG_2_2_LEV_41 +
            rhou1_B0(0,0,-1)*AVG_2_2_LEV_42 + rhou2_B0(0,0,-1)*AVG_2_2_LEV_43;

      CF_02 = rhou2_B0(0,0,0)*AVG_2_2_LEV_00 + u2_B0(0,0,0)*rhou1_B0(0,0,0)*AVG_2_2_LEV_02;

      CF_12 = rhou2_B0(0,0,0)*AVG_2_2_LEV_10 + u2_B0(0,0,0)*rhou0_B0(0,0,0)*AVG_2_2_LEV_11;

       CF_22 = p_B0(0,0,0)*AVG_2_2_LEV_23 + rhou2_B0(0,0,0)*AVG_2_2_LEV_20 + p_B0(0,0,0)*u2_B0(0,0,0)*AVG_2_2_LEV_24 +
            u2_B0(0,0,0)*rhoE_B0(0,0,0)*AVG_2_2_LEV_24 + u2_B0(0,0,0)*rhou0_B0(0,0,0)*AVG_2_2_LEV_21 +
            u2_B0(0,0,0)*rhou1_B0(0,0,0)*AVG_2_2_LEV_22 + u2_B0(0,0,0)*rhou2_B0(0,0,0)*AVG_2_2_LEV_23;

       CF_32 = p_B0(0,0,0)*AVG_2_2_LEV_33 + rhou2_B0(0,0,0)*AVG_2_2_LEV_30 + p_B0(0,0,0)*u2_B0(0,0,0)*AVG_2_2_LEV_34 +
            u2_B0(0,0,0)*rhoE_B0(0,0,0)*AVG_2_2_LEV_34 + u2_B0(0,0,0)*rhou0_B0(0,0,0)*AVG_2_2_LEV_31 +
            u2_B0(0,0,0)*rhou1_B0(0,0,0)*AVG_2_2_LEV_32 + u2_B0(0,0,0)*rhou2_B0(0,0,0)*AVG_2_2_LEV_33;

       CF_42 = p_B0(0,0,0)*AVG_2_2_LEV_43 + rhou2_B0(0,0,0)*AVG_2_2_LEV_40 + p_B0(0,0,0)*u2_B0(0,0,0)*AVG_2_2_LEV_44 +
            u2_B0(0,0,0)*rhoE_B0(0,0,0)*AVG_2_2_LEV_44 + u2_B0(0,0,0)*rhou0_B0(0,0,0)*AVG_2_2_LEV_41 +
            u2_B0(0,0,0)*rhou1_B0(0,0,0)*AVG_2_2_LEV_42 + u2_B0(0,0,0)*rhou2_B0(0,0,0)*AVG_2_2_LEV_43;

      CS_02 = rho_B0(0,0,0)*AVG_2_2_LEV_00 + rhou1_B0(0,0,0)*AVG_2_2_LEV_02;

      CS_12 = rho_B0(0,0,0)*AVG_2_2_LEV_10 + rhou0_B0(0,0,0)*AVG_2_2_LEV_11;

       CS_22 = rho_B0(0,0,0)*AVG_2_2_LEV_20 + rhoE_B0(0,0,0)*AVG_2_2_LEV_24 + rhou0_B0(0,0,0)*AVG_2_2_LEV_21 +
            rhou1_B0(0,0,0)*AVG_2_2_LEV_22 + rhou2_B0(0,0,0)*AVG_2_2_LEV_23;

       CS_32 = rho_B0(0,0,0)*AVG_2_2_LEV_30 + rhoE_B0(0,0,0)*AVG_2_2_LEV_34 + rhou0_B0(0,0,0)*AVG_2_2_LEV_31 +
            rhou1_B0(0,0,0)*AVG_2_2_LEV_32 + rhou2_B0(0,0,0)*AVG_2_2_LEV_33;

       CS_42 = rho_B0(0,0,0)*AVG_2_2_LEV_40 + rhoE_B0(0,0,0)*AVG_2_2_LEV_44 + rhou0_B0(0,0,0)*AVG_2_2_LEV_41 +
            rhou1_B0(0,0,0)*AVG_2_2_LEV_42 + rhou2_B0(0,0,0)*AVG_2_2_LEV_43;

      CF_03 = rhou2_B0(0,0,1)*AVG_2_2_LEV_00 + u2_B0(0,0,1)*rhou1_B0(0,0,1)*AVG_2_2_LEV_02;

      CF_13 = rhou2_B0(0,0,1)*AVG_2_2_LEV_10 + u2_B0(0,0,1)*rhou0_B0(0,0,1)*AVG_2_2_LEV_11;

       CF_23 = p_B0(0,0,1)*AVG_2_2_LEV_23 + rhou2_B0(0,0,1)*AVG_2_2_LEV_20 + p_B0(0,0,1)*u2_B0(0,0,1)*AVG_2_2_LEV_24 +
            u2_B0(0,0,1)*rhoE_B0(0,0,1)*AVG_2_2_LEV_24 + u2_B0(0,0,1)*rhou0_B0(0,0,1)*AVG_2_2_LEV_21 +
            u2_B0(0,0,1)*rhou1_B0(0,0,1)*AVG_2_2_LEV_22 + u2_B0(0,0,1)*rhou2_B0(0,0,1)*AVG_2_2_LEV_23;

       CF_33 = p_B0(0,0,1)*AVG_2_2_LEV_33 + rhou2_B0(0,0,1)*AVG_2_2_LEV_30 + p_B0(0,0,1)*u2_B0(0,0,1)*AVG_2_2_LEV_34 +
            u2_B0(0,0,1)*rhoE_B0(0,0,1)*AVG_2_2_LEV_34 + u2_B0(0,0,1)*rhou0_B0(0,0,1)*AVG_2_2_LEV_31 +
            u2_B0(0,0,1)*rhou1_B0(0,0,1)*AVG_2_2_LEV_32 + u2_B0(0,0,1)*rhou2_B0(0,0,1)*AVG_2_2_LEV_33;

       CF_43 = p_B0(0,0,1)*AVG_2_2_LEV_43 + rhou2_B0(0,0,1)*AVG_2_2_LEV_40 + p_B0(0,0,1)*u2_B0(0,0,1)*AVG_2_2_LEV_44 +
            u2_B0(0,0,1)*rhoE_B0(0,0,1)*AVG_2_2_LEV_44 + u2_B0(0,0,1)*rhou0_B0(0,0,1)*AVG_2_2_LEV_41 +
            u2_B0(0,0,1)*rhou1_B0(0,0,1)*AVG_2_2_LEV_42 + u2_B0(0,0,1)*rhou2_B0(0,0,1)*AVG_2_2_LEV_43;

      CS_03 = rho_B0(0,0,1)*AVG_2_2_LEV_00 + rhou1_B0(0,0,1)*AVG_2_2_LEV_02;

      CS_13 = rho_B0(0,0,1)*AVG_2_2_LEV_10 + rhou0_B0(0,0,1)*AVG_2_2_LEV_11;

       CS_23 = rho_B0(0,0,1)*AVG_2_2_LEV_20 + rhoE_B0(0,0,1)*AVG_2_2_LEV_24 + rhou0_B0(0,0,1)*AVG_2_2_LEV_21 +
            rhou1_B0(0,0,1)*AVG_2_2_LEV_22 + rhou2_B0(0,0,1)*AVG_2_2_LEV_23;

       CS_33 = rho_B0(0,0,1)*AVG_2_2_LEV_30 + rhoE_B0(0,0,1)*AVG_2_2_LEV_34 + rhou0_B0(0,0,1)*AVG_2_2_LEV_31 +
            rhou1_B0(0,0,1)*AVG_2_2_LEV_32 + rhou2_B0(0,0,1)*AVG_2_2_LEV_33;

       CS_43 = rho_B0(0,0,1)*AVG_2_2_LEV_40 + rhoE_B0(0,0,1)*AVG_2_2_LEV_44 + rhou0_B0(0,0,1)*AVG_2_2_LEV_41 +
            rhou1_B0(0,0,1)*AVG_2_2_LEV_42 + rhou2_B0(0,0,1)*AVG_2_2_LEV_43;

      CF_04 = rhou2_B0(0,0,2)*AVG_2_2_LEV_00 + u2_B0(0,0,2)*rhou1_B0(0,0,2)*AVG_2_2_LEV_02;

      CF_14 = rhou2_B0(0,0,2)*AVG_2_2_LEV_10 + u2_B0(0,0,2)*rhou0_B0(0,0,2)*AVG_2_2_LEV_11;

       CF_24 = p_B0(0,0,2)*AVG_2_2_LEV_23 + rhou2_B0(0,0,2)*AVG_2_2_LEV_20 + p_B0(0,0,2)*u2_B0(0,0,2)*AVG_2_2_LEV_24 +
            u2_B0(0,0,2)*rhoE_B0(0,0,2)*AVG_2_2_LEV_24 + u2_B0(0,0,2)*rhou0_B0(0,0,2)*AVG_2_2_LEV_21 +
            u2_B0(0,0,2)*rhou1_B0(0,0,2)*AVG_2_2_LEV_22 + u2_B0(0,0,2)*rhou2_B0(0,0,2)*AVG_2_2_LEV_23;

       CF_34 = p_B0(0,0,2)*AVG_2_2_LEV_33 + rhou2_B0(0,0,2)*AVG_2_2_LEV_30 + p_B0(0,0,2)*u2_B0(0,0,2)*AVG_2_2_LEV_34 +
            u2_B0(0,0,2)*rhoE_B0(0,0,2)*AVG_2_2_LEV_34 + u2_B0(0,0,2)*rhou0_B0(0,0,2)*AVG_2_2_LEV_31 +
            u2_B0(0,0,2)*rhou1_B0(0,0,2)*AVG_2_2_LEV_32 + u2_B0(0,0,2)*rhou2_B0(0,0,2)*AVG_2_2_LEV_33;

       CF_44 = p_B0(0,0,2)*AVG_2_2_LEV_43 + rhou2_B0(0,0,2)*AVG_2_2_LEV_40 + p_B0(0,0,2)*u2_B0(0,0,2)*AVG_2_2_LEV_44 +
            u2_B0(0,0,2)*rhoE_B0(0,0,2)*AVG_2_2_LEV_44 + u2_B0(0,0,2)*rhou0_B0(0,0,2)*AVG_2_2_LEV_41 +
            u2_B0(0,0,2)*rhou1_B0(0,0,2)*AVG_2_2_LEV_42 + u2_B0(0,0,2)*rhou2_B0(0,0,2)*AVG_2_2_LEV_43;

      CS_04 = rho_B0(0,0,2)*AVG_2_2_LEV_00 + rhou1_B0(0,0,2)*AVG_2_2_LEV_02;

      CS_14 = rho_B0(0,0,2)*AVG_2_2_LEV_10 + rhou0_B0(0,0,2)*AVG_2_2_LEV_11;

       CS_24 = rho_B0(0,0,2)*AVG_2_2_LEV_20 + rhoE_B0(0,0,2)*AVG_2_2_LEV_24 + rhou0_B0(0,0,2)*AVG_2_2_LEV_21 +
            rhou1_B0(0,0,2)*AVG_2_2_LEV_22 + rhou2_B0(0,0,2)*AVG_2_2_LEV_23;

       CS_34 = rho_B0(0,0,2)*AVG_2_2_LEV_30 + rhoE_B0(0,0,2)*AVG_2_2_LEV_34 + rhou0_B0(0,0,2)*AVG_2_2_LEV_31 +
            rhou1_B0(0,0,2)*AVG_2_2_LEV_32 + rhou2_B0(0,0,2)*AVG_2_2_LEV_33;

       CS_44 = rho_B0(0,0,2)*AVG_2_2_LEV_40 + rhoE_B0(0,0,2)*AVG_2_2_LEV_44 + rhou0_B0(0,0,2)*AVG_2_2_LEV_41 +
            rhou1_B0(0,0,2)*AVG_2_2_LEV_42 + rhou2_B0(0,0,2)*AVG_2_2_LEV_43;

      CF_05 = rhou2_B0(0,0,3)*AVG_2_2_LEV_00 + u2_B0(0,0,3)*rhou1_B0(0,0,3)*AVG_2_2_LEV_02;

      CF_15 = rhou2_B0(0,0,3)*AVG_2_2_LEV_10 + u2_B0(0,0,3)*rhou0_B0(0,0,3)*AVG_2_2_LEV_11;

       CF_25 = p_B0(0,0,3)*AVG_2_2_LEV_23 + rhou2_B0(0,0,3)*AVG_2_2_LEV_20 + p_B0(0,0,3)*u2_B0(0,0,3)*AVG_2_2_LEV_24 +
            u2_B0(0,0,3)*rhoE_B0(0,0,3)*AVG_2_2_LEV_24 + u2_B0(0,0,3)*rhou0_B0(0,0,3)*AVG_2_2_LEV_21 +
            u2_B0(0,0,3)*rhou1_B0(0,0,3)*AVG_2_2_LEV_22 + u2_B0(0,0,3)*rhou2_B0(0,0,3)*AVG_2_2_LEV_23;

       CF_35 = p_B0(0,0,3)*AVG_2_2_LEV_33 + rhou2_B0(0,0,3)*AVG_2_2_LEV_30 + p_B0(0,0,3)*u2_B0(0,0,3)*AVG_2_2_LEV_34 +
            u2_B0(0,0,3)*rhoE_B0(0,0,3)*AVG_2_2_LEV_34 + u2_B0(0,0,3)*rhou0_B0(0,0,3)*AVG_2_2_LEV_31 +
            u2_B0(0,0,3)*rhou1_B0(0,0,3)*AVG_2_2_LEV_32 + u2_B0(0,0,3)*rhou2_B0(0,0,3)*AVG_2_2_LEV_33;

       CF_45 = p_B0(0,0,3)*AVG_2_2_LEV_43 + rhou2_B0(0,0,3)*AVG_2_2_LEV_40 + p_B0(0,0,3)*u2_B0(0,0,3)*AVG_2_2_LEV_44 +
            u2_B0(0,0,3)*rhoE_B0(0,0,3)*AVG_2_2_LEV_44 + u2_B0(0,0,3)*rhou0_B0(0,0,3)*AVG_2_2_LEV_41 +
            u2_B0(0,0,3)*rhou1_B0(0,0,3)*AVG_2_2_LEV_42 + u2_B0(0,0,3)*rhou2_B0(0,0,3)*AVG_2_2_LEV_43;

      CS_05 = rho_B0(0,0,3)*AVG_2_2_LEV_00 + rhou1_B0(0,0,3)*AVG_2_2_LEV_02;

      CS_15 = rho_B0(0,0,3)*AVG_2_2_LEV_10 + rhou0_B0(0,0,3)*AVG_2_2_LEV_11;

       CS_25 = rho_B0(0,0,3)*AVG_2_2_LEV_20 + rhoE_B0(0,0,3)*AVG_2_2_LEV_24 + rhou0_B0(0,0,3)*AVG_2_2_LEV_21 +
            rhou1_B0(0,0,3)*AVG_2_2_LEV_22 + rhou2_B0(0,0,3)*AVG_2_2_LEV_23;

       CS_35 = rho_B0(0,0,3)*AVG_2_2_LEV_30 + rhoE_B0(0,0,3)*AVG_2_2_LEV_34 + rhou0_B0(0,0,3)*AVG_2_2_LEV_31 +
            rhou1_B0(0,0,3)*AVG_2_2_LEV_32 + rhou2_B0(0,0,3)*AVG_2_2_LEV_33;

       CS_45 = rho_B0(0,0,3)*AVG_2_2_LEV_40 + rhoE_B0(0,0,3)*AVG_2_2_LEV_44 + rhou0_B0(0,0,3)*AVG_2_2_LEV_41 +
            rhou1_B0(0,0,3)*AVG_2_2_LEV_42 + rhou2_B0(0,0,3)*AVG_2_2_LEV_43;

      max_lambda_00 = shock_filter_control*fmax(fabs(u2_B0(0,0,0)*detJ_B0(0,0,0)), fabs(u2_B0(0,0,1)*detJ_B0(0,0,1)));

      max_lambda_11 = max_lambda_00;

      max_lambda_22 = max_lambda_00;

       max_lambda_33 = shock_filter_control*fmax(fabs(a_B0(0,0,0)*detJ_B0(0,0,0) + u2_B0(0,0,0)*detJ_B0(0,0,0)),
            fabs(a_B0(0,0,1)*detJ_B0(0,0,1) + u2_B0(0,0,1)*detJ_B0(0,0,1)));

       max_lambda_44 = shock_filter_control*fmax(fabs(a_B0(0,0,1)*detJ_B0(0,0,1) - u2_B0(0,0,1)*detJ_B0(0,0,1)),
            fabs(a_B0(0,0,0)*detJ_B0(0,0,0) - u2_B0(0,0,0)*detJ_B0(0,0,0)));

       beta_0 = ((1.0/3.0))*((CS_04*max_lambda_00 + CF_04)*(CS_04*max_lambda_00 + CF_04)) +
            ((1.0/2.0))*(-(19.0/6.0)*(CS_04*max_lambda_00 + CF_04) + ((25.0/6.0))*(CS_03*max_lambda_00 +
            CF_03))*(CS_03*max_lambda_00 + CF_03) + ((1.0/2.0))*(CS_02*max_lambda_00 +
            CF_02)*(-(31.0/6.0)*(CS_03*max_lambda_00 + CF_03) + ((5.0/3.0))*(CS_02*max_lambda_00 + CF_02) +
            ((11.0/6.0))*(CS_04*max_lambda_00 + CF_04));

       beta_1 = ((1.0/3.0))*((CS_03*max_lambda_00 + CF_03)*(CS_03*max_lambda_00 + CF_03)) +
            ((1.0/2.0))*(-(13.0/6.0)*(CS_03*max_lambda_00 + CF_03) + ((13.0/6.0))*(CS_02*max_lambda_00 +
            CF_02))*(CS_02*max_lambda_00 + CF_02) + ((1.0/2.0))*(CS_01*max_lambda_00 +
            CF_01)*(-(13.0/6.0)*(CS_02*max_lambda_00 + CF_02) + ((2.0/3.0))*(CS_01*max_lambda_00 + CF_01) +
            ((5.0/6.0))*(CS_03*max_lambda_00 + CF_03));

       beta_2 = ((5.0/6.0))*((CS_02*max_lambda_00 + CF_02)*(CS_02*max_lambda_00 + CF_02)) +
            ((1.0/2.0))*(((2.0/3.0))*(CS_00*max_lambda_00 + CF_00) + ((11.0/6.0))*(CS_02*max_lambda_00 +
            CF_02))*(CS_00*max_lambda_00 + CF_00) + ((1.0/2.0))*(CS_01*max_lambda_00 +
            CF_01)*(-(31.0/6.0)*(CS_02*max_lambda_00 + CF_02) - (19.0/6.0)*(CS_00*max_lambda_00 + CF_00) +
            ((25.0/6.0))*(CS_01*max_lambda_00 + CF_01));

       alpha_0 = 0.3 + ((3.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_0)*(1.0e-40 +
            beta_0));

       alpha_1 = 0.6 + ((3.0/5.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_1)*(1.0e-40 +
            beta_1));

       alpha_2 = 0.1 + ((1.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_2)*(1.0e-40 +
            beta_2));

      inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2));

      omega_0 = alpha_0*inv_alpha_sum;

      omega_1 = alpha_1*inv_alpha_sum;

      omega_2 = alpha_2*inv_alpha_sum;

       rj0 = (pow(fabs(-1.0 + 10*omega_2), sensor_theta) + pow(fabs(-1.0 + ((5.0/3.0))*omega_1), sensor_theta) +
            pow(fabs(-1.0 + ((10.0/3.0))*omega_0), sensor_theta))/(2 + pow(9.0, sensor_theta));

       Recon_0 = (-(7.0/12.0)*(CS_01*max_lambda_00 + CF_01) + ((1.0/6.0))*(CS_00*max_lambda_00 + CF_00) +
            ((11.0/12.0))*(CS_02*max_lambda_00 + CF_02))*omega_2 + (-(1.0/12.0)*(CS_01*max_lambda_00 + CF_01) +
            ((1.0/6.0))*(CS_03*max_lambda_00 + CF_03) + ((5.0/12.0))*(CS_02*max_lambda_00 + CF_02))*omega_1 +
            (-(1.0/12.0)*(CS_04*max_lambda_00 + CF_04) + ((1.0/6.0))*(CS_02*max_lambda_00 + CF_02) +
            ((5.0/12.0))*(CS_03*max_lambda_00 + CF_03))*omega_0 + Recon_0;

       beta_0 = ((1.0/3.0))*((-CS_05*max_lambda_00 + CF_05)*(-CS_05*max_lambda_00 + CF_05)) +
            ((1.0/2.0))*(-(19.0/6.0)*(-CS_05*max_lambda_00 + CF_05) + ((25.0/6.0))*(-CS_04*max_lambda_00 +
            CF_04))*(-CS_04*max_lambda_00 + CF_04) + ((1.0/2.0))*(-CS_03*max_lambda_00 +
            CF_03)*(-(31.0/6.0)*(-CS_04*max_lambda_00 + CF_04) + ((5.0/3.0))*(-CS_03*max_lambda_00 + CF_03) +
            ((11.0/6.0))*(-CS_05*max_lambda_00 + CF_05));

       beta_1 = ((1.0/3.0))*((-CS_04*max_lambda_00 + CF_04)*(-CS_04*max_lambda_00 + CF_04)) +
            ((1.0/2.0))*(-(13.0/6.0)*(-CS_04*max_lambda_00 + CF_04) + ((13.0/6.0))*(-CS_03*max_lambda_00 +
            CF_03))*(-CS_03*max_lambda_00 + CF_03) + ((1.0/2.0))*(-CS_02*max_lambda_00 +
            CF_02)*(-(13.0/6.0)*(-CS_03*max_lambda_00 + CF_03) + ((2.0/3.0))*(-CS_02*max_lambda_00 + CF_02) +
            ((5.0/6.0))*(-CS_04*max_lambda_00 + CF_04));

       beta_2 = ((5.0/6.0))*((-CS_03*max_lambda_00 + CF_03)*(-CS_03*max_lambda_00 + CF_03)) +
            ((1.0/2.0))*(-(31.0/6.0)*(-CS_03*max_lambda_00 + CF_03) + ((25.0/6.0))*(-CS_02*max_lambda_00 +
            CF_02))*(-CS_02*max_lambda_00 + CF_02) + ((1.0/2.0))*(-CS_01*max_lambda_00 +
            CF_01)*(-(19.0/6.0)*(-CS_02*max_lambda_00 + CF_02) + ((2.0/3.0))*(-CS_01*max_lambda_00 + CF_01) +
            ((11.0/6.0))*(-CS_03*max_lambda_00 + CF_03));

       alpha_0 = 0.1 + ((1.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_0)*(1.0e-40 +
            beta_0));

       alpha_1 = 0.6 + ((3.0/5.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_1)*(1.0e-40 +
            beta_1));

       alpha_2 = 0.3 + ((3.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_2)*(1.0e-40 +
            beta_2));

      inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2));

      omega_0 = alpha_0*inv_alpha_sum;

      omega_1 = alpha_1*inv_alpha_sum;

      omega_2 = alpha_2*inv_alpha_sum;

       rj0 = fmax(rj0, (pow(fabs(-1.0 + 10*omega_0), sensor_theta) + pow(fabs(-1.0 + ((5.0/3.0))*omega_1), sensor_theta)
            + pow(fabs(-1.0 + ((10.0/3.0))*omega_2), sensor_theta))/(2 + pow(9.0, sensor_theta)));

       Recon_0 = (-(7.0/12.0)*(-CS_04*max_lambda_00 + CF_04) + ((1.0/6.0))*(-CS_05*max_lambda_00 + CF_05) +
            ((11.0/12.0))*(-CS_03*max_lambda_00 + CF_03))*omega_0 + (-(1.0/12.0)*(-CS_01*max_lambda_00 + CF_01) +
            ((1.0/6.0))*(-CS_03*max_lambda_00 + CF_03) + ((5.0/12.0))*(-CS_02*max_lambda_00 + CF_02))*omega_2 +
            (-(1.0/12.0)*(-CS_04*max_lambda_00 + CF_04) + ((1.0/6.0))*(-CS_02*max_lambda_00 + CF_02) +
            ((5.0/12.0))*(-CS_03*max_lambda_00 + CF_03))*omega_1 + Recon_0;

       beta_0 = ((1.0/3.0))*((CS_14*max_lambda_11 + CF_14)*(CS_14*max_lambda_11 + CF_14)) +
            ((1.0/2.0))*(-(19.0/6.0)*(CS_14*max_lambda_11 + CF_14) + ((25.0/6.0))*(CS_13*max_lambda_11 +
            CF_13))*(CS_13*max_lambda_11 + CF_13) + ((1.0/2.0))*(CS_12*max_lambda_11 +
            CF_12)*(-(31.0/6.0)*(CS_13*max_lambda_11 + CF_13) + ((5.0/3.0))*(CS_12*max_lambda_11 + CF_12) +
            ((11.0/6.0))*(CS_14*max_lambda_11 + CF_14));

       beta_1 = ((1.0/3.0))*((CS_13*max_lambda_11 + CF_13)*(CS_13*max_lambda_11 + CF_13)) +
            ((1.0/2.0))*(-(13.0/6.0)*(CS_13*max_lambda_11 + CF_13) + ((13.0/6.0))*(CS_12*max_lambda_11 +
            CF_12))*(CS_12*max_lambda_11 + CF_12) + ((1.0/2.0))*(CS_11*max_lambda_11 +
            CF_11)*(-(13.0/6.0)*(CS_12*max_lambda_11 + CF_12) + ((2.0/3.0))*(CS_11*max_lambda_11 + CF_11) +
            ((5.0/6.0))*(CS_13*max_lambda_11 + CF_13));

       beta_2 = ((5.0/6.0))*((CS_12*max_lambda_11 + CF_12)*(CS_12*max_lambda_11 + CF_12)) +
            ((1.0/2.0))*(((2.0/3.0))*(CS_10*max_lambda_11 + CF_10) + ((11.0/6.0))*(CS_12*max_lambda_11 +
            CF_12))*(CS_10*max_lambda_11 + CF_10) + ((1.0/2.0))*(CS_11*max_lambda_11 +
            CF_11)*(-(31.0/6.0)*(CS_12*max_lambda_11 + CF_12) - (19.0/6.0)*(CS_10*max_lambda_11 + CF_10) +
            ((25.0/6.0))*(CS_11*max_lambda_11 + CF_11));

       alpha_0 = 0.3 + ((3.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_0)*(1.0e-40 +
            beta_0));

       alpha_1 = 0.6 + ((3.0/5.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_1)*(1.0e-40 +
            beta_1));

       alpha_2 = 0.1 + ((1.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_2)*(1.0e-40 +
            beta_2));

      inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2));

      omega_0 = alpha_0*inv_alpha_sum;

      omega_1 = alpha_1*inv_alpha_sum;

      omega_2 = alpha_2*inv_alpha_sum;

       rj1 = (pow(fabs(-1.0 + 10*omega_2), sensor_theta) + pow(fabs(-1.0 + ((5.0/3.0))*omega_1), sensor_theta) +
            pow(fabs(-1.0 + ((10.0/3.0))*omega_0), sensor_theta))/(2 + pow(9.0, sensor_theta));

       Recon_1 = (-(7.0/12.0)*(CS_11*max_lambda_11 + CF_11) + ((1.0/6.0))*(CS_10*max_lambda_11 + CF_10) +
            ((11.0/12.0))*(CS_12*max_lambda_11 + CF_12))*omega_2 + (-(1.0/12.0)*(CS_11*max_lambda_11 + CF_11) +
            ((1.0/6.0))*(CS_13*max_lambda_11 + CF_13) + ((5.0/12.0))*(CS_12*max_lambda_11 + CF_12))*omega_1 +
            (-(1.0/12.0)*(CS_14*max_lambda_11 + CF_14) + ((1.0/6.0))*(CS_12*max_lambda_11 + CF_12) +
            ((5.0/12.0))*(CS_13*max_lambda_11 + CF_13))*omega_0 + Recon_1;

       beta_0 = ((1.0/3.0))*((-CS_15*max_lambda_11 + CF_15)*(-CS_15*max_lambda_11 + CF_15)) +
            ((1.0/2.0))*(-(19.0/6.0)*(-CS_15*max_lambda_11 + CF_15) + ((25.0/6.0))*(-CS_14*max_lambda_11 +
            CF_14))*(-CS_14*max_lambda_11 + CF_14) + ((1.0/2.0))*(-CS_13*max_lambda_11 +
            CF_13)*(-(31.0/6.0)*(-CS_14*max_lambda_11 + CF_14) + ((5.0/3.0))*(-CS_13*max_lambda_11 + CF_13) +
            ((11.0/6.0))*(-CS_15*max_lambda_11 + CF_15));

       beta_1 = ((1.0/3.0))*((-CS_14*max_lambda_11 + CF_14)*(-CS_14*max_lambda_11 + CF_14)) +
            ((1.0/2.0))*(-(13.0/6.0)*(-CS_14*max_lambda_11 + CF_14) + ((13.0/6.0))*(-CS_13*max_lambda_11 +
            CF_13))*(-CS_13*max_lambda_11 + CF_13) + ((1.0/2.0))*(-CS_12*max_lambda_11 +
            CF_12)*(-(13.0/6.0)*(-CS_13*max_lambda_11 + CF_13) + ((2.0/3.0))*(-CS_12*max_lambda_11 + CF_12) +
            ((5.0/6.0))*(-CS_14*max_lambda_11 + CF_14));

       beta_2 = ((5.0/6.0))*((-CS_13*max_lambda_11 + CF_13)*(-CS_13*max_lambda_11 + CF_13)) +
            ((1.0/2.0))*(-(31.0/6.0)*(-CS_13*max_lambda_11 + CF_13) + ((25.0/6.0))*(-CS_12*max_lambda_11 +
            CF_12))*(-CS_12*max_lambda_11 + CF_12) + ((1.0/2.0))*(-CS_11*max_lambda_11 +
            CF_11)*(-(19.0/6.0)*(-CS_12*max_lambda_11 + CF_12) + ((2.0/3.0))*(-CS_11*max_lambda_11 + CF_11) +
            ((11.0/6.0))*(-CS_13*max_lambda_11 + CF_13));

       alpha_0 = 0.1 + ((1.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_0)*(1.0e-40 +
            beta_0));

       alpha_1 = 0.6 + ((3.0/5.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_1)*(1.0e-40 +
            beta_1));

       alpha_2 = 0.3 + ((3.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_2)*(1.0e-40 +
            beta_2));

      inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2));

      omega_0 = alpha_0*inv_alpha_sum;

      omega_1 = alpha_1*inv_alpha_sum;

      omega_2 = alpha_2*inv_alpha_sum;

       rj1 = fmax(rj1, (pow(fabs(-1.0 + 10*omega_0), sensor_theta) + pow(fabs(-1.0 + ((5.0/3.0))*omega_1), sensor_theta)
            + pow(fabs(-1.0 + ((10.0/3.0))*omega_2), sensor_theta))/(2 + pow(9.0, sensor_theta)));

       Recon_1 = (-(7.0/12.0)*(-CS_14*max_lambda_11 + CF_14) + ((1.0/6.0))*(-CS_15*max_lambda_11 + CF_15) +
            ((11.0/12.0))*(-CS_13*max_lambda_11 + CF_13))*omega_0 + (-(1.0/12.0)*(-CS_11*max_lambda_11 + CF_11) +
            ((1.0/6.0))*(-CS_13*max_lambda_11 + CF_13) + ((5.0/12.0))*(-CS_12*max_lambda_11 + CF_12))*omega_2 +
            (-(1.0/12.0)*(-CS_14*max_lambda_11 + CF_14) + ((1.0/6.0))*(-CS_12*max_lambda_11 + CF_12) +
            ((5.0/12.0))*(-CS_13*max_lambda_11 + CF_13))*omega_1 + Recon_1;

       beta_0 = ((1.0/3.0))*((CS_24*max_lambda_22 + CF_24)*(CS_24*max_lambda_22 + CF_24)) +
            ((1.0/2.0))*(-(19.0/6.0)*(CS_24*max_lambda_22 + CF_24) + ((25.0/6.0))*(CS_23*max_lambda_22 +
            CF_23))*(CS_23*max_lambda_22 + CF_23) + ((1.0/2.0))*(CS_22*max_lambda_22 +
            CF_22)*(-(31.0/6.0)*(CS_23*max_lambda_22 + CF_23) + ((5.0/3.0))*(CS_22*max_lambda_22 + CF_22) +
            ((11.0/6.0))*(CS_24*max_lambda_22 + CF_24));

       beta_1 = ((1.0/3.0))*((CS_23*max_lambda_22 + CF_23)*(CS_23*max_lambda_22 + CF_23)) +
            ((1.0/2.0))*(-(13.0/6.0)*(CS_23*max_lambda_22 + CF_23) + ((13.0/6.0))*(CS_22*max_lambda_22 +
            CF_22))*(CS_22*max_lambda_22 + CF_22) + ((1.0/2.0))*(CS_21*max_lambda_22 +
            CF_21)*(-(13.0/6.0)*(CS_22*max_lambda_22 + CF_22) + ((2.0/3.0))*(CS_21*max_lambda_22 + CF_21) +
            ((5.0/6.0))*(CS_23*max_lambda_22 + CF_23));

       beta_2 = ((5.0/6.0))*((CS_22*max_lambda_22 + CF_22)*(CS_22*max_lambda_22 + CF_22)) +
            ((1.0/2.0))*(((2.0/3.0))*(CS_20*max_lambda_22 + CF_20) + ((11.0/6.0))*(CS_22*max_lambda_22 +
            CF_22))*(CS_20*max_lambda_22 + CF_20) + ((1.0/2.0))*(CS_21*max_lambda_22 +
            CF_21)*(-(31.0/6.0)*(CS_22*max_lambda_22 + CF_22) - (19.0/6.0)*(CS_20*max_lambda_22 + CF_20) +
            ((25.0/6.0))*(CS_21*max_lambda_22 + CF_21));

       alpha_0 = 0.3 + ((3.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_0)*(1.0e-40 +
            beta_0));

       alpha_1 = 0.6 + ((3.0/5.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_1)*(1.0e-40 +
            beta_1));

       alpha_2 = 0.1 + ((1.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_2)*(1.0e-40 +
            beta_2));

      inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2));

      omega_0 = alpha_0*inv_alpha_sum;

      omega_1 = alpha_1*inv_alpha_sum;

      omega_2 = alpha_2*inv_alpha_sum;

       rj2 = (pow(fabs(-1.0 + 10*omega_2), sensor_theta) + pow(fabs(-1.0 + ((5.0/3.0))*omega_1), sensor_theta) +
            pow(fabs(-1.0 + ((10.0/3.0))*omega_0), sensor_theta))/(2 + pow(9.0, sensor_theta));

       Recon_2 = (-(7.0/12.0)*(CS_21*max_lambda_22 + CF_21) + ((1.0/6.0))*(CS_20*max_lambda_22 + CF_20) +
            ((11.0/12.0))*(CS_22*max_lambda_22 + CF_22))*omega_2 + (-(1.0/12.0)*(CS_21*max_lambda_22 + CF_21) +
            ((1.0/6.0))*(CS_23*max_lambda_22 + CF_23) + ((5.0/12.0))*(CS_22*max_lambda_22 + CF_22))*omega_1 +
            (-(1.0/12.0)*(CS_24*max_lambda_22 + CF_24) + ((1.0/6.0))*(CS_22*max_lambda_22 + CF_22) +
            ((5.0/12.0))*(CS_23*max_lambda_22 + CF_23))*omega_0 + Recon_2;

       beta_0 = ((1.0/3.0))*((-CS_25*max_lambda_22 + CF_25)*(-CS_25*max_lambda_22 + CF_25)) +
            ((1.0/2.0))*(-(19.0/6.0)*(-CS_25*max_lambda_22 + CF_25) + ((25.0/6.0))*(-CS_24*max_lambda_22 +
            CF_24))*(-CS_24*max_lambda_22 + CF_24) + ((1.0/2.0))*(-CS_23*max_lambda_22 +
            CF_23)*(-(31.0/6.0)*(-CS_24*max_lambda_22 + CF_24) + ((5.0/3.0))*(-CS_23*max_lambda_22 + CF_23) +
            ((11.0/6.0))*(-CS_25*max_lambda_22 + CF_25));

       beta_1 = ((1.0/3.0))*((-CS_24*max_lambda_22 + CF_24)*(-CS_24*max_lambda_22 + CF_24)) +
            ((1.0/2.0))*(-(13.0/6.0)*(-CS_24*max_lambda_22 + CF_24) + ((13.0/6.0))*(-CS_23*max_lambda_22 +
            CF_23))*(-CS_23*max_lambda_22 + CF_23) + ((1.0/2.0))*(-CS_22*max_lambda_22 +
            CF_22)*(-(13.0/6.0)*(-CS_23*max_lambda_22 + CF_23) + ((2.0/3.0))*(-CS_22*max_lambda_22 + CF_22) +
            ((5.0/6.0))*(-CS_24*max_lambda_22 + CF_24));

       beta_2 = ((5.0/6.0))*((-CS_23*max_lambda_22 + CF_23)*(-CS_23*max_lambda_22 + CF_23)) +
            ((1.0/2.0))*(-(31.0/6.0)*(-CS_23*max_lambda_22 + CF_23) + ((25.0/6.0))*(-CS_22*max_lambda_22 +
            CF_22))*(-CS_22*max_lambda_22 + CF_22) + ((1.0/2.0))*(-CS_21*max_lambda_22 +
            CF_21)*(-(19.0/6.0)*(-CS_22*max_lambda_22 + CF_22) + ((2.0/3.0))*(-CS_21*max_lambda_22 + CF_21) +
            ((11.0/6.0))*(-CS_23*max_lambda_22 + CF_23));

       alpha_0 = 0.1 + ((1.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_0)*(1.0e-40 +
            beta_0));

       alpha_1 = 0.6 + ((3.0/5.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_1)*(1.0e-40 +
            beta_1));

       alpha_2 = 0.3 + ((3.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_2)*(1.0e-40 +
            beta_2));

      inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2));

      omega_0 = alpha_0*inv_alpha_sum;

      omega_1 = alpha_1*inv_alpha_sum;

      omega_2 = alpha_2*inv_alpha_sum;

       rj2 = fmax(rj2, (pow(fabs(-1.0 + 10*omega_0), sensor_theta) + pow(fabs(-1.0 + ((5.0/3.0))*omega_1), sensor_theta)
            + pow(fabs(-1.0 + ((10.0/3.0))*omega_2), sensor_theta))/(2 + pow(9.0, sensor_theta)));

       Recon_2 = (-(7.0/12.0)*(-CS_24*max_lambda_22 + CF_24) + ((1.0/6.0))*(-CS_25*max_lambda_22 + CF_25) +
            ((11.0/12.0))*(-CS_23*max_lambda_22 + CF_23))*omega_0 + (-(1.0/12.0)*(-CS_21*max_lambda_22 + CF_21) +
            ((1.0/6.0))*(-CS_23*max_lambda_22 + CF_23) + ((5.0/12.0))*(-CS_22*max_lambda_22 + CF_22))*omega_2 +
            (-(1.0/12.0)*(-CS_24*max_lambda_22 + CF_24) + ((1.0/6.0))*(-CS_22*max_lambda_22 + CF_22) +
            ((5.0/12.0))*(-CS_23*max_lambda_22 + CF_23))*omega_1 + Recon_2;

       beta_0 = ((1.0/3.0))*((CS_34*max_lambda_33 + CF_34)*(CS_34*max_lambda_33 + CF_34)) +
            ((1.0/2.0))*(-(19.0/6.0)*(CS_34*max_lambda_33 + CF_34) + ((25.0/6.0))*(CS_33*max_lambda_33 +
            CF_33))*(CS_33*max_lambda_33 + CF_33) + ((1.0/2.0))*(CS_32*max_lambda_33 +
            CF_32)*(-(31.0/6.0)*(CS_33*max_lambda_33 + CF_33) + ((5.0/3.0))*(CS_32*max_lambda_33 + CF_32) +
            ((11.0/6.0))*(CS_34*max_lambda_33 + CF_34));

       beta_1 = ((1.0/3.0))*((CS_33*max_lambda_33 + CF_33)*(CS_33*max_lambda_33 + CF_33)) +
            ((1.0/2.0))*(-(13.0/6.0)*(CS_33*max_lambda_33 + CF_33) + ((13.0/6.0))*(CS_32*max_lambda_33 +
            CF_32))*(CS_32*max_lambda_33 + CF_32) + ((1.0/2.0))*(CS_31*max_lambda_33 +
            CF_31)*(-(13.0/6.0)*(CS_32*max_lambda_33 + CF_32) + ((2.0/3.0))*(CS_31*max_lambda_33 + CF_31) +
            ((5.0/6.0))*(CS_33*max_lambda_33 + CF_33));

       beta_2 = ((5.0/6.0))*((CS_32*max_lambda_33 + CF_32)*(CS_32*max_lambda_33 + CF_32)) +
            ((1.0/2.0))*(((2.0/3.0))*(CS_30*max_lambda_33 + CF_30) + ((11.0/6.0))*(CS_32*max_lambda_33 +
            CF_32))*(CS_30*max_lambda_33 + CF_30) + ((1.0/2.0))*(CS_31*max_lambda_33 +
            CF_31)*(-(31.0/6.0)*(CS_32*max_lambda_33 + CF_32) - (19.0/6.0)*(CS_30*max_lambda_33 + CF_30) +
            ((25.0/6.0))*(CS_31*max_lambda_33 + CF_31));

       alpha_0 = 0.3 + ((3.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_0)*(1.0e-40 +
            beta_0));

       alpha_1 = 0.6 + ((3.0/5.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_1)*(1.0e-40 +
            beta_1));

       alpha_2 = 0.1 + ((1.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_2)*(1.0e-40 +
            beta_2));

      inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2));

      omega_0 = alpha_0*inv_alpha_sum;

      omega_1 = alpha_1*inv_alpha_sum;

      omega_2 = alpha_2*inv_alpha_sum;

       rj3 = (pow(fabs(-1.0 + 10*omega_2), sensor_theta) + pow(fabs(-1.0 + ((5.0/3.0))*omega_1), sensor_theta) +
            pow(fabs(-1.0 + ((10.0/3.0))*omega_0), sensor_theta))/(2 + pow(9.0, sensor_theta));

       Recon_3 = (-(7.0/12.0)*(CS_31*max_lambda_33 + CF_31) + ((1.0/6.0))*(CS_30*max_lambda_33 + CF_30) +
            ((11.0/12.0))*(CS_32*max_lambda_33 + CF_32))*omega_2 + (-(1.0/12.0)*(CS_31*max_lambda_33 + CF_31) +
            ((1.0/6.0))*(CS_33*max_lambda_33 + CF_33) + ((5.0/12.0))*(CS_32*max_lambda_33 + CF_32))*omega_1 +
            (-(1.0/12.0)*(CS_34*max_lambda_33 + CF_34) + ((1.0/6.0))*(CS_32*max_lambda_33 + CF_32) +
            ((5.0/12.0))*(CS_33*max_lambda_33 + CF_33))*omega_0 + Recon_3;

       beta_0 = ((1.0/3.0))*((-CS_35*max_lambda_33 + CF_35)*(-CS_35*max_lambda_33 + CF_35)) +
            ((1.0/2.0))*(-(19.0/6.0)*(-CS_35*max_lambda_33 + CF_35) + ((25.0/6.0))*(-CS_34*max_lambda_33 +
            CF_34))*(-CS_34*max_lambda_33 + CF_34) + ((1.0/2.0))*(-CS_33*max_lambda_33 +
            CF_33)*(-(31.0/6.0)*(-CS_34*max_lambda_33 + CF_34) + ((5.0/3.0))*(-CS_33*max_lambda_33 + CF_33) +
            ((11.0/6.0))*(-CS_35*max_lambda_33 + CF_35));

       beta_1 = ((1.0/3.0))*((-CS_34*max_lambda_33 + CF_34)*(-CS_34*max_lambda_33 + CF_34)) +
            ((1.0/2.0))*(-(13.0/6.0)*(-CS_34*max_lambda_33 + CF_34) + ((13.0/6.0))*(-CS_33*max_lambda_33 +
            CF_33))*(-CS_33*max_lambda_33 + CF_33) + ((1.0/2.0))*(-CS_32*max_lambda_33 +
            CF_32)*(-(13.0/6.0)*(-CS_33*max_lambda_33 + CF_33) + ((2.0/3.0))*(-CS_32*max_lambda_33 + CF_32) +
            ((5.0/6.0))*(-CS_34*max_lambda_33 + CF_34));

       beta_2 = ((5.0/6.0))*((-CS_33*max_lambda_33 + CF_33)*(-CS_33*max_lambda_33 + CF_33)) +
            ((1.0/2.0))*(-(31.0/6.0)*(-CS_33*max_lambda_33 + CF_33) + ((25.0/6.0))*(-CS_32*max_lambda_33 +
            CF_32))*(-CS_32*max_lambda_33 + CF_32) + ((1.0/2.0))*(-CS_31*max_lambda_33 +
            CF_31)*(-(19.0/6.0)*(-CS_32*max_lambda_33 + CF_32) + ((2.0/3.0))*(-CS_31*max_lambda_33 + CF_31) +
            ((11.0/6.0))*(-CS_33*max_lambda_33 + CF_33));

       alpha_0 = 0.1 + ((1.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_0)*(1.0e-40 +
            beta_0));

       alpha_1 = 0.6 + ((3.0/5.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_1)*(1.0e-40 +
            beta_1));

       alpha_2 = 0.3 + ((3.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_2)*(1.0e-40 +
            beta_2));

      inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2));

      omega_0 = alpha_0*inv_alpha_sum;

      omega_1 = alpha_1*inv_alpha_sum;

      omega_2 = alpha_2*inv_alpha_sum;

       rj3 = fmax(rj3, (pow(fabs(-1.0 + 10*omega_0), sensor_theta) + pow(fabs(-1.0 + ((5.0/3.0))*omega_1), sensor_theta)
            + pow(fabs(-1.0 + ((10.0/3.0))*omega_2), sensor_theta))/(2 + pow(9.0, sensor_theta)));

       Recon_3 = (-(7.0/12.0)*(-CS_34*max_lambda_33 + CF_34) + ((1.0/6.0))*(-CS_35*max_lambda_33 + CF_35) +
            ((11.0/12.0))*(-CS_33*max_lambda_33 + CF_33))*omega_0 + (-(1.0/12.0)*(-CS_31*max_lambda_33 + CF_31) +
            ((1.0/6.0))*(-CS_33*max_lambda_33 + CF_33) + ((5.0/12.0))*(-CS_32*max_lambda_33 + CF_32))*omega_2 +
            (-(1.0/12.0)*(-CS_34*max_lambda_33 + CF_34) + ((1.0/6.0))*(-CS_32*max_lambda_33 + CF_32) +
            ((5.0/12.0))*(-CS_33*max_lambda_33 + CF_33))*omega_1 + Recon_3;

       beta_0 = ((1.0/3.0))*((CS_44*max_lambda_44 + CF_44)*(CS_44*max_lambda_44 + CF_44)) +
            ((1.0/2.0))*(-(19.0/6.0)*(CS_44*max_lambda_44 + CF_44) + ((25.0/6.0))*(CS_43*max_lambda_44 +
            CF_43))*(CS_43*max_lambda_44 + CF_43) + ((1.0/2.0))*(CS_42*max_lambda_44 +
            CF_42)*(-(31.0/6.0)*(CS_43*max_lambda_44 + CF_43) + ((5.0/3.0))*(CS_42*max_lambda_44 + CF_42) +
            ((11.0/6.0))*(CS_44*max_lambda_44 + CF_44));

       beta_1 = ((1.0/3.0))*((CS_43*max_lambda_44 + CF_43)*(CS_43*max_lambda_44 + CF_43)) +
            ((1.0/2.0))*(-(13.0/6.0)*(CS_43*max_lambda_44 + CF_43) + ((13.0/6.0))*(CS_42*max_lambda_44 +
            CF_42))*(CS_42*max_lambda_44 + CF_42) + ((1.0/2.0))*(CS_41*max_lambda_44 +
            CF_41)*(-(13.0/6.0)*(CS_42*max_lambda_44 + CF_42) + ((2.0/3.0))*(CS_41*max_lambda_44 + CF_41) +
            ((5.0/6.0))*(CS_43*max_lambda_44 + CF_43));

       beta_2 = ((5.0/6.0))*((CS_42*max_lambda_44 + CF_42)*(CS_42*max_lambda_44 + CF_42)) +
            ((1.0/2.0))*(((2.0/3.0))*(CS_40*max_lambda_44 + CF_40) + ((11.0/6.0))*(CS_42*max_lambda_44 +
            CF_42))*(CS_40*max_lambda_44 + CF_40) + ((1.0/2.0))*(CS_41*max_lambda_44 +
            CF_41)*(-(31.0/6.0)*(CS_42*max_lambda_44 + CF_42) - (19.0/6.0)*(CS_40*max_lambda_44 + CF_40) +
            ((25.0/6.0))*(CS_41*max_lambda_44 + CF_41));

       alpha_0 = 0.3 + ((3.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_0)*(1.0e-40 +
            beta_0));

       alpha_1 = 0.6 + ((3.0/5.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_1)*(1.0e-40 +
            beta_1));

       alpha_2 = 0.1 + ((1.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_2)*(1.0e-40 +
            beta_2));

      inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2));

      omega_0 = alpha_0*inv_alpha_sum;

      omega_1 = alpha_1*inv_alpha_sum;

      omega_2 = alpha_2*inv_alpha_sum;

       rj4 = (pow(fabs(-1.0 + 10*omega_2), sensor_theta) + pow(fabs(-1.0 + ((5.0/3.0))*omega_1), sensor_theta) +
            pow(fabs(-1.0 + ((10.0/3.0))*omega_0), sensor_theta))/(2 + pow(9.0, sensor_theta));

       Recon_4 = (-(7.0/12.0)*(CS_41*max_lambda_44 + CF_41) + ((1.0/6.0))*(CS_40*max_lambda_44 + CF_40) +
            ((11.0/12.0))*(CS_42*max_lambda_44 + CF_42))*omega_2 + (-(1.0/12.0)*(CS_41*max_lambda_44 + CF_41) +
            ((1.0/6.0))*(CS_43*max_lambda_44 + CF_43) + ((5.0/12.0))*(CS_42*max_lambda_44 + CF_42))*omega_1 +
            (-(1.0/12.0)*(CS_44*max_lambda_44 + CF_44) + ((1.0/6.0))*(CS_42*max_lambda_44 + CF_42) +
            ((5.0/12.0))*(CS_43*max_lambda_44 + CF_43))*omega_0 + Recon_4;

       beta_0 = ((1.0/3.0))*((-CS_45*max_lambda_44 + CF_45)*(-CS_45*max_lambda_44 + CF_45)) +
            ((1.0/2.0))*(-(19.0/6.0)*(-CS_45*max_lambda_44 + CF_45) + ((25.0/6.0))*(-CS_44*max_lambda_44 +
            CF_44))*(-CS_44*max_lambda_44 + CF_44) + ((1.0/2.0))*(-CS_43*max_lambda_44 +
            CF_43)*(-(31.0/6.0)*(-CS_44*max_lambda_44 + CF_44) + ((5.0/3.0))*(-CS_43*max_lambda_44 + CF_43) +
            ((11.0/6.0))*(-CS_45*max_lambda_44 + CF_45));

       beta_1 = ((1.0/3.0))*((-CS_44*max_lambda_44 + CF_44)*(-CS_44*max_lambda_44 + CF_44)) +
            ((1.0/2.0))*(-(13.0/6.0)*(-CS_44*max_lambda_44 + CF_44) + ((13.0/6.0))*(-CS_43*max_lambda_44 +
            CF_43))*(-CS_43*max_lambda_44 + CF_43) + ((1.0/2.0))*(-CS_42*max_lambda_44 +
            CF_42)*(-(13.0/6.0)*(-CS_43*max_lambda_44 + CF_43) + ((2.0/3.0))*(-CS_42*max_lambda_44 + CF_42) +
            ((5.0/6.0))*(-CS_44*max_lambda_44 + CF_44));

       beta_2 = ((5.0/6.0))*((-CS_43*max_lambda_44 + CF_43)*(-CS_43*max_lambda_44 + CF_43)) +
            ((1.0/2.0))*(-(31.0/6.0)*(-CS_43*max_lambda_44 + CF_43) + ((25.0/6.0))*(-CS_42*max_lambda_44 +
            CF_42))*(-CS_42*max_lambda_44 + CF_42) + ((1.0/2.0))*(-CS_41*max_lambda_44 +
            CF_41)*(-(19.0/6.0)*(-CS_42*max_lambda_44 + CF_42) + ((2.0/3.0))*(-CS_41*max_lambda_44 + CF_41) +
            ((11.0/6.0))*(-CS_43*max_lambda_44 + CF_43));

       alpha_0 = 0.1 + ((1.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_0)*(1.0e-40 +
            beta_0));

       alpha_1 = 0.6 + ((3.0/5.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_1)*(1.0e-40 +
            beta_1));

       alpha_2 = 0.3 + ((3.0/10.0))*(fabs(-beta_2 + beta_0)*fabs(-beta_2 + beta_0))/((1.0e-40 + beta_2)*(1.0e-40 +
            beta_2));

      inv_alpha_sum = 1.0/((alpha_0 + alpha_1 + alpha_2));

      omega_0 = alpha_0*inv_alpha_sum;

      omega_1 = alpha_1*inv_alpha_sum;

      omega_2 = alpha_2*inv_alpha_sum;

       rj4 = fmax(rj4, (pow(fabs(-1.0 + 10*omega_0), sensor_theta) + pow(fabs(-1.0 + ((5.0/3.0))*omega_1), sensor_theta)
            + pow(fabs(-1.0 + ((10.0/3.0))*omega_2), sensor_theta))/(2 + pow(9.0, sensor_theta)));

       Recon_4 = (-(7.0/12.0)*(-CS_44*max_lambda_44 + CF_44) + ((1.0/6.0))*(-CS_45*max_lambda_44 + CF_45) +
            ((11.0/12.0))*(-CS_43*max_lambda_44 + CF_43))*omega_0 + (-(1.0/12.0)*(-CS_41*max_lambda_44 + CF_41) +
            ((1.0/6.0))*(-CS_43*max_lambda_44 + CF_43) + ((5.0/12.0))*(-CS_42*max_lambda_44 + CF_42))*omega_2 +
            (-(1.0/12.0)*(-CS_44*max_lambda_44 + CF_44) + ((1.0/6.0))*(-CS_42*max_lambda_44 + CF_42) +
            ((5.0/12.0))*(-CS_43*max_lambda_44 + CF_43))*omega_1 + Recon_4;

      Recon_0 = (-(1.0/60.0)*(-8*CF_01 - 8*CF_04 + 37*CF_02 + 37*CF_03 + CF_00 + CF_05) + Recon_0)*rj0;

      Recon_1 = (-(1.0/60.0)*(-8*CF_11 - 8*CF_14 + 37*CF_12 + 37*CF_13 + CF_10 + CF_15) + Recon_1)*rj1;

      Recon_2 = (-(1.0/60.0)*(-8*CF_21 - 8*CF_24 + 37*CF_22 + 37*CF_23 + CF_20 + CF_25) + Recon_2)*rj2;

      Recon_3 = (-(1.0/60.0)*(-8*CF_31 - 8*CF_34 + 37*CF_32 + 37*CF_33 + CF_30 + CF_35) + Recon_3)*rj3;

      Recon_4 = (-(1.0/60.0)*(-8*CF_41 - 8*CF_44 + 37*CF_42 + 37*CF_43 + CF_40 + CF_45) + Recon_4)*rj4;

       rho_RKold_B0(0,0,0) = 0.707106781186547*AVG_2_rho*Recon_3*inv_AVG_a +
            0.707106781186547*AVG_2_rho*Recon_4*inv_AVG_a + Recon_2;

       rhou0_RKold_B0(0,0,0) = AVG_2_u0*Recon_2 - AVG_2_rho*Recon_1 +
            0.707106781186547*AVG_2_rho*AVG_2_u0*Recon_3*inv_AVG_a +
            0.707106781186547*AVG_2_rho*AVG_2_u0*Recon_4*inv_AVG_a;

       rhou1_RKold_B0(0,0,0) = AVG_2_rho*Recon_0 + AVG_2_u1*Recon_2 +
            0.707106781186547*AVG_2_rho*AVG_2_u1*Recon_3*inv_AVG_a +
            0.707106781186547*AVG_2_rho*AVG_2_u1*Recon_4*inv_AVG_a;

       rhou2_RKold_B0(0,0,0) = AVG_2_u2*Recon_2 + 0.707106781186547*(-AVG_2_a + AVG_2_u2)*AVG_2_rho*Recon_4*inv_AVG_a +
            0.707106781186547*(AVG_2_a + AVG_2_u2)*AVG_2_rho*Recon_3*inv_AVG_a;

       rhoE_RKold_B0(0,0,0) = (((1.0/2.0))*(AVG_2_u0*AVG_2_u0) + ((1.0/2.0))*(AVG_2_u1*AVG_2_u1) +
            ((1.0/2.0))*(AVG_2_u2*AVG_2_u2))*Recon_2 + AVG_2_rho*AVG_2_u1*Recon_0 - AVG_2_rho*AVG_2_u0*Recon_1 +
            0.707106781186547*(((AVG_2_a*AVG_2_a) + ((1.0/2.0))*((AVG_2_u0*AVG_2_u0) + (AVG_2_u1*AVG_2_u1) +
            (AVG_2_u2*AVG_2_u2))*gamma_m1)*invgamma_m1 + AVG_2_a*AVG_2_u2)*AVG_2_rho*Recon_3*inv_AVG_a +
            0.707106781186547*(((AVG_2_a*AVG_2_a) + ((1.0/2.0))*((AVG_2_u0*AVG_2_u0) + (AVG_2_u1*AVG_2_u1) +
            (AVG_2_u2*AVG_2_u2))*gamma_m1)*invgamma_m1 - AVG_2_a*AVG_2_u2)*AVG_2_rho*Recon_4*inv_AVG_a;

   }

   else{

      rho_RKold_B0(0,0,0) = 0.0;

      rhou0_RKold_B0(0,0,0) = 0.0;

      rhou1_RKold_B0(0,0,0) = 0.0;

      rhou2_RKold_B0(0,0,0) = 0.0;

      rhoE_RKold_B0(0,0,0) = 0.0;

   }

}

 void opensbliblock00Kernel066(const ACC<double> &Residual0_B0, const ACC<double> &Residual1_B0, const ACC<double>
&Residual2_B0, const ACC<double> &Residual3_B0, const ACC<double> &Residual4_B0, const ACC<double> &kappa_B0, const
ACC<double> &rhoE_RKold_B0, const ACC<double> &rho_RKold_B0, const ACC<double> &rhou0_RKold_B0, const ACC<double>
&rhou1_RKold_B0, const ACC<double> &rhou2_RKold_B0, const ACC<double> &wk0_B0, const ACC<double> &wk1_B0, const
ACC<double> &wk2_B0, const ACC<double> &wk3_B0, const ACC<double> &wk4_B0, ACC<double> &WENO_filter_B0, ACC<double>
&rhoE_B0, ACC<double> &rho_B0, ACC<double> &rhou0_B0, ACC<double> &rhou1_B0, ACC<double> &rhou2_B0, const int *idx)
{
   double Grid_0 = 0.0;
   double Grid_1 = 0.0;
   double Grid_2 = 0.0;
   double Wall = 0.0;
   Grid_0 = idx[0];

   Grid_1 = idx[1];

   Grid_2 = idx[2];

   Wall = ((Grid_1 <= 5) ? (
   0
)
: (
   1
));

    WENO_filter_B0(0,0,0) = ((fmax(kappa_B0(0,0,0), fmax(kappa_B0(0,1,0), fmax(kappa_B0(1,0,0), fmax(kappa_B0(0,0,1),
      fmax(kappa_B0(2,0,0), fmax(kappa_B0(0,2,0), fmax(kappa_B0(-1,0,0), fmax(kappa_B0(0,-1,0), fmax(kappa_B0(0,0,-1),
      kappa_B0(0,0,2)))))))))) >= Ducros_select) ? (
   1
)
: (
   0.0
));

    rho_B0(0,0,0) = (-(-wk0_B0(-1,0,0) + wk0_B0(0,0,0))*inv_rfact0_block0 - (-rho_RKold_B0(0,0,-1) +
      rho_RKold_B0(0,0,0))*inv_rfact2_block0 - (-Residual0_B0(0,-1,0) +
      Residual0_B0(0,0,0))*inv_rfact1_block0*Wall)*dt*WENO_filter_B0(0,0,0) + rho_B0(0,0,0);

    rhou0_B0(0,0,0) = (-(-wk1_B0(-1,0,0) + wk1_B0(0,0,0))*inv_rfact0_block0 - (-rhou0_RKold_B0(0,0,-1) +
      rhou0_RKold_B0(0,0,0))*inv_rfact2_block0 - (-Residual1_B0(0,-1,0) +
      Residual1_B0(0,0,0))*inv_rfact1_block0*Wall)*dt*WENO_filter_B0(0,0,0) + rhou0_B0(0,0,0);

    rhou1_B0(0,0,0) = (-(-wk2_B0(-1,0,0) + wk2_B0(0,0,0))*inv_rfact0_block0 - (-rhou1_RKold_B0(0,0,-1) +
      rhou1_RKold_B0(0,0,0))*inv_rfact2_block0 - (-Residual2_B0(0,-1,0) +
      Residual2_B0(0,0,0))*inv_rfact1_block0*Wall)*dt*WENO_filter_B0(0,0,0) + rhou1_B0(0,0,0);

    rhou2_B0(0,0,0) = (-(-wk3_B0(-1,0,0) + wk3_B0(0,0,0))*inv_rfact0_block0 - (-rhou2_RKold_B0(0,0,-1) +
      rhou2_RKold_B0(0,0,0))*inv_rfact2_block0 - (-Residual3_B0(0,-1,0) +
      Residual3_B0(0,0,0))*inv_rfact1_block0*Wall)*dt*WENO_filter_B0(0,0,0) + rhou2_B0(0,0,0);

    rhoE_B0(0,0,0) = (-(-wk4_B0(-1,0,0) + wk4_B0(0,0,0))*inv_rfact0_block0 - (-rhoE_RKold_B0(0,0,-1) +
      rhoE_RKold_B0(0,0,0))*inv_rfact2_block0 - (-Residual4_B0(0,-1,0) +
      Residual4_B0(0,0,0))*inv_rfact1_block0*Wall)*dt*WENO_filter_B0(0,0,0) + rhoE_B0(0,0,0);

}

#endif
