//
// auto-generated by ops.py
//
__constant__ int dims_opensbliblock00Kernel028 [9][1];
static int dims_opensbliblock00Kernel028_h [9][1] = {0};

//user function
__device__

 void opensbliblock00Kernel028_gpu(const ACC<double> &rhoE_B0,
  const ACC<double> &p_B0,
  const ACC<double> &rho_B0,
  const ACC<double> &rhou0_B0,
  const ACC<double> &u0_B0,
  const ACC<double> &a_B0,
  ACC<double> &wk0_B0,
  ACC<double> &wk2_B0,
  ACC<double> &wk1_B0)
{

   double AVG_0_a = 0.0;
   double AVG_0_u0 = 0.0;
   double inv_AVG_a = 0.0;



   double AVG_0_0_LEV_10 = 0.0;
   double AVG_0_0_LEV_01 = 0.0;
   double AVG_0_0_LEV_21 = 0.0;
   double AVG_0_0_LEV_12 = 0.0;
   double AVG_0_0_LEV_22 = 0.0;
   double AVG_0_0_LEV_02 = 0.0;
   double AVG_0_0_LEV_00 = 0.0;
   double AVG_0_0_LEV_11 = 0.0;
   double AVG_0_0_LEV_20 = 0.0;

   double kappa = 1.5;
   double AVG_0_0_REV_00 = 0.0;
   double AVG_0_0_REV_01 = 0.0;
   double AVG_0_0_REV_02 = 0.0;
   double AVG_0_0_REV_10 = 0.0;
   double AVG_0_0_REV_11 = 0.0;
   double AVG_0_0_REV_12 = 0.0;
   double AVG_0_0_REV_20 = 0.0;
   double AVG_0_0_REV_21 = 0.0;
   double AVG_0_0_REV_22 = 0.0;

   double ws_0 = 0.0;
   double ws_1 = 0.0;
   double ws_2 = 0.0;

   double du_0 = 0.0;
   double du_1 = 0.0;
   double du_2 = 0.0;

   double alpha_00 = 0.0;
   double alpha_10 = 0.0;
   double alpha_20 = 0.0;
   double alpha_01 = 0.0;
   double alpha_11 = 0.0;
   double alpha_21 = 0.0;
   double alpha_02 = 0.0;
   double alpha_12 = 0.0;
   double alpha_22 = 0.0;

   double lambda = 0.0;
   double sigma_0 = 0.0;
   double sigma_1 = 0.0;
   double sigma_2 = 0.0;

   double S = 0.0;
   double g_00 = 0.0;
   double g_10 = 0.0;
   double g_20 = 0.0;
   double g_01 = 0.0;
   double g_11 = 0.0;
   double g_21 = 0.0;

   double gamma_0 = 0.0;
   double gamma_1 = 0.0;
   double gamma_2 = 0.0;

   double phi_0 = 0.0;
   double phi_1 = 0.0;
   double phi_2 = 0.0;

   double theta_hat_00 = 0.0;
   double theta_hat_10 = 0.0;
   double theta_hat_20 = 0.0;
   double theta_hat_01 = 0.0;
   double theta_hat_11 = 0.0;
   double theta_hat_21 = 0.0;
   double theta_0 = 0.0;
   double theta_1 = 0.0;
   double theta_2 = 0.0;

   double phi_star_0 = 0.0;
   double phi_star_1 = 0.0;
   double phi_star_2 = 0.0;

   double eps = 0.00000001;
   double delta = 0.5;


   AVG_0_a = (rc1)*(a_B0(-1) + a_B0(0));

   AVG_0_u0 = (rc1)*(u0_B0(-1) + u0_B0(0));

   inv_AVG_a = 1.0/AVG_0_a;


   AVG_0_0_LEV_00 = (rc4)*AVG_0_u0*inv_AVG_a*(gama*AVG_0_a*AVG_0_u0*pow(inv_AVG_a, 2) - AVG_0_a*AVG_0_u0*pow(inv_AVG_a,
      2) + 2);

   AVG_0_0_LEV_01 = -rc1*inv_AVG_a*(gama*AVG_0_a*AVG_0_u0*pow(inv_AVG_a, 2) - AVG_0_a*AVG_0_u0*pow(inv_AVG_a, 2) + 1);

   AVG_0_0_LEV_02 = (rc1)*gamma_m1*pow(inv_AVG_a, 2);

   AVG_0_0_LEV_10 = -rc1*(gama*pow(AVG_0_u0, 2)*pow(inv_AVG_a, 2) - pow(AVG_0_u0, 2)*pow(inv_AVG_a, 2) - 2);

   AVG_0_0_LEV_11 = gamma_m1*AVG_0_u0*pow(inv_AVG_a, 2);

   AVG_0_0_LEV_12 = -gamma_m1*pow(inv_AVG_a, 2);

   AVG_0_0_LEV_20 = (rc4)*AVG_0_u0*inv_AVG_a*(gama*AVG_0_a*AVG_0_u0*pow(inv_AVG_a, 2) - AVG_0_a*AVG_0_u0*pow(inv_AVG_a,
      2) - 2);

   AVG_0_0_LEV_21 = -rc1*inv_AVG_a*(gama*AVG_0_a*AVG_0_u0*pow(inv_AVG_a, 2) - AVG_0_a*AVG_0_u0*pow(inv_AVG_a, 2) - 1);

   AVG_0_0_LEV_22 = (rc1)*gamma_m1*pow(inv_AVG_a, 2);


   du_0 = rho_B0(0) - rho_B0(-1);
   du_1 = rhou0_B0(0) - rhou0_B0(-1);
   du_2 = rhoE_B0(0) - rhoE_B0(-1);


   alpha_00 = AVG_0_0_LEV_00*du_0 + AVG_0_0_LEV_01*du_1 + AVG_0_0_LEV_02*du_2;
   alpha_10 = AVG_0_0_LEV_10*du_0 + AVG_0_0_LEV_11*du_1 + AVG_0_0_LEV_12*du_2;
   alpha_20 = AVG_0_0_LEV_20*du_0 + AVG_0_0_LEV_21*du_1 + AVG_0_0_LEV_22*du_2;



   AVG_0_a = (rc1)*(a_B0(0) + a_B0(1));

   AVG_0_u0 = (rc1)*(u0_B0(0) + u0_B0(1));

   inv_AVG_a = 1.0/AVG_0_a;


   AVG_0_0_LEV_00 = (rc4)*AVG_0_u0*inv_AVG_a*(gama*AVG_0_a*AVG_0_u0*pow(inv_AVG_a, 2) - AVG_0_a*AVG_0_u0*pow(inv_AVG_a,
      2) + 2);

   AVG_0_0_LEV_01 = -rc1*inv_AVG_a*(gama*AVG_0_a*AVG_0_u0*pow(inv_AVG_a, 2) - AVG_0_a*AVG_0_u0*pow(inv_AVG_a, 2) + 1);

   AVG_0_0_LEV_02 = (rc1)*gamma_m1*pow(inv_AVG_a, 2);

   AVG_0_0_LEV_10 = -rc1*(gama*pow(AVG_0_u0, 2)*pow(inv_AVG_a, 2) - pow(AVG_0_u0, 2)*pow(inv_AVG_a, 2) - 2);

   AVG_0_0_LEV_11 = gamma_m1*AVG_0_u0*pow(inv_AVG_a, 2);

   AVG_0_0_LEV_12 = -gamma_m1*pow(inv_AVG_a, 2);

   AVG_0_0_LEV_20 = (rc4)*AVG_0_u0*inv_AVG_a*(gama*AVG_0_a*AVG_0_u0*pow(inv_AVG_a, 2) - AVG_0_a*AVG_0_u0*pow(inv_AVG_a,
      2) - 2);

   AVG_0_0_LEV_21 = -rc1*inv_AVG_a*(gama*AVG_0_a*AVG_0_u0*pow(inv_AVG_a, 2) - AVG_0_a*AVG_0_u0*pow(inv_AVG_a, 2) - 1);

   AVG_0_0_LEV_22 = (rc1)*gamma_m1*pow(inv_AVG_a, 2);

   du_0 = rho_B0(1) - rho_B0(0);
   du_1 = rhou0_B0(1) - rhou0_B0(0);
   du_2 = rhoE_B0(1) - rhoE_B0(0);

   alpha_01 = AVG_0_0_LEV_00*du_0 + AVG_0_0_LEV_01*du_1 + AVG_0_0_LEV_02*du_2;
   alpha_11 = AVG_0_0_LEV_10*du_0 + AVG_0_0_LEV_11*du_1 + AVG_0_0_LEV_12*du_2;
   alpha_21 = AVG_0_0_LEV_20*du_0 + AVG_0_0_LEV_21*du_1 + AVG_0_0_LEV_22*du_2;


   AVG_0_0_REV_00 = 1;
   AVG_0_0_REV_01 = 1;
   AVG_0_0_REV_02 = 1;
   AVG_0_0_REV_10 = AVG_0_u0-inv_AVG_a;
   AVG_0_0_REV_11 = AVG_0_u0;
   AVG_0_0_REV_12 = AVG_0_u0+inv_AVG_a;
   AVG_0_0_REV_20 = pow(AVG_0_a,2) / gamma_m1 + 0.5*pow(AVG_0_u0,2) - AVG_0_u0*AVG_0_a;
   AVG_0_0_REV_21 = 0.5*pow(AVG_0_u0,2);
   AVG_0_0_REV_22 = pow(AVG_0_a,2)*(1/gamma_m1+ AVG_0_u0*inv_AVG_a);


   ws_0 = AVG_0_u0 - AVG_0_a;
   ws_1 = AVG_0_u0;
   ws_2 = AVG_0_u0 + AVG_0_a;



   AVG_0_a = (rc1)*(a_B0(1) + a_B0(2));

   AVG_0_u0 = (rc1)*(u0_B0(1) + u0_B0(2));

   inv_AVG_a = 1.0/AVG_0_a;


   AVG_0_0_LEV_00 = (rc4)*AVG_0_u0*inv_AVG_a*(gama*AVG_0_a*AVG_0_u0*pow(inv_AVG_a, 2) - AVG_0_a*AVG_0_u0*pow(inv_AVG_a,
      2) + 2);

   AVG_0_0_LEV_01 = -rc1*inv_AVG_a*(gama*AVG_0_a*AVG_0_u0*pow(inv_AVG_a, 2) - AVG_0_a*AVG_0_u0*pow(inv_AVG_a, 2) + 1);

   AVG_0_0_LEV_02 = (rc1)*gamma_m1*pow(inv_AVG_a, 2);

   AVG_0_0_LEV_10 = -rc1*(gama*pow(AVG_0_u0, 2)*pow(inv_AVG_a, 2) - pow(AVG_0_u0, 2)*pow(inv_AVG_a, 2) - 2);

   AVG_0_0_LEV_11 = gamma_m1*AVG_0_u0*pow(inv_AVG_a, 2);

   AVG_0_0_LEV_12 = -gamma_m1*pow(inv_AVG_a, 2);

   AVG_0_0_LEV_20 = (rc4)*AVG_0_u0*inv_AVG_a*(gama*AVG_0_a*AVG_0_u0*pow(inv_AVG_a, 2) - AVG_0_a*AVG_0_u0*pow(inv_AVG_a,
      2) - 2);

   AVG_0_0_LEV_21 = -rc1*inv_AVG_a*(gama*AVG_0_a*AVG_0_u0*pow(inv_AVG_a, 2) - AVG_0_a*AVG_0_u0*pow(inv_AVG_a, 2) - 1);

   AVG_0_0_LEV_22 = (rc1)*gamma_m1*pow(inv_AVG_a, 2);

   du_0 = rho_B0(2) - rho_B0(1);
   du_1 = rhou0_B0(2) - rhou0_B0(1);
   du_2 = rhoE_B0(2) - rhoE_B0(1);

   alpha_02 = AVG_0_0_LEV_00*du_0 + AVG_0_0_LEV_01*du_1 + AVG_0_0_LEV_02*du_2;
   alpha_12 = AVG_0_0_LEV_10*du_0 + AVG_0_0_LEV_11*du_1 + AVG_0_0_LEV_12*du_2;
   alpha_22 = AVG_0_0_LEV_20*du_0 + AVG_0_0_LEV_21*du_1 + AVG_0_0_LEV_22*du_2;




   lambda = dt / Delta0block0;









   sigma_0 = fabs(alpha_01) >= delta ? fabs(alpha_01) : (pow(alpha_01,2) + pow(delta,2)) / (2*delta);
   sigma_1 = fabs(alpha_11) >= delta ? fabs(alpha_11) : (pow(alpha_11,2) + pow(delta,2)) / (2*delta);
   sigma_2 = fabs(alpha_21) >= delta ? fabs(alpha_21) : (pow(alpha_21,2) + pow(delta,2)) / (2*delta);




   S = alpha_01 < 0 ? -1 : (alpha_01 > 0 ? 1 : 0);
   g_00 = S*fmax(fmax(0,fmin(2*fabs(alpha_01), S*alpha_00)),fmin(fabs(alpha_01),2*S*alpha_00));

   S = alpha_11 < 0 ? -1 : (alpha_11 > 0 ? 1 : 0);
   g_10 = S*fmax(fmax(0,fmin(2*fabs(alpha_11), S*alpha_10)),fmin(fabs(alpha_11),2*S*alpha_10));

   S = alpha_21 < 0 ? -1 : (alpha_21 > 0 ? 1 : 0);
   g_20 = S*fmax(fmax(0,fmin(2*fabs(alpha_21), S*alpha_20)),fmin(fabs(alpha_21),2*S*alpha_20));

   S = alpha_02 < 0 ? -1 : (alpha_02 > 0 ? 1 : 0);
   g_01 = S*fmax(fmax(0,fmin(2*fabs(alpha_02), S*alpha_01)),fmin(fabs(alpha_02),2*S*alpha_01));

   S = alpha_12 < 0 ? -1 : (alpha_12 > 0 ? 1 : 0);
   g_11 = S*fmax(fmax(0,fmin(2*fabs(alpha_12), S*alpha_11)),fmin(fabs(alpha_12),2*S*alpha_11));

   S = alpha_22 < 0 ? -1 : (alpha_22 > 0 ? 1 : 0);
   g_21 = S*fmax(fmax(0,fmin(2*fabs(alpha_22), S*alpha_21)),fmin(fabs(alpha_22),2*S*alpha_21));



   gamma_0 = (alpha_00 == 0) ? 0 : sigma_0*alpha_01*(g_01 - g_00) / (pow(alpha_01,2)+eps);
   gamma_1 = (alpha_01 == 0) ? 0 : sigma_1*alpha_11*(g_11 - g_10) / (pow(alpha_11,2)+eps);
   gamma_2 = (alpha_02 == 0) ? 0 : sigma_2*alpha_21*(g_21 - g_20) / (pow(alpha_21,2)+eps);





   phi_0 = -sigma_0*(g_01 + g_00) + (fabs(ws_0 + gamma_0) - lambda*pow(ws_0,2))*alpha_01;
   phi_1 = -sigma_1*(g_11 + g_10) + (fabs(ws_1 + gamma_1) - lambda*pow(ws_1,2))*alpha_11;
   phi_2 = -sigma_2*(g_21 + g_20) + (fabs(ws_2 + gamma_2) - lambda*pow(ws_2,2))*alpha_21;





   theta_hat_00 = pow(fabs((fabs(alpha_01) - fabs(alpha_00)) / (fabs(alpha_01) + fabs(alpha_00)+eps)),2);
   theta_hat_10 = pow(fabs((fabs(alpha_11) - fabs(alpha_10)) / (fabs(alpha_11) + fabs(alpha_10)+eps)),2);
   theta_hat_20 = pow(fabs((fabs(alpha_21) - fabs(alpha_20)) / (fabs(alpha_21) + fabs(alpha_20)+eps)),2);


   theta_hat_01 = pow(fabs((fabs(alpha_02) - fabs(alpha_01)) / (fabs(alpha_02) + fabs(alpha_01)+eps)),2);
   theta_hat_11 = pow(fabs((fabs(alpha_12) - fabs(alpha_11)) / (fabs(alpha_12) + fabs(alpha_11)+eps)),2);
   theta_hat_21 = pow(fabs((fabs(alpha_22) - fabs(alpha_21)) / (fabs(alpha_22) + fabs(alpha_21)+eps)),2);


   theta_0 =fmax(theta_hat_00, theta_hat_01);
   theta_1 =fmax(theta_hat_10, theta_hat_11);
   theta_2 =fmax(theta_hat_20, theta_hat_21);



   phi_star_0 = kappa*theta_0*phi_0;
   phi_star_1 = kappa*theta_1*phi_1;
   phi_star_2 = kappa*theta_2*phi_2;



   wk0_B0(0) = 0.5*(AVG_0_0_REV_00*phi_star_0 + AVG_0_0_REV_01*phi_star_1 + AVG_0_0_REV_02*phi_star_2);
   wk1_B0(0) = 0.5*(AVG_0_0_REV_10*phi_star_0 + AVG_0_0_REV_11*phi_star_1 + AVG_0_0_REV_12*phi_star_2);
   wk2_B0(0) = 0.5*(AVG_0_0_REV_20*phi_star_0 + AVG_0_0_REV_21*phi_star_1 + AVG_0_0_REV_22*phi_star_2);


}



__global__ void ops_opensbliblock00Kernel028(
double* __restrict arg0,
double* __restrict arg1,
double* __restrict arg2,
double* __restrict arg3,
double* __restrict arg4,
double* __restrict arg5,
double* __restrict arg6,
double* __restrict arg7,
double* __restrict arg8,
int size0 ){


  int idx_x = blockDim.x * blockIdx.x + threadIdx.x;

  arg0 += idx_x * 1*1;
  arg1 += idx_x * 1*1;
  arg2 += idx_x * 1*1;
  arg3 += idx_x * 1*1;
  arg4 += idx_x * 1*1;
  arg5 += idx_x * 1*1;
  arg6 += idx_x * 1*1;
  arg7 += idx_x * 1*1;
  arg8 += idx_x * 1*1;

  if (idx_x < size0) {
    const ACC<double> argp0(arg0);
    const ACC<double> argp1(arg1);
    const ACC<double> argp2(arg2);
    const ACC<double> argp3(arg3);
    const ACC<double> argp4(arg4);
    const ACC<double> argp5(arg5);
    ACC<double> argp6(arg6);
    ACC<double> argp7(arg7);
    ACC<double> argp8(arg8);
    opensbliblock00Kernel028_gpu(argp0, argp1, argp2, argp3,
                   argp4, argp5, argp6, argp7, argp8);
  }

}

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel028(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7, ops_arg arg8) {
#else
void ops_par_loop_opensbliblock00Kernel028_execute(ops_kernel_descriptor *desc) {
  int dim = desc->dim;
  #if OPS_MPI
  ops_block block = desc->block;
  #endif
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  #endif

  //Timing
  double t1,t2,c1,c2;

  ops_arg args[9] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8};


  #if CHECKPOINTING && !OPS_LAZY
  if (!ops_checkpointing_before(args,9,range,22)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,22,"opensbliblock00Kernel028");
    block->instance->OPS_kernels[22].count++;
    ops_timers_core(&c1,&t1);
  }

  //compute locally allocated range for the sub-block
  int start[1];
  int end[1];
  #if OPS_MPI && !OPS_LAZY
  sub_block_list sb = OPS_sub_block_list[block->index];
  #endif //OPS_MPI

  #ifdef OPS_MPI
  int arg_idx[1];
  #endif
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<1; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 9,block, range, start, end, arg_idx) < 0) return;
  #endif

  int xdim0 = args[0].dat->size[0];
  int xdim1 = args[1].dat->size[0];
  int xdim2 = args[2].dat->size[0];
  int xdim3 = args[3].dat->size[0];
  int xdim4 = args[4].dat->size[0];
  int xdim5 = args[5].dat->size[0];
  int xdim6 = args[6].dat->size[0];
  int xdim7 = args[7].dat->size[0];
  int xdim8 = args[8].dat->size[0];

  if (xdim0 != dims_opensbliblock00Kernel028_h[0][0] || xdim1 != dims_opensbliblock00Kernel028_h[1][0] || xdim2 != dims_opensbliblock00Kernel028_h[2][0] || xdim3 != dims_opensbliblock00Kernel028_h[3][0] || xdim4 != dims_opensbliblock00Kernel028_h[4][0] || xdim5 != dims_opensbliblock00Kernel028_h[5][0] || xdim6 != dims_opensbliblock00Kernel028_h[6][0] || xdim7 != dims_opensbliblock00Kernel028_h[7][0] || xdim8 != dims_opensbliblock00Kernel028_h[8][0]) {
    dims_opensbliblock00Kernel028_h[0][0] = xdim0;
    dims_opensbliblock00Kernel028_h[1][0] = xdim1;
    dims_opensbliblock00Kernel028_h[2][0] = xdim2;
    dims_opensbliblock00Kernel028_h[3][0] = xdim3;
    dims_opensbliblock00Kernel028_h[4][0] = xdim4;
    dims_opensbliblock00Kernel028_h[5][0] = xdim5;
    dims_opensbliblock00Kernel028_h[6][0] = xdim6;
    dims_opensbliblock00Kernel028_h[7][0] = xdim7;
    dims_opensbliblock00Kernel028_h[8][0] = xdim8;
    cutilSafeCall(block->instance->ostream(), cudaMemcpyToSymbol( dims_opensbliblock00Kernel028, dims_opensbliblock00Kernel028_h, sizeof(dims_opensbliblock00Kernel028)));
  }



  int x_size = MAX(0,end[0]-start[0]);

  dim3 grid( (x_size-1)/block->instance->OPS_block_size_x+ 1, 1, 1);
  dim3 tblock(block->instance->OPS_block_size_x,1,1);



  long long int dat0 = (block->instance->OPS_soa ? args[0].dat->type_size : args[0].dat->elem_size);
  long long int dat1 = (block->instance->OPS_soa ? args[1].dat->type_size : args[1].dat->elem_size);
  long long int dat2 = (block->instance->OPS_soa ? args[2].dat->type_size : args[2].dat->elem_size);
  long long int dat3 = (block->instance->OPS_soa ? args[3].dat->type_size : args[3].dat->elem_size);
  long long int dat4 = (block->instance->OPS_soa ? args[4].dat->type_size : args[4].dat->elem_size);
  long long int dat5 = (block->instance->OPS_soa ? args[5].dat->type_size : args[5].dat->elem_size);
  long long int dat6 = (block->instance->OPS_soa ? args[6].dat->type_size : args[6].dat->elem_size);
  long long int dat7 = (block->instance->OPS_soa ? args[7].dat->type_size : args[7].dat->elem_size);
  long long int dat8 = (block->instance->OPS_soa ? args[8].dat->type_size : args[8].dat->elem_size);

  char *p_a[9];

  //set up initial pointers
  long long int base0 = args[0].dat->base_offset + 
           dat0 * 1 * (start[0] * args[0].stencil->stride[0]);
  p_a[0] = (char *)args[0].data_d + base0;

  long long int base1 = args[1].dat->base_offset + 
           dat1 * 1 * (start[0] * args[1].stencil->stride[0]);
  p_a[1] = (char *)args[1].data_d + base1;

  long long int base2 = args[2].dat->base_offset + 
           dat2 * 1 * (start[0] * args[2].stencil->stride[0]);
  p_a[2] = (char *)args[2].data_d + base2;

  long long int base3 = args[3].dat->base_offset + 
           dat3 * 1 * (start[0] * args[3].stencil->stride[0]);
  p_a[3] = (char *)args[3].data_d + base3;

  long long int base4 = args[4].dat->base_offset + 
           dat4 * 1 * (start[0] * args[4].stencil->stride[0]);
  p_a[4] = (char *)args[4].data_d + base4;

  long long int base5 = args[5].dat->base_offset + 
           dat5 * 1 * (start[0] * args[5].stencil->stride[0]);
  p_a[5] = (char *)args[5].data_d + base5;

  long long int base6 = args[6].dat->base_offset + 
           dat6 * 1 * (start[0] * args[6].stencil->stride[0]);
  p_a[6] = (char *)args[6].data_d + base6;

  long long int base7 = args[7].dat->base_offset + 
           dat7 * 1 * (start[0] * args[7].stencil->stride[0]);
  p_a[7] = (char *)args[7].data_d + base7;

  long long int base8 = args[8].dat->base_offset + 
           dat8 * 1 * (start[0] * args[8].stencil->stride[0]);
  p_a[8] = (char *)args[8].data_d + base8;


  #ifndef OPS_LAZY
  ops_H_D_exchanges_device(args, 9);
  ops_halo_exchanges(args,9,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[22].mpi_time += t2-t1;
  }


  //call kernel wrapper function, passing in pointers to data
  if (x_size > 0)
    ops_opensbliblock00Kernel028<<<grid, tblock >>> (  (double *)p_a[0], (double *)p_a[1],
         (double *)p_a[2], (double *)p_a[3],
         (double *)p_a[4], (double *)p_a[5],
         (double *)p_a[6], (double *)p_a[7],
         (double *)p_a[8],x_size);

  cutilSafeCall(block->instance->ostream(), cudaGetLastError());

  if (block->instance->OPS_diags>1) {
    cutilSafeCall(block->instance->ostream(), cudaDeviceSynchronize());
    ops_timers_core(&c1,&t1);
    block->instance->OPS_kernels[22].time += t1-t2;
  }

  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 9);
  ops_set_halo_dirtybit3(&args[6],range);
  ops_set_halo_dirtybit3(&args[7],range);
  ops_set_halo_dirtybit3(&args[8],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[22].mpi_time += t2-t1;
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg7);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg8);
  }
}

#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel028(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3, ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7, ops_arg arg8) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)calloc(1,sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 1;
  desc->index = 22;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 22;
  for ( int i=0; i<2; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 9;
  desc->args = (ops_arg*)ops_malloc(9*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg2.dat->index;
  desc->args[3] = arg3;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg3.dat->index;
  desc->args[4] = arg4;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg4.dat->index;
  desc->args[5] = arg5;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg5.dat->index;
  desc->args[6] = arg6;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg6.dat->index;
  desc->args[7] = arg7;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg7.dat->index;
  desc->args[8] = arg8;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg8.dat->index;
  desc->function = ops_par_loop_opensbliblock00Kernel028_execute;
  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,22,"opensbliblock00Kernel028");
  }
  ops_enqueue_kernel(desc);
}
#endif
