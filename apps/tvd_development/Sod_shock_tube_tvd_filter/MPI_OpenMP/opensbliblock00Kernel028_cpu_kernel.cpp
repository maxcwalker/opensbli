//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel028(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8) {
#else
void ops_par_loop_opensbliblock00Kernel028_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[9] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,9,range,22)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,22,"opensbliblock00Kernel028");
    block->instance->OPS_kernels[22].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "opensbliblock00Kernel028");
  #endif


  //compute locally allocated range for the sub-block
  int start[1];
  int end[1];
  #if defined(OPS_MPI) && !defined(OPS_LAZY)
  int arg_idx[1];
  #endif
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<1; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 9,block, range, start, end, arg_idx) < 0) return;
  #endif


  //initialize global variable with the dimension of dats

  //set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset;
  double * __restrict__ rhoE_B0_p = (double *)(args[0].data + base0);

  int base1 = args[1].dat->base_offset;
  double * __restrict__ p_B0_p = (double *)(args[1].data + base1);

  int base2 = args[2].dat->base_offset;
  double * __restrict__ rho_B0_p = (double *)(args[2].data + base2);

  int base3 = args[3].dat->base_offset;
  double * __restrict__ rhou0_B0_p = (double *)(args[3].data + base3);

  int base4 = args[4].dat->base_offset;
  double * __restrict__ u0_B0_p = (double *)(args[4].data + base4);

  int base5 = args[5].dat->base_offset;
  double * __restrict__ a_B0_p = (double *)(args[5].data + base5);

  int base6 = args[6].dat->base_offset;
  double * __restrict__ wk0_B0_p = (double *)(args[6].data + base6);

  int base7 = args[7].dat->base_offset;
  double * __restrict__ wk2_B0_p = (double *)(args[7].data + base7);

  int base8 = args[8].dat->base_offset;
  double * __restrict__ wk1_B0_p = (double *)(args[8].data + base8);



  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_host(args, 9);
  ops_halo_exchanges(args,9,range);
  ops_H_D_exchanges_host(args, 9);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[22].mpi_time += __t1-__t2;
  }

  #pragma omp parallel for
  for ( int n_x=start[0]; n_x<end[0]; n_x++ ){
    const ACC<double> rhoE_B0(rhoE_B0_p + n_x*1);
    const ACC<double> p_B0(p_B0_p + n_x*1);
    const ACC<double> rho_B0(rho_B0_p + n_x*1);
    const ACC<double> rhou0_B0(rhou0_B0_p + n_x*1);
    const ACC<double> u0_B0(u0_B0_p + n_x*1);
    const ACC<double> a_B0(a_B0_p + n_x*1);
    ACC<double> wk0_B0(wk0_B0_p + n_x*1);
    ACC<double> wk2_B0(wk2_B0_p + n_x*1);
    ACC<double> wk1_B0(wk1_B0_p + n_x*1);
    

   double AVG_0_a = 0.0;
   double AVG_0_u0 = 0.0;
   double inv_AVG_a = 0.0;



   double AVG_0_0_LEV_10 = 0.0;
   double AVG_0_0_LEV_01 = 0.0;
   double AVG_0_0_LEV_21 = 0.0;
   double AVG_0_0_LEV_12 = 0.0;
   double AVG_0_0_LEV_22 = 0.0;
   double AVG_0_0_LEV_02 = 0.0;
   double AVG_0_0_LEV_00 = 0.0;
   double AVG_0_0_LEV_11 = 0.0;
   double AVG_0_0_LEV_20 = 0.0;

   double kappa = 1.5;
   double AVG_0_0_REV_00 = 0.0;
   double AVG_0_0_REV_01 = 0.0;
   double AVG_0_0_REV_02 = 0.0;
   double AVG_0_0_REV_10 = 0.0;
   double AVG_0_0_REV_11 = 0.0;
   double AVG_0_0_REV_12 = 0.0;
   double AVG_0_0_REV_20 = 0.0;
   double AVG_0_0_REV_21 = 0.0;
   double AVG_0_0_REV_22 = 0.0;

   double ws_0 = 0.0;
   double ws_1 = 0.0;
   double ws_2 = 0.0;

   double du_0 = 0.0;
   double du_1 = 0.0;
   double du_2 = 0.0;

   double alpha_00 = 0.0;
   double alpha_10 = 0.0;
   double alpha_20 = 0.0;
   double alpha_01 = 0.0;
   double alpha_11 = 0.0;
   double alpha_21 = 0.0;
   double alpha_02 = 0.0;
   double alpha_12 = 0.0;
   double alpha_22 = 0.0;

   double lambda = 0.0;
   double sigma_0 = 0.0;
   double sigma_1 = 0.0;
   double sigma_2 = 0.0;

   double S = 0.0;
   double g_00 = 0.0;
   double g_10 = 0.0;
   double g_20 = 0.0;
   double g_01 = 0.0;
   double g_11 = 0.0;
   double g_21 = 0.0;

   double gamma_0 = 0.0;
   double gamma_1 = 0.0;
   double gamma_2 = 0.0;

   double phi_0 = 0.0;
   double phi_1 = 0.0;
   double phi_2 = 0.0;

   double theta_hat_00 = 0.0;
   double theta_hat_10 = 0.0;
   double theta_hat_20 = 0.0;
   double theta_hat_01 = 0.0;
   double theta_hat_11 = 0.0;
   double theta_hat_21 = 0.0;
   double theta_0 = 0.0;
   double theta_1 = 0.0;
   double theta_2 = 0.0;

   double phi_star_0 = 0.0;
   double phi_star_1 = 0.0;
   double phi_star_2 = 0.0;

   double eps = 0.00000001;
   double delta = 0.5;


   AVG_0_a = (rc1)*(a_B0(-1) + a_B0(0));

   AVG_0_u0 = (rc1)*(u0_B0(-1) + u0_B0(0));

   inv_AVG_a = 1.0/AVG_0_a;


   AVG_0_0_LEV_00 = (rc4)*AVG_0_u0*inv_AVG_a*(gama*AVG_0_a*AVG_0_u0*pow(inv_AVG_a, 2) - AVG_0_a*AVG_0_u0*pow(inv_AVG_a,
      2) + 2);

   AVG_0_0_LEV_01 = -rc1*inv_AVG_a*(gama*AVG_0_a*AVG_0_u0*pow(inv_AVG_a, 2) - AVG_0_a*AVG_0_u0*pow(inv_AVG_a, 2) + 1);

   AVG_0_0_LEV_02 = (rc1)*gamma_m1*pow(inv_AVG_a, 2);

   AVG_0_0_LEV_10 = -rc1*(gama*pow(AVG_0_u0, 2)*pow(inv_AVG_a, 2) - pow(AVG_0_u0, 2)*pow(inv_AVG_a, 2) - 2);

   AVG_0_0_LEV_11 = gamma_m1*AVG_0_u0*pow(inv_AVG_a, 2);

   AVG_0_0_LEV_12 = -gamma_m1*pow(inv_AVG_a, 2);

   AVG_0_0_LEV_20 = (rc4)*AVG_0_u0*inv_AVG_a*(gama*AVG_0_a*AVG_0_u0*pow(inv_AVG_a, 2) - AVG_0_a*AVG_0_u0*pow(inv_AVG_a,
      2) - 2);

   AVG_0_0_LEV_21 = -rc1*inv_AVG_a*(gama*AVG_0_a*AVG_0_u0*pow(inv_AVG_a, 2) - AVG_0_a*AVG_0_u0*pow(inv_AVG_a, 2) - 1);

   AVG_0_0_LEV_22 = (rc1)*gamma_m1*pow(inv_AVG_a, 2);


   du_0 = rho_B0(0) - rho_B0(-1);
   du_1 = rhou0_B0(0) - rhou0_B0(-1);
   du_2 = rhoE_B0(0) - rhoE_B0(-1);


   alpha_00 = AVG_0_0_LEV_00*du_0 + AVG_0_0_LEV_01*du_1 + AVG_0_0_LEV_02*du_2;
   alpha_10 = AVG_0_0_LEV_10*du_0 + AVG_0_0_LEV_11*du_1 + AVG_0_0_LEV_12*du_2;
   alpha_20 = AVG_0_0_LEV_20*du_0 + AVG_0_0_LEV_21*du_1 + AVG_0_0_LEV_22*du_2;



   AVG_0_a = (rc1)*(a_B0(0) + a_B0(1));

   AVG_0_u0 = (rc1)*(u0_B0(0) + u0_B0(1));

   inv_AVG_a = 1.0/AVG_0_a;


   AVG_0_0_LEV_00 = (rc4)*AVG_0_u0*inv_AVG_a*(gama*AVG_0_a*AVG_0_u0*pow(inv_AVG_a, 2) - AVG_0_a*AVG_0_u0*pow(inv_AVG_a,
      2) + 2);

   AVG_0_0_LEV_01 = -rc1*inv_AVG_a*(gama*AVG_0_a*AVG_0_u0*pow(inv_AVG_a, 2) - AVG_0_a*AVG_0_u0*pow(inv_AVG_a, 2) + 1);

   AVG_0_0_LEV_02 = (rc1)*gamma_m1*pow(inv_AVG_a, 2);

   AVG_0_0_LEV_10 = -rc1*(gama*pow(AVG_0_u0, 2)*pow(inv_AVG_a, 2) - pow(AVG_0_u0, 2)*pow(inv_AVG_a, 2) - 2);

   AVG_0_0_LEV_11 = gamma_m1*AVG_0_u0*pow(inv_AVG_a, 2);

   AVG_0_0_LEV_12 = -gamma_m1*pow(inv_AVG_a, 2);

   AVG_0_0_LEV_20 = (rc4)*AVG_0_u0*inv_AVG_a*(gama*AVG_0_a*AVG_0_u0*pow(inv_AVG_a, 2) - AVG_0_a*AVG_0_u0*pow(inv_AVG_a,
      2) - 2);

   AVG_0_0_LEV_21 = -rc1*inv_AVG_a*(gama*AVG_0_a*AVG_0_u0*pow(inv_AVG_a, 2) - AVG_0_a*AVG_0_u0*pow(inv_AVG_a, 2) - 1);

   AVG_0_0_LEV_22 = (rc1)*gamma_m1*pow(inv_AVG_a, 2);

   du_0 = rho_B0(1) - rho_B0(0);
   du_1 = rhou0_B0(1) - rhou0_B0(0);
   du_2 = rhoE_B0(1) - rhoE_B0(0);

   alpha_01 = AVG_0_0_LEV_00*du_0 + AVG_0_0_LEV_01*du_1 + AVG_0_0_LEV_02*du_2;
   alpha_11 = AVG_0_0_LEV_10*du_0 + AVG_0_0_LEV_11*du_1 + AVG_0_0_LEV_12*du_2;
   alpha_21 = AVG_0_0_LEV_20*du_0 + AVG_0_0_LEV_21*du_1 + AVG_0_0_LEV_22*du_2;


   AVG_0_0_REV_00 = 1;
   AVG_0_0_REV_01 = 1;
   AVG_0_0_REV_02 = 1;
   AVG_0_0_REV_10 = AVG_0_u0-inv_AVG_a;
   AVG_0_0_REV_11 = AVG_0_u0;
   AVG_0_0_REV_12 = AVG_0_u0+inv_AVG_a;
   AVG_0_0_REV_20 = pow(AVG_0_a,2) / gamma_m1 + 0.5*pow(AVG_0_u0,2) - AVG_0_u0*AVG_0_a;
   AVG_0_0_REV_21 = 0.5*pow(AVG_0_u0,2);
   AVG_0_0_REV_22 = pow(AVG_0_a,2)*(1/gamma_m1+ AVG_0_u0*inv_AVG_a);


   ws_0 = AVG_0_u0 - AVG_0_a;
   ws_1 = AVG_0_u0;
   ws_2 = AVG_0_u0 + AVG_0_a;



   AVG_0_a = (rc1)*(a_B0(1) + a_B0(2));

   AVG_0_u0 = (rc1)*(u0_B0(1) + u0_B0(2));

   inv_AVG_a = 1.0/AVG_0_a;


   AVG_0_0_LEV_00 = (rc4)*AVG_0_u0*inv_AVG_a*(gama*AVG_0_a*AVG_0_u0*pow(inv_AVG_a, 2) - AVG_0_a*AVG_0_u0*pow(inv_AVG_a,
      2) + 2);

   AVG_0_0_LEV_01 = -rc1*inv_AVG_a*(gama*AVG_0_a*AVG_0_u0*pow(inv_AVG_a, 2) - AVG_0_a*AVG_0_u0*pow(inv_AVG_a, 2) + 1);

   AVG_0_0_LEV_02 = (rc1)*gamma_m1*pow(inv_AVG_a, 2);

   AVG_0_0_LEV_10 = -rc1*(gama*pow(AVG_0_u0, 2)*pow(inv_AVG_a, 2) - pow(AVG_0_u0, 2)*pow(inv_AVG_a, 2) - 2);

   AVG_0_0_LEV_11 = gamma_m1*AVG_0_u0*pow(inv_AVG_a, 2);

   AVG_0_0_LEV_12 = -gamma_m1*pow(inv_AVG_a, 2);

   AVG_0_0_LEV_20 = (rc4)*AVG_0_u0*inv_AVG_a*(gama*AVG_0_a*AVG_0_u0*pow(inv_AVG_a, 2) - AVG_0_a*AVG_0_u0*pow(inv_AVG_a,
      2) - 2);

   AVG_0_0_LEV_21 = -rc1*inv_AVG_a*(gama*AVG_0_a*AVG_0_u0*pow(inv_AVG_a, 2) - AVG_0_a*AVG_0_u0*pow(inv_AVG_a, 2) - 1);

   AVG_0_0_LEV_22 = (rc1)*gamma_m1*pow(inv_AVG_a, 2);

   du_0 = rho_B0(2) - rho_B0(1);
   du_1 = rhou0_B0(2) - rhou0_B0(1);
   du_2 = rhoE_B0(2) - rhoE_B0(1);

   alpha_02 = AVG_0_0_LEV_00*du_0 + AVG_0_0_LEV_01*du_1 + AVG_0_0_LEV_02*du_2;
   alpha_12 = AVG_0_0_LEV_10*du_0 + AVG_0_0_LEV_11*du_1 + AVG_0_0_LEV_12*du_2;
   alpha_22 = AVG_0_0_LEV_20*du_0 + AVG_0_0_LEV_21*du_1 + AVG_0_0_LEV_22*du_2;




   lambda = dt / Delta0block0;









   sigma_0 = fabs(alpha_01) >= delta ? fabs(alpha_01) : (pow(alpha_01,2) + pow(delta,2)) / (2*delta);
   sigma_1 = fabs(alpha_11) >= delta ? fabs(alpha_11) : (pow(alpha_11,2) + pow(delta,2)) / (2*delta);
   sigma_2 = fabs(alpha_21) >= delta ? fabs(alpha_21) : (pow(alpha_21,2) + pow(delta,2)) / (2*delta);




   S = alpha_01 < 0 ? -1 : (alpha_01 > 0 ? 1 : 0);
   g_00 = S*fmax(fmax(0,fmin(2*fabs(alpha_01), S*alpha_00)),fmin(fabs(alpha_01),2*S*alpha_00));

   S = alpha_11 < 0 ? -1 : (alpha_11 > 0 ? 1 : 0);
   g_10 = S*fmax(fmax(0,fmin(2*fabs(alpha_11), S*alpha_10)),fmin(fabs(alpha_11),2*S*alpha_10));

   S = alpha_21 < 0 ? -1 : (alpha_21 > 0 ? 1 : 0);
   g_20 = S*fmax(fmax(0,fmin(2*fabs(alpha_21), S*alpha_20)),fmin(fabs(alpha_21),2*S*alpha_20));

   S = alpha_02 < 0 ? -1 : (alpha_02 > 0 ? 1 : 0);
   g_01 = S*fmax(fmax(0,fmin(2*fabs(alpha_02), S*alpha_01)),fmin(fabs(alpha_02),2*S*alpha_01));

   S = alpha_12 < 0 ? -1 : (alpha_12 > 0 ? 1 : 0);
   g_11 = S*fmax(fmax(0,fmin(2*fabs(alpha_12), S*alpha_11)),fmin(fabs(alpha_12),2*S*alpha_11));

   S = alpha_22 < 0 ? -1 : (alpha_22 > 0 ? 1 : 0);
   g_21 = S*fmax(fmax(0,fmin(2*fabs(alpha_22), S*alpha_21)),fmin(fabs(alpha_22),2*S*alpha_21));



   gamma_0 = (alpha_00 == 0) ? 0 : sigma_0*alpha_01*(g_01 - g_00) / (pow(alpha_01,2)+eps);
   gamma_1 = (alpha_01 == 0) ? 0 : sigma_1*alpha_11*(g_11 - g_10) / (pow(alpha_11,2)+eps);
   gamma_2 = (alpha_02 == 0) ? 0 : sigma_2*alpha_21*(g_21 - g_20) / (pow(alpha_21,2)+eps);





   phi_0 = -sigma_0*(g_01 + g_00) + (fabs(ws_0 + gamma_0) - lambda*pow(ws_0,2))*alpha_01;
   phi_1 = -sigma_1*(g_11 + g_10) + (fabs(ws_1 + gamma_1) - lambda*pow(ws_1,2))*alpha_11;
   phi_2 = -sigma_2*(g_21 + g_20) + (fabs(ws_2 + gamma_2) - lambda*pow(ws_2,2))*alpha_21;





   theta_hat_00 = pow(fabs((fabs(alpha_01) - fabs(alpha_00)) / (fabs(alpha_01) + fabs(alpha_00)+eps)),2);
   theta_hat_10 = pow(fabs((fabs(alpha_11) - fabs(alpha_10)) / (fabs(alpha_11) + fabs(alpha_10)+eps)),2);
   theta_hat_20 = pow(fabs((fabs(alpha_21) - fabs(alpha_20)) / (fabs(alpha_21) + fabs(alpha_20)+eps)),2);


   theta_hat_01 = pow(fabs((fabs(alpha_02) - fabs(alpha_01)) / (fabs(alpha_02) + fabs(alpha_01)+eps)),2);
   theta_hat_11 = pow(fabs((fabs(alpha_12) - fabs(alpha_11)) / (fabs(alpha_12) + fabs(alpha_11)+eps)),2);
   theta_hat_21 = pow(fabs((fabs(alpha_22) - fabs(alpha_21)) / (fabs(alpha_22) + fabs(alpha_21)+eps)),2);


   theta_0 =fmax(theta_hat_00, theta_hat_01);
   theta_1 =fmax(theta_hat_10, theta_hat_11);
   theta_2 =fmax(theta_hat_20, theta_hat_21);



   phi_star_0 = kappa*theta_0*phi_0;
   phi_star_1 = kappa*theta_1*phi_1;
   phi_star_2 = kappa*theta_2*phi_2;



   wk0_B0(0) = 0.5*(AVG_0_0_REV_00*phi_star_0 + AVG_0_0_REV_01*phi_star_1 + AVG_0_0_REV_02*phi_star_2);
   wk1_B0(0) = 0.5*(AVG_0_0_REV_10*phi_star_0 + AVG_0_0_REV_11*phi_star_1 + AVG_0_0_REV_12*phi_star_2);
   wk2_B0(0) = 0.5*(AVG_0_0_REV_20*phi_star_0 + AVG_0_0_REV_21*phi_star_1 + AVG_0_0_REV_22*phi_star_2);



  }
  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[22].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_host(args, 9);
  ops_set_halo_dirtybit3(&args[6],range);
  ops_set_halo_dirtybit3(&args[7],range);
  ops_set_halo_dirtybit3(&args[8],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[22].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg7);
    block->instance->OPS_kernels[22].transfer += ops_compute_transfer(dim, start, end, &arg8);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel028(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)calloc(1,sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 0;
  desc->index = 22;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 22;
  for ( int i=0; i<2; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 9;
  desc->args = (ops_arg*)ops_malloc(9*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg2.dat->index;
  desc->args[3] = arg3;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg3.dat->index;
  desc->args[4] = arg4;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg4.dat->index;
  desc->args[5] = arg5;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg5.dat->index;
  desc->args[6] = arg6;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg6.dat->index;
  desc->args[7] = arg7;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg7.dat->index;
  desc->args[8] = arg8;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg8.dat->index;
  desc->function = ops_par_loop_opensbliblock00Kernel028_execute;
  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,22,"opensbliblock00Kernel028");
  }
  ops_enqueue_kernel(desc);
}
#endif
