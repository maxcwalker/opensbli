//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel042(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9) {
#else
void ops_par_loop_opensbliblock00Kernel042_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  ops_arg arg9 = desc->args[9];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[10] = { arg0, arg1, arg2, arg3, arg4,
 arg5, arg6, arg7, arg8, arg9};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,10,range,26)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,26,"opensbliblock00Kernel042");
    block->instance->OPS_kernels[26].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "opensbliblock00Kernel042");
  #endif


  //compute locally allocated range for the sub-block
  int start[3];
  int end[3];
  #if defined(OPS_MPI) && !defined(OPS_LAZY)
  int arg_idx[3];
  #endif
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<3; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 10,block, range, start, end, arg_idx) < 0) return;
  #endif


  //initialize global variable with the dimension of dats
  int xdim0_opensbliblock00Kernel042 = args[0].dat->size[0];
  int ydim0_opensbliblock00Kernel042 = args[0].dat->size[1];
  int xdim1_opensbliblock00Kernel042 = args[1].dat->size[0];
  int ydim1_opensbliblock00Kernel042 = args[1].dat->size[1];
  int xdim2_opensbliblock00Kernel042 = args[2].dat->size[0];
  int ydim2_opensbliblock00Kernel042 = args[2].dat->size[1];
  int xdim3_opensbliblock00Kernel042 = args[3].dat->size[0];
  int ydim3_opensbliblock00Kernel042 = args[3].dat->size[1];
  int xdim4_opensbliblock00Kernel042 = args[4].dat->size[0];
  int ydim4_opensbliblock00Kernel042 = args[4].dat->size[1];
  int xdim9_opensbliblock00Kernel042 = args[9].dat->size[0];
  int ydim9_opensbliblock00Kernel042 = args[9].dat->size[1];

  //set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset/sizeof(double);
  double* mu_B0_p = (double*)args[0].data_d;

  int base1 = args[1].dat->base_offset/sizeof(double);
  double* rho_B0_p = (double*)args[1].data_d;

  int base2 = args[2].dat->base_offset/sizeof(double);
  double* u0_B0_p = (double*)args[2].data_d;

  int base3 = args[3].dat->base_offset/sizeof(double);
  double* u1_B0_p = (double*)args[3].data_d;

  int base4 = args[4].dat->base_offset/sizeof(double);
  double* u2_B0_p = (double*)args[4].data_d;

  #ifdef OPS_MPI
  double * __restrict__ p_a5 = (double *)(((ops_reduction)args[5].data)->data + ((ops_reduction)args[5].data)->size * block->index);
  #else //OPS_MPI
  double * __restrict__ p_a5 = (double *)((ops_reduction)args[5].data)->data;
  #endif //OPS_MPI


  #ifdef OPS_MPI
  double * __restrict__ p_a6 = (double *)(((ops_reduction)args[6].data)->data + ((ops_reduction)args[6].data)->size * block->index);
  #else //OPS_MPI
  double * __restrict__ p_a6 = (double *)((ops_reduction)args[6].data)->data;
  #endif //OPS_MPI


  #ifdef OPS_MPI
  double * __restrict__ p_a7 = (double *)(((ops_reduction)args[7].data)->data + ((ops_reduction)args[7].data)->size * block->index);
  #else //OPS_MPI
  double * __restrict__ p_a7 = (double *)((ops_reduction)args[7].data)->data;
  #endif //OPS_MPI


  #ifdef OPS_MPI
  double * __restrict__ p_a8 = (double *)(((ops_reduction)args[8].data)->data + ((ops_reduction)args[8].data)->size * block->index);
  #else //OPS_MPI
  double * __restrict__ p_a8 = (double *)((ops_reduction)args[8].data)->data;
  #endif //OPS_MPI


  int base9 = args[9].dat->base_offset/sizeof(double);
  double* divV_B0_p = (double*)args[9].data_d;

  int maxblocks = (end[0]-start[0]-1)/block->instance->OPS_block_size_x+1;
  maxblocks *= (end[1]-start[1]-1)/block->instance->OPS_block_size_y+1;
  maxblocks *= (end[2]-start[2]-1)/block->instance->OPS_block_size_z+1;
  int reduct_bytes = 0;
  size_t reduct_size = 0;

  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));
  reduct_size = MAX(reduct_size,sizeof(double));
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));
  reduct_size = MAX(reduct_size,sizeof(double));
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));
  reduct_size = MAX(reduct_size,sizeof(double));
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));
  reduct_size = MAX(reduct_size,sizeof(double));

  reallocReductArrays(block->instance,reduct_bytes);
  reduct_bytes = 0;

  arg5.data = block->instance->OPS_reduct_h + reduct_bytes;
  double *arg5_data_d = (double*)(block->instance->OPS_reduct_d + reduct_bytes);
  for ( int b=0; b<maxblocks; b++ ){
    for ( int d=0; d<1; d++ ){
      ((double *)arg5.data)[d+b*1] = ZERO_double;
    }
  }
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));

  arg6.data = block->instance->OPS_reduct_h + reduct_bytes;
  double *arg6_data_d = (double*)(block->instance->OPS_reduct_d + reduct_bytes);
  for ( int b=0; b<maxblocks; b++ ){
    for ( int d=0; d<1; d++ ){
      ((double *)arg6.data)[d+b*1] = ZERO_double;
    }
  }
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));

  arg7.data = block->instance->OPS_reduct_h + reduct_bytes;
  double *arg7_data_d = (double*)(block->instance->OPS_reduct_d + reduct_bytes);
  for ( int b=0; b<maxblocks; b++ ){
    for ( int d=0; d<1; d++ ){
      ((double *)arg7.data)[d+b*1] = ZERO_double;
    }
  }
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));

  arg8.data = block->instance->OPS_reduct_h + reduct_bytes;
  double *arg8_data_d = (double*)(block->instance->OPS_reduct_d + reduct_bytes);
  for ( int b=0; b<maxblocks; b++ ){
    for ( int d=0; d<1; d++ ){
      ((double *)arg8.data)[d+b*1] = ZERO_double;
    }
  }
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));

  mvReductArraysToDevice(block->instance,reduct_bytes);

  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_device(args, 10);
  ops_halo_exchanges(args,10,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[26].mpi_time += __t1-__t2;
  }

  int start_0 = start[0];
  int end_0 = end[0];
  int start_1 = start[1];
  int end_1 = end[1];
  int start_2 = start[2];
  int end_2 = end[2];
  if ((end[0]-start[0])>0 && (end[1]-start[1])>0 && (end[2]-start[2])>0) {
    block->instance->sycl_instance->queue->submit([&](cl::sycl::handler &cgh) {
      cl::sycl::accessor<char, 1, cl::sycl::access::mode::read_write, cl::sycl::access::target::local> local_mem(reduct_size * cl::sycl::range<1>(block->instance->OPS_block_size_x*block->instance->OPS_block_size_y*block->instance->OPS_block_size_z),cgh);

      auto invDelta0block0_sycl = (*invDelta0block0_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto invDelta1block0_sycl = (*invDelta1block0_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto invDelta2block0_sycl = (*invDelta2block0_p).template get_access<cl::sycl::access::mode::read>(cgh);

      cgh.parallel_for<class opensbliblock00Kernel042_kernel>(cl::sycl::nd_range<3>(cl::sycl::range<3>(
           ((end[2]-start[2]-1)/block->instance->OPS_block_size_z+1)*block->instance->OPS_block_size_z,
           ((end[1]-start[1]-1)/block->instance->OPS_block_size_y+1)*block->instance->OPS_block_size_y,
            ((end[0]-start[0]-1)/block->instance->OPS_block_size_x+1)*block->instance->OPS_block_size_x
             ),cl::sycl::range<3>(
             block->instance->OPS_block_size_z,
             block->instance->OPS_block_size_y,
      block->instance->OPS_block_size_x
             ))
      , [=](cl::sycl::nd_item<3> item
      ) [[intel::kernel_args_restrict]] {
        int n_z = item.get_global_id(0)+start_2;
        int n_y = item.get_global_id(1)+start_1;
        int n_x = item.get_global_id(2)+start_0;
        const ACC<double> mu_B0(xdim0_opensbliblock00Kernel042, ydim0_opensbliblock00Kernel042, &mu_B0_p[0] + base0 + n_x*1 + n_y * xdim0_opensbliblock00Kernel042*1 + n_z * xdim0_opensbliblock00Kernel042 * ydim0_opensbliblock00Kernel042*1);
        const ACC<double> rho_B0(xdim1_opensbliblock00Kernel042, ydim1_opensbliblock00Kernel042, &rho_B0_p[0] + base1 + n_x*1 + n_y * xdim1_opensbliblock00Kernel042*1 + n_z * xdim1_opensbliblock00Kernel042 * ydim1_opensbliblock00Kernel042*1);
        const ACC<double> u0_B0(xdim2_opensbliblock00Kernel042, ydim2_opensbliblock00Kernel042, &u0_B0_p[0] + base2 + n_x*1 + n_y * xdim2_opensbliblock00Kernel042*1 + n_z * xdim2_opensbliblock00Kernel042 * ydim2_opensbliblock00Kernel042*1);
        const ACC<double> u1_B0(xdim3_opensbliblock00Kernel042, ydim3_opensbliblock00Kernel042, &u1_B0_p[0] + base3 + n_x*1 + n_y * xdim3_opensbliblock00Kernel042*1 + n_z * xdim3_opensbliblock00Kernel042 * ydim3_opensbliblock00Kernel042*1);
        const ACC<double> u2_B0(xdim4_opensbliblock00Kernel042, ydim4_opensbliblock00Kernel042, &u2_B0_p[0] + base4 + n_x*1 + n_y * xdim4_opensbliblock00Kernel042*1 + n_z * xdim4_opensbliblock00Kernel042 * ydim4_opensbliblock00Kernel042*1);
        ACC<double> divV_B0(xdim9_opensbliblock00Kernel042, ydim9_opensbliblock00Kernel042, &divV_B0_p[0] + base9 + n_x*1 + n_y * xdim9_opensbliblock00Kernel042*1 + n_z * xdim9_opensbliblock00Kernel042 * ydim9_opensbliblock00Kernel042*1);
        double KE_B0[1];
        KE_B0[0] = ZERO_double;
        double dilatation_dissipation_B0[1];
        dilatation_dissipation_B0[0] = ZERO_double;
        double enstrophy_dissipation_B0[1];
        enstrophy_dissipation_B0[0] = ZERO_double;
        double rhom_B0[1];
        rhom_B0[0] = ZERO_double;
        //USER CODE
        if (n_x < end_0 && n_y < end_1 && n_z < end_2) {
          
   double d1_u0_dx = 0.0;
   double d1_u0_dy = 0.0;
   double d1_u0_dz = 0.0;
   double d1_u1_dx = 0.0;
   double d1_u1_dy = 0.0;
   double d1_u1_dz = 0.0;
   double d1_u2_dx = 0.0;
   double d1_u2_dy = 0.0;
   double d1_u2_dz = 0.0;
   double wx = 0.0;
   double wy = 0.0;
   double wz = 0.0;
    d1_u1_dz = (-(2.0/3.0)*u1_B0(0,0,-1) - (1.0/12.0)*u1_B0(0,0,2) + ((1.0/12.0))*u1_B0(0,0,-2) +
      ((2.0/3.0))*u1_B0(0,0,1))*invDelta2block0_sycl[0];

    d1_u2_dy = (-(2.0/3.0)*u2_B0(0,-1,0) - (1.0/12.0)*u2_B0(0,2,0) + ((1.0/12.0))*u2_B0(0,-2,0) +
      ((2.0/3.0))*u2_B0(0,1,0))*invDelta1block0_sycl[0];

   wx = -d1_u1_dz + d1_u2_dy;

    d1_u2_dx = (-(2.0/3.0)*u2_B0(-1,0,0) - (1.0/12.0)*u2_B0(2,0,0) + ((1.0/12.0))*u2_B0(-2,0,0) +
      ((2.0/3.0))*u2_B0(1,0,0))*invDelta0block0_sycl[0];

    d1_u0_dz = (-(2.0/3.0)*u0_B0(0,0,-1) - (1.0/12.0)*u0_B0(0,0,2) + ((1.0/12.0))*u0_B0(0,0,-2) +
      ((2.0/3.0))*u0_B0(0,0,1))*invDelta2block0_sycl[0];

   wy = -d1_u2_dx + d1_u0_dz;

    d1_u1_dx = (-(2.0/3.0)*u1_B0(-1,0,0) - (1.0/12.0)*u1_B0(2,0,0) + ((1.0/12.0))*u1_B0(-2,0,0) +
      ((2.0/3.0))*u1_B0(1,0,0))*invDelta0block0_sycl[0];

    d1_u0_dy = (-(2.0/3.0)*u0_B0(0,-1,0) - (1.0/12.0)*u0_B0(0,2,0) + ((1.0/12.0))*u0_B0(0,-2,0) +
      ((2.0/3.0))*u0_B0(0,1,0))*invDelta1block0_sycl[0];

   wz = -d1_u0_dy + d1_u1_dx;

    d1_u2_dz = (-(2.0/3.0)*u2_B0(0,0,-1) - (1.0/12.0)*u2_B0(0,0,2) + ((1.0/12.0))*u2_B0(0,0,-2) +
      ((2.0/3.0))*u2_B0(0,0,1))*invDelta2block0_sycl[0];

    d1_u1_dy = (-(2.0/3.0)*u1_B0(0,-1,0) - (1.0/12.0)*u1_B0(0,2,0) + ((1.0/12.0))*u1_B0(0,-2,0) +
      ((2.0/3.0))*u1_B0(0,1,0))*invDelta1block0_sycl[0];

    d1_u0_dx = (-(2.0/3.0)*u0_B0(-1,0,0) - (1.0/12.0)*u0_B0(2,0,0) + ((1.0/12.0))*u0_B0(-2,0,0) +
      ((2.0/3.0))*u0_B0(1,0,0))*invDelta0block0_sycl[0];

   divV_B0(0,0,0) = d1_u0_dx + d1_u1_dy + d1_u2_dz;

   *rhom_B0 = rho_B0(0,0,0) + *rhom_B0;

    *KE_B0 = 0.5*((u0_B0(0,0,0)*u0_B0(0,0,0)) + (u1_B0(0,0,0)*u1_B0(0,0,0)) + (u2_B0(0,0,0)*u2_B0(0,0,0)))*rho_B0(0,0,0)
      + *KE_B0;

   *dilatation_dissipation_B0 = ((4.0/3.0))*(divV_B0(0,0,0)*divV_B0(0,0,0))*mu_B0(0,0,0) + *dilatation_dissipation_B0;

   *enstrophy_dissipation_B0 = ((wx*wx) + (wy*wy) + (wz*wz))*mu_B0(0,0,0) + *enstrophy_dissipation_B0;


        }
        int group_size = item.get_local_range(0);
        group_size *= item.get_local_range(1);
        group_size *= item.get_local_range(2);
        for ( int d=0; d<1; d++ ){
          ops_reduction_sycl<OPS_INC>(arg5_data_d + d+item.get_group_linear_id()*1, KE_B0[d], (double*)&local_mem[0], item, group_size);
        }
        for ( int d=0; d<1; d++ ){
          ops_reduction_sycl<OPS_INC>(arg6_data_d + d+item.get_group_linear_id()*1, dilatation_dissipation_B0[d], (double*)&local_mem[0], item, group_size);
        }
        for ( int d=0; d<1; d++ ){
          ops_reduction_sycl<OPS_INC>(arg7_data_d + d+item.get_group_linear_id()*1, enstrophy_dissipation_B0[d], (double*)&local_mem[0], item, group_size);
        }
        for ( int d=0; d<1; d++ ){
          ops_reduction_sycl<OPS_INC>(arg8_data_d + d+item.get_group_linear_id()*1, rhom_B0[d], (double*)&local_mem[0], item, group_size);
        }
      });
    });
  }
  mvReductArraysToHost(block->instance,reduct_bytes);
  for ( int b=0; b<maxblocks; b++ ){
    for ( int d=0; d<1; d++ ){
      p_a5[d] = p_a5[d] + ((double *)arg5.data)[d+b*1];
    }
  }
  for ( int b=0; b<maxblocks; b++ ){
    for ( int d=0; d<1; d++ ){
      p_a6[d] = p_a6[d] + ((double *)arg6.data)[d+b*1];
    }
  }
  for ( int b=0; b<maxblocks; b++ ){
    for ( int d=0; d<1; d++ ){
      p_a7[d] = p_a7[d] + ((double *)arg7.data)[d+b*1];
    }
  }
  for ( int b=0; b<maxblocks; b++ ){
    for ( int d=0; d<1; d++ ){
      p_a8[d] = p_a8[d] + ((double *)arg8.data)[d+b*1];
    }
  }
  if (block->instance->OPS_diags > 1) {
    block->instance->sycl_instance->queue->wait();
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[26].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 10);
  ops_set_halo_dirtybit3(&args[9],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[26].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[26].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[26].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[26].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[26].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[26].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[26].transfer += ops_compute_transfer(dim, start, end, &arg9);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel042(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)calloc(1,sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 1;
  desc->index = 26;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 26;
  for ( int i=0; i<6; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 10;
  desc->args = (ops_arg*)ops_malloc(10*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg2.dat->index;
  desc->args[3] = arg3;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg3.dat->index;
  desc->args[4] = arg4;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg4.dat->index;
  desc->args[5] = arg5;
  desc->args[6] = arg6;
  desc->args[7] = arg7;
  desc->args[8] = arg8;
  desc->args[9] = arg9;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg9.dat->index;
  desc->function = ops_par_loop_opensbliblock00Kernel042_execute;
  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,26,"opensbliblock00Kernel042");
  }
  ops_enqueue_kernel(desc);
}
#endif
