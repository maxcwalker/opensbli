//
// auto-generated by ops.py
//
//header
#define OPS_API 2
#define OPS_3D
#include "ops_lib_core.h"

#include "ops_hip_rt_support.h"
#include "ops_hip_reduction.h"


#ifdef OPS_MPI
#include "ops_mpi_core.h"
#endif
// global constants
__constant__ double Delta0block0;
__constant__ double Delta1block0;
__constant__ double Delta2block0;
__constant__ int HDF5_timing;
__constant__ double Minf;
__constant__ double Pr;
__constant__ double Re;
__constant__ int block0np0;
__constant__ int block0np1;
__constant__ int block0np2;
__constant__ double delta_TVD;
__constant__ double dt;
__constant__ double eps_TVD;
__constant__ double gama;
__constant__ double gamma_m1;
__constant__ double inv2Delta0block0;
__constant__ double inv2Delta1block0;
__constant__ double inv2Delta2block0;
__constant__ double inv2Minf;
__constant__ double invDelta0block0;
__constant__ double invDelta1block0;
__constant__ double invDelta2block0;
__constant__ double invPr;
__constant__ double invRe;
__constant__ double inv_gamma_m1;
__constant__ double invdelta_TVD;
__constant__ double invgamma_m1;
__constant__ double kappa_TVD;
__constant__ int niter;
__constant__ double simulation_time;
__constant__ int start_iter;
__constant__ int write_output_file;

void ops_init_backend() {}

void ops_decl_const_char(OPS_instance *instance, int dim, char const *type,
int size, char *dat, char const *name){
  ops_execute(instance);
  if (!strcmp(name,"Delta0block0")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(Delta0block0), dat, dim*size));
  }
  else
  if (!strcmp(name,"Delta1block0")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(Delta1block0), dat, dim*size));
  }
  else
  if (!strcmp(name,"Delta2block0")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(Delta2block0), dat, dim*size));
  }
  else
  if (!strcmp(name,"HDF5_timing")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(HDF5_timing), dat, dim*size));
  }
  else
  if (!strcmp(name,"Minf")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(Minf), dat, dim*size));
  }
  else
  if (!strcmp(name,"Pr")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(Pr), dat, dim*size));
  }
  else
  if (!strcmp(name,"Re")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(Re), dat, dim*size));
  }
  else
  if (!strcmp(name,"block0np0")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(block0np0), dat, dim*size));
  }
  else
  if (!strcmp(name,"block0np1")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(block0np1), dat, dim*size));
  }
  else
  if (!strcmp(name,"block0np2")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(block0np2), dat, dim*size));
  }
  else
  if (!strcmp(name,"delta_TVD")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(delta_TVD), dat, dim*size));
  }
  else
  if (!strcmp(name,"dt")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(dt), dat, dim*size));
  }
  else
  if (!strcmp(name,"eps_TVD")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(eps_TVD), dat, dim*size));
  }
  else
  if (!strcmp(name,"gama")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(gama), dat, dim*size));
  }
  else
  if (!strcmp(name,"gamma_m1")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(gamma_m1), dat, dim*size));
  }
  else
  if (!strcmp(name,"inv2Delta0block0")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(inv2Delta0block0), dat, dim*size));
  }
  else
  if (!strcmp(name,"inv2Delta1block0")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(inv2Delta1block0), dat, dim*size));
  }
  else
  if (!strcmp(name,"inv2Delta2block0")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(inv2Delta2block0), dat, dim*size));
  }
  else
  if (!strcmp(name,"inv2Minf")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(inv2Minf), dat, dim*size));
  }
  else
  if (!strcmp(name,"invDelta0block0")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(invDelta0block0), dat, dim*size));
  }
  else
  if (!strcmp(name,"invDelta1block0")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(invDelta1block0), dat, dim*size));
  }
  else
  if (!strcmp(name,"invDelta2block0")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(invDelta2block0), dat, dim*size));
  }
  else
  if (!strcmp(name,"invPr")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(invPr), dat, dim*size));
  }
  else
  if (!strcmp(name,"invRe")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(invRe), dat, dim*size));
  }
  else
  if (!strcmp(name,"inv_gamma_m1")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(inv_gamma_m1), dat, dim*size));
  }
  else
  if (!strcmp(name,"invdelta_TVD")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(invdelta_TVD), dat, dim*size));
  }
  else
  if (!strcmp(name,"invgamma_m1")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(invgamma_m1), dat, dim*size));
  }
  else
  if (!strcmp(name,"kappa_TVD")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(kappa_TVD), dat, dim*size));
  }
  else
  if (!strcmp(name,"niter")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(niter), dat, dim*size));
  }
  else
  if (!strcmp(name,"simulation_time")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(simulation_time), dat, dim*size));
  }
  else
  if (!strcmp(name,"start_iter")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(start_iter), dat, dim*size));
  }
  else
  if (!strcmp(name,"write_output_file")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(write_output_file), dat, dim*size));
  }
  else
  {
    throw OPSException(OPS_RUNTIME_ERROR, "error: unknown const name");
  }
}


//user kernel files
#include "opensbliblock00Kernel037_hip_kernel.cpp"
#include "opensbliblock00Kernel005_hip_kernel.cpp"
#include "opensbliblock00Kernel007_hip_kernel.cpp"
#include "opensbliblock00Kernel009_hip_kernel.cpp"
#include "opensbliblock00Kernel019_hip_kernel.cpp"
#include "opensbliblock00Kernel016_hip_kernel.cpp"
#include "opensbliblock00Kernel022_hip_kernel.cpp"
#include "opensbliblock00Kernel023_hip_kernel.cpp"
#include "opensbliblock00Kernel004_hip_kernel.cpp"
#include "opensbliblock00Kernel006_hip_kernel.cpp"
#include "opensbliblock00Kernel008_hip_kernel.cpp"
#include "opensbliblock00Kernel010_hip_kernel.cpp"
#include "opensbliblock00Kernel011_hip_kernel.cpp"
#include "opensbliblock00Kernel012_hip_kernel.cpp"
#include "opensbliblock00Kernel013_hip_kernel.cpp"
#include "opensbliblock00Kernel014_hip_kernel.cpp"
#include "opensbliblock00Kernel015_hip_kernel.cpp"
#include "opensbliblock00Kernel029_hip_kernel.cpp"
#include "opensbliblock00Kernel030_hip_kernel.cpp"
#include "opensbliblock00Kernel049_hip_kernel.cpp"
#include "opensbliblock00Kernel043_hip_kernel.cpp"
#include "opensbliblock00Kernel044_hip_kernel.cpp"
#include "opensbliblock00Kernel045_hip_kernel.cpp"
#include "opensbliblock00Kernel046_hip_kernel.cpp"
#include "opensbliblock00Kernel047_hip_kernel.cpp"
#include "opensbliblock00Kernel048_hip_kernel.cpp"
#include "opensbliblock00Kernel042_hip_kernel.cpp"
