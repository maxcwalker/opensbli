//
// auto-generated by ops.py
//
__constant__ int dims_opensbliblock00Kernel042 [10][2];
static int dims_opensbliblock00Kernel042_h [10][2] = {{0}};

//user function
__device__

 void opensbliblock00Kernel042_gpu(const ACC<double> &mu_B0,
  const ACC<double> &rho_B0,
  const ACC<double> &u0_B0,
  const
ACC<double> &u1_B0,
  const ACC<double> &u2_B0,
  double *KE_B0,
  double *dilatation_dissipation_B0,
  double
*enstrophy_dissipation_B0,
  double *rhom_B0,
  ACC<double> &divV_B0)
{
   double d1_u0_dx = 0.0;
   double d1_u0_dy = 0.0;
   double d1_u0_dz = 0.0;
   double d1_u1_dx = 0.0;
   double d1_u1_dy = 0.0;
   double d1_u1_dz = 0.0;
   double d1_u2_dx = 0.0;
   double d1_u2_dy = 0.0;
   double d1_u2_dz = 0.0;
   double wx = 0.0;
   double wy = 0.0;
   double wz = 0.0;
    d1_u1_dz = (-(2.0/3.0)*u1_B0(0,0,-1) - (1.0/12.0)*u1_B0(0,0,2) + ((1.0/12.0))*u1_B0(0,0,-2) +
      ((2.0/3.0))*u1_B0(0,0,1))*invDelta2block0;

    d1_u2_dy = (-(2.0/3.0)*u2_B0(0,-1,0) - (1.0/12.0)*u2_B0(0,2,0) + ((1.0/12.0))*u2_B0(0,-2,0) +
      ((2.0/3.0))*u2_B0(0,1,0))*invDelta1block0;

   wx = -d1_u1_dz + d1_u2_dy;

    d1_u2_dx = (-(2.0/3.0)*u2_B0(-1,0,0) - (1.0/12.0)*u2_B0(2,0,0) + ((1.0/12.0))*u2_B0(-2,0,0) +
      ((2.0/3.0))*u2_B0(1,0,0))*invDelta0block0;

    d1_u0_dz = (-(2.0/3.0)*u0_B0(0,0,-1) - (1.0/12.0)*u0_B0(0,0,2) + ((1.0/12.0))*u0_B0(0,0,-2) +
      ((2.0/3.0))*u0_B0(0,0,1))*invDelta2block0;

   wy = -d1_u2_dx + d1_u0_dz;

    d1_u1_dx = (-(2.0/3.0)*u1_B0(-1,0,0) - (1.0/12.0)*u1_B0(2,0,0) + ((1.0/12.0))*u1_B0(-2,0,0) +
      ((2.0/3.0))*u1_B0(1,0,0))*invDelta0block0;

    d1_u0_dy = (-(2.0/3.0)*u0_B0(0,-1,0) - (1.0/12.0)*u0_B0(0,2,0) + ((1.0/12.0))*u0_B0(0,-2,0) +
      ((2.0/3.0))*u0_B0(0,1,0))*invDelta1block0;

   wz = -d1_u0_dy + d1_u1_dx;

    d1_u2_dz = (-(2.0/3.0)*u2_B0(0,0,-1) - (1.0/12.0)*u2_B0(0,0,2) + ((1.0/12.0))*u2_B0(0,0,-2) +
      ((2.0/3.0))*u2_B0(0,0,1))*invDelta2block0;

    d1_u1_dy = (-(2.0/3.0)*u1_B0(0,-1,0) - (1.0/12.0)*u1_B0(0,2,0) + ((1.0/12.0))*u1_B0(0,-2,0) +
      ((2.0/3.0))*u1_B0(0,1,0))*invDelta1block0;

    d1_u0_dx = (-(2.0/3.0)*u0_B0(-1,0,0) - (1.0/12.0)*u0_B0(2,0,0) + ((1.0/12.0))*u0_B0(-2,0,0) +
      ((2.0/3.0))*u0_B0(1,0,0))*invDelta0block0;

   divV_B0(0,0,0) = d1_u0_dx + d1_u1_dy + d1_u2_dz;

   *rhom_B0 = rho_B0(0,0,0) + *rhom_B0;

    *KE_B0 = 0.5*((u0_B0(0,0,0)*u0_B0(0,0,0)) + (u1_B0(0,0,0)*u1_B0(0,0,0)) + (u2_B0(0,0,0)*u2_B0(0,0,0)))*rho_B0(0,0,0)
      + *KE_B0;

   *dilatation_dissipation_B0 = ((4.0/3.0))*(divV_B0(0,0,0)*divV_B0(0,0,0))*mu_B0(0,0,0) + *dilatation_dissipation_B0;

   *enstrophy_dissipation_B0 = ((wx*wx) + (wy*wy) + (wz*wz))*mu_B0(0,0,0) + *enstrophy_dissipation_B0;

}



__global__ void ops_opensbliblock00Kernel042(
double* __restrict arg0,
double* __restrict arg1,
double* __restrict arg2,
double* __restrict arg3,
double* __restrict arg4,
double* __restrict arg5,
double* __restrict arg6,
double* __restrict arg7,
double* __restrict arg8,
double* __restrict arg9,
int size0,
int size1,
int size2 ){

  double arg5_l[1];
  double arg6_l[1];
  double arg7_l[1];
  double arg8_l[1];
  for (int d=0; d<1; d++) arg5_l[d] = ZERO_double;
  for (int d=0; d<1; d++) arg6_l[d] = ZERO_double;
  for (int d=0; d<1; d++) arg7_l[d] = ZERO_double;
  for (int d=0; d<1; d++) arg8_l[d] = ZERO_double;

  int idx_z = blockDim.z * blockIdx.z + threadIdx.z;
  int idx_y = blockDim.y * blockIdx.y + threadIdx.y;
  int idx_x = blockDim.x * blockIdx.x + threadIdx.x;

  arg0 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel042[0][0] + idx_z * 1*1 * dims_opensbliblock00Kernel042[0][0] * dims_opensbliblock00Kernel042[0][1];
  arg1 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel042[1][0] + idx_z * 1*1 * dims_opensbliblock00Kernel042[1][0] * dims_opensbliblock00Kernel042[1][1];
  arg2 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel042[2][0] + idx_z * 1*1 * dims_opensbliblock00Kernel042[2][0] * dims_opensbliblock00Kernel042[2][1];
  arg3 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel042[3][0] + idx_z * 1*1 * dims_opensbliblock00Kernel042[3][0] * dims_opensbliblock00Kernel042[3][1];
  arg4 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel042[4][0] + idx_z * 1*1 * dims_opensbliblock00Kernel042[4][0] * dims_opensbliblock00Kernel042[4][1];
  arg9 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel042[9][0] + idx_z * 1*1 * dims_opensbliblock00Kernel042[9][0] * dims_opensbliblock00Kernel042[9][1];

  if (idx_x < size0 && idx_y < size1 && idx_z < size2) {
    const ACC<double> argp0(dims_opensbliblock00Kernel042[0][0], dims_opensbliblock00Kernel042[0][1], arg0);
    const ACC<double> argp1(dims_opensbliblock00Kernel042[1][0], dims_opensbliblock00Kernel042[1][1], arg1);
    const ACC<double> argp2(dims_opensbliblock00Kernel042[2][0], dims_opensbliblock00Kernel042[2][1], arg2);
    const ACC<double> argp3(dims_opensbliblock00Kernel042[3][0], dims_opensbliblock00Kernel042[3][1], arg3);
    const ACC<double> argp4(dims_opensbliblock00Kernel042[4][0], dims_opensbliblock00Kernel042[4][1], arg4);
    ACC<double> argp9(dims_opensbliblock00Kernel042[9][0], dims_opensbliblock00Kernel042[9][1], arg9);
    opensbliblock00Kernel042_gpu(
     argp0, argp1, argp2, argp3, argp4,
     arg5_l, arg6_l, arg7_l, arg8_l, argp9);
  }
  for (int d=0; d<1; d++)
    ops_reduction_cuda<OPS_INC>(&arg5[d+(blockIdx.x + blockIdx.y*gridDim.x + blockIdx.z*gridDim.x*gridDim.y)*1],arg5_l[d]);
  for (int d=0; d<1; d++)
    ops_reduction_cuda<OPS_INC>(&arg6[d+(blockIdx.x + blockIdx.y*gridDim.x + blockIdx.z*gridDim.x*gridDim.y)*1],arg6_l[d]);
  for (int d=0; d<1; d++)
    ops_reduction_cuda<OPS_INC>(&arg7[d+(blockIdx.x + blockIdx.y*gridDim.x + blockIdx.z*gridDim.x*gridDim.y)*1],arg7_l[d]);
  for (int d=0; d<1; d++)
    ops_reduction_cuda<OPS_INC>(&arg8[d+(blockIdx.x + blockIdx.y*gridDim.x + blockIdx.z*gridDim.x*gridDim.y)*1],arg8_l[d]);

}

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel042(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9) {
#else
void ops_par_loop_opensbliblock00Kernel042_execute(ops_kernel_descriptor *desc) {
  int dim = desc->dim;
  #if OPS_MPI
  ops_block block = desc->block;
  #endif
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  ops_arg arg9 = desc->args[9];
  #endif

  //Timing
  double t1,t2,c1,c2;

  ops_arg args[10] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9};


  #if CHECKPOINTING && !OPS_LAZY
  if (!ops_checkpointing_before(args,10,range,26)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,26,"opensbliblock00Kernel042");
    block->instance->OPS_kernels[26].count++;
    ops_timers_core(&c1,&t1);
  }

  //compute locally allocated range for the sub-block
  int start[3];
  int end[3];

  #ifdef OPS_MPI
  int arg_idx[3];
  #endif
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<3; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 10,block, range, start, end, arg_idx) < 0) return;
  #endif

  int xdim0 = args[0].dat->size[0];
  int ydim0 = args[0].dat->size[1];
  int xdim1 = args[1].dat->size[0];
  int ydim1 = args[1].dat->size[1];
  int xdim2 = args[2].dat->size[0];
  int ydim2 = args[2].dat->size[1];
  int xdim3 = args[3].dat->size[0];
  int ydim3 = args[3].dat->size[1];
  int xdim4 = args[4].dat->size[0];
  int ydim4 = args[4].dat->size[1];
  int xdim9 = args[9].dat->size[0];
  int ydim9 = args[9].dat->size[1];

  if (xdim0 != dims_opensbliblock00Kernel042_h[0][0] || ydim0 != dims_opensbliblock00Kernel042_h[0][1] || xdim1 != dims_opensbliblock00Kernel042_h[1][0] || ydim1 != dims_opensbliblock00Kernel042_h[1][1] || xdim2 != dims_opensbliblock00Kernel042_h[2][0] || ydim2 != dims_opensbliblock00Kernel042_h[2][1] || xdim3 != dims_opensbliblock00Kernel042_h[3][0] || ydim3 != dims_opensbliblock00Kernel042_h[3][1] || xdim4 != dims_opensbliblock00Kernel042_h[4][0] || ydim4 != dims_opensbliblock00Kernel042_h[4][1] || xdim9 != dims_opensbliblock00Kernel042_h[9][0] || ydim9 != dims_opensbliblock00Kernel042_h[9][1]) {
    dims_opensbliblock00Kernel042_h[0][0] = xdim0;
    dims_opensbliblock00Kernel042_h[0][1] = ydim0;
    dims_opensbliblock00Kernel042_h[1][0] = xdim1;
    dims_opensbliblock00Kernel042_h[1][1] = ydim1;
    dims_opensbliblock00Kernel042_h[2][0] = xdim2;
    dims_opensbliblock00Kernel042_h[2][1] = ydim2;
    dims_opensbliblock00Kernel042_h[3][0] = xdim3;
    dims_opensbliblock00Kernel042_h[3][1] = ydim3;
    dims_opensbliblock00Kernel042_h[4][0] = xdim4;
    dims_opensbliblock00Kernel042_h[4][1] = ydim4;
    dims_opensbliblock00Kernel042_h[9][0] = xdim9;
    dims_opensbliblock00Kernel042_h[9][1] = ydim9;
    cutilSafeCall(block->instance->ostream(), cudaMemcpyToSymbol( dims_opensbliblock00Kernel042, dims_opensbliblock00Kernel042_h, sizeof(dims_opensbliblock00Kernel042)));
  }


  #if defined(OPS_LAZY) && !defined(OPS_MPI)
  ops_block block = desc->block;
  #endif
  #ifdef OPS_MPI
  double *arg5h = (double *)(((ops_reduction)args[5].data)->data + ((ops_reduction)args[5].data)->size * block->index);
  #else
  double *arg5h = (double *)(((ops_reduction)args[5].data)->data);
  #endif
  #ifdef OPS_MPI
  double *arg6h = (double *)(((ops_reduction)args[6].data)->data + ((ops_reduction)args[6].data)->size * block->index);
  #else
  double *arg6h = (double *)(((ops_reduction)args[6].data)->data);
  #endif
  #ifdef OPS_MPI
  double *arg7h = (double *)(((ops_reduction)args[7].data)->data + ((ops_reduction)args[7].data)->size * block->index);
  #else
  double *arg7h = (double *)(((ops_reduction)args[7].data)->data);
  #endif
  #ifdef OPS_MPI
  double *arg8h = (double *)(((ops_reduction)args[8].data)->data + ((ops_reduction)args[8].data)->size * block->index);
  #else
  double *arg8h = (double *)(((ops_reduction)args[8].data)->data);
  #endif

  int x_size = MAX(0,end[0]-start[0]);
  int y_size = MAX(0,end[1]-start[1]);
  int z_size = MAX(0,end[2]-start[2]);

  dim3 grid( (x_size-1)/block->instance->OPS_block_size_x+ 1, (y_size-1)/block->instance->OPS_block_size_y + 1, (z_size-1)/block->instance->OPS_block_size_z +1);
  dim3 tblock(block->instance->OPS_block_size_x,block->instance->OPS_block_size_y,block->instance->OPS_block_size_z);

  int nblocks = ((x_size-1)/block->instance->OPS_block_size_x+ 1)*((y_size-1)/block->instance->OPS_block_size_y + 1)*((z_size-1)/block->instance->OPS_block_size_z +1);
  int maxblocks = nblocks;
  int reduct_bytes = 0;
  size_t reduct_size = 0;

  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));
  reduct_size = MAX(reduct_size,sizeof(double)*1);
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));
  reduct_size = MAX(reduct_size,sizeof(double)*1);
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));
  reduct_size = MAX(reduct_size,sizeof(double)*1);
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));
  reduct_size = MAX(reduct_size,sizeof(double)*1);

  reallocReductArrays(block->instance,reduct_bytes);
  reduct_bytes = 0;

  arg5.data = block->instance->OPS_reduct_h + reduct_bytes;
  arg5.data_d = block->instance->OPS_reduct_d + reduct_bytes;
  for (int b=0; b<maxblocks; b++)
  for (int d=0; d<1; d++) ((double *)arg5.data)[d+b*1] = ZERO_double;
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));

  arg6.data = block->instance->OPS_reduct_h + reduct_bytes;
  arg6.data_d = block->instance->OPS_reduct_d + reduct_bytes;
  for (int b=0; b<maxblocks; b++)
  for (int d=0; d<1; d++) ((double *)arg6.data)[d+b*1] = ZERO_double;
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));

  arg7.data = block->instance->OPS_reduct_h + reduct_bytes;
  arg7.data_d = block->instance->OPS_reduct_d + reduct_bytes;
  for (int b=0; b<maxblocks; b++)
  for (int d=0; d<1; d++) ((double *)arg7.data)[d+b*1] = ZERO_double;
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));

  arg8.data = block->instance->OPS_reduct_h + reduct_bytes;
  arg8.data_d = block->instance->OPS_reduct_d + reduct_bytes;
  for (int b=0; b<maxblocks; b++)
  for (int d=0; d<1; d++) ((double *)arg8.data)[d+b*1] = ZERO_double;
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(double));


  mvReductArraysToDevice(block->instance,reduct_bytes);
  long long int dat0 = (block->instance->OPS_soa ? args[0].dat->type_size : args[0].dat->elem_size);
  long long int dat1 = (block->instance->OPS_soa ? args[1].dat->type_size : args[1].dat->elem_size);
  long long int dat2 = (block->instance->OPS_soa ? args[2].dat->type_size : args[2].dat->elem_size);
  long long int dat3 = (block->instance->OPS_soa ? args[3].dat->type_size : args[3].dat->elem_size);
  long long int dat4 = (block->instance->OPS_soa ? args[4].dat->type_size : args[4].dat->elem_size);
  long long int dat9 = (block->instance->OPS_soa ? args[9].dat->type_size : args[9].dat->elem_size);

  char *p_a[10];

  //set up initial pointers
  long long int base0 = args[0].dat->base_offset + 
           dat0 * 1 * (start[0] * args[0].stencil->stride[0]);
  base0 = base0+ dat0 *
    args[0].dat->size[0] *
    (start[1] * args[0].stencil->stride[1]);
  base0 = base0+ dat0 *
    args[0].dat->size[0] *
    args[0].dat->size[1] *
    (start[2] * args[0].stencil->stride[2]);
  p_a[0] = (char *)args[0].data_d + base0;

  long long int base1 = args[1].dat->base_offset + 
           dat1 * 1 * (start[0] * args[1].stencil->stride[0]);
  base1 = base1+ dat1 *
    args[1].dat->size[0] *
    (start[1] * args[1].stencil->stride[1]);
  base1 = base1+ dat1 *
    args[1].dat->size[0] *
    args[1].dat->size[1] *
    (start[2] * args[1].stencil->stride[2]);
  p_a[1] = (char *)args[1].data_d + base1;

  long long int base2 = args[2].dat->base_offset + 
           dat2 * 1 * (start[0] * args[2].stencil->stride[0]);
  base2 = base2+ dat2 *
    args[2].dat->size[0] *
    (start[1] * args[2].stencil->stride[1]);
  base2 = base2+ dat2 *
    args[2].dat->size[0] *
    args[2].dat->size[1] *
    (start[2] * args[2].stencil->stride[2]);
  p_a[2] = (char *)args[2].data_d + base2;

  long long int base3 = args[3].dat->base_offset + 
           dat3 * 1 * (start[0] * args[3].stencil->stride[0]);
  base3 = base3+ dat3 *
    args[3].dat->size[0] *
    (start[1] * args[3].stencil->stride[1]);
  base3 = base3+ dat3 *
    args[3].dat->size[0] *
    args[3].dat->size[1] *
    (start[2] * args[3].stencil->stride[2]);
  p_a[3] = (char *)args[3].data_d + base3;

  long long int base4 = args[4].dat->base_offset + 
           dat4 * 1 * (start[0] * args[4].stencil->stride[0]);
  base4 = base4+ dat4 *
    args[4].dat->size[0] *
    (start[1] * args[4].stencil->stride[1]);
  base4 = base4+ dat4 *
    args[4].dat->size[0] *
    args[4].dat->size[1] *
    (start[2] * args[4].stencil->stride[2]);
  p_a[4] = (char *)args[4].data_d + base4;

  long long int base9 = args[9].dat->base_offset + 
           dat9 * 1 * (start[0] * args[9].stencil->stride[0]);
  base9 = base9+ dat9 *
    args[9].dat->size[0] *
    (start[1] * args[9].stencil->stride[1]);
  base9 = base9+ dat9 *
    args[9].dat->size[0] *
    args[9].dat->size[1] *
    (start[2] * args[9].stencil->stride[2]);
  p_a[9] = (char *)args[9].data_d + base9;


  #ifndef OPS_LAZY
  ops_H_D_exchanges_device(args, 10);
  ops_halo_exchanges(args,10,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[26].mpi_time += t2-t1;
  }

  size_t nshared = 0;
  int nthread = block->instance->OPS_block_size_x*block->instance->OPS_block_size_y*block->instance->OPS_block_size_z;

  nshared = MAX(nshared,sizeof(double)*1);
  nshared = MAX(nshared,sizeof(double)*1);
  nshared = MAX(nshared,sizeof(double)*1);
  nshared = MAX(nshared,sizeof(double)*1);

  nshared = MAX(nshared*nthread,reduct_size*nthread);

  //call kernel wrapper function, passing in pointers to data
  if (x_size > 0 && y_size > 0 && z_size > 0)
    ops_opensbliblock00Kernel042<<<grid, tblock, nshared >>> ( 
     (double *)p_a[0], (double *)p_a[1],
     (double *)p_a[2], (double *)p_a[3],
     (double *)p_a[4], (double *)arg5.data_d,
     (double *)arg6.data_d, (double *)arg7.data_d,
     (double *)arg8.data_d, (double *)p_a[9],
    x_size, y_size, z_size);

  cutilSafeCall(block->instance->ostream(), cudaGetLastError());

  mvReductArraysToHost(block->instance,reduct_bytes);
  for ( int b=0; b<maxblocks; b++ ){
    for ( int d=0; d<1; d++ ){
      arg5h[d] = arg5h[d] + ((double *)arg5.data)[d+b*1];
    }
  }
  arg5.data = (char *)arg5h;

  for ( int b=0; b<maxblocks; b++ ){
    for ( int d=0; d<1; d++ ){
      arg6h[d] = arg6h[d] + ((double *)arg6.data)[d+b*1];
    }
  }
  arg6.data = (char *)arg6h;

  for ( int b=0; b<maxblocks; b++ ){
    for ( int d=0; d<1; d++ ){
      arg7h[d] = arg7h[d] + ((double *)arg7.data)[d+b*1];
    }
  }
  arg7.data = (char *)arg7h;

  for ( int b=0; b<maxblocks; b++ ){
    for ( int d=0; d<1; d++ ){
      arg8h[d] = arg8h[d] + ((double *)arg8.data)[d+b*1];
    }
  }
  arg8.data = (char *)arg8h;

  if (block->instance->OPS_diags>1) {
    cutilSafeCall(block->instance->ostream(), cudaDeviceSynchronize());
    ops_timers_core(&c1,&t1);
    block->instance->OPS_kernels[26].time += t1-t2;
  }

  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 10);
  ops_set_halo_dirtybit3(&args[9],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[26].mpi_time += t2-t1;
    block->instance->OPS_kernels[26].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[26].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[26].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[26].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[26].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[26].transfer += ops_compute_transfer(dim, start, end, &arg9);
  }
}

#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel042(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9) {
  ops_arg args[10] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9 };

  //create kernel descriptor and pass it to ops_enqueue_kernel
  create_kerneldesc_and_enque(name, args, 10, 26, dim, 1, range, block, ops_par_loop_opensbliblock00Kernel042_execute);
}
#endif
