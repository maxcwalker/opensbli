//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel030(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11,
 ops_arg arg12, ops_arg arg13, ops_arg arg14, ops_arg arg15,
 ops_arg arg16, ops_arg arg17) {
#else
void ops_par_loop_opensbliblock00Kernel030_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  ops_arg arg9 = desc->args[9];
  ops_arg arg10 = desc->args[10];
  ops_arg arg11 = desc->args[11];
  ops_arg arg12 = desc->args[12];
  ops_arg arg13 = desc->args[13];
  ops_arg arg14 = desc->args[14];
  ops_arg arg15 = desc->args[15];
  ops_arg arg16 = desc->args[16];
  ops_arg arg17 = desc->args[17];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[18] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,18,range,18)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,18,"opensbliblock00Kernel030");
    block->instance->OPS_kernels[18].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "opensbliblock00Kernel030");
  #endif


  //compute locally allocated range for the sub-block
  int start[3];
  int end[3];
  #if defined(OPS_MPI) && !defined(OPS_LAZY)
  int arg_idx[3];
  #endif
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<3; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 18,block, range, start, end, arg_idx) < 0) return;
  #endif

  int start0 = start[0];
  int end0 = end[0];
  int start1 = start[1];
  int end1 = end[1];
  int start2 = start[2];
  int end2 = end[2];


  //initialize global variable with the dimension of dats
  int xdim0_opensbliblock00Kernel030 = args[0].dat->size[0];
  int ydim0_opensbliblock00Kernel030 = args[0].dat->size[1];
  int xdim1_opensbliblock00Kernel030 = args[1].dat->size[0];
  int ydim1_opensbliblock00Kernel030 = args[1].dat->size[1];
  int xdim2_opensbliblock00Kernel030 = args[2].dat->size[0];
  int ydim2_opensbliblock00Kernel030 = args[2].dat->size[1];
  int xdim3_opensbliblock00Kernel030 = args[3].dat->size[0];
  int ydim3_opensbliblock00Kernel030 = args[3].dat->size[1];
  int xdim4_opensbliblock00Kernel030 = args[4].dat->size[0];
  int ydim4_opensbliblock00Kernel030 = args[4].dat->size[1];
  int xdim5_opensbliblock00Kernel030 = args[5].dat->size[0];
  int ydim5_opensbliblock00Kernel030 = args[5].dat->size[1];
  int xdim6_opensbliblock00Kernel030 = args[6].dat->size[0];
  int ydim6_opensbliblock00Kernel030 = args[6].dat->size[1];
  int xdim7_opensbliblock00Kernel030 = args[7].dat->size[0];
  int ydim7_opensbliblock00Kernel030 = args[7].dat->size[1];
  int xdim8_opensbliblock00Kernel030 = args[8].dat->size[0];
  int ydim8_opensbliblock00Kernel030 = args[8].dat->size[1];
  int xdim9_opensbliblock00Kernel030 = args[9].dat->size[0];
  int ydim9_opensbliblock00Kernel030 = args[9].dat->size[1];
  int xdim10_opensbliblock00Kernel030 = args[10].dat->size[0];
  int ydim10_opensbliblock00Kernel030 = args[10].dat->size[1];
  int xdim11_opensbliblock00Kernel030 = args[11].dat->size[0];
  int ydim11_opensbliblock00Kernel030 = args[11].dat->size[1];
  int xdim12_opensbliblock00Kernel030 = args[12].dat->size[0];
  int ydim12_opensbliblock00Kernel030 = args[12].dat->size[1];
  int xdim13_opensbliblock00Kernel030 = args[13].dat->size[0];
  int ydim13_opensbliblock00Kernel030 = args[13].dat->size[1];
  int xdim14_opensbliblock00Kernel030 = args[14].dat->size[0];
  int ydim14_opensbliblock00Kernel030 = args[14].dat->size[1];
  int xdim15_opensbliblock00Kernel030 = args[15].dat->size[0];
  int ydim15_opensbliblock00Kernel030 = args[15].dat->size[1];
  int xdim16_opensbliblock00Kernel030 = args[16].dat->size[0];
  int ydim16_opensbliblock00Kernel030 = args[16].dat->size[1];
  int xdim17_opensbliblock00Kernel030 = args[17].dat->size[0];
  int ydim17_opensbliblock00Kernel030 = args[17].dat->size[1];

  //set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset;
  double * __restrict__ T_B0_p = (double *)(args[0].data_d + base0);

  int base1 = args[1].dat->base_offset;
  double * __restrict__ mu_B0_p = (double *)(args[1].data_d + base1);

  int base2 = args[2].dat->base_offset;
  double * __restrict__ u0_B0_p = (double *)(args[2].data_d + base2);

  int base3 = args[3].dat->base_offset;
  double * __restrict__ u1_B0_p = (double *)(args[3].data_d + base3);

  int base4 = args[4].dat->base_offset;
  double * __restrict__ u2_B0_p = (double *)(args[4].data_d + base4);

  int base5 = args[5].dat->base_offset;
  double * __restrict__ wk0_B0_p = (double *)(args[5].data_d + base5);

  int base6 = args[6].dat->base_offset;
  double * __restrict__ wk1_B0_p = (double *)(args[6].data_d + base6);

  int base7 = args[7].dat->base_offset;
  double * __restrict__ wk2_B0_p = (double *)(args[7].data_d + base7);

  int base8 = args[8].dat->base_offset;
  double * __restrict__ wk3_B0_p = (double *)(args[8].data_d + base8);

  int base9 = args[9].dat->base_offset;
  double * __restrict__ wk4_B0_p = (double *)(args[9].data_d + base9);

  int base10 = args[10].dat->base_offset;
  double * __restrict__ wk5_B0_p = (double *)(args[10].data_d + base10);

  int base11 = args[11].dat->base_offset;
  double * __restrict__ wk6_B0_p = (double *)(args[11].data_d + base11);

  int base12 = args[12].dat->base_offset;
  double * __restrict__ wk7_B0_p = (double *)(args[12].data_d + base12);

  int base13 = args[13].dat->base_offset;
  double * __restrict__ wk8_B0_p = (double *)(args[13].data_d + base13);

  int base14 = args[14].dat->base_offset;
  double * __restrict__ Residual1_B0_p = (double *)(args[14].data_d + base14);

  int base15 = args[15].dat->base_offset;
  double * __restrict__ Residual2_B0_p = (double *)(args[15].data_d + base15);

  int base16 = args[16].dat->base_offset;
  double * __restrict__ Residual3_B0_p = (double *)(args[16].data_d + base16);

  int base17 = args[17].dat->base_offset;
  double * __restrict__ Residual4_B0_p = (double *)(args[17].data_d + base17);



  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_device(args, 18);
  ops_halo_exchanges(args,18,range);
  ops_H_D_exchanges_device(args, 18);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[18].mpi_time += __t1-__t2;
  }

  #pragma omp target teams distribute parallel for collapse(3)
  for ( int n_z=start2; n_z<end2; n_z++ ){
    for ( int n_y=start1; n_y<end1; n_y++ ){
      for ( int n_x=start0; n_x<end0; n_x++ ){
        const ACC<double> T_B0(xdim0_opensbliblock00Kernel030, ydim0_opensbliblock00Kernel030, T_B0_p + n_x*1 + n_y * xdim0_opensbliblock00Kernel030*1 + n_z * xdim0_opensbliblock00Kernel030 * ydim0_opensbliblock00Kernel030*1);
        const ACC<double> mu_B0(xdim1_opensbliblock00Kernel030, ydim1_opensbliblock00Kernel030, mu_B0_p + n_x*1 + n_y * xdim1_opensbliblock00Kernel030*1 + n_z * xdim1_opensbliblock00Kernel030 * ydim1_opensbliblock00Kernel030*1);
        const ACC<double> u0_B0(xdim2_opensbliblock00Kernel030, ydim2_opensbliblock00Kernel030, u0_B0_p + n_x*1 + n_y * xdim2_opensbliblock00Kernel030*1 + n_z * xdim2_opensbliblock00Kernel030 * ydim2_opensbliblock00Kernel030*1);
        const ACC<double> u1_B0(xdim3_opensbliblock00Kernel030, ydim3_opensbliblock00Kernel030, u1_B0_p + n_x*1 + n_y * xdim3_opensbliblock00Kernel030*1 + n_z * xdim3_opensbliblock00Kernel030 * ydim3_opensbliblock00Kernel030*1);
        const ACC<double> u2_B0(xdim4_opensbliblock00Kernel030, ydim4_opensbliblock00Kernel030, u2_B0_p + n_x*1 + n_y * xdim4_opensbliblock00Kernel030*1 + n_z * xdim4_opensbliblock00Kernel030 * ydim4_opensbliblock00Kernel030*1);
        const ACC<double> wk0_B0(xdim5_opensbliblock00Kernel030, ydim5_opensbliblock00Kernel030, wk0_B0_p + n_x*1 + n_y * xdim5_opensbliblock00Kernel030*1 + n_z * xdim5_opensbliblock00Kernel030 * ydim5_opensbliblock00Kernel030*1);
        const ACC<double> wk1_B0(xdim6_opensbliblock00Kernel030, ydim6_opensbliblock00Kernel030, wk1_B0_p + n_x*1 + n_y * xdim6_opensbliblock00Kernel030*1 + n_z * xdim6_opensbliblock00Kernel030 * ydim6_opensbliblock00Kernel030*1);
        const ACC<double> wk2_B0(xdim7_opensbliblock00Kernel030, ydim7_opensbliblock00Kernel030, wk2_B0_p + n_x*1 + n_y * xdim7_opensbliblock00Kernel030*1 + n_z * xdim7_opensbliblock00Kernel030 * ydim7_opensbliblock00Kernel030*1);
        const ACC<double> wk3_B0(xdim8_opensbliblock00Kernel030, ydim8_opensbliblock00Kernel030, wk3_B0_p + n_x*1 + n_y * xdim8_opensbliblock00Kernel030*1 + n_z * xdim8_opensbliblock00Kernel030 * ydim8_opensbliblock00Kernel030*1);
        const ACC<double> wk4_B0(xdim9_opensbliblock00Kernel030, ydim9_opensbliblock00Kernel030, wk4_B0_p + n_x*1 + n_y * xdim9_opensbliblock00Kernel030*1 + n_z * xdim9_opensbliblock00Kernel030 * ydim9_opensbliblock00Kernel030*1);
        const ACC<double> wk5_B0(xdim10_opensbliblock00Kernel030, ydim10_opensbliblock00Kernel030, wk5_B0_p + n_x*1 + n_y * xdim10_opensbliblock00Kernel030*1 + n_z * xdim10_opensbliblock00Kernel030 * ydim10_opensbliblock00Kernel030*1);
        const ACC<double> wk6_B0(xdim11_opensbliblock00Kernel030, ydim11_opensbliblock00Kernel030, wk6_B0_p + n_x*1 + n_y * xdim11_opensbliblock00Kernel030*1 + n_z * xdim11_opensbliblock00Kernel030 * ydim11_opensbliblock00Kernel030*1);
        const ACC<double> wk7_B0(xdim12_opensbliblock00Kernel030, ydim12_opensbliblock00Kernel030, wk7_B0_p + n_x*1 + n_y * xdim12_opensbliblock00Kernel030*1 + n_z * xdim12_opensbliblock00Kernel030 * ydim12_opensbliblock00Kernel030*1);
        const ACC<double> wk8_B0(xdim13_opensbliblock00Kernel030, ydim13_opensbliblock00Kernel030, wk8_B0_p + n_x*1 + n_y * xdim13_opensbliblock00Kernel030*1 + n_z * xdim13_opensbliblock00Kernel030 * ydim13_opensbliblock00Kernel030*1);
        ACC<double> Residual1_B0(xdim14_opensbliblock00Kernel030, ydim14_opensbliblock00Kernel030, Residual1_B0_p + n_x*1 + n_y * xdim14_opensbliblock00Kernel030*1 + n_z * xdim14_opensbliblock00Kernel030 * ydim14_opensbliblock00Kernel030*1);
        ACC<double> Residual2_B0(xdim15_opensbliblock00Kernel030, ydim15_opensbliblock00Kernel030, Residual2_B0_p + n_x*1 + n_y * xdim15_opensbliblock00Kernel030*1 + n_z * xdim15_opensbliblock00Kernel030 * ydim15_opensbliblock00Kernel030*1);
        ACC<double> Residual3_B0(xdim16_opensbliblock00Kernel030, ydim16_opensbliblock00Kernel030, Residual3_B0_p + n_x*1 + n_y * xdim16_opensbliblock00Kernel030*1 + n_z * xdim16_opensbliblock00Kernel030 * ydim16_opensbliblock00Kernel030*1);
        ACC<double> Residual4_B0(xdim17_opensbliblock00Kernel030, ydim17_opensbliblock00Kernel030, Residual4_B0_p + n_x*1 + n_y * xdim17_opensbliblock00Kernel030*1 + n_z * xdim17_opensbliblock00Kernel030 * ydim17_opensbliblock00Kernel030*1);
        
   double d1_T_dx = 0.0;
   double d1_T_dy = 0.0;
   double d1_T_dz = 0.0;
   double d1_mu_dx = 0.0;
   double d1_mu_dy = 0.0;
   double d1_mu_dz = 0.0;
   double d1_wk0_dy = 0.0;
   double d1_wk0_dz = 0.0;
   double d1_wk1_dy = 0.0;
   double d1_wk2_dz = 0.0;
   double d1_wk4_dz = 0.0;
   double d1_wk5_dz = 0.0;
   double d2_T_dx = 0.0;
   double d2_T_dy = 0.0;
   double d2_T_dz = 0.0;
   double d2_u0_dx = 0.0;
   double d2_u0_dy = 0.0;
   double d2_u0_dz = 0.0;
   double d2_u1_dx = 0.0;
   double d2_u1_dy = 0.0;
   double d2_u1_dz = 0.0;
   double d2_u2_dx = 0.0;
   double d2_u2_dy = 0.0;
   double d2_u2_dz = 0.0;
   d1_T_dx = -(1.0/12.0)*(-T_B0(-2,0,0) - 8*T_B0(1,0,0) + 8*T_B0(-1,0,0) + T_B0(2,0,0))*invDelta0block0;

    d2_T_dx = -(1.0/12.0)*(-16*T_B0(1,0,0) - 16*T_B0(-1,0,0) + 30*T_B0(0,0,0) + T_B0(-2,0,0) +
      T_B0(2,0,0))*inv2Delta0block0;

   d1_mu_dx = ((1.0/12.0))*(-mu_B0(2,0,0) - 8*mu_B0(-1,0,0) + 8*mu_B0(1,0,0) + mu_B0(-2,0,0))*invDelta0block0;

    d2_u0_dx = ((1.0/12.0))*(-u0_B0(-2,0,0) - u0_B0(2,0,0) - 30*u0_B0(0,0,0) + 16*u0_B0(1,0,0) +
      16*u0_B0(-1,0,0))*inv2Delta0block0;

    d2_u1_dx = ((1.0/12.0))*(-u1_B0(-2,0,0) - u1_B0(2,0,0) - 30*u1_B0(0,0,0) + 16*u1_B0(1,0,0) +
      16*u1_B0(-1,0,0))*inv2Delta0block0;

    d2_u2_dx = -(1.0/12.0)*(-16*u2_B0(1,0,0) - 16*u2_B0(-1,0,0) + 30*u2_B0(0,0,0) + u2_B0(-2,0,0) +
      u2_B0(2,0,0))*inv2Delta0block0;

   d1_T_dy = -(1.0/12.0)*(-T_B0(0,-2,0) - 8*T_B0(0,1,0) + 8*T_B0(0,-1,0) + T_B0(0,2,0))*invDelta1block0;

    d2_T_dy = -(1.0/12.0)*(-16*T_B0(0,1,0) - 16*T_B0(0,-1,0) + 30*T_B0(0,0,0) + T_B0(0,-2,0) +
      T_B0(0,2,0))*inv2Delta1block0;

   d1_mu_dy = ((1.0/12.0))*(-mu_B0(0,2,0) - 8*mu_B0(0,-1,0) + 8*mu_B0(0,1,0) + mu_B0(0,-2,0))*invDelta1block0;

    d2_u0_dy = ((1.0/12.0))*(-u0_B0(0,-2,0) - u0_B0(0,2,0) - 30*u0_B0(0,0,0) + 16*u0_B0(0,1,0) +
      16*u0_B0(0,-1,0))*inv2Delta1block0;

    d2_u1_dy = ((1.0/12.0))*(-u1_B0(0,-2,0) - u1_B0(0,2,0) - 30*u1_B0(0,0,0) + 16*u1_B0(0,1,0) +
      16*u1_B0(0,-1,0))*inv2Delta1block0;

    d2_u2_dy = -(1.0/12.0)*(-16*u2_B0(0,1,0) - 16*u2_B0(0,-1,0) + 30*u2_B0(0,0,0) + u2_B0(0,-2,0) +
      u2_B0(0,2,0))*inv2Delta1block0;

   d1_wk0_dy = -(1.0/12.0)*(-wk0_B0(0,-2,0) - 8*wk0_B0(0,1,0) + 8*wk0_B0(0,-1,0) + wk0_B0(0,2,0))*invDelta1block0;

   d1_wk1_dy = -(1.0/12.0)*(-wk1_B0(0,-2,0) - 8*wk1_B0(0,1,0) + 8*wk1_B0(0,-1,0) + wk1_B0(0,2,0))*invDelta1block0;

   d1_T_dz = ((1.0/12.0))*(-T_B0(0,0,2) - 8*T_B0(0,0,-1) + 8*T_B0(0,0,1) + T_B0(0,0,-2))*invDelta2block0;

    d2_T_dz = -(1.0/12.0)*(-16*T_B0(0,0,1) - 16*T_B0(0,0,-1) + 30*T_B0(0,0,0) + T_B0(0,0,-2) +
      T_B0(0,0,2))*inv2Delta2block0;

   d1_mu_dz = ((1.0/12.0))*(-mu_B0(0,0,2) - 8*mu_B0(0,0,-1) + 8*mu_B0(0,0,1) + mu_B0(0,0,-2))*invDelta2block0;

    d2_u0_dz = -(1.0/12.0)*(-16*u0_B0(0,0,1) - 16*u0_B0(0,0,-1) + 30*u0_B0(0,0,0) + u0_B0(0,0,-2) +
      u0_B0(0,0,2))*inv2Delta2block0;

    d2_u1_dz = -(1.0/12.0)*(-16*u1_B0(0,0,1) - 16*u1_B0(0,0,-1) + 30*u1_B0(0,0,0) + u1_B0(0,0,-2) +
      u1_B0(0,0,2))*inv2Delta2block0;

    d2_u2_dz = -(1.0/12.0)*(-16*u2_B0(0,0,1) - 16*u2_B0(0,0,-1) + 30*u2_B0(0,0,0) + u2_B0(0,0,-2) +
      u2_B0(0,0,2))*inv2Delta2block0;

   d1_wk0_dz = -(1.0/12.0)*(-wk0_B0(0,0,-2) - 8*wk0_B0(0,0,1) + 8*wk0_B0(0,0,-1) + wk0_B0(0,0,2))*invDelta2block0;

   d1_wk2_dz = ((1.0/12.0))*(-wk2_B0(0,0,2) - 8*wk2_B0(0,0,-1) + 8*wk2_B0(0,0,1) + wk2_B0(0,0,-2))*invDelta2block0;

   d1_wk4_dz = -(1.0/12.0)*(-wk4_B0(0,0,-2) - 8*wk4_B0(0,0,1) + 8*wk4_B0(0,0,-1) + wk4_B0(0,0,2))*invDelta2block0;

   d1_wk5_dz = ((1.0/12.0))*(-wk5_B0(0,0,2) - 8*wk5_B0(0,0,-1) + 8*wk5_B0(0,0,1) + wk5_B0(0,0,-2))*invDelta2block0;

    Residual1_B0(0,0,0) = (wk1_B0(0,0,0) + wk3_B0(0,0,0))*invRe*d1_mu_dy + (wk2_B0(0,0,0) +
      wk6_B0(0,0,0))*invRe*d1_mu_dz + ((1.0/3.0))*(3*d2_u0_dy + 3*d2_u0_dz + 4*d2_u0_dx + d1_wk1_dy +
      d1_wk2_dz)*invRe*mu_B0(0,0,0) + ((2.0/3.0))*(-wk4_B0(0,0,0) - wk8_B0(0,0,0) + 2*wk0_B0(0,0,0))*invRe*d1_mu_dx +
      Residual1_B0(0,0,0);

    Residual2_B0(0,0,0) = (wk1_B0(0,0,0) + wk3_B0(0,0,0))*invRe*d1_mu_dx + (wk5_B0(0,0,0) +
      wk7_B0(0,0,0))*invRe*d1_mu_dz - (2.0/3.0)*(-2*wk4_B0(0,0,0) + wk0_B0(0,0,0) + wk8_B0(0,0,0))*invRe*d1_mu_dy +
      ((1.0/3.0))*(3*d2_u1_dx + 3*d2_u1_dz + 4*d2_u1_dy + d1_wk0_dy + d1_wk5_dz)*invRe*mu_B0(0,0,0) +
      Residual2_B0(0,0,0);

    Residual3_B0(0,0,0) = (wk2_B0(0,0,0) + wk6_B0(0,0,0))*invRe*d1_mu_dx + (wk5_B0(0,0,0) +
      wk7_B0(0,0,0))*invRe*d1_mu_dy - (2.0/3.0)*(-2*wk8_B0(0,0,0) + wk0_B0(0,0,0) + wk4_B0(0,0,0))*invRe*d1_mu_dz +
      ((1.0/3.0))*(3*d2_u2_dx + 3*d2_u2_dy + 4*d2_u2_dz + d1_wk0_dz + d1_wk4_dz)*invRe*mu_B0(0,0,0) +
      Residual3_B0(0,0,0);

    Residual4_B0(0,0,0) = (wk1_B0(0,0,0) + wk3_B0(0,0,0))*invRe*mu_B0(0,0,0)*wk1_B0(0,0,0) + (wk1_B0(0,0,0) +
      wk3_B0(0,0,0))*invRe*mu_B0(0,0,0)*wk3_B0(0,0,0) + (wk1_B0(0,0,0) + wk3_B0(0,0,0))*invRe*u0_B0(0,0,0)*d1_mu_dy +
      (wk1_B0(0,0,0) + wk3_B0(0,0,0))*invRe*u1_B0(0,0,0)*d1_mu_dx + (wk2_B0(0,0,0) +
      wk6_B0(0,0,0))*invRe*mu_B0(0,0,0)*wk2_B0(0,0,0) + (wk2_B0(0,0,0) + wk6_B0(0,0,0))*invRe*mu_B0(0,0,0)*wk6_B0(0,0,0)
      + (wk2_B0(0,0,0) + wk6_B0(0,0,0))*invRe*u0_B0(0,0,0)*d1_mu_dz + (wk2_B0(0,0,0) +
      wk6_B0(0,0,0))*invRe*u2_B0(0,0,0)*d1_mu_dx + (wk5_B0(0,0,0) + wk7_B0(0,0,0))*invRe*mu_B0(0,0,0)*wk5_B0(0,0,0) +
      (wk5_B0(0,0,0) + wk7_B0(0,0,0))*invRe*mu_B0(0,0,0)*wk7_B0(0,0,0) + (wk5_B0(0,0,0) +
      wk7_B0(0,0,0))*invRe*u1_B0(0,0,0)*d1_mu_dz + (wk5_B0(0,0,0) + wk7_B0(0,0,0))*invRe*u2_B0(0,0,0)*d1_mu_dy -
      (2.0/3.0)*(-2*wk4_B0(0,0,0) + wk0_B0(0,0,0) + wk8_B0(0,0,0))*invRe*mu_B0(0,0,0)*wk4_B0(0,0,0) -
      (2.0/3.0)*(-2*wk4_B0(0,0,0) + wk0_B0(0,0,0) + wk8_B0(0,0,0))*invRe*u1_B0(0,0,0)*d1_mu_dy -
      (2.0/3.0)*(-2*wk8_B0(0,0,0) + wk0_B0(0,0,0) + wk4_B0(0,0,0))*invRe*mu_B0(0,0,0)*wk8_B0(0,0,0) -
      (2.0/3.0)*(-2*wk8_B0(0,0,0) + wk0_B0(0,0,0) + wk4_B0(0,0,0))*invRe*u2_B0(0,0,0)*d1_mu_dz + ((1.0/3.0))*(3*d2_u0_dy
      + 3*d2_u0_dz + 4*d2_u0_dx + d1_wk1_dy + d1_wk2_dz)*invRe*mu_B0(0,0,0)*u0_B0(0,0,0) + ((1.0/3.0))*(3*d2_u1_dx +
      3*d2_u1_dz + 4*d2_u1_dy + d1_wk0_dy + d1_wk5_dz)*invRe*mu_B0(0,0,0)*u1_B0(0,0,0) + ((1.0/3.0))*(3*d2_u2_dx +
      3*d2_u2_dy + 4*d2_u2_dz + d1_wk0_dz + d1_wk4_dz)*invRe*mu_B0(0,0,0)*u2_B0(0,0,0) + ((2.0/3.0))*(-wk4_B0(0,0,0) -
      wk8_B0(0,0,0) + 2*wk0_B0(0,0,0))*invRe*mu_B0(0,0,0)*wk0_B0(0,0,0) + ((2.0/3.0))*(-wk4_B0(0,0,0) - wk8_B0(0,0,0) +
      2*wk0_B0(0,0,0))*invRe*u0_B0(0,0,0)*d1_mu_dx + (d2_T_dx + d2_T_dy +
      d2_T_dz)*invPr*invRe*inv2Minf*inv_gamma_m1*mu_B0(0,0,0) + invPr*invRe*inv2Minf*inv_gamma_m1*d1_T_dx*d1_mu_dx +
      invPr*invRe*inv2Minf*inv_gamma_m1*d1_T_dy*d1_mu_dy + invPr*invRe*inv2Minf*inv_gamma_m1*d1_T_dz*d1_mu_dz +
      Residual4_B0(0,0,0);


      }
    }
  }
  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[18].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 18);
  ops_set_halo_dirtybit3(&args[14],range);
  ops_set_halo_dirtybit3(&args[15],range);
  ops_set_halo_dirtybit3(&args[16],range);
  ops_set_halo_dirtybit3(&args[17],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[18].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[18].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[18].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[18].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[18].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[18].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[18].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[18].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[18].transfer += ops_compute_transfer(dim, start, end, &arg7);
    block->instance->OPS_kernels[18].transfer += ops_compute_transfer(dim, start, end, &arg8);
    block->instance->OPS_kernels[18].transfer += ops_compute_transfer(dim, start, end, &arg9);
    block->instance->OPS_kernels[18].transfer += ops_compute_transfer(dim, start, end, &arg10);
    block->instance->OPS_kernels[18].transfer += ops_compute_transfer(dim, start, end, &arg11);
    block->instance->OPS_kernels[18].transfer += ops_compute_transfer(dim, start, end, &arg12);
    block->instance->OPS_kernels[18].transfer += ops_compute_transfer(dim, start, end, &arg13);
    block->instance->OPS_kernels[18].transfer += ops_compute_transfer(dim, start, end, &arg14);
    block->instance->OPS_kernels[18].transfer += ops_compute_transfer(dim, start, end, &arg15);
    block->instance->OPS_kernels[18].transfer += ops_compute_transfer(dim, start, end, &arg16);
    block->instance->OPS_kernels[18].transfer += ops_compute_transfer(dim, start, end, &arg17);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel030(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11,
 ops_arg arg12, ops_arg arg13, ops_arg arg14, ops_arg arg15,
 ops_arg arg16, ops_arg arg17) {
  ops_arg args[18] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17 };

  //create kernel descriptor and pass it to ops_enqueue_kernel
  create_kerneldesc_and_enque(name, args, 18, 18, dim, 0, range, block, ops_par_loop_opensbliblock00Kernel030_execute);
}
#endif
