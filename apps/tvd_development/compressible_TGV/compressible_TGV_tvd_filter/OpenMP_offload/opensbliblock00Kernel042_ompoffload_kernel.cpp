//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel042(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9) {
#else
void ops_par_loop_opensbliblock00Kernel042_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  ops_arg arg9 = desc->args[9];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[10] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,10,range,26)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,26,"opensbliblock00Kernel042");
    block->instance->OPS_kernels[26].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "opensbliblock00Kernel042");
  #endif


  //compute locally allocated range for the sub-block
  int start[3];
  int end[3];
  #if defined(OPS_MPI) && !defined(OPS_LAZY)
  int arg_idx[3];
  #endif
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<3; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 10,block, range, start, end, arg_idx) < 0) return;
  #endif

  int start0 = start[0];
  int end0 = end[0];
  int start1 = start[1];
  int end1 = end[1];
  int start2 = start[2];
  int end2 = end[2];


  //initialize global variable with the dimension of dats
  int xdim0_opensbliblock00Kernel042 = args[0].dat->size[0];
  int ydim0_opensbliblock00Kernel042 = args[0].dat->size[1];
  int xdim1_opensbliblock00Kernel042 = args[1].dat->size[0];
  int ydim1_opensbliblock00Kernel042 = args[1].dat->size[1];
  int xdim2_opensbliblock00Kernel042 = args[2].dat->size[0];
  int ydim2_opensbliblock00Kernel042 = args[2].dat->size[1];
  int xdim3_opensbliblock00Kernel042 = args[3].dat->size[0];
  int ydim3_opensbliblock00Kernel042 = args[3].dat->size[1];
  int xdim4_opensbliblock00Kernel042 = args[4].dat->size[0];
  int ydim4_opensbliblock00Kernel042 = args[4].dat->size[1];
  int xdim9_opensbliblock00Kernel042 = args[9].dat->size[0];
  int ydim9_opensbliblock00Kernel042 = args[9].dat->size[1];

  //set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset;
  double * __restrict__ mu_B0_p = (double *)(args[0].data_d + base0);

  int base1 = args[1].dat->base_offset;
  double * __restrict__ rho_B0_p = (double *)(args[1].data_d + base1);

  int base2 = args[2].dat->base_offset;
  double * __restrict__ u0_B0_p = (double *)(args[2].data_d + base2);

  int base3 = args[3].dat->base_offset;
  double * __restrict__ u1_B0_p = (double *)(args[3].data_d + base3);

  int base4 = args[4].dat->base_offset;
  double * __restrict__ u2_B0_p = (double *)(args[4].data_d + base4);

  #ifdef OPS_MPI
  double * __restrict__ p_a5 = (double *)(((ops_reduction)args[5].data)->data + ((ops_reduction)args[5].data)->size * block->index);
  #else //OPS_MPI
  double * __restrict__ p_a5 = (double *)((ops_reduction)args[5].data)->data;
  #endif //OPS_MPI


  #ifdef OPS_MPI
  double * __restrict__ p_a6 = (double *)(((ops_reduction)args[6].data)->data + ((ops_reduction)args[6].data)->size * block->index);
  #else //OPS_MPI
  double * __restrict__ p_a6 = (double *)((ops_reduction)args[6].data)->data;
  #endif //OPS_MPI


  #ifdef OPS_MPI
  double * __restrict__ p_a7 = (double *)(((ops_reduction)args[7].data)->data + ((ops_reduction)args[7].data)->size * block->index);
  #else //OPS_MPI
  double * __restrict__ p_a7 = (double *)((ops_reduction)args[7].data)->data;
  #endif //OPS_MPI


  #ifdef OPS_MPI
  double * __restrict__ p_a8 = (double *)(((ops_reduction)args[8].data)->data + ((ops_reduction)args[8].data)->size * block->index);
  #else //OPS_MPI
  double * __restrict__ p_a8 = (double *)((ops_reduction)args[8].data)->data;
  #endif //OPS_MPI


  int base9 = args[9].dat->base_offset;
  double * __restrict__ divV_B0_p = (double *)(args[9].data_d + base9);



  int consts_bytes = 0;

  reallocConstArrays(block->instance,consts_bytes);
  consts_bytes = 0;

  mvConstArraysToDevice(block->instance,consts_bytes);


  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_device(args, 10);
  ops_halo_exchanges(args,10,range);
  ops_H_D_exchanges_device(args, 10);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[26].mpi_time += __t1-__t2;
  }

  double p_a5_0 = p_a5[0];
  double p_a6_0 = p_a6[0];
  double p_a7_0 = p_a7[0];
  double p_a8_0 = p_a8[0];
  #pragma omp target teams distribute parallel for collapse(3) reduction(+:p_a5_0) reduction(+:p_a6_0) reduction(+:p_a7_0) reduction(+:p_a8_0)
  for ( int n_z=start2; n_z<end2; n_z++ ){
    for ( int n_y=start1; n_y<end1; n_y++ ){
      for ( int n_x=start0; n_x<end0; n_x++ ){
        const ACC<double> mu_B0(xdim0_opensbliblock00Kernel042, ydim0_opensbliblock00Kernel042, mu_B0_p + n_x*1 + n_y * xdim0_opensbliblock00Kernel042*1 + n_z * xdim0_opensbliblock00Kernel042 * ydim0_opensbliblock00Kernel042*1);
        const ACC<double> rho_B0(xdim1_opensbliblock00Kernel042, ydim1_opensbliblock00Kernel042, rho_B0_p + n_x*1 + n_y * xdim1_opensbliblock00Kernel042*1 + n_z * xdim1_opensbliblock00Kernel042 * ydim1_opensbliblock00Kernel042*1);
        const ACC<double> u0_B0(xdim2_opensbliblock00Kernel042, ydim2_opensbliblock00Kernel042, u0_B0_p + n_x*1 + n_y * xdim2_opensbliblock00Kernel042*1 + n_z * xdim2_opensbliblock00Kernel042 * ydim2_opensbliblock00Kernel042*1);
        const ACC<double> u1_B0(xdim3_opensbliblock00Kernel042, ydim3_opensbliblock00Kernel042, u1_B0_p + n_x*1 + n_y * xdim3_opensbliblock00Kernel042*1 + n_z * xdim3_opensbliblock00Kernel042 * ydim3_opensbliblock00Kernel042*1);
        const ACC<double> u2_B0(xdim4_opensbliblock00Kernel042, ydim4_opensbliblock00Kernel042, u2_B0_p + n_x*1 + n_y * xdim4_opensbliblock00Kernel042*1 + n_z * xdim4_opensbliblock00Kernel042 * ydim4_opensbliblock00Kernel042*1);
        ACC<double> divV_B0(xdim9_opensbliblock00Kernel042, ydim9_opensbliblock00Kernel042, divV_B0_p + n_x*1 + n_y * xdim9_opensbliblock00Kernel042*1 + n_z * xdim9_opensbliblock00Kernel042 * ydim9_opensbliblock00Kernel042*1);
        double KE_B0[1];
        KE_B0[0] = ZERO_double;
        double dilatation_dissipation_B0[1];
        dilatation_dissipation_B0[0] = ZERO_double;
        double enstrophy_dissipation_B0[1];
        enstrophy_dissipation_B0[0] = ZERO_double;
        double rhom_B0[1];
        rhom_B0[0] = ZERO_double;
        
   double d1_u0_dx = 0.0;
   double d1_u0_dy = 0.0;
   double d1_u0_dz = 0.0;
   double d1_u1_dx = 0.0;
   double d1_u1_dy = 0.0;
   double d1_u1_dz = 0.0;
   double d1_u2_dx = 0.0;
   double d1_u2_dy = 0.0;
   double d1_u2_dz = 0.0;
   double wx = 0.0;
   double wy = 0.0;
   double wz = 0.0;
    d1_u1_dz = (-(2.0/3.0)*u1_B0(0,0,-1) - (1.0/12.0)*u1_B0(0,0,2) + ((1.0/12.0))*u1_B0(0,0,-2) +
      ((2.0/3.0))*u1_B0(0,0,1))*invDelta2block0;

    d1_u2_dy = (-(2.0/3.0)*u2_B0(0,-1,0) - (1.0/12.0)*u2_B0(0,2,0) + ((1.0/12.0))*u2_B0(0,-2,0) +
      ((2.0/3.0))*u2_B0(0,1,0))*invDelta1block0;

   wx = -d1_u1_dz + d1_u2_dy;

    d1_u2_dx = (-(2.0/3.0)*u2_B0(-1,0,0) - (1.0/12.0)*u2_B0(2,0,0) + ((1.0/12.0))*u2_B0(-2,0,0) +
      ((2.0/3.0))*u2_B0(1,0,0))*invDelta0block0;

    d1_u0_dz = (-(2.0/3.0)*u0_B0(0,0,-1) - (1.0/12.0)*u0_B0(0,0,2) + ((1.0/12.0))*u0_B0(0,0,-2) +
      ((2.0/3.0))*u0_B0(0,0,1))*invDelta2block0;

   wy = -d1_u2_dx + d1_u0_dz;

    d1_u1_dx = (-(2.0/3.0)*u1_B0(-1,0,0) - (1.0/12.0)*u1_B0(2,0,0) + ((1.0/12.0))*u1_B0(-2,0,0) +
      ((2.0/3.0))*u1_B0(1,0,0))*invDelta0block0;

    d1_u0_dy = (-(2.0/3.0)*u0_B0(0,-1,0) - (1.0/12.0)*u0_B0(0,2,0) + ((1.0/12.0))*u0_B0(0,-2,0) +
      ((2.0/3.0))*u0_B0(0,1,0))*invDelta1block0;

   wz = -d1_u0_dy + d1_u1_dx;

    d1_u2_dz = (-(2.0/3.0)*u2_B0(0,0,-1) - (1.0/12.0)*u2_B0(0,0,2) + ((1.0/12.0))*u2_B0(0,0,-2) +
      ((2.0/3.0))*u2_B0(0,0,1))*invDelta2block0;

    d1_u1_dy = (-(2.0/3.0)*u1_B0(0,-1,0) - (1.0/12.0)*u1_B0(0,2,0) + ((1.0/12.0))*u1_B0(0,-2,0) +
      ((2.0/3.0))*u1_B0(0,1,0))*invDelta1block0;

    d1_u0_dx = (-(2.0/3.0)*u0_B0(-1,0,0) - (1.0/12.0)*u0_B0(2,0,0) + ((1.0/12.0))*u0_B0(-2,0,0) +
      ((2.0/3.0))*u0_B0(1,0,0))*invDelta0block0;

   divV_B0(0,0,0) = d1_u0_dx + d1_u1_dy + d1_u2_dz;

   *rhom_B0 = rho_B0(0,0,0) + *rhom_B0;

    *KE_B0 = 0.5*((u0_B0(0,0,0)*u0_B0(0,0,0)) + (u1_B0(0,0,0)*u1_B0(0,0,0)) + (u2_B0(0,0,0)*u2_B0(0,0,0)))*rho_B0(0,0,0)
      + *KE_B0;

   *dilatation_dissipation_B0 = ((4.0/3.0))*(divV_B0(0,0,0)*divV_B0(0,0,0))*mu_B0(0,0,0) + *dilatation_dissipation_B0;

   *enstrophy_dissipation_B0 = ((wx*wx) + (wy*wy) + (wz*wz))*mu_B0(0,0,0) + *enstrophy_dissipation_B0;


        p_a5_0 +=KE_B0[0];
        p_a6_0 +=dilatation_dissipation_B0[0];
        p_a7_0 +=enstrophy_dissipation_B0[0];
        p_a8_0 +=rhom_B0[0];
      }
    }
  }
  p_a5[0] = p_a5_0;
  p_a6[0] = p_a6_0;
  p_a7[0] = p_a7_0;
  p_a8[0] = p_a8_0;
  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[26].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 10);
  ops_set_halo_dirtybit3(&args[9],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[26].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[26].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[26].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[26].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[26].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[26].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[26].transfer += ops_compute_transfer(dim, start, end, &arg9);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel042(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9) {
  ops_arg args[10] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9 };

  //create kernel descriptor and pass it to ops_enqueue_kernel
  create_kerneldesc_and_enque(name, args, 10, 26, dim, 0, range, block, ops_par_loop_opensbliblock00Kernel042_execute);
}
#endif
