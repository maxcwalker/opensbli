//
// auto-generated by ops.py
//
__constant__ int dims_opensbliblock00Kernel070 [3][1];
static int dims_opensbliblock00Kernel070_h [3][1] = {{0}};

//user function
__device__

void opensbliblock00Kernel070_gpu(const ACC<double> &x1_B0,
  ACC<double> &wk3_B0,
  const int *idx)
{
    wk3_B0(0,0) = inv_3*((idx[0] == 0) ? (
   -1.50000000000003*x1_B0(2,0) +
      3.00000000000002*x1_B0(1,0) - 1.83333333333334*x1_B0(0,0) +
      1.06910315192207e-15*x1_B0(5,0) - 8.34657956545823e-15*x1_B0(4,0) +
      0.333333333333356*x1_B0(3,0)
)
: ((idx[0] == 1) ? (
   0.0394168524399447*x1_B0(2,0) +
      0.719443173328855*x1_B0(1,0) - 0.322484932882161*x1_B0(0,0) -
      0.376283677513354*x1_B0(-1,0) + 0.00571369039775442*x1_B0(4,0) -
      0.0658051057710389*x1_B0(3,0)
)
: ((idx[0] == 2) ? (
   -0.0367146847001261*x1_B0(2,0) +
      0.521455851089587*x1_B0(1,0) + 0.197184333887745*x1_B0(0,0) +
      0.113446470384241*x1_B0(-2,0) - 0.791245592765872*x1_B0(-1,0) -
      0.00412637789557492*x1_B0(3,0)
)
: ((idx[0] == 3) ? (
   -0.082033432844602*x1_B0(2,0) +
      0.652141084861241*x1_B0(1,0) + 0.0451033223343881*x1_B0(0,0) -
      0.727822147724592*x1_B0(-1,0) + 0.121937153224065*x1_B0(-2,0) -
      0.00932597985049999*x1_B0(-3,0)
)
: ((idx[0] == block0np0 - 1) ? (
   (rc8)*x1_B0(0,0) -
      4*x1_B0(-1,0) + 3*x1_B0(-2,0) - rc7*x1_B0(-3,0) + (rc9)*x1_B0(-4,0)
)
:
      ((idx[0] == block0np0 - 2) ? (
   (rc9)*x1_B0(1,0) + (rc11)*x1_B0(0,0) +
      (rc13)*x1_B0(-2,0) - rc12*x1_B0(-1,0) - rc10*x1_B0(-3,0)
)
: (

      -rc10*x1_B0(2,0) + (rc14)*x1_B0(1,0) - rc14*x1_B0(-1,0) +
      (rc10)*x1_B0(-2,0)
)))))));

}



__global__ void ops_opensbliblock00Kernel070(
double* __restrict arg0,
double* __restrict arg1,
int arg_idx0, int arg_idx1,
int size0,
int size1 ){

  //Make sure constants are not optimized out
  if (size0==-1) dims_opensbliblock00Kernel070[0][0]=0;


  int idx_y = hipBlockDim_y * hipBlockIdx_y + hipThreadIdx_y;
  int idx_x = hipBlockDim_x * hipBlockIdx_x + hipThreadIdx_x;

  int arg_idx[2];
  arg_idx[0] = arg_idx0+idx_x;
  arg_idx[1] = arg_idx1+idx_y;
  arg0 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel070[0][0];
  arg1 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel070[1][0];

  if (idx_x < size0 && idx_y < size1) {
    const ACC<double> argp0(dims_opensbliblock00Kernel070[0][0], arg0);
    ACC<double> argp1(dims_opensbliblock00Kernel070[1][0], arg1);
    opensbliblock00Kernel070_gpu(argp0, argp1, arg_idx);
  }

}

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel070(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2) {
#else
void ops_par_loop_opensbliblock00Kernel070_execute(ops_kernel_descriptor *desc) {
  int dim = desc->dim;
  #if OPS_MPI
  ops_block block = desc->block;
  #endif
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  #endif

  //Timing
  double t1,t2,c1,c2;

  ops_arg args[3] = { arg0, arg1, arg2};


  #if CHECKPOINTING && !OPS_LAZY
  if (!ops_checkpointing_before(args,3,range,3)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,3,"opensbliblock00Kernel070");
    block->instance->OPS_kernels[3].count++;
    ops_timers_core(&c1,&t1);
  }

  //compute locally allocated range for the sub-block
  int start[2];
  int end[2];
  #if OPS_MPI && !OPS_LAZY
  sub_block_list sb = OPS_sub_block_list[block->index];
  #endif //OPS_MPI

  int arg_idx[2];
  #ifdef OPS_MPI
  if (compute_ranges(args, 3,block, range, start, end, arg_idx) < 0) return;
  #else //OPS_MPI
  for ( int n=0; n<2; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
    arg_idx[n] = start[n];
  }
  #endif
  int xdim0 = args[0].dat->size[0];
  int xdim1 = args[1].dat->size[0];

  if (xdim0 != dims_opensbliblock00Kernel070_h[0][0] || xdim1 != dims_opensbliblock00Kernel070_h[1][0]) {
    dims_opensbliblock00Kernel070_h[0][0] = xdim0;
    dims_opensbliblock00Kernel070_h[1][0] = xdim1;
    hipSafeCall(block->instance->ostream(), hipMemcpyToSymbol(HIP_SYMBOL(dims_opensbliblock00Kernel070), dims_opensbliblock00Kernel070_h, sizeof(dims_opensbliblock00Kernel070)));
  }



  int x_size = MAX(0,end[0]-start[0]);
  int y_size = MAX(0,end[1]-start[1]);

  dim3 grid( (x_size-1)/block->instance->OPS_block_size_x+ 1, (y_size-1)/block->instance->OPS_block_size_y + 1, 1);
  dim3 tblock(block->instance->OPS_block_size_x,block->instance->OPS_block_size_y,block->instance->OPS_block_size_z);



  long long int dat0 = (block->instance->OPS_soa ? args[0].dat->type_size : args[0].dat->elem_size);
  long long int dat1 = (block->instance->OPS_soa ? args[1].dat->type_size : args[1].dat->elem_size);

  char *p_a[3];

  //set up initial pointers
  long long int base0 = args[0].dat->base_offset + 
           dat0 * 1 * (start[0] * args[0].stencil->stride[0]);
  base0 = base0+ dat0 *
    args[0].dat->size[0] *
    (start[1] * args[0].stencil->stride[1]);
  p_a[0] = (char *)args[0].data_d + base0;

  long long int base1 = args[1].dat->base_offset + 
           dat1 * 1 * (start[0] * args[1].stencil->stride[0]);
  base1 = base1+ dat1 *
    args[1].dat->size[0] *
    (start[1] * args[1].stencil->stride[1]);
  p_a[1] = (char *)args[1].data_d + base1;


  #ifndef OPS_LAZY
  ops_H_D_exchanges_device(args, 3);
  ops_halo_exchanges(args,3,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[3].mpi_time += t2-t1;
  }


  //call kernel wrapper function, passing in pointers to data
  if (x_size > 0 && y_size > 0)
    hipLaunchKernelGGL(ops_opensbliblock00Kernel070,grid ,tblock ,0 ,0 , (double *)p_a[0], (double *)p_a[1],
         arg_idx[0], arg_idx[1],x_size, y_size);

  hipSafeCall(block->instance->ostream(), hipGetLastError());

  if (block->instance->OPS_diags>1) {
    hipSafeCall(block->instance->ostream(), hipDeviceSynchronize());
    ops_timers_core(&c1,&t1);
    block->instance->OPS_kernels[3].time += t1-t2;
  }

  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 3);
  ops_set_halo_dirtybit3(&args[1],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[3].mpi_time += t2-t1;
    block->instance->OPS_kernels[3].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[3].transfer += ops_compute_transfer(dim, start, end, &arg1);
  }
}

#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel070(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)calloc(1,sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 1;
  desc->index = 3;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 3;
  for ( int i=0; i<4; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 3;
  desc->args = (ops_arg*)malloc(3*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  desc->function = ops_par_loop_opensbliblock00Kernel070_execute;
  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,3,"opensbliblock00Kernel070");
  }
  ops_enqueue_kernel(desc);
}
#endif
