//
// auto-generated by ops.py
//

extern int xdim0_opensbliblock00Kernel001;
int xdim0_opensbliblock00Kernel001_h = -1;
extern int xdim1_opensbliblock00Kernel001;
int xdim1_opensbliblock00Kernel001_h = -1;
extern int xdim2_opensbliblock00Kernel001;
int xdim2_opensbliblock00Kernel001_h = -1;
extern int xdim3_opensbliblock00Kernel001;
int xdim3_opensbliblock00Kernel001_h = -1;
extern int xdim4_opensbliblock00Kernel001;
int xdim4_opensbliblock00Kernel001_h = -1;
extern int xdim5_opensbliblock00Kernel001;
int xdim5_opensbliblock00Kernel001_h = -1;
extern int xdim6_opensbliblock00Kernel001;
int xdim6_opensbliblock00Kernel001_h = -1;
extern int xdim7_opensbliblock00Kernel001;
int xdim7_opensbliblock00Kernel001_h = -1;
extern int xdim8_opensbliblock00Kernel001;
int xdim8_opensbliblock00Kernel001_h = -1;
extern int xdim9_opensbliblock00Kernel001;
int xdim9_opensbliblock00Kernel001_h = -1;
extern int xdim10_opensbliblock00Kernel001;
int xdim10_opensbliblock00Kernel001_h = -1;
extern int xdim11_opensbliblock00Kernel001;
int xdim11_opensbliblock00Kernel001_h = -1;
extern int xdim12_opensbliblock00Kernel001;
int xdim12_opensbliblock00Kernel001_h = -1;
extern int xdim13_opensbliblock00Kernel001;
int xdim13_opensbliblock00Kernel001_h = -1;
extern int xdim14_opensbliblock00Kernel001;
int xdim14_opensbliblock00Kernel001_h = -1;
extern int xdim15_opensbliblock00Kernel001;
int xdim15_opensbliblock00Kernel001_h = -1;

#ifdef __cplusplus
extern "C" {
#endif
void opensbliblock00Kernel001_c_wrapper(
  double *p_a0,
  double *p_a1,
  double *p_a2,
  double *p_a3,
  double *p_a4,
  double *p_a5,
  double *p_a6,
  double *p_a7,
  double *p_a8,
  double *p_a9,
  double *p_a10,
  double *p_a11,
  double *p_a12,
  double *p_a13,
  double *p_a14,
  double *p_a15,
  int x_size, int y_size);

#ifdef __cplusplus
}
#endif

// host stub function
void ops_par_loop_opensbliblock00Kernel001(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3, ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7, ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11, ops_arg arg12, ops_arg arg13, ops_arg arg14, ops_arg arg15) {

  ops_arg args[16] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15};


  #ifdef CHECKPOINTING
  if (!ops_checkpointing_before(args,16,range,20)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,20,"opensbliblock00Kernel001");
    block->instance->OPS_kernels[20].count++;
  }

  //compute localy allocated range for the sub-block
  int start[2];
  int end[2];
  int arg_idx[2];

  #ifdef OPS_MPI
  if (compute_ranges(args, 16,block, range, start, end, arg_idx) < 0) return;
  #else
  for ( int n=0; n<2; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
    arg_idx[n] = start[n];
  }
  #endif

  int x_size = MAX(0,end[0]-start[0]);
  int y_size = MAX(0,end[1]-start[1]);

  int xdim0 = args[0].dat->size[0];
  int xdim1 = args[1].dat->size[0];
  int xdim2 = args[2].dat->size[0];
  int xdim3 = args[3].dat->size[0];
  int xdim4 = args[4].dat->size[0];
  int xdim5 = args[5].dat->size[0];
  int xdim6 = args[6].dat->size[0];
  int xdim7 = args[7].dat->size[0];
  int xdim8 = args[8].dat->size[0];
  int xdim9 = args[9].dat->size[0];
  int xdim10 = args[10].dat->size[0];
  int xdim11 = args[11].dat->size[0];
  int xdim12 = args[12].dat->size[0];
  int xdim13 = args[13].dat->size[0];
  int xdim14 = args[14].dat->size[0];
  int xdim15 = args[15].dat->size[0];

  //Timing
  double t1,t2,c1,c2;
  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&c2,&t2);
  }

  if (xdim0 != xdim0_opensbliblock00Kernel001_h || xdim1 != xdim1_opensbliblock00Kernel001_h || xdim2 != xdim2_opensbliblock00Kernel001_h || xdim3 != xdim3_opensbliblock00Kernel001_h || xdim4 != xdim4_opensbliblock00Kernel001_h || xdim5 != xdim5_opensbliblock00Kernel001_h || xdim6 != xdim6_opensbliblock00Kernel001_h || xdim7 != xdim7_opensbliblock00Kernel001_h || xdim8 != xdim8_opensbliblock00Kernel001_h || xdim9 != xdim9_opensbliblock00Kernel001_h || xdim10 != xdim10_opensbliblock00Kernel001_h || xdim11 != xdim11_opensbliblock00Kernel001_h || xdim12 != xdim12_opensbliblock00Kernel001_h || xdim13 != xdim13_opensbliblock00Kernel001_h || xdim14 != xdim14_opensbliblock00Kernel001_h || xdim15 != xdim15_opensbliblock00Kernel001_h) {
    xdim0_opensbliblock00Kernel001 = xdim0;
    xdim0_opensbliblock00Kernel001_h = xdim0;
    xdim1_opensbliblock00Kernel001 = xdim1;
    xdim1_opensbliblock00Kernel001_h = xdim1;
    xdim2_opensbliblock00Kernel001 = xdim2;
    xdim2_opensbliblock00Kernel001_h = xdim2;
    xdim3_opensbliblock00Kernel001 = xdim3;
    xdim3_opensbliblock00Kernel001_h = xdim3;
    xdim4_opensbliblock00Kernel001 = xdim4;
    xdim4_opensbliblock00Kernel001_h = xdim4;
    xdim5_opensbliblock00Kernel001 = xdim5;
    xdim5_opensbliblock00Kernel001_h = xdim5;
    xdim6_opensbliblock00Kernel001 = xdim6;
    xdim6_opensbliblock00Kernel001_h = xdim6;
    xdim7_opensbliblock00Kernel001 = xdim7;
    xdim7_opensbliblock00Kernel001_h = xdim7;
    xdim8_opensbliblock00Kernel001 = xdim8;
    xdim8_opensbliblock00Kernel001_h = xdim8;
    xdim9_opensbliblock00Kernel001 = xdim9;
    xdim9_opensbliblock00Kernel001_h = xdim9;
    xdim10_opensbliblock00Kernel001 = xdim10;
    xdim10_opensbliblock00Kernel001_h = xdim10;
    xdim11_opensbliblock00Kernel001 = xdim11;
    xdim11_opensbliblock00Kernel001_h = xdim11;
    xdim12_opensbliblock00Kernel001 = xdim12;
    xdim12_opensbliblock00Kernel001_h = xdim12;
    xdim13_opensbliblock00Kernel001 = xdim13;
    xdim13_opensbliblock00Kernel001_h = xdim13;
    xdim14_opensbliblock00Kernel001 = xdim14;
    xdim14_opensbliblock00Kernel001_h = xdim14;
    xdim15_opensbliblock00Kernel001 = xdim15;
    xdim15_opensbliblock00Kernel001_h = xdim15;
  }



  //set up initial pointers and exchange halos if necessary
  long long int base0 = args[0].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[0].dat->type_size : args[0].dat->elem_size) * start[0] * args[0].stencil->stride[0];
  base0 = base0+ (long long int)(block->instance->OPS_soa ? args[0].dat->type_size : args[0].dat->elem_size) *
    args[0].dat->size[0] *
    start[1] * args[0].stencil->stride[1];
  double *p_a0 = (double *)(args[0].data + base0);

  long long int base1 = args[1].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[1].dat->type_size : args[1].dat->elem_size) * start[0] * args[1].stencil->stride[0];
  base1 = base1+ (long long int)(block->instance->OPS_soa ? args[1].dat->type_size : args[1].dat->elem_size) *
    args[1].dat->size[0] *
    start[1] * args[1].stencil->stride[1];
  double *p_a1 = (double *)(args[1].data + base1);

  long long int base2 = args[2].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[2].dat->type_size : args[2].dat->elem_size) * start[0] * args[2].stencil->stride[0];
  base2 = base2+ (long long int)(block->instance->OPS_soa ? args[2].dat->type_size : args[2].dat->elem_size) *
    args[2].dat->size[0] *
    start[1] * args[2].stencil->stride[1];
  double *p_a2 = (double *)(args[2].data + base2);

  long long int base3 = args[3].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[3].dat->type_size : args[3].dat->elem_size) * start[0] * args[3].stencil->stride[0];
  base3 = base3+ (long long int)(block->instance->OPS_soa ? args[3].dat->type_size : args[3].dat->elem_size) *
    args[3].dat->size[0] *
    start[1] * args[3].stencil->stride[1];
  double *p_a3 = (double *)(args[3].data + base3);

  long long int base4 = args[4].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[4].dat->type_size : args[4].dat->elem_size) * start[0] * args[4].stencil->stride[0];
  base4 = base4+ (long long int)(block->instance->OPS_soa ? args[4].dat->type_size : args[4].dat->elem_size) *
    args[4].dat->size[0] *
    start[1] * args[4].stencil->stride[1];
  double *p_a4 = (double *)(args[4].data + base4);

  long long int base5 = args[5].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[5].dat->type_size : args[5].dat->elem_size) * start[0] * args[5].stencil->stride[0];
  base5 = base5+ (long long int)(block->instance->OPS_soa ? args[5].dat->type_size : args[5].dat->elem_size) *
    args[5].dat->size[0] *
    start[1] * args[5].stencil->stride[1];
  double *p_a5 = (double *)(args[5].data + base5);

  long long int base6 = args[6].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[6].dat->type_size : args[6].dat->elem_size) * start[0] * args[6].stencil->stride[0];
  base6 = base6+ (long long int)(block->instance->OPS_soa ? args[6].dat->type_size : args[6].dat->elem_size) *
    args[6].dat->size[0] *
    start[1] * args[6].stencil->stride[1];
  double *p_a6 = (double *)(args[6].data + base6);

  long long int base7 = args[7].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[7].dat->type_size : args[7].dat->elem_size) * start[0] * args[7].stencil->stride[0];
  base7 = base7+ (long long int)(block->instance->OPS_soa ? args[7].dat->type_size : args[7].dat->elem_size) *
    args[7].dat->size[0] *
    start[1] * args[7].stencil->stride[1];
  double *p_a7 = (double *)(args[7].data + base7);

  long long int base8 = args[8].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[8].dat->type_size : args[8].dat->elem_size) * start[0] * args[8].stencil->stride[0];
  base8 = base8+ (long long int)(block->instance->OPS_soa ? args[8].dat->type_size : args[8].dat->elem_size) *
    args[8].dat->size[0] *
    start[1] * args[8].stencil->stride[1];
  double *p_a8 = (double *)(args[8].data + base8);

  long long int base9 = args[9].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[9].dat->type_size : args[9].dat->elem_size) * start[0] * args[9].stencil->stride[0];
  base9 = base9+ (long long int)(block->instance->OPS_soa ? args[9].dat->type_size : args[9].dat->elem_size) *
    args[9].dat->size[0] *
    start[1] * args[9].stencil->stride[1];
  double *p_a9 = (double *)(args[9].data + base9);

  long long int base10 = args[10].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[10].dat->type_size : args[10].dat->elem_size) * start[0] * args[10].stencil->stride[0];
  base10 = base10+ (long long int)(block->instance->OPS_soa ? args[10].dat->type_size : args[10].dat->elem_size) *
    args[10].dat->size[0] *
    start[1] * args[10].stencil->stride[1];
  double *p_a10 = (double *)(args[10].data + base10);

  long long int base11 = args[11].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[11].dat->type_size : args[11].dat->elem_size) * start[0] * args[11].stencil->stride[0];
  base11 = base11+ (long long int)(block->instance->OPS_soa ? args[11].dat->type_size : args[11].dat->elem_size) *
    args[11].dat->size[0] *
    start[1] * args[11].stencil->stride[1];
  double *p_a11 = (double *)(args[11].data + base11);

  long long int base12 = args[12].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[12].dat->type_size : args[12].dat->elem_size) * start[0] * args[12].stencil->stride[0];
  base12 = base12+ (long long int)(block->instance->OPS_soa ? args[12].dat->type_size : args[12].dat->elem_size) *
    args[12].dat->size[0] *
    start[1] * args[12].stencil->stride[1];
  double *p_a12 = (double *)(args[12].data + base12);

  long long int base13 = args[13].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[13].dat->type_size : args[13].dat->elem_size) * start[0] * args[13].stencil->stride[0];
  base13 = base13+ (long long int)(block->instance->OPS_soa ? args[13].dat->type_size : args[13].dat->elem_size) *
    args[13].dat->size[0] *
    start[1] * args[13].stencil->stride[1];
  double *p_a13 = (double *)(args[13].data + base13);

  long long int base14 = args[14].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[14].dat->type_size : args[14].dat->elem_size) * start[0] * args[14].stencil->stride[0];
  base14 = base14+ (long long int)(block->instance->OPS_soa ? args[14].dat->type_size : args[14].dat->elem_size) *
    args[14].dat->size[0] *
    start[1] * args[14].stencil->stride[1];
  double *p_a14 = (double *)(args[14].data + base14);

  long long int base15 = args[15].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[15].dat->type_size : args[15].dat->elem_size) * start[0] * args[15].stencil->stride[0];
  base15 = base15+ (long long int)(block->instance->OPS_soa ? args[15].dat->type_size : args[15].dat->elem_size) *
    args[15].dat->size[0] *
    start[1] * args[15].stencil->stride[1];
  double *p_a15 = (double *)(args[15].data + base15);



  ops_H_D_exchanges_host(args, 16);
  ops_halo_exchanges(args,16,range);

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&c1,&t1);
    block->instance->OPS_kernels[20].mpi_time += t1-t2;
  }

  opensbliblock00Kernel001_c_wrapper(
    p_a0,
    p_a1,
    p_a2,
    p_a3,
    p_a4,
    p_a5,
    p_a6,
    p_a7,
    p_a8,
    p_a9,
    p_a10,
    p_a11,
    p_a12,
    p_a13,
    p_a14,
    p_a15,
    x_size, y_size);

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[20].time += t2-t1;
  }
  ops_set_dirtybit_host(args, 16);
  ops_set_halo_dirtybit3(&args[12],range);
  ops_set_halo_dirtybit3(&args[13],range);
  ops_set_halo_dirtybit3(&args[14],range);
  ops_set_halo_dirtybit3(&args[15],range);

  //Update kernel record
  if (block->instance->OPS_diags > 1) {
    block->instance->OPS_kernels[20].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[20].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[20].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[20].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[20].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[20].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[20].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[20].transfer += ops_compute_transfer(dim, start, end, &arg7);
    block->instance->OPS_kernels[20].transfer += ops_compute_transfer(dim, start, end, &arg8);
    block->instance->OPS_kernels[20].transfer += ops_compute_transfer(dim, start, end, &arg9);
    block->instance->OPS_kernels[20].transfer += ops_compute_transfer(dim, start, end, &arg10);
    block->instance->OPS_kernels[20].transfer += ops_compute_transfer(dim, start, end, &arg11);
    block->instance->OPS_kernels[20].transfer += ops_compute_transfer(dim, start, end, &arg12);
    block->instance->OPS_kernels[20].transfer += ops_compute_transfer(dim, start, end, &arg13);
    block->instance->OPS_kernels[20].transfer += ops_compute_transfer(dim, start, end, &arg14);
    block->instance->OPS_kernels[20].transfer += ops_compute_transfer(dim, start, end, &arg15);
  }
}
