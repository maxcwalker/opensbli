//
// auto-generated by ops.py
//

#ifdef OCL_FMA
#pragma OPENCL FP_CONTRACT ON
#else
#pragma OPENCL FP_CONTRACT OFF
#endif
#pragma OPENCL EXTENSION cl_khr_fp64:enable

#define OPS_2D
#define OPS_API 2
#define OPS_NO_GLOBALS
#include "ops_macros.h"
#include "ops_opencl_reduction.h"

#ifndef MIN
#define MIN(a,b) ((a<b) ? (a) : (b))
#endif
#ifndef MAX
#define MAX(a,b) ((a>b) ? (a) : (b))
#endif
#ifndef SIGN
#define SIGN(a,b) ((b<0.0) ? (a*(-1)) : (a))
#endif
#define OPS_READ 0
#define OPS_WRITE 1
#define OPS_RW 2
#define OPS_INC 3
#define OPS_MIN 4
#define OPS_MAX 5

//user function

 void opensbliblock00Kernel052(const ptr_double x1_B0,
  const ptr_double x0_B0,
  ptr_double detJ_B0,
  ptr_double D01_B0,
  ptr_double D00_B0,
  ptr_double D10_B0,
  ptr_double D11_B0,
  const int *idx, const int block0np0, const double inv_0, const double inv_1, const double rc7, const double rc8, const double rc9, const double rc10)
{
   double localeval_3 = 0.0;
   double localeval_1 = 0.0;
   double localeval_2 = 0.0;
   double localeval_0 = 0.0;
    localeval_0 = ((idx[0] == 0) ? (
   inv_1*(-rc7*OPS_ACCS(x1_B0, 4,0) + (rc8)*OPS_ACCS(x1_B0, 3,0) -
      3*OPS_ACCS(x1_B0, 2,0) + 4*OPS_ACCS(x1_B0, 1,0) - rc9*OPS_ACCS(x1_B0, 0,0))
)
: ((idx[0] == 1) ? (

      (rc10)*inv_1*(-3*OPS_ACCS(x1_B0, -1,0) + OPS_ACCS(x1_B0, 3,0) - 6*OPS_ACCS(x1_B0, 2,0) + 18*OPS_ACCS(x1_B0, 1,0) -
      10*OPS_ACCS(x1_B0, 0,0))
)
: ((idx[0] == block0np0 - 1) ? (
   inv_1*(3*OPS_ACCS(x1_B0, -2,0) -
      4*OPS_ACCS(x1_B0, -1,0) - rc8*OPS_ACCS(x1_B0, -3,0) + (rc7)*OPS_ACCS(x1_B0, -4,0) +
      (rc9)*OPS_ACCS(x1_B0, 0,0))
)
: ((idx[0] == block0np0 - 2) ? (
   (rc10)*inv_1*(6*OPS_ACCS(x1_B0, -2,0) -
      18*OPS_ACCS(x1_B0, -1,0) - OPS_ACCS(x1_B0, -3,0) + 3*OPS_ACCS(x1_B0, 1,0) + 10*OPS_ACCS(x1_B0, 0,0))
)
: (

      (rc10)*inv_1*(OPS_ACCS(x1_B0, -2,0) - OPS_ACCS(x1_B0, 2,0) - 8*OPS_ACCS(x1_B0, -1,0) +
      8*OPS_ACCS(x1_B0, 1,0))
)))));

    localeval_1 = ((idx[1] == 0) ? (
   inv_0*(-rc7*OPS_ACCS(x0_B0, 0,4) + 4*OPS_ACCS(x0_B0, 0,1) -
      3*OPS_ACCS(x0_B0, 0,2) + (rc8)*OPS_ACCS(x0_B0, 0,3) - rc9*OPS_ACCS(x0_B0, 0,0))
)
: ((idx[1] == 1) ? (

      (rc10)*inv_0*(18*OPS_ACCS(x0_B0, 0,1) - 6*OPS_ACCS(x0_B0, 0,2) + OPS_ACCS(x0_B0, 0,3) - 3*OPS_ACCS(x0_B0, 0,-1) -
      10*OPS_ACCS(x0_B0, 0,0))
)
: (
   (rc10)*inv_0*(-8*OPS_ACCS(x0_B0, 0,-1) + OPS_ACCS(x0_B0, 0,-2) +
      8*OPS_ACCS(x0_B0, 0,1) - OPS_ACCS(x0_B0, 0,2))
)));

    localeval_2 = ((idx[0] == 0) ? (
   inv_1*(4*OPS_ACCS(x0_B0, 1,0) - 3*OPS_ACCS(x0_B0, 2,0) -
      rc7*OPS_ACCS(x0_B0, 4,0) + (rc8)*OPS_ACCS(x0_B0, 3,0) - rc9*OPS_ACCS(x0_B0, 0,0))
)
: ((idx[0] == 1) ? (

      (rc10)*inv_1*(18*OPS_ACCS(x0_B0, 1,0) - 6*OPS_ACCS(x0_B0, 2,0) + OPS_ACCS(x0_B0, 3,0) - 3*OPS_ACCS(x0_B0, -1,0) -
      10*OPS_ACCS(x0_B0, 0,0))
)
: ((idx[0] == block0np0 - 1) ? (
   inv_1*(3*OPS_ACCS(x0_B0, -2,0) +
      (rc7)*OPS_ACCS(x0_B0, -4,0) - rc8*OPS_ACCS(x0_B0, -3,0) - 4*OPS_ACCS(x0_B0, -1,0) +
      (rc9)*OPS_ACCS(x0_B0, 0,0))
)
: ((idx[0] == block0np0 - 2) ? (
   (rc10)*inv_1*(3*OPS_ACCS(x0_B0, 1,0) +
      6*OPS_ACCS(x0_B0, -2,0) - OPS_ACCS(x0_B0, -3,0) - 18*OPS_ACCS(x0_B0, -1,0) + 10*OPS_ACCS(x0_B0, 0,0))
)
: (

      (rc10)*inv_1*(8*OPS_ACCS(x0_B0, 1,0) - 8*OPS_ACCS(x0_B0, -1,0) + OPS_ACCS(x0_B0, -2,0) -
      OPS_ACCS(x0_B0, 2,0))
)))));

    localeval_3 = ((idx[1] == 0) ? (
   inv_0*((rc8)*OPS_ACCS(x1_B0, 0,3) - 3*OPS_ACCS(x1_B0, 0,2) +
      4*OPS_ACCS(x1_B0, 0,1) - rc7*OPS_ACCS(x1_B0, 0,4) - rc9*OPS_ACCS(x1_B0, 0,0))
)
: ((idx[1] == 1) ? (

      (rc10)*inv_0*(OPS_ACCS(x1_B0, 0,3) - 6*OPS_ACCS(x1_B0, 0,2) - 3*OPS_ACCS(x1_B0, 0,-1) + 18*OPS_ACCS(x1_B0, 0,1) -
      10*OPS_ACCS(x1_B0, 0,0))
)
: (
   (rc10)*inv_0*(-OPS_ACCS(x1_B0, 0,2) + 8*OPS_ACCS(x1_B0, 0,1) +
      OPS_ACCS(x1_B0, 0,-2) - 8*OPS_ACCS(x1_B0, 0,-1))
)));

   OPS_ACCS(detJ_B0, 0,0) = -localeval_0*localeval_1 + localeval_2*localeval_3;

   OPS_ACCS(D00_B0, 0,0) = localeval_3/(-localeval_0*localeval_1 + localeval_2*localeval_3);

   OPS_ACCS(D01_B0, 0,0) = -localeval_1/(-localeval_0*localeval_1 + localeval_2*localeval_3);

   OPS_ACCS(D10_B0, 0,0) = -localeval_0/(-localeval_0*localeval_1 + localeval_2*localeval_3);

   OPS_ACCS(D11_B0, 0,0) = localeval_2/(-localeval_0*localeval_1 + localeval_2*localeval_3);

}


__kernel void ops_opensbliblock00Kernel052(
__global const double* restrict arg0,
__global const double* restrict arg1,
__global double* restrict arg2,
__global double* restrict arg3,
__global double* restrict arg4,
__global double* restrict arg5,
__global double* restrict arg6,
const int block0np0,
const double inv_0,
const double inv_1,
const double rc7,
const double rc8,
const double rc9,
const double rc10,
const int base0,
const int base1,
const int base2,
const int base3,
const int base4,
const int base5,
const int base6,
int arg_idx0, int arg_idx1,
const int size0,
const int size1 ){


  int idx_y = get_global_id(1);
  int idx_x = get_global_id(0);

  int arg_idx[2];
  arg_idx[0] = arg_idx0+idx_x;
  arg_idx[1] = arg_idx1+idx_y;
  if (idx_x < size0 && idx_y < size1) {
    const ptr_double ptr0 = { &arg0[base0 + idx_x * 1*1 + idx_y * 1*1 * xdim0_opensbliblock00Kernel052], xdim0_opensbliblock00Kernel052};
    const ptr_double ptr1 = { &arg1[base1 + idx_x * 1*1 + idx_y * 1*1 * xdim1_opensbliblock00Kernel052], xdim1_opensbliblock00Kernel052};
    ptr_double ptr2 = { &arg2[base2 + idx_x * 1*1 + idx_y * 1*1 * xdim2_opensbliblock00Kernel052], xdim2_opensbliblock00Kernel052};
    ptr_double ptr3 = { &arg3[base3 + idx_x * 1*1 + idx_y * 1*1 * xdim3_opensbliblock00Kernel052], xdim3_opensbliblock00Kernel052};
    ptr_double ptr4 = { &arg4[base4 + idx_x * 1*1 + idx_y * 1*1 * xdim4_opensbliblock00Kernel052], xdim4_opensbliblock00Kernel052};
    ptr_double ptr5 = { &arg5[base5 + idx_x * 1*1 + idx_y * 1*1 * xdim5_opensbliblock00Kernel052], xdim5_opensbliblock00Kernel052};
    ptr_double ptr6 = { &arg6[base6 + idx_x * 1*1 + idx_y * 1*1 * xdim6_opensbliblock00Kernel052], xdim6_opensbliblock00Kernel052};
    opensbliblock00Kernel052(ptr0,
                                  ptr1,
                                  ptr2,
                                  ptr3,
                                  ptr4,
                                  ptr5,
                                  ptr6,
                                  arg_idx,
                                  block0np0,
                                  inv_0,
                                  inv_1,
                                  rc7,
                                  rc8,
                                  rc9,
                                  rc10);
  }

}
