//
// auto-generated by ops.py
//

#ifdef OCL_FMA
#pragma OPENCL FP_CONTRACT ON
#else
#pragma OPENCL FP_CONTRACT OFF
#endif
#pragma OPENCL EXTENSION cl_khr_fp64:enable

#define OPS_2D
#define OPS_API 2
#define OPS_NO_GLOBALS
#include "ops_macros.h"
#include "ops_opencl_reduction.h"

#ifndef MIN
#define MIN(a,b) ((a<b) ? (a) : (b))
#endif
#ifndef MAX
#define MAX(a,b) ((a>b) ? (a) : (b))
#endif
#ifndef SIGN
#define SIGN(a,b) ((b<0.0) ? (a*(-1)) : (a))
#endif
#define OPS_READ 0
#define OPS_WRITE 1
#define OPS_RW 2
#define OPS_INC 3
#define OPS_MIN 4
#define OPS_MAX 5

//user function

 void opensbliblock00Kernel000(const ptr_double rho_B0,
  const ptr_double p_B0,
  const ptr_double D01_B0,
  const ptr_double rhou0_B0,
  const ptr_double a_B0,
  const ptr_double u1_B0,
  const ptr_double u0_B0,
  const ptr_double detJ_B0,
  const ptr_double rhoE_B0,
  const ptr_double D00_B0,
  const ptr_double rhou1_B0,
  const ptr_double U0_B0,
  ptr_double wk1_B0,
  ptr_double wk3_B0,
  ptr_double wk2_B0,
  ptr_double wk0_B0, const double gama, const double gamma_m1, const double rc10, const double rc12, const double rc14, const double rc15, const double rc16, const double rc17, const double rc18, const double rc19, const double rc20, const double rc21, const double rc22, const double rc23, const double rc24, const double rc25, const double rc26, const double rc27, const double rc28, const double rc29, const double rc30, const double rcinv31)
{
   double Recon_0 = 0.0;
   double CF_23 = 0.0;
   double AVG_0_rho = 0.0;
   double CS_14 = 0.0;
   double CS_25 = 0.0;
   double omega_0 = 0.0;
   double AVG_0_0_LEV_21 = 0.0;
   double CS_33 = 0.0;
   double inv_alpha_sum = 0.0;
   double AVG_0_0_LEV_00 = 0.0;
   double CF_10 = 0.0;
   double CF_13 = 0.0;
   double CF_32 = 0.0;
   double CS_22 = 0.0;
   double Recon_3 = 0.0;
   double max_lambda_0_33 = 0.0;
   double omega_1 = 0.0;
   double AVG_0_0_LEV_01 = 0.0;
   double CF_34 = 0.0;
   double CS_21 = 0.0;
   double beta_1 = 0.0;
   double AVG_0_0_LEV_03 = 0.0;
   double inv_AVG_met_fact = 0.0;
   double AVG_0_0_LEV_10 = 0.0;
   double CS_10 = 0.0;
   double alpha_2 = 0.0;
   double CF_14 = 0.0;
   double AVG_0_u1 = 0.0;
   double AVG_0_0_LEV_32 = 0.0;
   double CF_25 = 0.0;
   double CF_00 = 0.0;
   double AVG_0_0_LEV_33 = 0.0;
   double AVG_0_D01 = 0.0;
   double alpha_1 = 0.0;
   double AVG_0_D00 = 0.0;
   double max_lambda_0_22 = 0.0;
   double CS_12 = 0.0;
   double AVG_0_u0 = 0.0;
   double CS_31 = 0.0;
   double CS_02 = 0.0;
   double CF_30 = 0.0;
   double CF_15 = 0.0;
   double CS_00 = 0.0;
   double CS_04 = 0.0;
   double CS_30 = 0.0;
   double CF_05 = 0.0;
   double CS_13 = 0.0;
   double CF_35 = 0.0;
   double AVG_0_0_LEV_02 = 0.0;
   double CS_32 = 0.0;
   double AVG_0_a = 0.0;
   double CS_03 = 0.0;
   double CS_15 = 0.0;
   double CS_35 = 0.0;
   double CS_34 = 0.0;
   double CF_02 = 0.0;
   double AVG_0_0_LEV_22 = 0.0;
   double CF_31 = 0.0;
   double AVG_0_0_LEV_11 = 0.0;
   double CS_23 = 0.0;
   double CS_01 = 0.0;
   double CS_24 = 0.0;
   double inv_AVG_rho = 0.0;
   double AVG_0_0_LEV_20 = 0.0;
   double CF_22 = 0.0;
   double CF_33 = 0.0;
   double inv_AVG_a = 0.0;
   double CF_21 = 0.0;
   double AVG_0_0_LEV_31 = 0.0;
   double alpha_0 = 0.0;
   double beta_0 = 0.0;
   double beta_2 = 0.0;
   double AVG_0_0_LEV_12 = 0.0;
   double CF_11 = 0.0;
   double CF_24 = 0.0;
   double max_lambda_0_00 = 0.0;
   double CF_04 = 0.0;
   double CF_01 = 0.0;
   double CF_20 = 0.0;
   double CS_20 = 0.0;
   double CS_11 = 0.0;
   double max_lambda_0_11 = 0.0;
   double omega_2 = 0.0;
   double Recon_1 = 0.0;
   double Recon_2 = 0.0;
   double AVG_0_0_LEV_23 = 0.0;
   double CF_12 = 0.0;
   double AVG_0_0_LEV_30 = 0.0;
   double CF_03 = 0.0;
   double CS_05 = 0.0;
   AVG_0_u0 = (rc12)*(OPS_ACCS(u0_B0, 0,0) + OPS_ACCS(u0_B0, 1,0));

   AVG_0_u1 = (rc12)*(OPS_ACCS(u1_B0, 0,0) + OPS_ACCS(u1_B0, 1,0));

   AVG_0_a = (rc12)*(OPS_ACCS(a_B0, 0,0) + OPS_ACCS(a_B0, 1,0));

   AVG_0_rho = (rc12)*(OPS_ACCS(rho_B0, 0,0) + OPS_ACCS(rho_B0, 1,0));

   AVG_0_D01 = (rc12)*(OPS_ACCS(D01_B0, 0,0) + OPS_ACCS(D01_B0, 1,0));

   AVG_0_D00 = (rc12)*(OPS_ACCS(D00_B0, 1,0) + OPS_ACCS(D00_B0, 0,0));

   inv_AVG_a = 1.0/AVG_0_a;

   inv_AVG_rho = 1.0/AVG_0_rho;

   inv_AVG_met_fact = pow(pow(AVG_0_D00, 2) + pow(AVG_0_D01, 2), rc14);

    AVG_0_0_LEV_00 = -rc12*(gama*pow(AVG_0_u0, 2)*pow(inv_AVG_a, 2) + gama*pow(AVG_0_u1, 2)*pow(inv_AVG_a, 2) -
      pow(AVG_0_u0, 2)*pow(inv_AVG_a, 2) - pow(AVG_0_u1, 2)*pow(inv_AVG_a, 2) - 2);

   AVG_0_0_LEV_01 = gamma_m1*AVG_0_u0*pow(inv_AVG_a, 2);

   AVG_0_0_LEV_02 = gamma_m1*AVG_0_u1*pow(inv_AVG_a, 2);

   AVG_0_0_LEV_03 = -gamma_m1*pow(inv_AVG_a, 2);

   AVG_0_0_LEV_10 = inv_AVG_met_fact*inv_AVG_rho*(AVG_0_D00*AVG_0_u1 - AVG_0_D01*AVG_0_u0);

   AVG_0_0_LEV_11 = AVG_0_D01*inv_AVG_met_fact*inv_AVG_rho;

   AVG_0_0_LEV_12 = -AVG_0_D00*inv_AVG_met_fact*inv_AVG_rho;

    AVG_0_0_LEV_20 = -0.353553390593274*inv_AVG_a*inv_AVG_rho*(-gama*pow(AVG_0_u0, 2) - gama*pow(AVG_0_u1, 2) +
      2*AVG_0_D00*AVG_0_a*AVG_0_u0*inv_AVG_met_fact + 2*AVG_0_D01*AVG_0_a*AVG_0_u1*inv_AVG_met_fact + pow(AVG_0_u0, 2) +
      pow(AVG_0_u1, 2));

    AVG_0_0_LEV_21 = 0.707106781186547*inv_AVG_a*inv_AVG_rho*(-gama*AVG_0_u0 + AVG_0_D00*AVG_0_a*inv_AVG_met_fact +
      AVG_0_u0);

    AVG_0_0_LEV_22 = 0.707106781186547*inv_AVG_a*inv_AVG_rho*(-gama*AVG_0_u1 + AVG_0_D01*AVG_0_a*inv_AVG_met_fact +
      AVG_0_u1);

   AVG_0_0_LEV_23 = 0.707106781186547*gamma_m1*inv_AVG_a*inv_AVG_rho;

    AVG_0_0_LEV_30 = 0.353553390593274*inv_AVG_a*inv_AVG_rho*(gama*pow(AVG_0_u0, 2) + gama*pow(AVG_0_u1, 2) +
      2*AVG_0_D00*AVG_0_a*AVG_0_u0*inv_AVG_met_fact + 2*AVG_0_D01*AVG_0_a*AVG_0_u1*inv_AVG_met_fact - pow(AVG_0_u0, 2) -
      pow(AVG_0_u1, 2));

    AVG_0_0_LEV_31 = -0.707106781186547*inv_AVG_a*inv_AVG_rho*(gama*AVG_0_u0 + AVG_0_D00*AVG_0_a*inv_AVG_met_fact -
      AVG_0_u0);

    AVG_0_0_LEV_32 = -0.707106781186547*inv_AVG_a*inv_AVG_rho*(gama*AVG_0_u1 + AVG_0_D01*AVG_0_a*inv_AVG_met_fact -
      AVG_0_u1);

   AVG_0_0_LEV_33 = 0.707106781186547*gamma_m1*inv_AVG_a*inv_AVG_rho;

    CF_00 = (AVG_0_0_LEV_00*OPS_ACCS(U0_B0, -2,0)*OPS_ACCS(rho_B0, -2,0) +
      AVG_0_0_LEV_01*OPS_ACCS(D00_B0, -2,0)*OPS_ACCS(p_B0, -2,0) +
      AVG_0_0_LEV_01*OPS_ACCS(U0_B0, -2,0)*OPS_ACCS(rhou0_B0, -2,0) +
      AVG_0_0_LEV_02*OPS_ACCS(D01_B0, -2,0)*OPS_ACCS(p_B0, -2,0) +
      AVG_0_0_LEV_02*OPS_ACCS(U0_B0, -2,0)*OPS_ACCS(rhou1_B0, -2,0) +
      AVG_0_0_LEV_03*OPS_ACCS(U0_B0, -2,0)*OPS_ACCS(p_B0, -2,0) +
      AVG_0_0_LEV_03*OPS_ACCS(U0_B0, -2,0)*OPS_ACCS(rhoE_B0, -2,0))*OPS_ACCS(detJ_B0, -2,0);

    CF_10 = (AVG_0_0_LEV_10*OPS_ACCS(U0_B0, -2,0)*OPS_ACCS(rho_B0, -2,0) +
      AVG_0_0_LEV_11*OPS_ACCS(D00_B0, -2,0)*OPS_ACCS(p_B0, -2,0) +
      AVG_0_0_LEV_11*OPS_ACCS(U0_B0, -2,0)*OPS_ACCS(rhou0_B0, -2,0) +
      AVG_0_0_LEV_12*OPS_ACCS(D01_B0, -2,0)*OPS_ACCS(p_B0, -2,0) +
      AVG_0_0_LEV_12*OPS_ACCS(U0_B0, -2,0)*OPS_ACCS(rhou1_B0, -2,0))*OPS_ACCS(detJ_B0, -2,0);

    CF_20 = (AVG_0_0_LEV_20*OPS_ACCS(U0_B0, -2,0)*OPS_ACCS(rho_B0, -2,0) +
      AVG_0_0_LEV_21*OPS_ACCS(D00_B0, -2,0)*OPS_ACCS(p_B0, -2,0) +
      AVG_0_0_LEV_21*OPS_ACCS(U0_B0, -2,0)*OPS_ACCS(rhou0_B0, -2,0) +
      AVG_0_0_LEV_22*OPS_ACCS(D01_B0, -2,0)*OPS_ACCS(p_B0, -2,0) +
      AVG_0_0_LEV_22*OPS_ACCS(U0_B0, -2,0)*OPS_ACCS(rhou1_B0, -2,0) +
      AVG_0_0_LEV_23*OPS_ACCS(U0_B0, -2,0)*OPS_ACCS(p_B0, -2,0) +
      AVG_0_0_LEV_23*OPS_ACCS(U0_B0, -2,0)*OPS_ACCS(rhoE_B0, -2,0))*OPS_ACCS(detJ_B0, -2,0);

    CF_30 = (AVG_0_0_LEV_30*OPS_ACCS(U0_B0, -2,0)*OPS_ACCS(rho_B0, -2,0) +
      AVG_0_0_LEV_31*OPS_ACCS(D00_B0, -2,0)*OPS_ACCS(p_B0, -2,0) +
      AVG_0_0_LEV_31*OPS_ACCS(U0_B0, -2,0)*OPS_ACCS(rhou0_B0, -2,0) +
      AVG_0_0_LEV_32*OPS_ACCS(D01_B0, -2,0)*OPS_ACCS(p_B0, -2,0) +
      AVG_0_0_LEV_32*OPS_ACCS(U0_B0, -2,0)*OPS_ACCS(rhou1_B0, -2,0) +
      AVG_0_0_LEV_33*OPS_ACCS(U0_B0, -2,0)*OPS_ACCS(p_B0, -2,0) +
      AVG_0_0_LEV_33*OPS_ACCS(U0_B0, -2,0)*OPS_ACCS(rhoE_B0, -2,0))*OPS_ACCS(detJ_B0, -2,0);

    CF_01 = (AVG_0_0_LEV_00*OPS_ACCS(U0_B0, -1,0)*OPS_ACCS(rho_B0, -1,0) +
      AVG_0_0_LEV_01*OPS_ACCS(D00_B0, -1,0)*OPS_ACCS(p_B0, -1,0) +
      AVG_0_0_LEV_01*OPS_ACCS(U0_B0, -1,0)*OPS_ACCS(rhou0_B0, -1,0) +
      AVG_0_0_LEV_02*OPS_ACCS(D01_B0, -1,0)*OPS_ACCS(p_B0, -1,0) +
      AVG_0_0_LEV_02*OPS_ACCS(U0_B0, -1,0)*OPS_ACCS(rhou1_B0, -1,0) +
      AVG_0_0_LEV_03*OPS_ACCS(U0_B0, -1,0)*OPS_ACCS(p_B0, -1,0) +
      AVG_0_0_LEV_03*OPS_ACCS(U0_B0, -1,0)*OPS_ACCS(rhoE_B0, -1,0))*OPS_ACCS(detJ_B0, -1,0);

    CF_11 = (AVG_0_0_LEV_10*OPS_ACCS(U0_B0, -1,0)*OPS_ACCS(rho_B0, -1,0) +
      AVG_0_0_LEV_11*OPS_ACCS(D00_B0, -1,0)*OPS_ACCS(p_B0, -1,0) +
      AVG_0_0_LEV_11*OPS_ACCS(U0_B0, -1,0)*OPS_ACCS(rhou0_B0, -1,0) +
      AVG_0_0_LEV_12*OPS_ACCS(D01_B0, -1,0)*OPS_ACCS(p_B0, -1,0) +
      AVG_0_0_LEV_12*OPS_ACCS(U0_B0, -1,0)*OPS_ACCS(rhou1_B0, -1,0))*OPS_ACCS(detJ_B0, -1,0);

    CF_21 = (AVG_0_0_LEV_20*OPS_ACCS(U0_B0, -1,0)*OPS_ACCS(rho_B0, -1,0) +
      AVG_0_0_LEV_21*OPS_ACCS(D00_B0, -1,0)*OPS_ACCS(p_B0, -1,0) +
      AVG_0_0_LEV_21*OPS_ACCS(U0_B0, -1,0)*OPS_ACCS(rhou0_B0, -1,0) +
      AVG_0_0_LEV_22*OPS_ACCS(D01_B0, -1,0)*OPS_ACCS(p_B0, -1,0) +
      AVG_0_0_LEV_22*OPS_ACCS(U0_B0, -1,0)*OPS_ACCS(rhou1_B0, -1,0) +
      AVG_0_0_LEV_23*OPS_ACCS(U0_B0, -1,0)*OPS_ACCS(p_B0, -1,0) +
      AVG_0_0_LEV_23*OPS_ACCS(U0_B0, -1,0)*OPS_ACCS(rhoE_B0, -1,0))*OPS_ACCS(detJ_B0, -1,0);

    CF_31 = (AVG_0_0_LEV_30*OPS_ACCS(U0_B0, -1,0)*OPS_ACCS(rho_B0, -1,0) +
      AVG_0_0_LEV_31*OPS_ACCS(D00_B0, -1,0)*OPS_ACCS(p_B0, -1,0) +
      AVG_0_0_LEV_31*OPS_ACCS(U0_B0, -1,0)*OPS_ACCS(rhou0_B0, -1,0) +
      AVG_0_0_LEV_32*OPS_ACCS(D01_B0, -1,0)*OPS_ACCS(p_B0, -1,0) +
      AVG_0_0_LEV_32*OPS_ACCS(U0_B0, -1,0)*OPS_ACCS(rhou1_B0, -1,0) +
      AVG_0_0_LEV_33*OPS_ACCS(U0_B0, -1,0)*OPS_ACCS(p_B0, -1,0) +
      AVG_0_0_LEV_33*OPS_ACCS(U0_B0, -1,0)*OPS_ACCS(rhoE_B0, -1,0))*OPS_ACCS(detJ_B0, -1,0);

    CF_02 = (AVG_0_0_LEV_00*OPS_ACCS(U0_B0, 0,0)*OPS_ACCS(rho_B0, 0,0) +
      AVG_0_0_LEV_01*OPS_ACCS(D00_B0, 0,0)*OPS_ACCS(p_B0, 0,0) +
      AVG_0_0_LEV_01*OPS_ACCS(U0_B0, 0,0)*OPS_ACCS(rhou0_B0, 0,0) +
      AVG_0_0_LEV_02*OPS_ACCS(D01_B0, 0,0)*OPS_ACCS(p_B0, 0,0) +
      AVG_0_0_LEV_02*OPS_ACCS(U0_B0, 0,0)*OPS_ACCS(rhou1_B0, 0,0) +
      AVG_0_0_LEV_03*OPS_ACCS(U0_B0, 0,0)*OPS_ACCS(p_B0, 0,0) +
      AVG_0_0_LEV_03*OPS_ACCS(U0_B0, 0,0)*OPS_ACCS(rhoE_B0, 0,0))*OPS_ACCS(detJ_B0, 0,0);

    CF_12 = (AVG_0_0_LEV_10*OPS_ACCS(U0_B0, 0,0)*OPS_ACCS(rho_B0, 0,0) +
      AVG_0_0_LEV_11*OPS_ACCS(D00_B0, 0,0)*OPS_ACCS(p_B0, 0,0) +
      AVG_0_0_LEV_11*OPS_ACCS(U0_B0, 0,0)*OPS_ACCS(rhou0_B0, 0,0) +
      AVG_0_0_LEV_12*OPS_ACCS(D01_B0, 0,0)*OPS_ACCS(p_B0, 0,0) +
      AVG_0_0_LEV_12*OPS_ACCS(U0_B0, 0,0)*OPS_ACCS(rhou1_B0, 0,0))*OPS_ACCS(detJ_B0, 0,0);

    CF_22 = (AVG_0_0_LEV_20*OPS_ACCS(U0_B0, 0,0)*OPS_ACCS(rho_B0, 0,0) +
      AVG_0_0_LEV_21*OPS_ACCS(D00_B0, 0,0)*OPS_ACCS(p_B0, 0,0) +
      AVG_0_0_LEV_21*OPS_ACCS(U0_B0, 0,0)*OPS_ACCS(rhou0_B0, 0,0) +
      AVG_0_0_LEV_22*OPS_ACCS(D01_B0, 0,0)*OPS_ACCS(p_B0, 0,0) +
      AVG_0_0_LEV_22*OPS_ACCS(U0_B0, 0,0)*OPS_ACCS(rhou1_B0, 0,0) +
      AVG_0_0_LEV_23*OPS_ACCS(U0_B0, 0,0)*OPS_ACCS(p_B0, 0,0) +
      AVG_0_0_LEV_23*OPS_ACCS(U0_B0, 0,0)*OPS_ACCS(rhoE_B0, 0,0))*OPS_ACCS(detJ_B0, 0,0);

    CF_32 = (AVG_0_0_LEV_30*OPS_ACCS(U0_B0, 0,0)*OPS_ACCS(rho_B0, 0,0) +
      AVG_0_0_LEV_31*OPS_ACCS(D00_B0, 0,0)*OPS_ACCS(p_B0, 0,0) +
      AVG_0_0_LEV_31*OPS_ACCS(U0_B0, 0,0)*OPS_ACCS(rhou0_B0, 0,0) +
      AVG_0_0_LEV_32*OPS_ACCS(D01_B0, 0,0)*OPS_ACCS(p_B0, 0,0) +
      AVG_0_0_LEV_32*OPS_ACCS(U0_B0, 0,0)*OPS_ACCS(rhou1_B0, 0,0) +
      AVG_0_0_LEV_33*OPS_ACCS(U0_B0, 0,0)*OPS_ACCS(p_B0, 0,0) +
      AVG_0_0_LEV_33*OPS_ACCS(U0_B0, 0,0)*OPS_ACCS(rhoE_B0, 0,0))*OPS_ACCS(detJ_B0, 0,0);

    CF_03 = (AVG_0_0_LEV_00*OPS_ACCS(U0_B0, 1,0)*OPS_ACCS(rho_B0, 1,0) +
      AVG_0_0_LEV_01*OPS_ACCS(D00_B0, 1,0)*OPS_ACCS(p_B0, 1,0) +
      AVG_0_0_LEV_01*OPS_ACCS(U0_B0, 1,0)*OPS_ACCS(rhou0_B0, 1,0) +
      AVG_0_0_LEV_02*OPS_ACCS(D01_B0, 1,0)*OPS_ACCS(p_B0, 1,0) +
      AVG_0_0_LEV_02*OPS_ACCS(U0_B0, 1,0)*OPS_ACCS(rhou1_B0, 1,0) +
      AVG_0_0_LEV_03*OPS_ACCS(U0_B0, 1,0)*OPS_ACCS(p_B0, 1,0) +
      AVG_0_0_LEV_03*OPS_ACCS(U0_B0, 1,0)*OPS_ACCS(rhoE_B0, 1,0))*OPS_ACCS(detJ_B0, 1,0);

    CF_13 = (AVG_0_0_LEV_10*OPS_ACCS(U0_B0, 1,0)*OPS_ACCS(rho_B0, 1,0) +
      AVG_0_0_LEV_11*OPS_ACCS(D00_B0, 1,0)*OPS_ACCS(p_B0, 1,0) +
      AVG_0_0_LEV_11*OPS_ACCS(U0_B0, 1,0)*OPS_ACCS(rhou0_B0, 1,0) +
      AVG_0_0_LEV_12*OPS_ACCS(D01_B0, 1,0)*OPS_ACCS(p_B0, 1,0) +
      AVG_0_0_LEV_12*OPS_ACCS(U0_B0, 1,0)*OPS_ACCS(rhou1_B0, 1,0))*OPS_ACCS(detJ_B0, 1,0);

    CF_23 = (AVG_0_0_LEV_20*OPS_ACCS(U0_B0, 1,0)*OPS_ACCS(rho_B0, 1,0) +
      AVG_0_0_LEV_21*OPS_ACCS(D00_B0, 1,0)*OPS_ACCS(p_B0, 1,0) +
      AVG_0_0_LEV_21*OPS_ACCS(U0_B0, 1,0)*OPS_ACCS(rhou0_B0, 1,0) +
      AVG_0_0_LEV_22*OPS_ACCS(D01_B0, 1,0)*OPS_ACCS(p_B0, 1,0) +
      AVG_0_0_LEV_22*OPS_ACCS(U0_B0, 1,0)*OPS_ACCS(rhou1_B0, 1,0) +
      AVG_0_0_LEV_23*OPS_ACCS(U0_B0, 1,0)*OPS_ACCS(p_B0, 1,0) +
      AVG_0_0_LEV_23*OPS_ACCS(U0_B0, 1,0)*OPS_ACCS(rhoE_B0, 1,0))*OPS_ACCS(detJ_B0, 1,0);

    CF_33 = (AVG_0_0_LEV_30*OPS_ACCS(U0_B0, 1,0)*OPS_ACCS(rho_B0, 1,0) +
      AVG_0_0_LEV_31*OPS_ACCS(D00_B0, 1,0)*OPS_ACCS(p_B0, 1,0) +
      AVG_0_0_LEV_31*OPS_ACCS(U0_B0, 1,0)*OPS_ACCS(rhou0_B0, 1,0) +
      AVG_0_0_LEV_32*OPS_ACCS(D01_B0, 1,0)*OPS_ACCS(p_B0, 1,0) +
      AVG_0_0_LEV_32*OPS_ACCS(U0_B0, 1,0)*OPS_ACCS(rhou1_B0, 1,0) +
      AVG_0_0_LEV_33*OPS_ACCS(U0_B0, 1,0)*OPS_ACCS(p_B0, 1,0) +
      AVG_0_0_LEV_33*OPS_ACCS(U0_B0, 1,0)*OPS_ACCS(rhoE_B0, 1,0))*OPS_ACCS(detJ_B0, 1,0);

    CF_04 = (AVG_0_0_LEV_00*OPS_ACCS(U0_B0, 2,0)*OPS_ACCS(rho_B0, 2,0) +
      AVG_0_0_LEV_01*OPS_ACCS(D00_B0, 2,0)*OPS_ACCS(p_B0, 2,0) +
      AVG_0_0_LEV_01*OPS_ACCS(U0_B0, 2,0)*OPS_ACCS(rhou0_B0, 2,0) +
      AVG_0_0_LEV_02*OPS_ACCS(D01_B0, 2,0)*OPS_ACCS(p_B0, 2,0) +
      AVG_0_0_LEV_02*OPS_ACCS(U0_B0, 2,0)*OPS_ACCS(rhou1_B0, 2,0) +
      AVG_0_0_LEV_03*OPS_ACCS(U0_B0, 2,0)*OPS_ACCS(p_B0, 2,0) +
      AVG_0_0_LEV_03*OPS_ACCS(U0_B0, 2,0)*OPS_ACCS(rhoE_B0, 2,0))*OPS_ACCS(detJ_B0, 2,0);

    CF_14 = (AVG_0_0_LEV_10*OPS_ACCS(U0_B0, 2,0)*OPS_ACCS(rho_B0, 2,0) +
      AVG_0_0_LEV_11*OPS_ACCS(D00_B0, 2,0)*OPS_ACCS(p_B0, 2,0) +
      AVG_0_0_LEV_11*OPS_ACCS(U0_B0, 2,0)*OPS_ACCS(rhou0_B0, 2,0) +
      AVG_0_0_LEV_12*OPS_ACCS(D01_B0, 2,0)*OPS_ACCS(p_B0, 2,0) +
      AVG_0_0_LEV_12*OPS_ACCS(U0_B0, 2,0)*OPS_ACCS(rhou1_B0, 2,0))*OPS_ACCS(detJ_B0, 2,0);

    CF_24 = (AVG_0_0_LEV_20*OPS_ACCS(U0_B0, 2,0)*OPS_ACCS(rho_B0, 2,0) +
      AVG_0_0_LEV_21*OPS_ACCS(D00_B0, 2,0)*OPS_ACCS(p_B0, 2,0) +
      AVG_0_0_LEV_21*OPS_ACCS(U0_B0, 2,0)*OPS_ACCS(rhou0_B0, 2,0) +
      AVG_0_0_LEV_22*OPS_ACCS(D01_B0, 2,0)*OPS_ACCS(p_B0, 2,0) +
      AVG_0_0_LEV_22*OPS_ACCS(U0_B0, 2,0)*OPS_ACCS(rhou1_B0, 2,0) +
      AVG_0_0_LEV_23*OPS_ACCS(U0_B0, 2,0)*OPS_ACCS(p_B0, 2,0) +
      AVG_0_0_LEV_23*OPS_ACCS(U0_B0, 2,0)*OPS_ACCS(rhoE_B0, 2,0))*OPS_ACCS(detJ_B0, 2,0);

    CF_34 = (AVG_0_0_LEV_30*OPS_ACCS(U0_B0, 2,0)*OPS_ACCS(rho_B0, 2,0) +
      AVG_0_0_LEV_31*OPS_ACCS(D00_B0, 2,0)*OPS_ACCS(p_B0, 2,0) +
      AVG_0_0_LEV_31*OPS_ACCS(U0_B0, 2,0)*OPS_ACCS(rhou0_B0, 2,0) +
      AVG_0_0_LEV_32*OPS_ACCS(D01_B0, 2,0)*OPS_ACCS(p_B0, 2,0) +
      AVG_0_0_LEV_32*OPS_ACCS(U0_B0, 2,0)*OPS_ACCS(rhou1_B0, 2,0) +
      AVG_0_0_LEV_33*OPS_ACCS(U0_B0, 2,0)*OPS_ACCS(p_B0, 2,0) +
      AVG_0_0_LEV_33*OPS_ACCS(U0_B0, 2,0)*OPS_ACCS(rhoE_B0, 2,0))*OPS_ACCS(detJ_B0, 2,0);

    CF_05 = (AVG_0_0_LEV_00*OPS_ACCS(U0_B0, 3,0)*OPS_ACCS(rho_B0, 3,0) +
      AVG_0_0_LEV_01*OPS_ACCS(D00_B0, 3,0)*OPS_ACCS(p_B0, 3,0) +
      AVG_0_0_LEV_01*OPS_ACCS(U0_B0, 3,0)*OPS_ACCS(rhou0_B0, 3,0) +
      AVG_0_0_LEV_02*OPS_ACCS(D01_B0, 3,0)*OPS_ACCS(p_B0, 3,0) +
      AVG_0_0_LEV_02*OPS_ACCS(U0_B0, 3,0)*OPS_ACCS(rhou1_B0, 3,0) +
      AVG_0_0_LEV_03*OPS_ACCS(U0_B0, 3,0)*OPS_ACCS(p_B0, 3,0) +
      AVG_0_0_LEV_03*OPS_ACCS(U0_B0, 3,0)*OPS_ACCS(rhoE_B0, 3,0))*OPS_ACCS(detJ_B0, 3,0);

    CF_15 = (AVG_0_0_LEV_10*OPS_ACCS(U0_B0, 3,0)*OPS_ACCS(rho_B0, 3,0) +
      AVG_0_0_LEV_11*OPS_ACCS(D00_B0, 3,0)*OPS_ACCS(p_B0, 3,0) +
      AVG_0_0_LEV_11*OPS_ACCS(U0_B0, 3,0)*OPS_ACCS(rhou0_B0, 3,0) +
      AVG_0_0_LEV_12*OPS_ACCS(D01_B0, 3,0)*OPS_ACCS(p_B0, 3,0) +
      AVG_0_0_LEV_12*OPS_ACCS(U0_B0, 3,0)*OPS_ACCS(rhou1_B0, 3,0))*OPS_ACCS(detJ_B0, 3,0);

    CF_25 = (AVG_0_0_LEV_20*OPS_ACCS(U0_B0, 3,0)*OPS_ACCS(rho_B0, 3,0) +
      AVG_0_0_LEV_21*OPS_ACCS(D00_B0, 3,0)*OPS_ACCS(p_B0, 3,0) +
      AVG_0_0_LEV_21*OPS_ACCS(U0_B0, 3,0)*OPS_ACCS(rhou0_B0, 3,0) +
      AVG_0_0_LEV_22*OPS_ACCS(D01_B0, 3,0)*OPS_ACCS(p_B0, 3,0) +
      AVG_0_0_LEV_22*OPS_ACCS(U0_B0, 3,0)*OPS_ACCS(rhou1_B0, 3,0) +
      AVG_0_0_LEV_23*OPS_ACCS(U0_B0, 3,0)*OPS_ACCS(p_B0, 3,0) +
      AVG_0_0_LEV_23*OPS_ACCS(U0_B0, 3,0)*OPS_ACCS(rhoE_B0, 3,0))*OPS_ACCS(detJ_B0, 3,0);

    CF_35 = (AVG_0_0_LEV_30*OPS_ACCS(U0_B0, 3,0)*OPS_ACCS(rho_B0, 3,0) +
      AVG_0_0_LEV_31*OPS_ACCS(D00_B0, 3,0)*OPS_ACCS(p_B0, 3,0) +
      AVG_0_0_LEV_31*OPS_ACCS(U0_B0, 3,0)*OPS_ACCS(rhou0_B0, 3,0) +
      AVG_0_0_LEV_32*OPS_ACCS(D01_B0, 3,0)*OPS_ACCS(p_B0, 3,0) +
      AVG_0_0_LEV_32*OPS_ACCS(U0_B0, 3,0)*OPS_ACCS(rhou1_B0, 3,0) +
      AVG_0_0_LEV_33*OPS_ACCS(U0_B0, 3,0)*OPS_ACCS(p_B0, 3,0) +
      AVG_0_0_LEV_33*OPS_ACCS(U0_B0, 3,0)*OPS_ACCS(rhoE_B0, 3,0))*OPS_ACCS(detJ_B0, 3,0);

    CS_00 = AVG_0_0_LEV_00*OPS_ACCS(rho_B0, -2,0) + AVG_0_0_LEV_01*OPS_ACCS(rhou0_B0, -2,0) +
      AVG_0_0_LEV_02*OPS_ACCS(rhou1_B0, -2,0) + AVG_0_0_LEV_03*OPS_ACCS(rhoE_B0, -2,0);

    CS_01 = AVG_0_0_LEV_00*OPS_ACCS(rho_B0, -1,0) + AVG_0_0_LEV_01*OPS_ACCS(rhou0_B0, -1,0) +
      AVG_0_0_LEV_02*OPS_ACCS(rhou1_B0, -1,0) + AVG_0_0_LEV_03*OPS_ACCS(rhoE_B0, -1,0);

    CS_02 = AVG_0_0_LEV_00*OPS_ACCS(rho_B0, 0,0) + AVG_0_0_LEV_01*OPS_ACCS(rhou0_B0, 0,0) +
      AVG_0_0_LEV_02*OPS_ACCS(rhou1_B0, 0,0) + AVG_0_0_LEV_03*OPS_ACCS(rhoE_B0, 0,0);

    CS_03 = AVG_0_0_LEV_00*OPS_ACCS(rho_B0, 1,0) + AVG_0_0_LEV_01*OPS_ACCS(rhou0_B0, 1,0) +
      AVG_0_0_LEV_02*OPS_ACCS(rhou1_B0, 1,0) + AVG_0_0_LEV_03*OPS_ACCS(rhoE_B0, 1,0);

    CS_04 = AVG_0_0_LEV_00*OPS_ACCS(rho_B0, 2,0) + AVG_0_0_LEV_01*OPS_ACCS(rhou0_B0, 2,0) +
      AVG_0_0_LEV_02*OPS_ACCS(rhou1_B0, 2,0) + AVG_0_0_LEV_03*OPS_ACCS(rhoE_B0, 2,0);

    CS_05 = AVG_0_0_LEV_00*OPS_ACCS(rho_B0, 3,0) + AVG_0_0_LEV_01*OPS_ACCS(rhou0_B0, 3,0) +
      AVG_0_0_LEV_02*OPS_ACCS(rhou1_B0, 3,0) + AVG_0_0_LEV_03*OPS_ACCS(rhoE_B0, 3,0);

    CS_10 = AVG_0_0_LEV_10*OPS_ACCS(rho_B0, -2,0) + AVG_0_0_LEV_11*OPS_ACCS(rhou0_B0, -2,0) +
      AVG_0_0_LEV_12*OPS_ACCS(rhou1_B0, -2,0);

    CS_11 = AVG_0_0_LEV_10*OPS_ACCS(rho_B0, -1,0) + AVG_0_0_LEV_11*OPS_ACCS(rhou0_B0, -1,0) +
      AVG_0_0_LEV_12*OPS_ACCS(rhou1_B0, -1,0);

    CS_12 = AVG_0_0_LEV_10*OPS_ACCS(rho_B0, 0,0) + AVG_0_0_LEV_11*OPS_ACCS(rhou0_B0, 0,0) +
      AVG_0_0_LEV_12*OPS_ACCS(rhou1_B0, 0,0);

    CS_13 = AVG_0_0_LEV_10*OPS_ACCS(rho_B0, 1,0) + AVG_0_0_LEV_11*OPS_ACCS(rhou0_B0, 1,0) +
      AVG_0_0_LEV_12*OPS_ACCS(rhou1_B0, 1,0);

    CS_14 = AVG_0_0_LEV_10*OPS_ACCS(rho_B0, 2,0) + AVG_0_0_LEV_11*OPS_ACCS(rhou0_B0, 2,0) +
      AVG_0_0_LEV_12*OPS_ACCS(rhou1_B0, 2,0);

    CS_15 = AVG_0_0_LEV_10*OPS_ACCS(rho_B0, 3,0) + AVG_0_0_LEV_11*OPS_ACCS(rhou0_B0, 3,0) +
      AVG_0_0_LEV_12*OPS_ACCS(rhou1_B0, 3,0);

    CS_20 = AVG_0_0_LEV_20*OPS_ACCS(rho_B0, -2,0) + AVG_0_0_LEV_21*OPS_ACCS(rhou0_B0, -2,0) +
      AVG_0_0_LEV_22*OPS_ACCS(rhou1_B0, -2,0) + AVG_0_0_LEV_23*OPS_ACCS(rhoE_B0, -2,0);

    CS_21 = AVG_0_0_LEV_20*OPS_ACCS(rho_B0, -1,0) + AVG_0_0_LEV_21*OPS_ACCS(rhou0_B0, -1,0) +
      AVG_0_0_LEV_22*OPS_ACCS(rhou1_B0, -1,0) + AVG_0_0_LEV_23*OPS_ACCS(rhoE_B0, -1,0);

    CS_22 = AVG_0_0_LEV_20*OPS_ACCS(rho_B0, 0,0) + AVG_0_0_LEV_21*OPS_ACCS(rhou0_B0, 0,0) +
      AVG_0_0_LEV_22*OPS_ACCS(rhou1_B0, 0,0) + AVG_0_0_LEV_23*OPS_ACCS(rhoE_B0, 0,0);

    CS_23 = AVG_0_0_LEV_20*OPS_ACCS(rho_B0, 1,0) + AVG_0_0_LEV_21*OPS_ACCS(rhou0_B0, 1,0) +
      AVG_0_0_LEV_22*OPS_ACCS(rhou1_B0, 1,0) + AVG_0_0_LEV_23*OPS_ACCS(rhoE_B0, 1,0);

    CS_24 = AVG_0_0_LEV_20*OPS_ACCS(rho_B0, 2,0) + AVG_0_0_LEV_21*OPS_ACCS(rhou0_B0, 2,0) +
      AVG_0_0_LEV_22*OPS_ACCS(rhou1_B0, 2,0) + AVG_0_0_LEV_23*OPS_ACCS(rhoE_B0, 2,0);

    CS_25 = AVG_0_0_LEV_20*OPS_ACCS(rho_B0, 3,0) + AVG_0_0_LEV_21*OPS_ACCS(rhou0_B0, 3,0) +
      AVG_0_0_LEV_22*OPS_ACCS(rhou1_B0, 3,0) + AVG_0_0_LEV_23*OPS_ACCS(rhoE_B0, 3,0);

    CS_30 = AVG_0_0_LEV_30*OPS_ACCS(rho_B0, -2,0) + AVG_0_0_LEV_31*OPS_ACCS(rhou0_B0, -2,0) +
      AVG_0_0_LEV_32*OPS_ACCS(rhou1_B0, -2,0) + AVG_0_0_LEV_33*OPS_ACCS(rhoE_B0, -2,0);

    CS_31 = AVG_0_0_LEV_30*OPS_ACCS(rho_B0, -1,0) + AVG_0_0_LEV_31*OPS_ACCS(rhou0_B0, -1,0) +
      AVG_0_0_LEV_32*OPS_ACCS(rhou1_B0, -1,0) + AVG_0_0_LEV_33*OPS_ACCS(rhoE_B0, -1,0);

    CS_32 = AVG_0_0_LEV_30*OPS_ACCS(rho_B0, 0,0) + AVG_0_0_LEV_31*OPS_ACCS(rhou0_B0, 0,0) +
      AVG_0_0_LEV_32*OPS_ACCS(rhou1_B0, 0,0) + AVG_0_0_LEV_33*OPS_ACCS(rhoE_B0, 0,0);

    CS_33 = AVG_0_0_LEV_30*OPS_ACCS(rho_B0, 1,0) + AVG_0_0_LEV_31*OPS_ACCS(rhou0_B0, 1,0) +
      AVG_0_0_LEV_32*OPS_ACCS(rhou1_B0, 1,0) + AVG_0_0_LEV_33*OPS_ACCS(rhoE_B0, 1,0);

    CS_34 = AVG_0_0_LEV_30*OPS_ACCS(rho_B0, 2,0) + AVG_0_0_LEV_31*OPS_ACCS(rhou0_B0, 2,0) +
      AVG_0_0_LEV_32*OPS_ACCS(rhou1_B0, 2,0) + AVG_0_0_LEV_33*OPS_ACCS(rhoE_B0, 2,0);

    CS_35 = AVG_0_0_LEV_30*OPS_ACCS(rho_B0, 3,0) + AVG_0_0_LEV_31*OPS_ACCS(rhou0_B0, 3,0) +
      AVG_0_0_LEV_32*OPS_ACCS(rhou1_B0, 3,0) + AVG_0_0_LEV_33*OPS_ACCS(rhoE_B0, 3,0);

    max_lambda_0_00 = fmax(fabs(OPS_ACCS(D00_B0, -2,0)*OPS_ACCS(u0_B0, -2,0) +
      OPS_ACCS(D01_B0, -2,0)*OPS_ACCS(u1_B0, -2,0)), fmax(fabs(OPS_ACCS(D00_B0, 3,0)*OPS_ACCS(u0_B0, 3,0) +
      OPS_ACCS(D01_B0, 3,0)*OPS_ACCS(u1_B0, 3,0)), fmax(fabs(OPS_ACCS(D00_B0, -1,0)*OPS_ACCS(u0_B0, -1,0) +
      OPS_ACCS(D01_B0, -1,0)*OPS_ACCS(u1_B0, -1,0)), fmax(fabs(OPS_ACCS(D00_B0, 2,0)*OPS_ACCS(u0_B0, 2,0) +
      OPS_ACCS(D01_B0, 2,0)*OPS_ACCS(u1_B0, 2,0)), fmax(fabs(OPS_ACCS(D00_B0, 1,0)*OPS_ACCS(u0_B0, 1,0) +
      OPS_ACCS(D01_B0, 1,0)*OPS_ACCS(u1_B0, 1,0)), fabs(OPS_ACCS(D00_B0, 0,0)*OPS_ACCS(u0_B0, 0,0) +
      OPS_ACCS(D01_B0, 0,0)*OPS_ACCS(u1_B0, 0,0)))))));

   max_lambda_0_11 = max_lambda_0_00;

    max_lambda_0_22 = fmax(fabs(sqrt(pow(OPS_ACCS(D00_B0, -2,0), 2) + pow(OPS_ACCS(D01_B0, -2,0),
      2))*OPS_ACCS(a_B0, -2,0) + OPS_ACCS(D00_B0, -2,0)*OPS_ACCS(u0_B0, -2,0) +
      OPS_ACCS(D01_B0, -2,0)*OPS_ACCS(u1_B0, -2,0)), fmax(fabs(sqrt(pow(OPS_ACCS(D00_B0, -1,0), 2) +
      pow(OPS_ACCS(D01_B0, -1,0), 2))*OPS_ACCS(a_B0, -1,0) + OPS_ACCS(D00_B0, -1,0)*OPS_ACCS(u0_B0, -1,0) +
      OPS_ACCS(D01_B0, -1,0)*OPS_ACCS(u1_B0, -1,0)), fmax(fabs(sqrt(pow(OPS_ACCS(D00_B0, 0,0), 2) +
      pow(OPS_ACCS(D01_B0, 0,0), 2))*OPS_ACCS(a_B0, 0,0) + OPS_ACCS(D00_B0, 0,0)*OPS_ACCS(u0_B0, 0,0) +
      OPS_ACCS(D01_B0, 0,0)*OPS_ACCS(u1_B0, 0,0)), fmax(fabs(sqrt(pow(OPS_ACCS(D00_B0, 3,0), 2) +
      pow(OPS_ACCS(D01_B0, 3,0), 2))*OPS_ACCS(a_B0, 3,0) + OPS_ACCS(D00_B0, 3,0)*OPS_ACCS(u0_B0, 3,0) +
      OPS_ACCS(D01_B0, 3,0)*OPS_ACCS(u1_B0, 3,0)), fmax(fabs(sqrt(pow(OPS_ACCS(D00_B0, 1,0), 2) +
      pow(OPS_ACCS(D01_B0, 1,0), 2))*OPS_ACCS(a_B0, 1,0) + OPS_ACCS(D00_B0, 1,0)*OPS_ACCS(u0_B0, 1,0) +
      OPS_ACCS(D01_B0, 1,0)*OPS_ACCS(u1_B0, 1,0)), fabs(sqrt(pow(OPS_ACCS(D00_B0, 2,0), 2) + pow(OPS_ACCS(D01_B0, 2,0),
      2))*OPS_ACCS(a_B0, 2,0) + OPS_ACCS(D00_B0, 2,0)*OPS_ACCS(u0_B0, 2,0) +
      OPS_ACCS(D01_B0, 2,0)*OPS_ACCS(u1_B0, 2,0)))))));

    max_lambda_0_33 = fmax(fabs(-sqrt(pow(OPS_ACCS(D00_B0, 3,0), 2) + pow(OPS_ACCS(D01_B0, 3,0), 2))*OPS_ACCS(a_B0, 3,0)
      + OPS_ACCS(D00_B0, 3,0)*OPS_ACCS(u0_B0, 3,0) + OPS_ACCS(D01_B0, 3,0)*OPS_ACCS(u1_B0, 3,0)),
      fmax(fabs(-sqrt(pow(OPS_ACCS(D00_B0, 1,0), 2) + pow(OPS_ACCS(D01_B0, 1,0), 2))*OPS_ACCS(a_B0, 1,0) +
      OPS_ACCS(D00_B0, 1,0)*OPS_ACCS(u0_B0, 1,0) + OPS_ACCS(D01_B0, 1,0)*OPS_ACCS(u1_B0, 1,0)),
      fmax(fabs(-sqrt(pow(OPS_ACCS(D00_B0, -2,0), 2) + pow(OPS_ACCS(D01_B0, -2,0), 2))*OPS_ACCS(a_B0, -2,0) +
      OPS_ACCS(D00_B0, -2,0)*OPS_ACCS(u0_B0, -2,0) + OPS_ACCS(D01_B0, -2,0)*OPS_ACCS(u1_B0, -2,0)),
      fmax(fabs(-sqrt(pow(OPS_ACCS(D00_B0, -1,0), 2) + pow(OPS_ACCS(D01_B0, -1,0), 2))*OPS_ACCS(a_B0, -1,0) +
      OPS_ACCS(D00_B0, -1,0)*OPS_ACCS(u0_B0, -1,0) + OPS_ACCS(D01_B0, -1,0)*OPS_ACCS(u1_B0, -1,0)),
      fmax(fabs(-sqrt(pow(OPS_ACCS(D00_B0, 2,0), 2) + pow(OPS_ACCS(D01_B0, 2,0), 2))*OPS_ACCS(a_B0, 2,0) +
      OPS_ACCS(D00_B0, 2,0)*OPS_ACCS(u0_B0, 2,0) + OPS_ACCS(D01_B0, 2,0)*OPS_ACCS(u1_B0, 2,0)),
      fabs(-sqrt(pow(OPS_ACCS(D00_B0, 0,0), 2) + pow(OPS_ACCS(D01_B0, 0,0), 2))*OPS_ACCS(a_B0, 0,0) +
      OPS_ACCS(D00_B0, 0,0)*OPS_ACCS(u0_B0, 0,0) + OPS_ACCS(D01_B0, 0,0)*OPS_ACCS(u1_B0, 0,0)))))));

    beta_0 = (rc12)*(CF_02 + CS_02*max_lambda_0_00)*((rc15)*(CF_02 + CS_02*max_lambda_0_00) - rc16*(CF_03 +
      CS_03*max_lambda_0_00) + (rc17)*(CF_04 + CS_04*max_lambda_0_00)) + (rc12)*(CF_03 +
      CS_03*max_lambda_0_00)*((rc18)*(CF_03 + CS_03*max_lambda_0_00) - rc19*(CF_04 + CS_04*max_lambda_0_00)) +
      (rc20)*pow(CF_04 + CS_04*max_lambda_0_00, 2);

    beta_1 = (rc12)*(CF_01 + CS_01*max_lambda_0_00)*((rc21)*(CF_01 + CS_01*max_lambda_0_00) - rc22*(CF_02 +
      CS_02*max_lambda_0_00) + (rc23)*(CF_03 + CS_03*max_lambda_0_00)) + (rc12)*(CF_02 +
      CS_02*max_lambda_0_00)*((rc22)*(CF_02 + CS_02*max_lambda_0_00) - rc22*(CF_03 + CS_03*max_lambda_0_00)) +
      (rc20)*pow(CF_03 + CS_03*max_lambda_0_00, 2);

    beta_2 = (rc12)*(CF_00 + CS_00*max_lambda_0_00)*((rc21)*(CF_00 + CS_00*max_lambda_0_00) + (rc17)*(CF_02 +
      CS_02*max_lambda_0_00)) + (rc12)*(CF_01 + CS_01*max_lambda_0_00)*(-rc19*(CF_00 + CS_00*max_lambda_0_00) +
      (rc18)*(CF_01 + CS_01*max_lambda_0_00) - rc16*(CF_02 + CS_02*max_lambda_0_00)) + (rc23)*pow(CF_02 +
      CS_02*max_lambda_0_00, 2);

   alpha_0 = 0.3 + (rc24)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_0 + 1.0e-14, 2);

   alpha_1 = 0.6 + (rc25)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_1 + 1.0e-14, 2);

   alpha_2 = 0.1 + (rc26)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_2 + 1.0e-14, 2);

   inv_alpha_sum = 1.0/(alpha_0 + alpha_1 + alpha_2);

   omega_0 = alpha_0*inv_alpha_sum;

   omega_1 = alpha_1*inv_alpha_sum;

   omega_2 = alpha_2*inv_alpha_sum;

    Recon_0 = Recon_0 + omega_0*((rc27)*(CF_02 + CS_02*max_lambda_0_00) + (rc28)*(CF_03 + CS_03*max_lambda_0_00) -
      rc10*(CF_04 + CS_04*max_lambda_0_00)) + omega_1*(-rc10*(CF_01 + CS_01*max_lambda_0_00) + (rc28)*(CF_02 +
      CS_02*max_lambda_0_00) + (rc27)*(CF_03 + CS_03*max_lambda_0_00)) + omega_2*((rc27)*(CF_00 + CS_00*max_lambda_0_00)
      - rc29*(CF_01 + CS_01*max_lambda_0_00) + (rc30)*(CF_02 + CS_02*max_lambda_0_00));

    beta_0 = (rc12)*(CF_03 - CS_03*max_lambda_0_00)*((rc15)*(CF_03 - CS_03*max_lambda_0_00) - rc16*(CF_04 -
      CS_04*max_lambda_0_00) + (rc17)*(CF_05 - CS_05*max_lambda_0_00)) + (rc12)*(CF_04 -
      CS_04*max_lambda_0_00)*((rc18)*(CF_04 - CS_04*max_lambda_0_00) - rc19*(CF_05 - CS_05*max_lambda_0_00)) +
      (rc20)*pow(CF_05 - CS_05*max_lambda_0_00, 2);

    beta_1 = (rc12)*(CF_02 - CS_02*max_lambda_0_00)*((rc21)*(CF_02 - CS_02*max_lambda_0_00) - rc22*(CF_03 -
      CS_03*max_lambda_0_00) + (rc23)*(CF_04 - CS_04*max_lambda_0_00)) + (rc12)*(CF_03 -
      CS_03*max_lambda_0_00)*((rc22)*(CF_03 - CS_03*max_lambda_0_00) - rc22*(CF_04 - CS_04*max_lambda_0_00)) +
      (rc20)*pow(CF_04 - CS_04*max_lambda_0_00, 2);

    beta_2 = (rc12)*(CF_01 - CS_01*max_lambda_0_00)*((rc21)*(CF_01 - CS_01*max_lambda_0_00) - rc19*(CF_02 -
      CS_02*max_lambda_0_00) + (rc17)*(CF_03 - CS_03*max_lambda_0_00)) + (rc12)*(CF_02 -
      CS_02*max_lambda_0_00)*((rc18)*(CF_02 - CS_02*max_lambda_0_00) - rc16*(CF_03 - CS_03*max_lambda_0_00)) +
      (rc23)*pow(CF_03 - CS_03*max_lambda_0_00, 2);

   alpha_0 = 0.1 + (rc26)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_0 + 1.0e-14, 2);

   alpha_1 = 0.6 + (rc25)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_1 + 1.0e-14, 2);

   alpha_2 = 0.3 + (rc24)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_2 + 1.0e-14, 2);

   inv_alpha_sum = 1.0/(alpha_0 + alpha_1 + alpha_2);

   omega_0 = alpha_0*inv_alpha_sum;

   omega_1 = alpha_1*inv_alpha_sum;

   omega_2 = alpha_2*inv_alpha_sum;

    Recon_0 = Recon_0 + omega_0*((rc30)*(CF_03 - CS_03*max_lambda_0_00) - rc29*(CF_04 - CS_04*max_lambda_0_00) +
      (rc27)*(CF_05 - CS_05*max_lambda_0_00)) + omega_1*((rc27)*(CF_02 - CS_02*max_lambda_0_00) + (rc28)*(CF_03 -
      CS_03*max_lambda_0_00) - rc10*(CF_04 - CS_04*max_lambda_0_00)) + omega_2*(-rc10*(CF_01 - CS_01*max_lambda_0_00) +
      (rc28)*(CF_02 - CS_02*max_lambda_0_00) + (rc27)*(CF_03 - CS_03*max_lambda_0_00));

    beta_0 = (rc12)*(CF_12 + CS_12*max_lambda_0_11)*((rc15)*(CF_12 + CS_12*max_lambda_0_11) - rc16*(CF_13 +
      CS_13*max_lambda_0_11) + (rc17)*(CF_14 + CS_14*max_lambda_0_11)) + (rc12)*(CF_13 +
      CS_13*max_lambda_0_11)*((rc18)*(CF_13 + CS_13*max_lambda_0_11) - rc19*(CF_14 + CS_14*max_lambda_0_11)) +
      (rc20)*pow(CF_14 + CS_14*max_lambda_0_11, 2);

    beta_1 = (rc12)*(CF_11 + CS_11*max_lambda_0_11)*((rc21)*(CF_11 + CS_11*max_lambda_0_11) - rc22*(CF_12 +
      CS_12*max_lambda_0_11) + (rc23)*(CF_13 + CS_13*max_lambda_0_11)) + (rc12)*(CF_12 +
      CS_12*max_lambda_0_11)*((rc22)*(CF_12 + CS_12*max_lambda_0_11) - rc22*(CF_13 + CS_13*max_lambda_0_11)) +
      (rc20)*pow(CF_13 + CS_13*max_lambda_0_11, 2);

    beta_2 = (rc12)*(CF_10 + CS_10*max_lambda_0_11)*((rc21)*(CF_10 + CS_10*max_lambda_0_11) + (rc17)*(CF_12 +
      CS_12*max_lambda_0_11)) + (rc12)*(CF_11 + CS_11*max_lambda_0_11)*(-rc19*(CF_10 + CS_10*max_lambda_0_11) +
      (rc18)*(CF_11 + CS_11*max_lambda_0_11) - rc16*(CF_12 + CS_12*max_lambda_0_11)) + (rc23)*pow(CF_12 +
      CS_12*max_lambda_0_11, 2);

   alpha_0 = 0.3 + (rc24)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_0 + 1.0e-14, 2);

   alpha_1 = 0.6 + (rc25)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_1 + 1.0e-14, 2);

   alpha_2 = 0.1 + (rc26)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_2 + 1.0e-14, 2);

   inv_alpha_sum = 1.0/(alpha_0 + alpha_1 + alpha_2);

   omega_0 = alpha_0*inv_alpha_sum;

   omega_1 = alpha_1*inv_alpha_sum;

   omega_2 = alpha_2*inv_alpha_sum;

    Recon_1 = Recon_1 + omega_0*((rc27)*(CF_12 + CS_12*max_lambda_0_11) + (rc28)*(CF_13 + CS_13*max_lambda_0_11) -
      rc10*(CF_14 + CS_14*max_lambda_0_11)) + omega_1*(-rc10*(CF_11 + CS_11*max_lambda_0_11) + (rc28)*(CF_12 +
      CS_12*max_lambda_0_11) + (rc27)*(CF_13 + CS_13*max_lambda_0_11)) + omega_2*((rc27)*(CF_10 + CS_10*max_lambda_0_11)
      - rc29*(CF_11 + CS_11*max_lambda_0_11) + (rc30)*(CF_12 + CS_12*max_lambda_0_11));

    beta_0 = (rc12)*(CF_13 - CS_13*max_lambda_0_11)*((rc15)*(CF_13 - CS_13*max_lambda_0_11) - rc16*(CF_14 -
      CS_14*max_lambda_0_11) + (rc17)*(CF_15 - CS_15*max_lambda_0_11)) + (rc12)*(CF_14 -
      CS_14*max_lambda_0_11)*((rc18)*(CF_14 - CS_14*max_lambda_0_11) - rc19*(CF_15 - CS_15*max_lambda_0_11)) +
      (rc20)*pow(CF_15 - CS_15*max_lambda_0_11, 2);

    beta_1 = (rc12)*(CF_12 - CS_12*max_lambda_0_11)*((rc21)*(CF_12 - CS_12*max_lambda_0_11) - rc22*(CF_13 -
      CS_13*max_lambda_0_11) + (rc23)*(CF_14 - CS_14*max_lambda_0_11)) + (rc12)*(CF_13 -
      CS_13*max_lambda_0_11)*((rc22)*(CF_13 - CS_13*max_lambda_0_11) - rc22*(CF_14 - CS_14*max_lambda_0_11)) +
      (rc20)*pow(CF_14 - CS_14*max_lambda_0_11, 2);

    beta_2 = (rc12)*(CF_11 - CS_11*max_lambda_0_11)*((rc21)*(CF_11 - CS_11*max_lambda_0_11) - rc19*(CF_12 -
      CS_12*max_lambda_0_11) + (rc17)*(CF_13 - CS_13*max_lambda_0_11)) + (rc12)*(CF_12 -
      CS_12*max_lambda_0_11)*((rc18)*(CF_12 - CS_12*max_lambda_0_11) - rc16*(CF_13 - CS_13*max_lambda_0_11)) +
      (rc23)*pow(CF_13 - CS_13*max_lambda_0_11, 2);

   alpha_0 = 0.1 + (rc26)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_0 + 1.0e-14, 2);

   alpha_1 = 0.6 + (rc25)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_1 + 1.0e-14, 2);

   alpha_2 = 0.3 + (rc24)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_2 + 1.0e-14, 2);

   inv_alpha_sum = 1.0/(alpha_0 + alpha_1 + alpha_2);

   omega_0 = alpha_0*inv_alpha_sum;

   omega_1 = alpha_1*inv_alpha_sum;

   omega_2 = alpha_2*inv_alpha_sum;

    Recon_1 = Recon_1 + omega_0*((rc30)*(CF_13 - CS_13*max_lambda_0_11) - rc29*(CF_14 - CS_14*max_lambda_0_11) +
      (rc27)*(CF_15 - CS_15*max_lambda_0_11)) + omega_1*((rc27)*(CF_12 - CS_12*max_lambda_0_11) + (rc28)*(CF_13 -
      CS_13*max_lambda_0_11) - rc10*(CF_14 - CS_14*max_lambda_0_11)) + omega_2*(-rc10*(CF_11 - CS_11*max_lambda_0_11) +
      (rc28)*(CF_12 - CS_12*max_lambda_0_11) + (rc27)*(CF_13 - CS_13*max_lambda_0_11));

    beta_0 = (rc12)*(CF_22 + CS_22*max_lambda_0_22)*((rc15)*(CF_22 + CS_22*max_lambda_0_22) - rc16*(CF_23 +
      CS_23*max_lambda_0_22) + (rc17)*(CF_24 + CS_24*max_lambda_0_22)) + (rc12)*(CF_23 +
      CS_23*max_lambda_0_22)*((rc18)*(CF_23 + CS_23*max_lambda_0_22) - rc19*(CF_24 + CS_24*max_lambda_0_22)) +
      (rc20)*pow(CF_24 + CS_24*max_lambda_0_22, 2);

    beta_1 = (rc12)*(CF_21 + CS_21*max_lambda_0_22)*((rc21)*(CF_21 + CS_21*max_lambda_0_22) - rc22*(CF_22 +
      CS_22*max_lambda_0_22) + (rc23)*(CF_23 + CS_23*max_lambda_0_22)) + (rc12)*(CF_22 +
      CS_22*max_lambda_0_22)*((rc22)*(CF_22 + CS_22*max_lambda_0_22) - rc22*(CF_23 + CS_23*max_lambda_0_22)) +
      (rc20)*pow(CF_23 + CS_23*max_lambda_0_22, 2);

    beta_2 = (rc12)*(CF_20 + CS_20*max_lambda_0_22)*((rc21)*(CF_20 + CS_20*max_lambda_0_22) + (rc17)*(CF_22 +
      CS_22*max_lambda_0_22)) + (rc12)*(CF_21 + CS_21*max_lambda_0_22)*(-rc19*(CF_20 + CS_20*max_lambda_0_22) +
      (rc18)*(CF_21 + CS_21*max_lambda_0_22) - rc16*(CF_22 + CS_22*max_lambda_0_22)) + (rc23)*pow(CF_22 +
      CS_22*max_lambda_0_22, 2);

   alpha_0 = 0.3 + (rc24)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_0 + 1.0e-14, 2);

   alpha_1 = 0.6 + (rc25)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_1 + 1.0e-14, 2);

   alpha_2 = 0.1 + (rc26)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_2 + 1.0e-14, 2);

   inv_alpha_sum = 1.0/(alpha_0 + alpha_1 + alpha_2);

   omega_0 = alpha_0*inv_alpha_sum;

   omega_1 = alpha_1*inv_alpha_sum;

   omega_2 = alpha_2*inv_alpha_sum;

    Recon_2 = Recon_2 + omega_0*((rc27)*(CF_22 + CS_22*max_lambda_0_22) + (rc28)*(CF_23 + CS_23*max_lambda_0_22) -
      rc10*(CF_24 + CS_24*max_lambda_0_22)) + omega_1*(-rc10*(CF_21 + CS_21*max_lambda_0_22) + (rc28)*(CF_22 +
      CS_22*max_lambda_0_22) + (rc27)*(CF_23 + CS_23*max_lambda_0_22)) + omega_2*((rc27)*(CF_20 + CS_20*max_lambda_0_22)
      - rc29*(CF_21 + CS_21*max_lambda_0_22) + (rc30)*(CF_22 + CS_22*max_lambda_0_22));

    beta_0 = (rc12)*(CF_23 - CS_23*max_lambda_0_22)*((rc15)*(CF_23 - CS_23*max_lambda_0_22) - rc16*(CF_24 -
      CS_24*max_lambda_0_22) + (rc17)*(CF_25 - CS_25*max_lambda_0_22)) + (rc12)*(CF_24 -
      CS_24*max_lambda_0_22)*((rc18)*(CF_24 - CS_24*max_lambda_0_22) - rc19*(CF_25 - CS_25*max_lambda_0_22)) +
      (rc20)*pow(CF_25 - CS_25*max_lambda_0_22, 2);

    beta_1 = (rc12)*(CF_22 - CS_22*max_lambda_0_22)*((rc21)*(CF_22 - CS_22*max_lambda_0_22) - rc22*(CF_23 -
      CS_23*max_lambda_0_22) + (rc23)*(CF_24 - CS_24*max_lambda_0_22)) + (rc12)*(CF_23 -
      CS_23*max_lambda_0_22)*((rc22)*(CF_23 - CS_23*max_lambda_0_22) - rc22*(CF_24 - CS_24*max_lambda_0_22)) +
      (rc20)*pow(CF_24 - CS_24*max_lambda_0_22, 2);

    beta_2 = (rc12)*(CF_21 - CS_21*max_lambda_0_22)*((rc21)*(CF_21 - CS_21*max_lambda_0_22) - rc19*(CF_22 -
      CS_22*max_lambda_0_22) + (rc17)*(CF_23 - CS_23*max_lambda_0_22)) + (rc12)*(CF_22 -
      CS_22*max_lambda_0_22)*((rc18)*(CF_22 - CS_22*max_lambda_0_22) - rc16*(CF_23 - CS_23*max_lambda_0_22)) +
      (rc23)*pow(CF_23 - CS_23*max_lambda_0_22, 2);

   alpha_0 = 0.1 + (rc26)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_0 + 1.0e-14, 2);

   alpha_1 = 0.6 + (rc25)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_1 + 1.0e-14, 2);

   alpha_2 = 0.3 + (rc24)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_2 + 1.0e-14, 2);

   inv_alpha_sum = 1.0/(alpha_0 + alpha_1 + alpha_2);

   omega_0 = alpha_0*inv_alpha_sum;

   omega_1 = alpha_1*inv_alpha_sum;

   omega_2 = alpha_2*inv_alpha_sum;

    Recon_2 = Recon_2 + omega_0*((rc30)*(CF_23 - CS_23*max_lambda_0_22) - rc29*(CF_24 - CS_24*max_lambda_0_22) +
      (rc27)*(CF_25 - CS_25*max_lambda_0_22)) + omega_1*((rc27)*(CF_22 - CS_22*max_lambda_0_22) + (rc28)*(CF_23 -
      CS_23*max_lambda_0_22) - rc10*(CF_24 - CS_24*max_lambda_0_22)) + omega_2*(-rc10*(CF_21 - CS_21*max_lambda_0_22) +
      (rc28)*(CF_22 - CS_22*max_lambda_0_22) + (rc27)*(CF_23 - CS_23*max_lambda_0_22));

    beta_0 = (rc12)*(CF_32 + CS_32*max_lambda_0_33)*((rc15)*(CF_32 + CS_32*max_lambda_0_33) - rc16*(CF_33 +
      CS_33*max_lambda_0_33) + (rc17)*(CF_34 + CS_34*max_lambda_0_33)) + (rc12)*(CF_33 +
      CS_33*max_lambda_0_33)*((rc18)*(CF_33 + CS_33*max_lambda_0_33) - rc19*(CF_34 + CS_34*max_lambda_0_33)) +
      (rc20)*pow(CF_34 + CS_34*max_lambda_0_33, 2);

    beta_1 = (rc12)*(CF_31 + CS_31*max_lambda_0_33)*((rc21)*(CF_31 + CS_31*max_lambda_0_33) - rc22*(CF_32 +
      CS_32*max_lambda_0_33) + (rc23)*(CF_33 + CS_33*max_lambda_0_33)) + (rc12)*(CF_32 +
      CS_32*max_lambda_0_33)*((rc22)*(CF_32 + CS_32*max_lambda_0_33) - rc22*(CF_33 + CS_33*max_lambda_0_33)) +
      (rc20)*pow(CF_33 + CS_33*max_lambda_0_33, 2);

    beta_2 = (rc12)*(CF_30 + CS_30*max_lambda_0_33)*((rc21)*(CF_30 + CS_30*max_lambda_0_33) + (rc17)*(CF_32 +
      CS_32*max_lambda_0_33)) + (rc12)*(CF_31 + CS_31*max_lambda_0_33)*(-rc19*(CF_30 + CS_30*max_lambda_0_33) +
      (rc18)*(CF_31 + CS_31*max_lambda_0_33) - rc16*(CF_32 + CS_32*max_lambda_0_33)) + (rc23)*pow(CF_32 +
      CS_32*max_lambda_0_33, 2);

   alpha_0 = 0.3 + (rc24)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_0 + 1.0e-14, 2);

   alpha_1 = 0.6 + (rc25)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_1 + 1.0e-14, 2);

   alpha_2 = 0.1 + (rc26)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_2 + 1.0e-14, 2);

   inv_alpha_sum = 1.0/(alpha_0 + alpha_1 + alpha_2);

   omega_0 = alpha_0*inv_alpha_sum;

   omega_1 = alpha_1*inv_alpha_sum;

   omega_2 = alpha_2*inv_alpha_sum;

    Recon_3 = Recon_3 + omega_0*((rc27)*(CF_32 + CS_32*max_lambda_0_33) + (rc28)*(CF_33 + CS_33*max_lambda_0_33) -
      rc10*(CF_34 + CS_34*max_lambda_0_33)) + omega_1*(-rc10*(CF_31 + CS_31*max_lambda_0_33) + (rc28)*(CF_32 +
      CS_32*max_lambda_0_33) + (rc27)*(CF_33 + CS_33*max_lambda_0_33)) + omega_2*((rc27)*(CF_30 + CS_30*max_lambda_0_33)
      - rc29*(CF_31 + CS_31*max_lambda_0_33) + (rc30)*(CF_32 + CS_32*max_lambda_0_33));

    beta_0 = (rc12)*(CF_33 - CS_33*max_lambda_0_33)*((rc15)*(CF_33 - CS_33*max_lambda_0_33) - rc16*(CF_34 -
      CS_34*max_lambda_0_33) + (rc17)*(CF_35 - CS_35*max_lambda_0_33)) + (rc12)*(CF_34 -
      CS_34*max_lambda_0_33)*((rc18)*(CF_34 - CS_34*max_lambda_0_33) - rc19*(CF_35 - CS_35*max_lambda_0_33)) +
      (rc20)*pow(CF_35 - CS_35*max_lambda_0_33, 2);

    beta_1 = (rc12)*(CF_32 - CS_32*max_lambda_0_33)*((rc21)*(CF_32 - CS_32*max_lambda_0_33) - rc22*(CF_33 -
      CS_33*max_lambda_0_33) + (rc23)*(CF_34 - CS_34*max_lambda_0_33)) + (rc12)*(CF_33 -
      CS_33*max_lambda_0_33)*((rc22)*(CF_33 - CS_33*max_lambda_0_33) - rc22*(CF_34 - CS_34*max_lambda_0_33)) +
      (rc20)*pow(CF_34 - CS_34*max_lambda_0_33, 2);

    beta_2 = (rc12)*(CF_31 - CS_31*max_lambda_0_33)*((rc21)*(CF_31 - CS_31*max_lambda_0_33) - rc19*(CF_32 -
      CS_32*max_lambda_0_33) + (rc17)*(CF_33 - CS_33*max_lambda_0_33)) + (rc12)*(CF_32 -
      CS_32*max_lambda_0_33)*((rc18)*(CF_32 - CS_32*max_lambda_0_33) - rc16*(CF_33 - CS_33*max_lambda_0_33)) +
      (rc23)*pow(CF_33 - CS_33*max_lambda_0_33, 2);

   alpha_0 = 0.1 + (rc26)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_0 + 1.0e-14, 2);

   alpha_1 = 0.6 + (rc25)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_1 + 1.0e-14, 2);

   alpha_2 = 0.3 + (rc24)*pow(fabs(beta_0 - beta_2), 2)/pow(beta_2 + 1.0e-14, 2);

   inv_alpha_sum = 1.0/(alpha_0 + alpha_1 + alpha_2);

   omega_0 = alpha_0*inv_alpha_sum;

   omega_1 = alpha_1*inv_alpha_sum;

   omega_2 = alpha_2*inv_alpha_sum;

    Recon_3 = Recon_3 + omega_0*((rc30)*(CF_33 - CS_33*max_lambda_0_33) - rc29*(CF_34 - CS_34*max_lambda_0_33) +
      (rc27)*(CF_35 - CS_35*max_lambda_0_33)) + omega_1*((rc27)*(CF_32 - CS_32*max_lambda_0_33) + (rc28)*(CF_33 -
      CS_33*max_lambda_0_33) - rc10*(CF_34 - CS_34*max_lambda_0_33)) + omega_2*(-rc10*(CF_31 - CS_31*max_lambda_0_33) +
      (rc28)*(CF_32 - CS_32*max_lambda_0_33) + (rc27)*(CF_33 - CS_33*max_lambda_0_33));

    OPS_ACCS(wk0_B0, 0,0) = 0.707106781186547*AVG_0_rho*Recon_2*inv_AVG_a +
      0.707106781186547*AVG_0_rho*Recon_3*inv_AVG_a + Recon_0;

    OPS_ACCS(wk1_B0, 0,0) = AVG_0_D01*AVG_0_rho*Recon_1*inv_AVG_met_fact +
      0.707106781186547*AVG_0_rho*Recon_2*inv_AVG_a*(AVG_0_D00*AVG_0_a*inv_AVG_met_fact + AVG_0_u0) +
      0.707106781186547*AVG_0_rho*Recon_3*inv_AVG_a*(-AVG_0_D00*AVG_0_a*inv_AVG_met_fact + AVG_0_u0) +
      AVG_0_u0*Recon_0;

    OPS_ACCS(wk2_B0, 0,0) = -AVG_0_D00*AVG_0_rho*Recon_1*inv_AVG_met_fact +
      0.707106781186547*AVG_0_rho*Recon_2*inv_AVG_a*(AVG_0_D01*AVG_0_a*inv_AVG_met_fact + AVG_0_u1) +
      0.707106781186547*AVG_0_rho*Recon_3*inv_AVG_a*(-AVG_0_D01*AVG_0_a*inv_AVG_met_fact + AVG_0_u1) +
      AVG_0_u1*Recon_0;

    OPS_ACCS(wk3_B0, 0,0) = AVG_0_rho*Recon_1*(-AVG_0_D00*AVG_0_u1*inv_AVG_met_fact +
      AVG_0_D01*AVG_0_u0*inv_AVG_met_fact) +
      0.707106781186547*AVG_0_rho*Recon_2*inv_AVG_a*(rcinv31*((rc12)*gamma_m1*(pow(AVG_0_u0, 2) + pow(AVG_0_u1, 2)) +
      pow(AVG_0_a, 2)) + AVG_0_a*(AVG_0_D00*AVG_0_u0*inv_AVG_met_fact + AVG_0_D01*AVG_0_u1*inv_AVG_met_fact)) +
      0.707106781186547*AVG_0_rho*Recon_3*inv_AVG_a*(rcinv31*((rc12)*gamma_m1*(pow(AVG_0_u0, 2) + pow(AVG_0_u1, 2)) +
      pow(AVG_0_a, 2)) - AVG_0_a*(AVG_0_D00*AVG_0_u0*inv_AVG_met_fact + AVG_0_D01*AVG_0_u1*inv_AVG_met_fact)) +
      Recon_0*((rc12)*pow(AVG_0_u0, 2) + (rc12)*pow(AVG_0_u1, 2));

}


__kernel void ops_opensbliblock00Kernel000(
__global const double* restrict arg0,
__global const double* restrict arg1,
__global const double* restrict arg2,
__global const double* restrict arg3,
__global const double* restrict arg4,
__global const double* restrict arg5,
__global const double* restrict arg6,
__global const double* restrict arg7,
__global const double* restrict arg8,
__global const double* restrict arg9,
__global const double* restrict arg10,
__global const double* restrict arg11,
__global double* restrict arg12,
__global double* restrict arg13,
__global double* restrict arg14,
__global double* restrict arg15,
const double gama,
const double gamma_m1,
const double rc10,
const double rc12,
const double rc14,
const double rc15,
const double rc16,
const double rc17,
const double rc18,
const double rc19,
const double rc20,
const double rc21,
const double rc22,
const double rc23,
const double rc24,
const double rc25,
const double rc26,
const double rc27,
const double rc28,
const double rc29,
const double rc30,
const double rcinv31,
const int base0,
const int base1,
const int base2,
const int base3,
const int base4,
const int base5,
const int base6,
const int base7,
const int base8,
const int base9,
const int base10,
const int base11,
const int base12,
const int base13,
const int base14,
const int base15,
const int size0,
const int size1 ){


  int idx_y = get_global_id(1);
  int idx_x = get_global_id(0);

  if (idx_x < size0 && idx_y < size1) {
    const ptr_double ptr0 = { &arg0[base0 + idx_x * 1*1 + idx_y * 1*1 * xdim0_opensbliblock00Kernel000], xdim0_opensbliblock00Kernel000};
    const ptr_double ptr1 = { &arg1[base1 + idx_x * 1*1 + idx_y * 1*1 * xdim1_opensbliblock00Kernel000], xdim1_opensbliblock00Kernel000};
    const ptr_double ptr2 = { &arg2[base2 + idx_x * 1*1 + idx_y * 1*1 * xdim2_opensbliblock00Kernel000], xdim2_opensbliblock00Kernel000};
    const ptr_double ptr3 = { &arg3[base3 + idx_x * 1*1 + idx_y * 1*1 * xdim3_opensbliblock00Kernel000], xdim3_opensbliblock00Kernel000};
    const ptr_double ptr4 = { &arg4[base4 + idx_x * 1*1 + idx_y * 1*1 * xdim4_opensbliblock00Kernel000], xdim4_opensbliblock00Kernel000};
    const ptr_double ptr5 = { &arg5[base5 + idx_x * 1*1 + idx_y * 1*1 * xdim5_opensbliblock00Kernel000], xdim5_opensbliblock00Kernel000};
    const ptr_double ptr6 = { &arg6[base6 + idx_x * 1*1 + idx_y * 1*1 * xdim6_opensbliblock00Kernel000], xdim6_opensbliblock00Kernel000};
    const ptr_double ptr7 = { &arg7[base7 + idx_x * 1*1 + idx_y * 1*1 * xdim7_opensbliblock00Kernel000], xdim7_opensbliblock00Kernel000};
    const ptr_double ptr8 = { &arg8[base8 + idx_x * 1*1 + idx_y * 1*1 * xdim8_opensbliblock00Kernel000], xdim8_opensbliblock00Kernel000};
    const ptr_double ptr9 = { &arg9[base9 + idx_x * 1*1 + idx_y * 1*1 * xdim9_opensbliblock00Kernel000], xdim9_opensbliblock00Kernel000};
    const ptr_double ptr10 = { &arg10[base10 + idx_x * 1*1 + idx_y * 1*1 * xdim10_opensbliblock00Kernel000], xdim10_opensbliblock00Kernel000};
    const ptr_double ptr11 = { &arg11[base11 + idx_x * 1*1 + idx_y * 1*1 * xdim11_opensbliblock00Kernel000], xdim11_opensbliblock00Kernel000};
    ptr_double ptr12 = { &arg12[base12 + idx_x * 1*1 + idx_y * 1*1 * xdim12_opensbliblock00Kernel000], xdim12_opensbliblock00Kernel000};
    ptr_double ptr13 = { &arg13[base13 + idx_x * 1*1 + idx_y * 1*1 * xdim13_opensbliblock00Kernel000], xdim13_opensbliblock00Kernel000};
    ptr_double ptr14 = { &arg14[base14 + idx_x * 1*1 + idx_y * 1*1 * xdim14_opensbliblock00Kernel000], xdim14_opensbliblock00Kernel000};
    ptr_double ptr15 = { &arg15[base15 + idx_x * 1*1 + idx_y * 1*1 * xdim15_opensbliblock00Kernel000], xdim15_opensbliblock00Kernel000};
    opensbliblock00Kernel000(ptr0,
                                  ptr1,
                                  ptr2,
                                  ptr3,
                                  ptr4,
                                  ptr5,
                                  ptr6,
                                  ptr7,
                                  ptr8,
                                  ptr9,
                                  ptr10,
                                  ptr11,
                                  ptr12,
                                  ptr13,
                                  ptr14,
                                  ptr15,
                                  gama,
                                  gamma_m1,
                                  rc10,
                                  rc12,
                                  rc14,
                                  rc15,
                                  rc16,
                                  rc17,
                                  rc18,
                                  rc19,
                                  rc20,
                                  rc21,
                                  rc22,
                                  rc23,
                                  rc24,
                                  rc25,
                                  rc26,
                                  rc27,
                                  rc28,
                                  rc29,
                                  rc30,
                                  rcinv31);
  }

}
