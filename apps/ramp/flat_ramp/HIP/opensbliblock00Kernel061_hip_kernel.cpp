//
// auto-generated by ops.py
//
__constant__ int dims_opensbliblock00Kernel061 [35][1];
static int dims_opensbliblock00Kernel061_h [35][1] = {{0}};

//user function
__device__

 void opensbliblock00Kernel061_gpu(const ACC<double> &SD100_B0,
  const ACC<double> &wk3_B0,
  const ACC<double> &wk12_B0,
  const ACC<double>
&wk16_B0,
  const ACC<double> &wk2_B0,
  const ACC<double> &SD001_B0,
  const ACC<double> &wk6_B0,
  const ACC<double> &u1_B0,
  const ACC<double> &wk0_B0,
  const ACC<double> &D00_B0,
  const ACC<double> &wk7_B0,
  const ACC<double> &SD101_B0,
  const ACC<double> &D10_B0,
  const ACC<double> &SD110_B0,
  const
ACC<double> &wk13_B0,
  const ACC<double> &u0_B0,
  const ACC<double> &SD011_B0,
  const ACC<double> &D11_B0,
  const ACC<double> &D01_B0,
  const ACC<double>
&wk5_B0,
  const ACC<double> &wk11_B0,
  const ACC<double> &wk14_B0,
  const ACC<double> &wk1_B0,
  const ACC<double> &wk4_B0,
  const ACC<double> &wk8_B0,
  const ACC<double> &mu_B0,
  const ACC<double> &wk9_B0,
  const ACC<double> &SD000_B0,
  const ACC<double> &SD010_B0,
  const ACC<double> &wk15_B0,
  const
ACC<double> &SD111_B0,
  const ACC<double> &wk10_B0,
  ACC<double> &Residual1_B0,
  ACC<double> &Residual3_B0,
  ACC<double> &Residual2_B0)
{
    Residual1_B0(0,0) = rcinv38*(D00_B0(0,0)*wk16_B0(0,0) +
      D10_B0(0,0)*wk14_B0(0,0))*((rc9)*D00_B0(0,0)*wk7_B0(0,0) -
      rc14*D01_B0(0,0)*wk5_B0(0,0) + (rc9)*D10_B0(0,0)*wk8_B0(0,0) -
      rc14*D11_B0(0,0)*wk11_B0(0,0)) + rcinv38*(D01_B0(0,0)*wk16_B0(0,0) +
      D11_B0(0,0)*wk14_B0(0,0))*(D00_B0(0,0)*wk5_B0(0,0) +
      D01_B0(0,0)*wk7_B0(0,0) + D10_B0(0,0)*wk11_B0(0,0) +
      D11_B0(0,0)*wk8_B0(0,0)) + rcinv38*((rc9)*pow(D00_B0(0,0),
      2)*wk12_B0(0,0) + (rc23)*D00_B0(0,0)*D01_B0(0,0)*wk13_B0(0,0) +
      (rc39)*D00_B0(0,0)*D10_B0(0,0)*wk2_B0(0,0) +
      (rc23)*D00_B0(0,0)*D11_B0(0,0)*wk9_B0(0,0) +
      (rc9)*D00_B0(0,0)*SD000_B0(0,0)*wk7_B0(0,0) -
      rc14*D00_B0(0,0)*SD010_B0(0,0)*wk5_B0(0,0) +
      (rc9)*D00_B0(0,0)*SD100_B0(0,0)*wk8_B0(0,0) -
      rc14*D00_B0(0,0)*SD110_B0(0,0)*wk11_B0(0,0) + pow(D01_B0(0,0),
      2)*wk12_B0(0,0) + (rc23)*D01_B0(0,0)*D10_B0(0,0)*wk9_B0(0,0) +
      2*D01_B0(0,0)*D11_B0(0,0)*wk2_B0(0,0) +
      D01_B0(0,0)*SD000_B0(0,0)*wk5_B0(0,0) +
      D01_B0(0,0)*SD010_B0(0,0)*wk7_B0(0,0) +
      D01_B0(0,0)*SD100_B0(0,0)*wk11_B0(0,0) +
      D01_B0(0,0)*SD110_B0(0,0)*wk8_B0(0,0) + (rc9)*pow(D10_B0(0,0),
      2)*wk0_B0(0,0) + (rc23)*D10_B0(0,0)*D11_B0(0,0)*wk3_B0(0,0) +
      (rc9)*D10_B0(0,0)*SD001_B0(0,0)*wk7_B0(0,0) -
      rc14*D10_B0(0,0)*SD011_B0(0,0)*wk5_B0(0,0) +
      (rc9)*D10_B0(0,0)*SD101_B0(0,0)*wk8_B0(0,0) -
      rc14*D10_B0(0,0)*SD111_B0(0,0)*wk11_B0(0,0) + pow(D11_B0(0,0),
      2)*wk0_B0(0,0) + D11_B0(0,0)*SD001_B0(0,0)*wk5_B0(0,0) +
      D11_B0(0,0)*SD011_B0(0,0)*wk7_B0(0,0) +
      D11_B0(0,0)*SD101_B0(0,0)*wk11_B0(0,0) +
      D11_B0(0,0)*SD111_B0(0,0)*wk8_B0(0,0))*mu_B0(0,0) +
      Residual1_B0(0,0);

    Residual2_B0(0,0) = rcinv38*(D00_B0(0,0)*wk16_B0(0,0) +
      D10_B0(0,0)*wk14_B0(0,0))*(D00_B0(0,0)*wk5_B0(0,0) +
      D01_B0(0,0)*wk7_B0(0,0) + D10_B0(0,0)*wk11_B0(0,0) +
      D11_B0(0,0)*wk8_B0(0,0)) + rcinv38*(D01_B0(0,0)*wk16_B0(0,0) +
      D11_B0(0,0)*wk14_B0(0,0))*(-rc14*D00_B0(0,0)*wk7_B0(0,0) +
      (rc9)*D01_B0(0,0)*wk5_B0(0,0) - rc14*D10_B0(0,0)*wk8_B0(0,0) +
      (rc9)*D11_B0(0,0)*wk11_B0(0,0)) + rcinv38*(pow(D00_B0(0,0),
      2)*wk13_B0(0,0) + (rc23)*D00_B0(0,0)*D01_B0(0,0)*wk12_B0(0,0) +
      2*D00_B0(0,0)*D10_B0(0,0)*wk9_B0(0,0) +
      (rc23)*D00_B0(0,0)*D11_B0(0,0)*wk2_B0(0,0) +
      D00_B0(0,0)*SD000_B0(0,0)*wk5_B0(0,0) +
      D00_B0(0,0)*SD010_B0(0,0)*wk7_B0(0,0) +
      D00_B0(0,0)*SD100_B0(0,0)*wk11_B0(0,0) +
      D00_B0(0,0)*SD110_B0(0,0)*wk8_B0(0,0) + (rc9)*pow(D01_B0(0,0),
      2)*wk13_B0(0,0) + (rc23)*D01_B0(0,0)*D10_B0(0,0)*wk2_B0(0,0) +
      (rc39)*D01_B0(0,0)*D11_B0(0,0)*wk9_B0(0,0) -
      rc14*D01_B0(0,0)*SD000_B0(0,0)*wk7_B0(0,0) +
      (rc9)*D01_B0(0,0)*SD010_B0(0,0)*wk5_B0(0,0) -
      rc14*D01_B0(0,0)*SD100_B0(0,0)*wk8_B0(0,0) +
      (rc9)*D01_B0(0,0)*SD110_B0(0,0)*wk11_B0(0,0) + pow(D10_B0(0,0),
      2)*wk3_B0(0,0) + (rc23)*D10_B0(0,0)*D11_B0(0,0)*wk0_B0(0,0) +
      D10_B0(0,0)*SD001_B0(0,0)*wk5_B0(0,0) +
      D10_B0(0,0)*SD011_B0(0,0)*wk7_B0(0,0) +
      D10_B0(0,0)*SD101_B0(0,0)*wk11_B0(0,0) +
      D10_B0(0,0)*SD111_B0(0,0)*wk8_B0(0,0) + (rc9)*pow(D11_B0(0,0),
      2)*wk3_B0(0,0) - rc14*D11_B0(0,0)*SD001_B0(0,0)*wk7_B0(0,0) +
      (rc9)*D11_B0(0,0)*SD011_B0(0,0)*wk5_B0(0,0) -
      rc14*D11_B0(0,0)*SD101_B0(0,0)*wk8_B0(0,0) +
      (rc9)*D11_B0(0,0)*SD111_B0(0,0)*wk11_B0(0,0))*mu_B0(0,0) +
      Residual2_B0(0,0);

    Residual3_B0(0,0) = rcinv38*rcinv40*rcinv5*rcinv6*(D00_B0(0,0)*wk16_B0(0,0) +
      D10_B0(0,0)*wk14_B0(0,0))*(D00_B0(0,0)*wk1_B0(0,0) +
      D10_B0(0,0)*wk4_B0(0,0)) +
      rcinv38*rcinv40*rcinv5*rcinv6*(D01_B0(0,0)*wk16_B0(0,0) +
      D11_B0(0,0)*wk14_B0(0,0))*(D01_B0(0,0)*wk1_B0(0,0) +
      D11_B0(0,0)*wk4_B0(0,0)) + rcinv38*rcinv40*rcinv5*rcinv6*(pow(D00_B0(0,0),
      2)*wk6_B0(0,0) + 2*D00_B0(0,0)*D10_B0(0,0)*wk15_B0(0,0) +
      D00_B0(0,0)*SD000_B0(0,0)*wk1_B0(0,0) +
      D00_B0(0,0)*SD100_B0(0,0)*wk4_B0(0,0) + pow(D01_B0(0,0),
      2)*wk6_B0(0,0) + 2*D01_B0(0,0)*D11_B0(0,0)*wk15_B0(0,0) +
      D01_B0(0,0)*SD010_B0(0,0)*wk1_B0(0,0) +
      D01_B0(0,0)*SD110_B0(0,0)*wk4_B0(0,0) + pow(D10_B0(0,0),
      2)*wk10_B0(0,0) + D10_B0(0,0)*SD001_B0(0,0)*wk1_B0(0,0) +
      D10_B0(0,0)*SD101_B0(0,0)*wk4_B0(0,0) + pow(D11_B0(0,0),
      2)*wk10_B0(0,0) + D11_B0(0,0)*SD011_B0(0,0)*wk1_B0(0,0) +
      D11_B0(0,0)*SD111_B0(0,0)*wk4_B0(0,0))*mu_B0(0,0) +
      rcinv38*(D00_B0(0,0)*wk16_B0(0,0) +
      D10_B0(0,0)*wk14_B0(0,0))*(D00_B0(0,0)*wk5_B0(0,0) +
      D01_B0(0,0)*wk7_B0(0,0) + D10_B0(0,0)*wk11_B0(0,0) +
      D11_B0(0,0)*wk8_B0(0,0))*u1_B0(0,0) +
      rcinv38*(D00_B0(0,0)*wk16_B0(0,0) +
      D10_B0(0,0)*wk14_B0(0,0))*((rc9)*D00_B0(0,0)*wk7_B0(0,0) -
      rc14*D01_B0(0,0)*wk5_B0(0,0) + (rc9)*D10_B0(0,0)*wk8_B0(0,0) -
      rc14*D11_B0(0,0)*wk11_B0(0,0))*u0_B0(0,0) +
      rcinv38*(D00_B0(0,0)*wk5_B0(0,0) +
      D10_B0(0,0)*wk11_B0(0,0))*(D00_B0(0,0)*wk5_B0(0,0) +
      D01_B0(0,0)*wk7_B0(0,0) + D10_B0(0,0)*wk11_B0(0,0) +
      D11_B0(0,0)*wk8_B0(0,0))*mu_B0(0,0) +
      rcinv38*(D00_B0(0,0)*wk7_B0(0,0) +
      D10_B0(0,0)*wk8_B0(0,0))*((rc9)*D00_B0(0,0)*wk7_B0(0,0) -
      rc14*D01_B0(0,0)*wk5_B0(0,0) + (rc9)*D10_B0(0,0)*wk8_B0(0,0) -
      rc14*D11_B0(0,0)*wk11_B0(0,0))*mu_B0(0,0) +
      rcinv38*(D01_B0(0,0)*wk16_B0(0,0) +
      D11_B0(0,0)*wk14_B0(0,0))*(D00_B0(0,0)*wk5_B0(0,0) +
      D01_B0(0,0)*wk7_B0(0,0) + D10_B0(0,0)*wk11_B0(0,0) +
      D11_B0(0,0)*wk8_B0(0,0))*u0_B0(0,0) +
      rcinv38*(D01_B0(0,0)*wk16_B0(0,0) +
      D11_B0(0,0)*wk14_B0(0,0))*(-rc14*D00_B0(0,0)*wk7_B0(0,0) +
      (rc9)*D01_B0(0,0)*wk5_B0(0,0) - rc14*D10_B0(0,0)*wk8_B0(0,0) +
      (rc9)*D11_B0(0,0)*wk11_B0(0,0))*u1_B0(0,0) +
      rcinv38*(D01_B0(0,0)*wk5_B0(0,0) +
      D11_B0(0,0)*wk11_B0(0,0))*(-rc14*D00_B0(0,0)*wk7_B0(0,0) +
      (rc9)*D01_B0(0,0)*wk5_B0(0,0) - rc14*D10_B0(0,0)*wk8_B0(0,0) +
      (rc9)*D11_B0(0,0)*wk11_B0(0,0))*mu_B0(0,0) +
      rcinv38*(D01_B0(0,0)*wk7_B0(0,0) +
      D11_B0(0,0)*wk8_B0(0,0))*(D00_B0(0,0)*wk5_B0(0,0) +
      D01_B0(0,0)*wk7_B0(0,0) + D10_B0(0,0)*wk11_B0(0,0) +
      D11_B0(0,0)*wk8_B0(0,0))*mu_B0(0,0) + rcinv38*((rc9)*pow(D00_B0(0,0),
      2)*wk12_B0(0,0) + (rc23)*D00_B0(0,0)*D01_B0(0,0)*wk13_B0(0,0) +
      (rc39)*D00_B0(0,0)*D10_B0(0,0)*wk2_B0(0,0) +
      (rc23)*D00_B0(0,0)*D11_B0(0,0)*wk9_B0(0,0) +
      (rc9)*D00_B0(0,0)*SD000_B0(0,0)*wk7_B0(0,0) -
      rc14*D00_B0(0,0)*SD010_B0(0,0)*wk5_B0(0,0) +
      (rc9)*D00_B0(0,0)*SD100_B0(0,0)*wk8_B0(0,0) -
      rc14*D00_B0(0,0)*SD110_B0(0,0)*wk11_B0(0,0) + pow(D01_B0(0,0),
      2)*wk12_B0(0,0) + (rc23)*D01_B0(0,0)*D10_B0(0,0)*wk9_B0(0,0) +
      2*D01_B0(0,0)*D11_B0(0,0)*wk2_B0(0,0) +
      D01_B0(0,0)*SD000_B0(0,0)*wk5_B0(0,0) +
      D01_B0(0,0)*SD010_B0(0,0)*wk7_B0(0,0) +
      D01_B0(0,0)*SD100_B0(0,0)*wk11_B0(0,0) +
      D01_B0(0,0)*SD110_B0(0,0)*wk8_B0(0,0) + (rc9)*pow(D10_B0(0,0),
      2)*wk0_B0(0,0) + (rc23)*D10_B0(0,0)*D11_B0(0,0)*wk3_B0(0,0) +
      (rc9)*D10_B0(0,0)*SD001_B0(0,0)*wk7_B0(0,0) -
      rc14*D10_B0(0,0)*SD011_B0(0,0)*wk5_B0(0,0) +
      (rc9)*D10_B0(0,0)*SD101_B0(0,0)*wk8_B0(0,0) -
      rc14*D10_B0(0,0)*SD111_B0(0,0)*wk11_B0(0,0) + pow(D11_B0(0,0),
      2)*wk0_B0(0,0) + D11_B0(0,0)*SD001_B0(0,0)*wk5_B0(0,0) +
      D11_B0(0,0)*SD011_B0(0,0)*wk7_B0(0,0) +
      D11_B0(0,0)*SD101_B0(0,0)*wk11_B0(0,0) +
      D11_B0(0,0)*SD111_B0(0,0)*wk8_B0(0,0))*mu_B0(0,0)*u0_B0(0,0)
      + rcinv38*(pow(D00_B0(0,0), 2)*wk13_B0(0,0) +
      (rc23)*D00_B0(0,0)*D01_B0(0,0)*wk12_B0(0,0) +
      2*D00_B0(0,0)*D10_B0(0,0)*wk9_B0(0,0) +
      (rc23)*D00_B0(0,0)*D11_B0(0,0)*wk2_B0(0,0) +
      D00_B0(0,0)*SD000_B0(0,0)*wk5_B0(0,0) +
      D00_B0(0,0)*SD010_B0(0,0)*wk7_B0(0,0) +
      D00_B0(0,0)*SD100_B0(0,0)*wk11_B0(0,0) +
      D00_B0(0,0)*SD110_B0(0,0)*wk8_B0(0,0) + (rc9)*pow(D01_B0(0,0),
      2)*wk13_B0(0,0) + (rc23)*D01_B0(0,0)*D10_B0(0,0)*wk2_B0(0,0) +
      (rc39)*D01_B0(0,0)*D11_B0(0,0)*wk9_B0(0,0) -
      rc14*D01_B0(0,0)*SD000_B0(0,0)*wk7_B0(0,0) +
      (rc9)*D01_B0(0,0)*SD010_B0(0,0)*wk5_B0(0,0) -
      rc14*D01_B0(0,0)*SD100_B0(0,0)*wk8_B0(0,0) +
      (rc9)*D01_B0(0,0)*SD110_B0(0,0)*wk11_B0(0,0) + pow(D10_B0(0,0),
      2)*wk3_B0(0,0) + (rc23)*D10_B0(0,0)*D11_B0(0,0)*wk0_B0(0,0) +
      D10_B0(0,0)*SD001_B0(0,0)*wk5_B0(0,0) +
      D10_B0(0,0)*SD011_B0(0,0)*wk7_B0(0,0) +
      D10_B0(0,0)*SD101_B0(0,0)*wk11_B0(0,0) +
      D10_B0(0,0)*SD111_B0(0,0)*wk8_B0(0,0) + (rc9)*pow(D11_B0(0,0),
      2)*wk3_B0(0,0) - rc14*D11_B0(0,0)*SD001_B0(0,0)*wk7_B0(0,0) +
      (rc9)*D11_B0(0,0)*SD011_B0(0,0)*wk5_B0(0,0) -
      rc14*D11_B0(0,0)*SD101_B0(0,0)*wk8_B0(0,0) +
      (rc9)*D11_B0(0,0)*SD111_B0(0,0)*wk11_B0(0,0))*mu_B0(0,0)*u1_B0(0,0)
      + Residual3_B0(0,0);

}



__global__ void ops_opensbliblock00Kernel061(
double* __restrict arg0,
double* __restrict arg1,
double* __restrict arg2,
double* __restrict arg3,
double* __restrict arg4,
double* __restrict arg5,
double* __restrict arg6,
double* __restrict arg7,
double* __restrict arg8,
double* __restrict arg9,
double* __restrict arg10,
double* __restrict arg11,
double* __restrict arg12,
double* __restrict arg13,
double* __restrict arg14,
double* __restrict arg15,
double* __restrict arg16,
double* __restrict arg17,
double* __restrict arg18,
double* __restrict arg19,
double* __restrict arg20,
double* __restrict arg21,
double* __restrict arg22,
double* __restrict arg23,
double* __restrict arg24,
double* __restrict arg25,
double* __restrict arg26,
double* __restrict arg27,
double* __restrict arg28,
double* __restrict arg29,
double* __restrict arg30,
double* __restrict arg31,
double* __restrict arg32,
double* __restrict arg33,
double* __restrict arg34,
int size0,
int size1 ){

  //Make sure constants are not optimized out
  if (size0==-1) dims_opensbliblock00Kernel061[0][0]=0;


  int idx_y = hipBlockDim_y * hipBlockIdx_y + hipThreadIdx_y;
  int idx_x = hipBlockDim_x * hipBlockIdx_x + hipThreadIdx_x;

  arg0 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel061[0][0];
  arg1 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel061[1][0];
  arg2 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel061[2][0];
  arg3 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel061[3][0];
  arg4 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel061[4][0];
  arg5 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel061[5][0];
  arg6 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel061[6][0];
  arg7 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel061[7][0];
  arg8 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel061[8][0];
  arg9 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel061[9][0];
  arg10 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel061[10][0];
  arg11 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel061[11][0];
  arg12 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel061[12][0];
  arg13 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel061[13][0];
  arg14 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel061[14][0];
  arg15 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel061[15][0];
  arg16 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel061[16][0];
  arg17 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel061[17][0];
  arg18 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel061[18][0];
  arg19 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel061[19][0];
  arg20 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel061[20][0];
  arg21 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel061[21][0];
  arg22 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel061[22][0];
  arg23 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel061[23][0];
  arg24 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel061[24][0];
  arg25 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel061[25][0];
  arg26 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel061[26][0];
  arg27 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel061[27][0];
  arg28 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel061[28][0];
  arg29 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel061[29][0];
  arg30 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel061[30][0];
  arg31 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel061[31][0];
  arg32 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel061[32][0];
  arg33 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel061[33][0];
  arg34 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel061[34][0];

  if (idx_x < size0 && idx_y < size1) {
    const ACC<double> argp0(dims_opensbliblock00Kernel061[0][0], arg0);
    const ACC<double> argp1(dims_opensbliblock00Kernel061[1][0], arg1);
    const ACC<double> argp2(dims_opensbliblock00Kernel061[2][0], arg2);
    const ACC<double> argp3(dims_opensbliblock00Kernel061[3][0], arg3);
    const ACC<double> argp4(dims_opensbliblock00Kernel061[4][0], arg4);
    const ACC<double> argp5(dims_opensbliblock00Kernel061[5][0], arg5);
    const ACC<double> argp6(dims_opensbliblock00Kernel061[6][0], arg6);
    const ACC<double> argp7(dims_opensbliblock00Kernel061[7][0], arg7);
    const ACC<double> argp8(dims_opensbliblock00Kernel061[8][0], arg8);
    const ACC<double> argp9(dims_opensbliblock00Kernel061[9][0], arg9);
    const ACC<double> argp10(dims_opensbliblock00Kernel061[10][0], arg10);
    const ACC<double> argp11(dims_opensbliblock00Kernel061[11][0], arg11);
    const ACC<double> argp12(dims_opensbliblock00Kernel061[12][0], arg12);
    const ACC<double> argp13(dims_opensbliblock00Kernel061[13][0], arg13);
    const ACC<double> argp14(dims_opensbliblock00Kernel061[14][0], arg14);
    const ACC<double> argp15(dims_opensbliblock00Kernel061[15][0], arg15);
    const ACC<double> argp16(dims_opensbliblock00Kernel061[16][0], arg16);
    const ACC<double> argp17(dims_opensbliblock00Kernel061[17][0], arg17);
    const ACC<double> argp18(dims_opensbliblock00Kernel061[18][0], arg18);
    const ACC<double> argp19(dims_opensbliblock00Kernel061[19][0], arg19);
    const ACC<double> argp20(dims_opensbliblock00Kernel061[20][0], arg20);
    const ACC<double> argp21(dims_opensbliblock00Kernel061[21][0], arg21);
    const ACC<double> argp22(dims_opensbliblock00Kernel061[22][0], arg22);
    const ACC<double> argp23(dims_opensbliblock00Kernel061[23][0], arg23);
    const ACC<double> argp24(dims_opensbliblock00Kernel061[24][0], arg24);
    const ACC<double> argp25(dims_opensbliblock00Kernel061[25][0], arg25);
    const ACC<double> argp26(dims_opensbliblock00Kernel061[26][0], arg26);
    const ACC<double> argp27(dims_opensbliblock00Kernel061[27][0], arg27);
    const ACC<double> argp28(dims_opensbliblock00Kernel061[28][0], arg28);
    const ACC<double> argp29(dims_opensbliblock00Kernel061[29][0], arg29);
    const ACC<double> argp30(dims_opensbliblock00Kernel061[30][0], arg30);
    const ACC<double> argp31(dims_opensbliblock00Kernel061[31][0], arg31);
    ACC<double> argp32(dims_opensbliblock00Kernel061[32][0], arg32);
    ACC<double> argp33(dims_opensbliblock00Kernel061[33][0], arg33);
    ACC<double> argp34(dims_opensbliblock00Kernel061[34][0], arg34);
    opensbliblock00Kernel061_gpu(argp0, argp1, argp2, argp3,
                   argp4, argp5, argp6, argp7, argp8,
                   argp9, argp10, argp11, argp12, argp13,
                   argp14, argp15, argp16, argp17, argp18,
                   argp19, argp20, argp21, argp22, argp23,
                   argp24, argp25, argp26, argp27, argp28,
                   argp29, argp30, argp31, argp32, argp33,
                   argp34);
  }

}

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel061(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7, ops_arg arg8,
 ops_arg arg9, ops_arg arg10, ops_arg arg11, ops_arg arg12, ops_arg arg13,
 ops_arg arg14, ops_arg arg15, ops_arg arg16, ops_arg arg17, ops_arg arg18,
 ops_arg arg19, ops_arg arg20, ops_arg arg21, ops_arg arg22, ops_arg arg23,
 ops_arg arg24, ops_arg arg25, ops_arg arg26, ops_arg arg27, ops_arg arg28,
 ops_arg arg29, ops_arg arg30, ops_arg arg31, ops_arg arg32, ops_arg arg33,
 ops_arg arg34) {
#else
void ops_par_loop_opensbliblock00Kernel061_execute(ops_kernel_descriptor *desc) {
  int dim = desc->dim;
  #if OPS_MPI
  ops_block block = desc->block;
  #endif
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  ops_arg arg9 = desc->args[9];
  ops_arg arg10 = desc->args[10];
  ops_arg arg11 = desc->args[11];
  ops_arg arg12 = desc->args[12];
  ops_arg arg13 = desc->args[13];
  ops_arg arg14 = desc->args[14];
  ops_arg arg15 = desc->args[15];
  ops_arg arg16 = desc->args[16];
  ops_arg arg17 = desc->args[17];
  ops_arg arg18 = desc->args[18];
  ops_arg arg19 = desc->args[19];
  ops_arg arg20 = desc->args[20];
  ops_arg arg21 = desc->args[21];
  ops_arg arg22 = desc->args[22];
  ops_arg arg23 = desc->args[23];
  ops_arg arg24 = desc->args[24];
  ops_arg arg25 = desc->args[25];
  ops_arg arg26 = desc->args[26];
  ops_arg arg27 = desc->args[27];
  ops_arg arg28 = desc->args[28];
  ops_arg arg29 = desc->args[29];
  ops_arg arg30 = desc->args[30];
  ops_arg arg31 = desc->args[31];
  ops_arg arg32 = desc->args[32];
  ops_arg arg33 = desc->args[33];
  ops_arg arg34 = desc->args[34];
  #endif

  //Timing
  double t1,t2,c1,c2;

  ops_arg args[35] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34};


  #if CHECKPOINTING && !OPS_LAZY
  if (!ops_checkpointing_before(args,35,range,51)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,51,"opensbliblock00Kernel061");
    block->instance->OPS_kernels[51].count++;
    ops_timers_core(&c1,&t1);
  }

  //compute locally allocated range for the sub-block
  int start[2];
  int end[2];
  #if OPS_MPI && !OPS_LAZY
  sub_block_list sb = OPS_sub_block_list[block->index];
  #endif //OPS_MPI

  #ifdef OPS_MPI
  int arg_idx[2];
  #endif
  #ifdef OPS_MPI
  if (compute_ranges(args, 35,block, range, start, end, arg_idx) < 0) return;
  #else //OPS_MPI
  for ( int n=0; n<2; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #endif
  int xdim0 = args[0].dat->size[0];
  int xdim1 = args[1].dat->size[0];
  int xdim2 = args[2].dat->size[0];
  int xdim3 = args[3].dat->size[0];
  int xdim4 = args[4].dat->size[0];
  int xdim5 = args[5].dat->size[0];
  int xdim6 = args[6].dat->size[0];
  int xdim7 = args[7].dat->size[0];
  int xdim8 = args[8].dat->size[0];
  int xdim9 = args[9].dat->size[0];
  int xdim10 = args[10].dat->size[0];
  int xdim11 = args[11].dat->size[0];
  int xdim12 = args[12].dat->size[0];
  int xdim13 = args[13].dat->size[0];
  int xdim14 = args[14].dat->size[0];
  int xdim15 = args[15].dat->size[0];
  int xdim16 = args[16].dat->size[0];
  int xdim17 = args[17].dat->size[0];
  int xdim18 = args[18].dat->size[0];
  int xdim19 = args[19].dat->size[0];
  int xdim20 = args[20].dat->size[0];
  int xdim21 = args[21].dat->size[0];
  int xdim22 = args[22].dat->size[0];
  int xdim23 = args[23].dat->size[0];
  int xdim24 = args[24].dat->size[0];
  int xdim25 = args[25].dat->size[0];
  int xdim26 = args[26].dat->size[0];
  int xdim27 = args[27].dat->size[0];
  int xdim28 = args[28].dat->size[0];
  int xdim29 = args[29].dat->size[0];
  int xdim30 = args[30].dat->size[0];
  int xdim31 = args[31].dat->size[0];
  int xdim32 = args[32].dat->size[0];
  int xdim33 = args[33].dat->size[0];
  int xdim34 = args[34].dat->size[0];

  if (xdim0 != dims_opensbliblock00Kernel061_h[0][0] || xdim1 != dims_opensbliblock00Kernel061_h[1][0] || xdim2 != dims_opensbliblock00Kernel061_h[2][0] || xdim3 != dims_opensbliblock00Kernel061_h[3][0] || xdim4 != dims_opensbliblock00Kernel061_h[4][0] || xdim5 != dims_opensbliblock00Kernel061_h[5][0] || xdim6 != dims_opensbliblock00Kernel061_h[6][0] || xdim7 != dims_opensbliblock00Kernel061_h[7][0] || xdim8 != dims_opensbliblock00Kernel061_h[8][0] || xdim9 != dims_opensbliblock00Kernel061_h[9][0] || xdim10 != dims_opensbliblock00Kernel061_h[10][0] || xdim11 != dims_opensbliblock00Kernel061_h[11][0] || xdim12 != dims_opensbliblock00Kernel061_h[12][0] || xdim13 != dims_opensbliblock00Kernel061_h[13][0] || xdim14 != dims_opensbliblock00Kernel061_h[14][0] || xdim15 != dims_opensbliblock00Kernel061_h[15][0] || xdim16 != dims_opensbliblock00Kernel061_h[16][0] || xdim17 != dims_opensbliblock00Kernel061_h[17][0] || xdim18 != dims_opensbliblock00Kernel061_h[18][0] || xdim19 != dims_opensbliblock00Kernel061_h[19][0] || xdim20 != dims_opensbliblock00Kernel061_h[20][0] || xdim21 != dims_opensbliblock00Kernel061_h[21][0] || xdim22 != dims_opensbliblock00Kernel061_h[22][0] || xdim23 != dims_opensbliblock00Kernel061_h[23][0] || xdim24 != dims_opensbliblock00Kernel061_h[24][0] || xdim25 != dims_opensbliblock00Kernel061_h[25][0] || xdim26 != dims_opensbliblock00Kernel061_h[26][0] || xdim27 != dims_opensbliblock00Kernel061_h[27][0] || xdim28 != dims_opensbliblock00Kernel061_h[28][0] || xdim29 != dims_opensbliblock00Kernel061_h[29][0] || xdim30 != dims_opensbliblock00Kernel061_h[30][0] || xdim31 != dims_opensbliblock00Kernel061_h[31][0] || xdim32 != dims_opensbliblock00Kernel061_h[32][0] || xdim33 != dims_opensbliblock00Kernel061_h[33][0] || xdim34 != dims_opensbliblock00Kernel061_h[34][0]) {
    dims_opensbliblock00Kernel061_h[0][0] = xdim0;
    dims_opensbliblock00Kernel061_h[1][0] = xdim1;
    dims_opensbliblock00Kernel061_h[2][0] = xdim2;
    dims_opensbliblock00Kernel061_h[3][0] = xdim3;
    dims_opensbliblock00Kernel061_h[4][0] = xdim4;
    dims_opensbliblock00Kernel061_h[5][0] = xdim5;
    dims_opensbliblock00Kernel061_h[6][0] = xdim6;
    dims_opensbliblock00Kernel061_h[7][0] = xdim7;
    dims_opensbliblock00Kernel061_h[8][0] = xdim8;
    dims_opensbliblock00Kernel061_h[9][0] = xdim9;
    dims_opensbliblock00Kernel061_h[10][0] = xdim10;
    dims_opensbliblock00Kernel061_h[11][0] = xdim11;
    dims_opensbliblock00Kernel061_h[12][0] = xdim12;
    dims_opensbliblock00Kernel061_h[13][0] = xdim13;
    dims_opensbliblock00Kernel061_h[14][0] = xdim14;
    dims_opensbliblock00Kernel061_h[15][0] = xdim15;
    dims_opensbliblock00Kernel061_h[16][0] = xdim16;
    dims_opensbliblock00Kernel061_h[17][0] = xdim17;
    dims_opensbliblock00Kernel061_h[18][0] = xdim18;
    dims_opensbliblock00Kernel061_h[19][0] = xdim19;
    dims_opensbliblock00Kernel061_h[20][0] = xdim20;
    dims_opensbliblock00Kernel061_h[21][0] = xdim21;
    dims_opensbliblock00Kernel061_h[22][0] = xdim22;
    dims_opensbliblock00Kernel061_h[23][0] = xdim23;
    dims_opensbliblock00Kernel061_h[24][0] = xdim24;
    dims_opensbliblock00Kernel061_h[25][0] = xdim25;
    dims_opensbliblock00Kernel061_h[26][0] = xdim26;
    dims_opensbliblock00Kernel061_h[27][0] = xdim27;
    dims_opensbliblock00Kernel061_h[28][0] = xdim28;
    dims_opensbliblock00Kernel061_h[29][0] = xdim29;
    dims_opensbliblock00Kernel061_h[30][0] = xdim30;
    dims_opensbliblock00Kernel061_h[31][0] = xdim31;
    dims_opensbliblock00Kernel061_h[32][0] = xdim32;
    dims_opensbliblock00Kernel061_h[33][0] = xdim33;
    dims_opensbliblock00Kernel061_h[34][0] = xdim34;
    hipSafeCall(block->instance->ostream(), hipMemcpyToSymbol(HIP_SYMBOL(dims_opensbliblock00Kernel061), dims_opensbliblock00Kernel061_h, sizeof(dims_opensbliblock00Kernel061)));
  }



  int x_size = MAX(0,end[0]-start[0]);
  int y_size = MAX(0,end[1]-start[1]);

  dim3 grid( (x_size-1)/block->instance->OPS_block_size_x+ 1, (y_size-1)/block->instance->OPS_block_size_y + 1, 1);
  dim3 tblock(block->instance->OPS_block_size_x,block->instance->OPS_block_size_y,block->instance->OPS_block_size_z);



  long long int dat0 = (block->instance->OPS_soa ? args[0].dat->type_size : args[0].dat->elem_size);
  long long int dat1 = (block->instance->OPS_soa ? args[1].dat->type_size : args[1].dat->elem_size);
  long long int dat2 = (block->instance->OPS_soa ? args[2].dat->type_size : args[2].dat->elem_size);
  long long int dat3 = (block->instance->OPS_soa ? args[3].dat->type_size : args[3].dat->elem_size);
  long long int dat4 = (block->instance->OPS_soa ? args[4].dat->type_size : args[4].dat->elem_size);
  long long int dat5 = (block->instance->OPS_soa ? args[5].dat->type_size : args[5].dat->elem_size);
  long long int dat6 = (block->instance->OPS_soa ? args[6].dat->type_size : args[6].dat->elem_size);
  long long int dat7 = (block->instance->OPS_soa ? args[7].dat->type_size : args[7].dat->elem_size);
  long long int dat8 = (block->instance->OPS_soa ? args[8].dat->type_size : args[8].dat->elem_size);
  long long int dat9 = (block->instance->OPS_soa ? args[9].dat->type_size : args[9].dat->elem_size);
  long long int dat10 = (block->instance->OPS_soa ? args[10].dat->type_size : args[10].dat->elem_size);
  long long int dat11 = (block->instance->OPS_soa ? args[11].dat->type_size : args[11].dat->elem_size);
  long long int dat12 = (block->instance->OPS_soa ? args[12].dat->type_size : args[12].dat->elem_size);
  long long int dat13 = (block->instance->OPS_soa ? args[13].dat->type_size : args[13].dat->elem_size);
  long long int dat14 = (block->instance->OPS_soa ? args[14].dat->type_size : args[14].dat->elem_size);
  long long int dat15 = (block->instance->OPS_soa ? args[15].dat->type_size : args[15].dat->elem_size);
  long long int dat16 = (block->instance->OPS_soa ? args[16].dat->type_size : args[16].dat->elem_size);
  long long int dat17 = (block->instance->OPS_soa ? args[17].dat->type_size : args[17].dat->elem_size);
  long long int dat18 = (block->instance->OPS_soa ? args[18].dat->type_size : args[18].dat->elem_size);
  long long int dat19 = (block->instance->OPS_soa ? args[19].dat->type_size : args[19].dat->elem_size);
  long long int dat20 = (block->instance->OPS_soa ? args[20].dat->type_size : args[20].dat->elem_size);
  long long int dat21 = (block->instance->OPS_soa ? args[21].dat->type_size : args[21].dat->elem_size);
  long long int dat22 = (block->instance->OPS_soa ? args[22].dat->type_size : args[22].dat->elem_size);
  long long int dat23 = (block->instance->OPS_soa ? args[23].dat->type_size : args[23].dat->elem_size);
  long long int dat24 = (block->instance->OPS_soa ? args[24].dat->type_size : args[24].dat->elem_size);
  long long int dat25 = (block->instance->OPS_soa ? args[25].dat->type_size : args[25].dat->elem_size);
  long long int dat26 = (block->instance->OPS_soa ? args[26].dat->type_size : args[26].dat->elem_size);
  long long int dat27 = (block->instance->OPS_soa ? args[27].dat->type_size : args[27].dat->elem_size);
  long long int dat28 = (block->instance->OPS_soa ? args[28].dat->type_size : args[28].dat->elem_size);
  long long int dat29 = (block->instance->OPS_soa ? args[29].dat->type_size : args[29].dat->elem_size);
  long long int dat30 = (block->instance->OPS_soa ? args[30].dat->type_size : args[30].dat->elem_size);
  long long int dat31 = (block->instance->OPS_soa ? args[31].dat->type_size : args[31].dat->elem_size);
  long long int dat32 = (block->instance->OPS_soa ? args[32].dat->type_size : args[32].dat->elem_size);
  long long int dat33 = (block->instance->OPS_soa ? args[33].dat->type_size : args[33].dat->elem_size);
  long long int dat34 = (block->instance->OPS_soa ? args[34].dat->type_size : args[34].dat->elem_size);

  char *p_a[35];

  //set up initial pointers
  long long int base0 = args[0].dat->base_offset + 
           dat0 * 1 * (start[0] * args[0].stencil->stride[0]);
  base0 = base0+ dat0 *
    args[0].dat->size[0] *
    (start[1] * args[0].stencil->stride[1]);
  p_a[0] = (char *)args[0].data_d + base0;

  long long int base1 = args[1].dat->base_offset + 
           dat1 * 1 * (start[0] * args[1].stencil->stride[0]);
  base1 = base1+ dat1 *
    args[1].dat->size[0] *
    (start[1] * args[1].stencil->stride[1]);
  p_a[1] = (char *)args[1].data_d + base1;

  long long int base2 = args[2].dat->base_offset + 
           dat2 * 1 * (start[0] * args[2].stencil->stride[0]);
  base2 = base2+ dat2 *
    args[2].dat->size[0] *
    (start[1] * args[2].stencil->stride[1]);
  p_a[2] = (char *)args[2].data_d + base2;

  long long int base3 = args[3].dat->base_offset + 
           dat3 * 1 * (start[0] * args[3].stencil->stride[0]);
  base3 = base3+ dat3 *
    args[3].dat->size[0] *
    (start[1] * args[3].stencil->stride[1]);
  p_a[3] = (char *)args[3].data_d + base3;

  long long int base4 = args[4].dat->base_offset + 
           dat4 * 1 * (start[0] * args[4].stencil->stride[0]);
  base4 = base4+ dat4 *
    args[4].dat->size[0] *
    (start[1] * args[4].stencil->stride[1]);
  p_a[4] = (char *)args[4].data_d + base4;

  long long int base5 = args[5].dat->base_offset + 
           dat5 * 1 * (start[0] * args[5].stencil->stride[0]);
  base5 = base5+ dat5 *
    args[5].dat->size[0] *
    (start[1] * args[5].stencil->stride[1]);
  p_a[5] = (char *)args[5].data_d + base5;

  long long int base6 = args[6].dat->base_offset + 
           dat6 * 1 * (start[0] * args[6].stencil->stride[0]);
  base6 = base6+ dat6 *
    args[6].dat->size[0] *
    (start[1] * args[6].stencil->stride[1]);
  p_a[6] = (char *)args[6].data_d + base6;

  long long int base7 = args[7].dat->base_offset + 
           dat7 * 1 * (start[0] * args[7].stencil->stride[0]);
  base7 = base7+ dat7 *
    args[7].dat->size[0] *
    (start[1] * args[7].stencil->stride[1]);
  p_a[7] = (char *)args[7].data_d + base7;

  long long int base8 = args[8].dat->base_offset + 
           dat8 * 1 * (start[0] * args[8].stencil->stride[0]);
  base8 = base8+ dat8 *
    args[8].dat->size[0] *
    (start[1] * args[8].stencil->stride[1]);
  p_a[8] = (char *)args[8].data_d + base8;

  long long int base9 = args[9].dat->base_offset + 
           dat9 * 1 * (start[0] * args[9].stencil->stride[0]);
  base9 = base9+ dat9 *
    args[9].dat->size[0] *
    (start[1] * args[9].stencil->stride[1]);
  p_a[9] = (char *)args[9].data_d + base9;

  long long int base10 = args[10].dat->base_offset + 
           dat10 * 1 * (start[0] * args[10].stencil->stride[0]);
  base10 = base10+ dat10 *
    args[10].dat->size[0] *
    (start[1] * args[10].stencil->stride[1]);
  p_a[10] = (char *)args[10].data_d + base10;

  long long int base11 = args[11].dat->base_offset + 
           dat11 * 1 * (start[0] * args[11].stencil->stride[0]);
  base11 = base11+ dat11 *
    args[11].dat->size[0] *
    (start[1] * args[11].stencil->stride[1]);
  p_a[11] = (char *)args[11].data_d + base11;

  long long int base12 = args[12].dat->base_offset + 
           dat12 * 1 * (start[0] * args[12].stencil->stride[0]);
  base12 = base12+ dat12 *
    args[12].dat->size[0] *
    (start[1] * args[12].stencil->stride[1]);
  p_a[12] = (char *)args[12].data_d + base12;

  long long int base13 = args[13].dat->base_offset + 
           dat13 * 1 * (start[0] * args[13].stencil->stride[0]);
  base13 = base13+ dat13 *
    args[13].dat->size[0] *
    (start[1] * args[13].stencil->stride[1]);
  p_a[13] = (char *)args[13].data_d + base13;

  long long int base14 = args[14].dat->base_offset + 
           dat14 * 1 * (start[0] * args[14].stencil->stride[0]);
  base14 = base14+ dat14 *
    args[14].dat->size[0] *
    (start[1] * args[14].stencil->stride[1]);
  p_a[14] = (char *)args[14].data_d + base14;

  long long int base15 = args[15].dat->base_offset + 
           dat15 * 1 * (start[0] * args[15].stencil->stride[0]);
  base15 = base15+ dat15 *
    args[15].dat->size[0] *
    (start[1] * args[15].stencil->stride[1]);
  p_a[15] = (char *)args[15].data_d + base15;

  long long int base16 = args[16].dat->base_offset + 
           dat16 * 1 * (start[0] * args[16].stencil->stride[0]);
  base16 = base16+ dat16 *
    args[16].dat->size[0] *
    (start[1] * args[16].stencil->stride[1]);
  p_a[16] = (char *)args[16].data_d + base16;

  long long int base17 = args[17].dat->base_offset + 
           dat17 * 1 * (start[0] * args[17].stencil->stride[0]);
  base17 = base17+ dat17 *
    args[17].dat->size[0] *
    (start[1] * args[17].stencil->stride[1]);
  p_a[17] = (char *)args[17].data_d + base17;

  long long int base18 = args[18].dat->base_offset + 
           dat18 * 1 * (start[0] * args[18].stencil->stride[0]);
  base18 = base18+ dat18 *
    args[18].dat->size[0] *
    (start[1] * args[18].stencil->stride[1]);
  p_a[18] = (char *)args[18].data_d + base18;

  long long int base19 = args[19].dat->base_offset + 
           dat19 * 1 * (start[0] * args[19].stencil->stride[0]);
  base19 = base19+ dat19 *
    args[19].dat->size[0] *
    (start[1] * args[19].stencil->stride[1]);
  p_a[19] = (char *)args[19].data_d + base19;

  long long int base20 = args[20].dat->base_offset + 
           dat20 * 1 * (start[0] * args[20].stencil->stride[0]);
  base20 = base20+ dat20 *
    args[20].dat->size[0] *
    (start[1] * args[20].stencil->stride[1]);
  p_a[20] = (char *)args[20].data_d + base20;

  long long int base21 = args[21].dat->base_offset + 
           dat21 * 1 * (start[0] * args[21].stencil->stride[0]);
  base21 = base21+ dat21 *
    args[21].dat->size[0] *
    (start[1] * args[21].stencil->stride[1]);
  p_a[21] = (char *)args[21].data_d + base21;

  long long int base22 = args[22].dat->base_offset + 
           dat22 * 1 * (start[0] * args[22].stencil->stride[0]);
  base22 = base22+ dat22 *
    args[22].dat->size[0] *
    (start[1] * args[22].stencil->stride[1]);
  p_a[22] = (char *)args[22].data_d + base22;

  long long int base23 = args[23].dat->base_offset + 
           dat23 * 1 * (start[0] * args[23].stencil->stride[0]);
  base23 = base23+ dat23 *
    args[23].dat->size[0] *
    (start[1] * args[23].stencil->stride[1]);
  p_a[23] = (char *)args[23].data_d + base23;

  long long int base24 = args[24].dat->base_offset + 
           dat24 * 1 * (start[0] * args[24].stencil->stride[0]);
  base24 = base24+ dat24 *
    args[24].dat->size[0] *
    (start[1] * args[24].stencil->stride[1]);
  p_a[24] = (char *)args[24].data_d + base24;

  long long int base25 = args[25].dat->base_offset + 
           dat25 * 1 * (start[0] * args[25].stencil->stride[0]);
  base25 = base25+ dat25 *
    args[25].dat->size[0] *
    (start[1] * args[25].stencil->stride[1]);
  p_a[25] = (char *)args[25].data_d + base25;

  long long int base26 = args[26].dat->base_offset + 
           dat26 * 1 * (start[0] * args[26].stencil->stride[0]);
  base26 = base26+ dat26 *
    args[26].dat->size[0] *
    (start[1] * args[26].stencil->stride[1]);
  p_a[26] = (char *)args[26].data_d + base26;

  long long int base27 = args[27].dat->base_offset + 
           dat27 * 1 * (start[0] * args[27].stencil->stride[0]);
  base27 = base27+ dat27 *
    args[27].dat->size[0] *
    (start[1] * args[27].stencil->stride[1]);
  p_a[27] = (char *)args[27].data_d + base27;

  long long int base28 = args[28].dat->base_offset + 
           dat28 * 1 * (start[0] * args[28].stencil->stride[0]);
  base28 = base28+ dat28 *
    args[28].dat->size[0] *
    (start[1] * args[28].stencil->stride[1]);
  p_a[28] = (char *)args[28].data_d + base28;

  long long int base29 = args[29].dat->base_offset + 
           dat29 * 1 * (start[0] * args[29].stencil->stride[0]);
  base29 = base29+ dat29 *
    args[29].dat->size[0] *
    (start[1] * args[29].stencil->stride[1]);
  p_a[29] = (char *)args[29].data_d + base29;

  long long int base30 = args[30].dat->base_offset + 
           dat30 * 1 * (start[0] * args[30].stencil->stride[0]);
  base30 = base30+ dat30 *
    args[30].dat->size[0] *
    (start[1] * args[30].stencil->stride[1]);
  p_a[30] = (char *)args[30].data_d + base30;

  long long int base31 = args[31].dat->base_offset + 
           dat31 * 1 * (start[0] * args[31].stencil->stride[0]);
  base31 = base31+ dat31 *
    args[31].dat->size[0] *
    (start[1] * args[31].stencil->stride[1]);
  p_a[31] = (char *)args[31].data_d + base31;

  long long int base32 = args[32].dat->base_offset + 
           dat32 * 1 * (start[0] * args[32].stencil->stride[0]);
  base32 = base32+ dat32 *
    args[32].dat->size[0] *
    (start[1] * args[32].stencil->stride[1]);
  p_a[32] = (char *)args[32].data_d + base32;

  long long int base33 = args[33].dat->base_offset + 
           dat33 * 1 * (start[0] * args[33].stencil->stride[0]);
  base33 = base33+ dat33 *
    args[33].dat->size[0] *
    (start[1] * args[33].stencil->stride[1]);
  p_a[33] = (char *)args[33].data_d + base33;

  long long int base34 = args[34].dat->base_offset + 
           dat34 * 1 * (start[0] * args[34].stencil->stride[0]);
  base34 = base34+ dat34 *
    args[34].dat->size[0] *
    (start[1] * args[34].stencil->stride[1]);
  p_a[34] = (char *)args[34].data_d + base34;


  #ifndef OPS_LAZY
  ops_H_D_exchanges_device(args, 35);
  ops_halo_exchanges(args,35,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[51].mpi_time += t2-t1;
  }


  //call kernel wrapper function, passing in pointers to data
  if (x_size > 0 && y_size > 0)
    hipLaunchKernelGGL(ops_opensbliblock00Kernel061,grid ,tblock ,0 ,0 , (double *)p_a[0], (double *)p_a[1],
         (double *)p_a[2], (double *)p_a[3],
         (double *)p_a[4], (double *)p_a[5],
         (double *)p_a[6], (double *)p_a[7],
         (double *)p_a[8], (double *)p_a[9],
         (double *)p_a[10], (double *)p_a[11],
         (double *)p_a[12], (double *)p_a[13],
         (double *)p_a[14], (double *)p_a[15],
         (double *)p_a[16], (double *)p_a[17],
         (double *)p_a[18], (double *)p_a[19],
         (double *)p_a[20], (double *)p_a[21],
         (double *)p_a[22], (double *)p_a[23],
         (double *)p_a[24], (double *)p_a[25],
         (double *)p_a[26], (double *)p_a[27],
         (double *)p_a[28], (double *)p_a[29],
         (double *)p_a[30], (double *)p_a[31],
         (double *)p_a[32], (double *)p_a[33],
         (double *)p_a[34],x_size, y_size);

  hipSafeCall(block->instance->ostream(), hipGetLastError());

  if (block->instance->OPS_diags>1) {
    hipSafeCall(block->instance->ostream(), hipDeviceSynchronize());
    ops_timers_core(&c1,&t1);
    block->instance->OPS_kernels[51].time += t1-t2;
  }

  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 35);
  ops_set_halo_dirtybit3(&args[32],range);
  ops_set_halo_dirtybit3(&args[33],range);
  ops_set_halo_dirtybit3(&args[34],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[51].mpi_time += t2-t1;
    block->instance->OPS_kernels[51].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[51].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[51].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[51].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[51].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[51].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[51].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[51].transfer += ops_compute_transfer(dim, start, end, &arg7);
    block->instance->OPS_kernels[51].transfer += ops_compute_transfer(dim, start, end, &arg8);
    block->instance->OPS_kernels[51].transfer += ops_compute_transfer(dim, start, end, &arg9);
    block->instance->OPS_kernels[51].transfer += ops_compute_transfer(dim, start, end, &arg10);
    block->instance->OPS_kernels[51].transfer += ops_compute_transfer(dim, start, end, &arg11);
    block->instance->OPS_kernels[51].transfer += ops_compute_transfer(dim, start, end, &arg12);
    block->instance->OPS_kernels[51].transfer += ops_compute_transfer(dim, start, end, &arg13);
    block->instance->OPS_kernels[51].transfer += ops_compute_transfer(dim, start, end, &arg14);
    block->instance->OPS_kernels[51].transfer += ops_compute_transfer(dim, start, end, &arg15);
    block->instance->OPS_kernels[51].transfer += ops_compute_transfer(dim, start, end, &arg16);
    block->instance->OPS_kernels[51].transfer += ops_compute_transfer(dim, start, end, &arg17);
    block->instance->OPS_kernels[51].transfer += ops_compute_transfer(dim, start, end, &arg18);
    block->instance->OPS_kernels[51].transfer += ops_compute_transfer(dim, start, end, &arg19);
    block->instance->OPS_kernels[51].transfer += ops_compute_transfer(dim, start, end, &arg20);
    block->instance->OPS_kernels[51].transfer += ops_compute_transfer(dim, start, end, &arg21);
    block->instance->OPS_kernels[51].transfer += ops_compute_transfer(dim, start, end, &arg22);
    block->instance->OPS_kernels[51].transfer += ops_compute_transfer(dim, start, end, &arg23);
    block->instance->OPS_kernels[51].transfer += ops_compute_transfer(dim, start, end, &arg24);
    block->instance->OPS_kernels[51].transfer += ops_compute_transfer(dim, start, end, &arg25);
    block->instance->OPS_kernels[51].transfer += ops_compute_transfer(dim, start, end, &arg26);
    block->instance->OPS_kernels[51].transfer += ops_compute_transfer(dim, start, end, &arg27);
    block->instance->OPS_kernels[51].transfer += ops_compute_transfer(dim, start, end, &arg28);
    block->instance->OPS_kernels[51].transfer += ops_compute_transfer(dim, start, end, &arg29);
    block->instance->OPS_kernels[51].transfer += ops_compute_transfer(dim, start, end, &arg30);
    block->instance->OPS_kernels[51].transfer += ops_compute_transfer(dim, start, end, &arg31);
    block->instance->OPS_kernels[51].transfer += ops_compute_transfer(dim, start, end, &arg32);
    block->instance->OPS_kernels[51].transfer += ops_compute_transfer(dim, start, end, &arg33);
    block->instance->OPS_kernels[51].transfer += ops_compute_transfer(dim, start, end, &arg34);
  }
}

#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel061(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3, ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7, ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11, ops_arg arg12, ops_arg arg13, ops_arg arg14, ops_arg arg15, ops_arg arg16, ops_arg arg17, ops_arg arg18, ops_arg arg19, ops_arg arg20, ops_arg arg21, ops_arg arg22, ops_arg arg23, ops_arg arg24, ops_arg arg25, ops_arg arg26, ops_arg arg27, ops_arg arg28, ops_arg arg29, ops_arg arg30, ops_arg arg31, ops_arg arg32, ops_arg arg33, ops_arg arg34) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)calloc(1,sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 1;
  desc->index = 51;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 51;
  for ( int i=0; i<4; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 35;
  desc->args = (ops_arg*)malloc(35*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg2.dat->index;
  desc->args[3] = arg3;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg3.dat->index;
  desc->args[4] = arg4;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg4.dat->index;
  desc->args[5] = arg5;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg5.dat->index;
  desc->args[6] = arg6;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg6.dat->index;
  desc->args[7] = arg7;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg7.dat->index;
  desc->args[8] = arg8;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg8.dat->index;
  desc->args[9] = arg9;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg9.dat->index;
  desc->args[10] = arg10;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg10.dat->index;
  desc->args[11] = arg11;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg11.dat->index;
  desc->args[12] = arg12;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg12.dat->index;
  desc->args[13] = arg13;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg13.dat->index;
  desc->args[14] = arg14;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg14.dat->index;
  desc->args[15] = arg15;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg15.dat->index;
  desc->args[16] = arg16;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg16.dat->index;
  desc->args[17] = arg17;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg17.dat->index;
  desc->args[18] = arg18;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg18.dat->index;
  desc->args[19] = arg19;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg19.dat->index;
  desc->args[20] = arg20;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg20.dat->index;
  desc->args[21] = arg21;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg21.dat->index;
  desc->args[22] = arg22;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg22.dat->index;
  desc->args[23] = arg23;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg23.dat->index;
  desc->args[24] = arg24;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg24.dat->index;
  desc->args[25] = arg25;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg25.dat->index;
  desc->args[26] = arg26;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg26.dat->index;
  desc->args[27] = arg27;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg27.dat->index;
  desc->args[28] = arg28;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg28.dat->index;
  desc->args[29] = arg29;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg29.dat->index;
  desc->args[30] = arg30;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg30.dat->index;
  desc->args[31] = arg31;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg31.dat->index;
  desc->args[32] = arg32;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg32.dat->index;
  desc->args[33] = arg33;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg33.dat->index;
  desc->args[34] = arg34;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg34.dat->index;
  desc->function = ops_par_loop_opensbliblock00Kernel061_execute;
  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,51,"opensbliblock00Kernel061");
  }
  ops_enqueue_kernel(desc);
}
#endif
