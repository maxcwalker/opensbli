//
// auto-generated by ops.py
//
__constant__ int dims_opensbliblock00Kernel049 [7][1];
static int dims_opensbliblock00Kernel049_h [7][1] = {{0}};

//user function
__device__

 void opensbliblock00Kernel049_gpu(ACC<double> &rhou0_B0,
  ACC<double> &rho_B0,
  ACC<double> &x0_B0,
  ACC<double> &rhou1_B0,
  ACC<double> &rhoE_B0,
  ACC<double> &x1_B0,
  const int *idx)
{
   double T = 0.0;
   double rhou1 = 0.0;
   double rhou0 = 0.0;
   double rho = 0.0;
   x0_B0(0,0) = Delta0block0*idx[0];

    x1_B0(0,0) = Ly*sinh(Delta1block0*b*idx[1])/sinh(b) + 0.5*tramp*(Delta0block0*idx[0] + (0.5*Delta0block0 +
      Ly*aramp*sinh(Delta1block0*b*idx[1])/sinh(b))*(-log(cosh(xramp/(0.5*Delta0block0 +
      Ly*aramp*sinh(Delta1block0*b*idx[1])/sinh(b)))) + log(cosh((Delta0block0*idx[0] - xramp)/(0.5*Delta0block0 +
      Ly*aramp*sinh(Delta1block0*b*idx[1])/sinh(b))))));

    rhou0 = ((x1_B0(0,0) < 3.47434743474347) ? (
   2.3555492777611e-22*pow(x1_B0(0,0), 50) -
      2.00935744152354e-21*pow(x1_B0(0,0), 49) + 5.56132977621397e-22*pow(x1_B0(0,0), 48) +
      1.76715088906924e-20*pow(x1_B0(0,0), 47) + 4.27794832987129e-20*pow(x1_B0(0,0), 46) -
      3.04089545826647e-20*pow(x1_B0(0,0), 45) - 5.69010318695979e-19*pow(x1_B0(0,0), 44) -
      2.10089699572831e-18*pow(x1_B0(0,0), 43) - 3.20005903751066e-18*pow(x1_B0(0,0), 42) +
      8.56002881776995e-18*pow(x1_B0(0,0), 41) + 7.78516249047705e-17*pow(x1_B0(0,0), 40) +
      2.86638559964255e-16*pow(x1_B0(0,0), 39) + 5.37598576202624e-16*pow(x1_B0(0,0), 38) -
      6.17393007973971e-16*pow(x1_B0(0,0), 37) - 9.50677069522702e-15*pow(x1_B0(0,0), 36) -
      4.1822231440021e-14*pow(x1_B0(0,0), 35) - 1.03685516151979e-13*pow(x1_B0(0,0), 34) -
      3.79864274570734e-14*pow(x1_B0(0,0), 33) + 1.04940578786992e-12*pow(x1_B0(0,0), 32) +
      5.89366906826062e-12*pow(x1_B0(0,0), 31) + 1.76772429782625e-11*pow(x1_B0(0,0), 30) +
      1.89469495194353e-11*pow(x1_B0(0,0), 29) - 1.19128651698976e-10*pow(x1_B0(0,0), 28) -
      8.29563232382128e-10*pow(x1_B0(0,0), 27) - 2.65168942457028e-9*pow(x1_B0(0,0), 26) -
      2.75186414593423e-9*pow(x1_B0(0,0), 25) + 1.94024691559566e-8*pow(x1_B0(0,0), 24) +
      1.24222622336016e-7*pow(x1_B0(0,0), 23) + 3.23932608424406e-7*pow(x1_B0(0,0), 22) -
      1.10429555878606e-7*pow(x1_B0(0,0), 21) - 4.43734433122466e-6*pow(x1_B0(0,0), 20) -
      1.62564132709003e-5*pow(x1_B0(0,0), 19) - 6.1354732571988e-6*pow(x1_B0(0,0), 18) +
      0.000176987525519087*pow(x1_B0(0,0), 17) + 0.000613828400710496*pow(x1_B0(0,0), 16) -
      0.000526665419777598*pow(x1_B0(0,0), 15) - 0.00843666727267235*pow(x1_B0(0,0), 14) -
      0.00594411137351235*pow(x1_B0(0,0), 13) + 0.0952129739882658*pow(x1_B0(0,0), 12) +
      0.0357543185172109*pow(x1_B0(0,0), 11) - 1.15749221486844*pow(x1_B0(0,0), 10) +
      3.37722054657068*pow(x1_B0(0,0), 9) - 5.1654697631693*pow(x1_B0(0,0), 8) +
      4.91129010741448*pow(x1_B0(0,0), 7) - 3.05403724529565*pow(x1_B0(0,0), 6) +
      1.24982177727222*pow(x1_B0(0,0), 5) - 0.340808475086283*pow(x1_B0(0,0), 4) +
      0.137515271370201*pow(x1_B0(0,0), 3) - 0.00379046822573778*pow(x1_B0(0,0), 2) +
      0.423487432074122*x1_B0(0,0) - 9.41967207151553e-7
)
: (
   0.999999408078923
));

    rhou1 = ((x1_B0(0,0) < 3.47434743474347) ? (
   2.1576554647756e-24*pow(x1_B0(0,0), 50) -
      1.89236971654899e-23*pow(x1_B0(0,0), 49) + 7.69181334189621e-24*pow(x1_B0(0,0), 48) +
      1.70508557930283e-22*pow(x1_B0(0,0), 47) + 3.81787677195739e-22*pow(x1_B0(0,0), 46) -
      4.2602950246167e-22*pow(x1_B0(0,0), 45) - 5.701951447644e-21*pow(x1_B0(0,0), 44) -
      1.95832488013046e-20*pow(x1_B0(0,0), 43) - 2.46383361869256e-20*pow(x1_B0(0,0), 42) +
      1.06166392982356e-19*pow(x1_B0(0,0), 41) + 7.95413538795197e-19*pow(x1_B0(0,0), 40) +
      2.69802948259641e-18*pow(x1_B0(0,0), 39) + 4.2441030519992e-18*pow(x1_B0(0,0), 38) -
      1.02493206120451e-17*pow(x1_B0(0,0), 37) - 1.03115993611505e-16*pow(x1_B0(0,0), 36) -
      4.10569601727487e-16*pow(x1_B0(0,0), 35) - 8.90831291175122e-16*pow(x1_B0(0,0), 34) +
      3.31890292562878e-16*pow(x1_B0(0,0), 33) + 1.25484845288117e-14*pow(x1_B0(0,0), 32) +
      6.10502841760137e-14*pow(x1_B0(0,0), 31) + 1.61679245607276e-13*pow(x1_B0(0,0), 30) +
      7.95670170515972e-14*pow(x1_B0(0,0), 29) - 1.58893176488887e-12*pow(x1_B0(0,0), 28) -
      8.98719899571629e-12*pow(x1_B0(0,0), 27) - 2.49618557647004e-11*pow(x1_B0(0,0), 26) -
      1.03415796927838e-11*pow(x1_B0(0,0), 25) + 2.61425094167977e-10*pow(x1_B0(0,0), 24) +
      1.35337138459532e-9*pow(x1_B0(0,0), 23) + 2.89302203645917e-9*pow(x1_B0(0,0), 22) -
      4.20732843390409e-9*pow(x1_B0(0,0), 21) - 5.39312821816524e-8*pow(x1_B0(0,0), 20) -
      1.63186840482375e-7*pow(x1_B0(0,0), 19) + 6.20640928953035e-8*pow(x1_B0(0,0), 18) +
      2.24954058629723e-6*pow(x1_B0(0,0), 17) + 6.186794363468e-6*pow(x1_B0(0,0), 16) -
      1.13934957271094e-5*pow(x1_B0(0,0), 15) - 0.000100760511123402*pow(x1_B0(0,0), 14) -
      1.22892507043693e-5*pow(x1_B0(0,0), 13) + 0.00122012071977175*pow(x1_B0(0,0), 12) -
      0.000174695037124041*pow(x1_B0(0,0), 11) - 0.0144728051769681*pow(x1_B0(0,0), 10) +
      0.0478146724255516*pow(x1_B0(0,0), 9) - 0.0798999852889223*pow(x1_B0(0,0), 8) +
      0.0824513961294015*pow(x1_B0(0,0), 7) - 0.0554884389398171*pow(x1_B0(0,0), 6) +
      0.024436212767697*pow(x1_B0(0,0), 5) - 0.00654597240521947*pow(x1_B0(0,0), 4) +
      0.00117421078362464*pow(x1_B0(0,0), 3) + 0.00108918117998653*pow(x1_B0(0,0), 2) +
      4.14968990285729e-6*x1_B0(0,0) - 3.82450180851277e-8
)
: (
   0.00564964364741575
));

    T = ((x1_B0(0,0) < 3.47434743474347) ? (
   -3.73061876952194e-23*pow(x1_B0(0,0), 50) +
      3.02359004140933e-22*pow(x1_B0(0,0), 49) - 7.07249669257882e-24*pow(x1_B0(0,0), 48) -
      2.53606686749876e-21*pow(x1_B0(0,0), 47) - 7.11708893366916e-21*pow(x1_B0(0,0), 46) +
      2.00313598822224e-22*pow(x1_B0(0,0), 45) + 7.52115337522613e-20*pow(x1_B0(0,0), 44) +
      3.24393929242347e-19*pow(x1_B0(0,0), 43) + 6.59237386827232e-19*pow(x1_B0(0,0), 42) -
      4.86363354044092e-19*pow(x1_B0(0,0), 41) - 9.84138178764639e-18*pow(x1_B0(0,0), 40) -
      4.36436982884742e-17*pow(x1_B0(0,0), 39) - 1.08161915263698e-16*pow(x1_B0(0,0), 38) -
      4.86888191265591e-17*pow(x1_B0(0,0), 37) + 1.01293721678769e-15*pow(x1_B0(0,0), 36) +
      5.85606755194866e-15*pow(x1_B0(0,0), 35) + 1.86796743416999e-14*pow(x1_B0(0,0), 34) +
      2.84082766458035e-14*pow(x1_B0(0,0), 33) - 7.36876583429846e-14*pow(x1_B0(0,0), 32) -
      7.2458403897293e-13*pow(x1_B0(0,0), 31) - 2.8876553711809e-12*pow(x1_B0(0,0), 30) -
      6.23242767688354e-12*pow(x1_B0(0,0), 29) + 2.76991168496541e-12*pow(x1_B0(0,0), 28) +
      8.91073005719208e-11*pow(x1_B0(0,0), 27) + 4.12951994238752e-10*pow(x1_B0(0,0), 26) +
      9.62144378408451e-10*pow(x1_B0(0,0), 25) - 3.19671297599922e-10*pow(x1_B0(0,0), 24) -
      1.30815868835258e-8*pow(x1_B0(0,0), 23) - 5.63174875122123e-8*pow(x1_B0(0,0), 22) -
      9.40870600134967e-8*pow(x1_B0(0,0), 21) + 2.68015550395405e-7*pow(x1_B0(0,0), 20) +
      2.20028500618131e-6*pow(x1_B0(0,0), 19) + 5.26405704077908e-6*pow(x1_B0(0,0), 18) -
      6.87033316645359e-6*pow(x1_B0(0,0), 17) - 8.18097963380289e-5*pow(x1_B0(0,0), 16) -
      0.000150182995287043*pow(x1_B0(0,0), 15) + 0.000546556514231602*pow(x1_B0(0,0), 14) +
      0.00248793100317704*pow(x1_B0(0,0), 13) - 0.00313487325891606*pow(x1_B0(0,0), 12) -
      0.0233427405115097*pow(x1_B0(0,0), 11) + 0.0513779963692559*pow(x1_B0(0,0), 10) +
      0.0387069194356651*pow(x1_B0(0,0), 9) - 0.284700199848964*pow(x1_B0(0,0), 8) +
      0.486109994170276*pow(x1_B0(0,0), 7) - 0.4425160760866*pow(x1_B0(0,0), 6) +
      0.274555059341105*pow(x1_B0(0,0), 5) - 0.10530401015664*pow(x1_B0(0,0), 4) +
      0.016295290641699*pow(x1_B0(0,0), 3) - 0.291761620917306*pow(x1_B0(0,0), 2) +
      7.47704449521701e-5*x1_B0(0,0) + 1.67619323517671
)
: (
   1.00000058834432
));

   rho = 1.0/T;

   rho_B0(0,0) = rho;

   rhou0_B0(0,0) = rhou0;

   rhou1_B0(0,0) = rhou1;

   rhoE_B0(0,0) = rcinv4*rcinv5*rcinv6*T*rho + (0.5*pow(rhou0, 2) + 0.5*pow(rhou1, 2))/rho;

}



__global__ void ops_opensbliblock00Kernel049(
double* __restrict arg0,
double* __restrict arg1,
double* __restrict arg2,
double* __restrict arg3,
double* __restrict arg4,
double* __restrict arg5,
int arg_idx0, int arg_idx1,
int size0,
int size1 ){

  //Make sure constants are not optimized out
  if (size0==-1) dims_opensbliblock00Kernel049[0][0]=0;


  int idx_y = hipBlockDim_y * hipBlockIdx_y + hipThreadIdx_y;
  int idx_x = hipBlockDim_x * hipBlockIdx_x + hipThreadIdx_x;

  int arg_idx[2];
  arg_idx[0] = arg_idx0+idx_x;
  arg_idx[1] = arg_idx1+idx_y;
  arg0 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel049[0][0];
  arg1 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel049[1][0];
  arg2 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel049[2][0];
  arg3 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel049[3][0];
  arg4 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel049[4][0];
  arg5 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel049[5][0];

  if (idx_x < size0 && idx_y < size1) {
    ACC<double> argp0(dims_opensbliblock00Kernel049[0][0], arg0);
    ACC<double> argp1(dims_opensbliblock00Kernel049[1][0], arg1);
    ACC<double> argp2(dims_opensbliblock00Kernel049[2][0], arg2);
    ACC<double> argp3(dims_opensbliblock00Kernel049[3][0], arg3);
    ACC<double> argp4(dims_opensbliblock00Kernel049[4][0], arg4);
    ACC<double> argp5(dims_opensbliblock00Kernel049[5][0], arg5);
    opensbliblock00Kernel049_gpu(argp0, argp1, argp2, argp3,
                   argp4, argp5, arg_idx);
  }

}

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel049(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6) {
#else
void ops_par_loop_opensbliblock00Kernel049_execute(ops_kernel_descriptor *desc) {
  int dim = desc->dim;
  #if OPS_MPI
  ops_block block = desc->block;
  #endif
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  #endif

  //Timing
  double t1,t2,c1,c2;

  ops_arg args[7] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6};


  #if CHECKPOINTING && !OPS_LAZY
  if (!ops_checkpointing_before(args,7,range,0)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,0,"opensbliblock00Kernel049");
    block->instance->OPS_kernels[0].count++;
    ops_timers_core(&c1,&t1);
  }

  //compute locally allocated range for the sub-block
  int start[2];
  int end[2];
  #if OPS_MPI && !OPS_LAZY
  sub_block_list sb = OPS_sub_block_list[block->index];
  #endif //OPS_MPI

  int arg_idx[2];
  #ifdef OPS_MPI
  if (compute_ranges(args, 7,block, range, start, end, arg_idx) < 0) return;
  #else //OPS_MPI
  for ( int n=0; n<2; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
    arg_idx[n] = start[n];
  }
  #endif
  int xdim0 = args[0].dat->size[0];
  int xdim1 = args[1].dat->size[0];
  int xdim2 = args[2].dat->size[0];
  int xdim3 = args[3].dat->size[0];
  int xdim4 = args[4].dat->size[0];
  int xdim5 = args[5].dat->size[0];

  if (xdim0 != dims_opensbliblock00Kernel049_h[0][0] || xdim1 != dims_opensbliblock00Kernel049_h[1][0] || xdim2 != dims_opensbliblock00Kernel049_h[2][0] || xdim3 != dims_opensbliblock00Kernel049_h[3][0] || xdim4 != dims_opensbliblock00Kernel049_h[4][0] || xdim5 != dims_opensbliblock00Kernel049_h[5][0]) {
    dims_opensbliblock00Kernel049_h[0][0] = xdim0;
    dims_opensbliblock00Kernel049_h[1][0] = xdim1;
    dims_opensbliblock00Kernel049_h[2][0] = xdim2;
    dims_opensbliblock00Kernel049_h[3][0] = xdim3;
    dims_opensbliblock00Kernel049_h[4][0] = xdim4;
    dims_opensbliblock00Kernel049_h[5][0] = xdim5;
    hipSafeCall(block->instance->ostream(), hipMemcpyToSymbol(HIP_SYMBOL(dims_opensbliblock00Kernel049), dims_opensbliblock00Kernel049_h, sizeof(dims_opensbliblock00Kernel049)));
  }



  int x_size = MAX(0,end[0]-start[0]);
  int y_size = MAX(0,end[1]-start[1]);

  dim3 grid( (x_size-1)/block->instance->OPS_block_size_x+ 1, (y_size-1)/block->instance->OPS_block_size_y + 1, 1);
  dim3 tblock(block->instance->OPS_block_size_x,block->instance->OPS_block_size_y,block->instance->OPS_block_size_z);



  long long int dat0 = (block->instance->OPS_soa ? args[0].dat->type_size : args[0].dat->elem_size);
  long long int dat1 = (block->instance->OPS_soa ? args[1].dat->type_size : args[1].dat->elem_size);
  long long int dat2 = (block->instance->OPS_soa ? args[2].dat->type_size : args[2].dat->elem_size);
  long long int dat3 = (block->instance->OPS_soa ? args[3].dat->type_size : args[3].dat->elem_size);
  long long int dat4 = (block->instance->OPS_soa ? args[4].dat->type_size : args[4].dat->elem_size);
  long long int dat5 = (block->instance->OPS_soa ? args[5].dat->type_size : args[5].dat->elem_size);

  char *p_a[7];

  //set up initial pointers
  long long int base0 = args[0].dat->base_offset + 
           dat0 * 1 * (start[0] * args[0].stencil->stride[0]);
  base0 = base0+ dat0 *
    args[0].dat->size[0] *
    (start[1] * args[0].stencil->stride[1]);
  p_a[0] = (char *)args[0].data_d + base0;

  long long int base1 = args[1].dat->base_offset + 
           dat1 * 1 * (start[0] * args[1].stencil->stride[0]);
  base1 = base1+ dat1 *
    args[1].dat->size[0] *
    (start[1] * args[1].stencil->stride[1]);
  p_a[1] = (char *)args[1].data_d + base1;

  long long int base2 = args[2].dat->base_offset + 
           dat2 * 1 * (start[0] * args[2].stencil->stride[0]);
  base2 = base2+ dat2 *
    args[2].dat->size[0] *
    (start[1] * args[2].stencil->stride[1]);
  p_a[2] = (char *)args[2].data_d + base2;

  long long int base3 = args[3].dat->base_offset + 
           dat3 * 1 * (start[0] * args[3].stencil->stride[0]);
  base3 = base3+ dat3 *
    args[3].dat->size[0] *
    (start[1] * args[3].stencil->stride[1]);
  p_a[3] = (char *)args[3].data_d + base3;

  long long int base4 = args[4].dat->base_offset + 
           dat4 * 1 * (start[0] * args[4].stencil->stride[0]);
  base4 = base4+ dat4 *
    args[4].dat->size[0] *
    (start[1] * args[4].stencil->stride[1]);
  p_a[4] = (char *)args[4].data_d + base4;

  long long int base5 = args[5].dat->base_offset + 
           dat5 * 1 * (start[0] * args[5].stencil->stride[0]);
  base5 = base5+ dat5 *
    args[5].dat->size[0] *
    (start[1] * args[5].stencil->stride[1]);
  p_a[5] = (char *)args[5].data_d + base5;


  #ifndef OPS_LAZY
  ops_H_D_exchanges_device(args, 7);
  ops_halo_exchanges(args,7,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[0].mpi_time += t2-t1;
  }


  //call kernel wrapper function, passing in pointers to data
  if (x_size > 0 && y_size > 0)
    hipLaunchKernelGGL(ops_opensbliblock00Kernel049,grid ,tblock ,0 ,0 , (double *)p_a[0], (double *)p_a[1],
         (double *)p_a[2], (double *)p_a[3],
         (double *)p_a[4], (double *)p_a[5],
         arg_idx[0], arg_idx[1],x_size, y_size);

  hipSafeCall(block->instance->ostream(), hipGetLastError());

  if (block->instance->OPS_diags>1) {
    hipSafeCall(block->instance->ostream(), hipDeviceSynchronize());
    ops_timers_core(&c1,&t1);
    block->instance->OPS_kernels[0].time += t1-t2;
  }

  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 7);
  ops_set_halo_dirtybit3(&args[0],range);
  ops_set_halo_dirtybit3(&args[1],range);
  ops_set_halo_dirtybit3(&args[2],range);
  ops_set_halo_dirtybit3(&args[3],range);
  ops_set_halo_dirtybit3(&args[4],range);
  ops_set_halo_dirtybit3(&args[5],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[0].mpi_time += t2-t1;
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg5);
  }
}

#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel049(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3, ops_arg arg4, ops_arg arg5, ops_arg arg6) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)calloc(1,sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 1;
  desc->index = 0;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 0;
  for ( int i=0; i<4; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 7;
  desc->args = (ops_arg*)malloc(7*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg2.dat->index;
  desc->args[3] = arg3;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg3.dat->index;
  desc->args[4] = arg4;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg4.dat->index;
  desc->args[5] = arg5;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg5.dat->index;
  desc->args[6] = arg6;
  desc->function = ops_par_loop_opensbliblock00Kernel049_execute;
  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,0,"opensbliblock00Kernel049");
  }
  ops_enqueue_kernel(desc);
}
#endif
