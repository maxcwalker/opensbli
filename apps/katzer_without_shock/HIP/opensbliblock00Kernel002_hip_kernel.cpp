//
// auto-generated by ops.py
//
__constant__ int dims_opensbliblock00Kernel002 [5][1];
static int dims_opensbliblock00Kernel002_h [5][1] = {{0}};

//user function
__device__

 void opensbliblock00Kernel002_gpu(const ACC<double> &u1_B0,
  const ACC<double> &u0_B0,
  const ACC<double> &D11_B0,
  ACC<double> &theta_B0,
  const
int *idx)
{
   double localeval_2 = 0.0;
   double localeval_3 = 0.0;
   double localeval_0 = 0.0;
   double localeval_1 = 0.0;
    localeval_0 = ((idx[0] == 0) ? (
   inv_0*(4*u1_B0(1,0) - rc10*u1_B0(0,0) +
      (rc9)*u1_B0(3,0) - rc8*u1_B0(4,0) - 3*u1_B0(2,0))
)
: ((idx[0] == 1) ? (

      (rc11)*inv_0*(18*u1_B0(1,0) - 10*u1_B0(0,0) + u1_B0(3,0) - 3*u1_B0(-1,0) -
      6*u1_B0(2,0))
)
: ((idx[0] == block0np0 - 1) ? (
   inv_0*((rc8)*u1_B0(-4,0) +
      (rc10)*u1_B0(0,0) + 3*u1_B0(-2,0) - 4*u1_B0(-1,0) - rc9*u1_B0(-3,0))
)
:
      ((idx[0] == block0np0 - 2) ? (
   (rc11)*inv_0*(3*u1_B0(1,0) + 10*u1_B0(0,0) +
      6*u1_B0(-2,0) - 18*u1_B0(-1,0) - u1_B0(-3,0))
)
: (

      (rc11)*inv_0*(-8*u1_B0(-1,0) + 8*u1_B0(1,0) + u1_B0(-2,0) -
      u1_B0(2,0))
)))));

    localeval_1 = ((idx[1] == 0) ? (
   inv_1*(-rc10*u1_B0(0,0) - rc8*u1_B0(0,4) +
      (rc9)*u1_B0(0,3) - 3*u1_B0(0,2) + 4*u1_B0(0,1))
)
: ((idx[1] == 1) ? (

      (rc11)*inv_1*(-3*u1_B0(0,-1) - 10*u1_B0(0,0) + u1_B0(0,3) - 6*u1_B0(0,2) +
      18*u1_B0(0,1))
)
: ((idx[1] == block0np1 - 1) ? (
   inv_1*(-4*u1_B0(0,-1) +
      3*u1_B0(0,-2) + (rc10)*u1_B0(0,0) - rc9*u1_B0(0,-3) +
      (rc8)*u1_B0(0,-4))
)
: ((idx[1] == block0np1 - 2) ? (
   (rc11)*inv_1*(-18*u1_B0(0,-1) +
      6*u1_B0(0,-2) + 10*u1_B0(0,0) - u1_B0(0,-3) + 3*u1_B0(0,1))
)
: (

      (rc11)*inv_1*(-8*u1_B0(0,-1) - u1_B0(0,2) + 8*u1_B0(0,1) +
      u1_B0(0,-2))
)))));

    localeval_2 = ((idx[0] == 0) ? (
   inv_0*(-3*u0_B0(2,0) + (rc9)*u0_B0(3,0) -
      rc10*u0_B0(0,0) + 4*u0_B0(1,0) - rc8*u0_B0(4,0))
)
: ((idx[0] == 1) ? (

      (rc11)*inv_0*(-6*u0_B0(2,0) - 3*u0_B0(-1,0) + u0_B0(3,0) - 10*u0_B0(0,0) +
      18*u0_B0(1,0))
)
: ((idx[0] == block0np0 - 1) ? (
   inv_0*(-4*u0_B0(-1,0) +
      3*u0_B0(-2,0) + (rc10)*u0_B0(0,0) + (rc8)*u0_B0(-4,0) -
      rc9*u0_B0(-3,0))
)
: ((idx[0] == block0np0 - 2) ? (
   (rc11)*inv_0*(-18*u0_B0(-1,0) +
      6*u0_B0(-2,0) + 10*u0_B0(0,0) + 3*u0_B0(1,0) - u0_B0(-3,0))
)
: (

      (rc11)*inv_0*(-8*u0_B0(-1,0) + 8*u0_B0(1,0) - u0_B0(2,0) +
      u0_B0(-2,0))
)))));

    localeval_3 = ((idx[1] == 0) ? (
   inv_1*((rc9)*u0_B0(0,3) - rc10*u0_B0(0,0) -
      rc8*u0_B0(0,4) + 4*u0_B0(0,1) - 3*u0_B0(0,2))
)
: ((idx[1] == 1) ? (

      (rc11)*inv_1*(u0_B0(0,3) - 3*u0_B0(0,-1) - 10*u0_B0(0,0) + 18*u0_B0(0,1) -
      6*u0_B0(0,2))
)
: ((idx[1] == block0np1 - 1) ? (
   inv_1*(-rc9*u0_B0(0,-3) -
      4*u0_B0(0,-1) + 3*u0_B0(0,-2) + (rc10)*u0_B0(0,0) + (rc8)*u0_B0(0,-4))
)
:
      ((idx[1] == block0np1 - 2) ? (
   (rc11)*inv_1*(-u0_B0(0,-3) - 18*u0_B0(0,-1) +
      6*u0_B0(0,-2) + 10*u0_B0(0,0) + 3*u0_B0(0,1))
)
: (

      (rc11)*inv_1*(-8*u0_B0(0,-1) + u0_B0(0,-2) - u0_B0(0,2) +
      8*u0_B0(0,1))
)))));

    theta_B0(0,0) = pow(localeval_1*D11_B0(0,0) + localeval_2,
      2)*(-rc13*tanh(250.0*localeval_1*D11_B0(0,0) + 250.0*localeval_2 + 2.5) + rc13)/(epsilon +
      pow(localeval_0 - localeval_3*D11_B0(0,0), 2) + pow(localeval_1*D11_B0(0,0) + localeval_2,
      2));

}



__global__ void ops_opensbliblock00Kernel002(
double* __restrict arg0,
double* __restrict arg1,
double* __restrict arg2,
double* __restrict arg3,
int arg_idx0, int arg_idx1,
int size0,
int size1 ){

  //Make sure constants are not optimized out
  if (size0==-1) dims_opensbliblock00Kernel002[0][0]=0;


  int idx_y = hipBlockDim_y * hipBlockIdx_y + hipThreadIdx_y;
  int idx_x = hipBlockDim_x * hipBlockIdx_x + hipThreadIdx_x;

  int arg_idx[2];
  arg_idx[0] = arg_idx0+idx_x;
  arg_idx[1] = arg_idx1+idx_y;
  arg0 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel002[0][0];
  arg1 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel002[1][0];
  arg2 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel002[2][0];
  arg3 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel002[3][0];

  if (idx_x < size0 && idx_y < size1) {
    const ACC<double> argp0(dims_opensbliblock00Kernel002[0][0], arg0);
    const ACC<double> argp1(dims_opensbliblock00Kernel002[1][0], arg1);
    const ACC<double> argp2(dims_opensbliblock00Kernel002[2][0], arg2);
    ACC<double> argp3(dims_opensbliblock00Kernel002[3][0], arg3);
    opensbliblock00Kernel002_gpu(argp0, argp1, argp2, argp3,
                   arg_idx);
  }

}

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel002(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4) {
#else
void ops_par_loop_opensbliblock00Kernel002_execute(ops_kernel_descriptor *desc) {
  int dim = desc->dim;
  #if OPS_MPI
  ops_block block = desc->block;
  #endif
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  #endif

  //Timing
  double t1,t2,c1,c2;

  ops_arg args[5] = { arg0, arg1, arg2, arg3, arg4};


  #if CHECKPOINTING && !OPS_LAZY
  if (!ops_checkpointing_before(args,5,range,14)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,14,"opensbliblock00Kernel002");
    block->instance->OPS_kernels[14].count++;
    ops_timers_core(&c1,&t1);
  }

  //compute locally allocated range for the sub-block
  int start[2];
  int end[2];
  #if OPS_MPI && !OPS_LAZY
  sub_block_list sb = OPS_sub_block_list[block->index];
  #endif //OPS_MPI

  int arg_idx[2];
  #ifdef OPS_MPI
  if (compute_ranges(args, 5,block, range, start, end, arg_idx) < 0) return;
  #else //OPS_MPI
  for ( int n=0; n<2; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
    arg_idx[n] = start[n];
  }
  #endif
  int xdim0 = args[0].dat->size[0];
  int xdim1 = args[1].dat->size[0];
  int xdim2 = args[2].dat->size[0];
  int xdim3 = args[3].dat->size[0];

  if (xdim0 != dims_opensbliblock00Kernel002_h[0][0] || xdim1 != dims_opensbliblock00Kernel002_h[1][0] || xdim2 != dims_opensbliblock00Kernel002_h[2][0] || xdim3 != dims_opensbliblock00Kernel002_h[3][0]) {
    dims_opensbliblock00Kernel002_h[0][0] = xdim0;
    dims_opensbliblock00Kernel002_h[1][0] = xdim1;
    dims_opensbliblock00Kernel002_h[2][0] = xdim2;
    dims_opensbliblock00Kernel002_h[3][0] = xdim3;
    hipSafeCall(block->instance->ostream(), hipMemcpyToSymbol(HIP_SYMBOL(dims_opensbliblock00Kernel002), dims_opensbliblock00Kernel002_h, sizeof(dims_opensbliblock00Kernel002)));
  }



  int x_size = MAX(0,end[0]-start[0]);
  int y_size = MAX(0,end[1]-start[1]);

  dim3 grid( (x_size-1)/block->instance->OPS_block_size_x+ 1, (y_size-1)/block->instance->OPS_block_size_y + 1, 1);
  dim3 tblock(block->instance->OPS_block_size_x,block->instance->OPS_block_size_y,block->instance->OPS_block_size_z);



  long long int dat0 = (block->instance->OPS_soa ? args[0].dat->type_size : args[0].dat->elem_size);
  long long int dat1 = (block->instance->OPS_soa ? args[1].dat->type_size : args[1].dat->elem_size);
  long long int dat2 = (block->instance->OPS_soa ? args[2].dat->type_size : args[2].dat->elem_size);
  long long int dat3 = (block->instance->OPS_soa ? args[3].dat->type_size : args[3].dat->elem_size);

  char *p_a[5];

  //set up initial pointers
  long long int base0 = args[0].dat->base_offset + 
           dat0 * 1 * (start[0] * args[0].stencil->stride[0]);
  base0 = base0+ dat0 *
    args[0].dat->size[0] *
    (start[1] * args[0].stencil->stride[1]);
  p_a[0] = (char *)args[0].data_d + base0;

  long long int base1 = args[1].dat->base_offset + 
           dat1 * 1 * (start[0] * args[1].stencil->stride[0]);
  base1 = base1+ dat1 *
    args[1].dat->size[0] *
    (start[1] * args[1].stencil->stride[1]);
  p_a[1] = (char *)args[1].data_d + base1;

  long long int base2 = args[2].dat->base_offset + 
           dat2 * 1 * (start[0] * args[2].stencil->stride[0]);
  base2 = base2+ dat2 *
    args[2].dat->size[0] *
    (start[1] * args[2].stencil->stride[1]);
  p_a[2] = (char *)args[2].data_d + base2;

  long long int base3 = args[3].dat->base_offset + 
           dat3 * 1 * (start[0] * args[3].stencil->stride[0]);
  base3 = base3+ dat3 *
    args[3].dat->size[0] *
    (start[1] * args[3].stencil->stride[1]);
  p_a[3] = (char *)args[3].data_d + base3;


  #ifndef OPS_LAZY
  ops_H_D_exchanges_device(args, 5);
  ops_halo_exchanges(args,5,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[14].mpi_time += t2-t1;
  }


  //call kernel wrapper function, passing in pointers to data
  if (x_size > 0 && y_size > 0)
    hipLaunchKernelGGL(ops_opensbliblock00Kernel002,grid ,tblock ,0 ,0 , (double *)p_a[0], (double *)p_a[1],
         (double *)p_a[2], (double *)p_a[3],
         arg_idx[0], arg_idx[1],x_size, y_size);

  hipSafeCall(block->instance->ostream(), hipGetLastError());

  if (block->instance->OPS_diags>1) {
    hipSafeCall(block->instance->ostream(), hipDeviceSynchronize());
    ops_timers_core(&c1,&t1);
    block->instance->OPS_kernels[14].time += t1-t2;
  }

  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 5);
  ops_set_halo_dirtybit3(&args[3],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[14].mpi_time += t2-t1;
    block->instance->OPS_kernels[14].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[14].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[14].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[14].transfer += ops_compute_transfer(dim, start, end, &arg3);
  }
}

#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel002(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3, ops_arg arg4) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)calloc(1,sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 1;
  desc->index = 14;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 14;
  for ( int i=0; i<4; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 5;
  desc->args = (ops_arg*)malloc(5*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg2.dat->index;
  desc->args[3] = arg3;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg3.dat->index;
  desc->args[4] = arg4;
  desc->function = ops_par_loop_opensbliblock00Kernel002_execute;
  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,14,"opensbliblock00Kernel002");
  }
  ops_enqueue_kernel(desc);
}
#endif
