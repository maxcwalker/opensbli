//
// auto-generated by ops.py
//
__constant__ int dims_opensbliblock00Kernel034 [16][1];
static int dims_opensbliblock00Kernel034_h [16][1] = {{0}};

//user function
__device__

 void opensbliblock00Kernel034_gpu(const ACC<double> &wk2_B0,
  const ACC<double> &SD111_B0,
  const ACC<double> &wk6_B0,
  const ACC<double> &u0_B0,
  const ACC<double> &wk0_B0,
  const ACC<double> &u1_B0,
  const ACC<double> &T_B0,
  const ACC<double> &wk3_B0,
  const ACC<double> &D11_B0,
  const ACC<double>
&wk1_B0,
  const ACC<double> &wk7_B0,
  const ACC<double> &mu_B0,
  ACC<double> &Residual3_B0,
  ACC<double> &Residual2_B0,
  ACC<double> &Residual1_B0,
  const int *idx)
{
   double localeval_6 = 0.0;
   double localeval_0 = 0.0;
   double localeval_3 = 0.0;
   double localeval_9 = 0.0;
   double localeval_2 = 0.0;
   double localeval_8 = 0.0;
   double localeval_4 = 0.0;
   double localeval_1 = 0.0;
   double localeval_5 = 0.0;
   double localeval_7 = 0.0;
    localeval_0 = ((idx[0] == 0) ? (
   (rc11)*inv_2*(114*T_B0(2,0) - 56*T_B0(3,0) +
      35*T_B0(0,0) - 104*T_B0(1,0) + 11*T_B0(4,0))
)
: ((idx[0] == 1) ? (

      (rc11)*inv_2*(4*T_B0(2,0) - T_B0(3,0) - 20*T_B0(0,0) + 11*T_B0(-1,0) +
      6*T_B0(1,0))
)
: ((idx[0] == block0np0 - 1) ? (
   (rc11)*inv_2*(35*T_B0(0,0) -
      104*T_B0(-1,0) + 114*T_B0(-2,0) + 11*T_B0(-4,0) - 56*T_B0(-3,0))
)
:
      ((idx[0] == block0np0 - 2) ? (
   (rc11)*inv_2*(-20*T_B0(0,0) + 4*T_B0(-2,0) +
      6*T_B0(-1,0) + 11*T_B0(1,0) - T_B0(-3,0))
)
: (

      (rc11)*inv_2*(-T_B0(2,0) - 30*T_B0(0,0) - T_B0(-2,0) + 16*T_B0(-1,0) +
      16*T_B0(1,0))
)))));

    localeval_1 = ((idx[1] == 0) ? (
   (rc11)*inv_3*(-56*T_B0(0,3) + 11*T_B0(0,4) +
      35*T_B0(0,0) - 104*T_B0(0,1) + 114*T_B0(0,2))
)
: ((idx[1] == 1) ? (

      (rc11)*inv_3*(-T_B0(0,3) - 20*T_B0(0,0) + 11*T_B0(0,-1) + 6*T_B0(0,1) +
      4*T_B0(0,2))
)
: ((idx[1] == block0np1 - 1) ? (
   (rc11)*inv_3*(-56*T_B0(0,-3) +
      35*T_B0(0,0) - 104*T_B0(0,-1) + 114*T_B0(0,-2) + 11*T_B0(0,-4))
)
:
      ((idx[1] == block0np1 - 2) ? (
   (rc11)*inv_3*(-T_B0(0,-3) - 20*T_B0(0,0) +
      4*T_B0(0,-2) + 6*T_B0(0,-1) + 11*T_B0(0,1))
)
: (

      (rc11)*inv_3*(-30*T_B0(0,0) - T_B0(0,-2) + 16*T_B0(0,-1) + 16*T_B0(0,1) -
      T_B0(0,2))
)))));

    localeval_2 = ((idx[0] == 0) ? (
   inv_1*(4*mu_B0(1,0) - 3*mu_B0(2,0) -
      rc10*mu_B0(4,0) + (rc9)*mu_B0(3,0) - rc8*mu_B0(0,0))
)
: ((idx[0] == 1) ? (

      (rc11)*inv_1*(18*mu_B0(1,0) - 6*mu_B0(2,0) + mu_B0(3,0) -
      3*mu_B0(-1,0) - 10*mu_B0(0,0))
)
: ((idx[0] == block0np0 - 1) ? (

      inv_1*(-4*mu_B0(-1,0) + (rc10)*mu_B0(-4,0) - rc9*mu_B0(-3,0) +
      3*mu_B0(-2,0) + (rc8)*mu_B0(0,0))
)
: ((idx[0] == block0np0 - 2) ? (

      (rc11)*inv_1*(3*mu_B0(1,0) + 6*mu_B0(-2,0) - mu_B0(-3,0) -
      18*mu_B0(-1,0) + 10*mu_B0(0,0))
)
: (
   (rc11)*inv_1*(8*mu_B0(1,0) -
      8*mu_B0(-1,0) + mu_B0(-2,0) - mu_B0(2,0))
)))));

    localeval_3 = ((idx[1] == 0) ? (
   inv_0*(-rc10*mu_B0(0,4) + 4*mu_B0(0,1) -
      3*mu_B0(0,2) + (rc9)*mu_B0(0,3) - rc8*mu_B0(0,0))
)
: ((idx[1] == 1) ? (

      (rc11)*inv_0*(18*mu_B0(0,1) - 6*mu_B0(0,2) + mu_B0(0,3) -
      3*mu_B0(0,-1) - 10*mu_B0(0,0))
)
: ((idx[1] == block0np1 - 1) ? (

      inv_0*(-4*mu_B0(0,-1) + (rc10)*mu_B0(0,-4) - rc9*mu_B0(0,-3) +
      3*mu_B0(0,-2) + (rc8)*mu_B0(0,0))
)
: ((idx[1] == block0np1 - 2) ? (

      (rc11)*inv_0*(6*mu_B0(0,-2) + 3*mu_B0(0,1) - mu_B0(0,-3) -
      18*mu_B0(0,-1) + 10*mu_B0(0,0))
)
: (
   (rc11)*inv_0*(mu_B0(0,-2) -
      8*mu_B0(0,-1) + 8*mu_B0(0,1) - mu_B0(0,2))
)))));

    localeval_4 = ((idx[0] == 0) ? (
   (rc11)*inv_2*(-104*u0_B0(1,0) + 35*u0_B0(0,0) -
      56*u0_B0(3,0) + 11*u0_B0(4,0) + 114*u0_B0(2,0))
)
: ((idx[0] == 1) ? (

      (rc11)*inv_2*(6*u0_B0(1,0) - 20*u0_B0(0,0) - u0_B0(3,0) + 11*u0_B0(-1,0) +
      4*u0_B0(2,0))
)
: ((idx[0] == block0np0 - 1) ? (
   (rc11)*inv_2*(11*u0_B0(-4,0) +
      35*u0_B0(0,0) + 114*u0_B0(-2,0) - 104*u0_B0(-1,0) - 56*u0_B0(-3,0))
)
:
      ((idx[0] == block0np0 - 2) ? (
   (rc11)*inv_2*(11*u0_B0(1,0) - 20*u0_B0(0,0) +
      6*u0_B0(-1,0) + 4*u0_B0(-2,0) - u0_B0(-3,0))
)
: (

      (rc11)*inv_2*(16*u0_B0(1,0) - 30*u0_B0(0,0) + 16*u0_B0(-1,0) - u0_B0(-2,0)
      - u0_B0(2,0))
)))));

    localeval_5 = ((idx[1] == 0) ? (
   (rc11)*inv_3*(35*u0_B0(0,0) + 11*u0_B0(0,4) -
      56*u0_B0(0,3) + 114*u0_B0(0,2) - 104*u0_B0(0,1))
)
: ((idx[1] == 1) ? (

      (rc11)*inv_3*(11*u0_B0(0,-1) - 20*u0_B0(0,0) - u0_B0(0,3) + 4*u0_B0(0,2) +
      6*u0_B0(0,1))
)
: ((idx[1] == block0np1 - 1) ? (
   (rc11)*inv_3*(114*u0_B0(0,-2) -
      104*u0_B0(0,-1) + 35*u0_B0(0,0) - 56*u0_B0(0,-3) + 11*u0_B0(0,-4))
)
:
      ((idx[1] == block0np1 - 2) ? (
   (rc11)*inv_3*(6*u0_B0(0,-1) + 4*u0_B0(0,-2) -
      20*u0_B0(0,0) - u0_B0(0,-3) + 11*u0_B0(0,1))
)
: (

      (rc11)*inv_3*(16*u0_B0(0,-1) - u0_B0(0,-2) - 30*u0_B0(0,0) - u0_B0(0,2) +
      16*u0_B0(0,1))
)))));

    localeval_6 = ((idx[0] == 0) ? (
   (rc11)*inv_2*(11*u1_B0(4,0) + 114*u1_B0(2,0) -
      56*u1_B0(3,0) + 35*u1_B0(0,0) - 104*u1_B0(1,0))
)
: ((idx[0] == 1) ? (

      (rc11)*inv_2*(11*u1_B0(-1,0) + 4*u1_B0(2,0) - u1_B0(3,0) - 20*u1_B0(0,0) +
      6*u1_B0(1,0))
)
: ((idx[0] == block0np0 - 1) ? (
   (rc11)*inv_2*(-104*u1_B0(-1,0) +
      114*u1_B0(-2,0) + 11*u1_B0(-4,0) - 56*u1_B0(-3,0) + 35*u1_B0(0,0))
)
:
      ((idx[0] == block0np0 - 2) ? (
   (rc11)*inv_2*(4*u1_B0(-2,0) + 6*u1_B0(-1,0) -
      u1_B0(-3,0) - 20*u1_B0(0,0) + 11*u1_B0(1,0))
)
: (

      (rc11)*inv_2*(-u1_B0(-2,0) + 16*u1_B0(-1,0) - u1_B0(2,0) - 30*u1_B0(0,0) +
      16*u1_B0(1,0))
)))));

    localeval_7 = ((idx[1] == 0) ? (
   (rc11)*inv_3*(114*u1_B0(0,2) - 56*u1_B0(0,3) +
      35*u1_B0(0,0) + 11*u1_B0(0,4) - 104*u1_B0(0,1))
)
: ((idx[1] == 1) ? (

      (rc11)*inv_3*(11*u1_B0(0,-1) + 4*u1_B0(0,2) - u1_B0(0,3) - 20*u1_B0(0,0) +
      6*u1_B0(0,1))
)
: ((idx[1] == block0np1 - 1) ? (
   (rc11)*inv_3*(-104*u1_B0(0,-1) +
      114*u1_B0(0,-2) + 11*u1_B0(0,-4) + 35*u1_B0(0,0) - 56*u1_B0(0,-3))
)
:
      ((idx[1] == block0np1 - 2) ? (
   (rc11)*inv_3*(4*u1_B0(0,-2) + 6*u1_B0(0,-1) -
      20*u1_B0(0,0) - u1_B0(0,-3) + 11*u1_B0(0,1))
)
: (

      (rc11)*inv_3*(-u1_B0(0,-2) + 16*u1_B0(0,-1) - u1_B0(0,2) - 30*u1_B0(0,0) +
      16*u1_B0(0,1))
)))));

    localeval_8 = ((idx[1] == 0) ? (
   inv_0*(-rc8*wk1_B0(0,0) + (rc9)*wk1_B0(0,3) -
      3*wk1_B0(0,2) + 4*wk1_B0(0,1) - rc10*wk1_B0(0,4))
)
: ((idx[1] == 1) ? (

      (rc11)*inv_0*(-10*wk1_B0(0,0) - 3*wk1_B0(0,-1) + wk1_B0(0,3) -
      6*wk1_B0(0,2) + 18*wk1_B0(0,1))
)
: ((idx[1] == block0np1 - 1) ? (

      inv_0*((rc8)*wk1_B0(0,0) - 4*wk1_B0(0,-1) + 3*wk1_B0(0,-2) -
      rc9*wk1_B0(0,-3) + (rc10)*wk1_B0(0,-4))
)
: ((idx[1] == block0np1 - 2) ? (

      (rc11)*inv_0*(10*wk1_B0(0,0) - 18*wk1_B0(0,-1) + 6*wk1_B0(0,-2) -
      wk1_B0(0,-3) + 3*wk1_B0(0,1))
)
: (
   (rc11)*inv_0*(-wk1_B0(0,2) +
      8*wk1_B0(0,1) - 8*wk1_B0(0,-1) + wk1_B0(0,-2))
)))));

    localeval_9 = ((idx[1] == 0) ? (
   inv_0*(4*wk3_B0(0,1) - rc8*wk3_B0(0,0) -
      rc10*wk3_B0(0,4) + (rc9)*wk3_B0(0,3) - 3*wk3_B0(0,2))
)
: ((idx[1] == 1) ? (

      (rc11)*inv_0*(18*wk3_B0(0,1) - 10*wk3_B0(0,0) + wk3_B0(0,3) -
      3*wk3_B0(0,-1) - 6*wk3_B0(0,2))
)
: ((idx[1] == block0np1 - 1) ? (

      inv_0*(-rc9*wk3_B0(0,-3) - 4*wk3_B0(0,-1) + (rc10)*wk3_B0(0,-4) +
      (rc8)*wk3_B0(0,0) + 3*wk3_B0(0,-2))
)
: ((idx[1] == block0np1 - 2) ? (

      (rc11)*inv_0*(-wk3_B0(0,-3) + 3*wk3_B0(0,1) - 18*wk3_B0(0,-1) +
      10*wk3_B0(0,0) + 6*wk3_B0(0,-2))
)
: (
   (rc11)*inv_0*(wk3_B0(0,-2) -
      8*wk3_B0(0,-1) - wk3_B0(0,2) + 8*wk3_B0(0,1))
)))));

    Residual1_B0(0,0) = rcinv25*localeval_2*(-rc26*D11_B0(0,0)*wk2_B0(0,0) +
      (rc9)*wk1_B0(0,0)) + rcinv25*localeval_3*(D11_B0(0,0)*wk0_B0(0,0) +
      wk3_B0(0,0))*D11_B0(0,0) + rcinv25*((rc9)*localeval_4 + localeval_5*pow(D11_B0(0,0),
      2) + (rc27)*localeval_9*D11_B0(0,0) +
      D11_B0(0,0)*SD111_B0(0,0)*wk0_B0(0,0))*mu_B0(0,0) +
      Residual1_B0(0,0);

    Residual2_B0(0,0) = rcinv25*localeval_2*(D11_B0(0,0)*wk0_B0(0,0) +
      wk3_B0(0,0)) + rcinv25*localeval_3*((rc9)*D11_B0(0,0)*wk2_B0(0,0) -
      rc26*wk1_B0(0,0))*D11_B0(0,0) + rcinv25*(localeval_6 +
      (rc9)*localeval_7*pow(D11_B0(0,0), 2) + (rc27)*localeval_8*D11_B0(0,0) +
      (rc9)*D11_B0(0,0)*SD111_B0(0,0)*wk2_B0(0,0))*mu_B0(0,0) +
      Residual2_B0(0,0);

    Residual3_B0(0,0) = rcinv25*rcinv28*rcinv5*rcinv7*localeval_2*wk7_B0(0,0) +
      rcinv25*rcinv28*rcinv5*rcinv7*localeval_3*pow(D11_B0(0,0), 2)*wk6_B0(0,0) +
      rcinv25*rcinv28*rcinv5*rcinv7*(localeval_0 + localeval_1*pow(D11_B0(0,0), 2) +
      D11_B0(0,0)*SD111_B0(0,0)*wk6_B0(0,0))*mu_B0(0,0) +
      rcinv25*localeval_2*(D11_B0(0,0)*wk0_B0(0,0) + wk3_B0(0,0))*u1_B0(0,0) +
      rcinv25*localeval_2*(-rc26*D11_B0(0,0)*wk2_B0(0,0) +
      (rc9)*wk1_B0(0,0))*u0_B0(0,0) +
      rcinv25*localeval_3*(D11_B0(0,0)*wk0_B0(0,0) +
      wk3_B0(0,0))*D11_B0(0,0)*u0_B0(0,0) +
      rcinv25*localeval_3*((rc9)*D11_B0(0,0)*wk2_B0(0,0) -
      rc26*wk1_B0(0,0))*D11_B0(0,0)*u1_B0(0,0) +
      rcinv25*(D11_B0(0,0)*wk0_B0(0,0) +
      wk3_B0(0,0))*D11_B0(0,0)*mu_B0(0,0)*wk0_B0(0,0) +
      rcinv25*(D11_B0(0,0)*wk0_B0(0,0) +
      wk3_B0(0,0))*mu_B0(0,0)*wk3_B0(0,0) +
      rcinv25*(-rc26*D11_B0(0,0)*wk2_B0(0,0) +
      (rc9)*wk1_B0(0,0))*mu_B0(0,0)*wk1_B0(0,0) +
      rcinv25*((rc9)*D11_B0(0,0)*wk2_B0(0,0) -
      rc26*wk1_B0(0,0))*D11_B0(0,0)*mu_B0(0,0)*wk2_B0(0,0) +
      rcinv25*((rc9)*localeval_4 + localeval_5*pow(D11_B0(0,0), 2) + (rc27)*localeval_9*D11_B0(0,0)
      + D11_B0(0,0)*SD111_B0(0,0)*wk0_B0(0,0))*mu_B0(0,0)*u0_B0(0,0)
      + rcinv25*(localeval_6 + (rc9)*localeval_7*pow(D11_B0(0,0), 2) +
      (rc27)*localeval_8*D11_B0(0,0) +
      (rc9)*D11_B0(0,0)*SD111_B0(0,0)*wk2_B0(0,0))*mu_B0(0,0)*u1_B0(0,0)
      + Residual3_B0(0,0);

}



__global__ void ops_opensbliblock00Kernel034(
double* __restrict arg0,
double* __restrict arg1,
double* __restrict arg2,
double* __restrict arg3,
double* __restrict arg4,
double* __restrict arg5,
double* __restrict arg6,
double* __restrict arg7,
double* __restrict arg8,
double* __restrict arg9,
double* __restrict arg10,
double* __restrict arg11,
double* __restrict arg12,
double* __restrict arg13,
double* __restrict arg14,
int arg_idx0, int arg_idx1,
int size0,
int size1 ){

  //Make sure constants are not optimized out
  if (size0==-1) dims_opensbliblock00Kernel034[0][0]=0;


  int idx_y = hipBlockDim_y * hipBlockIdx_y + hipThreadIdx_y;
  int idx_x = hipBlockDim_x * hipBlockIdx_x + hipThreadIdx_x;

  int arg_idx[2];
  arg_idx[0] = arg_idx0+idx_x;
  arg_idx[1] = arg_idx1+idx_y;
  arg0 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel034[0][0];
  arg1 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel034[1][0];
  arg2 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel034[2][0];
  arg3 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel034[3][0];
  arg4 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel034[4][0];
  arg5 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel034[5][0];
  arg6 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel034[6][0];
  arg7 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel034[7][0];
  arg8 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel034[8][0];
  arg9 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel034[9][0];
  arg10 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel034[10][0];
  arg11 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel034[11][0];
  arg12 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel034[12][0];
  arg13 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel034[13][0];
  arg14 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel034[14][0];

  if (idx_x < size0 && idx_y < size1) {
    const ACC<double> argp0(dims_opensbliblock00Kernel034[0][0], arg0);
    const ACC<double> argp1(dims_opensbliblock00Kernel034[1][0], arg1);
    const ACC<double> argp2(dims_opensbliblock00Kernel034[2][0], arg2);
    const ACC<double> argp3(dims_opensbliblock00Kernel034[3][0], arg3);
    const ACC<double> argp4(dims_opensbliblock00Kernel034[4][0], arg4);
    const ACC<double> argp5(dims_opensbliblock00Kernel034[5][0], arg5);
    const ACC<double> argp6(dims_opensbliblock00Kernel034[6][0], arg6);
    const ACC<double> argp7(dims_opensbliblock00Kernel034[7][0], arg7);
    const ACC<double> argp8(dims_opensbliblock00Kernel034[8][0], arg8);
    const ACC<double> argp9(dims_opensbliblock00Kernel034[9][0], arg9);
    const ACC<double> argp10(dims_opensbliblock00Kernel034[10][0], arg10);
    const ACC<double> argp11(dims_opensbliblock00Kernel034[11][0], arg11);
    ACC<double> argp12(dims_opensbliblock00Kernel034[12][0], arg12);
    ACC<double> argp13(dims_opensbliblock00Kernel034[13][0], arg13);
    ACC<double> argp14(dims_opensbliblock00Kernel034[14][0], arg14);
    opensbliblock00Kernel034_gpu(argp0, argp1, argp2, argp3,
                   argp4, argp5, argp6, argp7, argp8,
                   argp9, argp10, argp11, argp12, argp13,
                   argp14, arg_idx);
  }

}

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel034(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7, ops_arg arg8,
 ops_arg arg9, ops_arg arg10, ops_arg arg11, ops_arg arg12, ops_arg arg13,
 ops_arg arg14, ops_arg arg15) {
#else
void ops_par_loop_opensbliblock00Kernel034_execute(ops_kernel_descriptor *desc) {
  int dim = desc->dim;
  #if OPS_MPI
  ops_block block = desc->block;
  #endif
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  ops_arg arg9 = desc->args[9];
  ops_arg arg10 = desc->args[10];
  ops_arg arg11 = desc->args[11];
  ops_arg arg12 = desc->args[12];
  ops_arg arg13 = desc->args[13];
  ops_arg arg14 = desc->args[14];
  ops_arg arg15 = desc->args[15];
  #endif

  //Timing
  double t1,t2,c1,c2;

  ops_arg args[16] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15};


  #if CHECKPOINTING && !OPS_LAZY
  if (!ops_checkpointing_before(args,16,range,29)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,29,"opensbliblock00Kernel034");
    block->instance->OPS_kernels[29].count++;
    ops_timers_core(&c1,&t1);
  }

  //compute locally allocated range for the sub-block
  int start[2];
  int end[2];
  #if OPS_MPI && !OPS_LAZY
  sub_block_list sb = OPS_sub_block_list[block->index];
  #endif //OPS_MPI

  int arg_idx[2];
  #ifdef OPS_MPI
  if (compute_ranges(args, 16,block, range, start, end, arg_idx) < 0) return;
  #else //OPS_MPI
  for ( int n=0; n<2; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
    arg_idx[n] = start[n];
  }
  #endif
  int xdim0 = args[0].dat->size[0];
  int xdim1 = args[1].dat->size[0];
  int xdim2 = args[2].dat->size[0];
  int xdim3 = args[3].dat->size[0];
  int xdim4 = args[4].dat->size[0];
  int xdim5 = args[5].dat->size[0];
  int xdim6 = args[6].dat->size[0];
  int xdim7 = args[7].dat->size[0];
  int xdim8 = args[8].dat->size[0];
  int xdim9 = args[9].dat->size[0];
  int xdim10 = args[10].dat->size[0];
  int xdim11 = args[11].dat->size[0];
  int xdim12 = args[12].dat->size[0];
  int xdim13 = args[13].dat->size[0];
  int xdim14 = args[14].dat->size[0];

  if (xdim0 != dims_opensbliblock00Kernel034_h[0][0] || xdim1 != dims_opensbliblock00Kernel034_h[1][0] || xdim2 != dims_opensbliblock00Kernel034_h[2][0] || xdim3 != dims_opensbliblock00Kernel034_h[3][0] || xdim4 != dims_opensbliblock00Kernel034_h[4][0] || xdim5 != dims_opensbliblock00Kernel034_h[5][0] || xdim6 != dims_opensbliblock00Kernel034_h[6][0] || xdim7 != dims_opensbliblock00Kernel034_h[7][0] || xdim8 != dims_opensbliblock00Kernel034_h[8][0] || xdim9 != dims_opensbliblock00Kernel034_h[9][0] || xdim10 != dims_opensbliblock00Kernel034_h[10][0] || xdim11 != dims_opensbliblock00Kernel034_h[11][0] || xdim12 != dims_opensbliblock00Kernel034_h[12][0] || xdim13 != dims_opensbliblock00Kernel034_h[13][0] || xdim14 != dims_opensbliblock00Kernel034_h[14][0]) {
    dims_opensbliblock00Kernel034_h[0][0] = xdim0;
    dims_opensbliblock00Kernel034_h[1][0] = xdim1;
    dims_opensbliblock00Kernel034_h[2][0] = xdim2;
    dims_opensbliblock00Kernel034_h[3][0] = xdim3;
    dims_opensbliblock00Kernel034_h[4][0] = xdim4;
    dims_opensbliblock00Kernel034_h[5][0] = xdim5;
    dims_opensbliblock00Kernel034_h[6][0] = xdim6;
    dims_opensbliblock00Kernel034_h[7][0] = xdim7;
    dims_opensbliblock00Kernel034_h[8][0] = xdim8;
    dims_opensbliblock00Kernel034_h[9][0] = xdim9;
    dims_opensbliblock00Kernel034_h[10][0] = xdim10;
    dims_opensbliblock00Kernel034_h[11][0] = xdim11;
    dims_opensbliblock00Kernel034_h[12][0] = xdim12;
    dims_opensbliblock00Kernel034_h[13][0] = xdim13;
    dims_opensbliblock00Kernel034_h[14][0] = xdim14;
    hipSafeCall(block->instance->ostream(), hipMemcpyToSymbol(HIP_SYMBOL(dims_opensbliblock00Kernel034), dims_opensbliblock00Kernel034_h, sizeof(dims_opensbliblock00Kernel034)));
  }



  int x_size = MAX(0,end[0]-start[0]);
  int y_size = MAX(0,end[1]-start[1]);

  dim3 grid( (x_size-1)/block->instance->OPS_block_size_x+ 1, (y_size-1)/block->instance->OPS_block_size_y + 1, 1);
  dim3 tblock(block->instance->OPS_block_size_x,block->instance->OPS_block_size_y,block->instance->OPS_block_size_z);



  long long int dat0 = (block->instance->OPS_soa ? args[0].dat->type_size : args[0].dat->elem_size);
  long long int dat1 = (block->instance->OPS_soa ? args[1].dat->type_size : args[1].dat->elem_size);
  long long int dat2 = (block->instance->OPS_soa ? args[2].dat->type_size : args[2].dat->elem_size);
  long long int dat3 = (block->instance->OPS_soa ? args[3].dat->type_size : args[3].dat->elem_size);
  long long int dat4 = (block->instance->OPS_soa ? args[4].dat->type_size : args[4].dat->elem_size);
  long long int dat5 = (block->instance->OPS_soa ? args[5].dat->type_size : args[5].dat->elem_size);
  long long int dat6 = (block->instance->OPS_soa ? args[6].dat->type_size : args[6].dat->elem_size);
  long long int dat7 = (block->instance->OPS_soa ? args[7].dat->type_size : args[7].dat->elem_size);
  long long int dat8 = (block->instance->OPS_soa ? args[8].dat->type_size : args[8].dat->elem_size);
  long long int dat9 = (block->instance->OPS_soa ? args[9].dat->type_size : args[9].dat->elem_size);
  long long int dat10 = (block->instance->OPS_soa ? args[10].dat->type_size : args[10].dat->elem_size);
  long long int dat11 = (block->instance->OPS_soa ? args[11].dat->type_size : args[11].dat->elem_size);
  long long int dat12 = (block->instance->OPS_soa ? args[12].dat->type_size : args[12].dat->elem_size);
  long long int dat13 = (block->instance->OPS_soa ? args[13].dat->type_size : args[13].dat->elem_size);
  long long int dat14 = (block->instance->OPS_soa ? args[14].dat->type_size : args[14].dat->elem_size);

  char *p_a[16];

  //set up initial pointers
  long long int base0 = args[0].dat->base_offset + 
           dat0 * 1 * (start[0] * args[0].stencil->stride[0]);
  base0 = base0+ dat0 *
    args[0].dat->size[0] *
    (start[1] * args[0].stencil->stride[1]);
  p_a[0] = (char *)args[0].data_d + base0;

  long long int base1 = args[1].dat->base_offset + 
           dat1 * 1 * (start[0] * args[1].stencil->stride[0]);
  base1 = base1+ dat1 *
    args[1].dat->size[0] *
    (start[1] * args[1].stencil->stride[1]);
  p_a[1] = (char *)args[1].data_d + base1;

  long long int base2 = args[2].dat->base_offset + 
           dat2 * 1 * (start[0] * args[2].stencil->stride[0]);
  base2 = base2+ dat2 *
    args[2].dat->size[0] *
    (start[1] * args[2].stencil->stride[1]);
  p_a[2] = (char *)args[2].data_d + base2;

  long long int base3 = args[3].dat->base_offset + 
           dat3 * 1 * (start[0] * args[3].stencil->stride[0]);
  base3 = base3+ dat3 *
    args[3].dat->size[0] *
    (start[1] * args[3].stencil->stride[1]);
  p_a[3] = (char *)args[3].data_d + base3;

  long long int base4 = args[4].dat->base_offset + 
           dat4 * 1 * (start[0] * args[4].stencil->stride[0]);
  base4 = base4+ dat4 *
    args[4].dat->size[0] *
    (start[1] * args[4].stencil->stride[1]);
  p_a[4] = (char *)args[4].data_d + base4;

  long long int base5 = args[5].dat->base_offset + 
           dat5 * 1 * (start[0] * args[5].stencil->stride[0]);
  base5 = base5+ dat5 *
    args[5].dat->size[0] *
    (start[1] * args[5].stencil->stride[1]);
  p_a[5] = (char *)args[5].data_d + base5;

  long long int base6 = args[6].dat->base_offset + 
           dat6 * 1 * (start[0] * args[6].stencil->stride[0]);
  base6 = base6+ dat6 *
    args[6].dat->size[0] *
    (start[1] * args[6].stencil->stride[1]);
  p_a[6] = (char *)args[6].data_d + base6;

  long long int base7 = args[7].dat->base_offset + 
           dat7 * 1 * (start[0] * args[7].stencil->stride[0]);
  base7 = base7+ dat7 *
    args[7].dat->size[0] *
    (start[1] * args[7].stencil->stride[1]);
  p_a[7] = (char *)args[7].data_d + base7;

  long long int base8 = args[8].dat->base_offset + 
           dat8 * 1 * (start[0] * args[8].stencil->stride[0]);
  base8 = base8+ dat8 *
    args[8].dat->size[0] *
    (start[1] * args[8].stencil->stride[1]);
  p_a[8] = (char *)args[8].data_d + base8;

  long long int base9 = args[9].dat->base_offset + 
           dat9 * 1 * (start[0] * args[9].stencil->stride[0]);
  base9 = base9+ dat9 *
    args[9].dat->size[0] *
    (start[1] * args[9].stencil->stride[1]);
  p_a[9] = (char *)args[9].data_d + base9;

  long long int base10 = args[10].dat->base_offset + 
           dat10 * 1 * (start[0] * args[10].stencil->stride[0]);
  base10 = base10+ dat10 *
    args[10].dat->size[0] *
    (start[1] * args[10].stencil->stride[1]);
  p_a[10] = (char *)args[10].data_d + base10;

  long long int base11 = args[11].dat->base_offset + 
           dat11 * 1 * (start[0] * args[11].stencil->stride[0]);
  base11 = base11+ dat11 *
    args[11].dat->size[0] *
    (start[1] * args[11].stencil->stride[1]);
  p_a[11] = (char *)args[11].data_d + base11;

  long long int base12 = args[12].dat->base_offset + 
           dat12 * 1 * (start[0] * args[12].stencil->stride[0]);
  base12 = base12+ dat12 *
    args[12].dat->size[0] *
    (start[1] * args[12].stencil->stride[1]);
  p_a[12] = (char *)args[12].data_d + base12;

  long long int base13 = args[13].dat->base_offset + 
           dat13 * 1 * (start[0] * args[13].stencil->stride[0]);
  base13 = base13+ dat13 *
    args[13].dat->size[0] *
    (start[1] * args[13].stencil->stride[1]);
  p_a[13] = (char *)args[13].data_d + base13;

  long long int base14 = args[14].dat->base_offset + 
           dat14 * 1 * (start[0] * args[14].stencil->stride[0]);
  base14 = base14+ dat14 *
    args[14].dat->size[0] *
    (start[1] * args[14].stencil->stride[1]);
  p_a[14] = (char *)args[14].data_d + base14;


  #ifndef OPS_LAZY
  ops_H_D_exchanges_device(args, 16);
  ops_halo_exchanges(args,16,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[29].mpi_time += t2-t1;
  }


  //call kernel wrapper function, passing in pointers to data
  if (x_size > 0 && y_size > 0)
    hipLaunchKernelGGL(ops_opensbliblock00Kernel034,grid ,tblock ,0 ,0 , (double *)p_a[0], (double *)p_a[1],
         (double *)p_a[2], (double *)p_a[3],
         (double *)p_a[4], (double *)p_a[5],
         (double *)p_a[6], (double *)p_a[7],
         (double *)p_a[8], (double *)p_a[9],
         (double *)p_a[10], (double *)p_a[11],
         (double *)p_a[12], (double *)p_a[13],
         (double *)p_a[14], arg_idx[0], arg_idx[1],x_size, y_size);

  hipSafeCall(block->instance->ostream(), hipGetLastError());

  if (block->instance->OPS_diags>1) {
    hipSafeCall(block->instance->ostream(), hipDeviceSynchronize());
    ops_timers_core(&c1,&t1);
    block->instance->OPS_kernels[29].time += t1-t2;
  }

  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 16);
  ops_set_halo_dirtybit3(&args[12],range);
  ops_set_halo_dirtybit3(&args[13],range);
  ops_set_halo_dirtybit3(&args[14],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[29].mpi_time += t2-t1;
    block->instance->OPS_kernels[29].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[29].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[29].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[29].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[29].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[29].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[29].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[29].transfer += ops_compute_transfer(dim, start, end, &arg7);
    block->instance->OPS_kernels[29].transfer += ops_compute_transfer(dim, start, end, &arg8);
    block->instance->OPS_kernels[29].transfer += ops_compute_transfer(dim, start, end, &arg9);
    block->instance->OPS_kernels[29].transfer += ops_compute_transfer(dim, start, end, &arg10);
    block->instance->OPS_kernels[29].transfer += ops_compute_transfer(dim, start, end, &arg11);
    block->instance->OPS_kernels[29].transfer += ops_compute_transfer(dim, start, end, &arg12);
    block->instance->OPS_kernels[29].transfer += ops_compute_transfer(dim, start, end, &arg13);
    block->instance->OPS_kernels[29].transfer += ops_compute_transfer(dim, start, end, &arg14);
  }
}

#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel034(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3, ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7, ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11, ops_arg arg12, ops_arg arg13, ops_arg arg14, ops_arg arg15) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)calloc(1,sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 1;
  desc->index = 29;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 29;
  for ( int i=0; i<4; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 16;
  desc->args = (ops_arg*)malloc(16*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg2.dat->index;
  desc->args[3] = arg3;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg3.dat->index;
  desc->args[4] = arg4;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg4.dat->index;
  desc->args[5] = arg5;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg5.dat->index;
  desc->args[6] = arg6;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg6.dat->index;
  desc->args[7] = arg7;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg7.dat->index;
  desc->args[8] = arg8;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg8.dat->index;
  desc->args[9] = arg9;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg9.dat->index;
  desc->args[10] = arg10;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg10.dat->index;
  desc->args[11] = arg11;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg11.dat->index;
  desc->args[12] = arg12;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg12.dat->index;
  desc->args[13] = arg13;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg13.dat->index;
  desc->args[14] = arg14;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg14.dat->index;
  desc->args[15] = arg15;
  desc->function = ops_par_loop_opensbliblock00Kernel034_execute;
  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,29,"opensbliblock00Kernel034");
  }
  ops_enqueue_kernel(desc);
}
#endif
