//
// auto-generated by ops.py
//
__constant__ int dims_opensbliblock00Kernel004 [13][1];
static int dims_opensbliblock00Kernel004_h [13][1] = {0};

//user function
__device__

 void opensbliblock00Kernel004_gpu(const ACC<double> &a_B0,
  const ACC<double> &rhou1_B0,
  const ACC<double> &rho_B0,
  const ACC<double> &theta_B0,
  const ACC<double> &p_B0,
  const ACC<double> &rhoE_B0,
  const ACC<double> &u0_B0,
  const ACC<double> &u1_B0,
  const ACC<double> &rhou0_B0,
  ACC<double>
&wk7_B0,
  ACC<double> &wk4_B0,
  ACC<double> &wk6_B0,
  ACC<double> &wk5_B0)
{
   double max_lambda_1_00 = 0.0;
   double CF_35 = 0.0;
   double CS_20 = 0.0;
   double CS_10 = 0.0;
   double CF_15 = 0.0;
   double CS_23 = 0.0;
   double max_lambda_1_33 = 0.0;
   double CF_32 = 0.0;
   double CF_04 = 0.0;
   double CS_15 = 0.0;
   double CF_21 = 0.0;
   double CS_31 = 0.0;
   double CS_03 = 0.0;
   double alpha_0 = 0.0;
   double delta_0 = 0.0;
   double AVG_1_rho = 0.0;
   double CF_20 = 0.0;
   double CF_24 = 0.0;
   double CS_33 = 0.0;
   double CF_10 = 0.0;
   double CS_11 = 0.0;
   double CF_00 = 0.0;
   double AVG_1_1_LEV_33 = 0.0;
   double CF_25 = 0.0;
   double CF_01 = 0.0;
   double AVG_1_1_LEV_03 = 0.0;
   double inv_AVG_rho = 0.0;
   double CF_03 = 0.0;
   double CS_12 = 0.0;
   double beta_1 = 0.0;
   double inv_AVG_a = 0.0;
   double TENO_CT = 0.0;
   double AVG_1_1_LEV_22 = 0.0;
   double CF_11 = 0.0;
   double CS_02 = 0.0;
   double CS_05 = 0.0;
   double CF_31 = 0.0;
   double CF_14 = 0.0;
   double Recon_3 = 0.0;
   double CS_13 = 0.0;
   double AVG_1_1_LEV_11 = 0.0;
   double alpha_2 = 0.0;
   double CS_21 = 0.0;
   double CS_30 = 0.0;
   double inv_alpha_sum = 0.0;
   double AVG_1_1_LEV_23 = 0.0;
   double AVG_1_a = 0.0;
   double beta_2 = 0.0;
   double AVG_1_1_LEV_00 = 0.0;
   double max_lambda_1_22 = 0.0;
   double CS_04 = 0.0;
   double AVG_1_1_LEV_32 = 0.0;
   double alpha_1 = 0.0;
   double AVG_1_1_LEV_20 = 0.0;
   double AVG_1_u0 = 0.0;
   double delta_1 = 0.0;
   double AVG_1_inv_rho = 0.0;
   double CS_32 = 0.0;
   double Recon_2 = 0.0;
   double max_lambda_1_11 = 0.0;
   double beta_0 = 0.0;
   double CF_22 = 0.0;
   double CF_02 = 0.0;
   double CS_24 = 0.0;
   double CS_22 = 0.0;
   double AVG_1_1_LEV_30 = 0.0;
   double delta_2 = 0.0;
   double CS_25 = 0.0;
   double Recon_0 = 0.0;
   double CF_33 = 0.0;
   double CS_34 = 0.0;
   double AVG_1_u1 = 0.0;
   double CF_23 = 0.0;
   double CF_30 = 0.0;
   double Recon_1 = 0.0;
   double inv_omega_sum = 0.0;
   double CF_13 = 0.0;
   double AVG_1_1_LEV_02 = 0.0;
   double CF_05 = 0.0;
   double AVG_1_1_LEV_01 = 0.0;
   double AVG_1_1_LEV_21 = 0.0;
   double CF_12 = 0.0;
   double CS_01 = 0.0;
   double CS_35 = 0.0;
   double CS_00 = 0.0;
   double CF_34 = 0.0;
   double CS_14 = 0.0;
   double AVG_1_1_LEV_10 = 0.0;
   double AVG_1_1_LEV_31 = 0.0;
   AVG_1_rho = sqrt(rho_B0(0,0)*rho_B0(0,1));

   AVG_1_inv_rho = 1.0/(sqrt(rho_B0(0,0)) + sqrt(rho_B0(0,1)));

    AVG_1_u0 = AVG_1_inv_rho*(sqrt(rho_B0(0,0))*u0_B0(0,0) +
      sqrt(rho_B0(0,1))*u0_B0(0,1));

    AVG_1_u1 = AVG_1_inv_rho*(sqrt(rho_B0(0,0))*u1_B0(0,0) +
      sqrt(rho_B0(0,1))*u1_B0(0,1));

    AVG_1_a = sqrt(gamma_m1*(AVG_1_inv_rho*((p_B0(0,0) + rhoE_B0(0,0))/sqrt(rho_B0(0,0)) +
      (p_B0(0,1) + rhoE_B0(0,1))/sqrt(rho_B0(0,1))) - rc13*(pow(AVG_1_u0, 2) +
      pow(AVG_1_u1, 2))));

   inv_AVG_a = 1.0/AVG_1_a;

   inv_AVG_rho = 1.0/AVG_1_rho;

    AVG_1_1_LEV_00 = -rc13*(gama*pow(AVG_1_u0, 2)*pow(inv_AVG_a, 2) + gama*pow(AVG_1_u1, 2)*pow(inv_AVG_a, 2) -
      pow(AVG_1_u0, 2)*pow(inv_AVG_a, 2) - pow(AVG_1_u1, 2)*pow(inv_AVG_a, 2) - 2);

   AVG_1_1_LEV_01 = gamma_m1*AVG_1_u0*pow(inv_AVG_a, 2);

   AVG_1_1_LEV_02 = gamma_m1*AVG_1_u1*pow(inv_AVG_a, 2);

   AVG_1_1_LEV_03 = -gamma_m1*pow(inv_AVG_a, 2);

   AVG_1_1_LEV_10 = -AVG_1_u0*inv_AVG_rho;

   AVG_1_1_LEV_11 = inv_AVG_rho;

    AVG_1_1_LEV_20 = -0.353553390593274*inv_AVG_a*inv_AVG_rho*(-gama*pow(AVG_1_u0, 2) - gama*pow(AVG_1_u1, 2) +
      2*AVG_1_a*AVG_1_u1 + pow(AVG_1_u0, 2) + pow(AVG_1_u1, 2));

   AVG_1_1_LEV_21 = -0.707106781186547*gamma_m1*AVG_1_u0*inv_AVG_a*inv_AVG_rho;

   AVG_1_1_LEV_22 = 0.707106781186547*inv_AVG_a*inv_AVG_rho*(-gama*AVG_1_u1 + AVG_1_a + AVG_1_u1);

   AVG_1_1_LEV_23 = 0.707106781186547*gamma_m1*inv_AVG_a*inv_AVG_rho;

    AVG_1_1_LEV_30 = 0.353553390593274*inv_AVG_a*inv_AVG_rho*(gama*pow(AVG_1_u0, 2) + gama*pow(AVG_1_u1, 2) +
      2*AVG_1_a*AVG_1_u1 - pow(AVG_1_u0, 2) - pow(AVG_1_u1, 2));

   AVG_1_1_LEV_31 = -0.707106781186547*gamma_m1*AVG_1_u0*inv_AVG_a*inv_AVG_rho;

   AVG_1_1_LEV_32 = -0.707106781186547*inv_AVG_a*inv_AVG_rho*(gama*AVG_1_u1 + AVG_1_a - AVG_1_u1);

   AVG_1_1_LEV_33 = 0.707106781186547*gamma_m1*inv_AVG_a*inv_AVG_rho;

    CF_00 = AVG_1_1_LEV_00*rhou1_B0(0,-2) + AVG_1_1_LEV_01*rhou0_B0(0,-2)*u1_B0(0,-2) +
      AVG_1_1_LEV_02*p_B0(0,-2) + AVG_1_1_LEV_02*rhou1_B0(0,-2)*u1_B0(0,-2) +
      AVG_1_1_LEV_03*p_B0(0,-2)*u1_B0(0,-2) +
      AVG_1_1_LEV_03*rhoE_B0(0,-2)*u1_B0(0,-2);

   CF_10 = AVG_1_1_LEV_10*rhou1_B0(0,-2) + AVG_1_1_LEV_11*rhou0_B0(0,-2)*u1_B0(0,-2);

    CF_20 = AVG_1_1_LEV_20*rhou1_B0(0,-2) + AVG_1_1_LEV_21*rhou0_B0(0,-2)*u1_B0(0,-2) +
      AVG_1_1_LEV_22*p_B0(0,-2) + AVG_1_1_LEV_22*rhou1_B0(0,-2)*u1_B0(0,-2) +
      AVG_1_1_LEV_23*p_B0(0,-2)*u1_B0(0,-2) +
      AVG_1_1_LEV_23*rhoE_B0(0,-2)*u1_B0(0,-2);

    CF_30 = AVG_1_1_LEV_30*rhou1_B0(0,-2) + AVG_1_1_LEV_31*rhou0_B0(0,-2)*u1_B0(0,-2) +
      AVG_1_1_LEV_32*p_B0(0,-2) + AVG_1_1_LEV_32*rhou1_B0(0,-2)*u1_B0(0,-2) +
      AVG_1_1_LEV_33*p_B0(0,-2)*u1_B0(0,-2) +
      AVG_1_1_LEV_33*rhoE_B0(0,-2)*u1_B0(0,-2);

    CF_01 = AVG_1_1_LEV_00*rhou1_B0(0,-1) + AVG_1_1_LEV_01*rhou0_B0(0,-1)*u1_B0(0,-1) +
      AVG_1_1_LEV_02*p_B0(0,-1) + AVG_1_1_LEV_02*rhou1_B0(0,-1)*u1_B0(0,-1) +
      AVG_1_1_LEV_03*p_B0(0,-1)*u1_B0(0,-1) +
      AVG_1_1_LEV_03*rhoE_B0(0,-1)*u1_B0(0,-1);

   CF_11 = AVG_1_1_LEV_10*rhou1_B0(0,-1) + AVG_1_1_LEV_11*rhou0_B0(0,-1)*u1_B0(0,-1);

    CF_21 = AVG_1_1_LEV_20*rhou1_B0(0,-1) + AVG_1_1_LEV_21*rhou0_B0(0,-1)*u1_B0(0,-1) +
      AVG_1_1_LEV_22*p_B0(0,-1) + AVG_1_1_LEV_22*rhou1_B0(0,-1)*u1_B0(0,-1) +
      AVG_1_1_LEV_23*p_B0(0,-1)*u1_B0(0,-1) +
      AVG_1_1_LEV_23*rhoE_B0(0,-1)*u1_B0(0,-1);

    CF_31 = AVG_1_1_LEV_30*rhou1_B0(0,-1) + AVG_1_1_LEV_31*rhou0_B0(0,-1)*u1_B0(0,-1) +
      AVG_1_1_LEV_32*p_B0(0,-1) + AVG_1_1_LEV_32*rhou1_B0(0,-1)*u1_B0(0,-1) +
      AVG_1_1_LEV_33*p_B0(0,-1)*u1_B0(0,-1) +
      AVG_1_1_LEV_33*rhoE_B0(0,-1)*u1_B0(0,-1);

    CF_02 = AVG_1_1_LEV_00*rhou1_B0(0,0) + AVG_1_1_LEV_01*rhou0_B0(0,0)*u1_B0(0,0) +
      AVG_1_1_LEV_02*p_B0(0,0) + AVG_1_1_LEV_02*rhou1_B0(0,0)*u1_B0(0,0) +
      AVG_1_1_LEV_03*p_B0(0,0)*u1_B0(0,0) +
      AVG_1_1_LEV_03*rhoE_B0(0,0)*u1_B0(0,0);

   CF_12 = AVG_1_1_LEV_10*rhou1_B0(0,0) + AVG_1_1_LEV_11*rhou0_B0(0,0)*u1_B0(0,0);

    CF_22 = AVG_1_1_LEV_20*rhou1_B0(0,0) + AVG_1_1_LEV_21*rhou0_B0(0,0)*u1_B0(0,0) +
      AVG_1_1_LEV_22*p_B0(0,0) + AVG_1_1_LEV_22*rhou1_B0(0,0)*u1_B0(0,0) +
      AVG_1_1_LEV_23*p_B0(0,0)*u1_B0(0,0) +
      AVG_1_1_LEV_23*rhoE_B0(0,0)*u1_B0(0,0);

    CF_32 = AVG_1_1_LEV_30*rhou1_B0(0,0) + AVG_1_1_LEV_31*rhou0_B0(0,0)*u1_B0(0,0) +
      AVG_1_1_LEV_32*p_B0(0,0) + AVG_1_1_LEV_32*rhou1_B0(0,0)*u1_B0(0,0) +
      AVG_1_1_LEV_33*p_B0(0,0)*u1_B0(0,0) +
      AVG_1_1_LEV_33*rhoE_B0(0,0)*u1_B0(0,0);

    CF_03 = AVG_1_1_LEV_00*rhou1_B0(0,1) + AVG_1_1_LEV_01*rhou0_B0(0,1)*u1_B0(0,1) +
      AVG_1_1_LEV_02*p_B0(0,1) + AVG_1_1_LEV_02*rhou1_B0(0,1)*u1_B0(0,1) +
      AVG_1_1_LEV_03*p_B0(0,1)*u1_B0(0,1) +
      AVG_1_1_LEV_03*rhoE_B0(0,1)*u1_B0(0,1);

   CF_13 = AVG_1_1_LEV_10*rhou1_B0(0,1) + AVG_1_1_LEV_11*rhou0_B0(0,1)*u1_B0(0,1);

    CF_23 = AVG_1_1_LEV_20*rhou1_B0(0,1) + AVG_1_1_LEV_21*rhou0_B0(0,1)*u1_B0(0,1) +
      AVG_1_1_LEV_22*p_B0(0,1) + AVG_1_1_LEV_22*rhou1_B0(0,1)*u1_B0(0,1) +
      AVG_1_1_LEV_23*p_B0(0,1)*u1_B0(0,1) +
      AVG_1_1_LEV_23*rhoE_B0(0,1)*u1_B0(0,1);

    CF_33 = AVG_1_1_LEV_30*rhou1_B0(0,1) + AVG_1_1_LEV_31*rhou0_B0(0,1)*u1_B0(0,1) +
      AVG_1_1_LEV_32*p_B0(0,1) + AVG_1_1_LEV_32*rhou1_B0(0,1)*u1_B0(0,1) +
      AVG_1_1_LEV_33*p_B0(0,1)*u1_B0(0,1) +
      AVG_1_1_LEV_33*rhoE_B0(0,1)*u1_B0(0,1);

    CF_04 = AVG_1_1_LEV_00*rhou1_B0(0,2) + AVG_1_1_LEV_01*rhou0_B0(0,2)*u1_B0(0,2) +
      AVG_1_1_LEV_02*p_B0(0,2) + AVG_1_1_LEV_02*rhou1_B0(0,2)*u1_B0(0,2) +
      AVG_1_1_LEV_03*p_B0(0,2)*u1_B0(0,2) +
      AVG_1_1_LEV_03*rhoE_B0(0,2)*u1_B0(0,2);

   CF_14 = AVG_1_1_LEV_10*rhou1_B0(0,2) + AVG_1_1_LEV_11*rhou0_B0(0,2)*u1_B0(0,2);

    CF_24 = AVG_1_1_LEV_20*rhou1_B0(0,2) + AVG_1_1_LEV_21*rhou0_B0(0,2)*u1_B0(0,2) +
      AVG_1_1_LEV_22*p_B0(0,2) + AVG_1_1_LEV_22*rhou1_B0(0,2)*u1_B0(0,2) +
      AVG_1_1_LEV_23*p_B0(0,2)*u1_B0(0,2) +
      AVG_1_1_LEV_23*rhoE_B0(0,2)*u1_B0(0,2);

    CF_34 = AVG_1_1_LEV_30*rhou1_B0(0,2) + AVG_1_1_LEV_31*rhou0_B0(0,2)*u1_B0(0,2) +
      AVG_1_1_LEV_32*p_B0(0,2) + AVG_1_1_LEV_32*rhou1_B0(0,2)*u1_B0(0,2) +
      AVG_1_1_LEV_33*p_B0(0,2)*u1_B0(0,2) +
      AVG_1_1_LEV_33*rhoE_B0(0,2)*u1_B0(0,2);

    CF_05 = AVG_1_1_LEV_00*rhou1_B0(0,3) + AVG_1_1_LEV_01*rhou0_B0(0,3)*u1_B0(0,3) +
      AVG_1_1_LEV_02*p_B0(0,3) + AVG_1_1_LEV_02*rhou1_B0(0,3)*u1_B0(0,3) +
      AVG_1_1_LEV_03*p_B0(0,3)*u1_B0(0,3) +
      AVG_1_1_LEV_03*rhoE_B0(0,3)*u1_B0(0,3);

   CF_15 = AVG_1_1_LEV_10*rhou1_B0(0,3) + AVG_1_1_LEV_11*rhou0_B0(0,3)*u1_B0(0,3);

    CF_25 = AVG_1_1_LEV_20*rhou1_B0(0,3) + AVG_1_1_LEV_21*rhou0_B0(0,3)*u1_B0(0,3) +
      AVG_1_1_LEV_22*p_B0(0,3) + AVG_1_1_LEV_22*rhou1_B0(0,3)*u1_B0(0,3) +
      AVG_1_1_LEV_23*p_B0(0,3)*u1_B0(0,3) +
      AVG_1_1_LEV_23*rhoE_B0(0,3)*u1_B0(0,3);

    CF_35 = AVG_1_1_LEV_30*rhou1_B0(0,3) + AVG_1_1_LEV_31*rhou0_B0(0,3)*u1_B0(0,3) +
      AVG_1_1_LEV_32*p_B0(0,3) + AVG_1_1_LEV_32*rhou1_B0(0,3)*u1_B0(0,3) +
      AVG_1_1_LEV_33*p_B0(0,3)*u1_B0(0,3) +
      AVG_1_1_LEV_33*rhoE_B0(0,3)*u1_B0(0,3);

    CS_00 = AVG_1_1_LEV_00*rho_B0(0,-2) + AVG_1_1_LEV_01*rhou0_B0(0,-2) +
      AVG_1_1_LEV_02*rhou1_B0(0,-2) + AVG_1_1_LEV_03*rhoE_B0(0,-2);

    CS_01 = AVG_1_1_LEV_00*rho_B0(0,-1) + AVG_1_1_LEV_01*rhou0_B0(0,-1) +
      AVG_1_1_LEV_02*rhou1_B0(0,-1) + AVG_1_1_LEV_03*rhoE_B0(0,-1);

    CS_02 = AVG_1_1_LEV_00*rho_B0(0,0) + AVG_1_1_LEV_01*rhou0_B0(0,0) +
      AVG_1_1_LEV_02*rhou1_B0(0,0) + AVG_1_1_LEV_03*rhoE_B0(0,0);

    CS_03 = AVG_1_1_LEV_00*rho_B0(0,1) + AVG_1_1_LEV_01*rhou0_B0(0,1) +
      AVG_1_1_LEV_02*rhou1_B0(0,1) + AVG_1_1_LEV_03*rhoE_B0(0,1);

    CS_04 = AVG_1_1_LEV_00*rho_B0(0,2) + AVG_1_1_LEV_01*rhou0_B0(0,2) +
      AVG_1_1_LEV_02*rhou1_B0(0,2) + AVG_1_1_LEV_03*rhoE_B0(0,2);

    CS_05 = AVG_1_1_LEV_00*rho_B0(0,3) + AVG_1_1_LEV_01*rhou0_B0(0,3) +
      AVG_1_1_LEV_02*rhou1_B0(0,3) + AVG_1_1_LEV_03*rhoE_B0(0,3);

   CS_10 = AVG_1_1_LEV_10*rho_B0(0,-2) + AVG_1_1_LEV_11*rhou0_B0(0,-2);

   CS_11 = AVG_1_1_LEV_10*rho_B0(0,-1) + AVG_1_1_LEV_11*rhou0_B0(0,-1);

   CS_12 = AVG_1_1_LEV_10*rho_B0(0,0) + AVG_1_1_LEV_11*rhou0_B0(0,0);

   CS_13 = AVG_1_1_LEV_10*rho_B0(0,1) + AVG_1_1_LEV_11*rhou0_B0(0,1);

   CS_14 = AVG_1_1_LEV_10*rho_B0(0,2) + AVG_1_1_LEV_11*rhou0_B0(0,2);

   CS_15 = AVG_1_1_LEV_10*rho_B0(0,3) + AVG_1_1_LEV_11*rhou0_B0(0,3);

    CS_20 = AVG_1_1_LEV_20*rho_B0(0,-2) + AVG_1_1_LEV_21*rhou0_B0(0,-2) +
      AVG_1_1_LEV_22*rhou1_B0(0,-2) + AVG_1_1_LEV_23*rhoE_B0(0,-2);

    CS_21 = AVG_1_1_LEV_20*rho_B0(0,-1) + AVG_1_1_LEV_21*rhou0_B0(0,-1) +
      AVG_1_1_LEV_22*rhou1_B0(0,-1) + AVG_1_1_LEV_23*rhoE_B0(0,-1);

    CS_22 = AVG_1_1_LEV_20*rho_B0(0,0) + AVG_1_1_LEV_21*rhou0_B0(0,0) +
      AVG_1_1_LEV_22*rhou1_B0(0,0) + AVG_1_1_LEV_23*rhoE_B0(0,0);

    CS_23 = AVG_1_1_LEV_20*rho_B0(0,1) + AVG_1_1_LEV_21*rhou0_B0(0,1) +
      AVG_1_1_LEV_22*rhou1_B0(0,1) + AVG_1_1_LEV_23*rhoE_B0(0,1);

    CS_24 = AVG_1_1_LEV_20*rho_B0(0,2) + AVG_1_1_LEV_21*rhou0_B0(0,2) +
      AVG_1_1_LEV_22*rhou1_B0(0,2) + AVG_1_1_LEV_23*rhoE_B0(0,2);

    CS_25 = AVG_1_1_LEV_20*rho_B0(0,3) + AVG_1_1_LEV_21*rhou0_B0(0,3) +
      AVG_1_1_LEV_22*rhou1_B0(0,3) + AVG_1_1_LEV_23*rhoE_B0(0,3);

    CS_30 = AVG_1_1_LEV_30*rho_B0(0,-2) + AVG_1_1_LEV_31*rhou0_B0(0,-2) +
      AVG_1_1_LEV_32*rhou1_B0(0,-2) + AVG_1_1_LEV_33*rhoE_B0(0,-2);

    CS_31 = AVG_1_1_LEV_30*rho_B0(0,-1) + AVG_1_1_LEV_31*rhou0_B0(0,-1) +
      AVG_1_1_LEV_32*rhou1_B0(0,-1) + AVG_1_1_LEV_33*rhoE_B0(0,-1);

    CS_32 = AVG_1_1_LEV_30*rho_B0(0,0) + AVG_1_1_LEV_31*rhou0_B0(0,0) +
      AVG_1_1_LEV_32*rhou1_B0(0,0) + AVG_1_1_LEV_33*rhoE_B0(0,0);

    CS_33 = AVG_1_1_LEV_30*rho_B0(0,1) + AVG_1_1_LEV_31*rhou0_B0(0,1) +
      AVG_1_1_LEV_32*rhou1_B0(0,1) + AVG_1_1_LEV_33*rhoE_B0(0,1);

    CS_34 = AVG_1_1_LEV_30*rho_B0(0,2) + AVG_1_1_LEV_31*rhou0_B0(0,2) +
      AVG_1_1_LEV_32*rhou1_B0(0,2) + AVG_1_1_LEV_33*rhoE_B0(0,2);

    CS_35 = AVG_1_1_LEV_30*rho_B0(0,3) + AVG_1_1_LEV_31*rhou0_B0(0,3) +
      AVG_1_1_LEV_32*rhou1_B0(0,3) + AVG_1_1_LEV_33*rhoE_B0(0,3);

    max_lambda_1_00 = fmax(fabs(u1_B0(0,1)), fmax(fabs(u1_B0(0,-2)),
      fmax(fabs(u1_B0(0,-1)), fmax(fabs(u1_B0(0,2)), fmax(fabs(u1_B0(0,3)),
      fabs(u1_B0(0,0)))))));

   max_lambda_1_11 = max_lambda_1_00;

    max_lambda_1_22 = fmax(fabs(a_B0(0,3) + u1_B0(0,3)), fmax(fabs(a_B0(0,1) +
      u1_B0(0,1)), fmax(fabs(a_B0(0,0) + u1_B0(0,0)), fmax(fabs(a_B0(0,-1) +
      u1_B0(0,-1)), fmax(fabs(a_B0(0,-2) + u1_B0(0,-2)), fabs(a_B0(0,2) +
      u1_B0(0,2)))))));

    max_lambda_1_33 = fmax(fabs(a_B0(0,1) - u1_B0(0,1)), fmax(fabs(a_B0(0,-1) -
      u1_B0(0,-1)), fmax(fabs(a_B0(0,-2) - u1_B0(0,-2)), fmax(fabs(a_B0(0,0) -
      u1_B0(0,0)), fmax(fabs(a_B0(0,2) - u1_B0(0,2)), fabs(a_B0(0,3) -
      u1_B0(0,3)))))));

    TENO_CT = pow(10.0, -floor(teno_a1 - teno_a2*(-pow(-theta_B0(0,0) + 1, 4)*(4*theta_B0(0,0) + 1)
      + 1)));

    beta_0 = (rc9)*pow((rc13)*(CF_01 + CS_01*max_lambda_1_00) - rc13*(CF_03 + CS_03*max_lambda_1_00), 2) +
      (rc15)*pow((rc13)*(CF_01 + CS_01*max_lambda_1_00) - (CF_02 + CS_02*max_lambda_1_00) + (rc13)*(CF_03 +
      CS_03*max_lambda_1_00), 2);

    beta_1 = (rc15)*pow((rc13)*(CF_02 + CS_02*max_lambda_1_00) - (CF_03 + CS_03*max_lambda_1_00) + (rc13)*(CF_04 +
      CS_04*max_lambda_1_00), 2) + (rc9)*pow((rc16)*(CF_02 + CS_02*max_lambda_1_00) - 2*(CF_03 + CS_03*max_lambda_1_00)
      + (rc13)*(CF_04 + CS_04*max_lambda_1_00), 2);

    beta_2 = (rc9)*pow((rc13)*(CF_00 + CS_00*max_lambda_1_00) - 2*(CF_01 + CS_01*max_lambda_1_00) + (rc16)*(CF_02 +
      CS_02*max_lambda_1_00), 2) + (rc15)*pow((rc13)*(CF_00 + CS_00*max_lambda_1_00) - (CF_01 + CS_01*max_lambda_1_00) +
      (rc13)*(CF_02 + CS_02*max_lambda_1_00), 2);

   alpha_0 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_0), 6);

   alpha_1 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_1), 6);

   alpha_2 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_2), 6);

   inv_alpha_sum = 1.0/(alpha_0 + alpha_1 + alpha_2);

   delta_0 = ((alpha_0*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_1 = ((alpha_1*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_2 = ((alpha_2*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   inv_omega_sum = 1.0/((rc17)*delta_0 + (rc18)*delta_1 + (rc19)*delta_2);

    Recon_0 = Recon_0 + (rc17)*delta_0*inv_omega_sum*(-rc11*(CF_01 + CS_01*max_lambda_1_00) + (rc20)*(CF_02 +
      CS_02*max_lambda_1_00) + (rc21)*(CF_03 + CS_03*max_lambda_1_00)) + (rc18)*delta_1*inv_omega_sum*((rc21)*(CF_02 +
      CS_02*max_lambda_1_00) + (rc20)*(CF_03 + CS_03*max_lambda_1_00) - rc11*(CF_04 + CS_04*max_lambda_1_00)) +
      (rc19)*delta_2*inv_omega_sum*((rc21)*(CF_00 + CS_00*max_lambda_1_00) - rc22*(CF_01 + CS_01*max_lambda_1_00) +
      (rc23)*(CF_02 + CS_02*max_lambda_1_00));

    beta_0 = (rc9)*pow((rc13)*(CF_02 - CS_02*max_lambda_1_00) - rc13*(CF_04 - CS_04*max_lambda_1_00), 2) +
      (rc15)*pow((rc13)*(CF_02 - CS_02*max_lambda_1_00) - (CF_03 - CS_03*max_lambda_1_00) + (rc13)*(CF_04 -
      CS_04*max_lambda_1_00), 2);

    beta_1 = (rc9)*pow((rc13)*(CF_01 - CS_01*max_lambda_1_00) - 2*(CF_02 - CS_02*max_lambda_1_00) + (rc16)*(CF_03 -
      CS_03*max_lambda_1_00), 2) + (rc15)*pow((rc13)*(CF_01 - CS_01*max_lambda_1_00) - (CF_02 - CS_02*max_lambda_1_00) +
      (rc13)*(CF_03 - CS_03*max_lambda_1_00), 2);

    beta_2 = (rc15)*pow((rc13)*(CF_03 - CS_03*max_lambda_1_00) - (CF_04 - CS_04*max_lambda_1_00) + (rc13)*(CF_05 -
      CS_05*max_lambda_1_00), 2) + (rc9)*pow((rc16)*(CF_03 - CS_03*max_lambda_1_00) - 2*(CF_04 - CS_04*max_lambda_1_00)
      + (rc13)*(CF_05 - CS_05*max_lambda_1_00), 2);

   alpha_0 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_0), 6);

   alpha_1 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_1), 6);

   alpha_2 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_2), 6);

   inv_alpha_sum = 1.0/(alpha_0 + alpha_1 + alpha_2);

   delta_0 = ((alpha_0*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_1 = ((alpha_1*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_2 = ((alpha_2*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   inv_omega_sum = 1.0/((rc17)*delta_0 + (rc18)*delta_1 + (rc19)*delta_2);

    Recon_0 = Recon_0 + (rc17)*delta_0*inv_omega_sum*((rc21)*(CF_02 - CS_02*max_lambda_1_00) + (rc20)*(CF_03 -
      CS_03*max_lambda_1_00) - rc11*(CF_04 - CS_04*max_lambda_1_00)) + (rc18)*delta_1*inv_omega_sum*(-rc11*(CF_01 -
      CS_01*max_lambda_1_00) + (rc20)*(CF_02 - CS_02*max_lambda_1_00) + (rc21)*(CF_03 - CS_03*max_lambda_1_00)) +
      (rc19)*delta_2*inv_omega_sum*((rc23)*(CF_03 - CS_03*max_lambda_1_00) - rc22*(CF_04 - CS_04*max_lambda_1_00) +
      (rc21)*(CF_05 - CS_05*max_lambda_1_00));

    beta_0 = (rc9)*pow((rc13)*(CF_11 + CS_11*max_lambda_1_11) - rc13*(CF_13 + CS_13*max_lambda_1_11), 2) +
      (rc15)*pow((rc13)*(CF_11 + CS_11*max_lambda_1_11) - (CF_12 + CS_12*max_lambda_1_11) + (rc13)*(CF_13 +
      CS_13*max_lambda_1_11), 2);

    beta_1 = (rc15)*pow((rc13)*(CF_12 + CS_12*max_lambda_1_11) - (CF_13 + CS_13*max_lambda_1_11) + (rc13)*(CF_14 +
      CS_14*max_lambda_1_11), 2) + (rc9)*pow((rc16)*(CF_12 + CS_12*max_lambda_1_11) - 2*(CF_13 + CS_13*max_lambda_1_11)
      + (rc13)*(CF_14 + CS_14*max_lambda_1_11), 2);

    beta_2 = (rc9)*pow((rc13)*(CF_10 + CS_10*max_lambda_1_11) - 2*(CF_11 + CS_11*max_lambda_1_11) + (rc16)*(CF_12 +
      CS_12*max_lambda_1_11), 2) + (rc15)*pow((rc13)*(CF_10 + CS_10*max_lambda_1_11) - (CF_11 + CS_11*max_lambda_1_11) +
      (rc13)*(CF_12 + CS_12*max_lambda_1_11), 2);

   alpha_0 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_0), 6);

   alpha_1 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_1), 6);

   alpha_2 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_2), 6);

   inv_alpha_sum = 1.0/(alpha_0 + alpha_1 + alpha_2);

   delta_0 = ((alpha_0*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_1 = ((alpha_1*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_2 = ((alpha_2*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   inv_omega_sum = 1.0/((rc17)*delta_0 + (rc18)*delta_1 + (rc19)*delta_2);

    Recon_1 = Recon_1 + (rc17)*delta_0*inv_omega_sum*(-rc11*(CF_11 + CS_11*max_lambda_1_11) + (rc20)*(CF_12 +
      CS_12*max_lambda_1_11) + (rc21)*(CF_13 + CS_13*max_lambda_1_11)) + (rc18)*delta_1*inv_omega_sum*((rc21)*(CF_12 +
      CS_12*max_lambda_1_11) + (rc20)*(CF_13 + CS_13*max_lambda_1_11) - rc11*(CF_14 + CS_14*max_lambda_1_11)) +
      (rc19)*delta_2*inv_omega_sum*((rc21)*(CF_10 + CS_10*max_lambda_1_11) - rc22*(CF_11 + CS_11*max_lambda_1_11) +
      (rc23)*(CF_12 + CS_12*max_lambda_1_11));

    beta_0 = (rc9)*pow((rc13)*(CF_12 - CS_12*max_lambda_1_11) - rc13*(CF_14 - CS_14*max_lambda_1_11), 2) +
      (rc15)*pow((rc13)*(CF_12 - CS_12*max_lambda_1_11) - (CF_13 - CS_13*max_lambda_1_11) + (rc13)*(CF_14 -
      CS_14*max_lambda_1_11), 2);

    beta_1 = (rc9)*pow((rc13)*(CF_11 - CS_11*max_lambda_1_11) - 2*(CF_12 - CS_12*max_lambda_1_11) + (rc16)*(CF_13 -
      CS_13*max_lambda_1_11), 2) + (rc15)*pow((rc13)*(CF_11 - CS_11*max_lambda_1_11) - (CF_12 - CS_12*max_lambda_1_11) +
      (rc13)*(CF_13 - CS_13*max_lambda_1_11), 2);

    beta_2 = (rc15)*pow((rc13)*(CF_13 - CS_13*max_lambda_1_11) - (CF_14 - CS_14*max_lambda_1_11) + (rc13)*(CF_15 -
      CS_15*max_lambda_1_11), 2) + (rc9)*pow((rc16)*(CF_13 - CS_13*max_lambda_1_11) - 2*(CF_14 - CS_14*max_lambda_1_11)
      + (rc13)*(CF_15 - CS_15*max_lambda_1_11), 2);

   alpha_0 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_0), 6);

   alpha_1 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_1), 6);

   alpha_2 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_2), 6);

   inv_alpha_sum = 1.0/(alpha_0 + alpha_1 + alpha_2);

   delta_0 = ((alpha_0*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_1 = ((alpha_1*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_2 = ((alpha_2*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   inv_omega_sum = 1.0/((rc17)*delta_0 + (rc18)*delta_1 + (rc19)*delta_2);

    Recon_1 = Recon_1 + (rc17)*delta_0*inv_omega_sum*((rc21)*(CF_12 - CS_12*max_lambda_1_11) + (rc20)*(CF_13 -
      CS_13*max_lambda_1_11) - rc11*(CF_14 - CS_14*max_lambda_1_11)) + (rc18)*delta_1*inv_omega_sum*(-rc11*(CF_11 -
      CS_11*max_lambda_1_11) + (rc20)*(CF_12 - CS_12*max_lambda_1_11) + (rc21)*(CF_13 - CS_13*max_lambda_1_11)) +
      (rc19)*delta_2*inv_omega_sum*((rc23)*(CF_13 - CS_13*max_lambda_1_11) - rc22*(CF_14 - CS_14*max_lambda_1_11) +
      (rc21)*(CF_15 - CS_15*max_lambda_1_11));

    beta_0 = (rc9)*pow((rc13)*(CF_21 + CS_21*max_lambda_1_22) - rc13*(CF_23 + CS_23*max_lambda_1_22), 2) +
      (rc15)*pow((rc13)*(CF_21 + CS_21*max_lambda_1_22) - (CF_22 + CS_22*max_lambda_1_22) + (rc13)*(CF_23 +
      CS_23*max_lambda_1_22), 2);

    beta_1 = (rc15)*pow((rc13)*(CF_22 + CS_22*max_lambda_1_22) - (CF_23 + CS_23*max_lambda_1_22) + (rc13)*(CF_24 +
      CS_24*max_lambda_1_22), 2) + (rc9)*pow((rc16)*(CF_22 + CS_22*max_lambda_1_22) - 2*(CF_23 + CS_23*max_lambda_1_22)
      + (rc13)*(CF_24 + CS_24*max_lambda_1_22), 2);

    beta_2 = (rc9)*pow((rc13)*(CF_20 + CS_20*max_lambda_1_22) - 2*(CF_21 + CS_21*max_lambda_1_22) + (rc16)*(CF_22 +
      CS_22*max_lambda_1_22), 2) + (rc15)*pow((rc13)*(CF_20 + CS_20*max_lambda_1_22) - (CF_21 + CS_21*max_lambda_1_22) +
      (rc13)*(CF_22 + CS_22*max_lambda_1_22), 2);

   alpha_0 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_0), 6);

   alpha_1 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_1), 6);

   alpha_2 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_2), 6);

   inv_alpha_sum = 1.0/(alpha_0 + alpha_1 + alpha_2);

   delta_0 = ((alpha_0*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_1 = ((alpha_1*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_2 = ((alpha_2*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   inv_omega_sum = 1.0/((rc17)*delta_0 + (rc18)*delta_1 + (rc19)*delta_2);

    Recon_2 = Recon_2 + (rc17)*delta_0*inv_omega_sum*(-rc11*(CF_21 + CS_21*max_lambda_1_22) + (rc20)*(CF_22 +
      CS_22*max_lambda_1_22) + (rc21)*(CF_23 + CS_23*max_lambda_1_22)) + (rc18)*delta_1*inv_omega_sum*((rc21)*(CF_22 +
      CS_22*max_lambda_1_22) + (rc20)*(CF_23 + CS_23*max_lambda_1_22) - rc11*(CF_24 + CS_24*max_lambda_1_22)) +
      (rc19)*delta_2*inv_omega_sum*((rc21)*(CF_20 + CS_20*max_lambda_1_22) - rc22*(CF_21 + CS_21*max_lambda_1_22) +
      (rc23)*(CF_22 + CS_22*max_lambda_1_22));

    beta_0 = (rc9)*pow((rc13)*(CF_22 - CS_22*max_lambda_1_22) - rc13*(CF_24 - CS_24*max_lambda_1_22), 2) +
      (rc15)*pow((rc13)*(CF_22 - CS_22*max_lambda_1_22) - (CF_23 - CS_23*max_lambda_1_22) + (rc13)*(CF_24 -
      CS_24*max_lambda_1_22), 2);

    beta_1 = (rc9)*pow((rc13)*(CF_21 - CS_21*max_lambda_1_22) - 2*(CF_22 - CS_22*max_lambda_1_22) + (rc16)*(CF_23 -
      CS_23*max_lambda_1_22), 2) + (rc15)*pow((rc13)*(CF_21 - CS_21*max_lambda_1_22) - (CF_22 - CS_22*max_lambda_1_22) +
      (rc13)*(CF_23 - CS_23*max_lambda_1_22), 2);

    beta_2 = (rc15)*pow((rc13)*(CF_23 - CS_23*max_lambda_1_22) - (CF_24 - CS_24*max_lambda_1_22) + (rc13)*(CF_25 -
      CS_25*max_lambda_1_22), 2) + (rc9)*pow((rc16)*(CF_23 - CS_23*max_lambda_1_22) - 2*(CF_24 - CS_24*max_lambda_1_22)
      + (rc13)*(CF_25 - CS_25*max_lambda_1_22), 2);

   alpha_0 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_0), 6);

   alpha_1 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_1), 6);

   alpha_2 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_2), 6);

   inv_alpha_sum = 1.0/(alpha_0 + alpha_1 + alpha_2);

   delta_0 = ((alpha_0*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_1 = ((alpha_1*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_2 = ((alpha_2*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   inv_omega_sum = 1.0/((rc17)*delta_0 + (rc18)*delta_1 + (rc19)*delta_2);

    Recon_2 = Recon_2 + (rc17)*delta_0*inv_omega_sum*((rc21)*(CF_22 - CS_22*max_lambda_1_22) + (rc20)*(CF_23 -
      CS_23*max_lambda_1_22) - rc11*(CF_24 - CS_24*max_lambda_1_22)) + (rc18)*delta_1*inv_omega_sum*(-rc11*(CF_21 -
      CS_21*max_lambda_1_22) + (rc20)*(CF_22 - CS_22*max_lambda_1_22) + (rc21)*(CF_23 - CS_23*max_lambda_1_22)) +
      (rc19)*delta_2*inv_omega_sum*((rc23)*(CF_23 - CS_23*max_lambda_1_22) - rc22*(CF_24 - CS_24*max_lambda_1_22) +
      (rc21)*(CF_25 - CS_25*max_lambda_1_22));

    beta_0 = (rc9)*pow((rc13)*(CF_31 + CS_31*max_lambda_1_33) - rc13*(CF_33 + CS_33*max_lambda_1_33), 2) +
      (rc15)*pow((rc13)*(CF_31 + CS_31*max_lambda_1_33) - (CF_32 + CS_32*max_lambda_1_33) + (rc13)*(CF_33 +
      CS_33*max_lambda_1_33), 2);

    beta_1 = (rc15)*pow((rc13)*(CF_32 + CS_32*max_lambda_1_33) - (CF_33 + CS_33*max_lambda_1_33) + (rc13)*(CF_34 +
      CS_34*max_lambda_1_33), 2) + (rc9)*pow((rc16)*(CF_32 + CS_32*max_lambda_1_33) - 2*(CF_33 + CS_33*max_lambda_1_33)
      + (rc13)*(CF_34 + CS_34*max_lambda_1_33), 2);

    beta_2 = (rc9)*pow((rc13)*(CF_30 + CS_30*max_lambda_1_33) - 2*(CF_31 + CS_31*max_lambda_1_33) + (rc16)*(CF_32 +
      CS_32*max_lambda_1_33), 2) + (rc15)*pow((rc13)*(CF_30 + CS_30*max_lambda_1_33) - (CF_31 + CS_31*max_lambda_1_33) +
      (rc13)*(CF_32 + CS_32*max_lambda_1_33), 2);

   alpha_0 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_0), 6);

   alpha_1 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_1), 6);

   alpha_2 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_2), 6);

   inv_alpha_sum = 1.0/(alpha_0 + alpha_1 + alpha_2);

   delta_0 = ((alpha_0*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_1 = ((alpha_1*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_2 = ((alpha_2*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   inv_omega_sum = 1.0/((rc17)*delta_0 + (rc18)*delta_1 + (rc19)*delta_2);

    Recon_3 = Recon_3 + (rc17)*delta_0*inv_omega_sum*(-rc11*(CF_31 + CS_31*max_lambda_1_33) + (rc20)*(CF_32 +
      CS_32*max_lambda_1_33) + (rc21)*(CF_33 + CS_33*max_lambda_1_33)) + (rc18)*delta_1*inv_omega_sum*((rc21)*(CF_32 +
      CS_32*max_lambda_1_33) + (rc20)*(CF_33 + CS_33*max_lambda_1_33) - rc11*(CF_34 + CS_34*max_lambda_1_33)) +
      (rc19)*delta_2*inv_omega_sum*((rc21)*(CF_30 + CS_30*max_lambda_1_33) - rc22*(CF_31 + CS_31*max_lambda_1_33) +
      (rc23)*(CF_32 + CS_32*max_lambda_1_33));

    beta_0 = (rc9)*pow((rc13)*(CF_32 - CS_32*max_lambda_1_33) - rc13*(CF_34 - CS_34*max_lambda_1_33), 2) +
      (rc15)*pow((rc13)*(CF_32 - CS_32*max_lambda_1_33) - (CF_33 - CS_33*max_lambda_1_33) + (rc13)*(CF_34 -
      CS_34*max_lambda_1_33), 2);

    beta_1 = (rc9)*pow((rc13)*(CF_31 - CS_31*max_lambda_1_33) - 2*(CF_32 - CS_32*max_lambda_1_33) + (rc16)*(CF_33 -
      CS_33*max_lambda_1_33), 2) + (rc15)*pow((rc13)*(CF_31 - CS_31*max_lambda_1_33) - (CF_32 - CS_32*max_lambda_1_33) +
      (rc13)*(CF_33 - CS_33*max_lambda_1_33), 2);

    beta_2 = (rc15)*pow((rc13)*(CF_33 - CS_33*max_lambda_1_33) - (CF_34 - CS_34*max_lambda_1_33) + (rc13)*(CF_35 -
      CS_35*max_lambda_1_33), 2) + (rc9)*pow((rc16)*(CF_33 - CS_33*max_lambda_1_33) - 2*(CF_34 - CS_34*max_lambda_1_33)
      + (rc13)*(CF_35 - CS_35*max_lambda_1_33), 2);

   alpha_0 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_0), 6);

   alpha_1 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_1), 6);

   alpha_2 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_2), 6);

   inv_alpha_sum = 1.0/(alpha_0 + alpha_1 + alpha_2);

   delta_0 = ((alpha_0*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_1 = ((alpha_1*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_2 = ((alpha_2*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   inv_omega_sum = 1.0/((rc17)*delta_0 + (rc18)*delta_1 + (rc19)*delta_2);

    Recon_3 = Recon_3 + (rc17)*delta_0*inv_omega_sum*((rc21)*(CF_32 - CS_32*max_lambda_1_33) + (rc20)*(CF_33 -
      CS_33*max_lambda_1_33) - rc11*(CF_34 - CS_34*max_lambda_1_33)) + (rc18)*delta_1*inv_omega_sum*(-rc11*(CF_31 -
      CS_31*max_lambda_1_33) + (rc20)*(CF_32 - CS_32*max_lambda_1_33) + (rc21)*(CF_33 - CS_33*max_lambda_1_33)) +
      (rc19)*delta_2*inv_omega_sum*((rc23)*(CF_33 - CS_33*max_lambda_1_33) - rc22*(CF_34 - CS_34*max_lambda_1_33) +
      (rc21)*(CF_35 - CS_35*max_lambda_1_33));

    wk4_B0(0,0) = 0.707106781186547*AVG_1_rho*Recon_2*inv_AVG_a +
      0.707106781186547*AVG_1_rho*Recon_3*inv_AVG_a + Recon_0;

    wk5_B0(0,0) = 0.707106781186547*AVG_1_rho*AVG_1_u0*Recon_2*inv_AVG_a +
      0.707106781186547*AVG_1_rho*AVG_1_u0*Recon_3*inv_AVG_a + AVG_1_rho*Recon_1 + AVG_1_u0*Recon_0;

    wk6_B0(0,0) = 0.707106781186547*AVG_1_rho*Recon_2*inv_AVG_a*(AVG_1_a + AVG_1_u1) +
      0.707106781186547*AVG_1_rho*Recon_3*inv_AVG_a*(-AVG_1_a + AVG_1_u1) + AVG_1_u1*Recon_0;

    wk7_B0(0,0) = AVG_1_rho*AVG_1_u0*Recon_1 +
      0.707106781186547*AVG_1_rho*Recon_2*inv_AVG_a*(rcinv24*((rc13)*gamma_m1*(pow(AVG_1_u0, 2) + pow(AVG_1_u1, 2)) +
      pow(AVG_1_a, 2)) + AVG_1_a*AVG_1_u1) +
      0.707106781186547*AVG_1_rho*Recon_3*inv_AVG_a*(rcinv24*((rc13)*gamma_m1*(pow(AVG_1_u0, 2) + pow(AVG_1_u1, 2)) +
      pow(AVG_1_a, 2)) - AVG_1_a*AVG_1_u1) + Recon_0*((rc13)*pow(AVG_1_u0, 2) + (rc13)*pow(AVG_1_u1, 2));

}



__global__ void ops_opensbliblock00Kernel004(
double* __restrict arg0,
double* __restrict arg1,
double* __restrict arg2,
double* __restrict arg3,
double* __restrict arg4,
double* __restrict arg5,
double* __restrict arg6,
double* __restrict arg7,
double* __restrict arg8,
double* __restrict arg9,
double* __restrict arg10,
double* __restrict arg11,
double* __restrict arg12,
int size0,
int size1 ){


  int idx_y = blockDim.y * blockIdx.y + threadIdx.y;
  int idx_x = blockDim.x * blockIdx.x + threadIdx.x;

  arg0 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel004[0][0];
  arg1 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel004[1][0];
  arg2 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel004[2][0];
  arg3 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel004[3][0];
  arg4 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel004[4][0];
  arg5 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel004[5][0];
  arg6 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel004[6][0];
  arg7 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel004[7][0];
  arg8 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel004[8][0];
  arg9 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel004[9][0];
  arg10 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel004[10][0];
  arg11 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel004[11][0];
  arg12 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel004[12][0];

  if (idx_x < size0 && idx_y < size1) {
    const ACC<double> argp0(dims_opensbliblock00Kernel004[0][0], arg0);
    const ACC<double> argp1(dims_opensbliblock00Kernel004[1][0], arg1);
    const ACC<double> argp2(dims_opensbliblock00Kernel004[2][0], arg2);
    const ACC<double> argp3(dims_opensbliblock00Kernel004[3][0], arg3);
    const ACC<double> argp4(dims_opensbliblock00Kernel004[4][0], arg4);
    const ACC<double> argp5(dims_opensbliblock00Kernel004[5][0], arg5);
    const ACC<double> argp6(dims_opensbliblock00Kernel004[6][0], arg6);
    const ACC<double> argp7(dims_opensbliblock00Kernel004[7][0], arg7);
    const ACC<double> argp8(dims_opensbliblock00Kernel004[8][0], arg8);
    ACC<double> argp9(dims_opensbliblock00Kernel004[9][0], arg9);
    ACC<double> argp10(dims_opensbliblock00Kernel004[10][0], arg10);
    ACC<double> argp11(dims_opensbliblock00Kernel004[11][0], arg11);
    ACC<double> argp12(dims_opensbliblock00Kernel004[12][0], arg12);
    opensbliblock00Kernel004_gpu(argp0, argp1, argp2, argp3,
                   argp4, argp5, argp6, argp7, argp8,
                   argp9, argp10, argp11, argp12);
  }

}

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel004(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7, ops_arg arg8,
 ops_arg arg9, ops_arg arg10, ops_arg arg11, ops_arg arg12) {
#else
void ops_par_loop_opensbliblock00Kernel004_execute(ops_kernel_descriptor *desc) {
  int dim = desc->dim;
  #if OPS_MPI
  ops_block block = desc->block;
  #endif
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  ops_arg arg9 = desc->args[9];
  ops_arg arg10 = desc->args[10];
  ops_arg arg11 = desc->args[11];
  ops_arg arg12 = desc->args[12];
  #endif

  //Timing
  double t1,t2,c1,c2;

  ops_arg args[13] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12};


  #if CHECKPOINTING && !OPS_LAZY
  if (!ops_checkpointing_before(args,13,range,19)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,19,"opensbliblock00Kernel004");
    block->instance->OPS_kernels[19].count++;
    ops_timers_core(&c1,&t1);
  }

  //compute locally allocated range for the sub-block
  int start[2];
  int end[2];
  #if OPS_MPI && !OPS_LAZY
  sub_block_list sb = OPS_sub_block_list[block->index];
  #endif //OPS_MPI

  #ifdef OPS_MPI
  int arg_idx[2];
  #endif
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<2; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 13,block, range, start, end, arg_idx) < 0) return;
  #endif

  int xdim0 = args[0].dat->size[0];
  int xdim1 = args[1].dat->size[0];
  int xdim2 = args[2].dat->size[0];
  int xdim3 = args[3].dat->size[0];
  int xdim4 = args[4].dat->size[0];
  int xdim5 = args[5].dat->size[0];
  int xdim6 = args[6].dat->size[0];
  int xdim7 = args[7].dat->size[0];
  int xdim8 = args[8].dat->size[0];
  int xdim9 = args[9].dat->size[0];
  int xdim10 = args[10].dat->size[0];
  int xdim11 = args[11].dat->size[0];
  int xdim12 = args[12].dat->size[0];

  if (xdim0 != dims_opensbliblock00Kernel004_h[0][0] || xdim1 != dims_opensbliblock00Kernel004_h[1][0] || xdim2 != dims_opensbliblock00Kernel004_h[2][0] || xdim3 != dims_opensbliblock00Kernel004_h[3][0] || xdim4 != dims_opensbliblock00Kernel004_h[4][0] || xdim5 != dims_opensbliblock00Kernel004_h[5][0] || xdim6 != dims_opensbliblock00Kernel004_h[6][0] || xdim7 != dims_opensbliblock00Kernel004_h[7][0] || xdim8 != dims_opensbliblock00Kernel004_h[8][0] || xdim9 != dims_opensbliblock00Kernel004_h[9][0] || xdim10 != dims_opensbliblock00Kernel004_h[10][0] || xdim11 != dims_opensbliblock00Kernel004_h[11][0] || xdim12 != dims_opensbliblock00Kernel004_h[12][0]) {
    dims_opensbliblock00Kernel004_h[0][0] = xdim0;
    dims_opensbliblock00Kernel004_h[1][0] = xdim1;
    dims_opensbliblock00Kernel004_h[2][0] = xdim2;
    dims_opensbliblock00Kernel004_h[3][0] = xdim3;
    dims_opensbliblock00Kernel004_h[4][0] = xdim4;
    dims_opensbliblock00Kernel004_h[5][0] = xdim5;
    dims_opensbliblock00Kernel004_h[6][0] = xdim6;
    dims_opensbliblock00Kernel004_h[7][0] = xdim7;
    dims_opensbliblock00Kernel004_h[8][0] = xdim8;
    dims_opensbliblock00Kernel004_h[9][0] = xdim9;
    dims_opensbliblock00Kernel004_h[10][0] = xdim10;
    dims_opensbliblock00Kernel004_h[11][0] = xdim11;
    dims_opensbliblock00Kernel004_h[12][0] = xdim12;
    cutilSafeCall(block->instance->ostream(), cudaMemcpyToSymbol( dims_opensbliblock00Kernel004, dims_opensbliblock00Kernel004_h, sizeof(dims_opensbliblock00Kernel004)));
  }



  int x_size = MAX(0,end[0]-start[0]);
  int y_size = MAX(0,end[1]-start[1]);

  dim3 grid( (x_size-1)/block->instance->OPS_block_size_x+ 1, (y_size-1)/block->instance->OPS_block_size_y + 1, 1);
  dim3 tblock(block->instance->OPS_block_size_x,block->instance->OPS_block_size_y,block->instance->OPS_block_size_z);



  long long int dat0 = (block->instance->OPS_soa ? args[0].dat->type_size : args[0].dat->elem_size);
  long long int dat1 = (block->instance->OPS_soa ? args[1].dat->type_size : args[1].dat->elem_size);
  long long int dat2 = (block->instance->OPS_soa ? args[2].dat->type_size : args[2].dat->elem_size);
  long long int dat3 = (block->instance->OPS_soa ? args[3].dat->type_size : args[3].dat->elem_size);
  long long int dat4 = (block->instance->OPS_soa ? args[4].dat->type_size : args[4].dat->elem_size);
  long long int dat5 = (block->instance->OPS_soa ? args[5].dat->type_size : args[5].dat->elem_size);
  long long int dat6 = (block->instance->OPS_soa ? args[6].dat->type_size : args[6].dat->elem_size);
  long long int dat7 = (block->instance->OPS_soa ? args[7].dat->type_size : args[7].dat->elem_size);
  long long int dat8 = (block->instance->OPS_soa ? args[8].dat->type_size : args[8].dat->elem_size);
  long long int dat9 = (block->instance->OPS_soa ? args[9].dat->type_size : args[9].dat->elem_size);
  long long int dat10 = (block->instance->OPS_soa ? args[10].dat->type_size : args[10].dat->elem_size);
  long long int dat11 = (block->instance->OPS_soa ? args[11].dat->type_size : args[11].dat->elem_size);
  long long int dat12 = (block->instance->OPS_soa ? args[12].dat->type_size : args[12].dat->elem_size);

  char *p_a[13];

  //set up initial pointers
  long long int base0 = args[0].dat->base_offset + 
           dat0 * 1 * (start[0] * args[0].stencil->stride[0]);
  base0 = base0+ dat0 *
    args[0].dat->size[0] *
    (start[1] * args[0].stencil->stride[1]);
  p_a[0] = (char *)args[0].data_d + base0;

  long long int base1 = args[1].dat->base_offset + 
           dat1 * 1 * (start[0] * args[1].stencil->stride[0]);
  base1 = base1+ dat1 *
    args[1].dat->size[0] *
    (start[1] * args[1].stencil->stride[1]);
  p_a[1] = (char *)args[1].data_d + base1;

  long long int base2 = args[2].dat->base_offset + 
           dat2 * 1 * (start[0] * args[2].stencil->stride[0]);
  base2 = base2+ dat2 *
    args[2].dat->size[0] *
    (start[1] * args[2].stencil->stride[1]);
  p_a[2] = (char *)args[2].data_d + base2;

  long long int base3 = args[3].dat->base_offset + 
           dat3 * 1 * (start[0] * args[3].stencil->stride[0]);
  base3 = base3+ dat3 *
    args[3].dat->size[0] *
    (start[1] * args[3].stencil->stride[1]);
  p_a[3] = (char *)args[3].data_d + base3;

  long long int base4 = args[4].dat->base_offset + 
           dat4 * 1 * (start[0] * args[4].stencil->stride[0]);
  base4 = base4+ dat4 *
    args[4].dat->size[0] *
    (start[1] * args[4].stencil->stride[1]);
  p_a[4] = (char *)args[4].data_d + base4;

  long long int base5 = args[5].dat->base_offset + 
           dat5 * 1 * (start[0] * args[5].stencil->stride[0]);
  base5 = base5+ dat5 *
    args[5].dat->size[0] *
    (start[1] * args[5].stencil->stride[1]);
  p_a[5] = (char *)args[5].data_d + base5;

  long long int base6 = args[6].dat->base_offset + 
           dat6 * 1 * (start[0] * args[6].stencil->stride[0]);
  base6 = base6+ dat6 *
    args[6].dat->size[0] *
    (start[1] * args[6].stencil->stride[1]);
  p_a[6] = (char *)args[6].data_d + base6;

  long long int base7 = args[7].dat->base_offset + 
           dat7 * 1 * (start[0] * args[7].stencil->stride[0]);
  base7 = base7+ dat7 *
    args[7].dat->size[0] *
    (start[1] * args[7].stencil->stride[1]);
  p_a[7] = (char *)args[7].data_d + base7;

  long long int base8 = args[8].dat->base_offset + 
           dat8 * 1 * (start[0] * args[8].stencil->stride[0]);
  base8 = base8+ dat8 *
    args[8].dat->size[0] *
    (start[1] * args[8].stencil->stride[1]);
  p_a[8] = (char *)args[8].data_d + base8;

  long long int base9 = args[9].dat->base_offset + 
           dat9 * 1 * (start[0] * args[9].stencil->stride[0]);
  base9 = base9+ dat9 *
    args[9].dat->size[0] *
    (start[1] * args[9].stencil->stride[1]);
  p_a[9] = (char *)args[9].data_d + base9;

  long long int base10 = args[10].dat->base_offset + 
           dat10 * 1 * (start[0] * args[10].stencil->stride[0]);
  base10 = base10+ dat10 *
    args[10].dat->size[0] *
    (start[1] * args[10].stencil->stride[1]);
  p_a[10] = (char *)args[10].data_d + base10;

  long long int base11 = args[11].dat->base_offset + 
           dat11 * 1 * (start[0] * args[11].stencil->stride[0]);
  base11 = base11+ dat11 *
    args[11].dat->size[0] *
    (start[1] * args[11].stencil->stride[1]);
  p_a[11] = (char *)args[11].data_d + base11;

  long long int base12 = args[12].dat->base_offset + 
           dat12 * 1 * (start[0] * args[12].stencil->stride[0]);
  base12 = base12+ dat12 *
    args[12].dat->size[0] *
    (start[1] * args[12].stencil->stride[1]);
  p_a[12] = (char *)args[12].data_d + base12;


  #ifndef OPS_LAZY
  ops_H_D_exchanges_device(args, 13);
  ops_halo_exchanges(args,13,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[19].mpi_time += t2-t1;
  }


  //call kernel wrapper function, passing in pointers to data
  if (x_size > 0 && y_size > 0)
    ops_opensbliblock00Kernel004<<<grid, tblock >>> (  (double *)p_a[0], (double *)p_a[1],
         (double *)p_a[2], (double *)p_a[3],
         (double *)p_a[4], (double *)p_a[5],
         (double *)p_a[6], (double *)p_a[7],
         (double *)p_a[8], (double *)p_a[9],
         (double *)p_a[10], (double *)p_a[11],
         (double *)p_a[12],x_size, y_size);

  cutilSafeCall(block->instance->ostream(), cudaGetLastError());

  if (block->instance->OPS_diags>1) {
    cutilSafeCall(block->instance->ostream(), cudaDeviceSynchronize());
    ops_timers_core(&c1,&t1);
    block->instance->OPS_kernels[19].time += t1-t2;
  }

  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 13);
  ops_set_halo_dirtybit3(&args[9],range);
  ops_set_halo_dirtybit3(&args[10],range);
  ops_set_halo_dirtybit3(&args[11],range);
  ops_set_halo_dirtybit3(&args[12],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[19].mpi_time += t2-t1;
    block->instance->OPS_kernels[19].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[19].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[19].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[19].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[19].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[19].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[19].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[19].transfer += ops_compute_transfer(dim, start, end, &arg7);
    block->instance->OPS_kernels[19].transfer += ops_compute_transfer(dim, start, end, &arg8);
    block->instance->OPS_kernels[19].transfer += ops_compute_transfer(dim, start, end, &arg9);
    block->instance->OPS_kernels[19].transfer += ops_compute_transfer(dim, start, end, &arg10);
    block->instance->OPS_kernels[19].transfer += ops_compute_transfer(dim, start, end, &arg11);
    block->instance->OPS_kernels[19].transfer += ops_compute_transfer(dim, start, end, &arg12);
  }
}

#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel004(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3, ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7, ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11, ops_arg arg12) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)calloc(1,sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 1;
  desc->index = 19;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 19;
  for ( int i=0; i<4; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 13;
  desc->args = (ops_arg*)ops_malloc(13*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg2.dat->index;
  desc->args[3] = arg3;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg3.dat->index;
  desc->args[4] = arg4;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg4.dat->index;
  desc->args[5] = arg5;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg5.dat->index;
  desc->args[6] = arg6;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg6.dat->index;
  desc->args[7] = arg7;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg7.dat->index;
  desc->args[8] = arg8;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg8.dat->index;
  desc->args[9] = arg9;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg9.dat->index;
  desc->args[10] = arg10;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg10.dat->index;
  desc->args[11] = arg11;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg11.dat->index;
  desc->args[12] = arg12;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg12.dat->index;
  desc->function = ops_par_loop_opensbliblock00Kernel004_execute;
  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,19,"opensbliblock00Kernel004");
  }
  ops_enqueue_kernel(desc);
}
#endif
