//
// auto-generated by ops.py
//

#ifdef OCL_FMA
#pragma OPENCL FP_CONTRACT ON
#else
#pragma OPENCL FP_CONTRACT OFF
#endif
#pragma OPENCL EXTENSION cl_khr_fp64:enable

#define OPS_2D
#define OPS_API 2
#define OPS_NO_GLOBALS
#include "ops_macros.h"
#include "ops_opencl_reduction.h"

#ifndef MIN
#define MIN(a,b) ((a<b) ? (a) : (b))
#endif
#ifndef MAX
#define MAX(a,b) ((a>b) ? (a) : (b))
#endif
#ifndef SIGN
#define SIGN(a,b) ((b<0.0) ? (a*(-1)) : (a))
#endif
#define OPS_READ 0
#define OPS_WRITE 1
#define OPS_RW 2
#define OPS_INC 3
#define OPS_MIN 4
#define OPS_MAX 5

//user function

void opensbliblock00Kernel019(const ptr_double u0_B0,
  ptr_double wk0_B0,
  const int *idx, const int block0np1, const double inv_0, const double rc8, const double rc9, const double rc10, const double rc11)
{
    OPS_ACCS(wk0_B0, 0,0) = ((idx[1] == 0) ? (
   inv_0*(-rc9*OPS_ACCS(u0_B0, 0,4) + (rc10)*OPS_ACCS(u0_B0, 0,3) -
      3*OPS_ACCS(u0_B0, 0,2) + 4*OPS_ACCS(u0_B0, 0,1) - rc8*OPS_ACCS(u0_B0, 0,0))
)
: ((idx[1] == 1) ? (

      (rc11)*inv_0*(OPS_ACCS(u0_B0, 0,3) - 3*OPS_ACCS(u0_B0, 0,-1) - 6*OPS_ACCS(u0_B0, 0,2) + 18*OPS_ACCS(u0_B0, 0,1) -
      10*OPS_ACCS(u0_B0, 0,0))
)
: ((idx[1] == block0np1 - 1) ? (
   inv_0*(-4*OPS_ACCS(u0_B0, 0,-1) +
      3*OPS_ACCS(u0_B0, 0,-2) - rc10*OPS_ACCS(u0_B0, 0,-3) + (rc9)*OPS_ACCS(u0_B0, 0,-4) +
      (rc8)*OPS_ACCS(u0_B0, 0,0))
)
: ((idx[1] == block0np1 - 2) ? (
   (rc11)*inv_0*(-18*OPS_ACCS(u0_B0, 0,-1) +
      6*OPS_ACCS(u0_B0, 0,-2) - OPS_ACCS(u0_B0, 0,-3) + 3*OPS_ACCS(u0_B0, 0,1) + 10*OPS_ACCS(u0_B0, 0,0))
)
: (

      (rc11)*inv_0*(-8*OPS_ACCS(u0_B0, 0,-1) + 8*OPS_ACCS(u0_B0, 0,1) + OPS_ACCS(u0_B0, 0,-2) -
      OPS_ACCS(u0_B0, 0,2))
)))));

}


__kernel void ops_opensbliblock00Kernel019(
__global const double* restrict arg0,
__global double* restrict arg1,
const int block0np1,
const double inv_0,
const double rc8,
const double rc9,
const double rc10,
const double rc11,
const int base0,
const int base1,
int arg_idx0, int arg_idx1,
const int size0,
const int size1 ){


  int idx_y = get_global_id(1);
  int idx_x = get_global_id(0);

  int arg_idx[2];
  arg_idx[0] = arg_idx0+idx_x;
  arg_idx[1] = arg_idx1+idx_y;
  if (idx_x < size0 && idx_y < size1) {
    const ptr_double ptr0 = { &arg0[base0 + idx_x * 1*1 + idx_y * 1*1 * xdim0_opensbliblock00Kernel019], xdim0_opensbliblock00Kernel019};
    ptr_double ptr1 = { &arg1[base1 + idx_x * 1*1 + idx_y * 1*1 * xdim1_opensbliblock00Kernel019], xdim1_opensbliblock00Kernel019};
    opensbliblock00Kernel019(ptr0,
                                  ptr1,
                                  arg_idx,
                                  block0np1,
                                  inv_0,
                                  rc8,
                                  rc9,
                                  rc10,
                                  rc11);
  }

}
