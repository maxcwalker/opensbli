//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel002(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4) {
#else
void ops_par_loop_opensbliblock00Kernel002_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[5] = { arg0, arg1, arg2, arg3, arg4};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,5,range,14)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,14,"opensbliblock00Kernel002");
    block->instance->OPS_kernels[14].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "opensbliblock00Kernel002");
  #endif


  //compute locally allocated range for the sub-block
  int start[2];
  int end[2];
  int arg_idx[2];
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<2; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 5,block, range, start, end, arg_idx) < 0) return;
  #endif

  #if defined(OPS_MPI)
  #if defined(OPS_LAZY)
  sub_block_list sb = OPS_sub_block_list[block->index];
  arg_idx[0] = sb->decomp_disp[0];
  arg_idx[1] = sb->decomp_disp[1];
  #else
  arg_idx[0] -= start[0];
  arg_idx[1] -= start[1];
  #endif
  #else //OPS_MPI
  arg_idx[0] = 0;
  arg_idx[1] = 0;
  #endif //OPS_MPI

  //initialize global variable with the dimension of dats
  int xdim0_opensbliblock00Kernel002 = args[0].dat->size[0];
  int xdim1_opensbliblock00Kernel002 = args[1].dat->size[0];
  int xdim2_opensbliblock00Kernel002 = args[2].dat->size[0];
  int xdim3_opensbliblock00Kernel002 = args[3].dat->size[0];

  //set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset;
  double * __restrict__ u1_B0_p = (double *)(args[0].data + base0);

  int base1 = args[1].dat->base_offset;
  double * __restrict__ u0_B0_p = (double *)(args[1].data + base1);

  int base2 = args[2].dat->base_offset;
  double * __restrict__ D11_B0_p = (double *)(args[2].data + base2);

  int base3 = args[3].dat->base_offset;
  double * __restrict__ theta_B0_p = (double *)(args[3].data + base3);




  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_host(args, 5);
  ops_halo_exchanges(args,5,range);
  ops_H_D_exchanges_host(args, 5);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[14].mpi_time += __t1-__t2;
  }

  #pragma omp parallel for
  for ( int n_y=start[1]; n_y<end[1]; n_y++ ){
    #ifdef __INTEL_COMPILER
    #pragma loop_count(10000)
    #pragma omp simd
    #elif defined(__clang__)
    #pragma clang loop vectorize(assume_safety)
    #elif defined(__GNUC__)
    #pragma GCC ivdep
    #else
    #pragma simd
    #endif
    for ( int n_x=start[0]; n_x<end[0]; n_x++ ){
      int idx[] = {arg_idx[0]+n_x, arg_idx[1]+n_y};
      const ACC<double> u1_B0(xdim0_opensbliblock00Kernel002, u1_B0_p + n_x*1 + n_y * xdim0_opensbliblock00Kernel002*1);
      const ACC<double> u0_B0(xdim1_opensbliblock00Kernel002, u0_B0_p + n_x*1 + n_y * xdim1_opensbliblock00Kernel002*1);
      const ACC<double> D11_B0(xdim2_opensbliblock00Kernel002, D11_B0_p + n_x*1 + n_y * xdim2_opensbliblock00Kernel002*1);
      ACC<double> theta_B0(xdim3_opensbliblock00Kernel002, theta_B0_p + n_x*1 + n_y * xdim3_opensbliblock00Kernel002*1);
      
   double localeval_2 = 0.0;
   double localeval_3 = 0.0;
   double localeval_0 = 0.0;
   double localeval_1 = 0.0;
    localeval_0 = ((idx[0] == 0) ? (
   inv_0*(4*u1_B0(1,0) - rc10*u1_B0(0,0) +
      (rc9)*u1_B0(3,0) - rc8*u1_B0(4,0) - 3*u1_B0(2,0))
)
: ((idx[0] == 1) ? (

      (rc11)*inv_0*(18*u1_B0(1,0) - 10*u1_B0(0,0) + u1_B0(3,0) - 3*u1_B0(-1,0) -
      6*u1_B0(2,0))
)
: ((idx[0] == block0np0 - 1) ? (
   inv_0*((rc8)*u1_B0(-4,0) +
      (rc10)*u1_B0(0,0) + 3*u1_B0(-2,0) - 4*u1_B0(-1,0) - rc9*u1_B0(-3,0))
)
:
      ((idx[0] == block0np0 - 2) ? (
   (rc11)*inv_0*(3*u1_B0(1,0) + 10*u1_B0(0,0) +
      6*u1_B0(-2,0) - 18*u1_B0(-1,0) - u1_B0(-3,0))
)
: (

      (rc11)*inv_0*(-8*u1_B0(-1,0) + 8*u1_B0(1,0) + u1_B0(-2,0) -
      u1_B0(2,0))
)))));

    localeval_1 = ((idx[1] == 0) ? (
   inv_1*(-rc10*u1_B0(0,0) - rc8*u1_B0(0,4) +
      (rc9)*u1_B0(0,3) - 3*u1_B0(0,2) + 4*u1_B0(0,1))
)
: ((idx[1] == 1) ? (

      (rc11)*inv_1*(-3*u1_B0(0,-1) - 10*u1_B0(0,0) + u1_B0(0,3) - 6*u1_B0(0,2) +
      18*u1_B0(0,1))
)
: ((idx[1] == block0np1 - 1) ? (
   inv_1*(-4*u1_B0(0,-1) +
      3*u1_B0(0,-2) + (rc10)*u1_B0(0,0) - rc9*u1_B0(0,-3) +
      (rc8)*u1_B0(0,-4))
)
: ((idx[1] == block0np1 - 2) ? (
   (rc11)*inv_1*(-18*u1_B0(0,-1) +
      6*u1_B0(0,-2) + 10*u1_B0(0,0) - u1_B0(0,-3) + 3*u1_B0(0,1))
)
: (

      (rc11)*inv_1*(-8*u1_B0(0,-1) - u1_B0(0,2) + 8*u1_B0(0,1) +
      u1_B0(0,-2))
)))));

    localeval_2 = ((idx[0] == 0) ? (
   inv_0*(-3*u0_B0(2,0) + (rc9)*u0_B0(3,0) -
      rc10*u0_B0(0,0) + 4*u0_B0(1,0) - rc8*u0_B0(4,0))
)
: ((idx[0] == 1) ? (

      (rc11)*inv_0*(-6*u0_B0(2,0) - 3*u0_B0(-1,0) + u0_B0(3,0) - 10*u0_B0(0,0) +
      18*u0_B0(1,0))
)
: ((idx[0] == block0np0 - 1) ? (
   inv_0*(-4*u0_B0(-1,0) +
      3*u0_B0(-2,0) + (rc10)*u0_B0(0,0) + (rc8)*u0_B0(-4,0) -
      rc9*u0_B0(-3,0))
)
: ((idx[0] == block0np0 - 2) ? (
   (rc11)*inv_0*(-18*u0_B0(-1,0) +
      6*u0_B0(-2,0) + 10*u0_B0(0,0) + 3*u0_B0(1,0) - u0_B0(-3,0))
)
: (

      (rc11)*inv_0*(-8*u0_B0(-1,0) + 8*u0_B0(1,0) - u0_B0(2,0) +
      u0_B0(-2,0))
)))));

    localeval_3 = ((idx[1] == 0) ? (
   inv_1*((rc9)*u0_B0(0,3) - rc10*u0_B0(0,0) -
      rc8*u0_B0(0,4) + 4*u0_B0(0,1) - 3*u0_B0(0,2))
)
: ((idx[1] == 1) ? (

      (rc11)*inv_1*(u0_B0(0,3) - 3*u0_B0(0,-1) - 10*u0_B0(0,0) + 18*u0_B0(0,1) -
      6*u0_B0(0,2))
)
: ((idx[1] == block0np1 - 1) ? (
   inv_1*(-rc9*u0_B0(0,-3) -
      4*u0_B0(0,-1) + 3*u0_B0(0,-2) + (rc10)*u0_B0(0,0) + (rc8)*u0_B0(0,-4))
)
:
      ((idx[1] == block0np1 - 2) ? (
   (rc11)*inv_1*(-u0_B0(0,-3) - 18*u0_B0(0,-1) +
      6*u0_B0(0,-2) + 10*u0_B0(0,0) + 3*u0_B0(0,1))
)
: (

      (rc11)*inv_1*(-8*u0_B0(0,-1) + u0_B0(0,-2) - u0_B0(0,2) +
      8*u0_B0(0,1))
)))));

    theta_B0(0,0) = pow(localeval_1*D11_B0(0,0) + localeval_2,
      2)*(-rc13*tanh(250.0*localeval_1*D11_B0(0,0) + 250.0*localeval_2 + 2.5) + rc13)/(epsilon +
      pow(localeval_0 - localeval_3*D11_B0(0,0), 2) + pow(localeval_1*D11_B0(0,0) + localeval_2,
      2));


    }
  }
  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[14].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_host(args, 5);
  ops_set_halo_dirtybit3(&args[3],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[14].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[14].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[14].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[14].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[14].transfer += ops_compute_transfer(dim, start, end, &arg3);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel002(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)calloc(1,sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 0;
  desc->index = 14;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 14;
  for ( int i=0; i<4; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 5;
  desc->args = (ops_arg*)ops_malloc(5*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg2.dat->index;
  desc->args[3] = arg3;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg3.dat->index;
  desc->args[4] = arg4;
  desc->function = ops_par_loop_opensbliblock00Kernel002_execute;
  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,14,"opensbliblock00Kernel002");
  }
  ops_enqueue_kernel(desc);
}
#endif
