//
// auto-generated by ops.py
//
__constant__ int dims_opensbliblock00Kernel030 [8][1];
static int dims_opensbliblock00Kernel030_h [8][1] = {0};

//user function
__device__

 void opensbliblock00Kernel030_gpu(const ACC<double> &x0_B0,
  const ACC<double> &x1_B0,
  ACC<double> &D11_B0,
  ACC<double> &D00_B0,
  ACC<double> &D10_B0,
  ACC<double> &detJ_B0,
  ACC<double> &D01_B0,
  const int *idx)
{
   double localeval_2 = 0.0;
   double localeval_0 = 0.0;
   double localeval_1 = 0.0;
   double localeval_3 = 0.0;
    localeval_0 = ((idx[1] == 0) ? (
   inv_1*(1.06910315192207e-15*x0_B0(0,5) -
      1.50000000000003*x0_B0(0,2) + 0.333333333333356*x0_B0(0,3) -
      1.83333333333334*x0_B0(0,0) - 8.34657956545823e-15*x0_B0(0,4) +
      3.00000000000002*x0_B0(0,1))
)
: ((idx[1] == 1) ? (
   inv_1*(-0.376283677513354*x0_B0(0,-1) +
      0.0394168524399447*x0_B0(0,2) - 0.0658051057710389*x0_B0(0,3) -
      0.322484932882161*x0_B0(0,0) + 0.00571369039775442*x0_B0(0,4) +
      0.719443173328855*x0_B0(0,1))
)
: ((idx[1] == 2) ? (
   inv_1*(0.113446470384241*x0_B0(0,-2) -
      0.791245592765872*x0_B0(0,-1) - 0.0367146847001261*x0_B0(0,2) -
      0.00412637789557492*x0_B0(0,3) + 0.197184333887745*x0_B0(0,0) +
      0.521455851089587*x0_B0(0,1))
)
: ((idx[1] == 3) ? (
   inv_1*(0.121937153224065*x0_B0(0,-2) -
      0.727822147724592*x0_B0(0,-1) - 0.082033432844602*x0_B0(0,2) +
      0.0451033223343881*x0_B0(0,0) - 0.00932597985049999*x0_B0(0,-3) +
      0.652141084861241*x0_B0(0,1))
)
: ((idx[1] == block0np1 - 1) ? (

      inv_1*(1.50000000000003*x0_B0(0,-2) - 3.00000000000002*x0_B0(0,-1) -
      1.06910315192207e-15*x0_B0(0,-5) + 8.34657956545823e-15*x0_B0(0,-4) +
      1.83333333333334*x0_B0(0,0) - 0.333333333333356*x0_B0(0,-3))
)
: ((idx[1] == block0np1 - 2) ?
      (
   inv_1*(-0.0394168524399447*x0_B0(0,-2) - 0.719443173328855*x0_B0(0,-1) -
      0.00571369039775442*x0_B0(0,-4) + 0.322484932882161*x0_B0(0,0) +
      0.0658051057710389*x0_B0(0,-3) + 0.376283677513354*x0_B0(0,1))
)
: ((idx[1] == block0np1 - 3)
      ? (
   inv_1*(0.0367146847001261*x0_B0(0,-2) - 0.521455851089587*x0_B0(0,-1) -
      0.113446470384241*x0_B0(0,2) - 0.197184333887745*x0_B0(0,0) +
      0.00412637789557492*x0_B0(0,-3) + 0.791245592765872*x0_B0(0,1))
)
: ((idx[1] == block0np1 - 4)
      ? (
   inv_1*(-0.652141084861241*x0_B0(0,-1) + 0.082033432844602*x0_B0(0,-2) -
      0.121937153224065*x0_B0(0,2) + 0.00932597985049999*x0_B0(0,3) -
      0.0451033223343881*x0_B0(0,0) + 0.727822147724592*x0_B0(0,1))
)
: (

      (rc4)*inv_1*(x0_B0(0,-2) - 8*x0_B0(0,-1) + 8*x0_B0(0,1) -
      x0_B0(0,2))
)))))))));

    localeval_1 = (rc4)*inv_0*(-8*x1_B0(-1,0) + 8*x1_B0(1,0) - x1_B0(2,0) +
      x1_B0(-2,0));

    localeval_2 = (rc4)*inv_0*(8*x0_B0(1,0) - 8*x0_B0(-1,0) - x0_B0(2,0) +
      x0_B0(-2,0));

    localeval_3 = ((idx[1] == 0) ? (
   inv_1*(0.333333333333356*x1_B0(0,3) -
      1.83333333333334*x1_B0(0,0) - 8.34657956545823e-15*x1_B0(0,4) +
      3.00000000000002*x1_B0(0,1) + 1.06910315192207e-15*x1_B0(0,5) -
      1.50000000000003*x1_B0(0,2))
)
: ((idx[1] == 1) ? (
   inv_1*(-0.0658051057710389*x1_B0(0,3) -
      0.376283677513354*x1_B0(0,-1) - 0.322484932882161*x1_B0(0,0) +
      0.00571369039775442*x1_B0(0,4) + 0.719443173328855*x1_B0(0,1) +
      0.0394168524399447*x1_B0(0,2))
)
: ((idx[1] == 2) ? (

      inv_1*(-0.00412637789557492*x1_B0(0,3) + 0.113446470384241*x1_B0(0,-2) -
      0.791245592765872*x1_B0(0,-1) + 0.197184333887745*x1_B0(0,0) +
      0.521455851089587*x1_B0(0,1) - 0.0367146847001261*x1_B0(0,2))
)
: ((idx[1] == 3) ? (

      inv_1*(-0.00932597985049999*x1_B0(0,-3) + 0.121937153224065*x1_B0(0,-2) -
      0.727822147724592*x1_B0(0,-1) + 0.0451033223343881*x1_B0(0,0) +
      0.652141084861241*x1_B0(0,1) - 0.082033432844602*x1_B0(0,2))
)
: ((idx[1] == block0np1 - 1) ?
      (
   inv_1*(-0.333333333333356*x1_B0(0,-3) + 1.50000000000003*x1_B0(0,-2) -
      3.00000000000002*x1_B0(0,-1) - 1.06910315192207e-15*x1_B0(0,-5) +
      1.83333333333334*x1_B0(0,0) + 8.34657956545823e-15*x1_B0(0,-4))
)
: ((idx[1] == block0np1 - 2)
      ? (
   inv_1*(0.0658051057710389*x1_B0(0,-3) - 0.0394168524399447*x1_B0(0,-2) -
      0.719443173328855*x1_B0(0,-1) + 0.322484932882161*x1_B0(0,0) +
      0.376283677513354*x1_B0(0,1) - 0.00571369039775442*x1_B0(0,-4))
)
: ((idx[1] == block0np1 - 3)
      ? (
   inv_1*(0.00412637789557492*x1_B0(0,-3) + 0.0367146847001261*x1_B0(0,-2) -
      0.521455851089587*x1_B0(0,-1) - 0.197184333887745*x1_B0(0,0) +
      0.791245592765872*x1_B0(0,1) - 0.113446470384241*x1_B0(0,2))
)
: ((idx[1] == block0np1 - 4) ?
      (
   inv_1*(0.00932597985049999*x1_B0(0,3) + 0.082033432844602*x1_B0(0,-2) -
      0.652141084861241*x1_B0(0,-1) - 0.0451033223343881*x1_B0(0,0) +
      0.727822147724592*x1_B0(0,1) - 0.121937153224065*x1_B0(0,2))
)
: (

      (rc4)*inv_1*(-8*x1_B0(0,-1) - x1_B0(0,2) + x1_B0(0,-2) +
      8*x1_B0(0,1))
)))))))));

   detJ_B0(0,0) = -localeval_0*localeval_1 + localeval_2*localeval_3;

   D00_B0(0,0) = localeval_3/(-localeval_0*localeval_1 + localeval_2*localeval_3);

   D01_B0(0,0) = -localeval_0/(-localeval_0*localeval_1 + localeval_2*localeval_3);

   D10_B0(0,0) = -localeval_1/(-localeval_0*localeval_1 + localeval_2*localeval_3);

   D11_B0(0,0) = localeval_2/(-localeval_0*localeval_1 + localeval_2*localeval_3);

}



__global__ void ops_opensbliblock00Kernel030(
double* __restrict arg0,
double* __restrict arg1,
double* __restrict arg2,
double* __restrict arg3,
double* __restrict arg4,
double* __restrict arg5,
double* __restrict arg6,
int arg_idx0, int arg_idx1,
int size0,
int size1 ){


  int idx_y = blockDim.y * blockIdx.y + threadIdx.y;
  int idx_x = blockDim.x * blockIdx.x + threadIdx.x;

  int arg_idx[2];
  arg_idx[0] = arg_idx0+idx_x;
  arg_idx[1] = arg_idx1+idx_y;
  arg0 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel030[0][0];
  arg1 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel030[1][0];
  arg2 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel030[2][0];
  arg3 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel030[3][0];
  arg4 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel030[4][0];
  arg5 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel030[5][0];
  arg6 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel030[6][0];

  if (idx_x < size0 && idx_y < size1) {
    const ACC<double> argp0(dims_opensbliblock00Kernel030[0][0], arg0);
    const ACC<double> argp1(dims_opensbliblock00Kernel030[1][0], arg1);
    ACC<double> argp2(dims_opensbliblock00Kernel030[2][0], arg2);
    ACC<double> argp3(dims_opensbliblock00Kernel030[3][0], arg3);
    ACC<double> argp4(dims_opensbliblock00Kernel030[4][0], arg4);
    ACC<double> argp5(dims_opensbliblock00Kernel030[5][0], arg5);
    ACC<double> argp6(dims_opensbliblock00Kernel030[6][0], arg6);
    opensbliblock00Kernel030_gpu(argp0, argp1, argp2, argp3,
                   argp4, argp5, argp6, arg_idx);
  }

}

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel030(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7) {
#else
void ops_par_loop_opensbliblock00Kernel030_execute(ops_kernel_descriptor *desc) {
  int dim = desc->dim;
  #if OPS_MPI
  ops_block block = desc->block;
  #endif
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  #endif

  //Timing
  double t1,t2,c1,c2;

  ops_arg args[8] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7};


  #if CHECKPOINTING && !OPS_LAZY
  if (!ops_checkpointing_before(args,8,range,1)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,1,"opensbliblock00Kernel030");
    block->instance->OPS_kernels[1].count++;
    ops_timers_core(&c1,&t1);
  }

  //compute locally allocated range for the sub-block
  int start[2];
  int end[2];
  #if OPS_MPI && !OPS_LAZY
  sub_block_list sb = OPS_sub_block_list[block->index];
  #endif //OPS_MPI

  int arg_idx[2];
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<2; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 8,block, range, start, end, arg_idx) < 0) return;
  #endif

  #if defined(OPS_MPI)
  #if defined(OPS_LAZY)
  sub_block_list sb = OPS_sub_block_list[block->index];
  arg_idx[0] = sb->decomp_disp[0]+start[0];
  arg_idx[1] = sb->decomp_disp[1]+start[1];
  #endif
  #else //OPS_MPI
  arg_idx[0] = start[0];
  arg_idx[1] = start[1];
  #endif //OPS_MPI
  int xdim0 = args[0].dat->size[0];
  int xdim1 = args[1].dat->size[0];
  int xdim2 = args[2].dat->size[0];
  int xdim3 = args[3].dat->size[0];
  int xdim4 = args[4].dat->size[0];
  int xdim5 = args[5].dat->size[0];
  int xdim6 = args[6].dat->size[0];

  if (xdim0 != dims_opensbliblock00Kernel030_h[0][0] || xdim1 != dims_opensbliblock00Kernel030_h[1][0] || xdim2 != dims_opensbliblock00Kernel030_h[2][0] || xdim3 != dims_opensbliblock00Kernel030_h[3][0] || xdim4 != dims_opensbliblock00Kernel030_h[4][0] || xdim5 != dims_opensbliblock00Kernel030_h[5][0] || xdim6 != dims_opensbliblock00Kernel030_h[6][0]) {
    dims_opensbliblock00Kernel030_h[0][0] = xdim0;
    dims_opensbliblock00Kernel030_h[1][0] = xdim1;
    dims_opensbliblock00Kernel030_h[2][0] = xdim2;
    dims_opensbliblock00Kernel030_h[3][0] = xdim3;
    dims_opensbliblock00Kernel030_h[4][0] = xdim4;
    dims_opensbliblock00Kernel030_h[5][0] = xdim5;
    dims_opensbliblock00Kernel030_h[6][0] = xdim6;
    cutilSafeCall(block->instance->ostream(), cudaMemcpyToSymbol( dims_opensbliblock00Kernel030, dims_opensbliblock00Kernel030_h, sizeof(dims_opensbliblock00Kernel030)));
  }



  int x_size = MAX(0,end[0]-start[0]);
  int y_size = MAX(0,end[1]-start[1]);

  dim3 grid( (x_size-1)/block->instance->OPS_block_size_x+ 1, (y_size-1)/block->instance->OPS_block_size_y + 1, 1);
  dim3 tblock(block->instance->OPS_block_size_x,block->instance->OPS_block_size_y,block->instance->OPS_block_size_z);



  long long int dat0 = (block->instance->OPS_soa ? args[0].dat->type_size : args[0].dat->elem_size);
  long long int dat1 = (block->instance->OPS_soa ? args[1].dat->type_size : args[1].dat->elem_size);
  long long int dat2 = (block->instance->OPS_soa ? args[2].dat->type_size : args[2].dat->elem_size);
  long long int dat3 = (block->instance->OPS_soa ? args[3].dat->type_size : args[3].dat->elem_size);
  long long int dat4 = (block->instance->OPS_soa ? args[4].dat->type_size : args[4].dat->elem_size);
  long long int dat5 = (block->instance->OPS_soa ? args[5].dat->type_size : args[5].dat->elem_size);
  long long int dat6 = (block->instance->OPS_soa ? args[6].dat->type_size : args[6].dat->elem_size);

  char *p_a[8];

  //set up initial pointers
  long long int base0 = args[0].dat->base_offset + 
           dat0 * 1 * (start[0] * args[0].stencil->stride[0]);
  base0 = base0+ dat0 *
    args[0].dat->size[0] *
    (start[1] * args[0].stencil->stride[1]);
  p_a[0] = (char *)args[0].data_d + base0;

  long long int base1 = args[1].dat->base_offset + 
           dat1 * 1 * (start[0] * args[1].stencil->stride[0]);
  base1 = base1+ dat1 *
    args[1].dat->size[0] *
    (start[1] * args[1].stencil->stride[1]);
  p_a[1] = (char *)args[1].data_d + base1;

  long long int base2 = args[2].dat->base_offset + 
           dat2 * 1 * (start[0] * args[2].stencil->stride[0]);
  base2 = base2+ dat2 *
    args[2].dat->size[0] *
    (start[1] * args[2].stencil->stride[1]);
  p_a[2] = (char *)args[2].data_d + base2;

  long long int base3 = args[3].dat->base_offset + 
           dat3 * 1 * (start[0] * args[3].stencil->stride[0]);
  base3 = base3+ dat3 *
    args[3].dat->size[0] *
    (start[1] * args[3].stencil->stride[1]);
  p_a[3] = (char *)args[3].data_d + base3;

  long long int base4 = args[4].dat->base_offset + 
           dat4 * 1 * (start[0] * args[4].stencil->stride[0]);
  base4 = base4+ dat4 *
    args[4].dat->size[0] *
    (start[1] * args[4].stencil->stride[1]);
  p_a[4] = (char *)args[4].data_d + base4;

  long long int base5 = args[5].dat->base_offset + 
           dat5 * 1 * (start[0] * args[5].stencil->stride[0]);
  base5 = base5+ dat5 *
    args[5].dat->size[0] *
    (start[1] * args[5].stencil->stride[1]);
  p_a[5] = (char *)args[5].data_d + base5;

  long long int base6 = args[6].dat->base_offset + 
           dat6 * 1 * (start[0] * args[6].stencil->stride[0]);
  base6 = base6+ dat6 *
    args[6].dat->size[0] *
    (start[1] * args[6].stencil->stride[1]);
  p_a[6] = (char *)args[6].data_d + base6;


  #ifndef OPS_LAZY
  ops_H_D_exchanges_device(args, 8);
  ops_halo_exchanges(args,8,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[1].mpi_time += t2-t1;
  }


  //call kernel wrapper function, passing in pointers to data
  if (x_size > 0 && y_size > 0)
    ops_opensbliblock00Kernel030<<<grid, tblock >>> (  (double *)p_a[0], (double *)p_a[1],
         (double *)p_a[2], (double *)p_a[3],
         (double *)p_a[4], (double *)p_a[5],
         (double *)p_a[6], arg_idx[0], arg_idx[1],x_size, y_size);

  cutilSafeCall(block->instance->ostream(), cudaGetLastError());

  if (block->instance->OPS_diags>1) {
    cutilSafeCall(block->instance->ostream(), cudaDeviceSynchronize());
    ops_timers_core(&c1,&t1);
    block->instance->OPS_kernels[1].time += t1-t2;
  }

  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 8);
  ops_set_halo_dirtybit3(&args[2],range);
  ops_set_halo_dirtybit3(&args[3],range);
  ops_set_halo_dirtybit3(&args[4],range);
  ops_set_halo_dirtybit3(&args[5],range);
  ops_set_halo_dirtybit3(&args[6],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[1].mpi_time += t2-t1;
    block->instance->OPS_kernels[1].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[1].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[1].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[1].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[1].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[1].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[1].transfer += ops_compute_transfer(dim, start, end, &arg6);
  }
}

#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel030(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3, ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)calloc(1,sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 1;
  desc->index = 1;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 1;
  for ( int i=0; i<4; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 8;
  desc->args = (ops_arg*)ops_malloc(8*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg2.dat->index;
  desc->args[3] = arg3;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg3.dat->index;
  desc->args[4] = arg4;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg4.dat->index;
  desc->args[5] = arg5;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg5.dat->index;
  desc->args[6] = arg6;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg6.dat->index;
  desc->args[7] = arg7;
  desc->function = ops_par_loop_opensbliblock00Kernel030_execute;
  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,1,"opensbliblock00Kernel030");
  }
  ops_enqueue_kernel(desc);
}
#endif
