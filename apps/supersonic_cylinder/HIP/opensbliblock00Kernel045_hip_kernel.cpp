//
// auto-generated by ops.py
//
__constant__ int dims_opensbliblock00Kernel045 [9][1];
static int dims_opensbliblock00Kernel045_h [9][1] = {{0}};

//user function
__device__

 void opensbliblock00Kernel045_gpu(const ACC<double> &u0_B0,
  const ACC<double> &D11_B0,
  const ACC<double> &D00_B0,
  const ACC<double> &D10_B0,
  const ACC<double> &Mach_sensor_B0,
  const ACC<double> &u1_B0,
  const ACC<double> &D01_B0,
  ACC<double> &kappa_B0,
  const int *idx)
{
   double localeval_2 = 0.0;
   double localeval_0 = 0.0;
   double localeval_1 = 0.0;
   double localeval_3 = 0.0;
    localeval_0 = (rc4)*inv_0*(-u1_B0(2,0) + u1_B0(-2,0) + 8*u1_B0(1,0) -
      8*u1_B0(-1,0));

    localeval_1 = ((idx[1] == 0) ? (
   inv_1*(-8.34657956545823e-15*u0_B0(0,4) +
      0.333333333333356*u0_B0(0,3) - 1.50000000000003*u0_B0(0,2) +
      3.00000000000002*u0_B0(0,1) + 1.06910315192207e-15*u0_B0(0,5) -
      1.83333333333334*u0_B0(0,0))
)
: ((idx[1] == 1) ? (
   inv_1*(0.00571369039775442*u0_B0(0,4) -
      0.0658051057710389*u0_B0(0,3) - 0.376283677513354*u0_B0(0,-1) +
      0.0394168524399447*u0_B0(0,2) + 0.719443173328855*u0_B0(0,1) -
      0.322484932882161*u0_B0(0,0))
)
: ((idx[1] == 2) ? (
   inv_1*(-0.00412637789557492*u0_B0(0,3)
      + 0.113446470384241*u0_B0(0,-2) - 0.791245592765872*u0_B0(0,-1) -
      0.0367146847001261*u0_B0(0,2) + 0.521455851089587*u0_B0(0,1) +
      0.197184333887745*u0_B0(0,0))
)
: ((idx[1] == 3) ? (
   inv_1*(0.121937153224065*u0_B0(0,-2) -
      0.727822147724592*u0_B0(0,-1) - 0.082033432844602*u0_B0(0,2) -
      0.00932597985049999*u0_B0(0,-3) + 0.652141084861241*u0_B0(0,1) +
      0.0451033223343881*u0_B0(0,0))
)
: ((idx[1] == block0np1 - 1) ? (

      inv_1*(1.50000000000003*u0_B0(0,-2) - 3.00000000000002*u0_B0(0,-1) -
      0.333333333333356*u0_B0(0,-3) + 8.34657956545823e-15*u0_B0(0,-4) -
      1.06910315192207e-15*u0_B0(0,-5) + 1.83333333333334*u0_B0(0,0))
)
: ((idx[1] == block0np1 - 2)
      ? (
   inv_1*(-0.0394168524399447*u0_B0(0,-2) - 0.719443173328855*u0_B0(0,-1) +
      0.0658051057710389*u0_B0(0,-3) + 0.376283677513354*u0_B0(0,1) -
      0.00571369039775442*u0_B0(0,-4) + 0.322484932882161*u0_B0(0,0))
)
: ((idx[1] == block0np1 - 3)
      ? (
   inv_1*(0.0367146847001261*u0_B0(0,-2) - 0.521455851089587*u0_B0(0,-1) -
      0.113446470384241*u0_B0(0,2) + 0.00412637789557492*u0_B0(0,-3) +
      0.791245592765872*u0_B0(0,1) - 0.197184333887745*u0_B0(0,0))
)
: ((idx[1] == block0np1 - 4) ?
      (
   inv_1*(0.00932597985049999*u0_B0(0,3) + 0.082033432844602*u0_B0(0,-2) -
      0.652141084861241*u0_B0(0,-1) - 0.121937153224065*u0_B0(0,2) +
      0.727822147724592*u0_B0(0,1) - 0.0451033223343881*u0_B0(0,0))
)
: (

      (rc4)*inv_1*(-8*u0_B0(0,-1) + u0_B0(0,-2) - u0_B0(0,2) +
      8*u0_B0(0,1))
)))))))));

    localeval_2 = ((idx[1] == 0) ? (
   inv_1*(3.00000000000002*u1_B0(0,1) -
      1.50000000000003*u1_B0(0,2) + 0.333333333333356*u1_B0(0,3) -
      8.34657956545823e-15*u1_B0(0,4) - 1.83333333333334*u1_B0(0,0) +
      1.06910315192207e-15*u1_B0(0,5))
)
: ((idx[1] == 1) ? (
   inv_1*(0.719443173328855*u1_B0(0,1)
      + 0.0394168524399447*u1_B0(0,2) - 0.0658051057710389*u1_B0(0,3) +
      0.00571369039775442*u1_B0(0,4) - 0.322484932882161*u1_B0(0,0) -
      0.376283677513354*u1_B0(0,-1))
)
: ((idx[1] == 2) ? (
   inv_1*(0.521455851089587*u1_B0(0,1) -
      0.791245592765872*u1_B0(0,-1) - 0.0367146847001261*u1_B0(0,2) -
      0.00412637789557492*u1_B0(0,3) + 0.197184333887745*u1_B0(0,0) +
      0.113446470384241*u1_B0(0,-2))
)
: ((idx[1] == 3) ? (
   inv_1*(0.652141084861241*u1_B0(0,1) +
      0.121937153224065*u1_B0(0,-2) - 0.082033432844602*u1_B0(0,2) -
      0.00932597985049999*u1_B0(0,-3) + 0.0451033223343881*u1_B0(0,0) -
      0.727822147724592*u1_B0(0,-1))
)
: ((idx[1] == block0np1 - 1) ? (

      inv_1*(-3.00000000000002*u1_B0(0,-1) - 1.06910315192207e-15*u1_B0(0,-5) +
      8.34657956545823e-15*u1_B0(0,-4) - 0.333333333333356*u1_B0(0,-3) +
      1.83333333333334*u1_B0(0,0) + 1.50000000000003*u1_B0(0,-2))
)
: ((idx[1] == block0np1 - 2) ?
      (
   inv_1*(0.376283677513354*u1_B0(0,1) - 0.719443173328855*u1_B0(0,-1) -
      0.00571369039775442*u1_B0(0,-4) + 0.0658051057710389*u1_B0(0,-3) +
      0.322484932882161*u1_B0(0,0) - 0.0394168524399447*u1_B0(0,-2))
)
: ((idx[1] == block0np1 - 3)
      ? (
   inv_1*(0.791245592765872*u1_B0(0,1) + 0.0367146847001261*u1_B0(0,-2) -
      0.113446470384241*u1_B0(0,2) + 0.00412637789557492*u1_B0(0,-3) -
      0.197184333887745*u1_B0(0,0) - 0.521455851089587*u1_B0(0,-1))
)
: ((idx[1] == block0np1 - 4) ?
      (
   inv_1*(0.727822147724592*u1_B0(0,1) + 0.082033432844602*u1_B0(0,-2) -
      0.121937153224065*u1_B0(0,2) + 0.00932597985049999*u1_B0(0,3) -
      0.0451033223343881*u1_B0(0,0) - 0.652141084861241*u1_B0(0,-1))
)
: (

      (rc4)*inv_1*(8*u1_B0(0,1) - u1_B0(0,2) + u1_B0(0,-2) -
      8*u1_B0(0,-1))
)))))))));

    localeval_3 = (rc4)*inv_0*(-8*u0_B0(-1,0) + 8*u0_B0(1,0) + u0_B0(-2,0) -
      u0_B0(2,0));

    kappa_B0(0,0) = (-rc7*tanh(250.0*localeval_0*D01_B0(0,0) +
      250.0*localeval_1*D10_B0(0,0) + 250.0*localeval_2*D11_B0(0,0) +
      250.0*localeval_3*D00_B0(0,0) + 2.5) + rc7)*pow(localeval_0*D01_B0(0,0) +
      localeval_1*D10_B0(0,0) + localeval_2*D11_B0(0,0) + localeval_3*D00_B0(0,0),
      2)*Mach_sensor_B0(0,0)/(epsilon + pow(localeval_0*D00_B0(0,0) -
      localeval_1*D11_B0(0,0) + localeval_2*D10_B0(0,0) - localeval_3*D01_B0(0,0), 2) +
      pow(localeval_0*D01_B0(0,0) + localeval_1*D10_B0(0,0) + localeval_2*D11_B0(0,0) +
      localeval_3*D00_B0(0,0), 2));

}



__global__ void ops_opensbliblock00Kernel045(
double* __restrict arg0,
double* __restrict arg1,
double* __restrict arg2,
double* __restrict arg3,
double* __restrict arg4,
double* __restrict arg5,
double* __restrict arg6,
double* __restrict arg7,
int arg_idx0, int arg_idx1,
int size0,
int size1 ){

  //Make sure constants are not optimized out
  if (size0==-1) dims_opensbliblock00Kernel045[0][0]=0;


  int idx_y = hipBlockDim_y * hipBlockIdx_y + hipThreadIdx_y;
  int idx_x = hipBlockDim_x * hipBlockIdx_x + hipThreadIdx_x;

  int arg_idx[2];
  arg_idx[0] = arg_idx0+idx_x;
  arg_idx[1] = arg_idx1+idx_y;
  arg0 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel045[0][0];
  arg1 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel045[1][0];
  arg2 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel045[2][0];
  arg3 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel045[3][0];
  arg4 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel045[4][0];
  arg5 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel045[5][0];
  arg6 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel045[6][0];
  arg7 += idx_x * 1*1 + idx_y * 1*1 * dims_opensbliblock00Kernel045[7][0];

  if (idx_x < size0 && idx_y < size1) {
    const ACC<double> argp0(dims_opensbliblock00Kernel045[0][0], arg0);
    const ACC<double> argp1(dims_opensbliblock00Kernel045[1][0], arg1);
    const ACC<double> argp2(dims_opensbliblock00Kernel045[2][0], arg2);
    const ACC<double> argp3(dims_opensbliblock00Kernel045[3][0], arg3);
    const ACC<double> argp4(dims_opensbliblock00Kernel045[4][0], arg4);
    const ACC<double> argp5(dims_opensbliblock00Kernel045[5][0], arg5);
    const ACC<double> argp6(dims_opensbliblock00Kernel045[6][0], arg6);
    ACC<double> argp7(dims_opensbliblock00Kernel045[7][0], arg7);
    opensbliblock00Kernel045_gpu(argp0, argp1, argp2, argp3,
                   argp4, argp5, argp6, argp7, arg_idx);
  }

}

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel045(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7, ops_arg arg8) {
#else
void ops_par_loop_opensbliblock00Kernel045_execute(ops_kernel_descriptor *desc) {
  int dim = desc->dim;
  #if OPS_MPI
  ops_block block = desc->block;
  #endif
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  #endif

  //Timing
  double t1,t2,c1,c2;

  ops_arg args[9] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8};


  #if CHECKPOINTING && !OPS_LAZY
  if (!ops_checkpointing_before(args,9,range,24)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,24,"opensbliblock00Kernel045");
    block->instance->OPS_kernels[24].count++;
    ops_timers_core(&c1,&t1);
  }

  //compute locally allocated range for the sub-block
  int start[2];
  int end[2];
  #if OPS_MPI && !OPS_LAZY
  sub_block_list sb = OPS_sub_block_list[block->index];
  #endif //OPS_MPI

  int arg_idx[2];
  #ifdef OPS_MPI
  if (compute_ranges(args, 9,block, range, start, end, arg_idx) < 0) return;
  #else //OPS_MPI
  for ( int n=0; n<2; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
    arg_idx[n] = start[n];
  }
  #endif
  int xdim0 = args[0].dat->size[0];
  int xdim1 = args[1].dat->size[0];
  int xdim2 = args[2].dat->size[0];
  int xdim3 = args[3].dat->size[0];
  int xdim4 = args[4].dat->size[0];
  int xdim5 = args[5].dat->size[0];
  int xdim6 = args[6].dat->size[0];
  int xdim7 = args[7].dat->size[0];

  if (xdim0 != dims_opensbliblock00Kernel045_h[0][0] || xdim1 != dims_opensbliblock00Kernel045_h[1][0] || xdim2 != dims_opensbliblock00Kernel045_h[2][0] || xdim3 != dims_opensbliblock00Kernel045_h[3][0] || xdim4 != dims_opensbliblock00Kernel045_h[4][0] || xdim5 != dims_opensbliblock00Kernel045_h[5][0] || xdim6 != dims_opensbliblock00Kernel045_h[6][0] || xdim7 != dims_opensbliblock00Kernel045_h[7][0]) {
    dims_opensbliblock00Kernel045_h[0][0] = xdim0;
    dims_opensbliblock00Kernel045_h[1][0] = xdim1;
    dims_opensbliblock00Kernel045_h[2][0] = xdim2;
    dims_opensbliblock00Kernel045_h[3][0] = xdim3;
    dims_opensbliblock00Kernel045_h[4][0] = xdim4;
    dims_opensbliblock00Kernel045_h[5][0] = xdim5;
    dims_opensbliblock00Kernel045_h[6][0] = xdim6;
    dims_opensbliblock00Kernel045_h[7][0] = xdim7;
    hipSafeCall(block->instance->ostream(), hipMemcpyToSymbol(HIP_SYMBOL(dims_opensbliblock00Kernel045), dims_opensbliblock00Kernel045_h, sizeof(dims_opensbliblock00Kernel045)));
  }



  int x_size = MAX(0,end[0]-start[0]);
  int y_size = MAX(0,end[1]-start[1]);

  dim3 grid( (x_size-1)/block->instance->OPS_block_size_x+ 1, (y_size-1)/block->instance->OPS_block_size_y + 1, 1);
  dim3 tblock(block->instance->OPS_block_size_x,block->instance->OPS_block_size_y,block->instance->OPS_block_size_z);



  long long int dat0 = (block->instance->OPS_soa ? args[0].dat->type_size : args[0].dat->elem_size);
  long long int dat1 = (block->instance->OPS_soa ? args[1].dat->type_size : args[1].dat->elem_size);
  long long int dat2 = (block->instance->OPS_soa ? args[2].dat->type_size : args[2].dat->elem_size);
  long long int dat3 = (block->instance->OPS_soa ? args[3].dat->type_size : args[3].dat->elem_size);
  long long int dat4 = (block->instance->OPS_soa ? args[4].dat->type_size : args[4].dat->elem_size);
  long long int dat5 = (block->instance->OPS_soa ? args[5].dat->type_size : args[5].dat->elem_size);
  long long int dat6 = (block->instance->OPS_soa ? args[6].dat->type_size : args[6].dat->elem_size);
  long long int dat7 = (block->instance->OPS_soa ? args[7].dat->type_size : args[7].dat->elem_size);

  char *p_a[9];

  //set up initial pointers
  long long int base0 = args[0].dat->base_offset + 
           dat0 * 1 * (start[0] * args[0].stencil->stride[0]);
  base0 = base0+ dat0 *
    args[0].dat->size[0] *
    (start[1] * args[0].stencil->stride[1]);
  p_a[0] = (char *)args[0].data_d + base0;

  long long int base1 = args[1].dat->base_offset + 
           dat1 * 1 * (start[0] * args[1].stencil->stride[0]);
  base1 = base1+ dat1 *
    args[1].dat->size[0] *
    (start[1] * args[1].stencil->stride[1]);
  p_a[1] = (char *)args[1].data_d + base1;

  long long int base2 = args[2].dat->base_offset + 
           dat2 * 1 * (start[0] * args[2].stencil->stride[0]);
  base2 = base2+ dat2 *
    args[2].dat->size[0] *
    (start[1] * args[2].stencil->stride[1]);
  p_a[2] = (char *)args[2].data_d + base2;

  long long int base3 = args[3].dat->base_offset + 
           dat3 * 1 * (start[0] * args[3].stencil->stride[0]);
  base3 = base3+ dat3 *
    args[3].dat->size[0] *
    (start[1] * args[3].stencil->stride[1]);
  p_a[3] = (char *)args[3].data_d + base3;

  long long int base4 = args[4].dat->base_offset + 
           dat4 * 1 * (start[0] * args[4].stencil->stride[0]);
  base4 = base4+ dat4 *
    args[4].dat->size[0] *
    (start[1] * args[4].stencil->stride[1]);
  p_a[4] = (char *)args[4].data_d + base4;

  long long int base5 = args[5].dat->base_offset + 
           dat5 * 1 * (start[0] * args[5].stencil->stride[0]);
  base5 = base5+ dat5 *
    args[5].dat->size[0] *
    (start[1] * args[5].stencil->stride[1]);
  p_a[5] = (char *)args[5].data_d + base5;

  long long int base6 = args[6].dat->base_offset + 
           dat6 * 1 * (start[0] * args[6].stencil->stride[0]);
  base6 = base6+ dat6 *
    args[6].dat->size[0] *
    (start[1] * args[6].stencil->stride[1]);
  p_a[6] = (char *)args[6].data_d + base6;

  long long int base7 = args[7].dat->base_offset + 
           dat7 * 1 * (start[0] * args[7].stencil->stride[0]);
  base7 = base7+ dat7 *
    args[7].dat->size[0] *
    (start[1] * args[7].stencil->stride[1]);
  p_a[7] = (char *)args[7].data_d + base7;


  #ifndef OPS_LAZY
  ops_H_D_exchanges_device(args, 9);
  ops_halo_exchanges(args,9,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[24].mpi_time += t2-t1;
  }


  //call kernel wrapper function, passing in pointers to data
  if (x_size > 0 && y_size > 0)
    hipLaunchKernelGGL(ops_opensbliblock00Kernel045,grid ,tblock ,0 ,0 , (double *)p_a[0], (double *)p_a[1],
         (double *)p_a[2], (double *)p_a[3],
         (double *)p_a[4], (double *)p_a[5],
         (double *)p_a[6], (double *)p_a[7],
         arg_idx[0], arg_idx[1],x_size, y_size);

  hipSafeCall(block->instance->ostream(), hipGetLastError());

  if (block->instance->OPS_diags>1) {
    hipSafeCall(block->instance->ostream(), hipDeviceSynchronize());
    ops_timers_core(&c1,&t1);
    block->instance->OPS_kernels[24].time += t1-t2;
  }

  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 9);
  ops_set_halo_dirtybit3(&args[7],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[24].mpi_time += t2-t1;
    block->instance->OPS_kernels[24].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[24].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[24].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[24].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[24].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[24].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[24].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[24].transfer += ops_compute_transfer(dim, start, end, &arg7);
  }
}

#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel045(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3, ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7, ops_arg arg8) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)calloc(1,sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 1;
  desc->index = 24;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 24;
  for ( int i=0; i<4; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 9;
  desc->args = (ops_arg*)malloc(9*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg2.dat->index;
  desc->args[3] = arg3;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg3.dat->index;
  desc->args[4] = arg4;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg4.dat->index;
  desc->args[5] = arg5;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg5.dat->index;
  desc->args[6] = arg6;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg6.dat->index;
  desc->args[7] = arg7;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg7.dat->index;
  desc->args[8] = arg8;
  desc->function = ops_par_loop_opensbliblock00Kernel045_execute;
  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,24,"opensbliblock00Kernel045");
  }
  ops_enqueue_kernel(desc);
}
#endif
