//
// auto-generated by ops.py//

//header
#include <hip/hip_runtime.h>
#define OPS_API 2
#define OPS_2D
#include "ops_lib_core.h"

#include "ops_hip_rt_support.h"
#include "ops_hip_reduction.h"


#ifdef OPS_MPI
#include "ops_mpi_core.h"
#endif
// global constants
#define block0np0 block0np0_OPSCONSTANT
__constant__ int block0np0;
#define block0np1 block0np1_OPSCONSTANT
__constant__ int block0np1;
#define Delta0block0 Delta0block0_OPSCONSTANT
__constant__ double Delta0block0;
#define Delta1block0 Delta1block0_OPSCONSTANT
__constant__ double Delta1block0;
#define niter niter_OPSCONSTANT
__constant__ int niter;
#define dt dt_OPSCONSTANT
__constant__ double dt;
#define Twall Twall_OPSCONSTANT
__constant__ double Twall;
#define gama gama_OPSCONSTANT
__constant__ double gama;
#define Minf Minf_OPSCONSTANT
__constant__ double Minf;
#define gamma_m1 gamma_m1_OPSCONSTANT
__constant__ double gamma_m1;
#define shock_filter_control shock_filter_control_OPSCONSTANT
__constant__ double shock_filter_control;
#define Pr Pr_OPSCONSTANT
__constant__ double Pr;
#define Re Re_OPSCONSTANT
__constant__ double Re;
#define sensor_theta sensor_theta_OPSCONSTANT
__constant__ double sensor_theta;
#define epsilon epsilon_OPSCONSTANT
__constant__ double epsilon;
#define sigma_filt sigma_filt_OPSCONSTANT
__constant__ double sigma_filt;
#define inv_0 inv_0_OPSCONSTANT
__constant__ double inv_0;
#define inv_1 inv_1_OPSCONSTANT
__constant__ double inv_1;
#define inv_2 inv_2_OPSCONSTANT
__constant__ double inv_2;
#define inv_3 inv_3_OPSCONSTANT
__constant__ double inv_3;
#define rc4 rc4_OPSCONSTANT
__constant__ double rc4;
#define rcinv5 rcinv5_OPSCONSTANT
__constant__ double rcinv5;
#define rcinv6 rcinv6_OPSCONSTANT
__constant__ double rcinv6;
#define rc7 rc7_OPSCONSTANT
__constant__ double rc7;
#define rcinv8 rcinv8_OPSCONSTANT
__constant__ double rcinv8;
#define rcinv9 rcinv9_OPSCONSTANT
__constant__ double rcinv9;
#define rc10 rc10_OPSCONSTANT
__constant__ double rc10;
#define rc11 rc11_OPSCONSTANT
__constant__ double rc11;
#define rc12 rc12_OPSCONSTANT
__constant__ double rc12;
#define rc13 rc13_OPSCONSTANT
__constant__ double rc13;
#define rcinv14 rcinv14_OPSCONSTANT
__constant__ double rcinv14;
#define rcinv15 rcinv15_OPSCONSTANT
__constant__ double rcinv15;
#define rc16 rc16_OPSCONSTANT
__constant__ double rc16;
#define rc17 rc17_OPSCONSTANT
__constant__ double rc17;
#define rc18 rc18_OPSCONSTANT
__constant__ double rc18;
#define rc19 rc19_OPSCONSTANT
__constant__ double rc19;
#define rc20 rc20_OPSCONSTANT
__constant__ double rc20;
#define rc21 rc21_OPSCONSTANT
__constant__ double rc21;
#define rc22 rc22_OPSCONSTANT
__constant__ double rc22;
#define rc23 rc23_OPSCONSTANT
__constant__ double rc23;
#define rc24 rc24_OPSCONSTANT
__constant__ double rc24;
#define rc25 rc25_OPSCONSTANT
__constant__ double rc25;
#define rc26 rc26_OPSCONSTANT
__constant__ double rc26;
#define rc27 rc27_OPSCONSTANT
__constant__ double rc27;
#define rc28 rc28_OPSCONSTANT
__constant__ double rc28;
#define rc29 rc29_OPSCONSTANT
__constant__ double rc29;
#define rc30 rc30_OPSCONSTANT
__constant__ double rc30;
#define rc31 rc31_OPSCONSTANT
__constant__ double rc31;
#define rcinv32 rcinv32_OPSCONSTANT
__constant__ double rcinv32;

void ops_init_backend() {}

//Dummy kernel to make sure constants are not optimized out
__global__ void ops_internal_this_is_stupid() {
((int*)&block0np0)[0]=0;
((int*)&block0np1)[0]=0;
((int*)&Delta0block0)[0]=0;
((int*)&Delta1block0)[0]=0;
((int*)&niter)[0]=0;
((int*)&dt)[0]=0;
((int*)&Twall)[0]=0;
((int*)&gama)[0]=0;
((int*)&Minf)[0]=0;
((int*)&gamma_m1)[0]=0;
((int*)&shock_filter_control)[0]=0;
((int*)&Pr)[0]=0;
((int*)&Re)[0]=0;
((int*)&sensor_theta)[0]=0;
((int*)&epsilon)[0]=0;
((int*)&sigma_filt)[0]=0;
((int*)&inv_0)[0]=0;
((int*)&inv_1)[0]=0;
((int*)&inv_2)[0]=0;
((int*)&inv_3)[0]=0;
((int*)&rc4)[0]=0;
((int*)&rcinv5)[0]=0;
((int*)&rcinv6)[0]=0;
((int*)&rc7)[0]=0;
((int*)&rcinv8)[0]=0;
((int*)&rcinv9)[0]=0;
((int*)&rc10)[0]=0;
((int*)&rc11)[0]=0;
((int*)&rc12)[0]=0;
((int*)&rc13)[0]=0;
((int*)&rcinv14)[0]=0;
((int*)&rcinv15)[0]=0;
((int*)&rc16)[0]=0;
((int*)&rc17)[0]=0;
((int*)&rc18)[0]=0;
((int*)&rc19)[0]=0;
((int*)&rc20)[0]=0;
((int*)&rc21)[0]=0;
((int*)&rc22)[0]=0;
((int*)&rc23)[0]=0;
((int*)&rc24)[0]=0;
((int*)&rc25)[0]=0;
((int*)&rc26)[0]=0;
((int*)&rc27)[0]=0;
((int*)&rc28)[0]=0;
((int*)&rc29)[0]=0;
((int*)&rc30)[0]=0;
((int*)&rc31)[0]=0;
((int*)&rcinv32)[0]=0;
}

void ops_decl_const_char(int dim, char const *type,
int size, char *dat, char const *name){
  ops_execute(OPS_instance::getOPSInstance());
  if (!strcmp(name,"block0np0")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(block0np0_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"block0np1")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(block0np1_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"Delta0block0")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(Delta0block0_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"Delta1block0")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(Delta1block0_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"niter")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(niter_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"dt")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(dt_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"Twall")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(Twall_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"gama")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(gama_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"Minf")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(Minf_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"gamma_m1")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(gamma_m1_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"shock_filter_control")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(shock_filter_control_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"Pr")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(Pr_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"Re")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(Re_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"sensor_theta")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(sensor_theta_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"epsilon")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(epsilon_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"sigma_filt")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(sigma_filt_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"inv_0")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(inv_0_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"inv_1")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(inv_1_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"inv_2")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(inv_2_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"inv_3")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(inv_3_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc4")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc4_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rcinv5")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rcinv5_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rcinv6")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rcinv6_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc7")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc7_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rcinv8")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rcinv8_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rcinv9")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rcinv9_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc10")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc10_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc11")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc11_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc12")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc12_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc13")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc13_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rcinv14")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rcinv14_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rcinv15")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rcinv15_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc16")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc16_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc17")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc17_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc18")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc18_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc19")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc19_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc20")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc20_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc21")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc21_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc22")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc22_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc23")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc23_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc24")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc24_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc25")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc25_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc26")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc26_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc27")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc27_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc28")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc28_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc29")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc29_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc30")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc30_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc31")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc31_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"rcinv32")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rcinv32_OPSCONSTANT), dat, dim*size));
  }
  else
  {
    throw OPSException(OPS_RUNTIME_ERROR, "error: unknown const name");
  }
}


//user kernel files
#include "opensbliblock00Kernel027_hip_kernel.cpp"
#include "opensbliblock00Kernel030_hip_kernel.cpp"
#include "opensbliblock00Kernel033_hip_kernel.cpp"
#include "opensbliblock00Kernel034_hip_kernel.cpp"
#include "opensbliblock00Kernel039_hip_kernel.cpp"
#include "opensbliblock00Kernel025_hip_kernel.cpp"
#include "opensbliblock00Kernel026_hip_kernel.cpp"
#include "opensbliblock00Kernel004_hip_kernel.cpp"
#include "opensbliblock00Kernel007_hip_kernel.cpp"
#include "opensbliblock00Kernel015_hip_kernel.cpp"
#include "opensbliblock00Kernel010_hip_kernel.cpp"
#include "opensbliblock00Kernel017_hip_kernel.cpp"
#include "opensbliblock00Kernel003_hip_kernel.cpp"
#include "opensbliblock00Kernel005_hip_kernel.cpp"
#include "opensbliblock00Kernel006_hip_kernel.cpp"
#include "opensbliblock00Kernel008_hip_kernel.cpp"
#include "opensbliblock00Kernel009_hip_kernel.cpp"
#include "opensbliblock00Kernel011_hip_kernel.cpp"
#include "opensbliblock00Kernel021_hip_kernel.cpp"
#include "opensbliblock00Kernel022_hip_kernel.cpp"
#include "opensbliblock00Kernel048_hip_kernel.cpp"
#include "opensbliblock00Kernel040_hip_kernel.cpp"
#include "opensbliblock00Kernel041_hip_kernel.cpp"
#include "opensbliblock00Kernel042_hip_kernel.cpp"
#include "opensbliblock00Kernel045_hip_kernel.cpp"
#include "opensbliblock00Kernel046_hip_kernel.cpp"
#include "opensbliblock00Kernel047_hip_kernel.cpp"
