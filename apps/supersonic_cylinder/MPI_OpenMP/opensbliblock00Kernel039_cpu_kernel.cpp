//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel039(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11,
 ops_arg arg12) {
#else
void ops_par_loop_opensbliblock00Kernel039_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  ops_arg arg9 = desc->args[9];
  ops_arg arg10 = desc->args[10];
  ops_arg arg11 = desc->args[11];
  ops_arg arg12 = desc->args[12];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[13] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,13,range,4)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,4,"opensbliblock00Kernel039");
    block->instance->OPS_kernels[4].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "opensbliblock00Kernel039");
  #endif


  //compute locally allocated range for the sub-block
  int start[2];
  int end[2];
  int arg_idx[2];
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<2; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 13,block, range, start, end, arg_idx) < 0) return;
  #endif

  #if defined(OPS_MPI)
  #if defined(OPS_LAZY)
  sub_block_list sb = OPS_sub_block_list[block->index];
  arg_idx[0] = sb->decomp_disp[0];
  arg_idx[1] = sb->decomp_disp[1];
  #else
  arg_idx[0] -= start[0];
  arg_idx[1] -= start[1];
  #endif
  #else //OPS_MPI
  arg_idx[0] = 0;
  arg_idx[1] = 0;
  #endif //OPS_MPI

  //initialize global variable with the dimension of dats
  int xdim0_opensbliblock00Kernel039 = args[0].dat->size[0];
  int xdim1_opensbliblock00Kernel039 = args[1].dat->size[0];
  int xdim2_opensbliblock00Kernel039 = args[2].dat->size[0];
  int xdim3_opensbliblock00Kernel039 = args[3].dat->size[0];
  int xdim4_opensbliblock00Kernel039 = args[4].dat->size[0];
  int xdim5_opensbliblock00Kernel039 = args[5].dat->size[0];
  int xdim6_opensbliblock00Kernel039 = args[6].dat->size[0];
  int xdim7_opensbliblock00Kernel039 = args[7].dat->size[0];
  int xdim8_opensbliblock00Kernel039 = args[8].dat->size[0];
  int xdim9_opensbliblock00Kernel039 = args[9].dat->size[0];
  int xdim10_opensbliblock00Kernel039 = args[10].dat->size[0];
  int xdim11_opensbliblock00Kernel039 = args[11].dat->size[0];

  //set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset;
  double * __restrict__ D11_B0_p = (double *)(args[0].data + base0);

  int base1 = args[1].dat->base_offset;
  double * __restrict__ D00_B0_p = (double *)(args[1].data + base1);

  int base2 = args[2].dat->base_offset;
  double * __restrict__ D10_B0_p = (double *)(args[2].data + base2);

  int base3 = args[3].dat->base_offset;
  double * __restrict__ D01_B0_p = (double *)(args[3].data + base3);

  int base4 = args[4].dat->base_offset;
  double * __restrict__ SD111_B0_p = (double *)(args[4].data + base4);

  int base5 = args[5].dat->base_offset;
  double * __restrict__ SD101_B0_p = (double *)(args[5].data + base5);

  int base6 = args[6].dat->base_offset;
  double * __restrict__ SD010_B0_p = (double *)(args[6].data + base6);

  int base7 = args[7].dat->base_offset;
  double * __restrict__ SD100_B0_p = (double *)(args[7].data + base7);

  int base8 = args[8].dat->base_offset;
  double * __restrict__ SD001_B0_p = (double *)(args[8].data + base8);

  int base9 = args[9].dat->base_offset;
  double * __restrict__ SD000_B0_p = (double *)(args[9].data + base9);

  int base10 = args[10].dat->base_offset;
  double * __restrict__ SD011_B0_p = (double *)(args[10].data + base10);

  int base11 = args[11].dat->base_offset;
  double * __restrict__ SD110_B0_p = (double *)(args[11].data + base11);




  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_host(args, 13);
  ops_halo_exchanges(args,13,range);
  ops_H_D_exchanges_host(args, 13);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[4].mpi_time += __t1-__t2;
  }

  #pragma omp parallel for
  for ( int n_y=start[1]; n_y<end[1]; n_y++ ){
    #ifdef __INTEL_COMPILER
    #pragma loop_count(10000)
    #pragma omp simd
    #elif defined(__clang__)
    #pragma clang loop vectorize(assume_safety)
    #elif defined(__GNUC__)
    #pragma GCC ivdep
    #else
    #pragma simd
    #endif
    for ( int n_x=start[0]; n_x<end[0]; n_x++ ){
      int idx[] = {arg_idx[0]+n_x, arg_idx[1]+n_y};
      const ACC<double> D11_B0(xdim0_opensbliblock00Kernel039, D11_B0_p + n_x*1 + n_y * xdim0_opensbliblock00Kernel039*1);
      const ACC<double> D00_B0(xdim1_opensbliblock00Kernel039, D00_B0_p + n_x*1 + n_y * xdim1_opensbliblock00Kernel039*1);
      const ACC<double> D10_B0(xdim2_opensbliblock00Kernel039, D10_B0_p + n_x*1 + n_y * xdim2_opensbliblock00Kernel039*1);
      const ACC<double> D01_B0(xdim3_opensbliblock00Kernel039, D01_B0_p + n_x*1 + n_y * xdim3_opensbliblock00Kernel039*1);
      ACC<double> SD111_B0(xdim4_opensbliblock00Kernel039, SD111_B0_p + n_x*1 + n_y * xdim4_opensbliblock00Kernel039*1);
      ACC<double> SD101_B0(xdim5_opensbliblock00Kernel039, SD101_B0_p + n_x*1 + n_y * xdim5_opensbliblock00Kernel039*1);
      ACC<double> SD010_B0(xdim6_opensbliblock00Kernel039, SD010_B0_p + n_x*1 + n_y * xdim6_opensbliblock00Kernel039*1);
      ACC<double> SD100_B0(xdim7_opensbliblock00Kernel039, SD100_B0_p + n_x*1 + n_y * xdim7_opensbliblock00Kernel039*1);
      ACC<double> SD001_B0(xdim8_opensbliblock00Kernel039, SD001_B0_p + n_x*1 + n_y * xdim8_opensbliblock00Kernel039*1);
      ACC<double> SD000_B0(xdim9_opensbliblock00Kernel039, SD000_B0_p + n_x*1 + n_y * xdim9_opensbliblock00Kernel039*1);
      ACC<double> SD011_B0(xdim10_opensbliblock00Kernel039, SD011_B0_p + n_x*1 + n_y * xdim10_opensbliblock00Kernel039*1);
      ACC<double> SD110_B0(xdim11_opensbliblock00Kernel039, SD110_B0_p + n_x*1 + n_y * xdim11_opensbliblock00Kernel039*1);
      
   double localeval_2 = 0.0;
   double localeval_0 = 0.0;
   double localeval_5 = 0.0;
   double localeval_1 = 0.0;
   double localeval_3 = 0.0;
   double localeval_4 = 0.0;
   double localeval_7 = 0.0;
   double localeval_6 = 0.0;
    localeval_0 = ((idx[1] == 0) ? (
   inv_1*(1.06910315192207e-15*D10_B0(0,5) -
      1.50000000000003*D10_B0(0,2) + 0.333333333333356*D10_B0(0,3) -
      1.83333333333334*D10_B0(0,0) - 8.34657956545823e-15*D10_B0(0,4) +
      3.00000000000002*D10_B0(0,1))
)
: ((idx[1] == 1) ? (
   inv_1*(-0.376283677513354*D10_B0(0,-1)
      + 0.0394168524399447*D10_B0(0,2) - 0.0658051057710389*D10_B0(0,3) -
      0.322484932882161*D10_B0(0,0) + 0.00571369039775442*D10_B0(0,4) +
      0.719443173328855*D10_B0(0,1))
)
: ((idx[1] == 2) ? (
   inv_1*(0.113446470384241*D10_B0(0,-2)
      - 0.791245592765872*D10_B0(0,-1) - 0.0367146847001261*D10_B0(0,2) -
      0.00412637789557492*D10_B0(0,3) + 0.197184333887745*D10_B0(0,0) +
      0.521455851089587*D10_B0(0,1))
)
: ((idx[1] == 3) ? (
   inv_1*(0.121937153224065*D10_B0(0,-2)
      - 0.727822147724592*D10_B0(0,-1) - 0.082033432844602*D10_B0(0,2) +
      0.0451033223343881*D10_B0(0,0) - 0.00932597985049999*D10_B0(0,-3) +
      0.652141084861241*D10_B0(0,1))
)
: ((idx[1] == block0np1 - 1) ? (

      inv_1*(1.50000000000003*D10_B0(0,-2) - 3.00000000000002*D10_B0(0,-1) -
      1.06910315192207e-15*D10_B0(0,-5) + 8.34657956545823e-15*D10_B0(0,-4) +
      1.83333333333334*D10_B0(0,0) - 0.333333333333356*D10_B0(0,-3))
)
: ((idx[1] == block0np1 - 2)
      ? (
   inv_1*(-0.0394168524399447*D10_B0(0,-2) - 0.719443173328855*D10_B0(0,-1) -
      0.00571369039775442*D10_B0(0,-4) + 0.322484932882161*D10_B0(0,0) +
      0.0658051057710389*D10_B0(0,-3) + 0.376283677513354*D10_B0(0,1))
)
: ((idx[1] == block0np1 -
      3) ? (
   inv_1*(0.0367146847001261*D10_B0(0,-2) - 0.521455851089587*D10_B0(0,-1) -
      0.113446470384241*D10_B0(0,2) - 0.197184333887745*D10_B0(0,0) +
      0.00412637789557492*D10_B0(0,-3) + 0.791245592765872*D10_B0(0,1))
)
: ((idx[1] == block0np1 -
      4) ? (
   inv_1*(0.082033432844602*D10_B0(0,-2) - 0.652141084861241*D10_B0(0,-1) -
      0.121937153224065*D10_B0(0,2) + 0.00932597985049999*D10_B0(0,3) -
      0.0451033223343881*D10_B0(0,0) + 0.727822147724592*D10_B0(0,1))
)
: (

      (rc4)*inv_1*(-8*D10_B0(0,-1) + 8*D10_B0(0,1) - D10_B0(0,2) +
      D10_B0(0,-2))
)))))))));

    localeval_1 = ((idx[1] == 0) ? (
   inv_1*(0.333333333333356*D11_B0(0,3) -
      8.34657956545823e-15*D11_B0(0,4) - 1.83333333333334*D11_B0(0,0) +
      1.06910315192207e-15*D11_B0(0,5) + 3.00000000000002*D11_B0(0,1) -
      1.50000000000003*D11_B0(0,2))
)
: ((idx[1] == 1) ? (
   inv_1*(-0.0658051057710389*D11_B0(0,3)
      + 0.00571369039775442*D11_B0(0,4) - 0.322484932882161*D11_B0(0,0) -
      0.376283677513354*D11_B0(0,-1) + 0.719443173328855*D11_B0(0,1) +
      0.0394168524399447*D11_B0(0,2))
)
: ((idx[1] == 2) ? (

      inv_1*(-0.00412637789557492*D11_B0(0,3) + 0.197184333887745*D11_B0(0,0) +
      0.113446470384241*D11_B0(0,-2) - 0.791245592765872*D11_B0(0,-1) +
      0.521455851089587*D11_B0(0,1) - 0.0367146847001261*D11_B0(0,2))
)
: ((idx[1] == 3) ? (

      inv_1*(-0.00932597985049999*D11_B0(0,-3) + 0.0451033223343881*D11_B0(0,0) -
      0.727822147724592*D11_B0(0,-1) + 0.121937153224065*D11_B0(0,-2) +
      0.652141084861241*D11_B0(0,1) - 0.082033432844602*D11_B0(0,2))
)
: ((idx[1] == block0np1 - 1)
      ? (
   inv_1*(-0.333333333333356*D11_B0(0,-3) + 1.83333333333334*D11_B0(0,0) +
      1.50000000000003*D11_B0(0,-2) - 3.00000000000002*D11_B0(0,-1) -
      1.06910315192207e-15*D11_B0(0,-5) + 8.34657956545823e-15*D11_B0(0,-4))
)
: ((idx[1] ==
      block0np1 - 2) ? (
   inv_1*(0.0658051057710389*D11_B0(0,-3) + 0.322484932882161*D11_B0(0,0) -
      0.0394168524399447*D11_B0(0,-2) - 0.719443173328855*D11_B0(0,-1) +
      0.376283677513354*D11_B0(0,1) - 0.00571369039775442*D11_B0(0,-4))
)
: ((idx[1] == block0np1 -
      3) ? (
   inv_1*(0.00412637789557492*D11_B0(0,-3) - 0.197184333887745*D11_B0(0,0) -
      0.521455851089587*D11_B0(0,-1) + 0.0367146847001261*D11_B0(0,-2) +
      0.791245592765872*D11_B0(0,1) - 0.113446470384241*D11_B0(0,2))
)
: ((idx[1] == block0np1 - 4)
      ? (
   inv_1*(0.00932597985049999*D11_B0(0,3) - 0.0451033223343881*D11_B0(0,0) +
      0.082033432844602*D11_B0(0,-2) - 0.652141084861241*D11_B0(0,-1) +
      0.727822147724592*D11_B0(0,1) - 0.121937153224065*D11_B0(0,2))
)
: (

      (rc4)*inv_1*(-D11_B0(0,2) + D11_B0(0,-2) + 8*D11_B0(0,1) -
      8*D11_B0(0,-1))
)))))))));

    localeval_2 = (rc4)*inv_0*(-D11_B0(2,0) + D11_B0(-2,0) - 8*D11_B0(-1,0) +
      8*D11_B0(1,0));

    localeval_3 = ((idx[1] == 0) ? (
   inv_1*(3.00000000000002*D01_B0(0,1) -
      8.34657956545823e-15*D01_B0(0,4) - 1.83333333333334*D01_B0(0,0) +
      0.333333333333356*D01_B0(0,3) - 1.50000000000003*D01_B0(0,2) +
      1.06910315192207e-15*D01_B0(0,5))
)
: ((idx[1] == 1) ? (

      inv_1*(0.719443173328855*D01_B0(0,1) + 0.00571369039775442*D01_B0(0,4) -
      0.322484932882161*D01_B0(0,0) - 0.0658051057710389*D01_B0(0,3) +
      0.0394168524399447*D01_B0(0,2) - 0.376283677513354*D01_B0(0,-1))
)
: ((idx[1] == 2) ? (

      inv_1*(0.521455851089587*D01_B0(0,1) - 0.791245592765872*D01_B0(0,-1) +
      0.197184333887745*D01_B0(0,0) - 0.00412637789557492*D01_B0(0,3) -
      0.0367146847001261*D01_B0(0,2) + 0.113446470384241*D01_B0(0,-2))
)
: ((idx[1] == 3) ? (

      inv_1*(0.652141084861241*D01_B0(0,1) + 0.121937153224065*D01_B0(0,-2) -
      0.00932597985049999*D01_B0(0,-3) + 0.0451033223343881*D01_B0(0,0) -
      0.082033432844602*D01_B0(0,2) - 0.727822147724592*D01_B0(0,-1))
)
: ((idx[1] == block0np1 - 1)
      ? (
   inv_1*(-3.00000000000002*D01_B0(0,-1) - 0.333333333333356*D01_B0(0,-3) +
      1.83333333333334*D01_B0(0,0) + 8.34657956545823e-15*D01_B0(0,-4) -
      1.06910315192207e-15*D01_B0(0,-5) + 1.50000000000003*D01_B0(0,-2))
)
: ((idx[1] == block0np1 -
      2) ? (
   inv_1*(0.376283677513354*D01_B0(0,1) - 0.719443173328855*D01_B0(0,-1) +
      0.0658051057710389*D01_B0(0,-3) + 0.322484932882161*D01_B0(0,0) -
      0.00571369039775442*D01_B0(0,-4) - 0.0394168524399447*D01_B0(0,-2))
)
: ((idx[1] == block0np1
      - 3) ? (
   inv_1*(0.791245592765872*D01_B0(0,1) + 0.0367146847001261*D01_B0(0,-2) +
      0.00412637789557492*D01_B0(0,-3) - 0.197184333887745*D01_B0(0,0) -
      0.113446470384241*D01_B0(0,2) - 0.521455851089587*D01_B0(0,-1))
)
: ((idx[1] == block0np1 - 4)
      ? (
   inv_1*(0.727822147724592*D01_B0(0,1) + 0.082033432844602*D01_B0(0,-2) -
      0.0451033223343881*D01_B0(0,0) + 0.00932597985049999*D01_B0(0,3) -
      0.121937153224065*D01_B0(0,2) - 0.652141084861241*D01_B0(0,-1))
)
: (

      (rc4)*inv_1*(-D01_B0(0,2) + 8*D01_B0(0,1) + D01_B0(0,-2) -
      8*D01_B0(0,-1))
)))))))));

    localeval_4 = (rc4)*inv_0*(-D01_B0(2,0) + D01_B0(-2,0) - 8*D01_B0(-1,0) +
      8*D01_B0(1,0));

    localeval_5 = (rc4)*inv_0*(D00_B0(-2,0) - D00_B0(2,0) + 8*D00_B0(1,0) -
      8*D00_B0(-1,0));

    localeval_6 = ((idx[1] == 0) ? (
   inv_1*(0.333333333333356*D00_B0(0,3) -
      1.50000000000003*D00_B0(0,2) + 1.06910315192207e-15*D00_B0(0,5) +
      3.00000000000002*D00_B0(0,1) - 8.34657956545823e-15*D00_B0(0,4) -
      1.83333333333334*D00_B0(0,0))
)
: ((idx[1] == 1) ? (
   inv_1*(-0.0658051057710389*D00_B0(0,3)
      + 0.0394168524399447*D00_B0(0,2) - 0.376283677513354*D00_B0(0,-1) +
      0.719443173328855*D00_B0(0,1) + 0.00571369039775442*D00_B0(0,4) -
      0.322484932882161*D00_B0(0,0))
)
: ((idx[1] == 2) ? (

      inv_1*(-0.00412637789557492*D00_B0(0,3) - 0.0367146847001261*D00_B0(0,2) +
      0.113446470384241*D00_B0(0,-2) + 0.521455851089587*D00_B0(0,1) -
      0.791245592765872*D00_B0(0,-1) + 0.197184333887745*D00_B0(0,0))
)
: ((idx[1] == 3) ? (

      inv_1*(-0.082033432844602*D00_B0(0,2) - 0.727822147724592*D00_B0(0,-1) +
      0.652141084861241*D00_B0(0,1) + 0.121937153224065*D00_B0(0,-2) -
      0.00932597985049999*D00_B0(0,-3) + 0.0451033223343881*D00_B0(0,0))
)
: ((idx[1] == block0np1 -
      1) ? (
   inv_1*(-1.06910315192207e-15*D00_B0(0,-5) + 1.50000000000003*D00_B0(0,-2) -
      3.00000000000002*D00_B0(0,-1) - 0.333333333333356*D00_B0(0,-3) +
      1.83333333333334*D00_B0(0,0) + 8.34657956545823e-15*D00_B0(0,-4))
)
: ((idx[1] == block0np1 -
      2) ? (
   inv_1*(-0.0394168524399447*D00_B0(0,-2) + 0.376283677513354*D00_B0(0,1) -
      0.719443173328855*D00_B0(0,-1) + 0.0658051057710389*D00_B0(0,-3) +
      0.322484932882161*D00_B0(0,0) - 0.00571369039775442*D00_B0(0,-4))
)
: ((idx[1] == block0np1 -
      3) ? (
   inv_1*(-0.113446470384241*D00_B0(0,2) - 0.521455851089587*D00_B0(0,-1) +
      0.791245592765872*D00_B0(0,1) + 0.0367146847001261*D00_B0(0,-2) +
      0.00412637789557492*D00_B0(0,-3) - 0.197184333887745*D00_B0(0,0))
)
: ((idx[1] == block0np1 -
      4) ? (
   inv_1*(0.00932597985049999*D00_B0(0,3) - 0.121937153224065*D00_B0(0,2) -
      0.652141084861241*D00_B0(0,-1) + 0.727822147724592*D00_B0(0,1) +
      0.082033432844602*D00_B0(0,-2) - 0.0451033223343881*D00_B0(0,0))
)
: (

      (rc4)*inv_1*(8*D00_B0(0,1) + D00_B0(0,-2) - D00_B0(0,2) -
      8*D00_B0(0,-1))
)))))))));

    localeval_7 = (rc4)*inv_0*(8*D10_B0(1,0) - 8*D10_B0(-1,0) - D10_B0(2,0) +
      D10_B0(-2,0));

   SD000_B0(0,0) = localeval_5;

   SD001_B0(0,0) = localeval_6;

   SD010_B0(0,0) = localeval_4;

   SD011_B0(0,0) = localeval_3;

   SD100_B0(0,0) = localeval_7;

   SD101_B0(0,0) = localeval_0;

   SD110_B0(0,0) = localeval_2;

   SD111_B0(0,0) = localeval_1;


    }
  }
  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[4].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_host(args, 13);
  ops_set_halo_dirtybit3(&args[4],range);
  ops_set_halo_dirtybit3(&args[5],range);
  ops_set_halo_dirtybit3(&args[6],range);
  ops_set_halo_dirtybit3(&args[7],range);
  ops_set_halo_dirtybit3(&args[8],range);
  ops_set_halo_dirtybit3(&args[9],range);
  ops_set_halo_dirtybit3(&args[10],range);
  ops_set_halo_dirtybit3(&args[11],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[4].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[4].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[4].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[4].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[4].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[4].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[4].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[4].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[4].transfer += ops_compute_transfer(dim, start, end, &arg7);
    block->instance->OPS_kernels[4].transfer += ops_compute_transfer(dim, start, end, &arg8);
    block->instance->OPS_kernels[4].transfer += ops_compute_transfer(dim, start, end, &arg9);
    block->instance->OPS_kernels[4].transfer += ops_compute_transfer(dim, start, end, &arg10);
    block->instance->OPS_kernels[4].transfer += ops_compute_transfer(dim, start, end, &arg11);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_opensbliblock00Kernel039(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10, ops_arg arg11,
 ops_arg arg12) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)calloc(1,sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 0;
  desc->index = 4;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 4;
  for ( int i=0; i<4; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 13;
  desc->args = (ops_arg*)ops_malloc(13*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg2.dat->index;
  desc->args[3] = arg3;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg3.dat->index;
  desc->args[4] = arg4;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg4.dat->index;
  desc->args[5] = arg5;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg5.dat->index;
  desc->args[6] = arg6;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg6.dat->index;
  desc->args[7] = arg7;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg7.dat->index;
  desc->args[8] = arg8;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg8.dat->index;
  desc->args[9] = arg9;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg9.dat->index;
  desc->args[10] = arg10;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg10.dat->index;
  desc->args[11] = arg11;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg11.dat->index;
  desc->args[12] = arg12;
  desc->function = ops_par_loop_opensbliblock00Kernel039_execute;
  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,4,"opensbliblock00Kernel039");
  }
  ops_enqueue_kernel(desc);
}
#endif
