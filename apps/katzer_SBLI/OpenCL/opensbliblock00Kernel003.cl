//
// auto-generated by ops.py
//

#ifdef OCL_FMA
#pragma OPENCL FP_CONTRACT ON
#else
#pragma OPENCL FP_CONTRACT OFF
#endif
#pragma OPENCL EXTENSION cl_khr_fp64:enable

#define OPS_2D
#define OPS_API 2
#define OPS_NO_GLOBALS
#include "ops_macros.h"
#include "ops_opencl_reduction.h"

#ifndef MIN
#define MIN(a,b) ((a<b) ? (a) : (b))
#endif
#ifndef MAX
#define MAX(a,b) ((a>b) ? (a) : (b))
#endif
#ifndef SIGN
#define SIGN(a,b) ((b<0.0) ? (a*(-1)) : (a))
#endif
#define OPS_READ 0
#define OPS_WRITE 1
#define OPS_RW 2
#define OPS_INC 3
#define OPS_MIN 4
#define OPS_MAX 5

//user function

 void opensbliblock00Kernel003(const ptr_double a_B0,
  const ptr_double rhou0_B0,
  const ptr_double rho_B0,
  const ptr_double rhoE_B0,
  const ptr_double p_B0,
  const ptr_double rhou1_B0,
  const ptr_double theta_B0,
  const ptr_double u0_B0,
  const ptr_double u1_B0,
  ptr_double wk3_B0,
  ptr_double wk0_B0,
  ptr_double wk1_B0,
  ptr_double TENO_B0,
  ptr_double wk2_B0, const double eps, const double gama, const double gamma_m1, const double teno_a1, const double teno_a2, const double rc8, const double rc11, const double rc13, const double rc15, const double rc16, const double rc17, const double rc18, const double rc19, const double rc20, const double rc21, const double rc22, const double rc23, const double rcinv24)
{
   double CF_00 = 0.0;
   double Recon_1 = 0.0;
   double CS_22 = 0.0;
   double CS_15 = 0.0;
   double AVG_0_u1 = 0.0;
   double AVG_0_0_LEV_30 = 0.0;
   double CF_33 = 0.0;
   double alpha_2 = 0.0;
   double delta_0 = 0.0;
   double CS_11 = 0.0;
   double alpha_0 = 0.0;
   double CF_23 = 0.0;
   double AVG_0_0_LEV_10 = 0.0;
   double CF_32 = 0.0;
   double CS_21 = 0.0;
   double CS_01 = 0.0;
   double inv_alpha_sum = 0.0;
   double inv_AVG_rho = 0.0;
   double beta_0 = 0.0;
   double AVG_0_0_LEV_33 = 0.0;
   double CS_12 = 0.0;
   double max_lambda_0_33 = 0.0;
   double CS_25 = 0.0;
   double CF_10 = 0.0;
   double CS_03 = 0.0;
   double CF_02 = 0.0;
   double AVG_0_0_LEV_02 = 0.0;
   double CS_14 = 0.0;
   double AVG_0_inv_rho = 0.0;
   double CF_25 = 0.0;
   double CF_35 = 0.0;
   double beta_1 = 0.0;
   double CS_02 = 0.0;
   double CS_05 = 0.0;
   double AVG_0_0_LEV_00 = 0.0;
   double delta_1 = 0.0;
   double AVG_0_0_LEV_03 = 0.0;
   double CF_13 = 0.0;
   double delta_2 = 0.0;
   double AVG_0_0_LEV_23 = 0.0;
   double AVG_0_0_LEV_21 = 0.0;
   double CF_30 = 0.0;
   double CF_01 = 0.0;
   double TENO_CT = 0.0;
   double CF_11 = 0.0;
   double AVG_0_a = 0.0;
   double CS_33 = 0.0;
   double CF_14 = 0.0;
   double CS_34 = 0.0;
   double AVG_0_0_LEV_20 = 0.0;
   double CS_24 = 0.0;
   double CS_30 = 0.0;
   double AVG_0_0_LEV_01 = 0.0;
   double CF_21 = 0.0;
   double CF_03 = 0.0;
   double CF_04 = 0.0;
   double CS_31 = 0.0;
   double beta_2 = 0.0;
   double AVG_0_rho = 0.0;
   double alpha_1 = 0.0;
   double Recon_0 = 0.0;
   double Recon_2 = 0.0;
   double CS_20 = 0.0;
   double CS_35 = 0.0;
   double max_lambda_0_11 = 0.0;
   double Recon_3 = 0.0;
   double CF_05 = 0.0;
   double CS_23 = 0.0;
   double CS_10 = 0.0;
   double AVG_0_0_LEV_12 = 0.0;
   double CS_00 = 0.0;
   double inv_AVG_a = 0.0;
   double CS_13 = 0.0;
   double inv_omega_sum = 0.0;
   double CF_20 = 0.0;
   double AVG_0_0_LEV_32 = 0.0;
   double AVG_0_u0 = 0.0;
   double max_lambda_0_22 = 0.0;
   double CF_22 = 0.0;
   double CF_34 = 0.0;
   double CF_15 = 0.0;
   double CF_31 = 0.0;
   double CS_04 = 0.0;
   double CS_32 = 0.0;
   double AVG_0_0_LEV_31 = 0.0;
   double AVG_0_0_LEV_22 = 0.0;
   double CF_24 = 0.0;
   double max_lambda_0_00 = 0.0;
   double CF_12 = 0.0;
   AVG_0_rho = sqrt(OPS_ACCS(rho_B0, 0,0)*OPS_ACCS(rho_B0, 1,0));

   AVG_0_inv_rho = 1.0/(sqrt(OPS_ACCS(rho_B0, 0,0)) + sqrt(OPS_ACCS(rho_B0, 1,0)));

    AVG_0_u0 = AVG_0_inv_rho*(sqrt(OPS_ACCS(rho_B0, 0,0))*OPS_ACCS(u0_B0, 0,0) +
      sqrt(OPS_ACCS(rho_B0, 1,0))*OPS_ACCS(u0_B0, 1,0));

    AVG_0_u1 = AVG_0_inv_rho*(sqrt(OPS_ACCS(rho_B0, 0,0))*OPS_ACCS(u1_B0, 0,0) +
      sqrt(OPS_ACCS(rho_B0, 1,0))*OPS_ACCS(u1_B0, 1,0));

    AVG_0_a = sqrt(gamma_m1*(AVG_0_inv_rho*((OPS_ACCS(p_B0, 1,0) + OPS_ACCS(rhoE_B0, 1,0))/sqrt(OPS_ACCS(rho_B0, 1,0)) +
      (OPS_ACCS(p_B0, 0,0) + OPS_ACCS(rhoE_B0, 0,0))/sqrt(OPS_ACCS(rho_B0, 0,0))) - rc13*(pow(AVG_0_u0, 2) +
      pow(AVG_0_u1, 2))));

   inv_AVG_a = 1.0/AVG_0_a;

   inv_AVG_rho = 1.0/AVG_0_rho;

    AVG_0_0_LEV_00 = -rc13*(gama*pow(AVG_0_u0, 2)*pow(inv_AVG_a, 2) + gama*pow(AVG_0_u1, 2)*pow(inv_AVG_a, 2) -
      pow(AVG_0_u0, 2)*pow(inv_AVG_a, 2) - pow(AVG_0_u1, 2)*pow(inv_AVG_a, 2) - 2);

   AVG_0_0_LEV_01 = gamma_m1*AVG_0_u0*pow(inv_AVG_a, 2);

   AVG_0_0_LEV_02 = gamma_m1*AVG_0_u1*pow(inv_AVG_a, 2);

   AVG_0_0_LEV_03 = -gamma_m1*pow(inv_AVG_a, 2);

   AVG_0_0_LEV_10 = AVG_0_u1*inv_AVG_rho;

   AVG_0_0_LEV_12 = -inv_AVG_rho;

    AVG_0_0_LEV_20 = -0.353553390593274*inv_AVG_a*inv_AVG_rho*(-gama*pow(AVG_0_u0, 2) - gama*pow(AVG_0_u1, 2) +
      2*AVG_0_a*AVG_0_u0 + pow(AVG_0_u0, 2) + pow(AVG_0_u1, 2));

   AVG_0_0_LEV_21 = 0.707106781186547*inv_AVG_a*inv_AVG_rho*(-gama*AVG_0_u0 + AVG_0_a + AVG_0_u0);

   AVG_0_0_LEV_22 = -0.707106781186547*gamma_m1*AVG_0_u1*inv_AVG_a*inv_AVG_rho;

   AVG_0_0_LEV_23 = 0.707106781186547*gamma_m1*inv_AVG_a*inv_AVG_rho;

    AVG_0_0_LEV_30 = 0.353553390593274*inv_AVG_a*inv_AVG_rho*(gama*pow(AVG_0_u0, 2) + gama*pow(AVG_0_u1, 2) +
      2*AVG_0_a*AVG_0_u0 - pow(AVG_0_u0, 2) - pow(AVG_0_u1, 2));

   AVG_0_0_LEV_31 = -0.707106781186547*inv_AVG_a*inv_AVG_rho*(gama*AVG_0_u0 + AVG_0_a - AVG_0_u0);

   AVG_0_0_LEV_32 = -0.707106781186547*gamma_m1*AVG_0_u1*inv_AVG_a*inv_AVG_rho;

   AVG_0_0_LEV_33 = 0.707106781186547*gamma_m1*inv_AVG_a*inv_AVG_rho;

    CF_00 = AVG_0_0_LEV_00*OPS_ACCS(rhou0_B0, -2,0) + AVG_0_0_LEV_01*OPS_ACCS(p_B0, -2,0) +
      AVG_0_0_LEV_01*OPS_ACCS(rhou0_B0, -2,0)*OPS_ACCS(u0_B0, -2,0) +
      AVG_0_0_LEV_02*OPS_ACCS(rhou1_B0, -2,0)*OPS_ACCS(u0_B0, -2,0) +
      AVG_0_0_LEV_03*OPS_ACCS(p_B0, -2,0)*OPS_ACCS(u0_B0, -2,0) +
      AVG_0_0_LEV_03*OPS_ACCS(rhoE_B0, -2,0)*OPS_ACCS(u0_B0, -2,0);

   CF_10 = AVG_0_0_LEV_10*OPS_ACCS(rhou0_B0, -2,0) + AVG_0_0_LEV_12*OPS_ACCS(rhou1_B0, -2,0)*OPS_ACCS(u0_B0, -2,0);

    CF_20 = AVG_0_0_LEV_20*OPS_ACCS(rhou0_B0, -2,0) + AVG_0_0_LEV_21*OPS_ACCS(p_B0, -2,0) +
      AVG_0_0_LEV_21*OPS_ACCS(rhou0_B0, -2,0)*OPS_ACCS(u0_B0, -2,0) +
      AVG_0_0_LEV_22*OPS_ACCS(rhou1_B0, -2,0)*OPS_ACCS(u0_B0, -2,0) +
      AVG_0_0_LEV_23*OPS_ACCS(p_B0, -2,0)*OPS_ACCS(u0_B0, -2,0) +
      AVG_0_0_LEV_23*OPS_ACCS(rhoE_B0, -2,0)*OPS_ACCS(u0_B0, -2,0);

    CF_30 = AVG_0_0_LEV_30*OPS_ACCS(rhou0_B0, -2,0) + AVG_0_0_LEV_31*OPS_ACCS(p_B0, -2,0) +
      AVG_0_0_LEV_31*OPS_ACCS(rhou0_B0, -2,0)*OPS_ACCS(u0_B0, -2,0) +
      AVG_0_0_LEV_32*OPS_ACCS(rhou1_B0, -2,0)*OPS_ACCS(u0_B0, -2,0) +
      AVG_0_0_LEV_33*OPS_ACCS(p_B0, -2,0)*OPS_ACCS(u0_B0, -2,0) +
      AVG_0_0_LEV_33*OPS_ACCS(rhoE_B0, -2,0)*OPS_ACCS(u0_B0, -2,0);

    CF_01 = AVG_0_0_LEV_00*OPS_ACCS(rhou0_B0, -1,0) + AVG_0_0_LEV_01*OPS_ACCS(p_B0, -1,0) +
      AVG_0_0_LEV_01*OPS_ACCS(rhou0_B0, -1,0)*OPS_ACCS(u0_B0, -1,0) +
      AVG_0_0_LEV_02*OPS_ACCS(rhou1_B0, -1,0)*OPS_ACCS(u0_B0, -1,0) +
      AVG_0_0_LEV_03*OPS_ACCS(p_B0, -1,0)*OPS_ACCS(u0_B0, -1,0) +
      AVG_0_0_LEV_03*OPS_ACCS(rhoE_B0, -1,0)*OPS_ACCS(u0_B0, -1,0);

   CF_11 = AVG_0_0_LEV_10*OPS_ACCS(rhou0_B0, -1,0) + AVG_0_0_LEV_12*OPS_ACCS(rhou1_B0, -1,0)*OPS_ACCS(u0_B0, -1,0);

    CF_21 = AVG_0_0_LEV_20*OPS_ACCS(rhou0_B0, -1,0) + AVG_0_0_LEV_21*OPS_ACCS(p_B0, -1,0) +
      AVG_0_0_LEV_21*OPS_ACCS(rhou0_B0, -1,0)*OPS_ACCS(u0_B0, -1,0) +
      AVG_0_0_LEV_22*OPS_ACCS(rhou1_B0, -1,0)*OPS_ACCS(u0_B0, -1,0) +
      AVG_0_0_LEV_23*OPS_ACCS(p_B0, -1,0)*OPS_ACCS(u0_B0, -1,0) +
      AVG_0_0_LEV_23*OPS_ACCS(rhoE_B0, -1,0)*OPS_ACCS(u0_B0, -1,0);

    CF_31 = AVG_0_0_LEV_30*OPS_ACCS(rhou0_B0, -1,0) + AVG_0_0_LEV_31*OPS_ACCS(p_B0, -1,0) +
      AVG_0_0_LEV_31*OPS_ACCS(rhou0_B0, -1,0)*OPS_ACCS(u0_B0, -1,0) +
      AVG_0_0_LEV_32*OPS_ACCS(rhou1_B0, -1,0)*OPS_ACCS(u0_B0, -1,0) +
      AVG_0_0_LEV_33*OPS_ACCS(p_B0, -1,0)*OPS_ACCS(u0_B0, -1,0) +
      AVG_0_0_LEV_33*OPS_ACCS(rhoE_B0, -1,0)*OPS_ACCS(u0_B0, -1,0);

    CF_02 = AVG_0_0_LEV_00*OPS_ACCS(rhou0_B0, 0,0) + AVG_0_0_LEV_01*OPS_ACCS(p_B0, 0,0) +
      AVG_0_0_LEV_01*OPS_ACCS(rhou0_B0, 0,0)*OPS_ACCS(u0_B0, 0,0) +
      AVG_0_0_LEV_02*OPS_ACCS(rhou1_B0, 0,0)*OPS_ACCS(u0_B0, 0,0) +
      AVG_0_0_LEV_03*OPS_ACCS(p_B0, 0,0)*OPS_ACCS(u0_B0, 0,0) +
      AVG_0_0_LEV_03*OPS_ACCS(rhoE_B0, 0,0)*OPS_ACCS(u0_B0, 0,0);

   CF_12 = AVG_0_0_LEV_10*OPS_ACCS(rhou0_B0, 0,0) + AVG_0_0_LEV_12*OPS_ACCS(rhou1_B0, 0,0)*OPS_ACCS(u0_B0, 0,0);

    CF_22 = AVG_0_0_LEV_20*OPS_ACCS(rhou0_B0, 0,0) + AVG_0_0_LEV_21*OPS_ACCS(p_B0, 0,0) +
      AVG_0_0_LEV_21*OPS_ACCS(rhou0_B0, 0,0)*OPS_ACCS(u0_B0, 0,0) +
      AVG_0_0_LEV_22*OPS_ACCS(rhou1_B0, 0,0)*OPS_ACCS(u0_B0, 0,0) +
      AVG_0_0_LEV_23*OPS_ACCS(p_B0, 0,0)*OPS_ACCS(u0_B0, 0,0) +
      AVG_0_0_LEV_23*OPS_ACCS(rhoE_B0, 0,0)*OPS_ACCS(u0_B0, 0,0);

    CF_32 = AVG_0_0_LEV_30*OPS_ACCS(rhou0_B0, 0,0) + AVG_0_0_LEV_31*OPS_ACCS(p_B0, 0,0) +
      AVG_0_0_LEV_31*OPS_ACCS(rhou0_B0, 0,0)*OPS_ACCS(u0_B0, 0,0) +
      AVG_0_0_LEV_32*OPS_ACCS(rhou1_B0, 0,0)*OPS_ACCS(u0_B0, 0,0) +
      AVG_0_0_LEV_33*OPS_ACCS(p_B0, 0,0)*OPS_ACCS(u0_B0, 0,0) +
      AVG_0_0_LEV_33*OPS_ACCS(rhoE_B0, 0,0)*OPS_ACCS(u0_B0, 0,0);

    CF_03 = AVG_0_0_LEV_00*OPS_ACCS(rhou0_B0, 1,0) + AVG_0_0_LEV_01*OPS_ACCS(p_B0, 1,0) +
      AVG_0_0_LEV_01*OPS_ACCS(rhou0_B0, 1,0)*OPS_ACCS(u0_B0, 1,0) +
      AVG_0_0_LEV_02*OPS_ACCS(rhou1_B0, 1,0)*OPS_ACCS(u0_B0, 1,0) +
      AVG_0_0_LEV_03*OPS_ACCS(p_B0, 1,0)*OPS_ACCS(u0_B0, 1,0) +
      AVG_0_0_LEV_03*OPS_ACCS(rhoE_B0, 1,0)*OPS_ACCS(u0_B0, 1,0);

   CF_13 = AVG_0_0_LEV_10*OPS_ACCS(rhou0_B0, 1,0) + AVG_0_0_LEV_12*OPS_ACCS(rhou1_B0, 1,0)*OPS_ACCS(u0_B0, 1,0);

    CF_23 = AVG_0_0_LEV_20*OPS_ACCS(rhou0_B0, 1,0) + AVG_0_0_LEV_21*OPS_ACCS(p_B0, 1,0) +
      AVG_0_0_LEV_21*OPS_ACCS(rhou0_B0, 1,0)*OPS_ACCS(u0_B0, 1,0) +
      AVG_0_0_LEV_22*OPS_ACCS(rhou1_B0, 1,0)*OPS_ACCS(u0_B0, 1,0) +
      AVG_0_0_LEV_23*OPS_ACCS(p_B0, 1,0)*OPS_ACCS(u0_B0, 1,0) +
      AVG_0_0_LEV_23*OPS_ACCS(rhoE_B0, 1,0)*OPS_ACCS(u0_B0, 1,0);

    CF_33 = AVG_0_0_LEV_30*OPS_ACCS(rhou0_B0, 1,0) + AVG_0_0_LEV_31*OPS_ACCS(p_B0, 1,0) +
      AVG_0_0_LEV_31*OPS_ACCS(rhou0_B0, 1,0)*OPS_ACCS(u0_B0, 1,0) +
      AVG_0_0_LEV_32*OPS_ACCS(rhou1_B0, 1,0)*OPS_ACCS(u0_B0, 1,0) +
      AVG_0_0_LEV_33*OPS_ACCS(p_B0, 1,0)*OPS_ACCS(u0_B0, 1,0) +
      AVG_0_0_LEV_33*OPS_ACCS(rhoE_B0, 1,0)*OPS_ACCS(u0_B0, 1,0);

    CF_04 = AVG_0_0_LEV_00*OPS_ACCS(rhou0_B0, 2,0) + AVG_0_0_LEV_01*OPS_ACCS(p_B0, 2,0) +
      AVG_0_0_LEV_01*OPS_ACCS(rhou0_B0, 2,0)*OPS_ACCS(u0_B0, 2,0) +
      AVG_0_0_LEV_02*OPS_ACCS(rhou1_B0, 2,0)*OPS_ACCS(u0_B0, 2,0) +
      AVG_0_0_LEV_03*OPS_ACCS(p_B0, 2,0)*OPS_ACCS(u0_B0, 2,0) +
      AVG_0_0_LEV_03*OPS_ACCS(rhoE_B0, 2,0)*OPS_ACCS(u0_B0, 2,0);

   CF_14 = AVG_0_0_LEV_10*OPS_ACCS(rhou0_B0, 2,0) + AVG_0_0_LEV_12*OPS_ACCS(rhou1_B0, 2,0)*OPS_ACCS(u0_B0, 2,0);

    CF_24 = AVG_0_0_LEV_20*OPS_ACCS(rhou0_B0, 2,0) + AVG_0_0_LEV_21*OPS_ACCS(p_B0, 2,0) +
      AVG_0_0_LEV_21*OPS_ACCS(rhou0_B0, 2,0)*OPS_ACCS(u0_B0, 2,0) +
      AVG_0_0_LEV_22*OPS_ACCS(rhou1_B0, 2,0)*OPS_ACCS(u0_B0, 2,0) +
      AVG_0_0_LEV_23*OPS_ACCS(p_B0, 2,0)*OPS_ACCS(u0_B0, 2,0) +
      AVG_0_0_LEV_23*OPS_ACCS(rhoE_B0, 2,0)*OPS_ACCS(u0_B0, 2,0);

    CF_34 = AVG_0_0_LEV_30*OPS_ACCS(rhou0_B0, 2,0) + AVG_0_0_LEV_31*OPS_ACCS(p_B0, 2,0) +
      AVG_0_0_LEV_31*OPS_ACCS(rhou0_B0, 2,0)*OPS_ACCS(u0_B0, 2,0) +
      AVG_0_0_LEV_32*OPS_ACCS(rhou1_B0, 2,0)*OPS_ACCS(u0_B0, 2,0) +
      AVG_0_0_LEV_33*OPS_ACCS(p_B0, 2,0)*OPS_ACCS(u0_B0, 2,0) +
      AVG_0_0_LEV_33*OPS_ACCS(rhoE_B0, 2,0)*OPS_ACCS(u0_B0, 2,0);

    CF_05 = AVG_0_0_LEV_00*OPS_ACCS(rhou0_B0, 3,0) + AVG_0_0_LEV_01*OPS_ACCS(p_B0, 3,0) +
      AVG_0_0_LEV_01*OPS_ACCS(rhou0_B0, 3,0)*OPS_ACCS(u0_B0, 3,0) +
      AVG_0_0_LEV_02*OPS_ACCS(rhou1_B0, 3,0)*OPS_ACCS(u0_B0, 3,0) +
      AVG_0_0_LEV_03*OPS_ACCS(p_B0, 3,0)*OPS_ACCS(u0_B0, 3,0) +
      AVG_0_0_LEV_03*OPS_ACCS(rhoE_B0, 3,0)*OPS_ACCS(u0_B0, 3,0);

   CF_15 = AVG_0_0_LEV_10*OPS_ACCS(rhou0_B0, 3,0) + AVG_0_0_LEV_12*OPS_ACCS(rhou1_B0, 3,0)*OPS_ACCS(u0_B0, 3,0);

    CF_25 = AVG_0_0_LEV_20*OPS_ACCS(rhou0_B0, 3,0) + AVG_0_0_LEV_21*OPS_ACCS(p_B0, 3,0) +
      AVG_0_0_LEV_21*OPS_ACCS(rhou0_B0, 3,0)*OPS_ACCS(u0_B0, 3,0) +
      AVG_0_0_LEV_22*OPS_ACCS(rhou1_B0, 3,0)*OPS_ACCS(u0_B0, 3,0) +
      AVG_0_0_LEV_23*OPS_ACCS(p_B0, 3,0)*OPS_ACCS(u0_B0, 3,0) +
      AVG_0_0_LEV_23*OPS_ACCS(rhoE_B0, 3,0)*OPS_ACCS(u0_B0, 3,0);

    CF_35 = AVG_0_0_LEV_30*OPS_ACCS(rhou0_B0, 3,0) + AVG_0_0_LEV_31*OPS_ACCS(p_B0, 3,0) +
      AVG_0_0_LEV_31*OPS_ACCS(rhou0_B0, 3,0)*OPS_ACCS(u0_B0, 3,0) +
      AVG_0_0_LEV_32*OPS_ACCS(rhou1_B0, 3,0)*OPS_ACCS(u0_B0, 3,0) +
      AVG_0_0_LEV_33*OPS_ACCS(p_B0, 3,0)*OPS_ACCS(u0_B0, 3,0) +
      AVG_0_0_LEV_33*OPS_ACCS(rhoE_B0, 3,0)*OPS_ACCS(u0_B0, 3,0);

    CS_00 = AVG_0_0_LEV_00*OPS_ACCS(rho_B0, -2,0) + AVG_0_0_LEV_01*OPS_ACCS(rhou0_B0, -2,0) +
      AVG_0_0_LEV_02*OPS_ACCS(rhou1_B0, -2,0) + AVG_0_0_LEV_03*OPS_ACCS(rhoE_B0, -2,0);

    CS_01 = AVG_0_0_LEV_00*OPS_ACCS(rho_B0, -1,0) + AVG_0_0_LEV_01*OPS_ACCS(rhou0_B0, -1,0) +
      AVG_0_0_LEV_02*OPS_ACCS(rhou1_B0, -1,0) + AVG_0_0_LEV_03*OPS_ACCS(rhoE_B0, -1,0);

    CS_02 = AVG_0_0_LEV_00*OPS_ACCS(rho_B0, 0,0) + AVG_0_0_LEV_01*OPS_ACCS(rhou0_B0, 0,0) +
      AVG_0_0_LEV_02*OPS_ACCS(rhou1_B0, 0,0) + AVG_0_0_LEV_03*OPS_ACCS(rhoE_B0, 0,0);

    CS_03 = AVG_0_0_LEV_00*OPS_ACCS(rho_B0, 1,0) + AVG_0_0_LEV_01*OPS_ACCS(rhou0_B0, 1,0) +
      AVG_0_0_LEV_02*OPS_ACCS(rhou1_B0, 1,0) + AVG_0_0_LEV_03*OPS_ACCS(rhoE_B0, 1,0);

    CS_04 = AVG_0_0_LEV_00*OPS_ACCS(rho_B0, 2,0) + AVG_0_0_LEV_01*OPS_ACCS(rhou0_B0, 2,0) +
      AVG_0_0_LEV_02*OPS_ACCS(rhou1_B0, 2,0) + AVG_0_0_LEV_03*OPS_ACCS(rhoE_B0, 2,0);

    CS_05 = AVG_0_0_LEV_00*OPS_ACCS(rho_B0, 3,0) + AVG_0_0_LEV_01*OPS_ACCS(rhou0_B0, 3,0) +
      AVG_0_0_LEV_02*OPS_ACCS(rhou1_B0, 3,0) + AVG_0_0_LEV_03*OPS_ACCS(rhoE_B0, 3,0);

   CS_10 = AVG_0_0_LEV_10*OPS_ACCS(rho_B0, -2,0) + AVG_0_0_LEV_12*OPS_ACCS(rhou1_B0, -2,0);

   CS_11 = AVG_0_0_LEV_10*OPS_ACCS(rho_B0, -1,0) + AVG_0_0_LEV_12*OPS_ACCS(rhou1_B0, -1,0);

   CS_12 = AVG_0_0_LEV_10*OPS_ACCS(rho_B0, 0,0) + AVG_0_0_LEV_12*OPS_ACCS(rhou1_B0, 0,0);

   CS_13 = AVG_0_0_LEV_10*OPS_ACCS(rho_B0, 1,0) + AVG_0_0_LEV_12*OPS_ACCS(rhou1_B0, 1,0);

   CS_14 = AVG_0_0_LEV_10*OPS_ACCS(rho_B0, 2,0) + AVG_0_0_LEV_12*OPS_ACCS(rhou1_B0, 2,0);

   CS_15 = AVG_0_0_LEV_10*OPS_ACCS(rho_B0, 3,0) + AVG_0_0_LEV_12*OPS_ACCS(rhou1_B0, 3,0);

    CS_20 = AVG_0_0_LEV_20*OPS_ACCS(rho_B0, -2,0) + AVG_0_0_LEV_21*OPS_ACCS(rhou0_B0, -2,0) +
      AVG_0_0_LEV_22*OPS_ACCS(rhou1_B0, -2,0) + AVG_0_0_LEV_23*OPS_ACCS(rhoE_B0, -2,0);

    CS_21 = AVG_0_0_LEV_20*OPS_ACCS(rho_B0, -1,0) + AVG_0_0_LEV_21*OPS_ACCS(rhou0_B0, -1,0) +
      AVG_0_0_LEV_22*OPS_ACCS(rhou1_B0, -1,0) + AVG_0_0_LEV_23*OPS_ACCS(rhoE_B0, -1,0);

    CS_22 = AVG_0_0_LEV_20*OPS_ACCS(rho_B0, 0,0) + AVG_0_0_LEV_21*OPS_ACCS(rhou0_B0, 0,0) +
      AVG_0_0_LEV_22*OPS_ACCS(rhou1_B0, 0,0) + AVG_0_0_LEV_23*OPS_ACCS(rhoE_B0, 0,0);

    CS_23 = AVG_0_0_LEV_20*OPS_ACCS(rho_B0, 1,0) + AVG_0_0_LEV_21*OPS_ACCS(rhou0_B0, 1,0) +
      AVG_0_0_LEV_22*OPS_ACCS(rhou1_B0, 1,0) + AVG_0_0_LEV_23*OPS_ACCS(rhoE_B0, 1,0);

    CS_24 = AVG_0_0_LEV_20*OPS_ACCS(rho_B0, 2,0) + AVG_0_0_LEV_21*OPS_ACCS(rhou0_B0, 2,0) +
      AVG_0_0_LEV_22*OPS_ACCS(rhou1_B0, 2,0) + AVG_0_0_LEV_23*OPS_ACCS(rhoE_B0, 2,0);

    CS_25 = AVG_0_0_LEV_20*OPS_ACCS(rho_B0, 3,0) + AVG_0_0_LEV_21*OPS_ACCS(rhou0_B0, 3,0) +
      AVG_0_0_LEV_22*OPS_ACCS(rhou1_B0, 3,0) + AVG_0_0_LEV_23*OPS_ACCS(rhoE_B0, 3,0);

    CS_30 = AVG_0_0_LEV_30*OPS_ACCS(rho_B0, -2,0) + AVG_0_0_LEV_31*OPS_ACCS(rhou0_B0, -2,0) +
      AVG_0_0_LEV_32*OPS_ACCS(rhou1_B0, -2,0) + AVG_0_0_LEV_33*OPS_ACCS(rhoE_B0, -2,0);

    CS_31 = AVG_0_0_LEV_30*OPS_ACCS(rho_B0, -1,0) + AVG_0_0_LEV_31*OPS_ACCS(rhou0_B0, -1,0) +
      AVG_0_0_LEV_32*OPS_ACCS(rhou1_B0, -1,0) + AVG_0_0_LEV_33*OPS_ACCS(rhoE_B0, -1,0);

    CS_32 = AVG_0_0_LEV_30*OPS_ACCS(rho_B0, 0,0) + AVG_0_0_LEV_31*OPS_ACCS(rhou0_B0, 0,0) +
      AVG_0_0_LEV_32*OPS_ACCS(rhou1_B0, 0,0) + AVG_0_0_LEV_33*OPS_ACCS(rhoE_B0, 0,0);

    CS_33 = AVG_0_0_LEV_30*OPS_ACCS(rho_B0, 1,0) + AVG_0_0_LEV_31*OPS_ACCS(rhou0_B0, 1,0) +
      AVG_0_0_LEV_32*OPS_ACCS(rhou1_B0, 1,0) + AVG_0_0_LEV_33*OPS_ACCS(rhoE_B0, 1,0);

    CS_34 = AVG_0_0_LEV_30*OPS_ACCS(rho_B0, 2,0) + AVG_0_0_LEV_31*OPS_ACCS(rhou0_B0, 2,0) +
      AVG_0_0_LEV_32*OPS_ACCS(rhou1_B0, 2,0) + AVG_0_0_LEV_33*OPS_ACCS(rhoE_B0, 2,0);

    CS_35 = AVG_0_0_LEV_30*OPS_ACCS(rho_B0, 3,0) + AVG_0_0_LEV_31*OPS_ACCS(rhou0_B0, 3,0) +
      AVG_0_0_LEV_32*OPS_ACCS(rhou1_B0, 3,0) + AVG_0_0_LEV_33*OPS_ACCS(rhoE_B0, 3,0);

    max_lambda_0_00 = fmax(fabs(OPS_ACCS(u0_B0, -2,0)), fmax(fabs(OPS_ACCS(u0_B0, -1,0)),
      fmax(fabs(OPS_ACCS(u0_B0, 2,0)), fmax(fabs(OPS_ACCS(u0_B0, 0,0)), fmax(fabs(OPS_ACCS(u0_B0, 3,0)),
      fabs(OPS_ACCS(u0_B0, 1,0)))))));

   max_lambda_0_11 = max_lambda_0_00;

    max_lambda_0_22 = fmax(fabs(OPS_ACCS(a_B0, -2,0) + OPS_ACCS(u0_B0, -2,0)), fmax(fabs(OPS_ACCS(a_B0, 0,0) +
      OPS_ACCS(u0_B0, 0,0)), fmax(fabs(OPS_ACCS(a_B0, 3,0) + OPS_ACCS(u0_B0, 3,0)), fmax(fabs(OPS_ACCS(a_B0, 1,0) +
      OPS_ACCS(u0_B0, 1,0)), fmax(fabs(OPS_ACCS(a_B0, -1,0) + OPS_ACCS(u0_B0, -1,0)), fabs(OPS_ACCS(a_B0, 2,0) +
      OPS_ACCS(u0_B0, 2,0)))))));

    max_lambda_0_33 = fmax(fabs(OPS_ACCS(a_B0, 1,0) - OPS_ACCS(u0_B0, 1,0)), fmax(fabs(OPS_ACCS(a_B0, 3,0) -
      OPS_ACCS(u0_B0, 3,0)), fmax(fabs(OPS_ACCS(a_B0, 0,0) - OPS_ACCS(u0_B0, 0,0)), fmax(fabs(OPS_ACCS(a_B0, -1,0) -
      OPS_ACCS(u0_B0, -1,0)), fmax(fabs(OPS_ACCS(a_B0, 2,0) - OPS_ACCS(u0_B0, 2,0)), fabs(OPS_ACCS(a_B0, -2,0) -
      OPS_ACCS(u0_B0, -2,0)))))));

    TENO_CT = pow(10.0, -floor(teno_a1 - teno_a2*(-pow(-OPS_ACCS(theta_B0, 0,0) + 1, 4)*(4*OPS_ACCS(theta_B0, 0,0) + 1)
      + 1)));

   OPS_ACCS(TENO_B0, 0,0) = TENO_CT;

    beta_0 = (rc8)*pow((rc13)*(CF_01 + CS_01*max_lambda_0_00) - rc13*(CF_03 + CS_03*max_lambda_0_00), 2) +
      (rc15)*pow((rc13)*(CF_01 + CS_01*max_lambda_0_00) - (CF_02 + CS_02*max_lambda_0_00) + (rc13)*(CF_03 +
      CS_03*max_lambda_0_00), 2);

    beta_1 = (rc15)*pow((rc13)*(CF_02 + CS_02*max_lambda_0_00) - (CF_03 + CS_03*max_lambda_0_00) + (rc13)*(CF_04 +
      CS_04*max_lambda_0_00), 2) + (rc8)*pow((rc16)*(CF_02 + CS_02*max_lambda_0_00) - 2*(CF_03 + CS_03*max_lambda_0_00)
      + (rc13)*(CF_04 + CS_04*max_lambda_0_00), 2);

    beta_2 = (rc8)*pow((rc13)*(CF_00 + CS_00*max_lambda_0_00) - 2*(CF_01 + CS_01*max_lambda_0_00) + (rc16)*(CF_02 +
      CS_02*max_lambda_0_00), 2) + (rc15)*pow((rc13)*(CF_00 + CS_00*max_lambda_0_00) - (CF_01 + CS_01*max_lambda_0_00) +
      (rc13)*(CF_02 + CS_02*max_lambda_0_00), 2);

   alpha_0 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_0), 6);

   alpha_1 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_1), 6);

   alpha_2 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_2), 6);

   inv_alpha_sum = 1.0/(alpha_0 + alpha_1 + alpha_2);

   delta_0 = ((alpha_0*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_1 = ((alpha_1*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_2 = ((alpha_2*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   inv_omega_sum = 1.0/((rc17)*delta_0 + (rc18)*delta_1 + (rc19)*delta_2);

    Recon_0 = Recon_0 + (rc17)*delta_0*inv_omega_sum*(-rc11*(CF_01 + CS_01*max_lambda_0_00) + (rc20)*(CF_02 +
      CS_02*max_lambda_0_00) + (rc21)*(CF_03 + CS_03*max_lambda_0_00)) + (rc18)*delta_1*inv_omega_sum*((rc21)*(CF_02 +
      CS_02*max_lambda_0_00) + (rc20)*(CF_03 + CS_03*max_lambda_0_00) - rc11*(CF_04 + CS_04*max_lambda_0_00)) +
      (rc19)*delta_2*inv_omega_sum*((rc21)*(CF_00 + CS_00*max_lambda_0_00) - rc22*(CF_01 + CS_01*max_lambda_0_00) +
      (rc23)*(CF_02 + CS_02*max_lambda_0_00));

    beta_0 = (rc8)*pow((rc13)*(CF_02 - CS_02*max_lambda_0_00) - rc13*(CF_04 - CS_04*max_lambda_0_00), 2) +
      (rc15)*pow((rc13)*(CF_02 - CS_02*max_lambda_0_00) - (CF_03 - CS_03*max_lambda_0_00) + (rc13)*(CF_04 -
      CS_04*max_lambda_0_00), 2);

    beta_1 = (rc8)*pow((rc13)*(CF_01 - CS_01*max_lambda_0_00) - 2*(CF_02 - CS_02*max_lambda_0_00) + (rc16)*(CF_03 -
      CS_03*max_lambda_0_00), 2) + (rc15)*pow((rc13)*(CF_01 - CS_01*max_lambda_0_00) - (CF_02 - CS_02*max_lambda_0_00) +
      (rc13)*(CF_03 - CS_03*max_lambda_0_00), 2);

    beta_2 = (rc15)*pow((rc13)*(CF_03 - CS_03*max_lambda_0_00) - (CF_04 - CS_04*max_lambda_0_00) + (rc13)*(CF_05 -
      CS_05*max_lambda_0_00), 2) + (rc8)*pow((rc16)*(CF_03 - CS_03*max_lambda_0_00) - 2*(CF_04 - CS_04*max_lambda_0_00)
      + (rc13)*(CF_05 - CS_05*max_lambda_0_00), 2);

   alpha_0 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_0), 6);

   alpha_1 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_1), 6);

   alpha_2 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_2), 6);

   inv_alpha_sum = 1.0/(alpha_0 + alpha_1 + alpha_2);

   delta_0 = ((alpha_0*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_1 = ((alpha_1*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_2 = ((alpha_2*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   inv_omega_sum = 1.0/((rc17)*delta_0 + (rc18)*delta_1 + (rc19)*delta_2);

    Recon_0 = Recon_0 + (rc17)*delta_0*inv_omega_sum*((rc21)*(CF_02 - CS_02*max_lambda_0_00) + (rc20)*(CF_03 -
      CS_03*max_lambda_0_00) - rc11*(CF_04 - CS_04*max_lambda_0_00)) + (rc18)*delta_1*inv_omega_sum*(-rc11*(CF_01 -
      CS_01*max_lambda_0_00) + (rc20)*(CF_02 - CS_02*max_lambda_0_00) + (rc21)*(CF_03 - CS_03*max_lambda_0_00)) +
      (rc19)*delta_2*inv_omega_sum*((rc23)*(CF_03 - CS_03*max_lambda_0_00) - rc22*(CF_04 - CS_04*max_lambda_0_00) +
      (rc21)*(CF_05 - CS_05*max_lambda_0_00));

    beta_0 = (rc8)*pow((rc13)*(CF_11 + CS_11*max_lambda_0_11) - rc13*(CF_13 + CS_13*max_lambda_0_11), 2) +
      (rc15)*pow((rc13)*(CF_11 + CS_11*max_lambda_0_11) - (CF_12 + CS_12*max_lambda_0_11) + (rc13)*(CF_13 +
      CS_13*max_lambda_0_11), 2);

    beta_1 = (rc15)*pow((rc13)*(CF_12 + CS_12*max_lambda_0_11) - (CF_13 + CS_13*max_lambda_0_11) + (rc13)*(CF_14 +
      CS_14*max_lambda_0_11), 2) + (rc8)*pow((rc16)*(CF_12 + CS_12*max_lambda_0_11) - 2*(CF_13 + CS_13*max_lambda_0_11)
      + (rc13)*(CF_14 + CS_14*max_lambda_0_11), 2);

    beta_2 = (rc8)*pow((rc13)*(CF_10 + CS_10*max_lambda_0_11) - 2*(CF_11 + CS_11*max_lambda_0_11) + (rc16)*(CF_12 +
      CS_12*max_lambda_0_11), 2) + (rc15)*pow((rc13)*(CF_10 + CS_10*max_lambda_0_11) - (CF_11 + CS_11*max_lambda_0_11) +
      (rc13)*(CF_12 + CS_12*max_lambda_0_11), 2);

   alpha_0 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_0), 6);

   alpha_1 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_1), 6);

   alpha_2 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_2), 6);

   inv_alpha_sum = 1.0/(alpha_0 + alpha_1 + alpha_2);

   delta_0 = ((alpha_0*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_1 = ((alpha_1*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_2 = ((alpha_2*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   inv_omega_sum = 1.0/((rc17)*delta_0 + (rc18)*delta_1 + (rc19)*delta_2);

    Recon_1 = Recon_1 + (rc17)*delta_0*inv_omega_sum*(-rc11*(CF_11 + CS_11*max_lambda_0_11) + (rc20)*(CF_12 +
      CS_12*max_lambda_0_11) + (rc21)*(CF_13 + CS_13*max_lambda_0_11)) + (rc18)*delta_1*inv_omega_sum*((rc21)*(CF_12 +
      CS_12*max_lambda_0_11) + (rc20)*(CF_13 + CS_13*max_lambda_0_11) - rc11*(CF_14 + CS_14*max_lambda_0_11)) +
      (rc19)*delta_2*inv_omega_sum*((rc21)*(CF_10 + CS_10*max_lambda_0_11) - rc22*(CF_11 + CS_11*max_lambda_0_11) +
      (rc23)*(CF_12 + CS_12*max_lambda_0_11));

    beta_0 = (rc8)*pow((rc13)*(CF_12 - CS_12*max_lambda_0_11) - rc13*(CF_14 - CS_14*max_lambda_0_11), 2) +
      (rc15)*pow((rc13)*(CF_12 - CS_12*max_lambda_0_11) - (CF_13 - CS_13*max_lambda_0_11) + (rc13)*(CF_14 -
      CS_14*max_lambda_0_11), 2);

    beta_1 = (rc8)*pow((rc13)*(CF_11 - CS_11*max_lambda_0_11) - 2*(CF_12 - CS_12*max_lambda_0_11) + (rc16)*(CF_13 -
      CS_13*max_lambda_0_11), 2) + (rc15)*pow((rc13)*(CF_11 - CS_11*max_lambda_0_11) - (CF_12 - CS_12*max_lambda_0_11) +
      (rc13)*(CF_13 - CS_13*max_lambda_0_11), 2);

    beta_2 = (rc15)*pow((rc13)*(CF_13 - CS_13*max_lambda_0_11) - (CF_14 - CS_14*max_lambda_0_11) + (rc13)*(CF_15 -
      CS_15*max_lambda_0_11), 2) + (rc8)*pow((rc16)*(CF_13 - CS_13*max_lambda_0_11) - 2*(CF_14 - CS_14*max_lambda_0_11)
      + (rc13)*(CF_15 - CS_15*max_lambda_0_11), 2);

   alpha_0 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_0), 6);

   alpha_1 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_1), 6);

   alpha_2 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_2), 6);

   inv_alpha_sum = 1.0/(alpha_0 + alpha_1 + alpha_2);

   delta_0 = ((alpha_0*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_1 = ((alpha_1*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_2 = ((alpha_2*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   inv_omega_sum = 1.0/((rc17)*delta_0 + (rc18)*delta_1 + (rc19)*delta_2);

    Recon_1 = Recon_1 + (rc17)*delta_0*inv_omega_sum*((rc21)*(CF_12 - CS_12*max_lambda_0_11) + (rc20)*(CF_13 -
      CS_13*max_lambda_0_11) - rc11*(CF_14 - CS_14*max_lambda_0_11)) + (rc18)*delta_1*inv_omega_sum*(-rc11*(CF_11 -
      CS_11*max_lambda_0_11) + (rc20)*(CF_12 - CS_12*max_lambda_0_11) + (rc21)*(CF_13 - CS_13*max_lambda_0_11)) +
      (rc19)*delta_2*inv_omega_sum*((rc23)*(CF_13 - CS_13*max_lambda_0_11) - rc22*(CF_14 - CS_14*max_lambda_0_11) +
      (rc21)*(CF_15 - CS_15*max_lambda_0_11));

    beta_0 = (rc8)*pow((rc13)*(CF_21 + CS_21*max_lambda_0_22) - rc13*(CF_23 + CS_23*max_lambda_0_22), 2) +
      (rc15)*pow((rc13)*(CF_21 + CS_21*max_lambda_0_22) - (CF_22 + CS_22*max_lambda_0_22) + (rc13)*(CF_23 +
      CS_23*max_lambda_0_22), 2);

    beta_1 = (rc15)*pow((rc13)*(CF_22 + CS_22*max_lambda_0_22) - (CF_23 + CS_23*max_lambda_0_22) + (rc13)*(CF_24 +
      CS_24*max_lambda_0_22), 2) + (rc8)*pow((rc16)*(CF_22 + CS_22*max_lambda_0_22) - 2*(CF_23 + CS_23*max_lambda_0_22)
      + (rc13)*(CF_24 + CS_24*max_lambda_0_22), 2);

    beta_2 = (rc8)*pow((rc13)*(CF_20 + CS_20*max_lambda_0_22) - 2*(CF_21 + CS_21*max_lambda_0_22) + (rc16)*(CF_22 +
      CS_22*max_lambda_0_22), 2) + (rc15)*pow((rc13)*(CF_20 + CS_20*max_lambda_0_22) - (CF_21 + CS_21*max_lambda_0_22) +
      (rc13)*(CF_22 + CS_22*max_lambda_0_22), 2);

   alpha_0 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_0), 6);

   alpha_1 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_1), 6);

   alpha_2 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_2), 6);

   inv_alpha_sum = 1.0/(alpha_0 + alpha_1 + alpha_2);

   delta_0 = ((alpha_0*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_1 = ((alpha_1*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_2 = ((alpha_2*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   inv_omega_sum = 1.0/((rc17)*delta_0 + (rc18)*delta_1 + (rc19)*delta_2);

    Recon_2 = Recon_2 + (rc17)*delta_0*inv_omega_sum*(-rc11*(CF_21 + CS_21*max_lambda_0_22) + (rc20)*(CF_22 +
      CS_22*max_lambda_0_22) + (rc21)*(CF_23 + CS_23*max_lambda_0_22)) + (rc18)*delta_1*inv_omega_sum*((rc21)*(CF_22 +
      CS_22*max_lambda_0_22) + (rc20)*(CF_23 + CS_23*max_lambda_0_22) - rc11*(CF_24 + CS_24*max_lambda_0_22)) +
      (rc19)*delta_2*inv_omega_sum*((rc21)*(CF_20 + CS_20*max_lambda_0_22) - rc22*(CF_21 + CS_21*max_lambda_0_22) +
      (rc23)*(CF_22 + CS_22*max_lambda_0_22));

    beta_0 = (rc8)*pow((rc13)*(CF_22 - CS_22*max_lambda_0_22) - rc13*(CF_24 - CS_24*max_lambda_0_22), 2) +
      (rc15)*pow((rc13)*(CF_22 - CS_22*max_lambda_0_22) - (CF_23 - CS_23*max_lambda_0_22) + (rc13)*(CF_24 -
      CS_24*max_lambda_0_22), 2);

    beta_1 = (rc8)*pow((rc13)*(CF_21 - CS_21*max_lambda_0_22) - 2*(CF_22 - CS_22*max_lambda_0_22) + (rc16)*(CF_23 -
      CS_23*max_lambda_0_22), 2) + (rc15)*pow((rc13)*(CF_21 - CS_21*max_lambda_0_22) - (CF_22 - CS_22*max_lambda_0_22) +
      (rc13)*(CF_23 - CS_23*max_lambda_0_22), 2);

    beta_2 = (rc15)*pow((rc13)*(CF_23 - CS_23*max_lambda_0_22) - (CF_24 - CS_24*max_lambda_0_22) + (rc13)*(CF_25 -
      CS_25*max_lambda_0_22), 2) + (rc8)*pow((rc16)*(CF_23 - CS_23*max_lambda_0_22) - 2*(CF_24 - CS_24*max_lambda_0_22)
      + (rc13)*(CF_25 - CS_25*max_lambda_0_22), 2);

   alpha_0 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_0), 6);

   alpha_1 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_1), 6);

   alpha_2 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_2), 6);

   inv_alpha_sum = 1.0/(alpha_0 + alpha_1 + alpha_2);

   delta_0 = ((alpha_0*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_1 = ((alpha_1*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_2 = ((alpha_2*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   inv_omega_sum = 1.0/((rc17)*delta_0 + (rc18)*delta_1 + (rc19)*delta_2);

    Recon_2 = Recon_2 + (rc17)*delta_0*inv_omega_sum*((rc21)*(CF_22 - CS_22*max_lambda_0_22) + (rc20)*(CF_23 -
      CS_23*max_lambda_0_22) - rc11*(CF_24 - CS_24*max_lambda_0_22)) + (rc18)*delta_1*inv_omega_sum*(-rc11*(CF_21 -
      CS_21*max_lambda_0_22) + (rc20)*(CF_22 - CS_22*max_lambda_0_22) + (rc21)*(CF_23 - CS_23*max_lambda_0_22)) +
      (rc19)*delta_2*inv_omega_sum*((rc23)*(CF_23 - CS_23*max_lambda_0_22) - rc22*(CF_24 - CS_24*max_lambda_0_22) +
      (rc21)*(CF_25 - CS_25*max_lambda_0_22));

    beta_0 = (rc8)*pow((rc13)*(CF_31 + CS_31*max_lambda_0_33) - rc13*(CF_33 + CS_33*max_lambda_0_33), 2) +
      (rc15)*pow((rc13)*(CF_31 + CS_31*max_lambda_0_33) - (CF_32 + CS_32*max_lambda_0_33) + (rc13)*(CF_33 +
      CS_33*max_lambda_0_33), 2);

    beta_1 = (rc15)*pow((rc13)*(CF_32 + CS_32*max_lambda_0_33) - (CF_33 + CS_33*max_lambda_0_33) + (rc13)*(CF_34 +
      CS_34*max_lambda_0_33), 2) + (rc8)*pow((rc16)*(CF_32 + CS_32*max_lambda_0_33) - 2*(CF_33 + CS_33*max_lambda_0_33)
      + (rc13)*(CF_34 + CS_34*max_lambda_0_33), 2);

    beta_2 = (rc8)*pow((rc13)*(CF_30 + CS_30*max_lambda_0_33) - 2*(CF_31 + CS_31*max_lambda_0_33) + (rc16)*(CF_32 +
      CS_32*max_lambda_0_33), 2) + (rc15)*pow((rc13)*(CF_30 + CS_30*max_lambda_0_33) - (CF_31 + CS_31*max_lambda_0_33) +
      (rc13)*(CF_32 + CS_32*max_lambda_0_33), 2);

   alpha_0 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_0), 6);

   alpha_1 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_1), 6);

   alpha_2 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_2), 6);

   inv_alpha_sum = 1.0/(alpha_0 + alpha_1 + alpha_2);

   delta_0 = ((alpha_0*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_1 = ((alpha_1*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_2 = ((alpha_2*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   inv_omega_sum = 1.0/((rc17)*delta_0 + (rc18)*delta_1 + (rc19)*delta_2);

    Recon_3 = Recon_3 + (rc17)*delta_0*inv_omega_sum*(-rc11*(CF_31 + CS_31*max_lambda_0_33) + (rc20)*(CF_32 +
      CS_32*max_lambda_0_33) + (rc21)*(CF_33 + CS_33*max_lambda_0_33)) + (rc18)*delta_1*inv_omega_sum*((rc21)*(CF_32 +
      CS_32*max_lambda_0_33) + (rc20)*(CF_33 + CS_33*max_lambda_0_33) - rc11*(CF_34 + CS_34*max_lambda_0_33)) +
      (rc19)*delta_2*inv_omega_sum*((rc21)*(CF_30 + CS_30*max_lambda_0_33) - rc22*(CF_31 + CS_31*max_lambda_0_33) +
      (rc23)*(CF_32 + CS_32*max_lambda_0_33));

    beta_0 = (rc8)*pow((rc13)*(CF_32 - CS_32*max_lambda_0_33) - rc13*(CF_34 - CS_34*max_lambda_0_33), 2) +
      (rc15)*pow((rc13)*(CF_32 - CS_32*max_lambda_0_33) - (CF_33 - CS_33*max_lambda_0_33) + (rc13)*(CF_34 -
      CS_34*max_lambda_0_33), 2);

    beta_1 = (rc8)*pow((rc13)*(CF_31 - CS_31*max_lambda_0_33) - 2*(CF_32 - CS_32*max_lambda_0_33) + (rc16)*(CF_33 -
      CS_33*max_lambda_0_33), 2) + (rc15)*pow((rc13)*(CF_31 - CS_31*max_lambda_0_33) - (CF_32 - CS_32*max_lambda_0_33) +
      (rc13)*(CF_33 - CS_33*max_lambda_0_33), 2);

    beta_2 = (rc15)*pow((rc13)*(CF_33 - CS_33*max_lambda_0_33) - (CF_34 - CS_34*max_lambda_0_33) + (rc13)*(CF_35 -
      CS_35*max_lambda_0_33), 2) + (rc8)*pow((rc16)*(CF_33 - CS_33*max_lambda_0_33) - 2*(CF_34 - CS_34*max_lambda_0_33)
      + (rc13)*(CF_35 - CS_35*max_lambda_0_33), 2);

   alpha_0 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_0), 6);

   alpha_1 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_1), 6);

   alpha_2 = pow(1 + fabs(beta_0 - beta_2)/(eps + beta_2), 6);

   inv_alpha_sum = 1.0/(alpha_0 + alpha_1 + alpha_2);

   delta_0 = ((alpha_0*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_1 = ((alpha_1*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   delta_2 = ((alpha_2*inv_alpha_sum < TENO_CT) ? (
   0.0
)
: (
   1.0
));

   inv_omega_sum = 1.0/((rc17)*delta_0 + (rc18)*delta_1 + (rc19)*delta_2);

    Recon_3 = Recon_3 + (rc17)*delta_0*inv_omega_sum*((rc21)*(CF_32 - CS_32*max_lambda_0_33) + (rc20)*(CF_33 -
      CS_33*max_lambda_0_33) - rc11*(CF_34 - CS_34*max_lambda_0_33)) + (rc18)*delta_1*inv_omega_sum*(-rc11*(CF_31 -
      CS_31*max_lambda_0_33) + (rc20)*(CF_32 - CS_32*max_lambda_0_33) + (rc21)*(CF_33 - CS_33*max_lambda_0_33)) +
      (rc19)*delta_2*inv_omega_sum*((rc23)*(CF_33 - CS_33*max_lambda_0_33) - rc22*(CF_34 - CS_34*max_lambda_0_33) +
      (rc21)*(CF_35 - CS_35*max_lambda_0_33));

    OPS_ACCS(wk0_B0, 0,0) = 0.707106781186547*AVG_0_rho*Recon_2*inv_AVG_a +
      0.707106781186547*AVG_0_rho*Recon_3*inv_AVG_a + Recon_0;

    OPS_ACCS(wk1_B0, 0,0) = 0.707106781186547*AVG_0_rho*Recon_2*inv_AVG_a*(AVG_0_a + AVG_0_u0) +
      0.707106781186547*AVG_0_rho*Recon_3*inv_AVG_a*(-AVG_0_a + AVG_0_u0) + AVG_0_u0*Recon_0;

    OPS_ACCS(wk2_B0, 0,0) = 0.707106781186547*AVG_0_rho*AVG_0_u1*Recon_2*inv_AVG_a +
      0.707106781186547*AVG_0_rho*AVG_0_u1*Recon_3*inv_AVG_a - AVG_0_rho*Recon_1 + AVG_0_u1*Recon_0;

    OPS_ACCS(wk3_B0, 0,0) = -AVG_0_rho*AVG_0_u1*Recon_1 +
      0.707106781186547*AVG_0_rho*Recon_2*inv_AVG_a*(rcinv24*((rc13)*gamma_m1*(pow(AVG_0_u0, 2) + pow(AVG_0_u1, 2)) +
      pow(AVG_0_a, 2)) + AVG_0_a*AVG_0_u0) +
      0.707106781186547*AVG_0_rho*Recon_3*inv_AVG_a*(rcinv24*((rc13)*gamma_m1*(pow(AVG_0_u0, 2) + pow(AVG_0_u1, 2)) +
      pow(AVG_0_a, 2)) - AVG_0_a*AVG_0_u0) + Recon_0*((rc13)*pow(AVG_0_u0, 2) + (rc13)*pow(AVG_0_u1, 2));

}


__kernel void ops_opensbliblock00Kernel003(
__global const double* restrict arg0,
__global const double* restrict arg1,
__global const double* restrict arg2,
__global const double* restrict arg3,
__global const double* restrict arg4,
__global const double* restrict arg5,
__global const double* restrict arg6,
__global const double* restrict arg7,
__global const double* restrict arg8,
__global double* restrict arg9,
__global double* restrict arg10,
__global double* restrict arg11,
__global double* restrict arg12,
__global double* restrict arg13,
const double eps,
const double gama,
const double gamma_m1,
const double teno_a1,
const double teno_a2,
const double rc8,
const double rc11,
const double rc13,
const double rc15,
const double rc16,
const double rc17,
const double rc18,
const double rc19,
const double rc20,
const double rc21,
const double rc22,
const double rc23,
const double rcinv24,
const int base0,
const int base1,
const int base2,
const int base3,
const int base4,
const int base5,
const int base6,
const int base7,
const int base8,
const int base9,
const int base10,
const int base11,
const int base12,
const int base13,
const int size0,
const int size1 ){


  int idx_y = get_global_id(1);
  int idx_x = get_global_id(0);

  if (idx_x < size0 && idx_y < size1) {
    const ptr_double ptr0 = { &arg0[base0 + idx_x * 1*1 + idx_y * 1*1 * xdim0_opensbliblock00Kernel003], xdim0_opensbliblock00Kernel003};
    const ptr_double ptr1 = { &arg1[base1 + idx_x * 1*1 + idx_y * 1*1 * xdim1_opensbliblock00Kernel003], xdim1_opensbliblock00Kernel003};
    const ptr_double ptr2 = { &arg2[base2 + idx_x * 1*1 + idx_y * 1*1 * xdim2_opensbliblock00Kernel003], xdim2_opensbliblock00Kernel003};
    const ptr_double ptr3 = { &arg3[base3 + idx_x * 1*1 + idx_y * 1*1 * xdim3_opensbliblock00Kernel003], xdim3_opensbliblock00Kernel003};
    const ptr_double ptr4 = { &arg4[base4 + idx_x * 1*1 + idx_y * 1*1 * xdim4_opensbliblock00Kernel003], xdim4_opensbliblock00Kernel003};
    const ptr_double ptr5 = { &arg5[base5 + idx_x * 1*1 + idx_y * 1*1 * xdim5_opensbliblock00Kernel003], xdim5_opensbliblock00Kernel003};
    const ptr_double ptr6 = { &arg6[base6 + idx_x * 1*1 + idx_y * 1*1 * xdim6_opensbliblock00Kernel003], xdim6_opensbliblock00Kernel003};
    const ptr_double ptr7 = { &arg7[base7 + idx_x * 1*1 + idx_y * 1*1 * xdim7_opensbliblock00Kernel003], xdim7_opensbliblock00Kernel003};
    const ptr_double ptr8 = { &arg8[base8 + idx_x * 1*1 + idx_y * 1*1 * xdim8_opensbliblock00Kernel003], xdim8_opensbliblock00Kernel003};
    ptr_double ptr9 = { &arg9[base9 + idx_x * 1*1 + idx_y * 1*1 * xdim9_opensbliblock00Kernel003], xdim9_opensbliblock00Kernel003};
    ptr_double ptr10 = { &arg10[base10 + idx_x * 1*1 + idx_y * 1*1 * xdim10_opensbliblock00Kernel003], xdim10_opensbliblock00Kernel003};
    ptr_double ptr11 = { &arg11[base11 + idx_x * 1*1 + idx_y * 1*1 * xdim11_opensbliblock00Kernel003], xdim11_opensbliblock00Kernel003};
    ptr_double ptr12 = { &arg12[base12 + idx_x * 1*1 + idx_y * 1*1 * xdim12_opensbliblock00Kernel003], xdim12_opensbliblock00Kernel003};
    ptr_double ptr13 = { &arg13[base13 + idx_x * 1*1 + idx_y * 1*1 * xdim13_opensbliblock00Kernel003], xdim13_opensbliblock00Kernel003};
    opensbliblock00Kernel003(ptr0,
                                  ptr1,
                                  ptr2,
                                  ptr3,
                                  ptr4,
                                  ptr5,
                                  ptr6,
                                  ptr7,
                                  ptr8,
                                  ptr9,
                                  ptr10,
                                  ptr11,
                                  ptr12,
                                  ptr13,
                                  eps,
                                  gama,
                                  gamma_m1,
                                  teno_a1,
                                  teno_a2,
                                  rc8,
                                  rc11,
                                  rc13,
                                  rc15,
                                  rc16,
                                  rc17,
                                  rc18,
                                  rc19,
                                  rc20,
                                  rc21,
                                  rc22,
                                  rc23,
                                  rcinv24);
  }

}
